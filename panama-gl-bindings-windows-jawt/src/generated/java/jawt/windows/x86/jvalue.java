// Generated by jextract

package jawt.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jvalue {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_CHAR$LAYOUT.withName("z"),
        Constants$root.C_CHAR$LAYOUT.withName("b"),
        Constants$root.C_SHORT$LAYOUT.withName("c"),
        Constants$root.C_SHORT$LAYOUT.withName("s"),
        Constants$root.C_LONG$LAYOUT.withName("i"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("j"),
        Constants$root.C_FLOAT$LAYOUT.withName("f"),
        Constants$root.C_DOUBLE$LAYOUT.withName("d"),
        Constants$root.C_POINTER$LAYOUT.withName("l")
    ).withName("jvalue");
    public static MemoryLayout $LAYOUT() {
        return jvalue.$union$LAYOUT;
    }
    static final VarHandle z$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("z"));
    public static VarHandle z$VH() {
        return jvalue.z$VH;
    }
    public static byte z$get(MemorySegment seg) {
        return (byte)jvalue.z$VH.get(seg);
    }
    public static void z$set( MemorySegment seg, byte x) {
        jvalue.z$VH.set(seg, x);
    }
    public static byte z$get(MemorySegment seg, long index) {
        return (byte)jvalue.z$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, byte x) {
        jvalue.z$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b"));
    public static VarHandle b$VH() {
        return jvalue.b$VH;
    }
    public static byte b$get(MemorySegment seg) {
        return (byte)jvalue.b$VH.get(seg);
    }
    public static void b$set( MemorySegment seg, byte x) {
        jvalue.b$VH.set(seg, x);
    }
    public static byte b$get(MemorySegment seg, long index) {
        return (byte)jvalue.b$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, byte x) {
        jvalue.b$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("c"));
    public static VarHandle c$VH() {
        return jvalue.c$VH;
    }
    public static short c$get(MemorySegment seg) {
        return (short)jvalue.c$VH.get(seg);
    }
    public static void c$set( MemorySegment seg, short x) {
        jvalue.c$VH.set(seg, x);
    }
    public static short c$get(MemorySegment seg, long index) {
        return (short)jvalue.c$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c$set(MemorySegment seg, long index, short x) {
        jvalue.c$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle s$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("s"));
    public static VarHandle s$VH() {
        return jvalue.s$VH;
    }
    public static short s$get(MemorySegment seg) {
        return (short)jvalue.s$VH.get(seg);
    }
    public static void s$set( MemorySegment seg, short x) {
        jvalue.s$VH.set(seg, x);
    }
    public static short s$get(MemorySegment seg, long index) {
        return (short)jvalue.s$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void s$set(MemorySegment seg, long index, short x) {
        jvalue.s$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle i$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("i"));
    public static VarHandle i$VH() {
        return jvalue.i$VH;
    }
    public static int i$get(MemorySegment seg) {
        return (int)jvalue.i$VH.get(seg);
    }
    public static void i$set( MemorySegment seg, int x) {
        jvalue.i$VH.set(seg, x);
    }
    public static int i$get(MemorySegment seg, long index) {
        return (int)jvalue.i$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void i$set(MemorySegment seg, long index, int x) {
        jvalue.i$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle j$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("j"));
    public static VarHandle j$VH() {
        return jvalue.j$VH;
    }
    public static long j$get(MemorySegment seg) {
        return (long)jvalue.j$VH.get(seg);
    }
    public static void j$set( MemorySegment seg, long x) {
        jvalue.j$VH.set(seg, x);
    }
    public static long j$get(MemorySegment seg, long index) {
        return (long)jvalue.j$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void j$set(MemorySegment seg, long index, long x) {
        jvalue.j$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle f$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f"));
    public static VarHandle f$VH() {
        return jvalue.f$VH;
    }
    public static float f$get(MemorySegment seg) {
        return (float)jvalue.f$VH.get(seg);
    }
    public static void f$set( MemorySegment seg, float x) {
        jvalue.f$VH.set(seg, x);
    }
    public static float f$get(MemorySegment seg, long index) {
        return (float)jvalue.f$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void f$set(MemorySegment seg, long index, float x) {
        jvalue.f$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle d$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("d"));
    public static VarHandle d$VH() {
        return jvalue.d$VH;
    }
    public static double d$get(MemorySegment seg) {
        return (double)jvalue.d$VH.get(seg);
    }
    public static void d$set( MemorySegment seg, double x) {
        jvalue.d$VH.set(seg, x);
    }
    public static double d$get(MemorySegment seg, long index) {
        return (double)jvalue.d$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void d$set(MemorySegment seg, long index, double x) {
        jvalue.d$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle l$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("l"));
    public static VarHandle l$VH() {
        return jvalue.l$VH;
    }
    public static MemoryAddress l$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)jvalue.l$VH.get(seg);
    }
    public static void l$set( MemorySegment seg, MemoryAddress x) {
        jvalue.l$VH.set(seg, x);
    }
    public static MemoryAddress l$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)jvalue.l$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void l$set(MemorySegment seg, long index, MemoryAddress x) {
        jvalue.l$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


