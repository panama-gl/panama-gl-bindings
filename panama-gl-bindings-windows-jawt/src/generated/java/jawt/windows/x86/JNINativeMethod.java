// Generated by jextract

package jawt.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JNINativeMethod {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("signature"),
        Constants$root.C_POINTER$LAYOUT.withName("fnPtr")
    );
    public static MemoryLayout $LAYOUT() {
        return JNINativeMethod.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return JNINativeMethod.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        JNINativeMethod.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        JNINativeMethod.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle signature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signature"));
    public static VarHandle signature$VH() {
        return JNINativeMethod.signature$VH;
    }
    public static MemoryAddress signature$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.signature$VH.get(seg);
    }
    public static void signature$set( MemorySegment seg, MemoryAddress x) {
        JNINativeMethod.signature$VH.set(seg, x);
    }
    public static MemoryAddress signature$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.signature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signature$set(MemorySegment seg, long index, MemoryAddress x) {
        JNINativeMethod.signature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fnPtr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fnPtr"));
    public static VarHandle fnPtr$VH() {
        return JNINativeMethod.fnPtr$VH;
    }
    public static MemoryAddress fnPtr$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.fnPtr$VH.get(seg);
    }
    public static void fnPtr$set( MemorySegment seg, MemoryAddress x) {
        JNINativeMethod.fnPtr$VH.set(seg, x);
    }
    public static MemoryAddress fnPtr$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JNINativeMethod.fnPtr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fnPtr$set(MemorySegment seg, long index, MemoryAddress x) {
        JNINativeMethod.fnPtr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


