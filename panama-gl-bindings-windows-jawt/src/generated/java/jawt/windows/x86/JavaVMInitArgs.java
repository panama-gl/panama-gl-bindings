// Generated by jextract

package jawt.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class JavaVMInitArgs {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("version"),
        Constants$root.C_LONG$LAYOUT.withName("nOptions"),
        Constants$root.C_POINTER$LAYOUT.withName("options"),
        Constants$root.C_CHAR$LAYOUT.withName("ignoreUnrecognized"),
        MemoryLayout.paddingLayout(56)
    ).withName("JavaVMInitArgs");
    public static MemoryLayout $LAYOUT() {
        return JavaVMInitArgs.$struct$LAYOUT;
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return JavaVMInitArgs.version$VH;
    }
    public static int version$get(MemorySegment seg) {
        return (int)JavaVMInitArgs.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, int x) {
        JavaVMInitArgs.version$VH.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)JavaVMInitArgs.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        JavaVMInitArgs.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nOptions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nOptions"));
    public static VarHandle nOptions$VH() {
        return JavaVMInitArgs.nOptions$VH;
    }
    public static int nOptions$get(MemorySegment seg) {
        return (int)JavaVMInitArgs.nOptions$VH.get(seg);
    }
    public static void nOptions$set( MemorySegment seg, int x) {
        JavaVMInitArgs.nOptions$VH.set(seg, x);
    }
    public static int nOptions$get(MemorySegment seg, long index) {
        return (int)JavaVMInitArgs.nOptions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nOptions$set(MemorySegment seg, long index, int x) {
        JavaVMInitArgs.nOptions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle options$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("options"));
    public static VarHandle options$VH() {
        return JavaVMInitArgs.options$VH;
    }
    public static MemoryAddress options$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)JavaVMInitArgs.options$VH.get(seg);
    }
    public static void options$set( MemorySegment seg, MemoryAddress x) {
        JavaVMInitArgs.options$VH.set(seg, x);
    }
    public static MemoryAddress options$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)JavaVMInitArgs.options$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void options$set(MemorySegment seg, long index, MemoryAddress x) {
        JavaVMInitArgs.options$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ignoreUnrecognized$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ignoreUnrecognized"));
    public static VarHandle ignoreUnrecognized$VH() {
        return JavaVMInitArgs.ignoreUnrecognized$VH;
    }
    public static byte ignoreUnrecognized$get(MemorySegment seg) {
        return (byte)JavaVMInitArgs.ignoreUnrecognized$VH.get(seg);
    }
    public static void ignoreUnrecognized$set( MemorySegment seg, byte x) {
        JavaVMInitArgs.ignoreUnrecognized$VH.set(seg, x);
    }
    public static byte ignoreUnrecognized$get(MemorySegment seg, long index) {
        return (byte)JavaVMInitArgs.ignoreUnrecognized$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ignoreUnrecognized$set(MemorySegment seg, long index, byte x) {
        JavaVMInitArgs.ignoreUnrecognized$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


