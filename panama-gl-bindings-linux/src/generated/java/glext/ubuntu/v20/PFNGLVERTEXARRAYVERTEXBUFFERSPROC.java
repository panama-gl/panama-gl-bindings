// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLVERTEXARRAYVERTEXBUFFERSPROC {

    void apply(int vaobj, int first, int count, java.lang.foreign.MemoryAddress buffers, java.lang.foreign.MemoryAddress offsets, java.lang.foreign.MemoryAddress strides);
    static MemorySegment allocate(PFNGLVERTEXARRAYVERTEXBUFFERSPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLVERTEXARRAYVERTEXBUFFERSPROC.class, fi, constants$297.PFNGLVERTEXARRAYVERTEXBUFFERSPROC$FUNC, session);
    }
    static PFNGLVERTEXARRAYVERTEXBUFFERSPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _vaobj, int _first, int _count, java.lang.foreign.MemoryAddress _buffers, java.lang.foreign.MemoryAddress _offsets, java.lang.foreign.MemoryAddress _strides) -> {
            try {
                constants$297.PFNGLVERTEXARRAYVERTEXBUFFERSPROC$MH.invokeExact((Addressable)symbol, _vaobj, _first, _count, (java.lang.foreign.Addressable)_buffers, (java.lang.foreign.Addressable)_offsets, (java.lang.foreign.Addressable)_strides);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


