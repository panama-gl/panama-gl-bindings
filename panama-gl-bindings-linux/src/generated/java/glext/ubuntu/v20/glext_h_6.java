// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glext_h_6 extends glext_h_5 {

    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int cap) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int cap) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double near_val,  double far_val) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2i$MH,"glRasterPos2i");
    }
    public static void glRasterPos2i ( int x,  int y) {
        var mh$ = glRasterPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2s$MH,"glRasterPos2s");
    }
    public static void glRasterPos2s ( short x,  short y) {
        var mh$ = glRasterPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3d$MH,"glRasterPos3d");
    }
    public static void glRasterPos3d ( double x,  double y,  double z) {
        var mh$ = glRasterPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3f$MH,"glRasterPos3f");
    }
    public static void glRasterPos3f ( float x,  float y,  float z) {
        var mh$ = glRasterPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3i$MH,"glRasterPos3i");
    }
    public static void glRasterPos3i ( int x,  int y,  int z) {
        var mh$ = glRasterPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3s$MH,"glRasterPos3s");
    }
    public static void glRasterPos3s ( short x,  short y,  short z) {
        var mh$ = glRasterPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4d$MH,"glRasterPos4d");
    }
    public static void glRasterPos4d ( double x,  double y,  double z,  double w) {
        var mh$ = glRasterPos4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4f$MH,"glRasterPos4f");
    }
    public static void glRasterPos4f ( float x,  float y,  float z,  float w) {
        var mh$ = glRasterPos4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4i$MH,"glRasterPos4i");
    }
    public static void glRasterPos4i ( int x,  int y,  int z,  int w) {
        var mh$ = glRasterPos4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4s$MH,"glRasterPos4s");
    }
    public static void glRasterPos4s ( short x,  short y,  short z,  short w) {
        var mh$ = glRasterPos4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2dv$MH,"glRasterPos2dv");
    }
    public static void glRasterPos2dv ( Addressable v) {
        var mh$ = glRasterPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2fv$MH,"glRasterPos2fv");
    }
    public static void glRasterPos2fv ( Addressable v) {
        var mh$ = glRasterPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2iv$MH,"glRasterPos2iv");
    }
    public static void glRasterPos2iv ( Addressable v) {
        var mh$ = glRasterPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2sv$MH,"glRasterPos2sv");
    }
    public static void glRasterPos2sv ( Addressable v) {
        var mh$ = glRasterPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = glRasterPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = glRasterPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = glRasterPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = glRasterPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = glRasterPos4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = glRasterPos4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = glRasterPos4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = glRasterPos4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = glRectd$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = glRectf$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = glRecti$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = glRects$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectdv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectfv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectiv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectsv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glVertexPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = glNormalPointer$MH();
        try {
            mh$.invokeExact(type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glTexCoordPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable ptr) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = glInterleavedArrays$MH();
        try {
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = glShadeModel$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = glLightf$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = glLighti$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = glLightModelf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = glLightModeli$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = glLightModelfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = glLightModeliv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = glMaterialf$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = glMateriali$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = glPixelZoom$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = glPixelStoref$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = glPixelStorei$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = glPixelTransferf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = glPixelTransferi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapfv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapusv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glReadPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = glStencilFunc$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = glStencilMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = glStencilOp$MH();
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = glTexGend$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = glTexGenf$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = glTexGeni$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = glTexEnvf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = glTexEnvi$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = glTexParameterf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = glTexParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalFormat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalFormat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTextures$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = glIsTexture$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1d$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1f$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2d$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2f$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = glMapGrid1d$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = glMapGrid1f$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = glMapGrid2d$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = glMapGrid2f$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = glPassThrough$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = glSelectBuffer$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = glInitNames$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = glLoadName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = glPushName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = glPopName$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElements$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glDrawRangeElements$MH,"glDrawRangeElements");
    }
    public static void glDrawRangeElements ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElements$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexImage3D$MH,"glTexImage3D");
    }
    public static void glTexImage3D ( int target,  int level,  int internalFormat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage3D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexSubImage3D$MH,"glTexSubImage3D");
    }
    public static void glTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glCopyTexSubImage3D$MH,"glCopyTexSubImage3D");
    }
    public static void glCopyTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTable$MH,"glColorTable");
    }
    public static void glColorTable ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = glColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorSubTable$MH,"glColorSubTable");
    }
    public static void glColorSubTable ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = glColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, count, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameteriv$MH,"glColorTableParameteriv");
    }
    public static void glColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameterfv$MH,"glColorTableParameterfv");
    }
    public static void glColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorSubTable$MH,"glCopyColorSubTable");
    }
    public static void glCopyColorSubTable ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = glCopyColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorTable$MH,"glCopyColorTable");
    }
    public static void glCopyColorTable ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTable$MH,"glGetColorTable");
    }
    public static void glGetColorTable ( int target,  int format,  int type,  Addressable table) {
        var mh$ = glGetColorTable$MH();
        try {
            mh$.invokeExact(target, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameterfv$MH,"glGetColorTableParameterfv");
    }
    public static void glGetColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameteriv$MH,"glGetColorTableParameteriv");
    }
    public static void glGetColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquation$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendEquation$MH,"glBlendEquation");
    }
    public static void glBlendEquation ( int mode) {
        var mh$ = glBlendEquation$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColor$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendColor$MH,"glBlendColor");
    }
    public static void glBlendColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glHistogram$MH,"glHistogram");
    }
    public static void glHistogram ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = glHistogram$MH();
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetHistogram$MH,"glResetHistogram");
    }
    public static void glResetHistogram ( int target) {
        var mh$ = glResetHistogram$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogram$MH,"glGetHistogram");
    }
    public static void glGetHistogram ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetHistogram$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameterfv$MH,"glGetHistogramParameterfv");
    }
    public static void glGetHistogramParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameteriv$MH,"glGetHistogramParameteriv");
    }
    public static void glGetHistogramParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glMinmax$MH,"glMinmax");
    }
    public static void glMinmax ( int target,  int internalformat,  byte sink) {
        var mh$ = glMinmax$MH();
        try {
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetMinmax$MH,"glResetMinmax");
    }
    public static void glResetMinmax ( int target) {
        var mh$ = glResetMinmax$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmax$MH,"glGetMinmax");
    }
    public static void glGetMinmax ( int target,  byte reset,  int format,  int types,  Addressable values) {
        var mh$ = glGetMinmax$MH();
        try {
            mh$.invokeExact(target, reset, format, types, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameterfv$MH,"glGetMinmaxParameterfv");
    }
    public static void glGetMinmaxParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameteriv$MH,"glGetMinmaxParameteriv");
    }
    public static void glGetMinmaxParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter1D$MH,"glConvolutionFilter1D");
    }
    public static void glConvolutionFilter1D ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter2D$MH,"glConvolutionFilter2D");
    }
    public static void glConvolutionFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionParameterf$MH,"glConvolutionParameterf");
    }
    public static void glConvolutionParameterf ( int target,  int pname,  float params) {
        var mh$ = glConvolutionParameterf$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameterfv$MH,"glConvolutionParameterfv");
    }
    public static void glConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteri$MH,"glConvolutionParameteri");
    }
    public static void glConvolutionParameteri ( int target,  int pname,  int params) {
        var mh$ = glConvolutionParameteri$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteriv$MH,"glConvolutionParameteriv");
    }
    public static void glConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter1D$MH,"glCopyConvolutionFilter1D");
    }
    public static void glCopyConvolutionFilter1D ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter2D$MH,"glCopyConvolutionFilter2D");
    }
    public static void glCopyConvolutionFilter2D ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetConvolutionFilter$MH,"glGetConvolutionFilter");
    }
    public static void glGetConvolutionFilter ( int target,  int format,  int type,  Addressable image) {
        var mh$ = glGetConvolutionFilter$MH();
        try {
            mh$.invokeExact(target, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameterfv$MH,"glGetConvolutionParameterfv");
    }
    public static void glGetConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameteriv$MH,"glGetConvolutionParameteriv");
    }
    public static void glGetConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSeparableFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glSeparableFilter2D$MH,"glSeparableFilter2D");
    }
    public static void glSeparableFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable row,  Addressable column) {
        var mh$ = glSeparableFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, row, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetSeparableFilter$MH,"glGetSeparableFilter");
    }
    public static void glGetSeparableFilter ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = glGetSeparableFilter$MH();
        try {
            mh$.invokeExact(target, format, type, row, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glActiveTexture$MH,"glActiveTexture");
    }
    public static void glActiveTexture ( int texture) {
        var mh$ = glActiveTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glClientActiveTexture$MH,"glClientActiveTexture");
    }
    public static void glClientActiveTexture ( int texture) {
        var mh$ = glClientActiveTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage1D$MH,"glCompressedTexImage1D");
    }
    public static void glCompressedTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage2D$MH,"glCompressedTexImage2D");
    }
    public static void glCompressedTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage3D$MH,"glCompressedTexImage3D");
    }
    public static void glCompressedTexImage3D ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage3D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage1D$MH,"glCompressedTexSubImage1D");
    }
    public static void glCompressedTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage2D$MH,"glCompressedTexSubImage2D");
    }
    public static void glCompressedTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage3D$MH,"glCompressedTexSubImage3D");
    }
    public static void glCompressedTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glGetCompressedTexImage$MH,"glGetCompressedTexImage");
    }
    public static void glGetCompressedTexImage ( int target,  int lod,  Addressable img) {
        var mh$ = glGetCompressedTexImage$MH();
        try {
            mh$.invokeExact(target, lod, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1d$MH,"glMultiTexCoord1d");
    }
    public static void glMultiTexCoord1d ( int target,  double s) {
        var mh$ = glMultiTexCoord1d$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1dv$MH,"glMultiTexCoord1dv");
    }
    public static void glMultiTexCoord1dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1f$MH,"glMultiTexCoord1f");
    }
    public static void glMultiTexCoord1f ( int target,  float s) {
        var mh$ = glMultiTexCoord1f$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1fv$MH,"glMultiTexCoord1fv");
    }
    public static void glMultiTexCoord1fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1i$MH,"glMultiTexCoord1i");
    }
    public static void glMultiTexCoord1i ( int target,  int s) {
        var mh$ = glMultiTexCoord1i$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1iv$MH,"glMultiTexCoord1iv");
    }
    public static void glMultiTexCoord1iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1s$MH,"glMultiTexCoord1s");
    }
    public static void glMultiTexCoord1s ( int target,  short s) {
        var mh$ = glMultiTexCoord1s$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1sv$MH,"glMultiTexCoord1sv");
    }
    public static void glMultiTexCoord1sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2d$MH,"glMultiTexCoord2d");
    }
    public static void glMultiTexCoord2d ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2d$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2dv$MH,"glMultiTexCoord2dv");
    }
    public static void glMultiTexCoord2dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2f$MH,"glMultiTexCoord2f");
    }
    public static void glMultiTexCoord2f ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2f$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2fv$MH,"glMultiTexCoord2fv");
    }
    public static void glMultiTexCoord2fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2i$MH,"glMultiTexCoord2i");
    }
    public static void glMultiTexCoord2i ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2i$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2iv$MH,"glMultiTexCoord2iv");
    }
    public static void glMultiTexCoord2iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2s$MH,"glMultiTexCoord2s");
    }
    public static void glMultiTexCoord2s ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2s$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2sv$MH,"glMultiTexCoord2sv");
    }
    public static void glMultiTexCoord2sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord3d$MH,"glMultiTexCoord3d");
    }
    public static void glMultiTexCoord3d ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3d$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3dv$MH,"glMultiTexCoord3dv");
    }
    public static void glMultiTexCoord3dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3f$MH,"glMultiTexCoord3f");
    }
    public static void glMultiTexCoord3f ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3f$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3fv$MH,"glMultiTexCoord3fv");
    }
    public static void glMultiTexCoord3fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3i$MH,"glMultiTexCoord3i");
    }
    public static void glMultiTexCoord3i ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3i$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3iv$MH,"glMultiTexCoord3iv");
    }
    public static void glMultiTexCoord3iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3s$MH,"glMultiTexCoord3s");
    }
    public static void glMultiTexCoord3s ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3s$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord3sv$MH,"glMultiTexCoord3sv");
    }
    public static void glMultiTexCoord3sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4d$MH,"glMultiTexCoord4d");
    }
    public static void glMultiTexCoord4d ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4d$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4dv$MH,"glMultiTexCoord4dv");
    }
    public static void glMultiTexCoord4dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4f$MH,"glMultiTexCoord4f");
    }
    public static void glMultiTexCoord4f ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4f$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4fv$MH,"glMultiTexCoord4fv");
    }
    public static void glMultiTexCoord4fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4i$MH,"glMultiTexCoord4i");
    }
    public static void glMultiTexCoord4i ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4i$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4iv$MH,"glMultiTexCoord4iv");
    }
    public static void glMultiTexCoord4iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4s$MH,"glMultiTexCoord4s");
    }
    public static void glMultiTexCoord4s ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4s$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4sv$MH,"glMultiTexCoord4sv");
    }
    public static void glMultiTexCoord4sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixd$MH,"glLoadTransposeMatrixd");
    }
    public static void glLoadTransposeMatrixd ( Addressable m) {
        var mh$ = glLoadTransposeMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixf$MH,"glLoadTransposeMatrixf");
    }
    public static void glLoadTransposeMatrixf ( Addressable m) {
        var mh$ = glLoadTransposeMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultTransposeMatrixd$MH,"glMultTransposeMatrixd");
    }
    public static void glMultTransposeMatrixd ( Addressable m) {
        var mh$ = glMultTransposeMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glMultTransposeMatrixf$MH,"glMultTransposeMatrixf");
    }
    public static void glMultTransposeMatrixf ( Addressable m) {
        var mh$ = glMultTransposeMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverage$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glSampleCoverage$MH,"glSampleCoverage");
    }
    public static void glSampleCoverage ( float value,  byte invert) {
        var mh$ = glSampleCoverage$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = glActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = glClientActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = glMultiTexCoord1dARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = glMultiTexCoord1fARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = glMultiTexCoord1iARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = glMultiTexCoord1sARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2dARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2fARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2iARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2sARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt khronos_int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong khronos_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort khronos_int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfLong khronos_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong khronos_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat khronos_float_t = Constants$root.C_FLOAT$LAYOUT;
    public static OfLong khronos_stime_nanoseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int KHRONOS_FALSE() {
        return (int)0L;
    }
    public static int KHRONOS_TRUE() {
        return (int)1L;
    }
    public static int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE() {
        return (int)2147483647L;
    }
    public static MethodHandle glBlendFuncSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glBlendFuncSeparate$MH,"glBlendFuncSeparate");
    }
    public static void glBlendFuncSeparate ( int sfactorRGB,  int dfactorRGB,  int sfactorAlpha,  int dfactorAlpha) {
        var mh$ = glBlendFuncSeparate$MH();
        try {
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glMultiDrawArrays$MH,"glMultiDrawArrays");
    }
    public static void glMultiDrawArrays ( int mode,  Addressable first,  Addressable count,  int drawcount) {
        var mh$ = glMultiDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count, drawcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glMultiDrawElements$MH,"glMultiDrawElements");
    }
    public static void glMultiDrawElements ( int mode,  Addressable count,  int type,  Addressable indices,  int drawcount) {
        var mh$ = glMultiDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, drawcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glPointParameterf$MH,"glPointParameterf");
    }
    public static void glPointParameterf ( int pname,  float param) {
        var mh$ = glPointParameterf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glPointParameterfv$MH,"glPointParameterfv");
    }
    public static void glPointParameterfv ( int pname,  Addressable params) {
        var mh$ = glPointParameterfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glPointParameteri$MH,"glPointParameteri");
    }
    public static void glPointParameteri ( int pname,  int param) {
        var mh$ = glPointParameteri$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glPointParameteriv$MH,"glPointParameteriv");
    }
    public static void glPointParameteriv ( int pname,  Addressable params) {
        var mh$ = glPointParameteriv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordf$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glFogCoordf$MH,"glFogCoordf");
    }
    public static void glFogCoordf ( float coord) {
        var mh$ = glFogCoordf$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glFogCoordfv$MH,"glFogCoordfv");
    }
    public static void glFogCoordfv ( Addressable coord) {
        var mh$ = glFogCoordfv$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordd$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glFogCoordd$MH,"glFogCoordd");
    }
    public static void glFogCoordd ( double coord) {
        var mh$ = glFogCoordd$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glFogCoorddv$MH,"glFogCoorddv");
    }
    public static void glFogCoorddv ( Addressable coord) {
        var mh$ = glFogCoorddv$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glFogCoordPointer$MH,"glFogCoordPointer");
    }
    public static void glFogCoordPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glFogCoordPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3b$MH,"glSecondaryColor3b");
    }
    public static void glSecondaryColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3bv$MH,"glSecondaryColor3bv");
    }
    public static void glSecondaryColor3bv ( Addressable v) {
        var mh$ = glSecondaryColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3d$MH,"glSecondaryColor3d");
    }
    public static void glSecondaryColor3d ( double red,  double green,  double blue) {
        var mh$ = glSecondaryColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3dv$MH,"glSecondaryColor3dv");
    }
    public static void glSecondaryColor3dv ( Addressable v) {
        var mh$ = glSecondaryColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3f$MH,"glSecondaryColor3f");
    }
    public static void glSecondaryColor3f ( float red,  float green,  float blue) {
        var mh$ = glSecondaryColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glSecondaryColor3fv$MH,"glSecondaryColor3fv");
    }
    public static void glSecondaryColor3fv ( Addressable v) {
        var mh$ = glSecondaryColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3i$MH,"glSecondaryColor3i");
    }
    public static void glSecondaryColor3i ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3iv$MH,"glSecondaryColor3iv");
    }
    public static void glSecondaryColor3iv ( Addressable v) {
        var mh$ = glSecondaryColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3s$MH,"glSecondaryColor3s");
    }
    public static void glSecondaryColor3s ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3sv$MH,"glSecondaryColor3sv");
    }
    public static void glSecondaryColor3sv ( Addressable v) {
        var mh$ = glSecondaryColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3ub$MH,"glSecondaryColor3ub");
    }
    public static void glSecondaryColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glSecondaryColor3ubv$MH,"glSecondaryColor3ubv");
    }
    public static void glSecondaryColor3ubv ( Addressable v) {
        var mh$ = glSecondaryColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glSecondaryColor3ui$MH,"glSecondaryColor3ui");
    }
    public static void glSecondaryColor3ui ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glSecondaryColor3uiv$MH,"glSecondaryColor3uiv");
    }
    public static void glSecondaryColor3uiv ( Addressable v) {
        var mh$ = glSecondaryColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glSecondaryColor3us$MH,"glSecondaryColor3us");
    }
    public static void glSecondaryColor3us ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glSecondaryColor3usv$MH,"glSecondaryColor3usv");
    }
    public static void glSecondaryColor3usv ( Addressable v) {
        var mh$ = glSecondaryColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glSecondaryColorPointer$MH,"glSecondaryColorPointer");
    }
    public static void glSecondaryColorPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glSecondaryColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glWindowPos2d$MH,"glWindowPos2d");
    }
    public static void glWindowPos2d ( double x,  double y) {
        var mh$ = glWindowPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2dv$MH,"glWindowPos2dv");
    }
    public static void glWindowPos2dv ( Addressable v) {
        var mh$ = glWindowPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2f$MH,"glWindowPos2f");
    }
    public static void glWindowPos2f ( float x,  float y) {
        var mh$ = glWindowPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2fv$MH,"glWindowPos2fv");
    }
    public static void glWindowPos2fv ( Addressable v) {
        var mh$ = glWindowPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2i$MH,"glWindowPos2i");
    }
    public static void glWindowPos2i ( int x,  int y) {
        var mh$ = glWindowPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2iv$MH,"glWindowPos2iv");
    }
    public static void glWindowPos2iv ( Addressable v) {
        var mh$ = glWindowPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glWindowPos2s$MH,"glWindowPos2s");
    }
    public static void glWindowPos2s ( short x,  short y) {
        var mh$ = glWindowPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos2sv$MH,"glWindowPos2sv");
    }
    public static void glWindowPos2sv ( Addressable v) {
        var mh$ = glWindowPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos3d$MH,"glWindowPos3d");
    }
    public static void glWindowPos3d ( double x,  double y,  double z) {
        var mh$ = glWindowPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos3dv$MH,"glWindowPos3dv");
    }
    public static void glWindowPos3dv ( Addressable v) {
        var mh$ = glWindowPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos3f$MH,"glWindowPos3f");
    }
    public static void glWindowPos3f ( float x,  float y,  float z) {
        var mh$ = glWindowPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos3fv$MH,"glWindowPos3fv");
    }
    public static void glWindowPos3fv ( Addressable v) {
        var mh$ = glWindowPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glWindowPos3i$MH,"glWindowPos3i");
    }
    public static void glWindowPos3i ( int x,  int y,  int z) {
        var mh$ = glWindowPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glWindowPos3iv$MH,"glWindowPos3iv");
    }
    public static void glWindowPos3iv ( Addressable v) {
        var mh$ = glWindowPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glWindowPos3s$MH,"glWindowPos3s");
    }
    public static void glWindowPos3s ( short x,  short y,  short z) {
        var mh$ = glWindowPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glWindowPos3sv$MH,"glWindowPos3sv");
    }
    public static void glWindowPos3sv ( Addressable v) {
        var mh$ = glWindowPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong GLsizeiptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glGenQueries$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glGenQueries$MH,"glGenQueries");
    }
    public static void glGenQueries ( int n,  Addressable ids) {
        var mh$ = glGenQueries$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteQueries$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glDeleteQueries$MH,"glDeleteQueries");
    }
    public static void glDeleteQueries ( int n,  Addressable ids) {
        var mh$ = glDeleteQueries$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glIsQuery$MH,"glIsQuery");
    }
    public static byte glIsQuery ( int id) {
        var mh$ = glIsQuery$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glBeginQuery$MH,"glBeginQuery");
    }
    public static void glBeginQuery ( int target,  int id) {
        var mh$ = glBeginQuery$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glEndQuery$MH,"glEndQuery");
    }
    public static void glEndQuery ( int target) {
        var mh$ = glEndQuery$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryiv$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glGetQueryiv$MH,"glGetQueryiv");
    }
    public static void glGetQueryiv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetQueryiv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glGetQueryObjectiv$MH,"glGetQueryObjectiv");
    }
    public static void glGetQueryObjectiv ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectiv$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glGetQueryObjectuiv$MH,"glGetQueryObjectuiv");
    }
    public static void glGetQueryObjectuiv ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectuiv$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glBindBuffer$MH,"glBindBuffer");
    }
    public static void glBindBuffer ( int target,  int buffer) {
        var mh$ = glBindBuffer$MH();
        try {
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glDeleteBuffers$MH,"glDeleteBuffers");
    }
    public static void glDeleteBuffers ( int n,  Addressable buffers) {
        var mh$ = glDeleteBuffers$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glGenBuffers$MH,"glGenBuffers");
    }
    public static void glGenBuffers ( int n,  Addressable buffers) {
        var mh$ = glGenBuffers$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glIsBuffer$MH,"glIsBuffer");
    }
    public static byte glIsBuffer ( int buffer) {
        var mh$ = glIsBuffer$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glBufferData$MH,"glBufferData");
    }
    public static void glBufferData ( int target,  long size,  Addressable data,  int usage) {
        var mh$ = glBufferData$MH();
        try {
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glBufferSubData$MH,"glBufferSubData");
    }
    public static void glBufferSubData ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glBufferSubData$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glGetBufferSubData$MH,"glGetBufferSubData");
    }
    public static void glGetBufferSubData ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glGetBufferSubData$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glMapBuffer$MH,"glMapBuffer");
    }
    public static MemoryAddress glMapBuffer ( int target,  int access) {
        var mh$ = glMapBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glUnmapBuffer$MH,"glUnmapBuffer");
    }
    public static byte glUnmapBuffer ( int target) {
        var mh$ = glUnmapBuffer$MH();
        try {
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glGetBufferParameteriv$MH,"glGetBufferParameteriv");
    }
    public static void glGetBufferParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glGetBufferPointerv$MH,"glGetBufferPointerv");
    }
    public static void glGetBufferPointerv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferPointerv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte GLchar = Constants$root.C_CHAR$LAYOUT;
    public static MethodHandle glBlendEquationSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glBlendEquationSeparate$MH,"glBlendEquationSeparate");
    }
    public static void glBlendEquationSeparate ( int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparate$MH();
        try {
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glDrawBuffers$MH,"glDrawBuffers");
    }
    public static void glDrawBuffers ( int n,  Addressable bufs) {
        var mh$ = glDrawBuffers$MH();
        try {
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOpSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glStencilOpSeparate$MH,"glStencilOpSeparate");
    }
    public static void glStencilOpSeparate ( int face,  int sfail,  int dpfail,  int dppass) {
        var mh$ = glStencilOpSeparate$MH();
        try {
            mh$.invokeExact(face, sfail, dpfail, dppass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFuncSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glStencilFuncSeparate$MH,"glStencilFuncSeparate");
    }
    public static void glStencilFuncSeparate ( int face,  int func,  int ref,  int mask) {
        var mh$ = glStencilFuncSeparate$MH();
        try {
            mh$.invokeExact(face, func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMaskSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glStencilMaskSeparate$MH,"glStencilMaskSeparate");
    }
    public static void glStencilMaskSeparate ( int face,  int mask) {
        var mh$ = glStencilMaskSeparate$MH();
        try {
            mh$.invokeExact(face, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAttachShader$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glAttachShader$MH,"glAttachShader");
    }
    public static void glAttachShader ( int program,  int shader) {
        var mh$ = glAttachShader$MH();
        try {
            mh$.invokeExact(program, shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindAttribLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glBindAttribLocation$MH,"glBindAttribLocation");
    }
    public static void glBindAttribLocation ( int program,  int index,  Addressable name) {
        var mh$ = glBindAttribLocation$MH();
        try {
            mh$.invokeExact(program, index, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileShader$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glCompileShader$MH,"glCompileShader");
    }
    public static void glCompileShader ( int shader) {
        var mh$ = glCompileShader$MH();
        try {
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glCreateProgram$MH,"glCreateProgram");
    }
    public static int glCreateProgram () {
        var mh$ = glCreateProgram$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShader$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glCreateShader$MH,"glCreateShader");
    }
    public static int glCreateShader ( int type) {
        var mh$ = glCreateShader$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glDeleteProgram$MH,"glDeleteProgram");
    }
    public static void glDeleteProgram ( int program) {
        var mh$ = glDeleteProgram$MH();
        try {
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteShader$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glDeleteShader$MH,"glDeleteShader");
    }
    public static void glDeleteShader ( int shader) {
        var mh$ = glDeleteShader$MH();
        try {
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDetachShader$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glDetachShader$MH,"glDetachShader");
    }
    public static void glDetachShader ( int program,  int shader) {
        var mh$ = glDetachShader$MH();
        try {
            mh$.invokeExact(program, shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribArray$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glDisableVertexAttribArray$MH,"glDisableVertexAttribArray");
    }
    public static void glDisableVertexAttribArray ( int index) {
        var mh$ = glDisableVertexAttribArray$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribArray$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glEnableVertexAttribArray$MH,"glEnableVertexAttribArray");
    }
    public static void glEnableVertexAttribArray ( int index) {
        var mh$ = glEnableVertexAttribArray$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glGetActiveAttrib$MH,"glGetActiveAttrib");
    }
    public static void glGetActiveAttrib ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveAttrib$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniform$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glGetActiveUniform$MH,"glGetActiveUniform");
    }
    public static void glGetActiveUniform ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveUniform$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttachedShaders$MH() {
        return RuntimeHelper.requireNonNull(constants$157.glGetAttachedShaders$MH,"glGetAttachedShaders");
    }
    public static void glGetAttachedShaders ( int program,  int maxCount,  Addressable count,  Addressable shaders) {
        var mh$ = glGetAttachedShaders$MH();
        try {
            mh$.invokeExact(program, maxCount, count, shaders);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttribLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetAttribLocation$MH,"glGetAttribLocation");
    }
    public static int glGetAttribLocation ( int program,  Addressable name) {
        var mh$ = glGetAttribLocation$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramiv$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetProgramiv$MH,"glGetProgramiv");
    }
    public static void glGetProgramiv ( int program,  int pname,  Addressable params) {
        var mh$ = glGetProgramiv$MH();
        try {
            mh$.invokeExact(program, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramInfoLog$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetProgramInfoLog$MH,"glGetProgramInfoLog");
    }
    public static void glGetProgramInfoLog ( int program,  int bufSize,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetProgramInfoLog$MH();
        try {
            mh$.invokeExact(program, bufSize, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderiv$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetShaderiv$MH,"glGetShaderiv");
    }
    public static void glGetShaderiv ( int shader,  int pname,  Addressable params) {
        var mh$ = glGetShaderiv$MH();
        try {
            mh$.invokeExact(shader, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderInfoLog$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetShaderInfoLog$MH,"glGetShaderInfoLog");
    }
    public static void glGetShaderInfoLog ( int shader,  int bufSize,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetShaderInfoLog$MH();
        try {
            mh$.invokeExact(shader, bufSize, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderSource$MH() {
        return RuntimeHelper.requireNonNull(constants$158.glGetShaderSource$MH,"glGetShaderSource");
    }
    public static void glGetShaderSource ( int shader,  int bufSize,  Addressable length,  Addressable source) {
        var mh$ = glGetShaderSource$MH();
        try {
            mh$.invokeExact(shader, bufSize, length, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetUniformLocation$MH,"glGetUniformLocation");
    }
    public static int glGetUniformLocation ( int program,  Addressable name) {
        var mh$ = glGetUniformLocation$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformfv$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetUniformfv$MH,"glGetUniformfv");
    }
    public static void glGetUniformfv ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformfv$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformiv$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetUniformiv$MH,"glGetUniformiv");
    }
    public static void glGetUniformiv ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformiv$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribdv$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetVertexAttribdv$MH,"glGetVertexAttribdv");
    }
    public static void glGetVertexAttribdv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribdv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribfv$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetVertexAttribfv$MH,"glGetVertexAttribfv");
    }
    public static void glGetVertexAttribfv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribfv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribiv$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glGetVertexAttribiv$MH,"glGetVertexAttribiv");
    }
    public static void glGetVertexAttribiv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribiv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glGetVertexAttribPointerv$MH,"glGetVertexAttribPointerv");
    }
    public static void glGetVertexAttribPointerv ( int index,  int pname,  Addressable pointer) {
        var mh$ = glGetVertexAttribPointerv$MH();
        try {
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glIsProgram$MH,"glIsProgram");
    }
    public static byte glIsProgram ( int program) {
        var mh$ = glIsProgram$MH();
        try {
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsShader$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glIsShader$MH,"glIsShader");
    }
    public static byte glIsShader ( int shader) {
        var mh$ = glIsShader$MH();
        try {
            return (byte)mh$.invokeExact(shader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLinkProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glLinkProgram$MH,"glLinkProgram");
    }
    public static void glLinkProgram ( int program) {
        var mh$ = glLinkProgram$MH();
        try {
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderSource$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glShaderSource$MH,"glShaderSource");
    }
    public static void glShaderSource ( int shader,  int count,  Addressable string,  Addressable length) {
        var mh$ = glShaderSource$MH();
        try {
            mh$.invokeExact(shader, count, string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glUseProgram$MH,"glUseProgram");
    }
    public static void glUseProgram ( int program) {
        var mh$ = glUseProgram$MH();
        try {
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1f$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform1f$MH,"glUniform1f");
    }
    public static void glUniform1f ( int location,  float v0) {
        var mh$ = glUniform1f$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2f$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform2f$MH,"glUniform2f");
    }
    public static void glUniform2f ( int location,  float v0,  float v1) {
        var mh$ = glUniform2f$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3f$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform3f$MH,"glUniform3f");
    }
    public static void glUniform3f ( int location,  float v0,  float v1,  float v2) {
        var mh$ = glUniform3f$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4f$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform4f$MH,"glUniform4f");
    }
    public static void glUniform4f ( int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glUniform4f$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1i$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform1i$MH,"glUniform1i");
    }
    public static void glUniform1i ( int location,  int v0) {
        var mh$ = glUniform1i$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2i$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glUniform2i$MH,"glUniform2i");
    }
    public static void glUniform2i ( int location,  int v0,  int v1) {
        var mh$ = glUniform2i$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3i$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform3i$MH,"glUniform3i");
    }
    public static void glUniform3i ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3i$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4i$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform4i$MH,"glUniform4i");
    }
    public static void glUniform4i ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4i$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform1fv$MH,"glUniform1fv");
    }
    public static void glUniform1fv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1fv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform2fv$MH,"glUniform2fv");
    }
    public static void glUniform2fv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2fv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform3fv$MH,"glUniform3fv");
    }
    public static void glUniform3fv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3fv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glUniform4fv$MH,"glUniform4fv");
    }
    public static void glUniform4fv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4fv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniform1iv$MH,"glUniform1iv");
    }
    public static void glUniform1iv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1iv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniform2iv$MH,"glUniform2iv");
    }
    public static void glUniform2iv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2iv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniform3iv$MH,"glUniform3iv");
    }
    public static void glUniform3iv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3iv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniform4iv$MH,"glUniform4iv");
    }
    public static void glUniform4iv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4iv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniformMatrix2fv$MH,"glUniformMatrix2fv");
    }
    public static void glUniformMatrix2fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glUniformMatrix3fv$MH,"glUniformMatrix3fv");
    }
    public static void glUniformMatrix3fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glUniformMatrix4fv$MH,"glUniformMatrix4fv");
    }
    public static void glUniformMatrix4fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glValidateProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glValidateProgram$MH,"glValidateProgram");
    }
    public static void glValidateProgram ( int program) {
        var mh$ = glValidateProgram$MH();
        try {
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1d$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glVertexAttrib1d$MH,"glVertexAttrib1d");
    }
    public static void glVertexAttrib1d ( int index,  double x) {
        var mh$ = glVertexAttrib1d$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glVertexAttrib1dv$MH,"glVertexAttrib1dv");
    }
    public static void glVertexAttrib1dv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1f$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glVertexAttrib1f$MH,"glVertexAttrib1f");
    }
    public static void glVertexAttrib1f ( int index,  float x) {
        var mh$ = glVertexAttrib1f$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glVertexAttrib1fv$MH,"glVertexAttrib1fv");
    }
    public static void glVertexAttrib1fv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1fv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1s$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib1s$MH,"glVertexAttrib1s");
    }
    public static void glVertexAttrib1s ( int index,  short x) {
        var mh$ = glVertexAttrib1s$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib1sv$MH,"glVertexAttrib1sv");
    }
    public static void glVertexAttrib1sv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1sv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2d$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib2d$MH,"glVertexAttrib2d");
    }
    public static void glVertexAttrib2d ( int index,  double x,  double y) {
        var mh$ = glVertexAttrib2d$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib2dv$MH,"glVertexAttrib2dv");
    }
    public static void glVertexAttrib2dv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2f$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib2f$MH,"glVertexAttrib2f");
    }
    public static void glVertexAttrib2f ( int index,  float x,  float y) {
        var mh$ = glVertexAttrib2f$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glVertexAttrib2fv$MH,"glVertexAttrib2fv");
    }
    public static void glVertexAttrib2fv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2fv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2s$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib2s$MH,"glVertexAttrib2s");
    }
    public static void glVertexAttrib2s ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2s$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib2sv$MH,"glVertexAttrib2sv");
    }
    public static void glVertexAttrib2sv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2sv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3d$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib3d$MH,"glVertexAttrib3d");
    }
    public static void glVertexAttrib3d ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttrib3d$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib3dv$MH,"glVertexAttrib3dv");
    }
    public static void glVertexAttrib3dv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3f$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib3f$MH,"glVertexAttrib3f");
    }
    public static void glVertexAttrib3f ( int index,  float x,  float y,  float z) {
        var mh$ = glVertexAttrib3f$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$166.glVertexAttrib3fv$MH,"glVertexAttrib3fv");
    }
    public static void glVertexAttrib3fv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3fv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3s$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib3s$MH,"glVertexAttrib3s");
    }
    public static void glVertexAttrib3s ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3s$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib3sv$MH,"glVertexAttrib3sv");
    }
    public static void glVertexAttrib3sv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3sv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nbv$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib4Nbv$MH,"glVertexAttrib4Nbv");
    }
    public static void glVertexAttrib4Nbv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Nbv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Niv$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib4Niv$MH,"glVertexAttrib4Niv");
    }
    public static void glVertexAttrib4Niv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Niv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nsv$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib4Nsv$MH,"glVertexAttrib4Nsv");
    }
    public static void glVertexAttrib4Nsv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Nsv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nub$MH() {
        return RuntimeHelper.requireNonNull(constants$167.glVertexAttrib4Nub$MH,"glVertexAttrib4Nub");
    }
    public static void glVertexAttrib4Nub ( int index,  byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertexAttrib4Nub$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nubv$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4Nubv$MH,"glVertexAttrib4Nubv");
    }
    public static void glVertexAttrib4Nubv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Nubv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4Nuiv$MH,"glVertexAttrib4Nuiv");
    }
    public static void glVertexAttrib4Nuiv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Nuiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4Nusv$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4Nusv$MH,"glVertexAttrib4Nusv");
    }
    public static void glVertexAttrib4Nusv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4Nusv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4bv$MH,"glVertexAttrib4bv");
    }
    public static void glVertexAttrib4bv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4bv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4d$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4d$MH,"glVertexAttrib4d");
    }
    public static void glVertexAttrib4d ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttrib4d$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$168.glVertexAttrib4dv$MH,"glVertexAttrib4dv");
    }
    public static void glVertexAttrib4dv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4f$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4f$MH,"glVertexAttrib4f");
    }
    public static void glVertexAttrib4f ( int index,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexAttrib4f$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4fv$MH,"glVertexAttrib4fv");
    }
    public static void glVertexAttrib4fv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4fv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4iv$MH,"glVertexAttrib4iv");
    }
    public static void glVertexAttrib4iv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4iv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4s$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4s$MH,"glVertexAttrib4s");
    }
    public static void glVertexAttrib4s ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4s$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4sv$MH,"glVertexAttrib4sv");
    }
    public static void glVertexAttrib4sv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4sv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$169.glVertexAttrib4ubv$MH,"glVertexAttrib4ubv");
    }
    public static void glVertexAttrib4ubv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ubv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$170.glVertexAttrib4uiv$MH,"glVertexAttrib4uiv");
    }
    public static void glVertexAttrib4uiv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4uiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$170.glVertexAttrib4usv$MH,"glVertexAttrib4usv");
    }
    public static void glVertexAttrib4usv ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4usv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$170.glVertexAttribPointer$MH,"glVertexAttribPointer");
    }
    public static void glVertexAttribPointer ( int index,  int size,  int type,  byte normalized,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribPointer$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2x3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$172.glUniformMatrix2x3fv$MH,"glUniformMatrix2x3fv");
    }
    public static void glUniformMatrix2x3fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2x3fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3x2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$172.glUniformMatrix3x2fv$MH,"glUniformMatrix3x2fv");
    }
    public static void glUniformMatrix3x2fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3x2fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2x4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$172.glUniformMatrix2x4fv$MH,"glUniformMatrix2x4fv");
    }
    public static void glUniformMatrix2x4fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2x4fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4x2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$173.glUniformMatrix4x2fv$MH,"glUniformMatrix4x2fv");
    }
    public static void glUniformMatrix4x2fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4x2fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3x4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$173.glUniformMatrix3x4fv$MH,"glUniformMatrix3x4fv");
    }
    public static void glUniformMatrix3x4fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3x4fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4x3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$173.glUniformMatrix4x3fv$MH,"glUniformMatrix4x3fv");
    }
    public static void glUniformMatrix4x3fv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4x3fv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaski$MH() {
        return RuntimeHelper.requireNonNull(constants$201.glColorMaski$MH,"glColorMaski");
    }
    public static void glColorMaski ( int index,  byte r,  byte g,  byte b,  byte a) {
        var mh$ = glColorMaski$MH();
        try {
            mh$.invokeExact(index, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleani_v$MH() {
        return RuntimeHelper.requireNonNull(constants$201.glGetBooleani_v$MH,"glGetBooleani_v");
    }
    public static void glGetBooleani_v ( int target,  int index,  Addressable data) {
        var mh$ = glGetBooleani_v$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegeri_v$MH() {
        return RuntimeHelper.requireNonNull(constants$201.glGetIntegeri_v$MH,"glGetIntegeri_v");
    }
    public static void glGetIntegeri_v ( int target,  int index,  Addressable data) {
        var mh$ = glGetIntegeri_v$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnablei$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glEnablei$MH,"glEnablei");
    }
    public static void glEnablei ( int target,  int index) {
        var mh$ = glEnablei$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisablei$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glDisablei$MH,"glDisablei");
    }
    public static void glDisablei ( int target,  int index) {
        var mh$ = glDisablei$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabledi$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glIsEnabledi$MH,"glIsEnabledi");
    }
    public static byte glIsEnabledi ( int target,  int index) {
        var mh$ = glIsEnabledi$MH();
        try {
            return (byte)mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glBeginTransformFeedback$MH,"glBeginTransformFeedback");
    }
    public static void glBeginTransformFeedback ( int primitiveMode) {
        var mh$ = glBeginTransformFeedback$MH();
        try {
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glEndTransformFeedback$MH,"glEndTransformFeedback");
    }
    public static void glEndTransformFeedback () {
        var mh$ = glEndTransformFeedback$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$202.glBindBufferRange$MH,"glBindBufferRange");
    }
    public static void glBindBufferRange ( int target,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glBindBufferRange$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferBase$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glBindBufferBase$MH,"glBindBufferBase");
    }
    public static void glBindBufferBase ( int target,  int index,  int buffer) {
        var mh$ = glBindBufferBase$MH();
        try {
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackVaryings$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glTransformFeedbackVaryings$MH,"glTransformFeedbackVaryings");
    }
    public static void glTransformFeedbackVaryings ( int program,  int count,  Addressable varyings,  int bufferMode) {
        var mh$ = glTransformFeedbackVaryings$MH();
        try {
            mh$.invokeExact(program, count, varyings, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackVarying$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glGetTransformFeedbackVarying$MH,"glGetTransformFeedbackVarying");
    }
    public static void glGetTransformFeedbackVarying ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetTransformFeedbackVarying$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClampColor$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glClampColor$MH,"glClampColor");
    }
    public static void glClampColor ( int target,  int clamp) {
        var mh$ = glClampColor$MH();
        try {
            mh$.invokeExact(target, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginConditionalRender$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glBeginConditionalRender$MH,"glBeginConditionalRender");
    }
    public static void glBeginConditionalRender ( int id,  int mode) {
        var mh$ = glBeginConditionalRender$MH();
        try {
            mh$.invokeExact(id, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndConditionalRender$MH() {
        return RuntimeHelper.requireNonNull(constants$203.glEndConditionalRender$MH,"glEndConditionalRender");
    }
    public static void glEndConditionalRender () {
        var mh$ = glEndConditionalRender$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glVertexAttribIPointer$MH,"glVertexAttribIPointer");
    }
    public static void glVertexAttribIPointer ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribIPointer$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glGetVertexAttribIiv$MH,"glGetVertexAttribIiv");
    }
    public static void glGetVertexAttribIiv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIiv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glGetVertexAttribIuiv$MH,"glGetVertexAttribIuiv");
    }
    public static void glGetVertexAttribIuiv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIuiv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1i$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glVertexAttribI1i$MH,"glVertexAttribI1i");
    }
    public static void glVertexAttribI1i ( int index,  int x) {
        var mh$ = glVertexAttribI1i$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2i$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glVertexAttribI2i$MH,"glVertexAttribI2i");
    }
    public static void glVertexAttribI2i ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2i$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3i$MH() {
        return RuntimeHelper.requireNonNull(constants$204.glVertexAttribI3i$MH,"glVertexAttribI3i");
    }
    public static void glVertexAttribI3i ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3i$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4i$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI4i$MH,"glVertexAttribI4i");
    }
    public static void glVertexAttribI4i ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4i$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI1ui$MH,"glVertexAttribI1ui");
    }
    public static void glVertexAttribI1ui ( int index,  int x) {
        var mh$ = glVertexAttribI1ui$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI2ui$MH,"glVertexAttribI2ui");
    }
    public static void glVertexAttribI2ui ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2ui$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI3ui$MH,"glVertexAttribI3ui");
    }
    public static void glVertexAttribI3ui ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3ui$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI4ui$MH,"glVertexAttribI4ui");
    }
    public static void glVertexAttribI4ui ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4ui$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$205.glVertexAttribI1iv$MH,"glVertexAttribI1iv");
    }
    public static void glVertexAttribI1iv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1iv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI2iv$MH,"glVertexAttribI2iv");
    }
    public static void glVertexAttribI2iv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2iv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI3iv$MH,"glVertexAttribI3iv");
    }
    public static void glVertexAttribI3iv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3iv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI4iv$MH,"glVertexAttribI4iv");
    }
    public static void glVertexAttribI4iv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4iv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI1uiv$MH,"glVertexAttribI1uiv");
    }
    public static void glVertexAttribI1uiv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1uiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI2uiv$MH,"glVertexAttribI2uiv");
    }
    public static void glVertexAttribI2uiv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2uiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$206.glVertexAttribI3uiv$MH,"glVertexAttribI3uiv");
    }
    public static void glVertexAttribI3uiv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3uiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glVertexAttribI4uiv$MH,"glVertexAttribI4uiv");
    }
    public static void glVertexAttribI4uiv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4uiv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glVertexAttribI4bv$MH,"glVertexAttribI4bv");
    }
    public static void glVertexAttribI4bv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4bv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glVertexAttribI4sv$MH,"glVertexAttribI4sv");
    }
    public static void glVertexAttribI4sv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4sv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glVertexAttribI4ubv$MH,"glVertexAttribI4ubv");
    }
    public static void glVertexAttribI4ubv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ubv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glVertexAttribI4usv$MH,"glVertexAttribI4usv");
    }
    public static void glVertexAttribI4usv ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4usv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$207.glGetUniformuiv$MH,"glGetUniformuiv");
    }
    public static void glGetUniformuiv ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformuiv$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragDataLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glBindFragDataLocation$MH,"glBindFragDataLocation");
    }
    public static void glBindFragDataLocation ( int program,  int color,  Addressable name) {
        var mh$ = glBindFragDataLocation$MH();
        try {
            mh$.invokeExact(program, color, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragDataLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glGetFragDataLocation$MH,"glGetFragDataLocation");
    }
    public static int glGetFragDataLocation ( int program,  Addressable name) {
        var mh$ = glGetFragDataLocation$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glUniform1ui$MH,"glUniform1ui");
    }
    public static void glUniform1ui ( int location,  int v0) {
        var mh$ = glUniform1ui$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glUniform2ui$MH,"glUniform2ui");
    }
    public static void glUniform2ui ( int location,  int v0,  int v1) {
        var mh$ = glUniform2ui$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glUniform3ui$MH,"glUniform3ui");
    }
    public static void glUniform3ui ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3ui$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$208.glUniform4ui$MH,"glUniform4ui");
    }
    public static void glUniform4ui ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4ui$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glUniform1uiv$MH,"glUniform1uiv");
    }
    public static void glUniform1uiv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1uiv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glUniform2uiv$MH,"glUniform2uiv");
    }
    public static void glUniform2uiv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2uiv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glUniform3uiv$MH,"glUniform3uiv");
    }
    public static void glUniform3uiv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3uiv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glUniform4uiv$MH,"glUniform4uiv");
    }
    public static void glUniform4uiv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4uiv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glTexParameterIiv$MH,"glTexParameterIiv");
    }
    public static void glTexParameterIiv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIiv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$209.glTexParameterIuiv$MH,"glTexParameterIuiv");
    }
    public static void glTexParameterIuiv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIuiv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glGetTexParameterIiv$MH,"glGetTexParameterIiv");
    }
    public static void glGetTexParameterIiv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIiv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glGetTexParameterIuiv$MH,"glGetTexParameterIuiv");
    }
    public static void glGetTexParameterIuiv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIuiv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferiv$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glClearBufferiv$MH,"glClearBufferiv");
    }
    public static void glClearBufferiv ( int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearBufferiv$MH();
        try {
            mh$.invokeExact(buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glClearBufferuiv$MH,"glClearBufferuiv");
    }
    public static void glClearBufferuiv ( int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearBufferuiv$MH();
        try {
            mh$.invokeExact(buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferfv$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glClearBufferfv$MH,"glClearBufferfv");
    }
    public static void glClearBufferfv ( int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearBufferfv$MH();
        try {
            mh$.invokeExact(buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferfi$MH() {
        return RuntimeHelper.requireNonNull(constants$210.glClearBufferfi$MH,"glClearBufferfi");
    }
    public static void glClearBufferfi ( int buffer,  int drawbuffer,  float depth,  int stencil) {
        var mh$ = glClearBufferfi$MH();
        try {
            mh$.invokeExact(buffer, drawbuffer, depth, stencil);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetStringi$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glGetStringi$MH,"glGetStringi");
    }
    public static MemoryAddress glGetStringi ( int name,  int index) {
        var mh$ = glGetStringi$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glIsRenderbuffer$MH,"glIsRenderbuffer");
    }
    public static byte glIsRenderbuffer ( int renderbuffer) {
        var mh$ = glIsRenderbuffer$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glBindRenderbuffer$MH,"glBindRenderbuffer");
    }
    public static void glBindRenderbuffer ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbuffer$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glDeleteRenderbuffers$MH,"glDeleteRenderbuffers");
    }
    public static void glDeleteRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glGenRenderbuffers$MH,"glGenRenderbuffers");
    }
    public static void glGenRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$211.glRenderbufferStorage$MH,"glRenderbufferStorage");
    }
    public static void glRenderbufferStorage ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorage$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glGetRenderbufferParameteriv$MH,"glGetRenderbufferParameteriv");
    }
    public static void glGetRenderbufferParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glIsFramebuffer$MH,"glIsFramebuffer");
    }
    public static byte glIsFramebuffer ( int framebuffer) {
        var mh$ = glIsFramebuffer$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glBindFramebuffer$MH,"glBindFramebuffer");
    }
    public static void glBindFramebuffer ( int target,  int framebuffer) {
        var mh$ = glBindFramebuffer$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glDeleteFramebuffers$MH,"glDeleteFramebuffers");
    }
    public static void glDeleteFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glGenFramebuffers$MH,"glGenFramebuffers");
    }
    public static void glGenFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$212.glCheckFramebufferStatus$MH,"glCheckFramebufferStatus");
    }
    public static int glCheckFramebufferStatus ( int target) {
        var mh$ = glCheckFramebufferStatus$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1D$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glFramebufferTexture1D$MH,"glFramebufferTexture1D");
    }
    public static void glFramebufferTexture1D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2D$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glFramebufferTexture2D$MH,"glFramebufferTexture2D");
    }
    public static void glFramebufferTexture2D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3D$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glFramebufferTexture3D$MH,"glFramebufferTexture3D");
    }
    public static void glFramebufferTexture3D ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glFramebufferRenderbuffer$MH,"glFramebufferRenderbuffer");
    }
    public static void glFramebufferRenderbuffer ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbuffer$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glGetFramebufferAttachmentParameteriv$MH,"glGetFramebufferAttachmentParameteriv");
    }
    public static void glGetFramebufferAttachmentParameteriv ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameteriv$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmap$MH() {
        return RuntimeHelper.requireNonNull(constants$213.glGenerateMipmap$MH,"glGenerateMipmap");
    }
    public static void glGenerateMipmap ( int target) {
        var mh$ = glGenerateMipmap$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glBlitFramebuffer$MH,"glBlitFramebuffer");
    }
    public static void glBlitFramebuffer ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebuffer$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glRenderbufferStorageMultisample$MH,"glRenderbufferStorageMultisample");
    }
    public static void glRenderbufferStorageMultisample ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glFramebufferTextureLayer$MH,"glFramebufferTextureLayer");
    }
    public static void glFramebufferTextureLayer ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayer$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glMapBufferRange$MH,"glMapBufferRange");
    }
    public static MemoryAddress glMapBufferRange ( int target,  long offset,  long length,  int access) {
        var mh$ = glMapBufferRange$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(target, offset, length, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glFlushMappedBufferRange$MH,"glFlushMappedBufferRange");
    }
    public static void glFlushMappedBufferRange ( int target,  long offset,  long length) {
        var mh$ = glFlushMappedBufferRange$MH();
        try {
            mh$.invokeExact(target, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$214.glBindVertexArray$MH,"glBindVertexArray");
    }
    public static void glBindVertexArray ( int array) {
        var mh$ = glBindVertexArray$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteVertexArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$215.glDeleteVertexArrays$MH,"glDeleteVertexArrays");
    }
    public static void glDeleteVertexArrays ( int n,  Addressable arrays) {
        var mh$ = glDeleteVertexArrays$MH();
        try {
            mh$.invokeExact(n, arrays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenVertexArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$215.glGenVertexArrays$MH,"glGenVertexArrays");
    }
    public static void glGenVertexArrays ( int n,  Addressable arrays) {
        var mh$ = glGenVertexArrays$MH();
        try {
            mh$.invokeExact(n, arrays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$215.glIsVertexArray$MH,"glIsVertexArray");
    }
    public static byte glIsVertexArray ( int array) {
        var mh$ = glIsVertexArray$MH();
        try {
            return (byte)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$219.glDrawArraysInstanced$MH,"glDrawArraysInstanced");
    }
    public static void glDrawArraysInstanced ( int mode,  int first,  int count,  int instancecount) {
        var mh$ = glDrawArraysInstanced$MH();
        try {
            mh$.invokeExact(mode, first, count, instancecount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$219.glDrawElementsInstanced$MH,"glDrawElementsInstanced");
    }
    public static void glDrawElementsInstanced ( int mode,  int count,  int type,  Addressable indices,  int instancecount) {
        var mh$ = glDrawElementsInstanced$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, instancecount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$219.glTexBuffer$MH,"glTexBuffer");
    }
    public static void glTexBuffer ( int target,  int internalformat,  int buffer) {
        var mh$ = glTexBuffer$MH();
        try {
            mh$.invokeExact(target, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrimitiveRestartIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glPrimitiveRestartIndex$MH,"glPrimitiveRestartIndex");
    }
    public static void glPrimitiveRestartIndex ( int index) {
        var mh$ = glPrimitiveRestartIndex$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glCopyBufferSubData$MH,"glCopyBufferSubData");
    }
    public static void glCopyBufferSubData ( int readTarget,  int writeTarget,  long readOffset,  long writeOffset,  long size) {
        var mh$ = glCopyBufferSubData$MH();
        try {
            mh$.invokeExact(readTarget, writeTarget, readOffset, writeOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glGetUniformIndices$MH,"glGetUniformIndices");
    }
    public static void glGetUniformIndices ( int program,  int uniformCount,  Addressable uniformNames,  Addressable uniformIndices) {
        var mh$ = glGetUniformIndices$MH();
        try {
            mh$.invokeExact(program, uniformCount, uniformNames, uniformIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformsiv$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glGetActiveUniformsiv$MH,"glGetActiveUniformsiv");
    }
    public static void glGetActiveUniformsiv ( int program,  int uniformCount,  Addressable uniformIndices,  int pname,  Addressable params) {
        var mh$ = glGetActiveUniformsiv$MH();
        try {
            mh$.invokeExact(program, uniformCount, uniformIndices, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformName$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glGetActiveUniformName$MH,"glGetActiveUniformName");
    }
    public static void glGetActiveUniformName ( int program,  int uniformIndex,  int bufSize,  Addressable length,  Addressable uniformName) {
        var mh$ = glGetActiveUniformName$MH();
        try {
            mh$.invokeExact(program, uniformIndex, bufSize, length, uniformName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformBlockIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$220.glGetUniformBlockIndex$MH,"glGetUniformBlockIndex");
    }
    public static int glGetUniformBlockIndex ( int program,  Addressable uniformBlockName) {
        var mh$ = glGetUniformBlockIndex$MH();
        try {
            return (int)mh$.invokeExact(program, uniformBlockName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformBlockiv$MH() {
        return RuntimeHelper.requireNonNull(constants$221.glGetActiveUniformBlockiv$MH,"glGetActiveUniformBlockiv");
    }
    public static void glGetActiveUniformBlockiv ( int program,  int uniformBlockIndex,  int pname,  Addressable params) {
        var mh$ = glGetActiveUniformBlockiv$MH();
        try {
            mh$.invokeExact(program, uniformBlockIndex, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformBlockName$MH() {
        return RuntimeHelper.requireNonNull(constants$221.glGetActiveUniformBlockName$MH,"glGetActiveUniformBlockName");
    }
    public static void glGetActiveUniformBlockName ( int program,  int uniformBlockIndex,  int bufSize,  Addressable length,  Addressable uniformBlockName) {
        var mh$ = glGetActiveUniformBlockName$MH();
        try {
            mh$.invokeExact(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformBlockBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$221.glUniformBlockBinding$MH,"glUniformBlockBinding");
    }
    public static void glUniformBlockBinding ( int program,  int uniformBlockIndex,  int uniformBlockBinding) {
        var mh$ = glUniformBlockBinding$MH();
        try {
            mh$.invokeExact(program, uniformBlockIndex, uniformBlockBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GLsync = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$227.glDrawElementsBaseVertex$MH,"glDrawElementsBaseVertex");
    }
    public static void glDrawElementsBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int basevertex) {
        var mh$ = glDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, basevertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glDrawRangeElementsBaseVertex$MH,"glDrawRangeElementsBaseVertex");
    }
    public static void glDrawRangeElementsBaseVertex ( int mode,  int start,  int end,  int count,  int type,  Addressable indices,  int basevertex) {
        var mh$ = glDrawRangeElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices, basevertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glDrawElementsInstancedBaseVertex$MH,"glDrawElementsInstancedBaseVertex");
    }
    public static void glDrawElementsInstancedBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int instancecount,  int basevertex) {
        var mh$ = glDrawElementsInstancedBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, instancecount, basevertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glMultiDrawElementsBaseVertex$MH,"glMultiDrawElementsBaseVertex");
    }
    public static void glMultiDrawElementsBaseVertex ( int mode,  Addressable count,  int type,  Addressable indices,  int drawcount,  Addressable basevertex) {
        var mh$ = glMultiDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, drawcount, basevertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glProvokingVertex$MH,"glProvokingVertex");
    }
    public static void glProvokingVertex ( int mode) {
        var mh$ = glProvokingVertex$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFenceSync$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glFenceSync$MH,"glFenceSync");
    }
    public static MemoryAddress glFenceSync ( int condition,  int flags) {
        var mh$ = glFenceSync$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(condition, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsSync$MH() {
        return RuntimeHelper.requireNonNull(constants$228.glIsSync$MH,"glIsSync");
    }
    public static byte glIsSync ( Addressable sync) {
        var mh$ = glIsSync$MH();
        try {
            return (byte)mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteSync$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glDeleteSync$MH,"glDeleteSync");
    }
    public static void glDeleteSync ( Addressable sync) {
        var mh$ = glDeleteSync$MH();
        try {
            mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glClientWaitSync$MH,"glClientWaitSync");
    }
    public static int glClientWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glClientWaitSync$MH();
        try {
            return (int)mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glWaitSync$MH,"glWaitSync");
    }
    public static void glWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glWaitSync$MH();
        try {
            mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInteger64v$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glGetInteger64v$MH,"glGetInteger64v");
    }
    public static void glGetInteger64v ( int pname,  Addressable data) {
        var mh$ = glGetInteger64v$MH();
        try {
            mh$.invokeExact(pname, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSynciv$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glGetSynciv$MH,"glGetSynciv");
    }
    public static void glGetSynciv ( Addressable sync,  int pname,  int bufSize,  Addressable length,  Addressable values) {
        var mh$ = glGetSynciv$MH();
        try {
            mh$.invokeExact(sync, pname, bufSize, length, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInteger64i_v$MH() {
        return RuntimeHelper.requireNonNull(constants$229.glGetInteger64i_v$MH,"glGetInteger64i_v");
    }
    public static void glGetInteger64i_v ( int target,  int index,  Addressable data) {
        var mh$ = glGetInteger64i_v$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameteri64v$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glGetBufferParameteri64v$MH,"glGetBufferParameteri64v");
    }
    public static void glGetBufferParameteri64v ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameteri64v$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glFramebufferTexture$MH,"glFramebufferTexture");
    }
    public static void glFramebufferTexture ( int target,  int attachment,  int texture,  int level) {
        var mh$ = glFramebufferTexture$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glTexImage2DMultisample$MH,"glTexImage2DMultisample");
    }
    public static void glTexImage2DMultisample ( int target,  int samples,  int internalformat,  int width,  int height,  byte fixedsamplelocations) {
        var mh$ = glTexImage2DMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glTexImage3DMultisample$MH,"glTexImage3DMultisample");
    }
    public static void glTexImage3DMultisample ( int target,  int samples,  int internalformat,  int width,  int height,  int depth,  byte fixedsamplelocations) {
        var mh$ = glTexImage3DMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultisamplefv$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glGetMultisamplefv$MH,"glGetMultisamplefv");
    }
    public static void glGetMultisamplefv ( int pname,  int index,  Addressable val) {
        var mh$ = glGetMultisamplefv$MH();
        try {
            mh$.invokeExact(pname, index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleMaski$MH() {
        return RuntimeHelper.requireNonNull(constants$230.glSampleMaski$MH,"glSampleMaski");
    }
    public static void glSampleMaski ( int maskNumber,  int mask) {
        var mh$ = glSampleMaski$MH();
        try {
            mh$.invokeExact(maskNumber, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragDataLocationIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$250.glBindFragDataLocationIndexed$MH,"glBindFragDataLocationIndexed");
    }
    public static void glBindFragDataLocationIndexed ( int program,  int colorNumber,  int index,  Addressable name) {
        var mh$ = glBindFragDataLocationIndexed$MH();
        try {
            mh$.invokeExact(program, colorNumber, index, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragDataIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$250.glGetFragDataIndex$MH,"glGetFragDataIndex");
    }
    public static int glGetFragDataIndex ( int program,  Addressable name) {
        var mh$ = glGetFragDataIndex$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenSamplers$MH() {
        return RuntimeHelper.requireNonNull(constants$250.glGenSamplers$MH,"glGenSamplers");
    }
    public static void glGenSamplers ( int count,  Addressable samplers) {
        var mh$ = glGenSamplers$MH();
        try {
            mh$.invokeExact(count, samplers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteSamplers$MH() {
        return RuntimeHelper.requireNonNull(constants$250.glDeleteSamplers$MH,"glDeleteSamplers");
    }
    public static void glDeleteSamplers ( int count,  Addressable samplers) {
        var mh$ = glDeleteSamplers$MH();
        try {
            mh$.invokeExact(count, samplers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glIsSampler$MH,"glIsSampler");
    }
    public static byte glIsSampler ( int sampler) {
        var mh$ = glIsSampler$MH();
        try {
            return (byte)mh$.invokeExact(sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindSampler$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glBindSampler$MH,"glBindSampler");
    }
    public static void glBindSampler ( int unit,  int sampler) {
        var mh$ = glBindSampler$MH();
        try {
            mh$.invokeExact(unit, sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glSamplerParameteri$MH,"glSamplerParameteri");
    }
    public static void glSamplerParameteri ( int sampler,  int pname,  int param) {
        var mh$ = glSamplerParameteri$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glSamplerParameteriv$MH,"glSamplerParameteriv");
    }
    public static void glSamplerParameteriv ( int sampler,  int pname,  Addressable param) {
        var mh$ = glSamplerParameteriv$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glSamplerParameterf$MH,"glSamplerParameterf");
    }
    public static void glSamplerParameterf ( int sampler,  int pname,  float param) {
        var mh$ = glSamplerParameterf$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$251.glSamplerParameterfv$MH,"glSamplerParameterfv");
    }
    public static void glSamplerParameterfv ( int sampler,  int pname,  Addressable param) {
        var mh$ = glSamplerParameterfv$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glSamplerParameterIiv$MH,"glSamplerParameterIiv");
    }
    public static void glSamplerParameterIiv ( int sampler,  int pname,  Addressable param) {
        var mh$ = glSamplerParameterIiv$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplerParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glSamplerParameterIuiv$MH,"glSamplerParameterIuiv");
    }
    public static void glSamplerParameterIuiv ( int sampler,  int pname,  Addressable param) {
        var mh$ = glSamplerParameterIuiv$MH();
        try {
            mh$.invokeExact(sampler, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSamplerParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glGetSamplerParameteriv$MH,"glGetSamplerParameteriv");
    }
    public static void glGetSamplerParameteriv ( int sampler,  int pname,  Addressable params) {
        var mh$ = glGetSamplerParameteriv$MH();
        try {
            mh$.invokeExact(sampler, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSamplerParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glGetSamplerParameterIiv$MH,"glGetSamplerParameterIiv");
    }
    public static void glGetSamplerParameterIiv ( int sampler,  int pname,  Addressable params) {
        var mh$ = glGetSamplerParameterIiv$MH();
        try {
            mh$.invokeExact(sampler, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSamplerParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glGetSamplerParameterfv$MH,"glGetSamplerParameterfv");
    }
    public static void glGetSamplerParameterfv ( int sampler,  int pname,  Addressable params) {
        var mh$ = glGetSamplerParameterfv$MH();
        try {
            mh$.invokeExact(sampler, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSamplerParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$252.glGetSamplerParameterIuiv$MH,"glGetSamplerParameterIuiv");
    }
    public static void glGetSamplerParameterIuiv ( int sampler,  int pname,  Addressable params) {
        var mh$ = glGetSamplerParameterIuiv$MH();
        try {
            mh$.invokeExact(sampler, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glQueryCounter$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glQueryCounter$MH,"glQueryCounter");
    }
    public static void glQueryCounter ( int id,  int target) {
        var mh$ = glQueryCounter$MH();
        try {
            mh$.invokeExact(id, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjecti64v$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glGetQueryObjecti64v$MH,"glGetQueryObjecti64v");
    }
    public static void glGetQueryObjecti64v ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjecti64v$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectui64v$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glGetQueryObjectui64v$MH,"glGetQueryObjectui64v");
    }
    public static void glGetQueryObjectui64v ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectui64v$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribDivisor$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glVertexAttribDivisor$MH,"glVertexAttribDivisor");
    }
    public static void glVertexAttribDivisor ( int index,  int divisor) {
        var mh$ = glVertexAttribDivisor$MH();
        try {
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glVertexAttribP1ui$MH,"glVertexAttribP1ui");
    }
    public static void glVertexAttribP1ui ( int index,  int type,  byte normalized,  int value) {
        var mh$ = glVertexAttribP1ui$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$253.glVertexAttribP1uiv$MH,"glVertexAttribP1uiv");
    }
    public static void glVertexAttribP1uiv ( int index,  int type,  byte normalized,  Addressable value) {
        var mh$ = glVertexAttribP1uiv$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP2ui$MH,"glVertexAttribP2ui");
    }
    public static void glVertexAttribP2ui ( int index,  int type,  byte normalized,  int value) {
        var mh$ = glVertexAttribP2ui$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP2uiv$MH,"glVertexAttribP2uiv");
    }
    public static void glVertexAttribP2uiv ( int index,  int type,  byte normalized,  Addressable value) {
        var mh$ = glVertexAttribP2uiv$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP3ui$MH,"glVertexAttribP3ui");
    }
    public static void glVertexAttribP3ui ( int index,  int type,  byte normalized,  int value) {
        var mh$ = glVertexAttribP3ui$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP3uiv$MH,"glVertexAttribP3uiv");
    }
    public static void glVertexAttribP3uiv ( int index,  int type,  byte normalized,  Addressable value) {
        var mh$ = glVertexAttribP3uiv$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP4ui$MH,"glVertexAttribP4ui");
    }
    public static void glVertexAttribP4ui ( int index,  int type,  byte normalized,  int value) {
        var mh$ = glVertexAttribP4ui$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribP4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$254.glVertexAttribP4uiv$MH,"glVertexAttribP4uiv");
    }
    public static void glVertexAttribP4uiv ( int index,  int type,  byte normalized,  Addressable value) {
        var mh$ = glVertexAttribP4uiv$MH();
        try {
            mh$.invokeExact(index, type, normalized, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP2ui$MH,"glVertexP2ui");
    }
    public static void glVertexP2ui ( int type,  int value) {
        var mh$ = glVertexP2ui$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP2uiv$MH,"glVertexP2uiv");
    }
    public static void glVertexP2uiv ( int type,  Addressable value) {
        var mh$ = glVertexP2uiv$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP3ui$MH,"glVertexP3ui");
    }
    public static void glVertexP3ui ( int type,  int value) {
        var mh$ = glVertexP3ui$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP3uiv$MH,"glVertexP3uiv");
    }
    public static void glVertexP3uiv ( int type,  Addressable value) {
        var mh$ = glVertexP3uiv$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP4ui$MH,"glVertexP4ui");
    }
    public static void glVertexP4ui ( int type,  int value) {
        var mh$ = glVertexP4ui$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexP4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$255.glVertexP4uiv$MH,"glVertexP4uiv");
    }
    public static void glVertexP4uiv ( int type,  Addressable value) {
        var mh$ = glVertexP4uiv$MH();
        try {
            mh$.invokeExact(type, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP1ui$MH,"glTexCoordP1ui");
    }
    public static void glTexCoordP1ui ( int type,  int coords) {
        var mh$ = glTexCoordP1ui$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP1uiv$MH,"glTexCoordP1uiv");
    }
    public static void glTexCoordP1uiv ( int type,  Addressable coords) {
        var mh$ = glTexCoordP1uiv$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP2ui$MH,"glTexCoordP2ui");
    }
    public static void glTexCoordP2ui ( int type,  int coords) {
        var mh$ = glTexCoordP2ui$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP2uiv$MH,"glTexCoordP2uiv");
    }
    public static void glTexCoordP2uiv ( int type,  Addressable coords) {
        var mh$ = glTexCoordP2uiv$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP3ui$MH,"glTexCoordP3ui");
    }
    public static void glTexCoordP3ui ( int type,  int coords) {
        var mh$ = glTexCoordP3ui$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$256.glTexCoordP3uiv$MH,"glTexCoordP3uiv");
    }
    public static void glTexCoordP3uiv ( int type,  Addressable coords) {
        var mh$ = glTexCoordP3uiv$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glTexCoordP4ui$MH,"glTexCoordP4ui");
    }
    public static void glTexCoordP4ui ( int type,  int coords) {
        var mh$ = glTexCoordP4ui$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordP4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glTexCoordP4uiv$MH,"glTexCoordP4uiv");
    }
    public static void glTexCoordP4uiv ( int type,  Addressable coords) {
        var mh$ = glTexCoordP4uiv$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glMultiTexCoordP1ui$MH,"glMultiTexCoordP1ui");
    }
    public static void glMultiTexCoordP1ui ( int texture,  int type,  int coords) {
        var mh$ = glMultiTexCoordP1ui$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glMultiTexCoordP1uiv$MH,"glMultiTexCoordP1uiv");
    }
    public static void glMultiTexCoordP1uiv ( int texture,  int type,  Addressable coords) {
        var mh$ = glMultiTexCoordP1uiv$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glMultiTexCoordP2ui$MH,"glMultiTexCoordP2ui");
    }
    public static void glMultiTexCoordP2ui ( int texture,  int type,  int coords) {
        var mh$ = glMultiTexCoordP2ui$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$257.glMultiTexCoordP2uiv$MH,"glMultiTexCoordP2uiv");
    }
    public static void glMultiTexCoordP2uiv ( int texture,  int type,  Addressable coords) {
        var mh$ = glMultiTexCoordP2uiv$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glMultiTexCoordP3ui$MH,"glMultiTexCoordP3ui");
    }
    public static void glMultiTexCoordP3ui ( int texture,  int type,  int coords) {
        var mh$ = glMultiTexCoordP3ui$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glMultiTexCoordP3uiv$MH,"glMultiTexCoordP3uiv");
    }
    public static void glMultiTexCoordP3uiv ( int texture,  int type,  Addressable coords) {
        var mh$ = glMultiTexCoordP3uiv$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glMultiTexCoordP4ui$MH,"glMultiTexCoordP4ui");
    }
    public static void glMultiTexCoordP4ui ( int texture,  int type,  int coords) {
        var mh$ = glMultiTexCoordP4ui$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordP4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glMultiTexCoordP4uiv$MH,"glMultiTexCoordP4uiv");
    }
    public static void glMultiTexCoordP4uiv ( int texture,  int type,  Addressable coords) {
        var mh$ = glMultiTexCoordP4uiv$MH();
        try {
            mh$.invokeExact(texture, type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glNormalP3ui$MH,"glNormalP3ui");
    }
    public static void glNormalP3ui ( int type,  int coords) {
        var mh$ = glNormalP3ui$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$258.glNormalP3uiv$MH,"glNormalP3uiv");
    }
    public static void glNormalP3uiv ( int type,  Addressable coords) {
        var mh$ = glNormalP3uiv$MH();
        try {
            mh$.invokeExact(type, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glColorP3ui$MH,"glColorP3ui");
    }
    public static void glColorP3ui ( int type,  int color) {
        var mh$ = glColorP3ui$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glColorP3uiv$MH,"glColorP3uiv");
    }
    public static void glColorP3uiv ( int type,  Addressable color) {
        var mh$ = glColorP3uiv$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorP4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glColorP4ui$MH,"glColorP4ui");
    }
    public static void glColorP4ui ( int type,  int color) {
        var mh$ = glColorP4ui$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorP4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glColorP4uiv$MH,"glColorP4uiv");
    }
    public static void glColorP4uiv ( int type,  Addressable color) {
        var mh$ = glColorP4uiv$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorP3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glSecondaryColorP3ui$MH,"glSecondaryColorP3ui");
    }
    public static void glSecondaryColorP3ui ( int type,  int color) {
        var mh$ = glSecondaryColorP3ui$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorP3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$259.glSecondaryColorP3uiv$MH,"glSecondaryColorP3uiv");
    }
    public static void glSecondaryColorP3uiv ( int type,  Addressable color) {
        var mh$ = glSecondaryColorP3uiv$MH();
        try {
            mh$.invokeExact(type, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinSampleShading$MH() {
        return RuntimeHelper.requireNonNull(constants$275.glMinSampleShading$MH,"glMinSampleShading");
    }
    public static void glMinSampleShading ( float value) {
        var mh$ = glMinSampleShading$MH();
        try {
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationi$MH() {
        return RuntimeHelper.requireNonNull(constants$275.glBlendEquationi$MH,"glBlendEquationi");
    }
    public static void glBlendEquationi ( int buf,  int mode) {
        var mh$ = glBlendEquationi$MH();
        try {
            mh$.invokeExact(buf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparatei$MH() {
        return RuntimeHelper.requireNonNull(constants$275.glBlendEquationSeparatei$MH,"glBlendEquationSeparatei");
    }
    public static void glBlendEquationSeparatei ( int buf,  int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparatei$MH();
        try {
            mh$.invokeExact(buf, modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunci$MH() {
        return RuntimeHelper.requireNonNull(constants$275.glBlendFunci$MH,"glBlendFunci");
    }
    public static void glBlendFunci ( int buf,  int src,  int dst) {
        var mh$ = glBlendFunci$MH();
        try {
            mh$.invokeExact(buf, src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparatei$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glBlendFuncSeparatei$MH,"glBlendFuncSeparatei");
    }
    public static void glBlendFuncSeparatei ( int buf,  int srcRGB,  int dstRGB,  int srcAlpha,  int dstAlpha) {
        var mh$ = glBlendFuncSeparatei$MH();
        try {
            mh$.invokeExact(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glDrawArraysIndirect$MH,"glDrawArraysIndirect");
    }
    public static void glDrawArraysIndirect ( int mode,  Addressable indirect) {
        var mh$ = glDrawArraysIndirect$MH();
        try {
            mh$.invokeExact(mode, indirect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glDrawElementsIndirect$MH,"glDrawElementsIndirect");
    }
    public static void glDrawElementsIndirect ( int mode,  int type,  Addressable indirect) {
        var mh$ = glDrawElementsIndirect$MH();
        try {
            mh$.invokeExact(mode, type, indirect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1d$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glUniform1d$MH,"glUniform1d");
    }
    public static void glUniform1d ( int location,  double x) {
        var mh$ = glUniform1d$MH();
        try {
            mh$.invokeExact(location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2d$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glUniform2d$MH,"glUniform2d");
    }
    public static void glUniform2d ( int location,  double x,  double y) {
        var mh$ = glUniform2d$MH();
        try {
            mh$.invokeExact(location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3d$MH() {
        return RuntimeHelper.requireNonNull(constants$276.glUniform3d$MH,"glUniform3d");
    }
    public static void glUniform3d ( int location,  double x,  double y,  double z) {
        var mh$ = glUniform3d$MH();
        try {
            mh$.invokeExact(location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4d$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniform4d$MH,"glUniform4d");
    }
    public static void glUniform4d ( int location,  double x,  double y,  double z,  double w) {
        var mh$ = glUniform4d$MH();
        try {
            mh$.invokeExact(location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniform1dv$MH,"glUniform1dv");
    }
    public static void glUniform1dv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1dv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniform2dv$MH,"glUniform2dv");
    }
    public static void glUniform2dv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2dv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniform3dv$MH,"glUniform3dv");
    }
    public static void glUniform3dv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3dv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniform4dv$MH,"glUniform4dv");
    }
    public static void glUniform4dv ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4dv$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$277.glUniformMatrix2dv$MH,"glUniformMatrix2dv");
    }
    public static void glUniformMatrix2dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix3dv$MH,"glUniformMatrix3dv");
    }
    public static void glUniformMatrix3dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix4dv$MH,"glUniformMatrix4dv");
    }
    public static void glUniformMatrix4dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2x3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix2x3dv$MH,"glUniformMatrix2x3dv");
    }
    public static void glUniformMatrix2x3dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2x3dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2x4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix2x4dv$MH,"glUniformMatrix2x4dv");
    }
    public static void glUniformMatrix2x4dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2x4dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3x2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix3x2dv$MH,"glUniformMatrix3x2dv");
    }
    public static void glUniformMatrix3x2dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3x2dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3x4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$278.glUniformMatrix3x4dv$MH,"glUniformMatrix3x4dv");
    }
    public static void glUniformMatrix3x4dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3x4dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4x2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glUniformMatrix4x2dv$MH,"glUniformMatrix4x2dv");
    }
    public static void glUniformMatrix4x2dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4x2dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4x3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glUniformMatrix4x3dv$MH,"glUniformMatrix4x3dv");
    }
    public static void glUniformMatrix4x3dv ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4x3dv$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformdv$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glGetUniformdv$MH,"glGetUniformdv");
    }
    public static void glGetUniformdv ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformdv$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSubroutineUniformLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glGetSubroutineUniformLocation$MH,"glGetSubroutineUniformLocation");
    }
    public static int glGetSubroutineUniformLocation ( int program,  int shadertype,  Addressable name) {
        var mh$ = glGetSubroutineUniformLocation$MH();
        try {
            return (int)mh$.invokeExact(program, shadertype, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSubroutineIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glGetSubroutineIndex$MH,"glGetSubroutineIndex");
    }
    public static int glGetSubroutineIndex ( int program,  int shadertype,  Addressable name) {
        var mh$ = glGetSubroutineIndex$MH();
        try {
            return (int)mh$.invokeExact(program, shadertype, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveSubroutineUniformiv$MH() {
        return RuntimeHelper.requireNonNull(constants$279.glGetActiveSubroutineUniformiv$MH,"glGetActiveSubroutineUniformiv");
    }
    public static void glGetActiveSubroutineUniformiv ( int program,  int shadertype,  int index,  int pname,  Addressable values) {
        var mh$ = glGetActiveSubroutineUniformiv$MH();
        try {
            mh$.invokeExact(program, shadertype, index, pname, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveSubroutineUniformName$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glGetActiveSubroutineUniformName$MH,"glGetActiveSubroutineUniformName");
    }
    public static void glGetActiveSubroutineUniformName ( int program,  int shadertype,  int index,  int bufsize,  Addressable length,  Addressable name) {
        var mh$ = glGetActiveSubroutineUniformName$MH();
        try {
            mh$.invokeExact(program, shadertype, index, bufsize, length, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveSubroutineName$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glGetActiveSubroutineName$MH,"glGetActiveSubroutineName");
    }
    public static void glGetActiveSubroutineName ( int program,  int shadertype,  int index,  int bufsize,  Addressable length,  Addressable name) {
        var mh$ = glGetActiveSubroutineName$MH();
        try {
            mh$.invokeExact(program, shadertype, index, bufsize, length, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformSubroutinesuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glUniformSubroutinesuiv$MH,"glUniformSubroutinesuiv");
    }
    public static void glUniformSubroutinesuiv ( int shadertype,  int count,  Addressable indices) {
        var mh$ = glUniformSubroutinesuiv$MH();
        try {
            mh$.invokeExact(shadertype, count, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformSubroutineuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glGetUniformSubroutineuiv$MH,"glGetUniformSubroutineuiv");
    }
    public static void glGetUniformSubroutineuiv ( int shadertype,  int location,  Addressable params) {
        var mh$ = glGetUniformSubroutineuiv$MH();
        try {
            mh$.invokeExact(shadertype, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramStageiv$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glGetProgramStageiv$MH,"glGetProgramStageiv");
    }
    public static void glGetProgramStageiv ( int program,  int shadertype,  int pname,  Addressable values) {
        var mh$ = glGetProgramStageiv$MH();
        try {
            mh$.invokeExact(program, shadertype, pname, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPatchParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$280.glPatchParameteri$MH,"glPatchParameteri");
    }
    public static void glPatchParameteri ( int pname,  int value) {
        var mh$ = glPatchParameteri$MH();
        try {
            mh$.invokeExact(pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPatchParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glPatchParameterfv$MH,"glPatchParameterfv");
    }
    public static void glPatchParameterfv ( int pname,  Addressable values) {
        var mh$ = glPatchParameterfv$MH();
        try {
            mh$.invokeExact(pname, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glBindTransformFeedback$MH,"glBindTransformFeedback");
    }
    public static void glBindTransformFeedback ( int target,  int id) {
        var mh$ = glBindTransformFeedback$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTransformFeedbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glDeleteTransformFeedbacks$MH,"glDeleteTransformFeedbacks");
    }
    public static void glDeleteTransformFeedbacks ( int n,  Addressable ids) {
        var mh$ = glDeleteTransformFeedbacks$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTransformFeedbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glGenTransformFeedbacks$MH,"glGenTransformFeedbacks");
    }
    public static void glGenTransformFeedbacks ( int n,  Addressable ids) {
        var mh$ = glGenTransformFeedbacks$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glIsTransformFeedback$MH,"glIsTransformFeedback");
    }
    public static byte glIsTransformFeedback ( int id) {
        var mh$ = glIsTransformFeedback$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPauseTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$281.glPauseTransformFeedback$MH,"glPauseTransformFeedback");
    }
    public static void glPauseTransformFeedback () {
        var mh$ = glPauseTransformFeedback$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResumeTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glResumeTransformFeedback$MH,"glResumeTransformFeedback");
    }
    public static void glResumeTransformFeedback () {
        var mh$ = glResumeTransformFeedback$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTransformFeedback$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glDrawTransformFeedback$MH,"glDrawTransformFeedback");
    }
    public static void glDrawTransformFeedback ( int mode,  int id) {
        var mh$ = glDrawTransformFeedback$MH();
        try {
            mh$.invokeExact(mode, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTransformFeedbackStream$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glDrawTransformFeedbackStream$MH,"glDrawTransformFeedbackStream");
    }
    public static void glDrawTransformFeedbackStream ( int mode,  int id,  int stream) {
        var mh$ = glDrawTransformFeedbackStream$MH();
        try {
            mh$.invokeExact(mode, id, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginQueryIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glBeginQueryIndexed$MH,"glBeginQueryIndexed");
    }
    public static void glBeginQueryIndexed ( int target,  int index,  int id) {
        var mh$ = glBeginQueryIndexed$MH();
        try {
            mh$.invokeExact(target, index, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndQueryIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glEndQueryIndexed$MH,"glEndQueryIndexed");
    }
    public static void glEndQueryIndexed ( int target,  int index) {
        var mh$ = glEndQueryIndexed$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryIndexediv$MH() {
        return RuntimeHelper.requireNonNull(constants$282.glGetQueryIndexediv$MH,"glGetQueryIndexediv");
    }
    public static void glGetQueryIndexediv ( int target,  int index,  int pname,  Addressable params) {
        var mh$ = glGetQueryIndexediv$MH();
        try {
            mh$.invokeExact(target, index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReleaseShaderCompiler$MH() {
        return RuntimeHelper.requireNonNull(constants$312.glReleaseShaderCompiler$MH,"glReleaseShaderCompiler");
    }
    public static void glReleaseShaderCompiler () {
        var mh$ = glReleaseShaderCompiler$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$312.glShaderBinary$MH,"glShaderBinary");
    }
    public static void glShaderBinary ( int count,  Addressable shaders,  int binaryformat,  Addressable binary,  int length) {
        var mh$ = glShaderBinary$MH();
        try {
            mh$.invokeExact(count, shaders, binaryformat, binary, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderPrecisionFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$312.glGetShaderPrecisionFormat$MH,"glGetShaderPrecisionFormat");
    }
    public static void glGetShaderPrecisionFormat ( int shadertype,  int precisiontype,  Addressable range,  Addressable precision) {
        var mh$ = glGetShaderPrecisionFormat$MH();
        try {
            mh$.invokeExact(shadertype, precisiontype, range, precision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangef$MH() {
        return RuntimeHelper.requireNonNull(constants$312.glDepthRangef$MH,"glDepthRangef");
    }
    public static void glDepthRangef ( float n,  float f) {
        var mh$ = glDepthRangef$MH();
        try {
            mh$.invokeExact(n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepthf$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glClearDepthf$MH,"glClearDepthf");
    }
    public static void glClearDepthf ( float d) {
        var mh$ = glClearDepthf$MH();
        try {
            mh$.invokeExact(d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glGetProgramBinary$MH,"glGetProgramBinary");
    }
    public static void glGetProgramBinary ( int program,  int bufSize,  Addressable length,  Addressable binaryFormat,  Addressable binary) {
        var mh$ = glGetProgramBinary$MH();
        try {
            mh$.invokeExact(program, bufSize, length, binaryFormat, binary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramBinary$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glProgramBinary$MH,"glProgramBinary");
    }
    public static void glProgramBinary ( int program,  int binaryFormat,  Addressable binary,  int length) {
        var mh$ = glProgramBinary$MH();
        try {
            mh$.invokeExact(program, binaryFormat, binary, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glProgramParameteri$MH,"glProgramParameteri");
    }
    public static void glProgramParameteri ( int program,  int pname,  int value) {
        var mh$ = glProgramParameteri$MH();
        try {
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseProgramStages$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glUseProgramStages$MH,"glUseProgramStages");
    }
    public static void glUseProgramStages ( int pipeline,  int stages,  int program) {
        var mh$ = glUseProgramStages$MH();
        try {
            mh$.invokeExact(pipeline, stages, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveShaderProgram$MH() {
        return RuntimeHelper.requireNonNull(constants$313.glActiveShaderProgram$MH,"glActiveShaderProgram");
    }
    public static void glActiveShaderProgram ( int pipeline,  int program) {
        var mh$ = glActiveShaderProgram$MH();
        try {
            mh$.invokeExact(pipeline, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShaderProgramv$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glCreateShaderProgramv$MH,"glCreateShaderProgramv");
    }
    public static int glCreateShaderProgramv ( int type,  int count,  Addressable strings) {
        var mh$ = glCreateShaderProgramv$MH();
        try {
            return (int)mh$.invokeExact(type, count, strings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindProgramPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glBindProgramPipeline$MH,"glBindProgramPipeline");
    }
    public static void glBindProgramPipeline ( int pipeline) {
        var mh$ = glBindProgramPipeline$MH();
        try {
            mh$.invokeExact(pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgramPipelines$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glDeleteProgramPipelines$MH,"glDeleteProgramPipelines");
    }
    public static void glDeleteProgramPipelines ( int n,  Addressable pipelines) {
        var mh$ = glDeleteProgramPipelines$MH();
        try {
            mh$.invokeExact(n, pipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenProgramPipelines$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glGenProgramPipelines$MH,"glGenProgramPipelines");
    }
    public static void glGenProgramPipelines ( int n,  Addressable pipelines) {
        var mh$ = glGenProgramPipelines$MH();
        try {
            mh$.invokeExact(n, pipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgramPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glIsProgramPipeline$MH,"glIsProgramPipeline");
    }
    public static byte glIsProgramPipeline ( int pipeline) {
        var mh$ = glIsProgramPipeline$MH();
        try {
            return (byte)mh$.invokeExact(pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramPipelineiv$MH() {
        return RuntimeHelper.requireNonNull(constants$314.glGetProgramPipelineiv$MH,"glGetProgramPipelineiv");
    }
    public static void glGetProgramPipelineiv ( int pipeline,  int pname,  Addressable params) {
        var mh$ = glGetProgramPipelineiv$MH();
        try {
            mh$.invokeExact(pipeline, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1i$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1i$MH,"glProgramUniform1i");
    }
    public static void glProgramUniform1i ( int program,  int location,  int v0) {
        var mh$ = glProgramUniform1i$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1iv$MH,"glProgramUniform1iv");
    }
    public static void glProgramUniform1iv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1iv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1f$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1f$MH,"glProgramUniform1f");
    }
    public static void glProgramUniform1f ( int program,  int location,  float v0) {
        var mh$ = glProgramUniform1f$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1fv$MH,"glProgramUniform1fv");
    }
    public static void glProgramUniform1fv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1fv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1d$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1d$MH,"glProgramUniform1d");
    }
    public static void glProgramUniform1d ( int program,  int location,  double v0) {
        var mh$ = glProgramUniform1d$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$315.glProgramUniform1dv$MH,"glProgramUniform1dv");
    }
    public static void glProgramUniform1dv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1dv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ui$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform1ui$MH,"glProgramUniform1ui");
    }
    public static void glProgramUniform1ui ( int program,  int location,  int v0) {
        var mh$ = glProgramUniform1ui$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform1uiv$MH,"glProgramUniform1uiv");
    }
    public static void glProgramUniform1uiv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1uiv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2i$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform2i$MH,"glProgramUniform2i");
    }
    public static void glProgramUniform2i ( int program,  int location,  int v0,  int v1) {
        var mh$ = glProgramUniform2i$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform2iv$MH,"glProgramUniform2iv");
    }
    public static void glProgramUniform2iv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2iv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2f$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform2f$MH,"glProgramUniform2f");
    }
    public static void glProgramUniform2f ( int program,  int location,  float v0,  float v1) {
        var mh$ = glProgramUniform2f$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$316.glProgramUniform2fv$MH,"glProgramUniform2fv");
    }
    public static void glProgramUniform2fv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2fv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2d$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform2d$MH,"glProgramUniform2d");
    }
    public static void glProgramUniform2d ( int program,  int location,  double v0,  double v1) {
        var mh$ = glProgramUniform2d$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform2dv$MH,"glProgramUniform2dv");
    }
    public static void glProgramUniform2dv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2dv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ui$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform2ui$MH,"glProgramUniform2ui");
    }
    public static void glProgramUniform2ui ( int program,  int location,  int v0,  int v1) {
        var mh$ = glProgramUniform2ui$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform2uiv$MH,"glProgramUniform2uiv");
    }
    public static void glProgramUniform2uiv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2uiv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3i$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform3i$MH,"glProgramUniform3i");
    }
    public static void glProgramUniform3i ( int program,  int location,  int v0,  int v1,  int v2) {
        var mh$ = glProgramUniform3i$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$317.glProgramUniform3iv$MH,"glProgramUniform3iv");
    }
    public static void glProgramUniform3iv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3iv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3f$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3f$MH,"glProgramUniform3f");
    }
    public static void glProgramUniform3f ( int program,  int location,  float v0,  float v1,  float v2) {
        var mh$ = glProgramUniform3f$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3fv$MH,"glProgramUniform3fv");
    }
    public static void glProgramUniform3fv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3fv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3d$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3d$MH,"glProgramUniform3d");
    }
    public static void glProgramUniform3d ( int program,  int location,  double v0,  double v1,  double v2) {
        var mh$ = glProgramUniform3d$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3dv$MH,"glProgramUniform3dv");
    }
    public static void glProgramUniform3dv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3dv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3ui$MH,"glProgramUniform3ui");
    }
    public static void glProgramUniform3ui ( int program,  int location,  int v0,  int v1,  int v2) {
        var mh$ = glProgramUniform3ui$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$318.glProgramUniform3uiv$MH,"glProgramUniform3uiv");
    }
    public static void glProgramUniform3uiv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3uiv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4i$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4i$MH,"glProgramUniform4i");
    }
    public static void glProgramUniform4i ( int program,  int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glProgramUniform4i$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4iv$MH,"glProgramUniform4iv");
    }
    public static void glProgramUniform4iv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4iv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4f$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4f$MH,"glProgramUniform4f");
    }
    public static void glProgramUniform4f ( int program,  int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glProgramUniform4f$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4fv$MH,"glProgramUniform4fv");
    }
    public static void glProgramUniform4fv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4fv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4d$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4d$MH,"glProgramUniform4d");
    }
    public static void glProgramUniform4d ( int program,  int location,  double v0,  double v1,  double v2,  double v3) {
        var mh$ = glProgramUniform4d$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$319.glProgramUniform4dv$MH,"glProgramUniform4dv");
    }
    public static void glProgramUniform4dv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4dv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniform4ui$MH,"glProgramUniform4ui");
    }
    public static void glProgramUniform4ui ( int program,  int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glProgramUniform4ui$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniform4uiv$MH,"glProgramUniform4uiv");
    }
    public static void glProgramUniform4uiv ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4uiv$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniformMatrix2fv$MH,"glProgramUniformMatrix2fv");
    }
    public static void glProgramUniformMatrix2fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniformMatrix3fv$MH,"glProgramUniformMatrix3fv");
    }
    public static void glProgramUniformMatrix3fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniformMatrix4fv$MH,"glProgramUniformMatrix4fv");
    }
    public static void glProgramUniformMatrix4fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$320.glProgramUniformMatrix2dv$MH,"glProgramUniformMatrix2dv");
    }
    public static void glProgramUniformMatrix2dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix3dv$MH,"glProgramUniformMatrix3dv");
    }
    public static void glProgramUniformMatrix3dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix4dv$MH,"glProgramUniformMatrix4dv");
    }
    public static void glProgramUniformMatrix4dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix2x3fv$MH,"glProgramUniformMatrix2x3fv");
    }
    public static void glProgramUniformMatrix2x3fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x3fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix3x2fv$MH,"glProgramUniformMatrix3x2fv");
    }
    public static void glProgramUniformMatrix3x2fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x2fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix2x4fv$MH,"glProgramUniformMatrix2x4fv");
    }
    public static void glProgramUniformMatrix2x4fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x4fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$321.glProgramUniformMatrix4x2fv$MH,"glProgramUniformMatrix4x2fv");
    }
    public static void glProgramUniformMatrix4x2fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x2fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix3x4fv$MH,"glProgramUniformMatrix3x4fv");
    }
    public static void glProgramUniformMatrix3x4fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x4fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix4x3fv$MH,"glProgramUniformMatrix4x3fv");
    }
    public static void glProgramUniformMatrix4x3fv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x3fv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix2x3dv$MH,"glProgramUniformMatrix2x3dv");
    }
    public static void glProgramUniformMatrix2x3dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x3dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix3x2dv$MH,"glProgramUniformMatrix3x2dv");
    }
    public static void glProgramUniformMatrix3x2dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x2dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix2x4dv$MH,"glProgramUniformMatrix2x4dv");
    }
    public static void glProgramUniformMatrix2x4dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x4dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$322.glProgramUniformMatrix4x2dv$MH,"glProgramUniformMatrix4x2dv");
    }
    public static void glProgramUniformMatrix4x2dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x2dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glProgramUniformMatrix3x4dv$MH,"glProgramUniformMatrix3x4dv");
    }
    public static void glProgramUniformMatrix3x4dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x4dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glProgramUniformMatrix4x3dv$MH,"glProgramUniformMatrix4x3dv");
    }
    public static void glProgramUniformMatrix4x3dv ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x3dv$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glValidateProgramPipeline$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glValidateProgramPipeline$MH,"glValidateProgramPipeline");
    }
    public static void glValidateProgramPipeline ( int pipeline) {
        var mh$ = glValidateProgramPipeline$MH();
        try {
            mh$.invokeExact(pipeline);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramPipelineInfoLog$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glGetProgramPipelineInfoLog$MH,"glGetProgramPipelineInfoLog");
    }
    public static void glGetProgramPipelineInfoLog ( int pipeline,  int bufSize,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetProgramPipelineInfoLog$MH();
        try {
            mh$.invokeExact(pipeline, bufSize, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1d$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glVertexAttribL1d$MH,"glVertexAttribL1d");
    }
    public static void glVertexAttribL1d ( int index,  double x) {
        var mh$ = glVertexAttribL1d$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2d$MH() {
        return RuntimeHelper.requireNonNull(constants$323.glVertexAttribL2d$MH,"glVertexAttribL2d");
    }
    public static void glVertexAttribL2d ( int index,  double x,  double y) {
        var mh$ = glVertexAttribL2d$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3d$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL3d$MH,"glVertexAttribL3d");
    }
    public static void glVertexAttribL3d ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttribL3d$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


