// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$7 {

    static final FunctionDescriptor glHint$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glHint$MH = RuntimeHelper.downcallHandle(
        "glHint",
        constants$7.glHint$FUNC
    );
    static final FunctionDescriptor glClearDepth$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle glClearDepth$MH = RuntimeHelper.downcallHandle(
        "glClearDepth",
        constants$7.glClearDepth$FUNC
    );
    static final FunctionDescriptor glDepthFunc$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glDepthFunc$MH = RuntimeHelper.downcallHandle(
        "glDepthFunc",
        constants$7.glDepthFunc$FUNC
    );
    static final FunctionDescriptor glDepthMask$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle glDepthMask$MH = RuntimeHelper.downcallHandle(
        "glDepthMask",
        constants$7.glDepthMask$FUNC
    );
    static final FunctionDescriptor glDepthRange$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle glDepthRange$MH = RuntimeHelper.downcallHandle(
        "glDepthRange",
        constants$7.glDepthRange$FUNC
    );
    static final FunctionDescriptor glClearAccum$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle glClearAccum$MH = RuntimeHelper.downcallHandle(
        "glClearAccum",
        constants$7.glClearAccum$FUNC
    );
}


