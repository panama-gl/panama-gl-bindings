// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLPATHCOMMANDSNVPROC {

    void apply(int path, int numCommands, java.lang.foreign.MemoryAddress commands, int numCoords, int coordType, java.lang.foreign.MemoryAddress coords);
    static MemorySegment allocate(PFNGLPATHCOMMANDSNVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLPATHCOMMANDSNVPROC.class, fi, constants$1133.PFNGLPATHCOMMANDSNVPROC$FUNC, session);
    }
    static PFNGLPATHCOMMANDSNVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _path, int _numCommands, java.lang.foreign.MemoryAddress _commands, int _numCoords, int _coordType, java.lang.foreign.MemoryAddress _coords) -> {
            try {
                constants$1134.PFNGLPATHCOMMANDSNVPROC$MH.invokeExact((Addressable)symbol, _path, _numCommands, (java.lang.foreign.Addressable)_commands, _numCoords, _coordType, (java.lang.foreign.Addressable)_coords);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


