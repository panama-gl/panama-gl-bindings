// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$108 {

    static final FunctionDescriptor glPointParameteriv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glPointParameteriv$MH = RuntimeHelper.downcallHandle(
        "glPointParameteriv",
        constants$108.glPointParameteriv$FUNC
    );
    static final FunctionDescriptor glFogCoordf$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle glFogCoordf$MH = RuntimeHelper.downcallHandle(
        "glFogCoordf",
        constants$108.glFogCoordf$FUNC
    );
    static final FunctionDescriptor glFogCoordfv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glFogCoordfv$MH = RuntimeHelper.downcallHandle(
        "glFogCoordfv",
        constants$108.glFogCoordfv$FUNC
    );
    static final FunctionDescriptor glFogCoordd$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle glFogCoordd$MH = RuntimeHelper.downcallHandle(
        "glFogCoordd",
        constants$108.glFogCoordd$FUNC
    );
    static final FunctionDescriptor glFogCoorddv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glFogCoorddv$MH = RuntimeHelper.downcallHandle(
        "glFogCoorddv",
        constants$108.glFogCoorddv$FUNC
    );
    static final FunctionDescriptor glFogCoordPointer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glFogCoordPointer$MH = RuntimeHelper.downcallHandle(
        "glFogCoordPointer",
        constants$108.glFogCoordPointer$FUNC
    );
}


