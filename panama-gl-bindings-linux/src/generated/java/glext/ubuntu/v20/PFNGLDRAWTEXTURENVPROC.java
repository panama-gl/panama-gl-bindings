// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLDRAWTEXTURENVPROC {

    void apply(int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
    static MemorySegment allocate(PFNGLDRAWTEXTURENVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLDRAWTEXTURENVPROC.class, fi, constants$740.PFNGLDRAWTEXTURENVPROC$FUNC, session);
    }
    static PFNGLDRAWTEXTURENVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _texture, int _sampler, float _x0, float _y0, float _x1, float _y1, float _z, float _s0, float _t0, float _s1, float _t1) -> {
            try {
                constants$740.PFNGLDRAWTEXTURENVPROC$MH.invokeExact((Addressable)symbol, _texture, _sampler, _x0, _y0, _x1, _y1, _z, _s0, _t0, _s1, _t1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


