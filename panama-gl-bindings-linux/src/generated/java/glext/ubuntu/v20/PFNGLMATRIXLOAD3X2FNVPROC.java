// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLMATRIXLOAD3X2FNVPROC {

    void apply(int matrixMode, java.lang.foreign.MemoryAddress m);
    static MemorySegment allocate(PFNGLMATRIXLOAD3X2FNVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLMATRIXLOAD3X2FNVPROC.class, fi, constants$1146.PFNGLMATRIXLOAD3X2FNVPROC$FUNC, session);
    }
    static PFNGLMATRIXLOAD3X2FNVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _matrixMode, java.lang.foreign.MemoryAddress _m) -> {
            try {
                constants$1147.PFNGLMATRIXLOAD3X2FNVPROC$MH.invokeExact((Addressable)symbol, _matrixMode, (java.lang.foreign.Addressable)_m);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


