// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$2 {

    static final FunctionDescriptor glLineStipple$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle glLineStipple$MH = RuntimeHelper.downcallHandle(
        "glLineStipple",
        constants$2.glLineStipple$FUNC
    );
    static final FunctionDescriptor glPolygonMode$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glPolygonMode$MH = RuntimeHelper.downcallHandle(
        "glPolygonMode",
        constants$2.glPolygonMode$FUNC
    );
    static final FunctionDescriptor glPolygonOffset$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle glPolygonOffset$MH = RuntimeHelper.downcallHandle(
        "glPolygonOffset",
        constants$2.glPolygonOffset$FUNC
    );
    static final FunctionDescriptor glPolygonStipple$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glPolygonStipple$MH = RuntimeHelper.downcallHandle(
        "glPolygonStipple",
        constants$2.glPolygonStipple$FUNC
    );
    static final FunctionDescriptor glGetPolygonStipple$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glGetPolygonStipple$MH = RuntimeHelper.downcallHandle(
        "glGetPolygonStipple",
        constants$2.glGetPolygonStipple$FUNC
    );
    static final FunctionDescriptor glEdgeFlag$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle glEdgeFlag$MH = RuntimeHelper.downcallHandle(
        "glEdgeFlag",
        constants$2.glEdgeFlag$FUNC
    );
}


