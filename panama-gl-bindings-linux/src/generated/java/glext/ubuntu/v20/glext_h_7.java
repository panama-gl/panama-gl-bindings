// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glext_h_7 extends glext_h_6 {

    public static MethodHandle glVertexAttribL4d$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL4d$MH,"glVertexAttribL4d");
    }
    public static void glVertexAttribL4d ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttribL4d$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL1dv$MH,"glVertexAttribL1dv");
    }
    public static void glVertexAttribL1dv ( int index,  Addressable v) {
        var mh$ = glVertexAttribL1dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL2dv$MH,"glVertexAttribL2dv");
    }
    public static void glVertexAttribL2dv ( int index,  Addressable v) {
        var mh$ = glVertexAttribL2dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL3dv$MH,"glVertexAttribL3dv");
    }
    public static void glVertexAttribL3dv ( int index,  Addressable v) {
        var mh$ = glVertexAttribL3dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$324.glVertexAttribL4dv$MH,"glVertexAttribL4dv");
    }
    public static void glVertexAttribL4dv ( int index,  Addressable v) {
        var mh$ = glVertexAttribL4dv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribLPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glVertexAttribLPointer$MH,"glVertexAttribLPointer");
    }
    public static void glVertexAttribLPointer ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribLPointer$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribLdv$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glGetVertexAttribLdv$MH,"glGetVertexAttribLdv");
    }
    public static void glGetVertexAttribLdv ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribLdv$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewportArrayv$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glViewportArrayv$MH,"glViewportArrayv");
    }
    public static void glViewportArrayv ( int first,  int count,  Addressable v) {
        var mh$ = glViewportArrayv$MH();
        try {
            mh$.invokeExact(first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewportIndexedf$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glViewportIndexedf$MH,"glViewportIndexedf");
    }
    public static void glViewportIndexedf ( int index,  float x,  float y,  float w,  float h) {
        var mh$ = glViewportIndexedf$MH();
        try {
            mh$.invokeExact(index, x, y, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewportIndexedfv$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glViewportIndexedfv$MH,"glViewportIndexedfv");
    }
    public static void glViewportIndexedfv ( int index,  Addressable v) {
        var mh$ = glViewportIndexedfv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissorArrayv$MH() {
        return RuntimeHelper.requireNonNull(constants$325.glScissorArrayv$MH,"glScissorArrayv");
    }
    public static void glScissorArrayv ( int first,  int count,  Addressable v) {
        var mh$ = glScissorArrayv$MH();
        try {
            mh$.invokeExact(first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissorIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glScissorIndexed$MH,"glScissorIndexed");
    }
    public static void glScissorIndexed ( int index,  int left,  int bottom,  int width,  int height) {
        var mh$ = glScissorIndexed$MH();
        try {
            mh$.invokeExact(index, left, bottom, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissorIndexedv$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glScissorIndexedv$MH,"glScissorIndexedv");
    }
    public static void glScissorIndexedv ( int index,  Addressable v) {
        var mh$ = glScissorIndexedv$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangeArrayv$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glDepthRangeArrayv$MH,"glDepthRangeArrayv");
    }
    public static void glDepthRangeArrayv ( int first,  int count,  Addressable v) {
        var mh$ = glDepthRangeArrayv$MH();
        try {
            mh$.invokeExact(first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangeIndexed$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glDepthRangeIndexed$MH,"glDepthRangeIndexed");
    }
    public static void glDepthRangeIndexed ( int index,  double n,  double f) {
        var mh$ = glDepthRangeIndexed$MH();
        try {
            mh$.invokeExact(index, n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloati_v$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glGetFloati_v$MH,"glGetFloati_v");
    }
    public static void glGetFloati_v ( int target,  int index,  Addressable data) {
        var mh$ = glGetFloati_v$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublei_v$MH() {
        return RuntimeHelper.requireNonNull(constants$326.glGetDoublei_v$MH,"glGetDoublei_v");
    }
    public static void glGetDoublei_v ( int target,  int index,  Addressable data) {
        var mh$ = glGetDoublei_v$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstancedBaseInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glDrawArraysInstancedBaseInstance$MH,"glDrawArraysInstancedBaseInstance");
    }
    public static void glDrawArraysInstancedBaseInstance ( int mode,  int first,  int count,  int instancecount,  int baseinstance) {
        var mh$ = glDrawArraysInstancedBaseInstance$MH();
        try {
            mh$.invokeExact(mode, first, count, instancecount, baseinstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedBaseInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glDrawElementsInstancedBaseInstance$MH,"glDrawElementsInstancedBaseInstance");
    }
    public static void glDrawElementsInstancedBaseInstance ( int mode,  int count,  int type,  Addressable indices,  int instancecount,  int baseinstance) {
        var mh$ = glDrawElementsInstancedBaseInstance$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, instancecount, baseinstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedBaseVertexBaseInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glDrawElementsInstancedBaseVertexBaseInstance$MH,"glDrawElementsInstancedBaseVertexBaseInstance");
    }
    public static void glDrawElementsInstancedBaseVertexBaseInstance ( int mode,  int count,  int type,  Addressable indices,  int instancecount,  int basevertex,  int baseinstance) {
        var mh$ = glDrawElementsInstancedBaseVertexBaseInstance$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, instancecount, basevertex, baseinstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInternalformativ$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glGetInternalformativ$MH,"glGetInternalformativ");
    }
    public static void glGetInternalformativ ( int target,  int internalformat,  int pname,  int bufSize,  Addressable params) {
        var mh$ = glGetInternalformativ$MH();
        try {
            mh$.invokeExact(target, internalformat, pname, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveAtomicCounterBufferiv$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glGetActiveAtomicCounterBufferiv$MH,"glGetActiveAtomicCounterBufferiv");
    }
    public static void glGetActiveAtomicCounterBufferiv ( int program,  int bufferIndex,  int pname,  Addressable params) {
        var mh$ = glGetActiveAtomicCounterBufferiv$MH();
        try {
            mh$.invokeExact(program, bufferIndex, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindImageTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$331.glBindImageTexture$MH,"glBindImageTexture");
    }
    public static void glBindImageTexture ( int unit,  int texture,  int level,  byte layered,  int layer,  int access,  int format) {
        var mh$ = glBindImageTexture$MH();
        try {
            mh$.invokeExact(unit, texture, level, layered, layer, access, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMemoryBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glMemoryBarrier$MH,"glMemoryBarrier");
    }
    public static void glMemoryBarrier ( int barriers) {
        var mh$ = glMemoryBarrier$MH();
        try {
            mh$.invokeExact(barriers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glTexStorage1D$MH,"glTexStorage1D");
    }
    public static void glTexStorage1D ( int target,  int levels,  int internalformat,  int width) {
        var mh$ = glTexStorage1D$MH();
        try {
            mh$.invokeExact(target, levels, internalformat, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glTexStorage2D$MH,"glTexStorage2D");
    }
    public static void glTexStorage2D ( int target,  int levels,  int internalformat,  int width,  int height) {
        var mh$ = glTexStorage2D$MH();
        try {
            mh$.invokeExact(target, levels, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glTexStorage3D$MH,"glTexStorage3D");
    }
    public static void glTexStorage3D ( int target,  int levels,  int internalformat,  int width,  int height,  int depth) {
        var mh$ = glTexStorage3D$MH();
        try {
            mh$.invokeExact(target, levels, internalformat, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTransformFeedbackInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glDrawTransformFeedbackInstanced$MH,"glDrawTransformFeedbackInstanced");
    }
    public static void glDrawTransformFeedbackInstanced ( int mode,  int id,  int instancecount) {
        var mh$ = glDrawTransformFeedbackInstanced$MH();
        try {
            mh$.invokeExact(mode, id, instancecount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTransformFeedbackStreamInstanced$MH() {
        return RuntimeHelper.requireNonNull(constants$332.glDrawTransformFeedbackStreamInstanced$MH,"glDrawTransformFeedbackStreamInstanced");
    }
    public static void glDrawTransformFeedbackStreamInstanced ( int mode,  int id,  int stream,  int instancecount) {
        var mh$ = glDrawTransformFeedbackStreamInstanced$MH();
        try {
            mh$.invokeExact(mode, id, stream, instancecount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$347.glClearBufferData$MH,"glClearBufferData");
    }
    public static void glClearBufferData ( int target,  int internalformat,  int format,  int type,  Addressable data) {
        var mh$ = glClearBufferData$MH();
        try {
            mh$.invokeExact(target, internalformat, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$347.glClearBufferSubData$MH,"glClearBufferSubData");
    }
    public static void glClearBufferSubData ( int target,  int internalformat,  long offset,  long size,  int format,  int type,  Addressable data) {
        var mh$ = glClearBufferSubData$MH();
        try {
            mh$.invokeExact(target, internalformat, offset, size, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDispatchCompute$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glDispatchCompute$MH,"glDispatchCompute");
    }
    public static void glDispatchCompute ( int num_groups_x,  int num_groups_y,  int num_groups_z) {
        var mh$ = glDispatchCompute$MH();
        try {
            mh$.invokeExact(num_groups_x, num_groups_y, num_groups_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDispatchComputeIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glDispatchComputeIndirect$MH,"glDispatchComputeIndirect");
    }
    public static void glDispatchComputeIndirect ( long indirect) {
        var mh$ = glDispatchComputeIndirect$MH();
        try {
            mh$.invokeExact(indirect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyImageSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glCopyImageSubData$MH,"glCopyImageSubData");
    }
    public static void glCopyImageSubData ( int srcName,  int srcTarget,  int srcLevel,  int srcX,  int srcY,  int srcZ,  int dstName,  int dstTarget,  int dstLevel,  int dstX,  int dstY,  int dstZ,  int srcWidth,  int srcHeight,  int srcDepth) {
        var mh$ = glCopyImageSubData$MH();
        try {
            mh$.invokeExact(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glFramebufferParameteri$MH,"glFramebufferParameteri");
    }
    public static void glFramebufferParameteri ( int target,  int pname,  int param) {
        var mh$ = glFramebufferParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glGetFramebufferParameteriv$MH,"glGetFramebufferParameteriv");
    }
    public static void glGetFramebufferParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInternalformati64v$MH() {
        return RuntimeHelper.requireNonNull(constants$348.glGetInternalformati64v$MH,"glGetInternalformati64v");
    }
    public static void glGetInternalformati64v ( int target,  int internalformat,  int pname,  int bufSize,  Addressable params) {
        var mh$ = glGetInternalformati64v$MH();
        try {
            mh$.invokeExact(target, internalformat, pname, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateTexSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateTexSubImage$MH,"glInvalidateTexSubImage");
    }
    public static void glInvalidateTexSubImage ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth) {
        var mh$ = glInvalidateTexSubImage$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateTexImage$MH,"glInvalidateTexImage");
    }
    public static void glInvalidateTexImage ( int texture,  int level) {
        var mh$ = glInvalidateTexImage$MH();
        try {
            mh$.invokeExact(texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateBufferSubData$MH,"glInvalidateBufferSubData");
    }
    public static void glInvalidateBufferSubData ( int buffer,  long offset,  long length) {
        var mh$ = glInvalidateBufferSubData$MH();
        try {
            mh$.invokeExact(buffer, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateBufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateBufferData$MH,"glInvalidateBufferData");
    }
    public static void glInvalidateBufferData ( int buffer) {
        var mh$ = glInvalidateBufferData$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateFramebuffer$MH,"glInvalidateFramebuffer");
    }
    public static void glInvalidateFramebuffer ( int target,  int numAttachments,  Addressable attachments) {
        var mh$ = glInvalidateFramebuffer$MH();
        try {
            mh$.invokeExact(target, numAttachments, attachments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateSubFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$349.glInvalidateSubFramebuffer$MH,"glInvalidateSubFramebuffer");
    }
    public static void glInvalidateSubFramebuffer ( int target,  int numAttachments,  Addressable attachments,  int x,  int y,  int width,  int height) {
        var mh$ = glInvalidateSubFramebuffer$MH();
        try {
            mh$.invokeExact(target, numAttachments, attachments, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glMultiDrawArraysIndirect$MH,"glMultiDrawArraysIndirect");
    }
    public static void glMultiDrawArraysIndirect ( int mode,  Addressable indirect,  int drawcount,  int stride) {
        var mh$ = glMultiDrawArraysIndirect$MH();
        try {
            mh$.invokeExact(mode, indirect, drawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glMultiDrawElementsIndirect$MH,"glMultiDrawElementsIndirect");
    }
    public static void glMultiDrawElementsIndirect ( int mode,  int type,  Addressable indirect,  int drawcount,  int stride) {
        var mh$ = glMultiDrawElementsIndirect$MH();
        try {
            mh$.invokeExact(mode, type, indirect, drawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramInterfaceiv$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glGetProgramInterfaceiv$MH,"glGetProgramInterfaceiv");
    }
    public static void glGetProgramInterfaceiv ( int program,  int programInterface,  int pname,  Addressable params) {
        var mh$ = glGetProgramInterfaceiv$MH();
        try {
            mh$.invokeExact(program, programInterface, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourceIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glGetProgramResourceIndex$MH,"glGetProgramResourceIndex");
    }
    public static int glGetProgramResourceIndex ( int program,  int programInterface,  Addressable name) {
        var mh$ = glGetProgramResourceIndex$MH();
        try {
            return (int)mh$.invokeExact(program, programInterface, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourceName$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glGetProgramResourceName$MH,"glGetProgramResourceName");
    }
    public static void glGetProgramResourceName ( int program,  int programInterface,  int index,  int bufSize,  Addressable length,  Addressable name) {
        var mh$ = glGetProgramResourceName$MH();
        try {
            mh$.invokeExact(program, programInterface, index, bufSize, length, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourceiv$MH() {
        return RuntimeHelper.requireNonNull(constants$350.glGetProgramResourceiv$MH,"glGetProgramResourceiv");
    }
    public static void glGetProgramResourceiv ( int program,  int programInterface,  int index,  int propCount,  Addressable props,  int bufSize,  Addressable length,  Addressable params) {
        var mh$ = glGetProgramResourceiv$MH();
        try {
            mh$.invokeExact(program, programInterface, index, propCount, props, bufSize, length, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourceLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glGetProgramResourceLocation$MH,"glGetProgramResourceLocation");
    }
    public static int glGetProgramResourceLocation ( int program,  int programInterface,  Addressable name) {
        var mh$ = glGetProgramResourceLocation$MH();
        try {
            return (int)mh$.invokeExact(program, programInterface, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourceLocationIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glGetProgramResourceLocationIndex$MH,"glGetProgramResourceLocationIndex");
    }
    public static int glGetProgramResourceLocationIndex ( int program,  int programInterface,  Addressable name) {
        var mh$ = glGetProgramResourceLocationIndex$MH();
        try {
            return (int)mh$.invokeExact(program, programInterface, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderStorageBlockBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glShaderStorageBlockBinding$MH,"glShaderStorageBlockBinding");
    }
    public static void glShaderStorageBlockBinding ( int program,  int storageBlockIndex,  int storageBlockBinding) {
        var mh$ = glShaderStorageBlockBinding$MH();
        try {
            mh$.invokeExact(program, storageBlockIndex, storageBlockBinding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glTexBufferRange$MH,"glTexBufferRange");
    }
    public static void glTexBufferRange ( int target,  int internalformat,  int buffer,  long offset,  long size) {
        var mh$ = glTexBufferRange$MH();
        try {
            mh$.invokeExact(target, internalformat, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorage2DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glTexStorage2DMultisample$MH,"glTexStorage2DMultisample");
    }
    public static void glTexStorage2DMultisample ( int target,  int samples,  int internalformat,  int width,  int height,  byte fixedsamplelocations) {
        var mh$ = glTexStorage2DMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorage3DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$351.glTexStorage3DMultisample$MH,"glTexStorage3DMultisample");
    }
    public static void glTexStorage3DMultisample ( int target,  int samples,  int internalformat,  int width,  int height,  int depth,  byte fixedsamplelocations) {
        var mh$ = glTexStorage3DMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureView$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glTextureView$MH,"glTextureView");
    }
    public static void glTextureView ( int texture,  int target,  int origtexture,  int internalformat,  int minlevel,  int numlevels,  int minlayer,  int numlayers) {
        var mh$ = glTextureView$MH();
        try {
            mh$.invokeExact(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glBindVertexBuffer$MH,"glBindVertexBuffer");
    }
    public static void glBindVertexBuffer ( int bindingindex,  int buffer,  long offset,  int stride) {
        var mh$ = glBindVertexBuffer$MH();
        try {
            mh$.invokeExact(bindingindex, buffer, offset, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glVertexAttribFormat$MH,"glVertexAttribFormat");
    }
    public static void glVertexAttribFormat ( int attribindex,  int size,  int type,  byte normalized,  int relativeoffset) {
        var mh$ = glVertexAttribFormat$MH();
        try {
            mh$.invokeExact(attribindex, size, type, normalized, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glVertexAttribIFormat$MH,"glVertexAttribIFormat");
    }
    public static void glVertexAttribIFormat ( int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexAttribIFormat$MH();
        try {
            mh$.invokeExact(attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribLFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glVertexAttribLFormat$MH,"glVertexAttribLFormat");
    }
    public static void glVertexAttribLFormat ( int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexAttribLFormat$MH();
        try {
            mh$.invokeExact(attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$352.glVertexAttribBinding$MH,"glVertexAttribBinding");
    }
    public static void glVertexAttribBinding ( int attribindex,  int bindingindex) {
        var mh$ = glVertexAttribBinding$MH();
        try {
            mh$.invokeExact(attribindex, bindingindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBindingDivisor$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glVertexBindingDivisor$MH,"glVertexBindingDivisor");
    }
    public static void glVertexBindingDivisor ( int bindingindex,  int divisor) {
        var mh$ = glVertexBindingDivisor$MH();
        try {
            mh$.invokeExact(bindingindex, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageControl$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glDebugMessageControl$MH,"glDebugMessageControl");
    }
    public static void glDebugMessageControl ( int source,  int type,  int severity,  int count,  Addressable ids,  byte enabled) {
        var mh$ = glDebugMessageControl$MH();
        try {
            mh$.invokeExact(source, type, severity, count, ids, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageInsert$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glDebugMessageInsert$MH,"glDebugMessageInsert");
    }
    public static void glDebugMessageInsert ( int source,  int type,  int id,  int severity,  int length,  Addressable buf) {
        var mh$ = glDebugMessageInsert$MH();
        try {
            mh$.invokeExact(source, type, id, severity, length, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glDebugMessageCallback$MH,"glDebugMessageCallback");
    }
    public static void glDebugMessageCallback ( Addressable callback,  Addressable userParam) {
        var mh$ = glDebugMessageCallback$MH();
        try {
            mh$.invokeExact(callback, userParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDebugMessageLog$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glGetDebugMessageLog$MH,"glGetDebugMessageLog");
    }
    public static int glGetDebugMessageLog ( int count,  int bufSize,  Addressable sources,  Addressable types,  Addressable ids,  Addressable severities,  Addressable lengths,  Addressable messageLog) {
        var mh$ = glGetDebugMessageLog$MH();
        try {
            return (int)mh$.invokeExact(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$353.glPushDebugGroup$MH,"glPushDebugGroup");
    }
    public static void glPushDebugGroup ( int source,  int id,  int length,  Addressable message) {
        var mh$ = glPushDebugGroup$MH();
        try {
            mh$.invokeExact(source, id, length, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopDebugGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$354.glPopDebugGroup$MH,"glPopDebugGroup");
    }
    public static void glPopDebugGroup () {
        var mh$ = glPopDebugGroup$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$354.glObjectLabel$MH,"glObjectLabel");
    }
    public static void glObjectLabel ( int identifier,  int name,  int length,  Addressable label) {
        var mh$ = glObjectLabel$MH();
        try {
            mh$.invokeExact(identifier, name, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$354.glGetObjectLabel$MH,"glGetObjectLabel");
    }
    public static void glGetObjectLabel ( int identifier,  int name,  int bufSize,  Addressable length,  Addressable label) {
        var mh$ = glGetObjectLabel$MH();
        try {
            mh$.invokeExact(identifier, name, bufSize, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectPtrLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$354.glObjectPtrLabel$MH,"glObjectPtrLabel");
    }
    public static void glObjectPtrLabel ( Addressable ptr,  int length,  Addressable label) {
        var mh$ = glObjectPtrLabel$MH();
        try {
            mh$.invokeExact(ptr, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectPtrLabel$MH() {
        return RuntimeHelper.requireNonNull(constants$354.glGetObjectPtrLabel$MH,"glGetObjectPtrLabel");
    }
    public static void glGetObjectPtrLabel ( Addressable ptr,  int bufSize,  Addressable length,  Addressable label) {
        var mh$ = glGetObjectPtrLabel$MH();
        try {
            mh$.invokeExact(ptr, bufSize, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$357.glBufferStorage$MH,"glBufferStorage");
    }
    public static void glBufferStorage ( int target,  long size,  Addressable data,  int flags) {
        var mh$ = glBufferStorage$MH();
        try {
            mh$.invokeExact(target, size, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glClearTexImage$MH,"glClearTexImage");
    }
    public static void glClearTexImage ( int texture,  int level,  int format,  int type,  Addressable data) {
        var mh$ = glClearTexImage$MH();
        try {
            mh$.invokeExact(texture, level, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearTexSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glClearTexSubImage$MH,"glClearTexSubImage");
    }
    public static void glClearTexSubImage ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable data) {
        var mh$ = glClearTexSubImage$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBuffersBase$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glBindBuffersBase$MH,"glBindBuffersBase");
    }
    public static void glBindBuffersBase ( int target,  int first,  int count,  Addressable buffers) {
        var mh$ = glBindBuffersBase$MH();
        try {
            mh$.invokeExact(target, first, count, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBuffersRange$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glBindBuffersRange$MH,"glBindBuffersRange");
    }
    public static void glBindBuffersRange ( int target,  int first,  int count,  Addressable buffers,  Addressable offsets,  Addressable sizes) {
        var mh$ = glBindBuffersRange$MH();
        try {
            mh$.invokeExact(target, first, count, buffers, offsets, sizes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glBindTextures$MH,"glBindTextures");
    }
    public static void glBindTextures ( int first,  int count,  Addressable textures) {
        var mh$ = glBindTextures$MH();
        try {
            mh$.invokeExact(first, count, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindSamplers$MH() {
        return RuntimeHelper.requireNonNull(constants$358.glBindSamplers$MH,"glBindSamplers");
    }
    public static void glBindSamplers ( int first,  int count,  Addressable samplers) {
        var mh$ = glBindSamplers$MH();
        try {
            mh$.invokeExact(first, count, samplers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindImageTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$359.glBindImageTextures$MH,"glBindImageTextures");
    }
    public static void glBindImageTextures ( int first,  int count,  Addressable textures) {
        var mh$ = glBindImageTextures$MH();
        try {
            mh$.invokeExact(first, count, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$359.glBindVertexBuffers$MH,"glBindVertexBuffers");
    }
    public static void glBindVertexBuffers ( int first,  int count,  Addressable buffers,  Addressable offsets,  Addressable strides) {
        var mh$ = glBindVertexBuffers$MH();
        try {
            mh$.invokeExact(first, count, buffers, offsets, strides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipControl$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glClipControl$MH,"glClipControl");
    }
    public static void glClipControl ( int origin,  int depth) {
        var mh$ = glClipControl$MH();
        try {
            mh$.invokeExact(origin, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateTransformFeedbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glCreateTransformFeedbacks$MH,"glCreateTransformFeedbacks");
    }
    public static void glCreateTransformFeedbacks ( int n,  Addressable ids) {
        var mh$ = glCreateTransformFeedbacks$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackBufferBase$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glTransformFeedbackBufferBase$MH,"glTransformFeedbackBufferBase");
    }
    public static void glTransformFeedbackBufferBase ( int xfb,  int index,  int buffer) {
        var mh$ = glTransformFeedbackBufferBase$MH();
        try {
            mh$.invokeExact(xfb, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glTransformFeedbackBufferRange$MH,"glTransformFeedbackBufferRange");
    }
    public static void glTransformFeedbackBufferRange ( int xfb,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glTransformFeedbackBufferRange$MH();
        try {
            mh$.invokeExact(xfb, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackiv$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glGetTransformFeedbackiv$MH,"glGetTransformFeedbackiv");
    }
    public static void glGetTransformFeedbackiv ( int xfb,  int pname,  Addressable param) {
        var mh$ = glGetTransformFeedbackiv$MH();
        try {
            mh$.invokeExact(xfb, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbacki_v$MH() {
        return RuntimeHelper.requireNonNull(constants$400.glGetTransformFeedbacki_v$MH,"glGetTransformFeedbacki_v");
    }
    public static void glGetTransformFeedbacki_v ( int xfb,  int pname,  int index,  Addressable param) {
        var mh$ = glGetTransformFeedbacki_v$MH();
        try {
            mh$.invokeExact(xfb, pname, index, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbacki64_v$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glGetTransformFeedbacki64_v$MH,"glGetTransformFeedbacki64_v");
    }
    public static void glGetTransformFeedbacki64_v ( int xfb,  int pname,  int index,  Addressable param) {
        var mh$ = glGetTransformFeedbacki64_v$MH();
        try {
            mh$.invokeExact(xfb, pname, index, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glCreateBuffers$MH,"glCreateBuffers");
    }
    public static void glCreateBuffers ( int n,  Addressable buffers) {
        var mh$ = glCreateBuffers$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glNamedBufferStorage$MH,"glNamedBufferStorage");
    }
    public static void glNamedBufferStorage ( int buffer,  long size,  Addressable data,  int flags) {
        var mh$ = glNamedBufferStorage$MH();
        try {
            mh$.invokeExact(buffer, size, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glNamedBufferData$MH,"glNamedBufferData");
    }
    public static void glNamedBufferData ( int buffer,  long size,  Addressable data,  int usage) {
        var mh$ = glNamedBufferData$MH();
        try {
            mh$.invokeExact(buffer, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glNamedBufferSubData$MH,"glNamedBufferSubData");
    }
    public static void glNamedBufferSubData ( int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glNamedBufferSubData$MH();
        try {
            mh$.invokeExact(buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyNamedBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$401.glCopyNamedBufferSubData$MH,"glCopyNamedBufferSubData");
    }
    public static void glCopyNamedBufferSubData ( int readBuffer,  int writeBuffer,  long readOffset,  long writeOffset,  long size) {
        var mh$ = glCopyNamedBufferSubData$MH();
        try {
            mh$.invokeExact(readBuffer, writeBuffer, readOffset, writeOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedBufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glClearNamedBufferData$MH,"glClearNamedBufferData");
    }
    public static void glClearNamedBufferData ( int buffer,  int internalformat,  int format,  int type,  Addressable data) {
        var mh$ = glClearNamedBufferData$MH();
        try {
            mh$.invokeExact(buffer, internalformat, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glClearNamedBufferSubData$MH,"glClearNamedBufferSubData");
    }
    public static void glClearNamedBufferSubData ( int buffer,  int internalformat,  long offset,  long size,  int format,  int type,  Addressable data) {
        var mh$ = glClearNamedBufferSubData$MH();
        try {
            mh$.invokeExact(buffer, internalformat, offset, size, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapNamedBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glMapNamedBuffer$MH,"glMapNamedBuffer");
    }
    public static MemoryAddress glMapNamedBuffer ( int buffer,  int access) {
        var mh$ = glMapNamedBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapNamedBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glMapNamedBufferRange$MH,"glMapNamedBufferRange");
    }
    public static MemoryAddress glMapNamedBufferRange ( int buffer,  long offset,  long length,  int access) {
        var mh$ = glMapNamedBufferRange$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, offset, length, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapNamedBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glUnmapNamedBuffer$MH,"glUnmapNamedBuffer");
    }
    public static byte glUnmapNamedBuffer ( int buffer) {
        var mh$ = glUnmapNamedBuffer$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedNamedBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$402.glFlushMappedNamedBufferRange$MH,"glFlushMappedNamedBufferRange");
    }
    public static void glFlushMappedNamedBufferRange ( int buffer,  long offset,  long length) {
        var mh$ = glFlushMappedNamedBufferRange$MH();
        try {
            mh$.invokeExact(buffer, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glGetNamedBufferParameteriv$MH,"glGetNamedBufferParameteriv");
    }
    public static void glGetNamedBufferParameteriv ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferParameteriv$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferParameteri64v$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glGetNamedBufferParameteri64v$MH,"glGetNamedBufferParameteri64v");
    }
    public static void glGetNamedBufferParameteri64v ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferParameteri64v$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glGetNamedBufferPointerv$MH,"glGetNamedBufferPointerv");
    }
    public static void glGetNamedBufferPointerv ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferPointerv$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glGetNamedBufferSubData$MH,"glGetNamedBufferSubData");
    }
    public static void glGetNamedBufferSubData ( int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glGetNamedBufferSubData$MH();
        try {
            mh$.invokeExact(buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glCreateFramebuffers$MH,"glCreateFramebuffers");
    }
    public static void glCreateFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glCreateFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$403.glNamedFramebufferRenderbuffer$MH,"glNamedFramebufferRenderbuffer");
    }
    public static void glNamedFramebufferRenderbuffer ( int framebuffer,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glNamedFramebufferRenderbuffer$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferParameteri$MH,"glNamedFramebufferParameteri");
    }
    public static void glNamedFramebufferParameteri ( int framebuffer,  int pname,  int param) {
        var mh$ = glNamedFramebufferParameteri$MH();
        try {
            mh$.invokeExact(framebuffer, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferTexture$MH,"glNamedFramebufferTexture");
    }
    public static void glNamedFramebufferTexture ( int framebuffer,  int attachment,  int texture,  int level) {
        var mh$ = glNamedFramebufferTexture$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTextureLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferTextureLayer$MH,"glNamedFramebufferTextureLayer");
    }
    public static void glNamedFramebufferTextureLayer ( int framebuffer,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glNamedFramebufferTextureLayer$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferDrawBuffer$MH,"glNamedFramebufferDrawBuffer");
    }
    public static void glNamedFramebufferDrawBuffer ( int framebuffer,  int buf) {
        var mh$ = glNamedFramebufferDrawBuffer$MH();
        try {
            mh$.invokeExact(framebuffer, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferDrawBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferDrawBuffers$MH,"glNamedFramebufferDrawBuffers");
    }
    public static void glNamedFramebufferDrawBuffers ( int framebuffer,  int n,  Addressable bufs) {
        var mh$ = glNamedFramebufferDrawBuffers$MH();
        try {
            mh$.invokeExact(framebuffer, n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$404.glNamedFramebufferReadBuffer$MH,"glNamedFramebufferReadBuffer");
    }
    public static void glNamedFramebufferReadBuffer ( int framebuffer,  int src) {
        var mh$ = glNamedFramebufferReadBuffer$MH();
        try {
            mh$.invokeExact(framebuffer, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateNamedFramebufferData$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glInvalidateNamedFramebufferData$MH,"glInvalidateNamedFramebufferData");
    }
    public static void glInvalidateNamedFramebufferData ( int framebuffer,  int numAttachments,  Addressable attachments) {
        var mh$ = glInvalidateNamedFramebufferData$MH();
        try {
            mh$.invokeExact(framebuffer, numAttachments, attachments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInvalidateNamedFramebufferSubData$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glInvalidateNamedFramebufferSubData$MH,"glInvalidateNamedFramebufferSubData");
    }
    public static void glInvalidateNamedFramebufferSubData ( int framebuffer,  int numAttachments,  Addressable attachments,  int x,  int y,  int width,  int height) {
        var mh$ = glInvalidateNamedFramebufferSubData$MH();
        try {
            mh$.invokeExact(framebuffer, numAttachments, attachments, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedFramebufferiv$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glClearNamedFramebufferiv$MH,"glClearNamedFramebufferiv");
    }
    public static void glClearNamedFramebufferiv ( int framebuffer,  int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearNamedFramebufferiv$MH();
        try {
            mh$.invokeExact(framebuffer, buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedFramebufferuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glClearNamedFramebufferuiv$MH,"glClearNamedFramebufferuiv");
    }
    public static void glClearNamedFramebufferuiv ( int framebuffer,  int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearNamedFramebufferuiv$MH();
        try {
            mh$.invokeExact(framebuffer, buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedFramebufferfv$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glClearNamedFramebufferfv$MH,"glClearNamedFramebufferfv");
    }
    public static void glClearNamedFramebufferfv ( int framebuffer,  int buffer,  int drawbuffer,  Addressable value) {
        var mh$ = glClearNamedFramebufferfv$MH();
        try {
            mh$.invokeExact(framebuffer, buffer, drawbuffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedFramebufferfi$MH() {
        return RuntimeHelper.requireNonNull(constants$405.glClearNamedFramebufferfi$MH,"glClearNamedFramebufferfi");
    }
    public static void glClearNamedFramebufferfi ( int framebuffer,  int buffer,  int drawbuffer,  float depth,  int stencil) {
        var mh$ = glClearNamedFramebufferfi$MH();
        try {
            mh$.invokeExact(framebuffer, buffer, drawbuffer, depth, stencil);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitNamedFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glBlitNamedFramebuffer$MH,"glBlitNamedFramebuffer");
    }
    public static void glBlitNamedFramebuffer ( int readFramebuffer,  int drawFramebuffer,  int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitNamedFramebuffer$MH();
        try {
            mh$.invokeExact(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckNamedFramebufferStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glCheckNamedFramebufferStatus$MH,"glCheckNamedFramebufferStatus");
    }
    public static int glCheckNamedFramebufferStatus ( int framebuffer,  int target) {
        var mh$ = glCheckNamedFramebufferStatus$MH();
        try {
            return (int)mh$.invokeExact(framebuffer, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedFramebufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glGetNamedFramebufferParameteriv$MH,"glGetNamedFramebufferParameteriv");
    }
    public static void glGetNamedFramebufferParameteriv ( int framebuffer,  int pname,  Addressable param) {
        var mh$ = glGetNamedFramebufferParameteriv$MH();
        try {
            mh$.invokeExact(framebuffer, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedFramebufferAttachmentParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glGetNamedFramebufferAttachmentParameteriv$MH,"glGetNamedFramebufferAttachmentParameteriv");
    }
    public static void glGetNamedFramebufferAttachmentParameteriv ( int framebuffer,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetNamedFramebufferAttachmentParameteriv$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glCreateRenderbuffers$MH,"glCreateRenderbuffers");
    }
    public static void glCreateRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glCreateRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$406.glNamedRenderbufferStorage$MH,"glNamedRenderbufferStorage");
    }
    public static void glNamedRenderbufferStorage ( int renderbuffer,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorage$MH();
        try {
            mh$.invokeExact(renderbuffer, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorageMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glNamedRenderbufferStorageMultisample$MH,"glNamedRenderbufferStorageMultisample");
    }
    public static void glNamedRenderbufferStorageMultisample ( int renderbuffer,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorageMultisample$MH();
        try {
            mh$.invokeExact(renderbuffer, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedRenderbufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glGetNamedRenderbufferParameteriv$MH,"glGetNamedRenderbufferParameteriv");
    }
    public static void glGetNamedRenderbufferParameteriv ( int renderbuffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedRenderbufferParameteriv$MH();
        try {
            mh$.invokeExact(renderbuffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glCreateTextures$MH,"glCreateTextures");
    }
    public static void glCreateTextures ( int target,  int n,  Addressable textures) {
        var mh$ = glCreateTextures$MH();
        try {
            mh$.invokeExact(target, n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glTextureBuffer$MH,"glTextureBuffer");
    }
    public static void glTextureBuffer ( int texture,  int internalformat,  int buffer) {
        var mh$ = glTextureBuffer$MH();
        try {
            mh$.invokeExact(texture, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBufferRange$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glTextureBufferRange$MH,"glTextureBufferRange");
    }
    public static void glTextureBufferRange ( int texture,  int internalformat,  int buffer,  long offset,  long size) {
        var mh$ = glTextureBufferRange$MH();
        try {
            mh$.invokeExact(texture, internalformat, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$407.glTextureStorage1D$MH,"glTextureStorage1D");
    }
    public static void glTextureStorage1D ( int texture,  int levels,  int internalformat,  int width) {
        var mh$ = glTextureStorage1D$MH();
        try {
            mh$.invokeExact(texture, levels, internalformat, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureStorage2D$MH,"glTextureStorage2D");
    }
    public static void glTextureStorage2D ( int texture,  int levels,  int internalformat,  int width,  int height) {
        var mh$ = glTextureStorage2D$MH();
        try {
            mh$.invokeExact(texture, levels, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureStorage3D$MH,"glTextureStorage3D");
    }
    public static void glTextureStorage3D ( int texture,  int levels,  int internalformat,  int width,  int height,  int depth) {
        var mh$ = glTextureStorage3D$MH();
        try {
            mh$.invokeExact(texture, levels, internalformat, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage2DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureStorage2DMultisample$MH,"glTextureStorage2DMultisample");
    }
    public static void glTextureStorage2DMultisample ( int texture,  int samples,  int internalformat,  int width,  int height,  byte fixedsamplelocations) {
        var mh$ = glTextureStorage2DMultisample$MH();
        try {
            mh$.invokeExact(texture, samples, internalformat, width, height, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage3DMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureStorage3DMultisample$MH,"glTextureStorage3DMultisample");
    }
    public static void glTextureStorage3DMultisample ( int texture,  int samples,  int internalformat,  int width,  int height,  int depth,  byte fixedsamplelocations) {
        var mh$ = glTextureStorage3DMultisample$MH();
        try {
            mh$.invokeExact(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureSubImage1D$MH,"glTextureSubImage1D");
    }
    public static void glTextureSubImage1D ( int texture,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage1D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$408.glTextureSubImage2D$MH,"glTextureSubImage2D");
    }
    public static void glTextureSubImage2D ( int texture,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage2D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glTextureSubImage3D$MH,"glTextureSubImage3D");
    }
    public static void glTextureSubImage3D ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage3D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glCompressedTextureSubImage1D$MH,"glCompressedTextureSubImage1D");
    }
    public static void glCompressedTextureSubImage1D ( int texture,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTextureSubImage1D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glCompressedTextureSubImage2D$MH,"glCompressedTextureSubImage2D");
    }
    public static void glCompressedTextureSubImage2D ( int texture,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTextureSubImage2D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glCompressedTextureSubImage3D$MH,"glCompressedTextureSubImage3D");
    }
    public static void glCompressedTextureSubImage3D ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTextureSubImage3D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glCopyTextureSubImage1D$MH,"glCopyTextureSubImage1D");
    }
    public static void glCopyTextureSubImage1D ( int texture,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTextureSubImage1D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$409.glCopyTextureSubImage2D$MH,"glCopyTextureSubImage2D");
    }
    public static void glCopyTextureSubImage2D ( int texture,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTextureSubImage2D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glCopyTextureSubImage3D$MH,"glCopyTextureSubImage3D");
    }
    public static void glCopyTextureSubImage3D ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTextureSubImage3D$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glTextureParameterf$MH,"glTextureParameterf");
    }
    public static void glTextureParameterf ( int texture,  int pname,  float param) {
        var mh$ = glTextureParameterf$MH();
        try {
            mh$.invokeExact(texture, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glTextureParameterfv$MH,"glTextureParameterfv");
    }
    public static void glTextureParameterfv ( int texture,  int pname,  Addressable param) {
        var mh$ = glTextureParameterfv$MH();
        try {
            mh$.invokeExact(texture, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glTextureParameteri$MH,"glTextureParameteri");
    }
    public static void glTextureParameteri ( int texture,  int pname,  int param) {
        var mh$ = glTextureParameteri$MH();
        try {
            mh$.invokeExact(texture, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glTextureParameterIiv$MH,"glTextureParameterIiv");
    }
    public static void glTextureParameterIiv ( int texture,  int pname,  Addressable params) {
        var mh$ = glTextureParameterIiv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$410.glTextureParameterIuiv$MH,"glTextureParameterIuiv");
    }
    public static void glTextureParameterIuiv ( int texture,  int pname,  Addressable params) {
        var mh$ = glTextureParameterIuiv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glTextureParameteriv$MH,"glTextureParameteriv");
    }
    public static void glTextureParameteriv ( int texture,  int pname,  Addressable param) {
        var mh$ = glTextureParameteriv$MH();
        try {
            mh$.invokeExact(texture, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateTextureMipmap$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glGenerateTextureMipmap$MH,"glGenerateTextureMipmap");
    }
    public static void glGenerateTextureMipmap ( int texture) {
        var mh$ = glGenerateTextureMipmap$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTextureUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glBindTextureUnit$MH,"glBindTextureUnit");
    }
    public static void glBindTextureUnit ( int unit,  int texture) {
        var mh$ = glBindTextureUnit$MH();
        try {
            mh$.invokeExact(unit, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureImage$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glGetTextureImage$MH,"glGetTextureImage");
    }
    public static void glGetTextureImage ( int texture,  int level,  int format,  int type,  int bufSize,  Addressable pixels) {
        var mh$ = glGetTextureImage$MH();
        try {
            mh$.invokeExact(texture, level, format, type, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTextureImage$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glGetCompressedTextureImage$MH,"glGetCompressedTextureImage");
    }
    public static void glGetCompressedTextureImage ( int texture,  int level,  int bufSize,  Addressable pixels) {
        var mh$ = glGetCompressedTextureImage$MH();
        try {
            mh$.invokeExact(texture, level, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$411.glGetTextureLevelParameterfv$MH,"glGetTextureLevelParameterfv");
    }
    public static void glGetTextureLevelParameterfv ( int texture,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTextureLevelParameterfv$MH();
        try {
            mh$.invokeExact(texture, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glGetTextureLevelParameteriv$MH,"glGetTextureLevelParameteriv");
    }
    public static void glGetTextureLevelParameteriv ( int texture,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTextureLevelParameteriv$MH();
        try {
            mh$.invokeExact(texture, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glGetTextureParameterfv$MH,"glGetTextureParameterfv");
    }
    public static void glGetTextureParameterfv ( int texture,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterfv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterIiv$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glGetTextureParameterIiv$MH,"glGetTextureParameterIiv");
    }
    public static void glGetTextureParameterIiv ( int texture,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterIiv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterIuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glGetTextureParameterIuiv$MH,"glGetTextureParameterIuiv");
    }
    public static void glGetTextureParameterIuiv ( int texture,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterIuiv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glGetTextureParameteriv$MH,"glGetTextureParameteriv");
    }
    public static void glGetTextureParameteriv ( int texture,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameteriv$MH();
        try {
            mh$.invokeExact(texture, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateVertexArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$412.glCreateVertexArrays$MH,"glCreateVertexArrays");
    }
    public static void glCreateVertexArrays ( int n,  Addressable arrays) {
        var mh$ = glCreateVertexArrays$MH();
        try {
            mh$.invokeExact(n, arrays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexArrayAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glDisableVertexArrayAttrib$MH,"glDisableVertexArrayAttrib");
    }
    public static void glDisableVertexArrayAttrib ( int vaobj,  int index) {
        var mh$ = glDisableVertexArrayAttrib$MH();
        try {
            mh$.invokeExact(vaobj, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexArrayAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glEnableVertexArrayAttrib$MH,"glEnableVertexArrayAttrib");
    }
    public static void glEnableVertexArrayAttrib ( int vaobj,  int index) {
        var mh$ = glEnableVertexArrayAttrib$MH();
        try {
            mh$.invokeExact(vaobj, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayElementBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glVertexArrayElementBuffer$MH,"glVertexArrayElementBuffer");
    }
    public static void glVertexArrayElementBuffer ( int vaobj,  int buffer) {
        var mh$ = glVertexArrayElementBuffer$MH();
        try {
            mh$.invokeExact(vaobj, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glVertexArrayVertexBuffer$MH,"glVertexArrayVertexBuffer");
    }
    public static void glVertexArrayVertexBuffer ( int vaobj,  int bindingindex,  int buffer,  long offset,  int stride) {
        var mh$ = glVertexArrayVertexBuffer$MH();
        try {
            mh$.invokeExact(vaobj, bindingindex, buffer, offset, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glVertexArrayVertexBuffers$MH,"glVertexArrayVertexBuffers");
    }
    public static void glVertexArrayVertexBuffers ( int vaobj,  int first,  int count,  Addressable buffers,  Addressable offsets,  Addressable strides) {
        var mh$ = glVertexArrayVertexBuffers$MH();
        try {
            mh$.invokeExact(vaobj, first, count, buffers, offsets, strides);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayAttribBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$413.glVertexArrayAttribBinding$MH,"glVertexArrayAttribBinding");
    }
    public static void glVertexArrayAttribBinding ( int vaobj,  int attribindex,  int bindingindex) {
        var mh$ = glVertexArrayAttribBinding$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, bindingindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayAttribFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glVertexArrayAttribFormat$MH,"glVertexArrayAttribFormat");
    }
    public static void glVertexArrayAttribFormat ( int vaobj,  int attribindex,  int size,  int type,  byte normalized,  int relativeoffset) {
        var mh$ = glVertexArrayAttribFormat$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, normalized, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayAttribIFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glVertexArrayAttribIFormat$MH,"glVertexArrayAttribIFormat");
    }
    public static void glVertexArrayAttribIFormat ( int vaobj,  int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexArrayAttribIFormat$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayAttribLFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glVertexArrayAttribLFormat$MH,"glVertexArrayAttribLFormat");
    }
    public static void glVertexArrayAttribLFormat ( int vaobj,  int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexArrayAttribLFormat$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayBindingDivisor$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glVertexArrayBindingDivisor$MH,"glVertexArrayBindingDivisor");
    }
    public static void glVertexArrayBindingDivisor ( int vaobj,  int bindingindex,  int divisor) {
        var mh$ = glVertexArrayBindingDivisor$MH();
        try {
            mh$.invokeExact(vaobj, bindingindex, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayiv$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glGetVertexArrayiv$MH,"glGetVertexArrayiv");
    }
    public static void glGetVertexArrayiv ( int vaobj,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayiv$MH();
        try {
            mh$.invokeExact(vaobj, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayIndexediv$MH() {
        return RuntimeHelper.requireNonNull(constants$414.glGetVertexArrayIndexediv$MH,"glGetVertexArrayIndexediv");
    }
    public static void glGetVertexArrayIndexediv ( int vaobj,  int index,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayIndexediv$MH();
        try {
            mh$.invokeExact(vaobj, index, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayIndexed64iv$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glGetVertexArrayIndexed64iv$MH,"glGetVertexArrayIndexed64iv");
    }
    public static void glGetVertexArrayIndexed64iv ( int vaobj,  int index,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayIndexed64iv$MH();
        try {
            mh$.invokeExact(vaobj, index, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateSamplers$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glCreateSamplers$MH,"glCreateSamplers");
    }
    public static void glCreateSamplers ( int n,  Addressable samplers) {
        var mh$ = glCreateSamplers$MH();
        try {
            mh$.invokeExact(n, samplers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgramPipelines$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glCreateProgramPipelines$MH,"glCreateProgramPipelines");
    }
    public static void glCreateProgramPipelines ( int n,  Addressable pipelines) {
        var mh$ = glCreateProgramPipelines$MH();
        try {
            mh$.invokeExact(n, pipelines);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateQueries$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glCreateQueries$MH,"glCreateQueries");
    }
    public static void glCreateQueries ( int target,  int n,  Addressable ids) {
        var mh$ = glCreateQueries$MH();
        try {
            mh$.invokeExact(target, n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryBufferObjecti64v$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glGetQueryBufferObjecti64v$MH,"glGetQueryBufferObjecti64v");
    }
    public static void glGetQueryBufferObjecti64v ( int id,  int buffer,  int pname,  long offset) {
        var mh$ = glGetQueryBufferObjecti64v$MH();
        try {
            mh$.invokeExact(id, buffer, pname, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryBufferObjectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$415.glGetQueryBufferObjectiv$MH,"glGetQueryBufferObjectiv");
    }
    public static void glGetQueryBufferObjectiv ( int id,  int buffer,  int pname,  long offset) {
        var mh$ = glGetQueryBufferObjectiv$MH();
        try {
            mh$.invokeExact(id, buffer, pname, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryBufferObjectui64v$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glGetQueryBufferObjectui64v$MH,"glGetQueryBufferObjectui64v");
    }
    public static void glGetQueryBufferObjectui64v ( int id,  int buffer,  int pname,  long offset) {
        var mh$ = glGetQueryBufferObjectui64v$MH();
        try {
            mh$.invokeExact(id, buffer, pname, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryBufferObjectuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glGetQueryBufferObjectuiv$MH,"glGetQueryBufferObjectuiv");
    }
    public static void glGetQueryBufferObjectuiv ( int id,  int buffer,  int pname,  long offset) {
        var mh$ = glGetQueryBufferObjectuiv$MH();
        try {
            mh$.invokeExact(id, buffer, pname, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMemoryBarrierByRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glMemoryBarrierByRegion$MH,"glMemoryBarrierByRegion");
    }
    public static void glMemoryBarrierByRegion ( int barriers) {
        var mh$ = glMemoryBarrierByRegion$MH();
        try {
            mh$.invokeExact(barriers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glGetTextureSubImage$MH,"glGetTextureSubImage");
    }
    public static void glGetTextureSubImage ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  int bufSize,  Addressable pixels) {
        var mh$ = glGetTextureSubImage$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTextureSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glGetCompressedTextureSubImage$MH,"glGetCompressedTextureSubImage");
    }
    public static void glGetCompressedTextureSubImage ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int bufSize,  Addressable pixels) {
        var mh$ = glGetCompressedTextureSubImage$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetGraphicsResetStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$416.glGetGraphicsResetStatus$MH,"glGetGraphicsResetStatus");
    }
    public static int glGetGraphicsResetStatus () {
        var mh$ = glGetGraphicsResetStatus$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnCompressedTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnCompressedTexImage$MH,"glGetnCompressedTexImage");
    }
    public static void glGetnCompressedTexImage ( int target,  int lod,  int bufSize,  Addressable pixels) {
        var mh$ = glGetnCompressedTexImage$MH();
        try {
            mh$.invokeExact(target, lod, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnTexImage$MH,"glGetnTexImage");
    }
    public static void glGetnTexImage ( int target,  int level,  int format,  int type,  int bufSize,  Addressable pixels) {
        var mh$ = glGetnTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, bufSize, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformdv$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnUniformdv$MH,"glGetnUniformdv");
    }
    public static void glGetnUniformdv ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformdv$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformfv$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnUniformfv$MH,"glGetnUniformfv");
    }
    public static void glGetnUniformfv ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformfv$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformiv$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnUniformiv$MH,"glGetnUniformiv");
    }
    public static void glGetnUniformiv ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformiv$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$417.glGetnUniformuiv$MH,"glGetnUniformuiv");
    }
    public static void glGetnUniformuiv ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformuiv$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadnPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glReadnPixels$MH,"glReadnPixels");
    }
    public static void glReadnPixels ( int x,  int y,  int width,  int height,  int format,  int type,  int bufSize,  Addressable data) {
        var mh$ = glReadnPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, bufSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glGetnMapdv$MH,"glGetnMapdv");
    }
    public static void glGetnMapdv ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapdv$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glGetnMapfv$MH,"glGetnMapfv");
    }
    public static void glGetnMapfv ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapfv$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glGetnMapiv$MH,"glGetnMapiv");
    }
    public static void glGetnMapiv ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapiv$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glGetnPixelMapfv$MH,"glGetnPixelMapfv");
    }
    public static void glGetnPixelMapfv ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapfv$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$418.glGetnPixelMapuiv$MH,"glGetnPixelMapuiv");
    }
    public static void glGetnPixelMapuiv ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnPixelMapusv$MH,"glGetnPixelMapusv");
    }
    public static void glGetnPixelMapusv ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapusv$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnPolygonStipple$MH,"glGetnPolygonStipple");
    }
    public static void glGetnPolygonStipple ( int bufSize,  Addressable pattern) {
        var mh$ = glGetnPolygonStipple$MH();
        try {
            mh$.invokeExact(bufSize, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnColorTable$MH,"glGetnColorTable");
    }
    public static void glGetnColorTable ( int target,  int format,  int type,  int bufSize,  Addressable table) {
        var mh$ = glGetnColorTable$MH();
        try {
            mh$.invokeExact(target, format, type, bufSize, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnConvolutionFilter$MH,"glGetnConvolutionFilter");
    }
    public static void glGetnConvolutionFilter ( int target,  int format,  int type,  int bufSize,  Addressable image) {
        var mh$ = glGetnConvolutionFilter$MH();
        try {
            mh$.invokeExact(target, format, type, bufSize, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnSeparableFilter$MH,"glGetnSeparableFilter");
    }
    public static void glGetnSeparableFilter ( int target,  int format,  int type,  int rowBufSize,  Addressable row,  int columnBufSize,  Addressable column,  Addressable span) {
        var mh$ = glGetnSeparableFilter$MH();
        try {
            mh$.invokeExact(target, format, type, rowBufSize, row, columnBufSize, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$419.glGetnHistogram$MH,"glGetnHistogram");
    }
    public static void glGetnHistogram ( int target,  byte reset,  int format,  int type,  int bufSize,  Addressable values) {
        var mh$ = glGetnHistogram$MH();
        try {
            mh$.invokeExact(target, reset, format, type, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$420.glGetnMinmax$MH,"glGetnMinmax");
    }
    public static void glGetnMinmax ( int target,  byte reset,  int format,  int type,  int bufSize,  Addressable values) {
        var mh$ = glGetnMinmax$MH();
        try {
            mh$.invokeExact(target, reset, format, type, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$420.glTextureBarrier$MH,"glTextureBarrier");
    }
    public static void glTextureBarrier () {
        var mh$ = glTextureBarrier$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpecializeShader$MH() {
        return RuntimeHelper.requireNonNull(constants$421.glSpecializeShader$MH,"glSpecializeShader");
    }
    public static void glSpecializeShader ( int shader,  Addressable pEntryPoint,  int numSpecializationConstants,  Addressable pConstantIndex,  Addressable pConstantValue) {
        var mh$ = glSpecializeShader$MH();
        try {
            mh$.invokeExact(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirectCount$MH() {
        return RuntimeHelper.requireNonNull(constants$421.glMultiDrawArraysIndirectCount$MH,"glMultiDrawArraysIndirectCount");
    }
    public static void glMultiDrawArraysIndirectCount ( int mode,  Addressable indirect,  long drawcount,  int maxdrawcount,  int stride) {
        var mh$ = glMultiDrawArraysIndirectCount$MH();
        try {
            mh$.invokeExact(mode, indirect, drawcount, maxdrawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirectCount$MH() {
        return RuntimeHelper.requireNonNull(constants$422.glMultiDrawElementsIndirectCount$MH,"glMultiDrawElementsIndirectCount");
    }
    public static void glMultiDrawElementsIndirectCount ( int mode,  int type,  Addressable indirect,  long drawcount,  int maxdrawcount,  int stride) {
        var mh$ = glMultiDrawElementsIndirectCount$MH();
        try {
            mh$.invokeExact(mode, type, indirect, drawcount, maxdrawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffsetClamp$MH() {
        return RuntimeHelper.requireNonNull(constants$422.glPolygonOffsetClamp$MH,"glPolygonOffsetClamp");
    }
    public static void glPolygonOffsetClamp ( float factor,  float units,  float clamp) {
        var mh$ = glPolygonOffsetClamp$MH();
        try {
            mh$.invokeExact(factor, units, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrimitiveBoundingBoxARB$MH() {
        return RuntimeHelper.requireNonNull(constants$422.glPrimitiveBoundingBoxARB$MH,"glPrimitiveBoundingBoxARB");
    }
    public static void glPrimitiveBoundingBoxARB ( float minX,  float minY,  float minZ,  float minW,  float maxX,  float maxY,  float maxZ,  float maxW) {
        var mh$ = glPrimitiveBoundingBoxARB$MH();
        try {
            mh$.invokeExact(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$428.glGetTextureHandleARB$MH,"glGetTextureHandleARB");
    }
    public static long glGetTextureHandleARB ( int texture) {
        var mh$ = glGetTextureHandleARB$MH();
        try {
            return (long)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureSamplerHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$428.glGetTextureSamplerHandleARB$MH,"glGetTextureSamplerHandleARB");
    }
    public static long glGetTextureSamplerHandleARB ( int texture,  int sampler) {
        var mh$ = glGetTextureSamplerHandleARB$MH();
        try {
            return (long)mh$.invokeExact(texture, sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeTextureHandleResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$428.glMakeTextureHandleResidentARB$MH,"glMakeTextureHandleResidentARB");
    }
    public static void glMakeTextureHandleResidentARB ( long handle) {
        var mh$ = glMakeTextureHandleResidentARB$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeTextureHandleNonResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$428.glMakeTextureHandleNonResidentARB$MH,"glMakeTextureHandleNonResidentARB");
    }
    public static void glMakeTextureHandleNonResidentARB ( long handle) {
        var mh$ = glMakeTextureHandleNonResidentARB$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetImageHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$428.glGetImageHandleARB$MH,"glGetImageHandleARB");
    }
    public static long glGetImageHandleARB ( int texture,  int level,  byte layered,  int layer,  int format) {
        var mh$ = glGetImageHandleARB$MH();
        try {
            return (long)mh$.invokeExact(texture, level, layered, layer, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeImageHandleResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glMakeImageHandleResidentARB$MH,"glMakeImageHandleResidentARB");
    }
    public static void glMakeImageHandleResidentARB ( long handle,  int access) {
        var mh$ = glMakeImageHandleResidentARB$MH();
        try {
            mh$.invokeExact(handle, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeImageHandleNonResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glMakeImageHandleNonResidentARB$MH,"glMakeImageHandleNonResidentARB");
    }
    public static void glMakeImageHandleNonResidentARB ( long handle) {
        var mh$ = glMakeImageHandleNonResidentARB$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformHandleui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glUniformHandleui64ARB$MH,"glUniformHandleui64ARB");
    }
    public static void glUniformHandleui64ARB ( int location,  long value) {
        var mh$ = glUniformHandleui64ARB$MH();
        try {
            mh$.invokeExact(location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformHandleui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glUniformHandleui64vARB$MH,"glUniformHandleui64vARB");
    }
    public static void glUniformHandleui64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniformHandleui64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformHandleui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glProgramUniformHandleui64ARB$MH,"glProgramUniformHandleui64ARB");
    }
    public static void glProgramUniformHandleui64ARB ( int program,  int location,  long value) {
        var mh$ = glProgramUniformHandleui64ARB$MH();
        try {
            mh$.invokeExact(program, location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformHandleui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$429.glProgramUniformHandleui64vARB$MH,"glProgramUniformHandleui64vARB");
    }
    public static void glProgramUniformHandleui64vARB ( int program,  int location,  int count,  Addressable values) {
        var mh$ = glProgramUniformHandleui64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTextureHandleResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$430.glIsTextureHandleResidentARB$MH,"glIsTextureHandleResidentARB");
    }
    public static byte glIsTextureHandleResidentARB ( long handle) {
        var mh$ = glIsTextureHandleResidentARB$MH();
        try {
            return (byte)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsImageHandleResidentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$430.glIsImageHandleResidentARB$MH,"glIsImageHandleResidentARB");
    }
    public static byte glIsImageHandleResidentARB ( long handle) {
        var mh$ = glIsImageHandleResidentARB$MH();
        try {
            return (byte)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$430.glVertexAttribL1ui64ARB$MH,"glVertexAttribL1ui64ARB");
    }
    public static void glVertexAttribL1ui64ARB ( int index,  long x) {
        var mh$ = glVertexAttribL1ui64ARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$430.glVertexAttribL1ui64vARB$MH,"glVertexAttribL1ui64vARB");
    }
    public static void glVertexAttribL1ui64vARB ( int index,  Addressable v) {
        var mh$ = glVertexAttribL1ui64vARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribLui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$430.glGetVertexAttribLui64vARB$MH,"glGetVertexAttribLui64vARB");
    }
    public static void glGetVertexAttribLui64vARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribLui64vARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateSyncFromCLeventARB$MH() {
        return RuntimeHelper.requireNonNull(constants$431.glCreateSyncFromCLeventARB$MH,"glCreateSyncFromCLeventARB");
    }
    public static MemoryAddress glCreateSyncFromCLeventARB ( Addressable context,  Addressable event,  int flags) {
        var mh$ = glCreateSyncFromCLeventARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context, event, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClampColorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$431.glClampColorARB$MH,"glClampColorARB");
    }
    public static void glClampColorARB ( int target,  int clamp) {
        var mh$ = glClampColorARB$MH();
        try {
            mh$.invokeExact(target, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDispatchComputeGroupSizeARB$MH() {
        return RuntimeHelper.requireNonNull(constants$432.glDispatchComputeGroupSizeARB$MH,"glDispatchComputeGroupSizeARB");
    }
    public static void glDispatchComputeGroupSizeARB ( int num_groups_x,  int num_groups_y,  int num_groups_z,  int group_size_x,  int group_size_y,  int group_size_z) {
        var mh$ = glDispatchComputeGroupSizeARB$MH();
        try {
            mh$.invokeExact(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageControlARB$MH() {
        return RuntimeHelper.requireNonNull(constants$434.glDebugMessageControlARB$MH,"glDebugMessageControlARB");
    }
    public static void glDebugMessageControlARB ( int source,  int type,  int severity,  int count,  Addressable ids,  byte enabled) {
        var mh$ = glDebugMessageControlARB$MH();
        try {
            mh$.invokeExact(source, type, severity, count, ids, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageInsertARB$MH() {
        return RuntimeHelper.requireNonNull(constants$434.glDebugMessageInsertARB$MH,"glDebugMessageInsertARB");
    }
    public static void glDebugMessageInsertARB ( int source,  int type,  int id,  int severity,  int length,  Addressable buf) {
        var mh$ = glDebugMessageInsertARB$MH();
        try {
            mh$.invokeExact(source, type, id, severity, length, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageCallbackARB$MH() {
        return RuntimeHelper.requireNonNull(constants$434.glDebugMessageCallbackARB$MH,"glDebugMessageCallbackARB");
    }
    public static void glDebugMessageCallbackARB ( Addressable callback,  Addressable userParam) {
        var mh$ = glDebugMessageCallbackARB$MH();
        try {
            mh$.invokeExact(callback, userParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDebugMessageLogARB$MH() {
        return RuntimeHelper.requireNonNull(constants$434.glGetDebugMessageLogARB$MH,"glGetDebugMessageLogARB");
    }
    public static int glGetDebugMessageLogARB ( int count,  int bufSize,  Addressable sources,  Addressable types,  Addressable ids,  Addressable severities,  Addressable lengths,  Addressable messageLog) {
        var mh$ = glGetDebugMessageLogARB$MH();
        try {
            return (int)mh$.invokeExact(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$435.glDrawBuffersARB$MH,"glDrawBuffersARB");
    }
    public static void glDrawBuffersARB ( int n,  Addressable bufs) {
        var mh$ = glDrawBuffersARB$MH();
        try {
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationiARB$MH() {
        return RuntimeHelper.requireNonNull(constants$436.glBlendEquationiARB$MH,"glBlendEquationiARB");
    }
    public static void glBlendEquationiARB ( int buf,  int mode) {
        var mh$ = glBlendEquationiARB$MH();
        try {
            mh$.invokeExact(buf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateiARB$MH() {
        return RuntimeHelper.requireNonNull(constants$436.glBlendEquationSeparateiARB$MH,"glBlendEquationSeparateiARB");
    }
    public static void glBlendEquationSeparateiARB ( int buf,  int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparateiARB$MH();
        try {
            mh$.invokeExact(buf, modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunciARB$MH() {
        return RuntimeHelper.requireNonNull(constants$436.glBlendFunciARB$MH,"glBlendFunciARB");
    }
    public static void glBlendFunciARB ( int buf,  int src,  int dst) {
        var mh$ = glBlendFunciARB$MH();
        try {
            mh$.invokeExact(buf, src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateiARB$MH() {
        return RuntimeHelper.requireNonNull(constants$437.glBlendFuncSeparateiARB$MH,"glBlendFuncSeparateiARB");
    }
    public static void glBlendFuncSeparateiARB ( int buf,  int srcRGB,  int dstRGB,  int srcAlpha,  int dstAlpha) {
        var mh$ = glBlendFuncSeparateiARB$MH();
        try {
            mh$.invokeExact(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$437.glDrawArraysInstancedARB$MH,"glDrawArraysInstancedARB");
    }
    public static void glDrawArraysInstancedARB ( int mode,  int first,  int count,  int primcount) {
        var mh$ = glDrawArraysInstancedARB$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$438.glDrawElementsInstancedARB$MH,"glDrawElementsInstancedARB");
    }
    public static void glDrawElementsInstancedARB ( int mode,  int count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glDrawElementsInstancedARB$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$444.glProgramStringARB$MH,"glProgramStringARB");
    }
    public static void glProgramStringARB ( int target,  int format,  int len,  Addressable string) {
        var mh$ = glProgramStringARB$MH();
        try {
            mh$.invokeExact(target, format, len, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$444.glBindProgramARB$MH,"glBindProgramARB");
    }
    public static void glBindProgramARB ( int target,  int program) {
        var mh$ = glBindProgramARB$MH();
        try {
            mh$.invokeExact(target, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$444.glDeleteProgramsARB$MH,"glDeleteProgramsARB");
    }
    public static void glDeleteProgramsARB ( int n,  Addressable programs) {
        var mh$ = glDeleteProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glGenProgramsARB$MH,"glGenProgramsARB");
    }
    public static void glGenProgramsARB ( int n,  Addressable programs) {
        var mh$ = glGenProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glProgramEnvParameter4dARB$MH,"glProgramEnvParameter4dARB");
    }
    public static void glProgramEnvParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramEnvParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glProgramEnvParameter4dvARB$MH,"glProgramEnvParameter4dvARB");
    }
    public static void glProgramEnvParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glProgramEnvParameter4fARB$MH,"glProgramEnvParameter4fARB");
    }
    public static void glProgramEnvParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramEnvParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glProgramEnvParameter4fvARB$MH,"glProgramEnvParameter4fvARB");
    }
    public static void glProgramEnvParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$445.glProgramLocalParameter4dARB$MH,"glProgramLocalParameter4dARB");
    }
    public static void glProgramLocalParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramLocalParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glProgramLocalParameter4dvARB$MH,"glProgramLocalParameter4dvARB");
    }
    public static void glProgramLocalParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glProgramLocalParameter4fARB$MH,"glProgramLocalParameter4fARB");
    }
    public static void glProgramLocalParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramLocalParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glProgramLocalParameter4fvARB$MH,"glProgramLocalParameter4fvARB");
    }
    public static void glProgramLocalParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glGetProgramEnvParameterdvARB$MH,"glGetProgramEnvParameterdvARB");
    }
    public static void glGetProgramEnvParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glGetProgramEnvParameterfvARB$MH,"glGetProgramEnvParameterfvARB");
    }
    public static void glGetProgramEnvParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$446.glGetProgramLocalParameterdvARB$MH,"glGetProgramLocalParameterdvARB");
    }
    public static void glGetProgramLocalParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$447.glGetProgramLocalParameterfvARB$MH,"glGetProgramLocalParameterfvARB");
    }
    public static void glGetProgramLocalParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$447.glGetProgramivARB$MH,"glGetProgramivARB");
    }
    public static void glGetProgramivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetProgramivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$447.glGetProgramStringARB$MH,"glGetProgramStringARB");
    }
    public static void glGetProgramStringARB ( int target,  int pname,  Addressable string) {
        var mh$ = glGetProgramStringARB$MH();
        try {
            mh$.invokeExact(target, pname, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$447.glIsProgramARB$MH,"glIsProgramARB");
    }
    public static byte glIsProgramARB ( int program) {
        var mh$ = glIsProgramARB$MH();
        try {
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameteriARB$MH() {
        return RuntimeHelper.requireNonNull(constants$449.glProgramParameteriARB$MH,"glProgramParameteriARB");
    }
    public static void glProgramParameteriARB ( int program,  int pname,  int value) {
        var mh$ = glProgramParameteriARB$MH();
        try {
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$449.glFramebufferTextureARB$MH,"glFramebufferTextureARB");
    }
    public static void glFramebufferTextureARB ( int target,  int attachment,  int texture,  int level) {
        var mh$ = glFramebufferTextureARB$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$449.glFramebufferTextureLayerARB$MH,"glFramebufferTextureLayerARB");
    }
    public static void glFramebufferTextureLayerARB ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayerARB$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureFaceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$449.glFramebufferTextureFaceARB$MH,"glFramebufferTextureFaceARB");
    }
    public static void glFramebufferTextureFaceARB ( int target,  int attachment,  int texture,  int level,  int face) {
        var mh$ = glFramebufferTextureFaceARB$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpecializeShaderARB$MH() {
        return RuntimeHelper.requireNonNull(constants$450.glSpecializeShaderARB$MH,"glSpecializeShaderARB");
    }
    public static void glSpecializeShaderARB ( int shader,  Addressable pEntryPoint,  int numSpecializationConstants,  Addressable pConstantIndex,  Addressable pConstantValue) {
        var mh$ = glSpecializeShaderARB$MH();
        try {
            mh$.invokeExact(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$462.glUniform1i64ARB$MH,"glUniform1i64ARB");
    }
    public static void glUniform1i64ARB ( int location,  long x) {
        var mh$ = glUniform1i64ARB$MH();
        try {
            mh$.invokeExact(location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$462.glUniform2i64ARB$MH,"glUniform2i64ARB");
    }
    public static void glUniform2i64ARB ( int location,  long x,  long y) {
        var mh$ = glUniform2i64ARB$MH();
        try {
            mh$.invokeExact(location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$462.glUniform3i64ARB$MH,"glUniform3i64ARB");
    }
    public static void glUniform3i64ARB ( int location,  long x,  long y,  long z) {
        var mh$ = glUniform3i64ARB$MH();
        try {
            mh$.invokeExact(location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$462.glUniform4i64ARB$MH,"glUniform4i64ARB");
    }
    public static void glUniform4i64ARB ( int location,  long x,  long y,  long z,  long w) {
        var mh$ = glUniform4i64ARB$MH();
        try {
            mh$.invokeExact(location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$462.glUniform1i64vARB$MH,"glUniform1i64vARB");
    }
    public static void glUniform1i64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1i64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform2i64vARB$MH,"glUniform2i64vARB");
    }
    public static void glUniform2i64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2i64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform3i64vARB$MH,"glUniform3i64vARB");
    }
    public static void glUniform3i64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3i64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform4i64vARB$MH,"glUniform4i64vARB");
    }
    public static void glUniform4i64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4i64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform1ui64ARB$MH,"glUniform1ui64ARB");
    }
    public static void glUniform1ui64ARB ( int location,  long x) {
        var mh$ = glUniform1ui64ARB$MH();
        try {
            mh$.invokeExact(location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform2ui64ARB$MH,"glUniform2ui64ARB");
    }
    public static void glUniform2ui64ARB ( int location,  long x,  long y) {
        var mh$ = glUniform2ui64ARB$MH();
        try {
            mh$.invokeExact(location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$463.glUniform3ui64ARB$MH,"glUniform3ui64ARB");
    }
    public static void glUniform3ui64ARB ( int location,  long x,  long y,  long z) {
        var mh$ = glUniform3ui64ARB$MH();
        try {
            mh$.invokeExact(location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glUniform4ui64ARB$MH,"glUniform4ui64ARB");
    }
    public static void glUniform4ui64ARB ( int location,  long x,  long y,  long z,  long w) {
        var mh$ = glUniform4ui64ARB$MH();
        try {
            mh$.invokeExact(location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glUniform1ui64vARB$MH,"glUniform1ui64vARB");
    }
    public static void glUniform1ui64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1ui64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glUniform2ui64vARB$MH,"glUniform2ui64vARB");
    }
    public static void glUniform2ui64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2ui64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glUniform3ui64vARB$MH,"glUniform3ui64vARB");
    }
    public static void glUniform3ui64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3ui64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glUniform4ui64vARB$MH,"glUniform4ui64vARB");
    }
    public static void glUniform4ui64vARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4ui64vARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformi64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$464.glGetUniformi64vARB$MH,"glGetUniformi64vARB");
    }
    public static void glGetUniformi64vARB ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformi64vARB$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glGetUniformui64vARB$MH,"glGetUniformui64vARB");
    }
    public static void glGetUniformui64vARB ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformui64vARB$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformi64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glGetnUniformi64vARB$MH,"glGetnUniformi64vARB");
    }
    public static void glGetnUniformi64vARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformi64vARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glGetnUniformui64vARB$MH,"glGetnUniformui64vARB");
    }
    public static void glGetnUniformui64vARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformui64vARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glProgramUniform1i64ARB$MH,"glProgramUniform1i64ARB");
    }
    public static void glProgramUniform1i64ARB ( int program,  int location,  long x) {
        var mh$ = glProgramUniform1i64ARB$MH();
        try {
            mh$.invokeExact(program, location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glProgramUniform2i64ARB$MH,"glProgramUniform2i64ARB");
    }
    public static void glProgramUniform2i64ARB ( int program,  int location,  long x,  long y) {
        var mh$ = glProgramUniform2i64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$465.glProgramUniform3i64ARB$MH,"glProgramUniform3i64ARB");
    }
    public static void glProgramUniform3i64ARB ( int program,  int location,  long x,  long y,  long z) {
        var mh$ = glProgramUniform3i64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4i64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform4i64ARB$MH,"glProgramUniform4i64ARB");
    }
    public static void glProgramUniform4i64ARB ( int program,  int location,  long x,  long y,  long z,  long w) {
        var mh$ = glProgramUniform4i64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform1i64vARB$MH,"glProgramUniform1i64vARB");
    }
    public static void glProgramUniform1i64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1i64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform2i64vARB$MH,"glProgramUniform2i64vARB");
    }
    public static void glProgramUniform2i64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2i64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform3i64vARB$MH,"glProgramUniform3i64vARB");
    }
    public static void glProgramUniform3i64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3i64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4i64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform4i64vARB$MH,"glProgramUniform4i64vARB");
    }
    public static void glProgramUniform4i64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4i64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$466.glProgramUniform1ui64ARB$MH,"glProgramUniform1ui64ARB");
    }
    public static void glProgramUniform1ui64ARB ( int program,  int location,  long x) {
        var mh$ = glProgramUniform1ui64ARB$MH();
        try {
            mh$.invokeExact(program, location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform2ui64ARB$MH,"glProgramUniform2ui64ARB");
    }
    public static void glProgramUniform2ui64ARB ( int program,  int location,  long x,  long y) {
        var mh$ = glProgramUniform2ui64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform3ui64ARB$MH,"glProgramUniform3ui64ARB");
    }
    public static void glProgramUniform3ui64ARB ( int program,  int location,  long x,  long y,  long z) {
        var mh$ = glProgramUniform3ui64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ui64ARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform4ui64ARB$MH,"glProgramUniform4ui64ARB");
    }
    public static void glProgramUniform4ui64ARB ( int program,  int location,  long x,  long y,  long z,  long w) {
        var mh$ = glProgramUniform4ui64ARB$MH();
        try {
            mh$.invokeExact(program, location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform1ui64vARB$MH,"glProgramUniform1ui64vARB");
    }
    public static void glProgramUniform1ui64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1ui64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform2ui64vARB$MH,"glProgramUniform2ui64vARB");
    }
    public static void glProgramUniform2ui64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2ui64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$467.glProgramUniform3ui64vARB$MH,"glProgramUniform3ui64vARB");
    }
    public static void glProgramUniform3ui64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3ui64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ui64vARB$MH() {
        return RuntimeHelper.requireNonNull(constants$468.glProgramUniform4ui64vARB$MH,"glProgramUniform4ui64vARB");
    }
    public static void glProgramUniform4ui64vARB ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4ui64vARB$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirectCountARB$MH() {
        return RuntimeHelper.requireNonNull(constants$468.glMultiDrawArraysIndirectCountARB$MH,"glMultiDrawArraysIndirectCountARB");
    }
    public static void glMultiDrawArraysIndirectCountARB ( int mode,  Addressable indirect,  long drawcount,  int maxdrawcount,  int stride) {
        var mh$ = glMultiDrawArraysIndirectCountARB$MH();
        try {
            mh$.invokeExact(mode, indirect, drawcount, maxdrawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirectCountARB$MH() {
        return RuntimeHelper.requireNonNull(constants$469.glMultiDrawElementsIndirectCountARB$MH,"glMultiDrawElementsIndirectCountARB");
    }
    public static void glMultiDrawElementsIndirectCountARB ( int mode,  int type,  Addressable indirect,  long drawcount,  int maxdrawcount,  int stride) {
        var mh$ = glMultiDrawElementsIndirectCountARB$MH();
        try {
            mh$.invokeExact(mode, type, indirect, drawcount, maxdrawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribDivisorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$469.glVertexAttribDivisorARB$MH,"glVertexAttribDivisorARB");
    }
    public static void glVertexAttribDivisorARB ( int index,  int divisor) {
        var mh$ = glVertexAttribDivisorARB$MH();
        try {
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCurrentPaletteMatrixARB$MH() {
        return RuntimeHelper.requireNonNull(constants$471.glCurrentPaletteMatrixARB$MH,"glCurrentPaletteMatrixARB");
    }
    public static void glCurrentPaletteMatrixARB ( int index) {
        var mh$ = glCurrentPaletteMatrixARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixIndexubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$471.glMatrixIndexubvARB$MH,"glMatrixIndexubvARB");
    }
    public static void glMatrixIndexubvARB ( int size,  Addressable indices) {
        var mh$ = glMatrixIndexubvARB$MH();
        try {
            mh$.invokeExact(size, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixIndexusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$471.glMatrixIndexusvARB$MH,"glMatrixIndexusvARB");
    }
    public static void glMatrixIndexusvARB ( int size,  Addressable indices) {
        var mh$ = glMatrixIndexusvARB$MH();
        try {
            mh$.invokeExact(size, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixIndexuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$471.glMatrixIndexuivARB$MH,"glMatrixIndexuivARB");
    }
    public static void glMatrixIndexuivARB ( int size,  Addressable indices) {
        var mh$ = glMatrixIndexuivARB$MH();
        try {
            mh$.invokeExact(size, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixIndexPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$472.glMatrixIndexPointerARB$MH,"glMatrixIndexPointerARB");
    }
    public static void glMatrixIndexPointerARB ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glMatrixIndexPointerARB$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$472.glSampleCoverageARB$MH,"glSampleCoverageARB");
    }
    public static void glSampleCoverageARB ( float value,  byte invert) {
        var mh$ = glSampleCoverageARB$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$475.glGenQueriesARB$MH,"glGenQueriesARB");
    }
    public static void glGenQueriesARB ( int n,  Addressable ids) {
        var mh$ = glGenQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$475.glDeleteQueriesARB$MH,"glDeleteQueriesARB");
    }
    public static void glDeleteQueriesARB ( int n,  Addressable ids) {
        var mh$ = glDeleteQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$475.glIsQueryARB$MH,"glIsQueryARB");
    }
    public static byte glIsQueryARB ( int id) {
        var mh$ = glIsQueryARB$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$475.glBeginQueryARB$MH,"glBeginQueryARB");
    }
    public static void glBeginQueryARB ( int target,  int id) {
        var mh$ = glBeginQueryARB$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$476.glEndQueryARB$MH,"glEndQueryARB");
    }
    public static void glEndQueryARB ( int target) {
        var mh$ = glEndQueryARB$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$476.glGetQueryivARB$MH,"glGetQueryivARB");
    }
    public static void glGetQueryivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetQueryivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$476.glGetQueryObjectivARB$MH,"glGetQueryObjectivARB");
    }
    public static void glGetQueryObjectivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$476.glGetQueryObjectuivARB$MH,"glGetQueryObjectuivARB");
    }
    public static void glGetQueryObjectuivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectuivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaxShaderCompilerThreadsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$477.glMaxShaderCompilerThreadsARB$MH,"glMaxShaderCompilerThreadsARB");
    }
    public static void glMaxShaderCompilerThreadsARB ( int count) {
        var mh$ = glMaxShaderCompilerThreadsARB$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$477.glPointParameterfARB$MH,"glPointParameterfARB");
    }
    public static void glPointParameterfARB ( int pname,  float param) {
        var mh$ = glPointParameterfARB$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$478.glPointParameterfvARB$MH,"glPointParameterfvARB");
    }
    public static void glPointParameterfvARB ( int pname,  Addressable params) {
        var mh$ = glPointParameterfvARB$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetGraphicsResetStatusARB$MH() {
        return RuntimeHelper.requireNonNull(constants$484.glGetGraphicsResetStatusARB$MH,"glGetGraphicsResetStatusARB");
    }
    public static int glGetGraphicsResetStatusARB () {
        var mh$ = glGetGraphicsResetStatusARB$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glGetnTexImageARB$MH,"glGetnTexImageARB");
    }
    public static void glGetnTexImageARB ( int target,  int level,  int format,  int type,  int bufSize,  Addressable img) {
        var mh$ = glGetnTexImageARB$MH();
        try {
            mh$.invokeExact(target, level, format, type, bufSize, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadnPixelsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glReadnPixelsARB$MH,"glReadnPixelsARB");
    }
    public static void glReadnPixelsARB ( int x,  int y,  int width,  int height,  int format,  int type,  int bufSize,  Addressable data) {
        var mh$ = glReadnPixelsARB$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, bufSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnCompressedTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glGetnCompressedTexImageARB$MH,"glGetnCompressedTexImageARB");
    }
    public static void glGetnCompressedTexImageARB ( int target,  int lod,  int bufSize,  Addressable img) {
        var mh$ = glGetnCompressedTexImageARB$MH();
        try {
            mh$.invokeExact(target, lod, bufSize, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glGetnUniformfvARB$MH,"glGetnUniformfvARB");
    }
    public static void glGetnUniformfvARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformfvARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glGetnUniformivARB$MH,"glGetnUniformivARB");
    }
    public static void glGetnUniformivARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformivARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$485.glGetnUniformuivARB$MH,"glGetnUniformuivARB");
    }
    public static void glGetnUniformuivARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformuivARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnUniformdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnUniformdvARB$MH,"glGetnUniformdvARB");
    }
    public static void glGetnUniformdvARB ( int program,  int location,  int bufSize,  Addressable params) {
        var mh$ = glGetnUniformdvARB$MH();
        try {
            mh$.invokeExact(program, location, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnMapdvARB$MH,"glGetnMapdvARB");
    }
    public static void glGetnMapdvARB ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapdvARB$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnMapfvARB$MH,"glGetnMapfvARB");
    }
    public static void glGetnMapfvARB ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapfvARB$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMapivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnMapivARB$MH,"glGetnMapivARB");
    }
    public static void glGetnMapivARB ( int target,  int query,  int bufSize,  Addressable v) {
        var mh$ = glGetnMapivARB$MH();
        try {
            mh$.invokeExact(target, query, bufSize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnPixelMapfvARB$MH,"glGetnPixelMapfvARB");
    }
    public static void glGetnPixelMapfvARB ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapfvARB$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$486.glGetnPixelMapuivARB$MH,"glGetnPixelMapuivARB");
    }
    public static void glGetnPixelMapuivARB ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapuivARB$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPixelMapusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnPixelMapusvARB$MH,"glGetnPixelMapusvARB");
    }
    public static void glGetnPixelMapusvARB ( int map,  int bufSize,  Addressable values) {
        var mh$ = glGetnPixelMapusvARB$MH();
        try {
            mh$.invokeExact(map, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnPolygonStippleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnPolygonStippleARB$MH,"glGetnPolygonStippleARB");
    }
    public static void glGetnPolygonStippleARB ( int bufSize,  Addressable pattern) {
        var mh$ = glGetnPolygonStippleARB$MH();
        try {
            mh$.invokeExact(bufSize, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnColorTableARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnColorTableARB$MH,"glGetnColorTableARB");
    }
    public static void glGetnColorTableARB ( int target,  int format,  int type,  int bufSize,  Addressable table) {
        var mh$ = glGetnColorTableARB$MH();
        try {
            mh$.invokeExact(target, format, type, bufSize, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnConvolutionFilterARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnConvolutionFilterARB$MH,"glGetnConvolutionFilterARB");
    }
    public static void glGetnConvolutionFilterARB ( int target,  int format,  int type,  int bufSize,  Addressable image) {
        var mh$ = glGetnConvolutionFilterARB$MH();
        try {
            mh$.invokeExact(target, format, type, bufSize, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnSeparableFilterARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnSeparableFilterARB$MH,"glGetnSeparableFilterARB");
    }
    public static void glGetnSeparableFilterARB ( int target,  int format,  int type,  int rowBufSize,  Addressable row,  int columnBufSize,  Addressable column,  Addressable span) {
        var mh$ = glGetnSeparableFilterARB$MH();
        try {
            mh$.invokeExact(target, format, type, rowBufSize, row, columnBufSize, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnHistogramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$487.glGetnHistogramARB$MH,"glGetnHistogramARB");
    }
    public static void glGetnHistogramARB ( int target,  byte reset,  int format,  int type,  int bufSize,  Addressable values) {
        var mh$ = glGetnHistogramARB$MH();
        try {
            mh$.invokeExact(target, reset, format, type, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetnMinmaxARB$MH() {
        return RuntimeHelper.requireNonNull(constants$488.glGetnMinmaxARB$MH,"glGetnMinmaxARB");
    }
    public static void glGetnMinmaxARB ( int target,  byte reset,  int format,  int type,  int bufSize,  Addressable values) {
        var mh$ = glGetnMinmaxARB$MH();
        try {
            mh$.invokeExact(target, reset, format, type, bufSize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferSampleLocationsfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$489.glFramebufferSampleLocationsfvARB$MH,"glFramebufferSampleLocationsfvARB");
    }
    public static void glFramebufferSampleLocationsfvARB ( int target,  int start,  int count,  Addressable v) {
        var mh$ = glFramebufferSampleLocationsfvARB$MH();
        try {
            mh$.invokeExact(target, start, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferSampleLocationsfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$489.glNamedFramebufferSampleLocationsfvARB$MH,"glNamedFramebufferSampleLocationsfvARB");
    }
    public static void glNamedFramebufferSampleLocationsfvARB ( int framebuffer,  int start,  int count,  Addressable v) {
        var mh$ = glNamedFramebufferSampleLocationsfvARB$MH();
        try {
            mh$.invokeExact(framebuffer, start, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvaluateDepthValuesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$489.glEvaluateDepthValuesARB$MH,"glEvaluateDepthValuesARB");
    }
    public static void glEvaluateDepthValuesARB () {
        var mh$ = glEvaluateDepthValuesARB$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinSampleShadingARB$MH() {
        return RuntimeHelper.requireNonNull(constants$490.glMinSampleShadingARB$MH,"glMinSampleShadingARB");
    }
    public static void glMinSampleShadingARB ( float value) {
        var mh$ = glMinSampleShadingARB$MH();
        try {
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte GLcharARB = Constants$root.C_CHAR$LAYOUT;
    public static MethodHandle glDeleteObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$503.glDeleteObjectARB$MH,"glDeleteObjectARB");
    }
    public static void glDeleteObjectARB ( int obj) {
        var mh$ = glDeleteObjectARB$MH();
        try {
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$503.glGetHandleARB$MH,"glGetHandleARB");
    }
    public static int glGetHandleARB ( int pname) {
        var mh$ = glGetHandleARB$MH();
        try {
            return (int)mh$.invokeExact(pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDetachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$503.glDetachObjectARB$MH,"glDetachObjectARB");
    }
    public static void glDetachObjectARB ( int containerObj,  int attachedObj) {
        var mh$ = glDetachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, attachedObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShaderObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$503.glCreateShaderObjectARB$MH,"glCreateShaderObjectARB");
    }
    public static int glCreateShaderObjectARB ( int shaderType) {
        var mh$ = glCreateShaderObjectARB$MH();
        try {
            return (int)mh$.invokeExact(shaderType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$503.glShaderSourceARB$MH,"glShaderSourceARB");
    }
    public static void glShaderSourceARB ( int shaderObj,  int count,  Addressable string,  Addressable length) {
        var mh$ = glShaderSourceARB$MH();
        try {
            mh$.invokeExact(shaderObj, count, string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileShaderARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glCompileShaderARB$MH,"glCompileShaderARB");
    }
    public static void glCompileShaderARB ( int shaderObj) {
        var mh$ = glCompileShaderARB$MH();
        try {
            mh$.invokeExact(shaderObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glCreateProgramObjectARB$MH,"glCreateProgramObjectARB");
    }
    public static int glCreateProgramObjectARB () {
        var mh$ = glCreateProgramObjectARB$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAttachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glAttachObjectARB$MH,"glAttachObjectARB");
    }
    public static void glAttachObjectARB ( int containerObj,  int obj) {
        var mh$ = glAttachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLinkProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glLinkProgramARB$MH,"glLinkProgramARB");
    }
    public static void glLinkProgramARB ( int programObj) {
        var mh$ = glLinkProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glUseProgramObjectARB$MH,"glUseProgramObjectARB");
    }
    public static void glUseProgramObjectARB ( int programObj) {
        var mh$ = glUseProgramObjectARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glValidateProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$504.glValidateProgramARB$MH,"glValidateProgramARB");
    }
    public static void glValidateProgramARB ( int programObj) {
        var mh$ = glValidateProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform1fARB$MH,"glUniform1fARB");
    }
    public static void glUniform1fARB ( int location,  float v0) {
        var mh$ = glUniform1fARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform2fARB$MH,"glUniform2fARB");
    }
    public static void glUniform2fARB ( int location,  float v0,  float v1) {
        var mh$ = glUniform2fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform3fARB$MH,"glUniform3fARB");
    }
    public static void glUniform3fARB ( int location,  float v0,  float v1,  float v2) {
        var mh$ = glUniform3fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform4fARB$MH,"glUniform4fARB");
    }
    public static void glUniform4fARB ( int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glUniform4fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform1iARB$MH,"glUniform1iARB");
    }
    public static void glUniform1iARB ( int location,  int v0) {
        var mh$ = glUniform1iARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$505.glUniform2iARB$MH,"glUniform2iARB");
    }
    public static void glUniform2iARB ( int location,  int v0,  int v1) {
        var mh$ = glUniform2iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform3iARB$MH,"glUniform3iARB");
    }
    public static void glUniform3iARB ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform4iARB$MH,"glUniform4iARB");
    }
    public static void glUniform4iARB ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform1fvARB$MH,"glUniform1fvARB");
    }
    public static void glUniform1fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform2fvARB$MH,"glUniform2fvARB");
    }
    public static void glUniform2fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform3fvARB$MH,"glUniform3fvARB");
    }
    public static void glUniform3fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$506.glUniform4fvARB$MH,"glUniform4fvARB");
    }
    public static void glUniform4fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniform1ivARB$MH,"glUniform1ivARB");
    }
    public static void glUniform1ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniform2ivARB$MH,"glUniform2ivARB");
    }
    public static void glUniform2ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniform3ivARB$MH,"glUniform3ivARB");
    }
    public static void glUniform3ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniform4ivARB$MH,"glUniform4ivARB");
    }
    public static void glUniform4ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniformMatrix2fvARB$MH,"glUniformMatrix2fvARB");
    }
    public static void glUniformMatrix2fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$507.glUniformMatrix3fvARB$MH,"glUniformMatrix3fvARB");
    }
    public static void glUniformMatrix3fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glUniformMatrix4fvARB$MH,"glUniformMatrix4fvARB");
    }
    public static void glUniformMatrix4fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glGetObjectParameterfvARB$MH,"glGetObjectParameterfvARB");
    }
    public static void glGetObjectParameterfvARB ( int obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterfvARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glGetObjectParameterivARB$MH,"glGetObjectParameterivARB");
    }
    public static void glGetObjectParameterivARB ( int obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInfoLogARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glGetInfoLogARB$MH,"glGetInfoLogARB");
    }
    public static void glGetInfoLogARB ( int obj,  int maxLength,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetInfoLogARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttachedObjectsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glGetAttachedObjectsARB$MH,"glGetAttachedObjectsARB");
    }
    public static void glGetAttachedObjectsARB ( int containerObj,  int maxCount,  Addressable count,  Addressable obj) {
        var mh$ = glGetAttachedObjectsARB$MH();
        try {
            mh$.invokeExact(containerObj, maxCount, count, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$508.glGetUniformLocationARB$MH,"glGetUniformLocationARB");
    }
    public static int glGetUniformLocationARB ( int programObj,  Addressable name) {
        var mh$ = glGetUniformLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformARB$MH() {
        return RuntimeHelper.requireNonNull(constants$509.glGetActiveUniformARB$MH,"glGetActiveUniformARB");
    }
    public static void glGetActiveUniformARB ( int programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveUniformARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$509.glGetUniformfvARB$MH,"glGetUniformfvARB");
    }
    public static void glGetUniformfvARB ( int programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformfvARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$509.glGetUniformivARB$MH,"glGetUniformivARB");
    }
    public static void glGetUniformivARB ( int programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformivARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$509.glGetShaderSourceARB$MH,"glGetShaderSourceARB");
    }
    public static void glGetShaderSourceARB ( int obj,  int maxLength,  Addressable length,  Addressable source) {
        var mh$ = glGetShaderSourceARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$511.glNamedStringARB$MH,"glNamedStringARB");
    }
    public static void glNamedStringARB ( int type,  int namelen,  Addressable name,  int stringlen,  Addressable string) {
        var mh$ = glNamedStringARB$MH();
        try {
            mh$.invokeExact(type, namelen, name, stringlen, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteNamedStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$511.glDeleteNamedStringARB$MH,"glDeleteNamedStringARB");
    }
    public static void glDeleteNamedStringARB ( int namelen,  Addressable name) {
        var mh$ = glDeleteNamedStringARB$MH();
        try {
            mh$.invokeExact(namelen, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileShaderIncludeARB$MH() {
        return RuntimeHelper.requireNonNull(constants$512.glCompileShaderIncludeARB$MH,"glCompileShaderIncludeARB");
    }
    public static void glCompileShaderIncludeARB ( int shader,  int count,  Addressable path,  Addressable length) {
        var mh$ = glCompileShaderIncludeARB$MH();
        try {
            mh$.invokeExact(shader, count, path, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsNamedStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$512.glIsNamedStringARB$MH,"glIsNamedStringARB");
    }
    public static byte glIsNamedStringARB ( int namelen,  Addressable name) {
        var mh$ = glIsNamedStringARB$MH();
        try {
            return (byte)mh$.invokeExact(namelen, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$512.glGetNamedStringARB$MH,"glGetNamedStringARB");
    }
    public static void glGetNamedStringARB ( int namelen,  Addressable name,  int bufSize,  Addressable stringlen,  Addressable string) {
        var mh$ = glGetNamedStringARB$MH();
        try {
            mh$.invokeExact(namelen, name, bufSize, stringlen, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedStringivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$512.glGetNamedStringivARB$MH,"glGetNamedStringivARB");
    }
    public static void glGetNamedStringivARB ( int namelen,  Addressable name,  int pname,  Addressable params) {
        var mh$ = glGetNamedStringivARB$MH();
        try {
            mh$.invokeExact(namelen, name, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferPageCommitmentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$513.glBufferPageCommitmentARB$MH,"glBufferPageCommitmentARB");
    }
    public static void glBufferPageCommitmentARB ( int target,  long offset,  long size,  byte commit) {
        var mh$ = glBufferPageCommitmentARB$MH();
        try {
            mh$.invokeExact(target, offset, size, commit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferPageCommitmentEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$513.glNamedBufferPageCommitmentEXT$MH,"glNamedBufferPageCommitmentEXT");
    }
    public static void glNamedBufferPageCommitmentEXT ( int buffer,  long offset,  long size,  byte commit) {
        var mh$ = glNamedBufferPageCommitmentEXT$MH();
        try {
            mh$.invokeExact(buffer, offset, size, commit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferPageCommitmentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$514.glNamedBufferPageCommitmentARB$MH,"glNamedBufferPageCommitmentARB");
    }
    public static void glNamedBufferPageCommitmentARB ( int buffer,  long offset,  long size,  byte commit) {
        var mh$ = glNamedBufferPageCommitmentARB$MH();
        try {
            mh$.invokeExact(buffer, offset, size, commit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexPageCommitmentARB$MH() {
        return RuntimeHelper.requireNonNull(constants$514.glTexPageCommitmentARB$MH,"glTexPageCommitmentARB");
    }
    public static void glTexPageCommitmentARB ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  byte commit) {
        var mh$ = glTexPageCommitmentARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$515.glTexBufferARB$MH,"glTexBufferARB");
    }
    public static void glTexBufferARB ( int target,  int internalformat,  int buffer) {
        var mh$ = glTexBufferARB$MH();
        try {
            mh$.invokeExact(target, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$517.glCompressedTexImage3DARB$MH,"glCompressedTexImage3DARB");
    }
    public static void glCompressedTexImage3DARB ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$517.glCompressedTexImage2DARB$MH,"glCompressedTexImage2DARB");
    }
    public static void glCompressedTexImage2DARB ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$517.glCompressedTexImage1DARB$MH,"glCompressedTexImage1DARB");
    }
    public static void glCompressedTexImage1DARB ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$518.glCompressedTexSubImage3DARB$MH,"glCompressedTexSubImage3DARB");
    }
    public static void glCompressedTexSubImage3DARB ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$518.glCompressedTexSubImage2DARB$MH,"glCompressedTexSubImage2DARB");
    }
    public static void glCompressedTexSubImage2DARB ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$518.glCompressedTexSubImage1DARB$MH,"glCompressedTexSubImage1DARB");
    }
    public static void glCompressedTexSubImage1DARB ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$518.glGetCompressedTexImageARB$MH,"glGetCompressedTexImageARB");
    }
    public static void glGetCompressedTexImageARB ( int target,  int level,  Addressable img) {
        var mh$ = glGetCompressedTexImageARB$MH();
        try {
            mh$.invokeExact(target, level, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$520.glLoadTransposeMatrixfARB$MH,"glLoadTransposeMatrixfARB");
    }
    public static void glLoadTransposeMatrixfARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$520.glLoadTransposeMatrixdARB$MH,"glLoadTransposeMatrixdARB");
    }
    public static void glLoadTransposeMatrixdARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$520.glMultTransposeMatrixfARB$MH,"glMultTransposeMatrixfARB");
    }
    public static void glMultTransposeMatrixfARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$520.glMultTransposeMatrixdARB$MH,"glMultTransposeMatrixdARB");
    }
    public static void glMultTransposeMatrixdARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightbvARB$MH,"glWeightbvARB");
    }
    public static void glWeightbvARB ( int size,  Addressable weights) {
        var mh$ = glWeightbvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightsvARB$MH,"glWeightsvARB");
    }
    public static void glWeightsvARB ( int size,  Addressable weights) {
        var mh$ = glWeightsvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightivARB$MH,"glWeightivARB");
    }
    public static void glWeightivARB ( int size,  Addressable weights) {
        var mh$ = glWeightivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightfvARB$MH,"glWeightfvARB");
    }
    public static void glWeightfvARB ( int size,  Addressable weights) {
        var mh$ = glWeightfvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightdvARB$MH,"glWeightdvARB");
    }
    public static void glWeightdvARB ( int size,  Addressable weights) {
        var mh$ = glWeightdvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$524.glWeightubvARB$MH,"glWeightubvARB");
    }
    public static void glWeightubvARB ( int size,  Addressable weights) {
        var mh$ = glWeightubvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$525.glWeightusvARB$MH,"glWeightusvARB");
    }
    public static void glWeightusvARB ( int size,  Addressable weights) {
        var mh$ = glWeightusvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$525.glWeightuivARB$MH,"glWeightuivARB");
    }
    public static void glWeightuivARB ( int size,  Addressable weights) {
        var mh$ = glWeightuivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$525.glWeightPointerARB$MH,"glWeightPointerARB");
    }
    public static void glWeightPointerARB ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glWeightPointerARB$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBlendARB$MH() {
        return RuntimeHelper.requireNonNull(constants$525.glVertexBlendARB$MH,"glVertexBlendARB");
    }
    public static void glVertexBlendARB ( int count) {
        var mh$ = glVertexBlendARB$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong GLsizeiptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glBindBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$529.glBindBufferARB$MH,"glBindBufferARB");
    }
    public static void glBindBufferARB ( int target,  int buffer) {
        var mh$ = glBindBufferARB$MH();
        try {
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$529.glDeleteBuffersARB$MH,"glDeleteBuffersARB");
    }
    public static void glDeleteBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glDeleteBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$529.glGenBuffersARB$MH,"glGenBuffersARB");
    }
    public static void glGenBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glGenBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$529.glIsBufferARB$MH,"glIsBufferARB");
    }
    public static byte glIsBufferARB ( int buffer) {
        var mh$ = glIsBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glBufferDataARB$MH,"glBufferDataARB");
    }
    public static void glBufferDataARB ( int target,  long size,  Addressable data,  int usage) {
        var mh$ = glBufferDataARB$MH();
        try {
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glBufferSubDataARB$MH,"glBufferSubDataARB");
    }
    public static void glBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glGetBufferSubDataARB$MH,"glGetBufferSubDataARB");
    }
    public static void glGetBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glGetBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glMapBufferARB$MH,"glMapBufferARB");
    }
    public static MemoryAddress glMapBufferARB ( int target,  int access) {
        var mh$ = glMapBufferARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glUnmapBufferARB$MH,"glUnmapBufferARB");
    }
    public static byte glUnmapBufferARB ( int target) {
        var mh$ = glUnmapBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$530.glGetBufferParameterivARB$MH,"glGetBufferParameterivARB");
    }
    public static void glGetBufferParameterivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameterivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$531.glGetBufferPointervARB$MH,"glGetBufferPointervARB");
    }
    public static void glGetBufferPointervARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferPointervARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$545.glVertexAttrib1dARB$MH,"glVertexAttrib1dARB");
    }
    public static void glVertexAttrib1dARB ( int index,  double x) {
        var mh$ = glVertexAttrib1dARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$545.glVertexAttrib1dvARB$MH,"glVertexAttrib1dvARB");
    }
    public static void glVertexAttrib1dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$545.glVertexAttrib1fARB$MH,"glVertexAttrib1fARB");
    }
    public static void glVertexAttrib1fARB ( int index,  float x) {
        var mh$ = glVertexAttrib1fARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib1fvARB$MH,"glVertexAttrib1fvARB");
    }
    public static void glVertexAttrib1fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib1sARB$MH,"glVertexAttrib1sARB");
    }
    public static void glVertexAttrib1sARB ( int index,  short x) {
        var mh$ = glVertexAttrib1sARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib1svARB$MH,"glVertexAttrib1svARB");
    }
    public static void glVertexAttrib1svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib2dARB$MH,"glVertexAttrib2dARB");
    }
    public static void glVertexAttrib2dARB ( int index,  double x,  double y) {
        var mh$ = glVertexAttrib2dARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib2dvARB$MH,"glVertexAttrib2dvARB");
    }
    public static void glVertexAttrib2dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$546.glVertexAttrib2fARB$MH,"glVertexAttrib2fARB");
    }
    public static void glVertexAttrib2fARB ( int index,  float x,  float y) {
        var mh$ = glVertexAttrib2fARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib2fvARB$MH,"glVertexAttrib2fvARB");
    }
    public static void glVertexAttrib2fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib2sARB$MH,"glVertexAttrib2sARB");
    }
    public static void glVertexAttrib2sARB ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2sARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib2svARB$MH,"glVertexAttrib2svARB");
    }
    public static void glVertexAttrib2svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib3dARB$MH,"glVertexAttrib3dARB");
    }
    public static void glVertexAttrib3dARB ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttrib3dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib3dvARB$MH,"glVertexAttrib3dvARB");
    }
    public static void glVertexAttrib3dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$547.glVertexAttrib3fARB$MH,"glVertexAttrib3fARB");
    }
    public static void glVertexAttrib3fARB ( int index,  float x,  float y,  float z) {
        var mh$ = glVertexAttrib3fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib3fvARB$MH,"glVertexAttrib3fvARB");
    }
    public static void glVertexAttrib3fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib3sARB$MH,"glVertexAttrib3sARB");
    }
    public static void glVertexAttrib3sARB ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib3svARB$MH,"glVertexAttrib3svARB");
    }
    public static void glVertexAttrib3svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib4NbvARB$MH,"glVertexAttrib4NbvARB");
    }
    public static void glVertexAttrib4NbvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NbvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib4NivARB$MH,"glVertexAttrib4NivARB");
    }
    public static void glVertexAttrib4NivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$548.glVertexAttrib4NsvARB$MH,"glVertexAttrib4NsvARB");
    }
    public static void glVertexAttrib4NsvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NsvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4NubARB$MH,"glVertexAttrib4NubARB");
    }
    public static void glVertexAttrib4NubARB ( int index,  byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertexAttrib4NubARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4NubvARB$MH,"glVertexAttrib4NubvARB");
    }
    public static void glVertexAttrib4NubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4NuivARB$MH,"glVertexAttrib4NuivARB");
    }
    public static void glVertexAttrib4NuivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NuivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4NusvARB$MH,"glVertexAttrib4NusvARB");
    }
    public static void glVertexAttrib4NusvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NusvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4bvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4bvARB$MH,"glVertexAttrib4bvARB");
    }
    public static void glVertexAttrib4bvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4bvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$549.glVertexAttrib4dARB$MH,"glVertexAttrib4dARB");
    }
    public static void glVertexAttrib4dARB ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttrib4dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4dvARB$MH,"glVertexAttrib4dvARB");
    }
    public static void glVertexAttrib4dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4fARB$MH,"glVertexAttrib4fARB");
    }
    public static void glVertexAttrib4fARB ( int index,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexAttrib4fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4fvARB$MH,"glVertexAttrib4fvARB");
    }
    public static void glVertexAttrib4fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4ivARB$MH,"glVertexAttrib4ivARB");
    }
    public static void glVertexAttrib4ivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4sARB$MH,"glVertexAttrib4sARB");
    }
    public static void glVertexAttrib4sARB ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$550.glVertexAttrib4svARB$MH,"glVertexAttrib4svARB");
    }
    public static void glVertexAttrib4svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glVertexAttrib4ubvARB$MH,"glVertexAttrib4ubvARB");
    }
    public static void glVertexAttrib4ubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4uivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glVertexAttrib4uivARB$MH,"glVertexAttrib4uivARB");
    }
    public static void glVertexAttrib4uivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4uivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4usvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glVertexAttrib4usvARB$MH,"glVertexAttrib4usvARB");
    }
    public static void glVertexAttrib4usvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4usvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glVertexAttribPointerARB$MH,"glVertexAttribPointerARB");
    }
    public static void glVertexAttribPointerARB ( int index,  int size,  int type,  byte normalized,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribPointerARB$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glEnableVertexAttribArrayARB$MH,"glEnableVertexAttribArrayARB");
    }
    public static void glEnableVertexAttribArrayARB ( int index) {
        var mh$ = glEnableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$551.glDisableVertexAttribArrayARB$MH,"glDisableVertexAttribArrayARB");
    }
    public static void glDisableVertexAttribArrayARB ( int index) {
        var mh$ = glDisableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$552.glGetVertexAttribdvARB$MH,"glGetVertexAttribdvARB");
    }
    public static void glGetVertexAttribdvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribdvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$552.glGetVertexAttribfvARB$MH,"glGetVertexAttribfvARB");
    }
    public static void glGetVertexAttribfvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribfvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$552.glGetVertexAttribivARB$MH,"glGetVertexAttribivARB");
    }
    public static void glGetVertexAttribivARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribivARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$552.glGetVertexAttribPointervARB$MH,"glGetVertexAttribPointervARB");
    }
    public static void glGetVertexAttribPointervARB ( int index,  int pname,  Addressable pointer) {
        var mh$ = glGetVertexAttribPointervARB$MH();
        try {
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$553.glBindAttribLocationARB$MH,"glBindAttribLocationARB");
    }
    public static void glBindAttribLocationARB ( int programObj,  int index,  Addressable name) {
        var mh$ = glBindAttribLocationARB$MH();
        try {
            mh$.invokeExact(programObj, index, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveAttribARB$MH() {
        return RuntimeHelper.requireNonNull(constants$553.glGetActiveAttribARB$MH,"glGetActiveAttribARB");
    }
    public static void glGetActiveAttribARB ( int programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveAttribARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$554.glGetAttribLocationARB$MH,"glGetAttribLocationARB");
    }
    public static int glGetAttribLocationARB ( int programObj,  Addressable name) {
        var mh$ = glGetAttribLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$559.glWindowPos2dARB$MH,"glWindowPos2dARB");
    }
    public static void glWindowPos2dARB ( double x,  double y) {
        var mh$ = glWindowPos2dARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$559.glWindowPos2dvARB$MH,"glWindowPos2dvARB");
    }
    public static void glWindowPos2dvARB ( Addressable v) {
        var mh$ = glWindowPos2dvARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$559.glWindowPos2fARB$MH,"glWindowPos2fARB");
    }
    public static void glWindowPos2fARB ( float x,  float y) {
        var mh$ = glWindowPos2fARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos2fvARB$MH,"glWindowPos2fvARB");
    }
    public static void glWindowPos2fvARB ( Addressable v) {
        var mh$ = glWindowPos2fvARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos2iARB$MH,"glWindowPos2iARB");
    }
    public static void glWindowPos2iARB ( int x,  int y) {
        var mh$ = glWindowPos2iARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos2ivARB$MH,"glWindowPos2ivARB");
    }
    public static void glWindowPos2ivARB ( Addressable v) {
        var mh$ = glWindowPos2ivARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos2sARB$MH,"glWindowPos2sARB");
    }
    public static void glWindowPos2sARB ( short x,  short y) {
        var mh$ = glWindowPos2sARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos2svARB$MH,"glWindowPos2svARB");
    }
    public static void glWindowPos2svARB ( Addressable v) {
        var mh$ = glWindowPos2svARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$560.glWindowPos3dARB$MH,"glWindowPos3dARB");
    }
    public static void glWindowPos3dARB ( double x,  double y,  double z) {
        var mh$ = glWindowPos3dARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3dvARB$MH,"glWindowPos3dvARB");
    }
    public static void glWindowPos3dvARB ( Addressable v) {
        var mh$ = glWindowPos3dvARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3fARB$MH,"glWindowPos3fARB");
    }
    public static void glWindowPos3fARB ( float x,  float y,  float z) {
        var mh$ = glWindowPos3fARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3fvARB$MH,"glWindowPos3fvARB");
    }
    public static void glWindowPos3fvARB ( Addressable v) {
        var mh$ = glWindowPos3fvARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3iARB$MH,"glWindowPos3iARB");
    }
    public static void glWindowPos3iARB ( int x,  int y,  int z) {
        var mh$ = glWindowPos3iARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3ivARB$MH,"glWindowPos3ivARB");
    }
    public static void glWindowPos3ivARB ( Addressable v) {
        var mh$ = glWindowPos3ivARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$561.glWindowPos3sARB$MH,"glWindowPos3sARB");
    }
    public static void glWindowPos3sARB ( short x,  short y,  short z) {
        var mh$ = glWindowPos3sARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$562.glWindowPos3svARB$MH,"glWindowPos3svARB");
    }
    public static void glWindowPos3svARB ( Addressable v) {
        var mh$ = glWindowPos3svARB$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendBarrierKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$562.glBlendBarrierKHR$MH,"glBlendBarrierKHR");
    }
    public static void glBlendBarrierKHR () {
        var mh$ = glBlendBarrierKHR$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaxShaderCompilerThreadsKHR$MH() {
        return RuntimeHelper.requireNonNull(constants$563.glMaxShaderCompilerThreadsKHR$MH,"glMaxShaderCompilerThreadsKHR");
    }
    public static void glMaxShaderCompilerThreadsKHR ( int count) {
        var mh$ = glMaxShaderCompilerThreadsKHR$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$570.glMultiTexCoord1bOES$MH,"glMultiTexCoord1bOES");
    }
    public static void glMultiTexCoord1bOES ( int texture,  byte s) {
        var mh$ = glMultiTexCoord1bOES$MH();
        try {
            mh$.invokeExact(texture, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$570.glMultiTexCoord1bvOES$MH,"glMultiTexCoord1bvOES");
    }
    public static void glMultiTexCoord1bvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord1bvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$570.glMultiTexCoord2bOES$MH,"glMultiTexCoord2bOES");
    }
    public static void glMultiTexCoord2bOES ( int texture,  byte s,  byte t) {
        var mh$ = glMultiTexCoord2bOES$MH();
        try {
            mh$.invokeExact(texture, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glMultiTexCoord2bvOES$MH,"glMultiTexCoord2bvOES");
    }
    public static void glMultiTexCoord2bvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord2bvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glMultiTexCoord3bOES$MH,"glMultiTexCoord3bOES");
    }
    public static void glMultiTexCoord3bOES ( int texture,  byte s,  byte t,  byte r) {
        var mh$ = glMultiTexCoord3bOES$MH();
        try {
            mh$.invokeExact(texture, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glMultiTexCoord3bvOES$MH,"glMultiTexCoord3bvOES");
    }
    public static void glMultiTexCoord3bvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord3bvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glMultiTexCoord4bOES$MH,"glMultiTexCoord4bOES");
    }
    public static void glMultiTexCoord4bOES ( int texture,  byte s,  byte t,  byte r,  byte q) {
        var mh$ = glMultiTexCoord4bOES$MH();
        try {
            mh$.invokeExact(texture, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glMultiTexCoord4bvOES$MH,"glMultiTexCoord4bvOES");
    }
    public static void glMultiTexCoord4bvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord4bvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$571.glTexCoord1bOES$MH,"glTexCoord1bOES");
    }
    public static void glTexCoord1bOES ( byte s) {
        var mh$ = glTexCoord1bOES$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord1bvOES$MH,"glTexCoord1bvOES");
    }
    public static void glTexCoord1bvOES ( Addressable coords) {
        var mh$ = glTexCoord1bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord2bOES$MH,"glTexCoord2bOES");
    }
    public static void glTexCoord2bOES ( byte s,  byte t) {
        var mh$ = glTexCoord2bOES$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord2bvOES$MH,"glTexCoord2bvOES");
    }
    public static void glTexCoord2bvOES ( Addressable coords) {
        var mh$ = glTexCoord2bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord3bOES$MH,"glTexCoord3bOES");
    }
    public static void glTexCoord3bOES ( byte s,  byte t,  byte r) {
        var mh$ = glTexCoord3bOES$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord3bvOES$MH,"glTexCoord3bvOES");
    }
    public static void glTexCoord3bvOES ( Addressable coords) {
        var mh$ = glTexCoord3bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$572.glTexCoord4bOES$MH,"glTexCoord4bOES");
    }
    public static void glTexCoord4bOES ( byte s,  byte t,  byte r,  byte q) {
        var mh$ = glTexCoord4bOES$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glTexCoord4bvOES$MH,"glTexCoord4bvOES");
    }
    public static void glTexCoord4bvOES ( Addressable coords) {
        var mh$ = glTexCoord4bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glVertex2bOES$MH,"glVertex2bOES");
    }
    public static void glVertex2bOES ( byte x,  byte y) {
        var mh$ = glVertex2bOES$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glVertex2bvOES$MH,"glVertex2bvOES");
    }
    public static void glVertex2bvOES ( Addressable coords) {
        var mh$ = glVertex2bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glVertex3bOES$MH,"glVertex3bOES");
    }
    public static void glVertex3bOES ( byte x,  byte y,  byte z) {
        var mh$ = glVertex3bOES$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glVertex3bvOES$MH,"glVertex3bvOES");
    }
    public static void glVertex3bvOES ( Addressable coords) {
        var mh$ = glVertex3bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4bOES$MH() {
        return RuntimeHelper.requireNonNull(constants$573.glVertex4bOES$MH,"glVertex4bOES");
    }
    public static void glVertex4bOES ( byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertex4bOES$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4bvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$574.glVertex4bvOES$MH,"glVertex4bvOES");
    }
    public static void glVertex4bvOES ( Addressable coords) {
        var mh$ = glVertex4bvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt GLfixed = Constants$root.C_INT$LAYOUT;
    public static MethodHandle glAlphaFuncxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$608.glAlphaFuncxOES$MH,"glAlphaFuncxOES");
    }
    public static void glAlphaFuncxOES ( int func,  int ref) {
        var mh$ = glAlphaFuncxOES$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$608.glClearColorxOES$MH,"glClearColorxOES");
    }
    public static void glClearColorxOES ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glClearColorxOES$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepthxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$608.glClearDepthxOES$MH,"glClearDepthxOES");
    }
    public static void glClearDepthxOES ( int depth) {
        var mh$ = glClearDepthxOES$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlanexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glClipPlanexOES$MH,"glClipPlanexOES");
    }
    public static void glClipPlanexOES ( int plane,  Addressable equation) {
        var mh$ = glClipPlanexOES$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glColor4xOES$MH,"glColor4xOES");
    }
    public static void glColor4xOES ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4xOES$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glDepthRangexOES$MH,"glDepthRangexOES");
    }
    public static void glDepthRangexOES ( int n,  int f) {
        var mh$ = glDepthRangexOES$MH();
        try {
            mh$.invokeExact(n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glFogxOES$MH,"glFogxOES");
    }
    public static void glFogxOES ( int pname,  int param) {
        var mh$ = glFogxOES$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glFogxvOES$MH,"glFogxvOES");
    }
    public static void glFogxvOES ( int pname,  Addressable param) {
        var mh$ = glFogxvOES$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustumxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$609.glFrustumxOES$MH,"glFrustumxOES");
    }
    public static void glFrustumxOES ( int l,  int r,  int b,  int t,  int n,  int f) {
        var mh$ = glFrustumxOES$MH();
        try {
            mh$.invokeExact(l, r, b, t, n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlanexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glGetClipPlanexOES$MH,"glGetClipPlanexOES");
    }
    public static void glGetClipPlanexOES ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlanexOES$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFixedvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glGetFixedvOES$MH,"glGetFixedvOES");
    }
    public static void glGetFixedvOES ( int pname,  Addressable params) {
        var mh$ = glGetFixedvOES$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glGetTexEnvxvOES$MH,"glGetTexEnvxvOES");
    }
    public static void glGetTexEnvxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glGetTexParameterxvOES$MH,"glGetTexParameterxvOES");
    }
    public static void glGetTexParameterxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glLightModelxOES$MH,"glLightModelxOES");
    }
    public static void glLightModelxOES ( int pname,  int param) {
        var mh$ = glLightModelxOES$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$610.glLightModelxvOES$MH,"glLightModelxvOES");
    }
    public static void glLightModelxvOES ( int pname,  Addressable param) {
        var mh$ = glLightModelxvOES$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glLightxOES$MH,"glLightxOES");
    }
    public static void glLightxOES ( int light,  int pname,  int param) {
        var mh$ = glLightxOES$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glLightxvOES$MH,"glLightxvOES");
    }
    public static void glLightxvOES ( int light,  int pname,  Addressable params) {
        var mh$ = glLightxvOES$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidthxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glLineWidthxOES$MH,"glLineWidthxOES");
    }
    public static void glLineWidthxOES ( int width) {
        var mh$ = glLineWidthxOES$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glLoadMatrixxOES$MH,"glLoadMatrixxOES");
    }
    public static void glLoadMatrixxOES ( Addressable m) {
        var mh$ = glLoadMatrixxOES$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glMaterialxOES$MH,"glMaterialxOES");
    }
    public static void glMaterialxOES ( int face,  int pname,  int param) {
        var mh$ = glMaterialxOES$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$611.glMaterialxvOES$MH,"glMaterialxvOES");
    }
    public static void glMaterialxvOES ( int face,  int pname,  Addressable param) {
        var mh$ = glMaterialxvOES$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glMultMatrixxOES$MH,"glMultMatrixxOES");
    }
    public static void glMultMatrixxOES ( Addressable m) {
        var mh$ = glMultMatrixxOES$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glMultiTexCoord4xOES$MH,"glMultiTexCoord4xOES");
    }
    public static void glMultiTexCoord4xOES ( int texture,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4xOES$MH();
        try {
            mh$.invokeExact(texture, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glNormal3xOES$MH,"glNormal3xOES");
    }
    public static void glNormal3xOES ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3xOES$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrthoxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glOrthoxOES$MH,"glOrthoxOES");
    }
    public static void glOrthoxOES ( int l,  int r,  int b,  int t,  int n,  int f) {
        var mh$ = glOrthoxOES$MH();
        try {
            mh$.invokeExact(l, r, b, t, n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glPointParameterxvOES$MH,"glPointParameterxvOES");
    }
    public static void glPointParameterxvOES ( int pname,  Addressable params) {
        var mh$ = glPointParameterxvOES$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSizexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$612.glPointSizexOES$MH,"glPointSizexOES");
    }
    public static void glPointSizexOES ( int size) {
        var mh$ = glPointSizexOES$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffsetxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glPolygonOffsetxOES$MH,"glPolygonOffsetxOES");
    }
    public static void glPolygonOffsetxOES ( int factor,  int units) {
        var mh$ = glPolygonOffsetxOES$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glRotatexOES$MH,"glRotatexOES");
    }
    public static void glRotatexOES ( int angle,  int x,  int y,  int z) {
        var mh$ = glRotatexOES$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glScalexOES$MH,"glScalexOES");
    }
    public static void glScalexOES ( int x,  int y,  int z) {
        var mh$ = glScalexOES$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glTexEnvxOES$MH,"glTexEnvxOES");
    }
    public static void glTexEnvxOES ( int target,  int pname,  int param) {
        var mh$ = glTexEnvxOES$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glTexEnvxvOES$MH,"glTexEnvxvOES");
    }
    public static void glTexEnvxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnvxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$613.glTexParameterxOES$MH,"glTexParameterxOES");
    }
    public static void glTexParameterxOES ( int target,  int pname,  int param) {
        var mh$ = glTexParameterxOES$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glTexParameterxvOES$MH,"glTexParameterxvOES");
    }
    public static void glTexParameterxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatexOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glTranslatexOES$MH,"glTranslatexOES");
    }
    public static void glTranslatexOES ( int x,  int y,  int z) {
        var mh$ = glTranslatexOES$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccumxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glAccumxOES$MH,"glAccumxOES");
    }
    public static void glAccumxOES ( int op,  int value) {
        var mh$ = glAccumxOES$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmapxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glBitmapxOES$MH,"glBitmapxOES");
    }
    public static void glBitmapxOES ( int width,  int height,  int xorig,  int yorig,  int xmove,  int ymove,  Addressable bitmap) {
        var mh$ = glBitmapxOES$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColorxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glBlendColorxOES$MH,"glBlendColorxOES");
    }
    public static void glBlendColorxOES ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glBlendColorxOES$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccumxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$614.glClearAccumxOES$MH,"glClearAccumxOES");
    }
    public static void glClearAccumxOES ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glClearAccumxOES$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glColor3xOES$MH,"glColor3xOES");
    }
    public static void glColor3xOES ( int red,  int green,  int blue) {
        var mh$ = glColor3xOES$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glColor3xvOES$MH,"glColor3xvOES");
    }
    public static void glColor3xvOES ( Addressable components) {
        var mh$ = glColor3xvOES$MH();
        try {
            mh$.invokeExact(components);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glColor4xvOES$MH,"glColor4xvOES");
    }
    public static void glColor4xvOES ( Addressable components) {
        var mh$ = glColor4xvOES$MH();
        try {
            mh$.invokeExact(components);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glConvolutionParameterxOES$MH,"glConvolutionParameterxOES");
    }
    public static void glConvolutionParameterxOES ( int target,  int pname,  int param) {
        var mh$ = glConvolutionParameterxOES$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glConvolutionParameterxvOES$MH,"glConvolutionParameterxvOES");
    }
    public static void glConvolutionParameterxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$615.glEvalCoord1xOES$MH,"glEvalCoord1xOES");
    }
    public static void glEvalCoord1xOES ( int u) {
        var mh$ = glEvalCoord1xOES$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glEvalCoord1xvOES$MH,"glEvalCoord1xvOES");
    }
    public static void glEvalCoord1xvOES ( Addressable coords) {
        var mh$ = glEvalCoord1xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glEvalCoord2xOES$MH,"glEvalCoord2xOES");
    }
    public static void glEvalCoord2xOES ( int u,  int v) {
        var mh$ = glEvalCoord2xOES$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glEvalCoord2xvOES$MH,"glEvalCoord2xvOES");
    }
    public static void glEvalCoord2xvOES ( Addressable coords) {
        var mh$ = glEvalCoord2xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBufferxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glFeedbackBufferxOES$MH,"glFeedbackBufferxOES");
    }
    public static void glFeedbackBufferxOES ( int n,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBufferxOES$MH();
        try {
            mh$.invokeExact(n, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glGetConvolutionParameterxvOES$MH,"glGetConvolutionParameterxvOES");
    }
    public static void glGetConvolutionParameterxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$616.glGetHistogramParameterxvOES$MH,"glGetHistogramParameterxvOES");
    }
    public static void glGetHistogramParameterxvOES ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterxvOES$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetLightxOES$MH,"glGetLightxOES");
    }
    public static void glGetLightxOES ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightxOES$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetMapxvOES$MH,"glGetMapxvOES");
    }
    public static void glGetMapxvOES ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapxvOES$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetMaterialxOES$MH,"glGetMaterialxOES");
    }
    public static void glGetMaterialxOES ( int face,  int pname,  int param) {
        var mh$ = glGetMaterialxOES$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapxv$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetPixelMapxv$MH,"glGetPixelMapxv");
    }
    public static void glGetPixelMapxv ( int map,  int size,  Addressable values) {
        var mh$ = glGetPixelMapxv$MH();
        try {
            mh$.invokeExact(map, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetTexGenxvOES$MH,"glGetTexGenxvOES");
    }
    public static void glGetTexGenxvOES ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenxvOES$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$617.glGetTexLevelParameterxvOES$MH,"glGetTexLevelParameterxvOES");
    }
    public static void glGetTexLevelParameterxvOES ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterxvOES$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glIndexxOES$MH,"glIndexxOES");
    }
    public static void glIndexxOES ( int component) {
        var mh$ = glIndexxOES$MH();
        try {
            mh$.invokeExact(component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glIndexxvOES$MH,"glIndexxvOES");
    }
    public static void glIndexxvOES ( Addressable component) {
        var mh$ = glIndexxvOES$MH();
        try {
            mh$.invokeExact(component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glLoadTransposeMatrixxOES$MH,"glLoadTransposeMatrixxOES");
    }
    public static void glLoadTransposeMatrixxOES ( Addressable m) {
        var mh$ = glLoadTransposeMatrixxOES$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glMap1xOES$MH,"glMap1xOES");
    }
    public static void glMap1xOES ( int target,  int u1,  int u2,  int stride,  int order,  int points) {
        var mh$ = glMap1xOES$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glMap2xOES$MH,"glMap2xOES");
    }
    public static void glMap2xOES ( int target,  int u1,  int u2,  int ustride,  int uorder,  int v1,  int v2,  int vstride,  int vorder,  int points) {
        var mh$ = glMap2xOES$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$618.glMapGrid1xOES$MH,"glMapGrid1xOES");
    }
    public static void glMapGrid1xOES ( int n,  int u1,  int u2) {
        var mh$ = glMapGrid1xOES$MH();
        try {
            mh$.invokeExact(n, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMapGrid2xOES$MH,"glMapGrid2xOES");
    }
    public static void glMapGrid2xOES ( int n,  int u1,  int u2,  int v1,  int v2) {
        var mh$ = glMapGrid2xOES$MH();
        try {
            mh$.invokeExact(n, u1, u2, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMultTransposeMatrixxOES$MH,"glMultTransposeMatrixxOES");
    }
    public static void glMultTransposeMatrixxOES ( Addressable m) {
        var mh$ = glMultTransposeMatrixxOES$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMultiTexCoord1xOES$MH,"glMultiTexCoord1xOES");
    }
    public static void glMultiTexCoord1xOES ( int texture,  int s) {
        var mh$ = glMultiTexCoord1xOES$MH();
        try {
            mh$.invokeExact(texture, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMultiTexCoord1xvOES$MH,"glMultiTexCoord1xvOES");
    }
    public static void glMultiTexCoord1xvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord1xvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMultiTexCoord2xOES$MH,"glMultiTexCoord2xOES");
    }
    public static void glMultiTexCoord2xOES ( int texture,  int s,  int t) {
        var mh$ = glMultiTexCoord2xOES$MH();
        try {
            mh$.invokeExact(texture, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$619.glMultiTexCoord2xvOES$MH,"glMultiTexCoord2xvOES");
    }
    public static void glMultiTexCoord2xvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord2xvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glMultiTexCoord3xOES$MH,"glMultiTexCoord3xOES");
    }
    public static void glMultiTexCoord3xOES ( int texture,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3xOES$MH();
        try {
            mh$.invokeExact(texture, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glMultiTexCoord3xvOES$MH,"glMultiTexCoord3xvOES");
    }
    public static void glMultiTexCoord3xvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord3xvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glMultiTexCoord4xvOES$MH,"glMultiTexCoord4xvOES");
    }
    public static void glMultiTexCoord4xvOES ( int texture,  Addressable coords) {
        var mh$ = glMultiTexCoord4xvOES$MH();
        try {
            mh$.invokeExact(texture, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glNormal3xvOES$MH,"glNormal3xvOES");
    }
    public static void glNormal3xvOES ( Addressable coords) {
        var mh$ = glNormal3xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThroughxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glPassThroughxOES$MH,"glPassThroughxOES");
    }
    public static void glPassThroughxOES ( int token) {
        var mh$ = glPassThroughxOES$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapx$MH() {
        return RuntimeHelper.requireNonNull(constants$620.glPixelMapx$MH,"glPixelMapx");
    }
    public static void glPixelMapx ( int map,  int size,  Addressable values) {
        var mh$ = glPixelMapx$MH();
        try {
            mh$.invokeExact(map, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorex$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glPixelStorex$MH,"glPixelStorex");
    }
    public static void glPixelStorex ( int pname,  int param) {
        var mh$ = glPixelStorex$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glPixelTransferxOES$MH,"glPixelTransferxOES");
    }
    public static void glPixelTransferxOES ( int pname,  int param) {
        var mh$ = glPixelTransferxOES$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoomxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glPixelZoomxOES$MH,"glPixelZoomxOES");
    }
    public static void glPixelZoomxOES ( int xfactor,  int yfactor) {
        var mh$ = glPixelZoomxOES$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTexturesxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glPrioritizeTexturesxOES$MH,"glPrioritizeTexturesxOES");
    }
    public static void glPrioritizeTexturesxOES ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTexturesxOES$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glRasterPos2xOES$MH,"glRasterPos2xOES");
    }
    public static void glRasterPos2xOES ( int x,  int y) {
        var mh$ = glRasterPos2xOES$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$621.glRasterPos2xvOES$MH,"glRasterPos2xvOES");
    }
    public static void glRasterPos2xvOES ( Addressable coords) {
        var mh$ = glRasterPos2xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRasterPos3xOES$MH,"glRasterPos3xOES");
    }
    public static void glRasterPos3xOES ( int x,  int y,  int z) {
        var mh$ = glRasterPos3xOES$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRasterPos3xvOES$MH,"glRasterPos3xvOES");
    }
    public static void glRasterPos3xvOES ( Addressable coords) {
        var mh$ = glRasterPos3xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRasterPos4xOES$MH,"glRasterPos4xOES");
    }
    public static void glRasterPos4xOES ( int x,  int y,  int z,  int w) {
        var mh$ = glRasterPos4xOES$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRasterPos4xvOES$MH,"glRasterPos4xvOES");
    }
    public static void glRasterPos4xvOES ( Addressable coords) {
        var mh$ = glRasterPos4xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRectxOES$MH,"glRectxOES");
    }
    public static void glRectxOES ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = glRectxOES$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$622.glRectxvOES$MH,"glRectxvOES");
    }
    public static void glRectxvOES ( Addressable v1,  Addressable v2) {
        var mh$ = glRectxvOES$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord1xOES$MH,"glTexCoord1xOES");
    }
    public static void glTexCoord1xOES ( int s) {
        var mh$ = glTexCoord1xOES$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord1xvOES$MH,"glTexCoord1xvOES");
    }
    public static void glTexCoord1xvOES ( Addressable coords) {
        var mh$ = glTexCoord1xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord2xOES$MH,"glTexCoord2xOES");
    }
    public static void glTexCoord2xOES ( int s,  int t) {
        var mh$ = glTexCoord2xOES$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord2xvOES$MH,"glTexCoord2xvOES");
    }
    public static void glTexCoord2xvOES ( Addressable coords) {
        var mh$ = glTexCoord2xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord3xOES$MH,"glTexCoord3xOES");
    }
    public static void glTexCoord3xOES ( int s,  int t,  int r) {
        var mh$ = glTexCoord3xOES$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$623.glTexCoord3xvOES$MH,"glTexCoord3xvOES");
    }
    public static void glTexCoord3xvOES ( Addressable coords) {
        var mh$ = glTexCoord3xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glTexCoord4xOES$MH,"glTexCoord4xOES");
    }
    public static void glTexCoord4xOES ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4xOES$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glTexCoord4xvOES$MH,"glTexCoord4xvOES");
    }
    public static void glTexCoord4xvOES ( Addressable coords) {
        var mh$ = glTexCoord4xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glTexGenxOES$MH,"glTexGenxOES");
    }
    public static void glTexGenxOES ( int coord,  int pname,  int param) {
        var mh$ = glTexGenxOES$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenxvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glTexGenxvOES$MH,"glTexGenxvOES");
    }
    public static void glTexGenxvOES ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGenxvOES$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glVertex2xOES$MH,"glVertex2xOES");
    }
    public static void glVertex2xOES ( int x) {
        var mh$ = glVertex2xOES$MH();
        try {
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$624.glVertex2xvOES$MH,"glVertex2xvOES");
    }
    public static void glVertex2xvOES ( Addressable coords) {
        var mh$ = glVertex2xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$625.glVertex3xOES$MH,"glVertex3xOES");
    }
    public static void glVertex3xOES ( int x,  int y) {
        var mh$ = glVertex3xOES$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$625.glVertex3xvOES$MH,"glVertex3xvOES");
    }
    public static void glVertex3xvOES ( Addressable coords) {
        var mh$ = glVertex3xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4xOES$MH() {
        return RuntimeHelper.requireNonNull(constants$625.glVertex4xOES$MH,"glVertex4xOES");
    }
    public static void glVertex4xOES ( int x,  int y,  int z) {
        var mh$ = glVertex4xOES$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4xvOES$MH() {
        return RuntimeHelper.requireNonNull(constants$625.glVertex4xvOES$MH,"glVertex4xvOES");
    }
    public static void glVertex4xvOES ( Addressable coords) {
        var mh$ = glVertex4xvOES$MH();
        try {
            mh$.invokeExact(coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glQueryMatrixxOES$MH() {
        return RuntimeHelper.requireNonNull(constants$626.glQueryMatrixxOES$MH,"glQueryMatrixxOES");
    }
    public static int glQueryMatrixxOES ( Addressable mantissa,  Addressable exponent) {
        var mh$ = glQueryMatrixxOES$MH();
        try {
            return (int)mh$.invokeExact(mantissa, exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepthfOES$MH() {
        return RuntimeHelper.requireNonNull(constants$628.glClearDepthfOES$MH,"glClearDepthfOES");
    }
    public static void glClearDepthfOES ( float depth) {
        var mh$ = glClearDepthfOES$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlanefOES$MH() {
        return RuntimeHelper.requireNonNull(constants$628.glClipPlanefOES$MH,"glClipPlanefOES");
    }
    public static void glClipPlanefOES ( int plane,  Addressable equation) {
        var mh$ = glClipPlanefOES$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangefOES$MH() {
        return RuntimeHelper.requireNonNull(constants$628.glDepthRangefOES$MH,"glDepthRangefOES");
    }
    public static void glDepthRangefOES ( float n,  float f) {
        var mh$ = glDepthRangefOES$MH();
        try {
            mh$.invokeExact(n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustumfOES$MH() {
        return RuntimeHelper.requireNonNull(constants$628.glFrustumfOES$MH,"glFrustumfOES");
    }
    public static void glFrustumfOES ( float l,  float r,  float b,  float t,  float n,  float f) {
        var mh$ = glFrustumfOES$MH();
        try {
            mh$.invokeExact(l, r, b, t, n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlanefOES$MH() {
        return RuntimeHelper.requireNonNull(constants$628.glGetClipPlanefOES$MH,"glGetClipPlanefOES");
    }
    public static void glGetClipPlanefOES ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlanefOES$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrthofOES$MH() {
        return RuntimeHelper.requireNonNull(constants$629.glOrthofOES$MH,"glOrthofOES");
    }
    public static void glOrthofOES ( float l,  float r,  float b,  float t,  float n,  float f) {
        var mh$ = glOrthofOES$MH();
        try {
            mh$.invokeExact(l, r, b, t, n, f);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTbufferMask3DFX$MH() {
        return RuntimeHelper.requireNonNull(constants$629.glTbufferMask3DFX$MH,"glTbufferMask3DFX");
    }
    public static void glTbufferMask3DFX ( int mask) {
        var mh$ = glTbufferMask3DFX$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageEnableAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$631.glDebugMessageEnableAMD$MH,"glDebugMessageEnableAMD");
    }
    public static void glDebugMessageEnableAMD ( int category,  int severity,  int count,  Addressable ids,  byte enabled) {
        var mh$ = glDebugMessageEnableAMD$MH();
        try {
            mh$.invokeExact(category, severity, count, ids, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageInsertAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$631.glDebugMessageInsertAMD$MH,"glDebugMessageInsertAMD");
    }
    public static void glDebugMessageInsertAMD ( int category,  int severity,  int id,  int length,  Addressable buf) {
        var mh$ = glDebugMessageInsertAMD$MH();
        try {
            mh$.invokeExact(category, severity, id, length, buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDebugMessageCallbackAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$631.glDebugMessageCallbackAMD$MH,"glDebugMessageCallbackAMD");
    }
    public static void glDebugMessageCallbackAMD ( Addressable callback,  Addressable userParam) {
        var mh$ = glDebugMessageCallbackAMD$MH();
        try {
            mh$.invokeExact(callback, userParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDebugMessageLogAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$631.glGetDebugMessageLogAMD$MH,"glGetDebugMessageLogAMD");
    }
    public static int glGetDebugMessageLogAMD ( int count,  int bufsize,  Addressable categories,  Addressable severities,  Addressable ids,  Addressable lengths,  Addressable message) {
        var mh$ = glGetDebugMessageLogAMD$MH();
        try {
            return (int)mh$.invokeExact(count, bufsize, categories, severities, ids, lengths, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncIndexedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glBlendFuncIndexedAMD$MH,"glBlendFuncIndexedAMD");
    }
    public static void glBlendFuncIndexedAMD ( int buf,  int src,  int dst) {
        var mh$ = glBlendFuncIndexedAMD$MH();
        try {
            mh$.invokeExact(buf, src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateIndexedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glBlendFuncSeparateIndexedAMD$MH,"glBlendFuncSeparateIndexedAMD");
    }
    public static void glBlendFuncSeparateIndexedAMD ( int buf,  int srcRGB,  int dstRGB,  int srcAlpha,  int dstAlpha) {
        var mh$ = glBlendFuncSeparateIndexedAMD$MH();
        try {
            mh$.invokeExact(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationIndexedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glBlendEquationIndexedAMD$MH,"glBlendEquationIndexedAMD");
    }
    public static void glBlendEquationIndexedAMD ( int buf,  int mode) {
        var mh$ = glBlendEquationIndexedAMD$MH();
        try {
            mh$.invokeExact(buf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateIndexedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glBlendEquationSeparateIndexedAMD$MH,"glBlendEquationSeparateIndexedAMD");
    }
    public static void glBlendEquationSeparateIndexedAMD ( int buf,  int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparateIndexedAMD$MH();
        try {
            mh$.invokeExact(buf, modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisampleAdvancedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glRenderbufferStorageMultisampleAdvancedAMD$MH,"glRenderbufferStorageMultisampleAdvancedAMD");
    }
    public static void glRenderbufferStorageMultisampleAdvancedAMD ( int target,  int samples,  int storageSamples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisampleAdvancedAMD$MH();
        try {
            mh$.invokeExact(target, samples, storageSamples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorageMultisampleAdvancedAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glNamedRenderbufferStorageMultisampleAdvancedAMD$MH,"glNamedRenderbufferStorageMultisampleAdvancedAMD");
    }
    public static void glNamedRenderbufferStorageMultisampleAdvancedAMD ( int renderbuffer,  int samples,  int storageSamples,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorageMultisampleAdvancedAMD$MH();
        try {
            mh$.invokeExact(renderbuffer, samples, storageSamples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferSamplePositionsfvAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glFramebufferSamplePositionsfvAMD$MH,"glFramebufferSamplePositionsfvAMD");
    }
    public static void glFramebufferSamplePositionsfvAMD ( int target,  int numsamples,  int pixelindex,  Addressable values) {
        var mh$ = glFramebufferSamplePositionsfvAMD$MH();
        try {
            mh$.invokeExact(target, numsamples, pixelindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferSamplePositionsfvAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glNamedFramebufferSamplePositionsfvAMD$MH,"glNamedFramebufferSamplePositionsfvAMD");
    }
    public static void glNamedFramebufferSamplePositionsfvAMD ( int framebuffer,  int numsamples,  int pixelindex,  Addressable values) {
        var mh$ = glNamedFramebufferSamplePositionsfvAMD$MH();
        try {
            mh$.invokeExact(framebuffer, numsamples, pixelindex, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferParameterfvAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glGetFramebufferParameterfvAMD$MH,"glGetFramebufferParameterfvAMD");
    }
    public static void glGetFramebufferParameterfvAMD ( int target,  int pname,  int numsamples,  int pixelindex,  int size,  Addressable values) {
        var mh$ = glGetFramebufferParameterfvAMD$MH();
        try {
            mh$.invokeExact(target, pname, numsamples, pixelindex, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedFramebufferParameterfvAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glGetNamedFramebufferParameterfvAMD$MH,"glGetNamedFramebufferParameterfvAMD");
    }
    public static void glGetNamedFramebufferParameterfvAMD ( int framebuffer,  int pname,  int numsamples,  int pixelindex,  int size,  Addressable values) {
        var mh$ = glGetNamedFramebufferParameterfvAMD$MH();
        try {
            mh$.invokeExact(framebuffer, pname, numsamples, pixelindex, size, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong GLint64EXT = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glUniform1i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glUniform1i64NV$MH,"glUniform1i64NV");
    }
    public static void glUniform1i64NV ( int location,  long x) {
        var mh$ = glUniform1i64NV$MH();
        try {
            mh$.invokeExact(location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glUniform2i64NV$MH,"glUniform2i64NV");
    }
    public static void glUniform2i64NV ( int location,  long x,  long y) {
        var mh$ = glUniform2i64NV$MH();
        try {
            mh$.invokeExact(location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glUniform3i64NV$MH,"glUniform3i64NV");
    }
    public static void glUniform3i64NV ( int location,  long x,  long y,  long z) {
        var mh$ = glUniform3i64NV$MH();
        try {
            mh$.invokeExact(location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$648.glUniform4i64NV$MH,"glUniform4i64NV");
    }
    public static void glUniform4i64NV ( int location,  long x,  long y,  long z,  long w) {
        var mh$ = glUniform4i64NV$MH();
        try {
            mh$.invokeExact(location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform1i64vNV$MH,"glUniform1i64vNV");
    }
    public static void glUniform1i64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1i64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform2i64vNV$MH,"glUniform2i64vNV");
    }
    public static void glUniform2i64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2i64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform3i64vNV$MH,"glUniform3i64vNV");
    }
    public static void glUniform3i64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3i64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform4i64vNV$MH,"glUniform4i64vNV");
    }
    public static void glUniform4i64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4i64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform1ui64NV$MH,"glUniform1ui64NV");
    }
    public static void glUniform1ui64NV ( int location,  long x) {
        var mh$ = glUniform1ui64NV$MH();
        try {
            mh$.invokeExact(location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$649.glUniform2ui64NV$MH,"glUniform2ui64NV");
    }
    public static void glUniform2ui64NV ( int location,  long x,  long y) {
        var mh$ = glUniform2ui64NV$MH();
        try {
            mh$.invokeExact(location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform3ui64NV$MH,"glUniform3ui64NV");
    }
    public static void glUniform3ui64NV ( int location,  long x,  long y,  long z) {
        var mh$ = glUniform3ui64NV$MH();
        try {
            mh$.invokeExact(location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform4ui64NV$MH,"glUniform4ui64NV");
    }
    public static void glUniform4ui64NV ( int location,  long x,  long y,  long z,  long w) {
        var mh$ = glUniform4ui64NV$MH();
        try {
            mh$.invokeExact(location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform1ui64vNV$MH,"glUniform1ui64vNV");
    }
    public static void glUniform1ui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1ui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform2ui64vNV$MH,"glUniform2ui64vNV");
    }
    public static void glUniform2ui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2ui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform3ui64vNV$MH,"glUniform3ui64vNV");
    }
    public static void glUniform3ui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3ui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$650.glUniform4ui64vNV$MH,"glUniform4ui64vNV");
    }
    public static void glUniform4ui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4ui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformi64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glGetUniformi64vNV$MH,"glGetUniformi64vNV");
    }
    public static void glGetUniformi64vNV ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformi64vNV$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glGetUniformui64vNV$MH,"glGetUniformui64vNV");
    }
    public static void glGetUniformui64vNV ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformui64vNV$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glProgramUniform1i64NV$MH,"glProgramUniform1i64NV");
    }
    public static void glProgramUniform1i64NV ( int program,  int location,  long x) {
        var mh$ = glProgramUniform1i64NV$MH();
        try {
            mh$.invokeExact(program, location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glProgramUniform2i64NV$MH,"glProgramUniform2i64NV");
    }
    public static void glProgramUniform2i64NV ( int program,  int location,  long x,  long y) {
        var mh$ = glProgramUniform2i64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glProgramUniform3i64NV$MH,"glProgramUniform3i64NV");
    }
    public static void glProgramUniform3i64NV ( int program,  int location,  long x,  long y,  long z) {
        var mh$ = glProgramUniform3i64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$651.glProgramUniform4i64NV$MH,"glProgramUniform4i64NV");
    }
    public static void glProgramUniform4i64NV ( int program,  int location,  long x,  long y,  long z,  long w) {
        var mh$ = glProgramUniform4i64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform1i64vNV$MH,"glProgramUniform1i64vNV");
    }
    public static void glProgramUniform1i64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1i64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform2i64vNV$MH,"glProgramUniform2i64vNV");
    }
    public static void glProgramUniform2i64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2i64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform3i64vNV$MH,"glProgramUniform3i64vNV");
    }
    public static void glProgramUniform3i64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3i64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform4i64vNV$MH,"glProgramUniform4i64vNV");
    }
    public static void glProgramUniform4i64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4i64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform1ui64NV$MH,"glProgramUniform1ui64NV");
    }
    public static void glProgramUniform1ui64NV ( int program,  int location,  long x) {
        var mh$ = glProgramUniform1ui64NV$MH();
        try {
            mh$.invokeExact(program, location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$652.glProgramUniform2ui64NV$MH,"glProgramUniform2ui64NV");
    }
    public static void glProgramUniform2ui64NV ( int program,  int location,  long x,  long y) {
        var mh$ = glProgramUniform2ui64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform3ui64NV$MH,"glProgramUniform3ui64NV");
    }
    public static void glProgramUniform3ui64NV ( int program,  int location,  long x,  long y,  long z) {
        var mh$ = glProgramUniform3ui64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform4ui64NV$MH,"glProgramUniform4ui64NV");
    }
    public static void glProgramUniform4ui64NV ( int program,  int location,  long x,  long y,  long z,  long w) {
        var mh$ = glProgramUniform4ui64NV$MH();
        try {
            mh$.invokeExact(program, location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform1ui64vNV$MH,"glProgramUniform1ui64vNV");
    }
    public static void glProgramUniform1ui64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1ui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform2ui64vNV$MH,"glProgramUniform2ui64vNV");
    }
    public static void glProgramUniform2ui64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2ui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform3ui64vNV$MH,"glProgramUniform3ui64vNV");
    }
    public static void glProgramUniform3ui64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3ui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$653.glProgramUniform4ui64vNV$MH,"glProgramUniform4ui64vNV");
    }
    public static void glProgramUniform4ui64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4ui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribParameteriAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$654.glVertexAttribParameteriAMD$MH,"glVertexAttribParameteriAMD");
    }
    public static void glVertexAttribParameteriAMD ( int index,  int pname,  int param) {
        var mh$ = glVertexAttribParameteriAMD$MH();
        try {
            mh$.invokeExact(index, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirectAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glMultiDrawArraysIndirectAMD$MH,"glMultiDrawArraysIndirectAMD");
    }
    public static void glMultiDrawArraysIndirectAMD ( int mode,  Addressable indirect,  int primcount,  int stride) {
        var mh$ = glMultiDrawArraysIndirectAMD$MH();
        try {
            mh$.invokeExact(mode, indirect, primcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirectAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$655.glMultiDrawElementsIndirectAMD$MH,"glMultiDrawElementsIndirectAMD");
    }
    public static void glMultiDrawElementsIndirectAMD ( int mode,  int type,  Addressable indirect,  int primcount,  int stride) {
        var mh$ = glMultiDrawElementsIndirectAMD$MH();
        try {
            mh$.invokeExact(mode, type, indirect, primcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenNamesAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glGenNamesAMD$MH,"glGenNamesAMD");
    }
    public static void glGenNamesAMD ( int identifier,  int num,  Addressable names) {
        var mh$ = glGenNamesAMD$MH();
        try {
            mh$.invokeExact(identifier, num, names);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteNamesAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glDeleteNamesAMD$MH,"glDeleteNamesAMD");
    }
    public static void glDeleteNamesAMD ( int identifier,  int num,  Addressable names) {
        var mh$ = glDeleteNamesAMD$MH();
        try {
            mh$.invokeExact(identifier, num, names);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsNameAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$656.glIsNameAMD$MH,"glIsNameAMD");
    }
    public static byte glIsNameAMD ( int identifier,  int name) {
        var mh$ = glIsNameAMD$MH();
        try {
            return (byte)mh$.invokeExact(identifier, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glQueryObjectParameteruiAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$657.glQueryObjectParameteruiAMD$MH,"glQueryObjectParameteruiAMD");
    }
    public static void glQueryObjectParameteruiAMD ( int target,  int id,  int pname,  int param) {
        var mh$ = glQueryObjectParameteruiAMD$MH();
        try {
            mh$.invokeExact(target, id, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorGroupsAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glGetPerfMonitorGroupsAMD$MH,"glGetPerfMonitorGroupsAMD");
    }
    public static void glGetPerfMonitorGroupsAMD ( Addressable numGroups,  int groupsSize,  Addressable groups) {
        var mh$ = glGetPerfMonitorGroupsAMD$MH();
        try {
            mh$.invokeExact(numGroups, groupsSize, groups);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorCountersAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glGetPerfMonitorCountersAMD$MH,"glGetPerfMonitorCountersAMD");
    }
    public static void glGetPerfMonitorCountersAMD ( int group,  Addressable numCounters,  Addressable maxActiveCounters,  int counterSize,  Addressable counters) {
        var mh$ = glGetPerfMonitorCountersAMD$MH();
        try {
            mh$.invokeExact(group, numCounters, maxActiveCounters, counterSize, counters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorGroupStringAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glGetPerfMonitorGroupStringAMD$MH,"glGetPerfMonitorGroupStringAMD");
    }
    public static void glGetPerfMonitorGroupStringAMD ( int group,  int bufSize,  Addressable length,  Addressable groupString) {
        var mh$ = glGetPerfMonitorGroupStringAMD$MH();
        try {
            mh$.invokeExact(group, bufSize, length, groupString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorCounterStringAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glGetPerfMonitorCounterStringAMD$MH,"glGetPerfMonitorCounterStringAMD");
    }
    public static void glGetPerfMonitorCounterStringAMD ( int group,  int counter,  int bufSize,  Addressable length,  Addressable counterString) {
        var mh$ = glGetPerfMonitorCounterStringAMD$MH();
        try {
            mh$.invokeExact(group, counter, bufSize, length, counterString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorCounterInfoAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$661.glGetPerfMonitorCounterInfoAMD$MH,"glGetPerfMonitorCounterInfoAMD");
    }
    public static void glGetPerfMonitorCounterInfoAMD ( int group,  int counter,  int pname,  Addressable data) {
        var mh$ = glGetPerfMonitorCounterInfoAMD$MH();
        try {
            mh$.invokeExact(group, counter, pname, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenPerfMonitorsAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glGenPerfMonitorsAMD$MH,"glGenPerfMonitorsAMD");
    }
    public static void glGenPerfMonitorsAMD ( int n,  Addressable monitors) {
        var mh$ = glGenPerfMonitorsAMD$MH();
        try {
            mh$.invokeExact(n, monitors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeletePerfMonitorsAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glDeletePerfMonitorsAMD$MH,"glDeletePerfMonitorsAMD");
    }
    public static void glDeletePerfMonitorsAMD ( int n,  Addressable monitors) {
        var mh$ = glDeletePerfMonitorsAMD$MH();
        try {
            mh$.invokeExact(n, monitors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectPerfMonitorCountersAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glSelectPerfMonitorCountersAMD$MH,"glSelectPerfMonitorCountersAMD");
    }
    public static void glSelectPerfMonitorCountersAMD ( int monitor,  byte enable,  int group,  int numCounters,  Addressable counterList) {
        var mh$ = glSelectPerfMonitorCountersAMD$MH();
        try {
            mh$.invokeExact(monitor, enable, group, numCounters, counterList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginPerfMonitorAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glBeginPerfMonitorAMD$MH,"glBeginPerfMonitorAMD");
    }
    public static void glBeginPerfMonitorAMD ( int monitor) {
        var mh$ = glBeginPerfMonitorAMD$MH();
        try {
            mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndPerfMonitorAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glEndPerfMonitorAMD$MH,"glEndPerfMonitorAMD");
    }
    public static void glEndPerfMonitorAMD ( int monitor) {
        var mh$ = glEndPerfMonitorAMD$MH();
        try {
            mh$.invokeExact(monitor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfMonitorCounterDataAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$662.glGetPerfMonitorCounterDataAMD$MH,"glGetPerfMonitorCounterDataAMD");
    }
    public static void glGetPerfMonitorCounterDataAMD ( int monitor,  int pname,  int dataSize,  Addressable data,  Addressable bytesWritten) {
        var mh$ = glGetPerfMonitorCounterDataAMD$MH();
        try {
            mh$.invokeExact(monitor, pname, dataSize, data, bytesWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetMultisamplefvAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$663.glSetMultisamplefvAMD$MH,"glSetMultisamplefvAMD");
    }
    public static void glSetMultisamplefvAMD ( int pname,  int index,  Addressable val) {
        var mh$ = glSetMultisamplefvAMD$MH();
        try {
            mh$.invokeExact(pname, index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageSparseAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glTexStorageSparseAMD$MH,"glTexStorageSparseAMD");
    }
    public static void glTexStorageSparseAMD ( int target,  int internalFormat,  int width,  int height,  int depth,  int layers,  int flags) {
        var mh$ = glTexStorageSparseAMD$MH();
        try {
            mh$.invokeExact(target, internalFormat, width, height, depth, layers, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageSparseAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glTextureStorageSparseAMD$MH,"glTextureStorageSparseAMD");
    }
    public static void glTextureStorageSparseAMD ( int texture,  int target,  int internalFormat,  int width,  int height,  int depth,  int layers,  int flags) {
        var mh$ = glTextureStorageSparseAMD$MH();
        try {
            mh$.invokeExact(texture, target, internalFormat, width, height, depth, layers, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOpValueAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$664.glStencilOpValueAMD$MH,"glStencilOpValueAMD");
    }
    public static void glStencilOpValueAMD ( int face,  int value) {
        var mh$ = glStencilOpValueAMD$MH();
        try {
            mh$.invokeExact(face, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTessellationFactorAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glTessellationFactorAMD$MH,"glTessellationFactorAMD");
    }
    public static void glTessellationFactorAMD ( float factor) {
        var mh$ = glTessellationFactorAMD$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTessellationModeAMD$MH() {
        return RuntimeHelper.requireNonNull(constants$665.glTessellationModeAMD$MH,"glTessellationModeAMD");
    }
    public static void glTessellationModeAMD ( int mode) {
        var mh$ = glTessellationModeAMD$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glElementPointerAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glElementPointerAPPLE$MH,"glElementPointerAPPLE");
    }
    public static void glElementPointerAPPLE ( int type,  Addressable pointer) {
        var mh$ = glElementPointerAPPLE$MH();
        try {
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$667.glDrawElementArrayAPPLE$MH,"glDrawElementArrayAPPLE");
    }
    public static void glDrawElementArrayAPPLE ( int mode,  int first,  int count) {
        var mh$ = glDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glDrawRangeElementArrayAPPLE$MH,"glDrawRangeElementArrayAPPLE");
    }
    public static void glDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  int first,  int count) {
        var mh$ = glDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMultiDrawElementArrayAPPLE$MH,"glMultiDrawElementArrayAPPLE");
    }
    public static void glMultiDrawElementArrayAPPLE ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$668.glMultiDrawRangeElementArrayAPPLE$MH,"glMultiDrawRangeElementArrayAPPLE");
    }
    public static void glMultiDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glGenFencesAPPLE$MH,"glGenFencesAPPLE");
    }
    public static void glGenFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glGenFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glDeleteFencesAPPLE$MH,"glDeleteFencesAPPLE");
    }
    public static void glDeleteFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glDeleteFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glSetFenceAPPLE$MH,"glSetFenceAPPLE");
    }
    public static void glSetFenceAPPLE ( int fence) {
        var mh$ = glSetFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glIsFenceAPPLE$MH,"glIsFenceAPPLE");
    }
    public static byte glIsFenceAPPLE ( int fence) {
        var mh$ = glIsFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$671.glTestFenceAPPLE$MH,"glTestFenceAPPLE");
    }
    public static byte glTestFenceAPPLE ( int fence) {
        var mh$ = glTestFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glFinishFenceAPPLE$MH,"glFinishFenceAPPLE");
    }
    public static void glFinishFenceAPPLE ( int fence) {
        var mh$ = glFinishFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glTestObjectAPPLE$MH,"glTestObjectAPPLE");
    }
    public static byte glTestObjectAPPLE ( int object,  int name) {
        var mh$ = glTestObjectAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$672.glFinishObjectAPPLE$MH,"glFinishObjectAPPLE");
    }
    public static void glFinishObjectAPPLE ( int object,  int name) {
        var mh$ = glFinishObjectAPPLE$MH();
        try {
            mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glBufferParameteriAPPLE$MH,"glBufferParameteriAPPLE");
    }
    public static void glBufferParameteriAPPLE ( int target,  int pname,  int param) {
        var mh$ = glBufferParameteriAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedBufferRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$673.glFlushMappedBufferRangeAPPLE$MH,"glFlushMappedBufferRangeAPPLE");
    }
    public static void glFlushMappedBufferRangeAPPLE ( int target,  long offset,  long size) {
        var mh$ = glFlushMappedBufferRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectPurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glObjectPurgeableAPPLE$MH,"glObjectPurgeableAPPLE");
    }
    public static int glObjectPurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectPurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectUnpurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glObjectUnpurgeableAPPLE$MH,"glObjectUnpurgeableAPPLE");
    }
    public static int glObjectUnpurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectUnpurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$674.glGetObjectParameterivAPPLE$MH,"glGetObjectParameterivAPPLE");
    }
    public static void glGetObjectParameterivAPPLE ( int objectType,  int name,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivAPPLE$MH();
        try {
            mh$.invokeExact(objectType, name, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glTextureRangeAPPLE$MH,"glTextureRangeAPPLE");
    }
    public static void glTextureRangeAPPLE ( int target,  int length,  Addressable pointer) {
        var mh$ = glTextureRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterPointervAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$675.glGetTexParameterPointervAPPLE$MH,"glGetTexParameterPointervAPPLE");
    }
    public static void glGetTexParameterPointervAPPLE ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterPointervAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glBindVertexArrayAPPLE$MH,"glBindVertexArrayAPPLE");
    }
    public static void glBindVertexArrayAPPLE ( int array) {
        var mh$ = glBindVertexArrayAPPLE$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glDeleteVertexArraysAPPLE$MH,"glDeleteVertexArraysAPPLE");
    }
    public static void glDeleteVertexArraysAPPLE ( int n,  Addressable arrays) {
        var mh$ = glDeleteVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, arrays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glGenVertexArraysAPPLE$MH,"glGenVertexArraysAPPLE");
    }
    public static void glGenVertexArraysAPPLE ( int n,  Addressable arrays) {
        var mh$ = glGenVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, arrays);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$677.glIsVertexArrayAPPLE$MH,"glIsVertexArrayAPPLE");
    }
    public static byte glIsVertexArrayAPPLE ( int array) {
        var mh$ = glIsVertexArrayAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glVertexArrayRangeAPPLE$MH,"glVertexArrayRangeAPPLE");
    }
    public static void glVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glFlushVertexArrayRangeAPPLE$MH,"glFlushVertexArrayRangeAPPLE");
    }
    public static void glFlushVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glFlushVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$679.glVertexArrayParameteriAPPLE$MH,"glVertexArrayParameteriAPPLE");
    }
    public static void glVertexArrayParameteriAPPLE ( int pname,  int param) {
        var mh$ = glVertexArrayParameteriAPPLE$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$681.glEnableVertexAttribAPPLE$MH,"glEnableVertexAttribAPPLE");
    }
    public static void glEnableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glEnableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glDisableVertexAttribAPPLE$MH,"glDisableVertexAttribAPPLE");
    }
    public static void glDisableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glDisableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexAttribEnabledAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glIsVertexAttribEnabledAPPLE$MH,"glIsVertexAttribEnabledAPPLE");
    }
    public static byte glIsVertexAttribEnabledAPPLE ( int index,  int pname) {
        var mh$ = glIsVertexAttribEnabledAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glMapVertexAttrib1dAPPLE$MH,"glMapVertexAttrib1dAPPLE");
    }
    public static void glMapVertexAttrib1dAPPLE ( int index,  int size,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glMapVertexAttrib1fAPPLE$MH,"glMapVertexAttrib1fAPPLE");
    }
    public static void glMapVertexAttrib1fAPPLE ( int index,  int size,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glMapVertexAttrib2dAPPLE$MH,"glMapVertexAttrib2dAPPLE");
    }
    public static void glMapVertexAttrib2dAPPLE ( int index,  int size,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$682.glMapVertexAttrib2fAPPLE$MH,"glMapVertexAttrib2fAPPLE");
    }
    public static void glMapVertexAttrib2fAPPLE ( int index,  int size,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffersATI$MH() {
        return RuntimeHelper.requireNonNull(constants$683.glDrawBuffersATI$MH,"glDrawBuffersATI");
    }
    public static void glDrawBuffersATI ( int n,  Addressable bufs) {
        var mh$ = glDrawBuffersATI$MH();
        try {
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glElementPointerATI$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glElementPointerATI$MH,"glElementPointerATI");
    }
    public static void glElementPointerATI ( int type,  Addressable pointer) {
        var mh$ = glElementPointerATI$MH();
        try {
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementArrayATI$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glDrawElementArrayATI$MH,"glDrawElementArrayATI");
    }
    public static void glDrawElementArrayATI ( int mode,  int count) {
        var mh$ = glDrawElementArrayATI$MH();
        try {
            mh$.invokeExact(mode, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementArrayATI$MH() {
        return RuntimeHelper.requireNonNull(constants$684.glDrawRangeElementArrayATI$MH,"glDrawRangeElementArrayATI");
    }
    public static void glDrawRangeElementArrayATI ( int mode,  int start,  int end,  int count) {
        var mh$ = glDrawRangeElementArrayATI$MH();
        try {
            mh$.invokeExact(mode, start, end, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBumpParameterivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexBumpParameterivATI$MH,"glTexBumpParameterivATI");
    }
    public static void glTexBumpParameterivATI ( int pname,  Addressable param) {
        var mh$ = glTexBumpParameterivATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBumpParameterfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glTexBumpParameterfvATI$MH,"glTexBumpParameterfvATI");
    }
    public static void glTexBumpParameterfvATI ( int pname,  Addressable param) {
        var mh$ = glTexBumpParameterfvATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexBumpParameterivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glGetTexBumpParameterivATI$MH,"glGetTexBumpParameterivATI");
    }
    public static void glGetTexBumpParameterivATI ( int pname,  Addressable param) {
        var mh$ = glGetTexBumpParameterivATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexBumpParameterfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$686.glGetTexBumpParameterfvATI$MH,"glGetTexBumpParameterfvATI");
    }
    public static void glGetTexBumpParameterfvATI ( int pname,  Addressable param) {
        var mh$ = glGetTexBumpParameterfvATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFragmentShadersATI$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glGenFragmentShadersATI$MH,"glGenFragmentShadersATI");
    }
    public static int glGenFragmentShadersATI ( int range) {
        var mh$ = glGenFragmentShadersATI$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragmentShaderATI$MH() {
        return RuntimeHelper.requireNonNull(constants$691.glBindFragmentShaderATI$MH,"glBindFragmentShaderATI");
    }
    public static void glBindFragmentShaderATI ( int id) {
        var mh$ = glBindFragmentShaderATI$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFragmentShaderATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glDeleteFragmentShaderATI$MH,"glDeleteFragmentShaderATI");
    }
    public static void glDeleteFragmentShaderATI ( int id) {
        var mh$ = glDeleteFragmentShaderATI$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginFragmentShaderATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glBeginFragmentShaderATI$MH,"glBeginFragmentShaderATI");
    }
    public static void glBeginFragmentShaderATI () {
        var mh$ = glBeginFragmentShaderATI$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndFragmentShaderATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glEndFragmentShaderATI$MH,"glEndFragmentShaderATI");
    }
    public static void glEndFragmentShaderATI () {
        var mh$ = glEndFragmentShaderATI$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassTexCoordATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glPassTexCoordATI$MH,"glPassTexCoordATI");
    }
    public static void glPassTexCoordATI ( int dst,  int coord,  int swizzle) {
        var mh$ = glPassTexCoordATI$MH();
        try {
            mh$.invokeExact(dst, coord, swizzle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleMapATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glSampleMapATI$MH,"glSampleMapATI");
    }
    public static void glSampleMapATI ( int dst,  int interp,  int swizzle) {
        var mh$ = glSampleMapATI$MH();
        try {
            mh$.invokeExact(dst, interp, swizzle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorFragmentOp1ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$692.glColorFragmentOp1ATI$MH,"glColorFragmentOp1ATI");
    }
    public static void glColorFragmentOp1ATI ( int op,  int dst,  int dstMask,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod) {
        var mh$ = glColorFragmentOp1ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorFragmentOp2ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glColorFragmentOp2ATI$MH,"glColorFragmentOp2ATI");
    }
    public static void glColorFragmentOp2ATI ( int op,  int dst,  int dstMask,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod,  int arg2,  int arg2Rep,  int arg2Mod) {
        var mh$ = glColorFragmentOp2ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorFragmentOp3ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glColorFragmentOp3ATI$MH,"glColorFragmentOp3ATI");
    }
    public static void glColorFragmentOp3ATI ( int op,  int dst,  int dstMask,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod,  int arg2,  int arg2Rep,  int arg2Mod,  int arg3,  int arg3Rep,  int arg3Mod) {
        var mh$ = glColorFragmentOp3ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFragmentOp1ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glAlphaFragmentOp1ATI$MH,"glAlphaFragmentOp1ATI");
    }
    public static void glAlphaFragmentOp1ATI ( int op,  int dst,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod) {
        var mh$ = glAlphaFragmentOp1ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFragmentOp2ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glAlphaFragmentOp2ATI$MH,"glAlphaFragmentOp2ATI");
    }
    public static void glAlphaFragmentOp2ATI ( int op,  int dst,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod,  int arg2,  int arg2Rep,  int arg2Mod) {
        var mh$ = glAlphaFragmentOp2ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFragmentOp3ATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glAlphaFragmentOp3ATI$MH,"glAlphaFragmentOp3ATI");
    }
    public static void glAlphaFragmentOp3ATI ( int op,  int dst,  int dstMod,  int arg1,  int arg1Rep,  int arg1Mod,  int arg2,  int arg2Rep,  int arg2Mod,  int arg3,  int arg3Rep,  int arg3Mod) {
        var mh$ = glAlphaFragmentOp3ATI$MH();
        try {
            mh$.invokeExact(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetFragmentShaderConstantATI$MH() {
        return RuntimeHelper.requireNonNull(constants$693.glSetFragmentShaderConstantATI$MH,"glSetFragmentShaderConstantATI");
    }
    public static void glSetFragmentShaderConstantATI ( int dst,  Addressable value) {
        var mh$ = glSetFragmentShaderConstantATI$MH();
        try {
            mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glMapObjectBufferATI$MH,"glMapObjectBufferATI");
    }
    public static MemoryAddress glMapObjectBufferATI ( int buffer) {
        var mh$ = glMapObjectBufferATI$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$694.glUnmapObjectBufferATI$MH,"glUnmapObjectBufferATI");
    }
    public static void glUnmapObjectBufferATI ( int buffer) {
        var mh$ = glUnmapObjectBufferATI$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPNTrianglesiATI$MH() {
        return RuntimeHelper.requireNonNull(constants$695.glPNTrianglesiATI$MH,"glPNTrianglesiATI");
    }
    public static void glPNTrianglesiATI ( int pname,  int param) {
        var mh$ = glPNTrianglesiATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPNTrianglesfATI$MH() {
        return RuntimeHelper.requireNonNull(constants$695.glPNTrianglesfATI$MH,"glPNTrianglesfATI");
    }
    public static void glPNTrianglesfATI ( int pname,  float param) {
        var mh$ = glPNTrianglesfATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOpSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$696.glStencilOpSeparateATI$MH,"glStencilOpSeparateATI");
    }
    public static void glStencilOpSeparateATI ( int face,  int sfail,  int dpfail,  int dppass) {
        var mh$ = glStencilOpSeparateATI$MH();
        try {
            mh$.invokeExact(face, sfail, dpfail, dppass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFuncSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$696.glStencilFuncSeparateATI$MH,"glStencilFuncSeparateATI");
    }
    public static void glStencilFuncSeparateATI ( int frontfunc,  int backfunc,  int ref,  int mask) {
        var mh$ = glStencilFuncSeparateATI$MH();
        try {
            mh$.invokeExact(frontfunc, backfunc, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glNewObjectBufferATI$MH,"glNewObjectBufferATI");
    }
    public static int glNewObjectBufferATI ( int size,  Addressable pointer,  int usage) {
        var mh$ = glNewObjectBufferATI$MH();
        try {
            return (int)mh$.invokeExact(size, pointer, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glIsObjectBufferATI$MH,"glIsObjectBufferATI");
    }
    public static byte glIsObjectBufferATI ( int buffer) {
        var mh$ = glIsObjectBufferATI$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUpdateObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glUpdateObjectBufferATI$MH,"glUpdateObjectBufferATI");
    }
    public static void glUpdateObjectBufferATI ( int buffer,  int offset,  int size,  Addressable pointer,  int preserve) {
        var mh$ = glUpdateObjectBufferATI$MH();
        try {
            mh$.invokeExact(buffer, offset, size, pointer, preserve);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectBufferfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glGetObjectBufferfvATI$MH,"glGetObjectBufferfvATI");
    }
    public static void glGetObjectBufferfvATI ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetObjectBufferfvATI$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectBufferivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glGetObjectBufferivATI$MH,"glGetObjectBufferivATI");
    }
    public static void glGetObjectBufferivATI ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetObjectBufferivATI$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFreeObjectBufferATI$MH() {
        return RuntimeHelper.requireNonNull(constants$701.glFreeObjectBufferATI$MH,"glFreeObjectBufferATI");
    }
    public static void glFreeObjectBufferATI ( int buffer) {
        var mh$ = glFreeObjectBufferATI$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayObjectATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glArrayObjectATI$MH,"glArrayObjectATI");
    }
    public static void glArrayObjectATI ( int array,  int size,  int type,  int stride,  int buffer,  int offset) {
        var mh$ = glArrayObjectATI$MH();
        try {
            mh$.invokeExact(array, size, type, stride, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetArrayObjectfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glGetArrayObjectfvATI$MH,"glGetArrayObjectfvATI");
    }
    public static void glGetArrayObjectfvATI ( int array,  int pname,  Addressable params) {
        var mh$ = glGetArrayObjectfvATI$MH();
        try {
            mh$.invokeExact(array, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetArrayObjectivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glGetArrayObjectivATI$MH,"glGetArrayObjectivATI");
    }
    public static void glGetArrayObjectivATI ( int array,  int pname,  Addressable params) {
        var mh$ = glGetArrayObjectivATI$MH();
        try {
            mh$.invokeExact(array, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantArrayObjectATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glVariantArrayObjectATI$MH,"glVariantArrayObjectATI");
    }
    public static void glVariantArrayObjectATI ( int id,  int type,  int stride,  int buffer,  int offset) {
        var mh$ = glVariantArrayObjectATI$MH();
        try {
            mh$.invokeExact(id, type, stride, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantArrayObjectfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glGetVariantArrayObjectfvATI$MH,"glGetVariantArrayObjectfvATI");
    }
    public static void glGetVariantArrayObjectfvATI ( int id,  int pname,  Addressable params) {
        var mh$ = glGetVariantArrayObjectfvATI$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantArrayObjectivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$702.glGetVariantArrayObjectivATI$MH,"glGetVariantArrayObjectivATI");
    }
    public static void glGetVariantArrayObjectivATI ( int id,  int pname,  Addressable params) {
        var mh$ = glGetVariantArrayObjectivATI$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribArrayObjectATI$MH() {
        return RuntimeHelper.requireNonNull(constants$704.glVertexAttribArrayObjectATI$MH,"glVertexAttribArrayObjectATI");
    }
    public static void glVertexAttribArrayObjectATI ( int index,  int size,  int type,  byte normalized,  int stride,  int buffer,  int offset) {
        var mh$ = glVertexAttribArrayObjectATI$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribArrayObjectfvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$704.glGetVertexAttribArrayObjectfvATI$MH,"glGetVertexAttribArrayObjectfvATI");
    }
    public static void glGetVertexAttribArrayObjectfvATI ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribArrayObjectfvATI$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribArrayObjectivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$704.glGetVertexAttribArrayObjectivATI$MH,"glGetVertexAttribArrayObjectivATI");
    }
    public static void glGetVertexAttribArrayObjectivATI ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribArrayObjectivATI$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1sATI$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glVertexStream1sATI$MH,"glVertexStream1sATI");
    }
    public static void glVertexStream1sATI ( int stream,  short x) {
        var mh$ = glVertexStream1sATI$MH();
        try {
            mh$.invokeExact(stream, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1svATI$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glVertexStream1svATI$MH,"glVertexStream1svATI");
    }
    public static void glVertexStream1svATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream1svATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1iATI$MH() {
        return RuntimeHelper.requireNonNull(constants$719.glVertexStream1iATI$MH,"glVertexStream1iATI");
    }
    public static void glVertexStream1iATI ( int stream,  int x) {
        var mh$ = glVertexStream1iATI$MH();
        try {
            mh$.invokeExact(stream, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1ivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream1ivATI$MH,"glVertexStream1ivATI");
    }
    public static void glVertexStream1ivATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream1ivATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1fATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream1fATI$MH,"glVertexStream1fATI");
    }
    public static void glVertexStream1fATI ( int stream,  float x) {
        var mh$ = glVertexStream1fATI$MH();
        try {
            mh$.invokeExact(stream, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1fvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream1fvATI$MH,"glVertexStream1fvATI");
    }
    public static void glVertexStream1fvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream1fvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1dATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream1dATI$MH,"glVertexStream1dATI");
    }
    public static void glVertexStream1dATI ( int stream,  double x) {
        var mh$ = glVertexStream1dATI$MH();
        try {
            mh$.invokeExact(stream, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream1dvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream1dvATI$MH,"glVertexStream1dvATI");
    }
    public static void glVertexStream1dvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream1dvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2sATI$MH() {
        return RuntimeHelper.requireNonNull(constants$720.glVertexStream2sATI$MH,"glVertexStream2sATI");
    }
    public static void glVertexStream2sATI ( int stream,  short x,  short y) {
        var mh$ = glVertexStream2sATI$MH();
        try {
            mh$.invokeExact(stream, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2svATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2svATI$MH,"glVertexStream2svATI");
    }
    public static void glVertexStream2svATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream2svATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2iATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2iATI$MH,"glVertexStream2iATI");
    }
    public static void glVertexStream2iATI ( int stream,  int x,  int y) {
        var mh$ = glVertexStream2iATI$MH();
        try {
            mh$.invokeExact(stream, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2ivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2ivATI$MH,"glVertexStream2ivATI");
    }
    public static void glVertexStream2ivATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream2ivATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2fATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2fATI$MH,"glVertexStream2fATI");
    }
    public static void glVertexStream2fATI ( int stream,  float x,  float y) {
        var mh$ = glVertexStream2fATI$MH();
        try {
            mh$.invokeExact(stream, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2fvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2fvATI$MH,"glVertexStream2fvATI");
    }
    public static void glVertexStream2fvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream2fvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2dATI$MH() {
        return RuntimeHelper.requireNonNull(constants$721.glVertexStream2dATI$MH,"glVertexStream2dATI");
    }
    public static void glVertexStream2dATI ( int stream,  double x,  double y) {
        var mh$ = glVertexStream2dATI$MH();
        try {
            mh$.invokeExact(stream, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream2dvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream2dvATI$MH,"glVertexStream2dvATI");
    }
    public static void glVertexStream2dvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream2dvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3sATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream3sATI$MH,"glVertexStream3sATI");
    }
    public static void glVertexStream3sATI ( int stream,  short x,  short y,  short z) {
        var mh$ = glVertexStream3sATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3svATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream3svATI$MH,"glVertexStream3svATI");
    }
    public static void glVertexStream3svATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream3svATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3iATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream3iATI$MH,"glVertexStream3iATI");
    }
    public static void glVertexStream3iATI ( int stream,  int x,  int y,  int z) {
        var mh$ = glVertexStream3iATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3ivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream3ivATI$MH,"glVertexStream3ivATI");
    }
    public static void glVertexStream3ivATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream3ivATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3fATI$MH() {
        return RuntimeHelper.requireNonNull(constants$722.glVertexStream3fATI$MH,"glVertexStream3fATI");
    }
    public static void glVertexStream3fATI ( int stream,  float x,  float y,  float z) {
        var mh$ = glVertexStream3fATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3fvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream3fvATI$MH,"glVertexStream3fvATI");
    }
    public static void glVertexStream3fvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream3fvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3dATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream3dATI$MH,"glVertexStream3dATI");
    }
    public static void glVertexStream3dATI ( int stream,  double x,  double y,  double z) {
        var mh$ = glVertexStream3dATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream3dvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream3dvATI$MH,"glVertexStream3dvATI");
    }
    public static void glVertexStream3dvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream3dvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4sATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream4sATI$MH,"glVertexStream4sATI");
    }
    public static void glVertexStream4sATI ( int stream,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexStream4sATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4svATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream4svATI$MH,"glVertexStream4svATI");
    }
    public static void glVertexStream4svATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream4svATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4iATI$MH() {
        return RuntimeHelper.requireNonNull(constants$723.glVertexStream4iATI$MH,"glVertexStream4iATI");
    }
    public static void glVertexStream4iATI ( int stream,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexStream4iATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4ivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glVertexStream4ivATI$MH,"glVertexStream4ivATI");
    }
    public static void glVertexStream4ivATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream4ivATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4fATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glVertexStream4fATI$MH,"glVertexStream4fATI");
    }
    public static void glVertexStream4fATI ( int stream,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexStream4fATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4fvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glVertexStream4fvATI$MH,"glVertexStream4fvATI");
    }
    public static void glVertexStream4fvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream4fvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4dATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glVertexStream4dATI$MH,"glVertexStream4dATI");
    }
    public static void glVertexStream4dATI ( int stream,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexStream4dATI$MH();
        try {
            mh$.invokeExact(stream, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexStream4dvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glVertexStream4dvATI$MH,"glVertexStream4dvATI");
    }
    public static void glVertexStream4dvATI ( int stream,  Addressable coords) {
        var mh$ = glVertexStream4dvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3bATI$MH() {
        return RuntimeHelper.requireNonNull(constants$724.glNormalStream3bATI$MH,"glNormalStream3bATI");
    }
    public static void glNormalStream3bATI ( int stream,  byte nx,  byte ny,  byte nz) {
        var mh$ = glNormalStream3bATI$MH();
        try {
            mh$.invokeExact(stream, nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3bvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3bvATI$MH,"glNormalStream3bvATI");
    }
    public static void glNormalStream3bvATI ( int stream,  Addressable coords) {
        var mh$ = glNormalStream3bvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3sATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3sATI$MH,"glNormalStream3sATI");
    }
    public static void glNormalStream3sATI ( int stream,  short nx,  short ny,  short nz) {
        var mh$ = glNormalStream3sATI$MH();
        try {
            mh$.invokeExact(stream, nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3svATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3svATI$MH,"glNormalStream3svATI");
    }
    public static void glNormalStream3svATI ( int stream,  Addressable coords) {
        var mh$ = glNormalStream3svATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3iATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3iATI$MH,"glNormalStream3iATI");
    }
    public static void glNormalStream3iATI ( int stream,  int nx,  int ny,  int nz) {
        var mh$ = glNormalStream3iATI$MH();
        try {
            mh$.invokeExact(stream, nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3ivATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3ivATI$MH,"glNormalStream3ivATI");
    }
    public static void glNormalStream3ivATI ( int stream,  Addressable coords) {
        var mh$ = glNormalStream3ivATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3fATI$MH() {
        return RuntimeHelper.requireNonNull(constants$725.glNormalStream3fATI$MH,"glNormalStream3fATI");
    }
    public static void glNormalStream3fATI ( int stream,  float nx,  float ny,  float nz) {
        var mh$ = glNormalStream3fATI$MH();
        try {
            mh$.invokeExact(stream, nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3fvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glNormalStream3fvATI$MH,"glNormalStream3fvATI");
    }
    public static void glNormalStream3fvATI ( int stream,  Addressable coords) {
        var mh$ = glNormalStream3fvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3dATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glNormalStream3dATI$MH,"glNormalStream3dATI");
    }
    public static void glNormalStream3dATI ( int stream,  double nx,  double ny,  double nz) {
        var mh$ = glNormalStream3dATI$MH();
        try {
            mh$.invokeExact(stream, nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalStream3dvATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glNormalStream3dvATI$MH,"glNormalStream3dvATI");
    }
    public static void glNormalStream3dvATI ( int stream,  Addressable coords) {
        var mh$ = glNormalStream3dvATI$MH();
        try {
            mh$.invokeExact(stream, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveVertexStreamATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glClientActiveVertexStreamATI$MH,"glClientActiveVertexStreamATI");
    }
    public static void glClientActiveVertexStreamATI ( int stream) {
        var mh$ = glClientActiveVertexStreamATI$MH();
        try {
            mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBlendEnviATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glVertexBlendEnviATI$MH,"glVertexBlendEnviATI");
    }
    public static void glVertexBlendEnviATI ( int pname,  int param) {
        var mh$ = glVertexBlendEnviATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBlendEnvfATI$MH() {
        return RuntimeHelper.requireNonNull(constants$726.glVertexBlendEnvfATI$MH,"glVertexBlendEnvfATI");
    }
    public static void glVertexBlendEnvfATI ( int pname,  float param) {
        var mh$ = glVertexBlendEnvfATI$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GLeglImageOES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glEGLImageTargetTexStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$727.glEGLImageTargetTexStorageEXT$MH,"glEGLImageTargetTexStorageEXT");
    }
    public static void glEGLImageTargetTexStorageEXT ( int target,  Addressable image,  Addressable attrib_list) {
        var mh$ = glEGLImageTargetTexStorageEXT$MH();
        try {
            mh$.invokeExact(target, image, attrib_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEGLImageTargetTextureStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$727.glEGLImageTargetTextureStorageEXT$MH,"glEGLImageTargetTextureStorageEXT");
    }
    public static void glEGLImageTargetTextureStorageEXT ( int texture,  Addressable image,  Addressable attrib_list) {
        var mh$ = glEGLImageTargetTextureStorageEXT$MH();
        try {
            mh$.invokeExact(texture, image, attrib_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glUniformBufferEXT$MH,"glUniformBufferEXT");
    }
    public static void glUniformBufferEXT ( int program,  int location,  int buffer) {
        var mh$ = glUniformBufferEXT$MH();
        try {
            mh$.invokeExact(program, location, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformBufferSizeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glGetUniformBufferSizeEXT$MH,"glGetUniformBufferSizeEXT");
    }
    public static int glGetUniformBufferSizeEXT ( int program,  int location) {
        var mh$ = glGetUniformBufferSizeEXT$MH();
        try {
            return (int)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glGetUniformOffsetEXT$MH,"glGetUniformOffsetEXT");
    }
    public static long glGetUniformOffsetEXT ( int program,  int location) {
        var mh$ = glGetUniformOffsetEXT$MH();
        try {
            return (long)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$729.glBlendColorEXT$MH,"glBlendColorEXT");
    }
    public static void glBlendColorEXT ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColorEXT$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$730.glBlendEquationSeparateEXT$MH,"glBlendEquationSeparateEXT");
    }
    public static void glBlendEquationSeparateEXT ( int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparateEXT$MH();
        try {
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$730.glBlendFuncSeparateEXT$MH,"glBlendFuncSeparateEXT");
    }
    public static void glBlendFuncSeparateEXT ( int sfactorRGB,  int dfactorRGB,  int sfactorAlpha,  int dfactorAlpha) {
        var mh$ = glBlendFuncSeparateEXT$MH();
        try {
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$731.glBlendEquationEXT$MH,"glBlendEquationEXT");
    }
    public static void glBlendEquationEXT ( int mode) {
        var mh$ = glBlendEquationEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$732.glColorSubTableEXT$MH,"glColorSubTableEXT");
    }
    public static void glColorSubTableEXT ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = glColorSubTableEXT$MH();
        try {
            mh$.invokeExact(target, start, count, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$732.glCopyColorSubTableEXT$MH,"glCopyColorSubTableEXT");
    }
    public static void glCopyColorSubTableEXT ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = glCopyColorSubTableEXT$MH();
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLockArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$733.glLockArraysEXT$MH,"glLockArraysEXT");
    }
    public static void glLockArraysEXT ( int first,  int count) {
        var mh$ = glLockArraysEXT$MH();
        try {
            mh$.invokeExact(first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnlockArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$733.glUnlockArraysEXT$MH,"glUnlockArraysEXT");
    }
    public static void glUnlockArraysEXT () {
        var mh$ = glUnlockArraysEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$737.glConvolutionFilter1DEXT$MH,"glConvolutionFilter1DEXT");
    }
    public static void glConvolutionFilter1DEXT ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter1DEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glConvolutionFilter2DEXT$MH,"glConvolutionFilter2DEXT");
    }
    public static void glConvolutionFilter2DEXT ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter2DEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glConvolutionParameterfEXT$MH,"glConvolutionParameterfEXT");
    }
    public static void glConvolutionParameterfEXT ( int target,  int pname,  float params) {
        var mh$ = glConvolutionParameterfEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glConvolutionParameterfvEXT$MH,"glConvolutionParameterfvEXT");
    }
    public static void glConvolutionParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glConvolutionParameteriEXT$MH,"glConvolutionParameteriEXT");
    }
    public static void glConvolutionParameteriEXT ( int target,  int pname,  int params) {
        var mh$ = glConvolutionParameteriEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glConvolutionParameterivEXT$MH,"glConvolutionParameterivEXT");
    }
    public static void glConvolutionParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$738.glCopyConvolutionFilter1DEXT$MH,"glCopyConvolutionFilter1DEXT");
    }
    public static void glCopyConvolutionFilter1DEXT ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyConvolutionFilter1DEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glCopyConvolutionFilter2DEXT$MH,"glCopyConvolutionFilter2DEXT");
    }
    public static void glCopyConvolutionFilter2DEXT ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyConvolutionFilter2DEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glGetConvolutionFilterEXT$MH,"glGetConvolutionFilterEXT");
    }
    public static void glGetConvolutionFilterEXT ( int target,  int format,  int type,  Addressable image) {
        var mh$ = glGetConvolutionFilterEXT$MH();
        try {
            mh$.invokeExact(target, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glGetConvolutionParameterfvEXT$MH,"glGetConvolutionParameterfvEXT");
    }
    public static void glGetConvolutionParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glGetConvolutionParameterivEXT$MH,"glGetConvolutionParameterivEXT");
    }
    public static void glGetConvolutionParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glGetSeparableFilterEXT$MH,"glGetSeparableFilterEXT");
    }
    public static void glGetSeparableFilterEXT ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = glGetSeparableFilterEXT$MH();
        try {
            mh$.invokeExact(target, format, type, row, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSeparableFilter2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$739.glSeparableFilter2DEXT$MH,"glSeparableFilter2DEXT");
    }
    public static void glSeparableFilter2DEXT ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable row,  Addressable column) {
        var mh$ = glSeparableFilter2DEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, row, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3bEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$747.glTangent3bEXT$MH,"glTangent3bEXT");
    }
    public static void glTangent3bEXT ( byte tx,  byte ty,  byte tz) {
        var mh$ = glTangent3bEXT$MH();
        try {
            mh$.invokeExact(tx, ty, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$747.glTangent3bvEXT$MH,"glTangent3bvEXT");
    }
    public static void glTangent3bvEXT ( Addressable v) {
        var mh$ = glTangent3bvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$747.glTangent3dEXT$MH,"glTangent3dEXT");
    }
    public static void glTangent3dEXT ( double tx,  double ty,  double tz) {
        var mh$ = glTangent3dEXT$MH();
        try {
            mh$.invokeExact(tx, ty, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$747.glTangent3dvEXT$MH,"glTangent3dvEXT");
    }
    public static void glTangent3dvEXT ( Addressable v) {
        var mh$ = glTangent3dvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3fEXT$MH,"glTangent3fEXT");
    }
    public static void glTangent3fEXT ( float tx,  float ty,  float tz) {
        var mh$ = glTangent3fEXT$MH();
        try {
            mh$.invokeExact(tx, ty, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3fvEXT$MH,"glTangent3fvEXT");
    }
    public static void glTangent3fvEXT ( Addressable v) {
        var mh$ = glTangent3fvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3iEXT$MH,"glTangent3iEXT");
    }
    public static void glTangent3iEXT ( int tx,  int ty,  int tz) {
        var mh$ = glTangent3iEXT$MH();
        try {
            mh$.invokeExact(tx, ty, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3ivEXT$MH,"glTangent3ivEXT");
    }
    public static void glTangent3ivEXT ( Addressable v) {
        var mh$ = glTangent3ivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3sEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3sEXT$MH,"glTangent3sEXT");
    }
    public static void glTangent3sEXT ( short tx,  short ty,  short tz) {
        var mh$ = glTangent3sEXT$MH();
        try {
            mh$.invokeExact(tx, ty, tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangent3svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$748.glTangent3svEXT$MH,"glTangent3svEXT");
    }
    public static void glTangent3svEXT ( Addressable v) {
        var mh$ = glTangent3svEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3bEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3bEXT$MH,"glBinormal3bEXT");
    }
    public static void glBinormal3bEXT ( byte bx,  byte by,  byte bz) {
        var mh$ = glBinormal3bEXT$MH();
        try {
            mh$.invokeExact(bx, by, bz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3bvEXT$MH,"glBinormal3bvEXT");
    }
    public static void glBinormal3bvEXT ( Addressable v) {
        var mh$ = glBinormal3bvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3dEXT$MH,"glBinormal3dEXT");
    }
    public static void glBinormal3dEXT ( double bx,  double by,  double bz) {
        var mh$ = glBinormal3dEXT$MH();
        try {
            mh$.invokeExact(bx, by, bz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3dvEXT$MH,"glBinormal3dvEXT");
    }
    public static void glBinormal3dvEXT ( Addressable v) {
        var mh$ = glBinormal3dvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3fEXT$MH,"glBinormal3fEXT");
    }
    public static void glBinormal3fEXT ( float bx,  float by,  float bz) {
        var mh$ = glBinormal3fEXT$MH();
        try {
            mh$.invokeExact(bx, by, bz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$749.glBinormal3fvEXT$MH,"glBinormal3fvEXT");
    }
    public static void glBinormal3fvEXT ( Addressable v) {
        var mh$ = glBinormal3fvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glBinormal3iEXT$MH,"glBinormal3iEXT");
    }
    public static void glBinormal3iEXT ( int bx,  int by,  int bz) {
        var mh$ = glBinormal3iEXT$MH();
        try {
            mh$.invokeExact(bx, by, bz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glBinormal3ivEXT$MH,"glBinormal3ivEXT");
    }
    public static void glBinormal3ivEXT ( Addressable v) {
        var mh$ = glBinormal3ivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3sEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glBinormal3sEXT$MH,"glBinormal3sEXT");
    }
    public static void glBinormal3sEXT ( short bx,  short by,  short bz) {
        var mh$ = glBinormal3sEXT$MH();
        try {
            mh$.invokeExact(bx, by, bz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormal3svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glBinormal3svEXT$MH,"glBinormal3svEXT");
    }
    public static void glBinormal3svEXT ( Addressable v) {
        var mh$ = glBinormal3svEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTangentPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glTangentPointerEXT$MH,"glTangentPointerEXT");
    }
    public static void glTangentPointerEXT ( int type,  int stride,  Addressable pointer) {
        var mh$ = glTangentPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBinormalPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$750.glBinormalPointerEXT$MH,"glBinormalPointerEXT");
    }
    public static void glBinormalPointerEXT ( int type,  int stride,  Addressable pointer) {
        var mh$ = glBinormalPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$752.glCopyTexImage1DEXT$MH,"glCopyTexImage1DEXT");
    }
    public static void glCopyTexImage1DEXT ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1DEXT$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$752.glCopyTexImage2DEXT$MH,"glCopyTexImage2DEXT");
    }
    public static void glCopyTexImage2DEXT ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2DEXT$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$753.glCopyTexSubImage1DEXT$MH,"glCopyTexSubImage1DEXT");
    }
    public static void glCopyTexSubImage1DEXT ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$753.glCopyTexSubImage2DEXT$MH,"glCopyTexSubImage2DEXT");
    }
    public static void glCopyTexSubImage2DEXT ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$753.glCopyTexSubImage3DEXT$MH,"glCopyTexSubImage3DEXT");
    }
    public static void glCopyTexSubImage3DEXT ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage3DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullParameterdvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$754.glCullParameterdvEXT$MH,"glCullParameterdvEXT");
    }
    public static void glCullParameterdvEXT ( int pname,  Addressable params) {
        var mh$ = glCullParameterdvEXT$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$754.glCullParameterfvEXT$MH,"glCullParameterfvEXT");
    }
    public static void glCullParameterfvEXT ( int pname,  Addressable params) {
        var mh$ = glCullParameterfvEXT$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLabelObjectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$755.glLabelObjectEXT$MH,"glLabelObjectEXT");
    }
    public static void glLabelObjectEXT ( int type,  int object,  int length,  Addressable label) {
        var mh$ = glLabelObjectEXT$MH();
        try {
            mh$.invokeExact(type, object, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$755.glGetObjectLabelEXT$MH,"glGetObjectLabelEXT");
    }
    public static void glGetObjectLabelEXT ( int type,  int object,  int bufSize,  Addressable length,  Addressable label) {
        var mh$ = glGetObjectLabelEXT$MH();
        try {
            mh$.invokeExact(type, object, bufSize, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInsertEventMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$756.glInsertEventMarkerEXT$MH,"glInsertEventMarkerEXT");
    }
    public static void glInsertEventMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glInsertEventMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$756.glPushGroupMarkerEXT$MH,"glPushGroupMarkerEXT");
    }
    public static void glPushGroupMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glPushGroupMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$756.glPopGroupMarkerEXT$MH,"glPopGroupMarkerEXT");
    }
    public static void glPopGroupMarkerEXT () {
        var mh$ = glPopGroupMarkerEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthBoundsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$757.glDepthBoundsEXT$MH,"glDepthBoundsEXT");
    }
    public static void glDepthBoundsEXT ( double zmin,  double zmax) {
        var mh$ = glDepthBoundsEXT$MH();
        try {
            mh$.invokeExact(zmin, zmax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoadfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$842.glMatrixLoadfEXT$MH,"glMatrixLoadfEXT");
    }
    public static void glMatrixLoadfEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixLoadfEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoaddEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$842.glMatrixLoaddEXT$MH,"glMatrixLoaddEXT");
    }
    public static void glMatrixLoaddEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixLoaddEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMultfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$842.glMatrixMultfEXT$MH,"glMatrixMultfEXT");
    }
    public static void glMatrixMultfEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixMultfEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMultdEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixMultdEXT$MH,"glMatrixMultdEXT");
    }
    public static void glMatrixMultdEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixMultdEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoadIdentityEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixLoadIdentityEXT$MH,"glMatrixLoadIdentityEXT");
    }
    public static void glMatrixLoadIdentityEXT ( int mode) {
        var mh$ = glMatrixLoadIdentityEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixRotatefEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixRotatefEXT$MH,"glMatrixRotatefEXT");
    }
    public static void glMatrixRotatefEXT ( int mode,  float angle,  float x,  float y,  float z) {
        var mh$ = glMatrixRotatefEXT$MH();
        try {
            mh$.invokeExact(mode, angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixRotatedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixRotatedEXT$MH,"glMatrixRotatedEXT");
    }
    public static void glMatrixRotatedEXT ( int mode,  double angle,  double x,  double y,  double z) {
        var mh$ = glMatrixRotatedEXT$MH();
        try {
            mh$.invokeExact(mode, angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixScalefEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixScalefEXT$MH,"glMatrixScalefEXT");
    }
    public static void glMatrixScalefEXT ( int mode,  float x,  float y,  float z) {
        var mh$ = glMatrixScalefEXT$MH();
        try {
            mh$.invokeExact(mode, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixScaledEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$843.glMatrixScaledEXT$MH,"glMatrixScaledEXT");
    }
    public static void glMatrixScaledEXT ( int mode,  double x,  double y,  double z) {
        var mh$ = glMatrixScaledEXT$MH();
        try {
            mh$.invokeExact(mode, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixTranslatefEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixTranslatefEXT$MH,"glMatrixTranslatefEXT");
    }
    public static void glMatrixTranslatefEXT ( int mode,  float x,  float y,  float z) {
        var mh$ = glMatrixTranslatefEXT$MH();
        try {
            mh$.invokeExact(mode, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixTranslatedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixTranslatedEXT$MH,"glMatrixTranslatedEXT");
    }
    public static void glMatrixTranslatedEXT ( int mode,  double x,  double y,  double z) {
        var mh$ = glMatrixTranslatedEXT$MH();
        try {
            mh$.invokeExact(mode, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixFrustumEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixFrustumEXT$MH,"glMatrixFrustumEXT");
    }
    public static void glMatrixFrustumEXT ( int mode,  double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glMatrixFrustumEXT$MH();
        try {
            mh$.invokeExact(mode, left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixOrthoEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixOrthoEXT$MH,"glMatrixOrthoEXT");
    }
    public static void glMatrixOrthoEXT ( int mode,  double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glMatrixOrthoEXT$MH();
        try {
            mh$.invokeExact(mode, left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixPopEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixPopEXT$MH,"glMatrixPopEXT");
    }
    public static void glMatrixPopEXT ( int mode) {
        var mh$ = glMatrixPopEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixPushEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$844.glMatrixPushEXT$MH,"glMatrixPushEXT");
    }
    public static void glMatrixPushEXT ( int mode) {
        var mh$ = glMatrixPushEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientAttribDefaultEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glClientAttribDefaultEXT$MH,"glClientAttribDefaultEXT");
    }
    public static void glClientAttribDefaultEXT ( int mask) {
        var mh$ = glClientAttribDefaultEXT$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttribDefaultEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glPushClientAttribDefaultEXT$MH,"glPushClientAttribDefaultEXT");
    }
    public static void glPushClientAttribDefaultEXT ( int mask) {
        var mh$ = glPushClientAttribDefaultEXT$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glTextureParameterfEXT$MH,"glTextureParameterfEXT");
    }
    public static void glTextureParameterfEXT ( int texture,  int target,  int pname,  float param) {
        var mh$ = glTextureParameterfEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glTextureParameterfvEXT$MH,"glTextureParameterfvEXT");
    }
    public static void glTextureParameterfvEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glTextureParameterfvEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glTextureParameteriEXT$MH,"glTextureParameteriEXT");
    }
    public static void glTextureParameteriEXT ( int texture,  int target,  int pname,  int param) {
        var mh$ = glTextureParameteriEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$845.glTextureParameterivEXT$MH,"glTextureParameterivEXT");
    }
    public static void glTextureParameterivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glTextureParameterivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glTextureImage1DEXT$MH,"glTextureImage1DEXT");
    }
    public static void glTextureImage1DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glTextureImage2DEXT$MH,"glTextureImage2DEXT");
    }
    public static void glTextureImage2DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glTextureSubImage1DEXT$MH,"glTextureSubImage1DEXT");
    }
    public static void glTextureSubImage1DEXT ( int texture,  int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glTextureSubImage2DEXT$MH,"glTextureSubImage2DEXT");
    }
    public static void glTextureSubImage2DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glCopyTextureImage1DEXT$MH,"glCopyTextureImage1DEXT");
    }
    public static void glCopyTextureImage1DEXT ( int texture,  int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTextureImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$846.glCopyTextureImage2DEXT$MH,"glCopyTextureImage2DEXT");
    }
    public static void glCopyTextureImage2DEXT ( int texture,  int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTextureImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glCopyTextureSubImage1DEXT$MH,"glCopyTextureSubImage1DEXT");
    }
    public static void glCopyTextureSubImage1DEXT ( int texture,  int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTextureSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glCopyTextureSubImage2DEXT$MH,"glCopyTextureSubImage2DEXT");
    }
    public static void glCopyTextureSubImage2DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTextureSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureImageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glGetTextureImageEXT$MH,"glGetTextureImageEXT");
    }
    public static void glGetTextureImageEXT ( int texture,  int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTextureImageEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glGetTextureParameterfvEXT$MH,"glGetTextureParameterfvEXT");
    }
    public static void glGetTextureParameterfvEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterfvEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glGetTextureParameterivEXT$MH,"glGetTextureParameterivEXT");
    }
    public static void glGetTextureParameterivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureLevelParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$847.glGetTextureLevelParameterfvEXT$MH,"glGetTextureLevelParameterfvEXT");
    }
    public static void glGetTextureLevelParameterfvEXT ( int texture,  int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTextureLevelParameterfvEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureLevelParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glGetTextureLevelParameterivEXT$MH,"glGetTextureLevelParameterivEXT");
    }
    public static void glGetTextureLevelParameterivEXT ( int texture,  int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTextureLevelParameterivEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glTextureImage3DEXT$MH,"glTextureImage3DEXT");
    }
    public static void glTextureImage3DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureImage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glTextureSubImage3DEXT$MH,"glTextureSubImage3DEXT");
    }
    public static void glTextureSubImage3DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glTextureSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTextureSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glCopyTextureSubImage3DEXT$MH,"glCopyTextureSubImage3DEXT");
    }
    public static void glCopyTextureSubImage3DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTextureSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindMultiTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glBindMultiTextureEXT$MH,"glBindMultiTextureEXT");
    }
    public static void glBindMultiTextureEXT ( int texunit,  int target,  int texture) {
        var mh$ = glBindMultiTextureEXT$MH();
        try {
            mh$.invokeExact(texunit, target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoordPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$848.glMultiTexCoordPointerEXT$MH,"glMultiTexCoordPointerEXT");
    }
    public static void glMultiTexCoordPointerEXT ( int texunit,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glMultiTexCoordPointerEXT$MH();
        try {
            mh$.invokeExact(texunit, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexEnvfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexEnvfEXT$MH,"glMultiTexEnvfEXT");
    }
    public static void glMultiTexEnvfEXT ( int texunit,  int target,  int pname,  float param) {
        var mh$ = glMultiTexEnvfEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexEnvfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexEnvfvEXT$MH,"glMultiTexEnvfvEXT");
    }
    public static void glMultiTexEnvfvEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexEnvfvEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexEnviEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexEnviEXT$MH,"glMultiTexEnviEXT");
    }
    public static void glMultiTexEnviEXT ( int texunit,  int target,  int pname,  int param) {
        var mh$ = glMultiTexEnviEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexEnvivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexEnvivEXT$MH,"glMultiTexEnvivEXT");
    }
    public static void glMultiTexEnvivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexEnvivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGendEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexGendEXT$MH,"glMultiTexGendEXT");
    }
    public static void glMultiTexGendEXT ( int texunit,  int coord,  int pname,  double param) {
        var mh$ = glMultiTexGendEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGendvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$849.glMultiTexGendvEXT$MH,"glMultiTexGendvEXT");
    }
    public static void glMultiTexGendvEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glMultiTexGendvEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGenfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glMultiTexGenfEXT$MH,"glMultiTexGenfEXT");
    }
    public static void glMultiTexGenfEXT ( int texunit,  int coord,  int pname,  float param) {
        var mh$ = glMultiTexGenfEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGenfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glMultiTexGenfvEXT$MH,"glMultiTexGenfvEXT");
    }
    public static void glMultiTexGenfvEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glMultiTexGenfvEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGeniEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glMultiTexGeniEXT$MH,"glMultiTexGeniEXT");
    }
    public static void glMultiTexGeniEXT ( int texunit,  int coord,  int pname,  int param) {
        var mh$ = glMultiTexGeniEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexGenivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glMultiTexGenivEXT$MH,"glMultiTexGenivEXT");
    }
    public static void glMultiTexGenivEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glMultiTexGenivEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexEnvfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glGetMultiTexEnvfvEXT$MH,"glGetMultiTexEnvfvEXT");
    }
    public static void glGetMultiTexEnvfvEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexEnvfvEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexEnvivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$850.glGetMultiTexEnvivEXT$MH,"glGetMultiTexEnvivEXT");
    }
    public static void glGetMultiTexEnvivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexEnvivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexGendvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glGetMultiTexGendvEXT$MH,"glGetMultiTexGendvEXT");
    }
    public static void glGetMultiTexGendvEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexGendvEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexGenfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glGetMultiTexGenfvEXT$MH,"glGetMultiTexGenfvEXT");
    }
    public static void glGetMultiTexGenfvEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexGenfvEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexGenivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glGetMultiTexGenivEXT$MH,"glGetMultiTexGenivEXT");
    }
    public static void glGetMultiTexGenivEXT ( int texunit,  int coord,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexGenivEXT$MH();
        try {
            mh$.invokeExact(texunit, coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glMultiTexParameteriEXT$MH,"glMultiTexParameteriEXT");
    }
    public static void glMultiTexParameteriEXT ( int texunit,  int target,  int pname,  int param) {
        var mh$ = glMultiTexParameteriEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glMultiTexParameterivEXT$MH,"glMultiTexParameterivEXT");
    }
    public static void glMultiTexParameterivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexParameterivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameterfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$851.glMultiTexParameterfEXT$MH,"glMultiTexParameterfEXT");
    }
    public static void glMultiTexParameterfEXT ( int texunit,  int target,  int pname,  float param) {
        var mh$ = glMultiTexParameterfEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glMultiTexParameterfvEXT$MH,"glMultiTexParameterfvEXT");
    }
    public static void glMultiTexParameterfvEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexParameterfvEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glMultiTexImage1DEXT$MH,"glMultiTexImage1DEXT");
    }
    public static void glMultiTexImage1DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glMultiTexImage2DEXT$MH,"glMultiTexImage2DEXT");
    }
    public static void glMultiTexImage2DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glMultiTexSubImage1DEXT$MH,"glMultiTexSubImage1DEXT");
    }
    public static void glMultiTexSubImage1DEXT ( int texunit,  int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glMultiTexSubImage2DEXT$MH,"glMultiTexSubImage2DEXT");
    }
    public static void glMultiTexSubImage2DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyMultiTexImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$852.glCopyMultiTexImage1DEXT$MH,"glCopyMultiTexImage1DEXT");
    }
    public static void glCopyMultiTexImage1DEXT ( int texunit,  int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyMultiTexImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyMultiTexImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glCopyMultiTexImage2DEXT$MH,"glCopyMultiTexImage2DEXT");
    }
    public static void glCopyMultiTexImage2DEXT ( int texunit,  int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyMultiTexImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyMultiTexSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glCopyMultiTexSubImage1DEXT$MH,"glCopyMultiTexSubImage1DEXT");
    }
    public static void glCopyMultiTexSubImage1DEXT ( int texunit,  int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyMultiTexSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyMultiTexSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glCopyMultiTexSubImage2DEXT$MH,"glCopyMultiTexSubImage2DEXT");
    }
    public static void glCopyMultiTexSubImage2DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyMultiTexSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexImageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glGetMultiTexImageEXT$MH,"glGetMultiTexImageEXT");
    }
    public static void glGetMultiTexImageEXT ( int texunit,  int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetMultiTexImageEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glGetMultiTexParameterfvEXT$MH,"glGetMultiTexParameterfvEXT");
    }
    public static void glGetMultiTexParameterfvEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexParameterfvEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$853.glGetMultiTexParameterivEXT$MH,"glGetMultiTexParameterivEXT");
    }
    public static void glGetMultiTexParameterivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexParameterivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexLevelParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glGetMultiTexLevelParameterfvEXT$MH,"glGetMultiTexLevelParameterfvEXT");
    }
    public static void glGetMultiTexLevelParameterfvEXT ( int texunit,  int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexLevelParameterfvEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexLevelParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glGetMultiTexLevelParameterivEXT$MH,"glGetMultiTexLevelParameterivEXT");
    }
    public static void glGetMultiTexLevelParameterivEXT ( int texunit,  int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexLevelParameterivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glMultiTexImage3DEXT$MH,"glMultiTexImage3DEXT");
    }
    public static void glMultiTexImage3DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexImage3DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glMultiTexSubImage3DEXT$MH,"glMultiTexSubImage3DEXT");
    }
    public static void glMultiTexSubImage3DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glMultiTexSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyMultiTexSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glCopyMultiTexSubImage3DEXT$MH,"glCopyMultiTexSubImage3DEXT");
    }
    public static void glCopyMultiTexSubImage3DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyMultiTexSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientStateIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$854.glEnableClientStateIndexedEXT$MH,"glEnableClientStateIndexedEXT");
    }
    public static void glEnableClientStateIndexedEXT ( int array,  int index) {
        var mh$ = glEnableClientStateIndexedEXT$MH();
        try {
            mh$.invokeExact(array, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientStateIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glDisableClientStateIndexedEXT$MH,"glDisableClientStateIndexedEXT");
    }
    public static void glDisableClientStateIndexedEXT ( int array,  int index) {
        var mh$ = glDisableClientStateIndexedEXT$MH();
        try {
            mh$.invokeExact(array, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glGetFloatIndexedvEXT$MH,"glGetFloatIndexedvEXT");
    }
    public static void glGetFloatIndexedvEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetFloatIndexedvEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoubleIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glGetDoubleIndexedvEXT$MH,"glGetDoubleIndexedvEXT");
    }
    public static void glGetDoubleIndexedvEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetDoubleIndexedvEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glGetPointerIndexedvEXT$MH,"glGetPointerIndexedvEXT");
    }
    public static void glGetPointerIndexedvEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetPointerIndexedvEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glEnableIndexedEXT$MH,"glEnableIndexedEXT");
    }
    public static void glEnableIndexedEXT ( int target,  int index) {
        var mh$ = glEnableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$855.glDisableIndexedEXT$MH,"glDisableIndexedEXT");
    }
    public static void glDisableIndexedEXT ( int target,  int index) {
        var mh$ = glDisableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabledIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glIsEnabledIndexedEXT$MH,"glIsEnabledIndexedEXT");
    }
    public static byte glIsEnabledIndexedEXT ( int target,  int index) {
        var mh$ = glIsEnabledIndexedEXT$MH();
        try {
            return (byte)mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glGetIntegerIndexedvEXT$MH,"glGetIntegerIndexedvEXT");
    }
    public static void glGetIntegerIndexedvEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetIntegerIndexedvEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glGetBooleanIndexedvEXT$MH,"glGetBooleanIndexedvEXT");
    }
    public static void glGetBooleanIndexedvEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetBooleanIndexedvEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glCompressedTextureImage3DEXT$MH,"glCompressedTextureImage3DEXT");
    }
    public static void glCompressedTextureImage3DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureImage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glCompressedTextureImage2DEXT$MH,"glCompressedTextureImage2DEXT");
    }
    public static void glCompressedTextureImage2DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, height, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$856.glCompressedTextureImage1DEXT$MH,"glCompressedTextureImage1DEXT");
    }
    public static void glCompressedTextureImage1DEXT ( int texture,  int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, internalformat, width, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glCompressedTextureSubImage3DEXT$MH,"glCompressedTextureSubImage3DEXT");
    }
    public static void glCompressedTextureSubImage3DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glCompressedTextureSubImage2DEXT$MH,"glCompressedTextureSubImage2DEXT");
    }
    public static void glCompressedTextureSubImage2DEXT ( int texture,  int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTextureSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glCompressedTextureSubImage1DEXT$MH,"glCompressedTextureSubImage1DEXT");
    }
    public static void glCompressedTextureSubImage1DEXT ( int texture,  int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedTextureSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, level, xoffset, width, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTextureImageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glGetCompressedTextureImageEXT$MH,"glGetCompressedTextureImageEXT");
    }
    public static void glGetCompressedTextureImageEXT ( int texture,  int target,  int lod,  Addressable img) {
        var mh$ = glGetCompressedTextureImageEXT$MH();
        try {
            mh$.invokeExact(texture, target, lod, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glCompressedMultiTexImage3DEXT$MH,"glCompressedMultiTexImage3DEXT");
    }
    public static void glCompressedMultiTexImage3DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexImage3DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$857.glCompressedMultiTexImage2DEXT$MH,"glCompressedMultiTexImage2DEXT");
    }
    public static void glCompressedMultiTexImage2DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glCompressedMultiTexImage1DEXT$MH,"glCompressedMultiTexImage1DEXT");
    }
    public static void glCompressedMultiTexImage1DEXT ( int texunit,  int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, internalformat, width, border, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glCompressedMultiTexSubImage3DEXT$MH,"glCompressedMultiTexSubImage3DEXT");
    }
    public static void glCompressedMultiTexSubImage3DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexSubImage3DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glCompressedMultiTexSubImage2DEXT$MH,"glCompressedMultiTexSubImage2DEXT");
    }
    public static void glCompressedMultiTexSubImage2DEXT ( int texunit,  int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexSubImage2DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedMultiTexSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glCompressedMultiTexSubImage1DEXT$MH,"glCompressedMultiTexSubImage1DEXT");
    }
    public static void glCompressedMultiTexSubImage1DEXT ( int texunit,  int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable bits) {
        var mh$ = glCompressedMultiTexSubImage1DEXT$MH();
        try {
            mh$.invokeExact(texunit, target, level, xoffset, width, format, imageSize, bits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedMultiTexImageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glGetCompressedMultiTexImageEXT$MH,"glGetCompressedMultiTexImageEXT");
    }
    public static void glGetCompressedMultiTexImageEXT ( int texunit,  int target,  int lod,  Addressable img) {
        var mh$ = glGetCompressedMultiTexImageEXT$MH();
        try {
            mh$.invokeExact(texunit, target, lod, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoadTransposefEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$858.glMatrixLoadTransposefEXT$MH,"glMatrixLoadTransposefEXT");
    }
    public static void glMatrixLoadTransposefEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixLoadTransposefEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoadTransposedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glMatrixLoadTransposedEXT$MH,"glMatrixLoadTransposedEXT");
    }
    public static void glMatrixLoadTransposedEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixLoadTransposedEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMultTransposefEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glMatrixMultTransposefEXT$MH,"glMatrixMultTransposefEXT");
    }
    public static void glMatrixMultTransposefEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixMultTransposefEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMultTransposedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glMatrixMultTransposedEXT$MH,"glMatrixMultTransposedEXT");
    }
    public static void glMatrixMultTransposedEXT ( int mode,  Addressable m) {
        var mh$ = glMatrixMultTransposedEXT$MH();
        try {
            mh$.invokeExact(mode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glNamedBufferDataEXT$MH,"glNamedBufferDataEXT");
    }
    public static void glNamedBufferDataEXT ( int buffer,  long size,  Addressable data,  int usage) {
        var mh$ = glNamedBufferDataEXT$MH();
        try {
            mh$.invokeExact(buffer, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferSubDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glNamedBufferSubDataEXT$MH,"glNamedBufferSubDataEXT");
    }
    public static void glNamedBufferSubDataEXT ( int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glNamedBufferSubDataEXT$MH();
        try {
            mh$.invokeExact(buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapNamedBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$859.glMapNamedBufferEXT$MH,"glMapNamedBufferEXT");
    }
    public static MemoryAddress glMapNamedBufferEXT ( int buffer,  int access) {
        var mh$ = glMapNamedBufferEXT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapNamedBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glUnmapNamedBufferEXT$MH,"glUnmapNamedBufferEXT");
    }
    public static byte glUnmapNamedBufferEXT ( int buffer) {
        var mh$ = glUnmapNamedBufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glGetNamedBufferParameterivEXT$MH,"glGetNamedBufferParameterivEXT");
    }
    public static void glGetNamedBufferParameterivEXT ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferParameterivEXT$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferPointervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glGetNamedBufferPointervEXT$MH,"glGetNamedBufferPointervEXT");
    }
    public static void glGetNamedBufferPointervEXT ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferPointervEXT$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferSubDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glGetNamedBufferSubDataEXT$MH,"glGetNamedBufferSubDataEXT");
    }
    public static void glGetNamedBufferSubDataEXT ( int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glGetNamedBufferSubDataEXT$MH();
        try {
            mh$.invokeExact(buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glProgramUniform1fEXT$MH,"glProgramUniform1fEXT");
    }
    public static void glProgramUniform1fEXT ( int program,  int location,  float v0) {
        var mh$ = glProgramUniform1fEXT$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$860.glProgramUniform2fEXT$MH,"glProgramUniform2fEXT");
    }
    public static void glProgramUniform2fEXT ( int program,  int location,  float v0,  float v1) {
        var mh$ = glProgramUniform2fEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform3fEXT$MH,"glProgramUniform3fEXT");
    }
    public static void glProgramUniform3fEXT ( int program,  int location,  float v0,  float v1,  float v2) {
        var mh$ = glProgramUniform3fEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform4fEXT$MH,"glProgramUniform4fEXT");
    }
    public static void glProgramUniform4fEXT ( int program,  int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glProgramUniform4fEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform1iEXT$MH,"glProgramUniform1iEXT");
    }
    public static void glProgramUniform1iEXT ( int program,  int location,  int v0) {
        var mh$ = glProgramUniform1iEXT$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform2iEXT$MH,"glProgramUniform2iEXT");
    }
    public static void glProgramUniform2iEXT ( int program,  int location,  int v0,  int v1) {
        var mh$ = glProgramUniform2iEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform3iEXT$MH,"glProgramUniform3iEXT");
    }
    public static void glProgramUniform3iEXT ( int program,  int location,  int v0,  int v1,  int v2) {
        var mh$ = glProgramUniform3iEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$861.glProgramUniform4iEXT$MH,"glProgramUniform4iEXT");
    }
    public static void glProgramUniform4iEXT ( int program,  int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glProgramUniform4iEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform1fvEXT$MH,"glProgramUniform1fvEXT");
    }
    public static void glProgramUniform1fvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


