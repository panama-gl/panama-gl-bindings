// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glext_h_9 extends glext_h_8 {

    public static MethodHandle glCopyColorTableSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glCopyColorTableSGI$MH,"glCopyColorTableSGI");
    }
    public static void glCopyColorTableSGI ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyColorTableSGI$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glGetColorTableSGI$MH,"glGetColorTableSGI");
    }
    public static void glGetColorTableSGI ( int target,  int format,  int type,  Addressable table) {
        var mh$ = glGetColorTableSGI$MH();
        try {
            mh$.invokeExact(target, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfvSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glGetColorTableParameterfvSGI$MH,"glGetColorTableParameterfvSGI");
    }
    public static void glGetColorTableParameterfvSGI ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterfvSGI$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterivSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glGetColorTableParameterivSGI$MH,"glGetColorTableParameterivSGI");
    }
    public static void glGetColorTableParameterivSGI ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterivSGI$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishTextureSUNX$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.glFinishTextureSUNX$MH,"glFinishTextureSUNX");
    }
    public static void glFinishTextureSUNX () {
        var mh$ = glFinishTextureSUNX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactorbSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactorbSUN$MH,"glGlobalAlphaFactorbSUN");
    }
    public static void glGlobalAlphaFactorbSUN ( byte factor) {
        var mh$ = glGlobalAlphaFactorbSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactorsSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactorsSUN$MH,"glGlobalAlphaFactorsSUN");
    }
    public static void glGlobalAlphaFactorsSUN ( short factor) {
        var mh$ = glGlobalAlphaFactorsSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactoriSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactoriSUN$MH,"glGlobalAlphaFactoriSUN");
    }
    public static void glGlobalAlphaFactoriSUN ( int factor) {
        var mh$ = glGlobalAlphaFactoriSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactorfSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactorfSUN$MH,"glGlobalAlphaFactorfSUN");
    }
    public static void glGlobalAlphaFactorfSUN ( float factor) {
        var mh$ = glGlobalAlphaFactorfSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactordSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactordSUN$MH,"glGlobalAlphaFactordSUN");
    }
    public static void glGlobalAlphaFactordSUN ( double factor) {
        var mh$ = glGlobalAlphaFactordSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactorubSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.glGlobalAlphaFactorubSUN$MH,"glGlobalAlphaFactorubSUN");
    }
    public static void glGlobalAlphaFactorubSUN ( byte factor) {
        var mh$ = glGlobalAlphaFactorubSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactorusSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glGlobalAlphaFactorusSUN$MH,"glGlobalAlphaFactorusSUN");
    }
    public static void glGlobalAlphaFactorusSUN ( short factor) {
        var mh$ = glGlobalAlphaFactorusSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGlobalAlphaFactoruiSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glGlobalAlphaFactoruiSUN$MH,"glGlobalAlphaFactoruiSUN");
    }
    public static void glGlobalAlphaFactoruiSUN ( int factor) {
        var mh$ = glGlobalAlphaFactoruiSUN$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawMeshArraysSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.glDrawMeshArraysSUN$MH,"glDrawMeshArraysSUN");
    }
    public static void glDrawMeshArraysSUN ( int mode,  int first,  int count,  int width) {
        var mh$ = glDrawMeshArraysSUN$MH();
        try {
            mh$.invokeExact(mode, first, count, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glReplacementCodeuiSUN$MH,"glReplacementCodeuiSUN");
    }
    public static void glReplacementCodeuiSUN ( int code) {
        var mh$ = glReplacementCodeuiSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeusSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glReplacementCodeusSUN$MH,"glReplacementCodeusSUN");
    }
    public static void glReplacementCodeusSUN ( short code) {
        var mh$ = glReplacementCodeusSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeubSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glReplacementCodeubSUN$MH,"glReplacementCodeubSUN");
    }
    public static void glReplacementCodeubSUN ( byte code) {
        var mh$ = glReplacementCodeubSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuivSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glReplacementCodeuivSUN$MH,"glReplacementCodeuivSUN");
    }
    public static void glReplacementCodeuivSUN ( Addressable code) {
        var mh$ = glReplacementCodeuivSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeusvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.glReplacementCodeusvSUN$MH,"glReplacementCodeusvSUN");
    }
    public static void glReplacementCodeusvSUN ( Addressable code) {
        var mh$ = glReplacementCodeusvSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeubvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glReplacementCodeubvSUN$MH,"glReplacementCodeubvSUN");
    }
    public static void glReplacementCodeubvSUN ( Addressable code) {
        var mh$ = glReplacementCodeubvSUN$MH();
        try {
            mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodePointerSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.glReplacementCodePointerSUN$MH,"glReplacementCodePointerSUN");
    }
    public static void glReplacementCodePointerSUN ( int type,  int stride,  Addressable pointer) {
        var mh$ = glReplacementCodePointerSUN$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubVertex2fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glColor4ubVertex2fSUN$MH,"glColor4ubVertex2fSUN");
    }
    public static void glColor4ubVertex2fSUN ( byte r,  byte g,  byte b,  byte a,  float x,  float y) {
        var mh$ = glColor4ubVertex2fSUN$MH();
        try {
            mh$.invokeExact(r, g, b, a, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubVertex2fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.glColor4ubVertex2fvSUN$MH,"glColor4ubVertex2fvSUN");
    }
    public static void glColor4ubVertex2fvSUN ( Addressable c,  Addressable v) {
        var mh$ = glColor4ubVertex2fvSUN$MH();
        try {
            mh$.invokeExact(c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glColor4ubVertex3fSUN$MH,"glColor4ubVertex3fSUN");
    }
    public static void glColor4ubVertex3fSUN ( byte r,  byte g,  byte b,  byte a,  float x,  float y,  float z) {
        var mh$ = glColor4ubVertex3fSUN$MH();
        try {
            mh$.invokeExact(r, g, b, a, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glColor4ubVertex3fvSUN$MH,"glColor4ubVertex3fvSUN");
    }
    public static void glColor4ubVertex3fvSUN ( Addressable c,  Addressable v) {
        var mh$ = glColor4ubVertex3fvSUN$MH();
        try {
            mh$.invokeExact(c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glColor3fVertex3fSUN$MH,"glColor3fVertex3fSUN");
    }
    public static void glColor3fVertex3fSUN ( float r,  float g,  float b,  float x,  float y,  float z) {
        var mh$ = glColor3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(r, g, b, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glColor3fVertex3fvSUN$MH,"glColor3fVertex3fvSUN");
    }
    public static void glColor3fVertex3fvSUN ( Addressable c,  Addressable v) {
        var mh$ = glColor3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glNormal3fVertex3fSUN$MH,"glNormal3fVertex3fSUN");
    }
    public static void glNormal3fVertex3fSUN ( float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.glNormal3fVertex3fvSUN$MH,"glNormal3fVertex3fvSUN");
    }
    public static void glNormal3fVertex3fvSUN ( Addressable n,  Addressable v) {
        var mh$ = glNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glColor4fNormal3fVertex3fSUN$MH,"glColor4fNormal3fVertex3fSUN");
    }
    public static void glColor4fNormal3fVertex3fSUN ( float r,  float g,  float b,  float a,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glColor4fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(r, g, b, a, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glColor4fNormal3fVertex3fvSUN$MH,"glColor4fNormal3fVertex3fvSUN");
    }
    public static void glColor4fNormal3fVertex3fvSUN ( Addressable c,  Addressable n,  Addressable v) {
        var mh$ = glColor4fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(c, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexCoord2fVertex3fSUN$MH,"glTexCoord2fVertex3fSUN");
    }
    public static void glTexCoord2fVertex3fSUN ( float s,  float t,  float x,  float y,  float z) {
        var mh$ = glTexCoord2fVertex3fSUN$MH();
        try {
            mh$.invokeExact(s, t, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexCoord2fVertex3fvSUN$MH,"glTexCoord2fVertex3fvSUN");
    }
    public static void glTexCoord2fVertex3fvSUN ( Addressable tc,  Addressable v) {
        var mh$ = glTexCoord2fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(tc, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fVertex4fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexCoord4fVertex4fSUN$MH,"glTexCoord4fVertex4fSUN");
    }
    public static void glTexCoord4fVertex4fSUN ( float s,  float t,  float p,  float q,  float x,  float y,  float z,  float w) {
        var mh$ = glTexCoord4fVertex4fSUN$MH();
        try {
            mh$.invokeExact(s, t, p, q, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fVertex4fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.glTexCoord4fVertex4fvSUN$MH,"glTexCoord4fVertex4fvSUN");
    }
    public static void glTexCoord4fVertex4fvSUN ( Addressable tc,  Addressable v) {
        var mh$ = glTexCoord4fVertex4fvSUN$MH();
        try {
            mh$.invokeExact(tc, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor4ubVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fColor4ubVertex3fSUN$MH,"glTexCoord2fColor4ubVertex3fSUN");
    }
    public static void glTexCoord2fColor4ubVertex3fSUN ( float s,  float t,  byte r,  byte g,  byte b,  byte a,  float x,  float y,  float z) {
        var mh$ = glTexCoord2fColor4ubVertex3fSUN$MH();
        try {
            mh$.invokeExact(s, t, r, g, b, a, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor4ubVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fColor4ubVertex3fvSUN$MH,"glTexCoord2fColor4ubVertex3fvSUN");
    }
    public static void glTexCoord2fColor4ubVertex3fvSUN ( Addressable tc,  Addressable c,  Addressable v) {
        var mh$ = glTexCoord2fColor4ubVertex3fvSUN$MH();
        try {
            mh$.invokeExact(tc, c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fColor3fVertex3fSUN$MH,"glTexCoord2fColor3fVertex3fSUN");
    }
    public static void glTexCoord2fColor3fVertex3fSUN ( float s,  float t,  float r,  float g,  float b,  float x,  float y,  float z) {
        var mh$ = glTexCoord2fColor3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(s, t, r, g, b, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fColor3fVertex3fvSUN$MH,"glTexCoord2fColor3fVertex3fvSUN");
    }
    public static void glTexCoord2fColor3fVertex3fvSUN ( Addressable tc,  Addressable c,  Addressable v) {
        var mh$ = glTexCoord2fColor3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(tc, c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fNormal3fVertex3fSUN$MH,"glTexCoord2fNormal3fVertex3fSUN");
    }
    public static void glTexCoord2fNormal3fVertex3fSUN ( float s,  float t,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glTexCoord2fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(s, t, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.glTexCoord2fNormal3fVertex3fvSUN$MH,"glTexCoord2fNormal3fVertex3fvSUN");
    }
    public static void glTexCoord2fNormal3fVertex3fvSUN ( Addressable tc,  Addressable n,  Addressable v) {
        var mh$ = glTexCoord2fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(tc, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor4fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexCoord2fColor4fNormal3fVertex3fSUN$MH,"glTexCoord2fColor4fNormal3fVertex3fSUN");
    }
    public static void glTexCoord2fColor4fNormal3fVertex3fSUN ( float s,  float t,  float r,  float g,  float b,  float a,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glTexCoord2fColor4fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fColor4fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexCoord2fColor4fNormal3fVertex3fvSUN$MH,"glTexCoord2fColor4fNormal3fVertex3fvSUN");
    }
    public static void glTexCoord2fColor4fNormal3fVertex3fvSUN ( Addressable tc,  Addressable c,  Addressable n,  Addressable v) {
        var mh$ = glTexCoord2fColor4fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(tc, c, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fColor4fNormal3fVertex4fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexCoord4fColor4fNormal3fVertex4fSUN$MH,"glTexCoord4fColor4fNormal3fVertex4fSUN");
    }
    public static void glTexCoord4fColor4fNormal3fVertex4fSUN ( float s,  float t,  float p,  float q,  float r,  float g,  float b,  float a,  float nx,  float ny,  float nz,  float x,  float y,  float z,  float w) {
        var mh$ = glTexCoord4fColor4fNormal3fVertex4fSUN$MH();
        try {
            mh$.invokeExact(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fColor4fNormal3fVertex4fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glTexCoord4fColor4fNormal3fVertex4fvSUN$MH,"glTexCoord4fColor4fNormal3fVertex4fvSUN");
    }
    public static void glTexCoord4fColor4fNormal3fVertex4fvSUN ( Addressable tc,  Addressable c,  Addressable n,  Addressable v) {
        var mh$ = glTexCoord4fColor4fNormal3fVertex4fvSUN$MH();
        try {
            mh$.invokeExact(tc, c, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glReplacementCodeuiVertex3fSUN$MH,"glReplacementCodeuiVertex3fSUN");
    }
    public static void glReplacementCodeuiVertex3fSUN ( int rc,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.glReplacementCodeuiVertex3fvSUN$MH,"glReplacementCodeuiVertex3fvSUN");
    }
    public static void glReplacementCodeuiVertex3fvSUN ( Addressable rc,  Addressable v) {
        var mh$ = glReplacementCodeuiVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor4ubVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiColor4ubVertex3fSUN$MH,"glReplacementCodeuiColor4ubVertex3fSUN");
    }
    public static void glReplacementCodeuiColor4ubVertex3fSUN ( int rc,  byte r,  byte g,  byte b,  byte a,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiColor4ubVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, r, g, b, a, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor4ubVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiColor4ubVertex3fvSUN$MH,"glReplacementCodeuiColor4ubVertex3fvSUN");
    }
    public static void glReplacementCodeuiColor4ubVertex3fvSUN ( Addressable rc,  Addressable c,  Addressable v) {
        var mh$ = glReplacementCodeuiColor4ubVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiColor3fVertex3fSUN$MH,"glReplacementCodeuiColor3fVertex3fSUN");
    }
    public static void glReplacementCodeuiColor3fVertex3fSUN ( int rc,  float r,  float g,  float b,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiColor3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, r, g, b, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiColor3fVertex3fvSUN$MH,"glReplacementCodeuiColor3fVertex3fvSUN");
    }
    public static void glReplacementCodeuiColor3fVertex3fvSUN ( Addressable rc,  Addressable c,  Addressable v) {
        var mh$ = glReplacementCodeuiColor3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, c, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiNormal3fVertex3fSUN$MH,"glReplacementCodeuiNormal3fVertex3fSUN");
    }
    public static void glReplacementCodeuiNormal3fVertex3fSUN ( int rc,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.glReplacementCodeuiNormal3fVertex3fvSUN$MH,"glReplacementCodeuiNormal3fVertex3fvSUN");
    }
    public static void glReplacementCodeuiNormal3fVertex3fvSUN ( Addressable rc,  Addressable n,  Addressable v) {
        var mh$ = glReplacementCodeuiNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor4fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiColor4fNormal3fVertex3fSUN$MH,"glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    }
    public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN ( int rc,  float r,  float g,  float b,  float a,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiColor4fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, r, g, b, a, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiColor4fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiColor4fNormal3fVertex3fvSUN$MH,"glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    }
    public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN ( Addressable rc,  Addressable c,  Addressable n,  Addressable v) {
        var mh$ = glReplacementCodeuiColor4fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, c, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiTexCoord2fVertex3fSUN$MH,"glReplacementCodeuiTexCoord2fVertex3fSUN");
    }
    public static void glReplacementCodeuiTexCoord2fVertex3fSUN ( int rc,  float s,  float t,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiTexCoord2fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, s, t, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiTexCoord2fVertex3fvSUN$MH,"glReplacementCodeuiTexCoord2fVertex3fvSUN");
    }
    public static void glReplacementCodeuiTexCoord2fVertex3fvSUN ( Addressable rc,  Addressable tc,  Addressable v) {
        var mh$ = glReplacementCodeuiTexCoord2fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, tc, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN$MH,"glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    }
    public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN ( int rc,  float s,  float t,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, s, t, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN$MH,"glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    }
    public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN ( Addressable rc,  Addressable tc,  Addressable n,  Addressable v) {
        var mh$ = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, tc, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN$MH,"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    }
    public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN ( int rc,  float s,  float t,  float r,  float g,  float b,  float a,  float nx,  float ny,  float nz,  float x,  float y,  float z) {
        var mh$ = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN$MH();
        try {
            mh$.invokeExact(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN$MH,"glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    }
    public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN ( Addressable rc,  Addressable tc,  Addressable c,  Addressable n,  Addressable v) {
        var mh$ = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN$MH();
        try {
            mh$.invokeExact(rc, tc, c, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int modeRGB,  int modeA) {
        var mh$ = glBlendEquationSeparateATI$MH();
        try {
            mh$.invokeExact(modeRGB, modeA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEGLImageTargetTexture2DOES$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.glEGLImageTargetTexture2DOES$MH,"glEGLImageTargetTexture2DOES");
    }
    public static void glEGLImageTargetTexture2DOES ( int target,  Addressable image) {
        var mh$ = glEGLImageTargetTexture2DOES$MH();
        try {
            mh$.invokeExact(target, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEGLImageTargetRenderbufferStorageOES$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.glEGLImageTargetRenderbufferStorageOES$MH,"glEGLImageTargetRenderbufferStorageOES");
    }
    public static void glEGLImageTargetRenderbufferStorageOES ( int target,  Addressable image) {
        var mh$ = glEGLImageTargetRenderbufferStorageOES$MH();
        try {
            mh$.invokeExact(target, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gluBeginCurve$MH,"gluBeginCurve");
    }
    public static void gluBeginCurve ( Addressable nurb) {
        var mh$ = gluBeginCurve$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gluBeginPolygon$MH,"gluBeginPolygon");
    }
    public static void gluBeginPolygon ( Addressable tess) {
        var mh$ = gluBeginPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gluBeginSurface$MH,"gluBeginSurface");
    }
    public static void gluBeginSurface ( Addressable nurb) {
        var mh$ = gluBeginSurface$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gluBeginTrim$MH,"gluBeginTrim");
    }
    public static void gluBeginTrim ( Addressable nurb) {
        var mh$ = gluBeginTrim$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gluBuild1DMipmapLevels$MH,"gluBuild1DMipmapLevels");
    }
    public static int gluBuild1DMipmapLevels ( int target,  int internalFormat,  int width,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild1DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluBuild1DMipmaps$MH,"gluBuild1DMipmaps");
    }
    public static int gluBuild1DMipmaps ( int target,  int internalFormat,  int width,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild1DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluBuild2DMipmapLevels$MH,"gluBuild2DMipmapLevels");
    }
    public static int gluBuild2DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild2DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluBuild2DMipmaps$MH,"gluBuild2DMipmaps");
    }
    public static int gluBuild2DMipmaps ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild2DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluBuild3DMipmapLevels$MH,"gluBuild3DMipmapLevels");
    }
    public static int gluBuild3DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild3DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluBuild3DMipmaps$MH,"gluBuild3DMipmaps");
    }
    public static int gluBuild3DMipmaps ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild3DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCheckExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gluCheckExtension$MH,"gluCheckExtension");
    }
    public static byte gluCheckExtension ( Addressable extName,  Addressable extString) {
        var mh$ = gluCheckExtension$MH();
        try {
            return (byte)mh$.invokeExact(extName, extString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluCylinder$MH,"gluCylinder");
    }
    public static void gluCylinder ( Addressable quad,  double base,  double top,  double height,  int slices,  int stacks) {
        var mh$ = gluCylinder$MH();
        try {
            mh$.invokeExact(quad, base, top, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluDeleteNurbsRenderer$MH,"gluDeleteNurbsRenderer");
    }
    public static void gluDeleteNurbsRenderer ( Addressable nurb) {
        var mh$ = gluDeleteNurbsRenderer$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluDeleteQuadric$MH,"gluDeleteQuadric");
    }
    public static void gluDeleteQuadric ( Addressable quad) {
        var mh$ = gluDeleteQuadric$MH();
        try {
            mh$.invokeExact(quad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteTess$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluDeleteTess$MH,"gluDeleteTess");
    }
    public static void gluDeleteTess ( Addressable tess) {
        var mh$ = gluDeleteTess$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluDisk$MH,"gluDisk");
    }
    public static void gluDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops) {
        var mh$ = gluDisk$MH();
        try {
            mh$.invokeExact(quad, inner, outer, slices, loops);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gluEndCurve$MH,"gluEndCurve");
    }
    public static void gluEndCurve ( Addressable nurb) {
        var mh$ = gluEndCurve$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluEndPolygon$MH,"gluEndPolygon");
    }
    public static void gluEndPolygon ( Addressable tess) {
        var mh$ = gluEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluEndSurface$MH,"gluEndSurface");
    }
    public static void gluEndSurface ( Addressable nurb) {
        var mh$ = gluEndSurface$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluEndTrim$MH,"gluEndTrim");
    }
    public static void gluEndTrim ( Addressable nurb) {
        var mh$ = gluEndTrim$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluErrorString$MH,"gluErrorString");
    }
    public static MemoryAddress gluErrorString ( int error) {
        var mh$ = gluErrorString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluGetNurbsProperty$MH,"gluGetNurbsProperty");
    }
    public static void gluGetNurbsProperty ( Addressable nurb,  int property,  Addressable data) {
        var mh$ = gluGetNurbsProperty$MH();
        try {
            mh$.invokeExact(nurb, property, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gluGetString$MH,"gluGetString");
    }
    public static MemoryAddress gluGetString ( int name) {
        var mh$ = gluGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluGetTessProperty$MH,"gluGetTessProperty");
    }
    public static void gluGetTessProperty ( Addressable tess,  int which,  Addressable data) {
        var mh$ = gluGetTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLoadSamplingMatrices$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluLoadSamplingMatrices$MH,"gluLoadSamplingMatrices");
    }
    public static void gluLoadSamplingMatrices ( Addressable nurb,  Addressable model,  Addressable perspective,  Addressable view) {
        var mh$ = gluLoadSamplingMatrices$MH();
        try {
            mh$.invokeExact(nurb, model, perspective, view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLookAt$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluLookAt$MH,"gluLookAt");
    }
    public static void gluLookAt ( double eyeX,  double eyeY,  double eyeZ,  double centerX,  double centerY,  double centerZ,  double upX,  double upY,  double upZ) {
        var mh$ = gluLookAt$MH();
        try {
            mh$.invokeExact(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluNewNurbsRenderer$MH,"gluNewNurbsRenderer");
    }
    public static MemoryAddress gluNewNurbsRenderer () {
        var mh$ = gluNewNurbsRenderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluNewQuadric$MH,"gluNewQuadric");
    }
    public static MemoryAddress gluNewQuadric () {
        var mh$ = gluNewQuadric$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewTess$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gluNewTess$MH,"gluNewTess");
    }
    public static MemoryAddress gluNewTess () {
        var mh$ = gluNewTess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNextContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNextContour$MH,"gluNextContour");
    }
    public static void gluNextContour ( Addressable tess,  int type) {
        var mh$ = gluNextContour$MH();
        try {
            mh$.invokeExact(tess, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNurbsCallback$MH,"gluNurbsCallback");
    }
    public static void gluNurbsCallback ( Addressable nurb,  int which,  Addressable CallBackFunc) {
        var mh$ = gluNurbsCallback$MH();
        try {
            mh$.invokeExact(nurb, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackData$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNurbsCallbackData$MH,"gluNurbsCallbackData");
    }
    public static void gluNurbsCallbackData ( Addressable nurb,  Addressable userData) {
        var mh$ = gluNurbsCallbackData$MH();
        try {
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNurbsCallbackDataEXT$MH,"gluNurbsCallbackDataEXT");
    }
    public static void gluNurbsCallbackDataEXT ( Addressable nurb,  Addressable userData) {
        var mh$ = gluNurbsCallbackDataEXT$MH();
        try {
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNurbsCurve$MH,"gluNurbsCurve");
    }
    public static void gluNurbsCurve ( Addressable nurb,  int knotCount,  Addressable knots,  int stride,  Addressable control,  int order,  int type) {
        var mh$ = gluNurbsCurve$MH();
        try {
            mh$.invokeExact(nurb, knotCount, knots, stride, control, order, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gluNurbsProperty$MH,"gluNurbsProperty");
    }
    public static void gluNurbsProperty ( Addressable nurb,  int property,  float value) {
        var mh$ = gluNurbsProperty$MH();
        try {
            mh$.invokeExact(nurb, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluNurbsSurface$MH,"gluNurbsSurface");
    }
    public static void gluNurbsSurface ( Addressable nurb,  int sKnotCount,  Addressable sKnots,  int tKnotCount,  Addressable tKnots,  int sStride,  int tStride,  Addressable control,  int sOrder,  int tOrder,  int type) {
        var mh$ = gluNurbsSurface$MH();
        try {
            mh$.invokeExact(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluOrtho2D$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluOrtho2D$MH,"gluOrtho2D");
    }
    public static void gluOrtho2D ( double left,  double right,  double bottom,  double top) {
        var mh$ = gluOrtho2D$MH();
        try {
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPartialDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluPartialDisk$MH,"gluPartialDisk");
    }
    public static void gluPartialDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops,  double start,  double sweep) {
        var mh$ = gluPartialDisk$MH();
        try {
            mh$.invokeExact(quad, inner, outer, slices, loops, start, sweep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPerspective$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluPerspective$MH,"gluPerspective");
    }
    public static void gluPerspective ( double fovy,  double aspect,  double zNear,  double zFar) {
        var mh$ = gluPerspective$MH();
        try {
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPickMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluPickMatrix$MH,"gluPickMatrix");
    }
    public static void gluPickMatrix ( double x,  double y,  double delX,  double delY,  Addressable viewport) {
        var mh$ = gluPickMatrix$MH();
        try {
            mh$.invokeExact(x, y, delX, delY, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluProject$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.gluProject$MH,"gluProject");
    }
    public static int gluProject ( double objX,  double objY,  double objZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable winX,  Addressable winY,  Addressable winZ) {
        var mh$ = gluProject$MH();
        try {
            return (int)mh$.invokeExact(objX, objY, objZ, model, proj, view, winX, winY, winZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPwlCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluPwlCurve$MH,"gluPwlCurve");
    }
    public static void gluPwlCurve ( Addressable nurb,  int count,  Addressable data,  int stride,  int type) {
        var mh$ = gluPwlCurve$MH();
        try {
            mh$.invokeExact(nurb, count, data, stride, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluQuadricCallback$MH,"gluQuadricCallback");
    }
    public static void gluQuadricCallback ( Addressable quad,  int which,  Addressable CallBackFunc) {
        var mh$ = gluQuadricCallback$MH();
        try {
            mh$.invokeExact(quad, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricDrawStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluQuadricDrawStyle$MH,"gluQuadricDrawStyle");
    }
    public static void gluQuadricDrawStyle ( Addressable quad,  int draw) {
        var mh$ = gluQuadricDrawStyle$MH();
        try {
            mh$.invokeExact(quad, draw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluQuadricNormals$MH,"gluQuadricNormals");
    }
    public static void gluQuadricNormals ( Addressable quad,  int normal) {
        var mh$ = gluQuadricNormals$MH();
        try {
            mh$.invokeExact(quad, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluQuadricOrientation$MH,"gluQuadricOrientation");
    }
    public static void gluQuadricOrientation ( Addressable quad,  int orientation) {
        var mh$ = gluQuadricOrientation$MH();
        try {
            mh$.invokeExact(quad, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.gluQuadricTexture$MH,"gluQuadricTexture");
    }
    public static void gluQuadricTexture ( Addressable quad,  byte texture) {
        var mh$ = gluQuadricTexture$MH();
        try {
            mh$.invokeExact(quad, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluScaleImage$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluScaleImage$MH,"gluScaleImage");
    }
    public static int gluScaleImage ( int format,  int wIn,  int hIn,  int typeIn,  Addressable dataIn,  int wOut,  int hOut,  int typeOut,  Addressable dataOut) {
        var mh$ = gluScaleImage$MH();
        try {
            return (int)mh$.invokeExact(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluSphere$MH,"gluSphere");
    }
    public static void gluSphere ( Addressable quad,  double radius,  int slices,  int stacks) {
        var mh$ = gluSphere$MH();
        try {
            mh$.invokeExact(quad, radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluTessBeginContour$MH,"gluTessBeginContour");
    }
    public static void gluTessBeginContour ( Addressable tess) {
        var mh$ = gluTessBeginContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluTessBeginPolygon$MH,"gluTessBeginPolygon");
    }
    public static void gluTessBeginPolygon ( Addressable tess,  Addressable data) {
        var mh$ = gluTessBeginPolygon$MH();
        try {
            mh$.invokeExact(tess, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluTessCallback$MH,"gluTessCallback");
    }
    public static void gluTessCallback ( Addressable tess,  int which,  Addressable CallBackFunc) {
        var mh$ = gluTessCallback$MH();
        try {
            mh$.invokeExact(tess, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndContour$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.gluTessEndContour$MH,"gluTessEndContour");
    }
    public static void gluTessEndContour ( Addressable tess) {
        var mh$ = gluTessEndContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluTessEndPolygon$MH,"gluTessEndPolygon");
    }
    public static void gluTessEndPolygon ( Addressable tess) {
        var mh$ = gluTessEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluTessNormal$MH,"gluTessNormal");
    }
    public static void gluTessNormal ( Addressable tess,  double valueX,  double valueY,  double valueZ) {
        var mh$ = gluTessNormal$MH();
        try {
            mh$.invokeExact(tess, valueX, valueY, valueZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluTessProperty$MH,"gluTessProperty");
    }
    public static void gluTessProperty ( Addressable tess,  int which,  double data) {
        var mh$ = gluTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluTessVertex$MH,"gluTessVertex");
    }
    public static void gluTessVertex ( Addressable tess,  Addressable location,  Addressable data) {
        var mh$ = gluTessVertex$MH();
        try {
            mh$.invokeExact(tess, location, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluUnProject$MH,"gluUnProject");
    }
    public static int gluUnProject ( double winX,  double winY,  double winZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable objX,  Addressable objY,  Addressable objZ) {
        var mh$ = gluUnProject$MH();
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, model, proj, view, objX, objY, objZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject4$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.gluUnProject4$MH,"gluUnProject4");
    }
    public static int gluUnProject4 ( double winX,  double winY,  double winZ,  double clipW,  Addressable model,  Addressable proj,  Addressable view,  double nearVal,  double farVal,  Addressable objX,  Addressable objY,  Addressable objZ,  Addressable objW) {
        var mh$ = gluUnProject4$MH();
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout glutStrokeRoman$LAYOUT() {
        return constants$1358.glutStrokeRoman$LAYOUT;
    }
    public static VarHandle glutStrokeRoman$VH() {
        return constants$1358.glutStrokeRoman$VH;
    }
    public static MemorySegment glutStrokeRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutStrokeRoman$SEGMENT,"glutStrokeRoman");
    }
    public static MemoryAddress glutStrokeRoman$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutStrokeRoman$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutStrokeRoman$SEGMENT, "glutStrokeRoman"));
    }
    public static void glutStrokeRoman$set( MemoryAddress x) {
        constants$1358.glutStrokeRoman$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutStrokeRoman$SEGMENT, "glutStrokeRoman"), x);
    }
    public static MemoryLayout glutStrokeMonoRoman$LAYOUT() {
        return constants$1358.glutStrokeMonoRoman$LAYOUT;
    }
    public static VarHandle glutStrokeMonoRoman$VH() {
        return constants$1358.glutStrokeMonoRoman$VH;
    }
    public static MemorySegment glutStrokeMonoRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutStrokeMonoRoman$SEGMENT,"glutStrokeMonoRoman");
    }
    public static MemoryAddress glutStrokeMonoRoman$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutStrokeMonoRoman$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"));
    }
    public static void glutStrokeMonoRoman$set( MemoryAddress x) {
        constants$1358.glutStrokeMonoRoman$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"), x);
    }
    public static MemoryLayout glutBitmap9By15$LAYOUT() {
        return constants$1358.glutBitmap9By15$LAYOUT;
    }
    public static VarHandle glutBitmap9By15$VH() {
        return constants$1358.glutBitmap9By15$VH;
    }
    public static MemorySegment glutBitmap9By15$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutBitmap9By15$SEGMENT,"glutBitmap9By15");
    }
    public static MemoryAddress glutBitmap9By15$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutBitmap9By15$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutBitmap9By15$SEGMENT, "glutBitmap9By15"));
    }
    public static void glutBitmap9By15$set( MemoryAddress x) {
        constants$1358.glutBitmap9By15$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutBitmap9By15$SEGMENT, "glutBitmap9By15"), x);
    }
    public static MemoryLayout glutBitmap8By13$LAYOUT() {
        return constants$1358.glutBitmap8By13$LAYOUT;
    }
    public static VarHandle glutBitmap8By13$VH() {
        return constants$1358.glutBitmap8By13$VH;
    }
    public static MemorySegment glutBitmap8By13$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutBitmap8By13$SEGMENT,"glutBitmap8By13");
    }
    public static MemoryAddress glutBitmap8By13$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutBitmap8By13$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutBitmap8By13$SEGMENT, "glutBitmap8By13"));
    }
    public static void glutBitmap8By13$set( MemoryAddress x) {
        constants$1358.glutBitmap8By13$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutBitmap8By13$SEGMENT, "glutBitmap8By13"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman10$LAYOUT() {
        return constants$1358.glutBitmapTimesRoman10$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman10$VH() {
        return constants$1358.glutBitmapTimesRoman10$VH;
    }
    public static MemorySegment glutBitmapTimesRoman10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman10$SEGMENT,"glutBitmapTimesRoman10");
    }
    public static MemoryAddress glutBitmapTimesRoman10$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutBitmapTimesRoman10$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"));
    }
    public static void glutBitmapTimesRoman10$set( MemoryAddress x) {
        constants$1358.glutBitmapTimesRoman10$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman24$LAYOUT() {
        return constants$1358.glutBitmapTimesRoman24$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman24$VH() {
        return constants$1358.glutBitmapTimesRoman24$VH;
    }
    public static MemorySegment glutBitmapTimesRoman24$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman24$SEGMENT,"glutBitmapTimesRoman24");
    }
    public static MemoryAddress glutBitmapTimesRoman24$get() {
        return (java.lang.foreign.MemoryAddress) constants$1358.glutBitmapTimesRoman24$VH.get(RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"));
    }
    public static void glutBitmapTimesRoman24$set( MemoryAddress x) {
        constants$1358.glutBitmapTimesRoman24$VH.set(RuntimeHelper.requireNonNull(constants$1358.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"), x);
    }
    public static MemoryLayout glutBitmapHelvetica10$LAYOUT() {
        return constants$1359.glutBitmapHelvetica10$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica10$VH() {
        return constants$1359.glutBitmapHelvetica10$VH;
    }
    public static MemorySegment glutBitmapHelvetica10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica10$SEGMENT,"glutBitmapHelvetica10");
    }
    public static MemoryAddress glutBitmapHelvetica10$get() {
        return (java.lang.foreign.MemoryAddress) constants$1359.glutBitmapHelvetica10$VH.get(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"));
    }
    public static void glutBitmapHelvetica10$set( MemoryAddress x) {
        constants$1359.glutBitmapHelvetica10$VH.set(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"), x);
    }
    public static MemoryLayout glutBitmapHelvetica12$LAYOUT() {
        return constants$1359.glutBitmapHelvetica12$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica12$VH() {
        return constants$1359.glutBitmapHelvetica12$VH;
    }
    public static MemorySegment glutBitmapHelvetica12$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica12$SEGMENT,"glutBitmapHelvetica12");
    }
    public static MemoryAddress glutBitmapHelvetica12$get() {
        return (java.lang.foreign.MemoryAddress) constants$1359.glutBitmapHelvetica12$VH.get(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"));
    }
    public static void glutBitmapHelvetica12$set( MemoryAddress x) {
        constants$1359.glutBitmapHelvetica12$VH.set(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"), x);
    }
    public static MemoryLayout glutBitmapHelvetica18$LAYOUT() {
        return constants$1359.glutBitmapHelvetica18$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica18$VH() {
        return constants$1359.glutBitmapHelvetica18$VH;
    }
    public static MemorySegment glutBitmapHelvetica18$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica18$SEGMENT,"glutBitmapHelvetica18");
    }
    public static MemoryAddress glutBitmapHelvetica18$get() {
        return (java.lang.foreign.MemoryAddress) constants$1359.glutBitmapHelvetica18$VH.get(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"));
    }
    public static void glutBitmapHelvetica18$set( MemoryAddress x) {
        constants$1359.glutBitmapHelvetica18$VH.set(RuntimeHelper.requireNonNull(constants$1359.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"), x);
    }
    public static MethodHandle glutInit$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glutInit$MH,"glutInit");
    }
    public static void glutInit ( Addressable pargc,  Addressable argv) {
        var mh$ = glutInit$MH();
        try {
            mh$.invokeExact(pargc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glutInitWindowPosition$MH,"glutInitWindowPosition");
    }
    public static void glutInitWindowPosition ( int x,  int y) {
        var mh$ = glutInitWindowPosition$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glutInitWindowSize$MH,"glutInitWindowSize");
    }
    public static void glutInitWindowSize ( int width,  int height) {
        var mh$ = glutInitWindowSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutInitDisplayMode$MH,"glutInitDisplayMode");
    }
    public static void glutInitDisplayMode ( int displayMode) {
        var mh$ = glutInitDisplayMode$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutInitDisplayString$MH,"glutInitDisplayString");
    }
    public static void glutInitDisplayString ( Addressable displayMode) {
        var mh$ = glutInitDisplayString$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMainLoop$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutMainLoop$MH,"glutMainLoop");
    }
    public static void glutMainLoop () {
        var mh$ = glutMainLoop$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutCreateWindow$MH,"glutCreateWindow");
    }
    public static int glutCreateWindow ( Addressable title) {
        var mh$ = glutCreateWindow$MH();
        try {
            return (int)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateSubWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutCreateSubWindow$MH,"glutCreateSubWindow");
    }
    public static int glutCreateSubWindow ( int window,  int x,  int y,  int width,  int height) {
        var mh$ = glutCreateSubWindow$MH();
        try {
            return (int)mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glutDestroyWindow$MH,"glutDestroyWindow");
    }
    public static void glutDestroyWindow ( int window) {
        var mh$ = glutDestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutSetWindow$MH,"glutSetWindow");
    }
    public static void glutSetWindow ( int window) {
        var mh$ = glutSetWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutGetWindow$MH,"glutGetWindow");
    }
    public static int glutGetWindow () {
        var mh$ = glutGetWindow$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutSetWindowTitle$MH,"glutSetWindowTitle");
    }
    public static void glutSetWindowTitle ( Addressable title) {
        var mh$ = glutSetWindowTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetIconTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutSetIconTitle$MH,"glutSetIconTitle");
    }
    public static void glutSetIconTitle ( Addressable title) {
        var mh$ = glutSetIconTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutReshapeWindow$MH,"glutReshapeWindow");
    }
    public static void glutReshapeWindow ( int width,  int height) {
        var mh$ = glutReshapeWindow$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glutPositionWindow$MH,"glutPositionWindow");
    }
    public static void glutPositionWindow ( int x,  int y) {
        var mh$ = glutPositionWindow$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutShowWindow$MH,"glutShowWindow");
    }
    public static void glutShowWindow () {
        var mh$ = glutShowWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutHideWindow$MH,"glutHideWindow");
    }
    public static void glutHideWindow () {
        var mh$ = glutHideWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutIconifyWindow$MH,"glutIconifyWindow");
    }
    public static void glutIconifyWindow () {
        var mh$ = glutIconifyWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPushWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutPushWindow$MH,"glutPushWindow");
    }
    public static void glutPushWindow () {
        var mh$ = glutPushWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutPopWindow$MH,"glutPopWindow");
    }
    public static void glutPopWindow () {
        var mh$ = glutPopWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutFullScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glutFullScreen$MH,"glutFullScreen");
    }
    public static void glutFullScreen () {
        var mh$ = glutFullScreen$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutPostWindowRedisplay$MH,"glutPostWindowRedisplay");
    }
    public static void glutPostWindowRedisplay ( int window) {
        var mh$ = glutPostWindowRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutPostRedisplay$MH,"glutPostRedisplay");
    }
    public static void glutPostRedisplay () {
        var mh$ = glutPostRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutSwapBuffers$MH,"glutSwapBuffers");
    }
    public static void glutSwapBuffers () {
        var mh$ = glutSwapBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutWarpPointer$MH,"glutWarpPointer");
    }
    public static void glutWarpPointer ( int x,  int y) {
        var mh$ = glutWarpPointer$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutSetCursor$MH,"glutSetCursor");
    }
    public static void glutSetCursor ( int cursor) {
        var mh$ = glutSetCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEstablishOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glutEstablishOverlay$MH,"glutEstablishOverlay");
    }
    public static void glutEstablishOverlay () {
        var mh$ = glutEstablishOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutRemoveOverlay$MH,"glutRemoveOverlay");
    }
    public static void glutRemoveOverlay () {
        var mh$ = glutRemoveOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutUseLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutUseLayer$MH,"glutUseLayer");
    }
    public static void glutUseLayer ( int layer) {
        var mh$ = glutUseLayer$MH();
        try {
            mh$.invokeExact(layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutPostOverlayRedisplay$MH,"glutPostOverlayRedisplay");
    }
    public static void glutPostOverlayRedisplay () {
        var mh$ = glutPostOverlayRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutPostWindowOverlayRedisplay$MH,"glutPostWindowOverlayRedisplay");
    }
    public static void glutPostWindowOverlayRedisplay ( int window) {
        var mh$ = glutPostWindowOverlayRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutShowOverlay$MH,"glutShowOverlay");
    }
    public static void glutShowOverlay () {
        var mh$ = glutShowOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glutHideOverlay$MH,"glutHideOverlay");
    }
    public static void glutHideOverlay () {
        var mh$ = glutHideOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glutCreateMenu$MH,"glutCreateMenu");
    }
    public static int glutCreateMenu ( Addressable callback) {
        var mh$ = glutCreateMenu$MH();
        try {
            return (int)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glutDestroyMenu$MH,"glutDestroyMenu");
    }
    public static void glutDestroyMenu ( int menu) {
        var mh$ = glutDestroyMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glutGetMenu$MH,"glutGetMenu");
    }
    public static int glutGetMenu () {
        var mh$ = glutGetMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glutSetMenu$MH,"glutSetMenu");
    }
    public static void glutSetMenu ( int menu) {
        var mh$ = glutSetMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutAddMenuEntry$MH,"glutAddMenuEntry");
    }
    public static void glutAddMenuEntry ( Addressable label,  int value) {
        var mh$ = glutAddMenuEntry$MH();
        try {
            mh$.invokeExact(label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutAddSubMenu$MH,"glutAddSubMenu");
    }
    public static void glutAddSubMenu ( Addressable label,  int subMenu) {
        var mh$ = glutAddSubMenu$MH();
        try {
            mh$.invokeExact(label, subMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutChangeToMenuEntry$MH,"glutChangeToMenuEntry");
    }
    public static void glutChangeToMenuEntry ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToMenuEntry$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutChangeToSubMenu$MH,"glutChangeToSubMenu");
    }
    public static void glutChangeToSubMenu ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToSubMenu$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutRemoveMenuItem$MH,"glutRemoveMenuItem");
    }
    public static void glutRemoveMenuItem ( int item) {
        var mh$ = glutRemoveMenuItem$MH();
        try {
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAttachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.glutAttachMenu$MH,"glutAttachMenu");
    }
    public static void glutAttachMenu ( int button) {
        var mh$ = glutAttachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDetachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.glutDetachMenu$MH,"glutDetachMenu");
    }
    public static void glutDetachMenu ( int button) {
        var mh$ = glutDetachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTimerFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.glutTimerFunc$MH,"glutTimerFunc");
    }
    public static void glutTimerFunc ( int time,  Addressable callback,  int value) {
        var mh$ = glutTimerFunc$MH();
        try {
            mh$.invokeExact(time, callback, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIdleFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.glutIdleFunc$MH,"glutIdleFunc");
    }
    public static void glutIdleFunc ( Addressable callback) {
        var mh$ = glutIdleFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.glutKeyboardFunc$MH,"glutKeyboardFunc");
    }
    public static void glutKeyboardFunc ( Addressable callback) {
        var mh$ = glutKeyboardFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.glutSpecialFunc$MH,"glutSpecialFunc");
    }
    public static void glutSpecialFunc ( Addressable callback) {
        var mh$ = glutSpecialFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.glutReshapeFunc$MH,"glutReshapeFunc");
    }
    public static void glutReshapeFunc ( Addressable callback) {
        var mh$ = glutReshapeFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVisibilityFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.glutVisibilityFunc$MH,"glutVisibilityFunc");
    }
    public static void glutVisibilityFunc ( Addressable callback) {
        var mh$ = glutVisibilityFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.glutDisplayFunc$MH,"glutDisplayFunc");
    }
    public static void glutDisplayFunc ( Addressable callback) {
        var mh$ = glutDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMouseFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glutMouseFunc$MH,"glutMouseFunc");
    }
    public static void glutMouseFunc ( Addressable callback) {
        var mh$ = glutMouseFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glutMotionFunc$MH,"glutMotionFunc");
    }
    public static void glutMotionFunc ( Addressable callback) {
        var mh$ = glutMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPassiveMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.glutPassiveMotionFunc$MH,"glutPassiveMotionFunc");
    }
    public static void glutPassiveMotionFunc ( Addressable callback) {
        var mh$ = glutPassiveMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEntryFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.glutEntryFunc$MH,"glutEntryFunc");
    }
    public static void glutEntryFunc ( Addressable callback) {
        var mh$ = glutEntryFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.glutKeyboardUpFunc$MH,"glutKeyboardUpFunc");
    }
    public static void glutKeyboardUpFunc ( Addressable callback) {
        var mh$ = glutKeyboardUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.glutSpecialUpFunc$MH,"glutSpecialUpFunc");
    }
    public static void glutSpecialUpFunc ( Addressable callback) {
        var mh$ = glutSpecialUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.glutJoystickFunc$MH,"glutJoystickFunc");
    }
    public static void glutJoystickFunc ( Addressable callback,  int pollInterval) {
        var mh$ = glutJoystickFunc$MH();
        try {
            mh$.invokeExact(callback, pollInterval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.glutMenuStateFunc$MH,"glutMenuStateFunc");
    }
    public static void glutMenuStateFunc ( Addressable callback) {
        var mh$ = glutMenuStateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.glutMenuStatusFunc$MH,"glutMenuStatusFunc");
    }
    public static void glutMenuStatusFunc ( Addressable callback) {
        var mh$ = glutMenuStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutOverlayDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.glutOverlayDisplayFunc$MH,"glutOverlayDisplayFunc");
    }
    public static void glutOverlayDisplayFunc ( Addressable callback) {
        var mh$ = glutOverlayDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWindowStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.glutWindowStatusFunc$MH,"glutWindowStatusFunc");
    }
    public static void glutWindowStatusFunc ( Addressable callback) {
        var mh$ = glutWindowStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.glutSpaceballMotionFunc$MH,"glutSpaceballMotionFunc");
    }
    public static void glutSpaceballMotionFunc ( Addressable callback) {
        var mh$ = glutSpaceballMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballRotateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.glutSpaceballRotateFunc$MH,"glutSpaceballRotateFunc");
    }
    public static void glutSpaceballRotateFunc ( Addressable callback) {
        var mh$ = glutSpaceballRotateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.glutSpaceballButtonFunc$MH,"glutSpaceballButtonFunc");
    }
    public static void glutSpaceballButtonFunc ( Addressable callback) {
        var mh$ = glutSpaceballButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutButtonBoxFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.glutButtonBoxFunc$MH,"glutButtonBoxFunc");
    }
    public static void glutButtonBoxFunc ( Addressable callback) {
        var mh$ = glutButtonBoxFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDialsFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.glutDialsFunc$MH,"glutDialsFunc");
    }
    public static void glutDialsFunc ( Addressable callback) {
        var mh$ = glutDialsFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.glutTabletMotionFunc$MH,"glutTabletMotionFunc");
    }
    public static void glutTabletMotionFunc ( Addressable callback) {
        var mh$ = glutTabletMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.glutTabletButtonFunc$MH,"glutTabletButtonFunc");
    }
    public static void glutTabletButtonFunc ( Addressable callback) {
        var mh$ = glutTabletButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGet$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.glutGet$MH,"glutGet");
    }
    public static int glutGet ( int query) {
        var mh$ = glutGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDeviceGet$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.glutDeviceGet$MH,"glutDeviceGet");
    }
    public static int glutDeviceGet ( int query) {
        var mh$ = glutDeviceGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutGetModifiers$MH,"glutGetModifiers");
    }
    public static int glutGetModifiers () {
        var mh$ = glutGetModifiers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLayerGet$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutLayerGet$MH,"glutLayerGet");
    }
    public static int glutLayerGet ( int query) {
        var mh$ = glutLayerGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutBitmapCharacter$MH,"glutBitmapCharacter");
    }
    public static void glutBitmapCharacter ( Addressable font,  int character) {
        var mh$ = glutBitmapCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutBitmapWidth$MH,"glutBitmapWidth");
    }
    public static int glutBitmapWidth ( Addressable font,  int character) {
        var mh$ = glutBitmapWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutStrokeCharacter$MH,"glutStrokeCharacter");
    }
    public static void glutStrokeCharacter ( Addressable font,  int character) {
        var mh$ = glutStrokeCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.glutStrokeWidth$MH,"glutStrokeWidth");
    }
    public static int glutStrokeWidth ( Addressable font,  int character) {
        var mh$ = glutStrokeWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapLength$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutBitmapLength$MH,"glutBitmapLength");
    }
    public static int glutBitmapLength ( Addressable font,  Addressable string) {
        var mh$ = glutBitmapLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeLength$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutStrokeLength$MH,"glutStrokeLength");
    }
    public static int glutStrokeLength ( Addressable font,  Addressable string) {
        var mh$ = glutStrokeLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCube$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutWireCube$MH,"glutWireCube");
    }
    public static void glutWireCube ( double size) {
        var mh$ = glutWireCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCube$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutSolidCube$MH,"glutSolidCube");
    }
    public static void glutSolidCube ( double size) {
        var mh$ = glutSolidCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutWireSphere$MH,"glutWireSphere");
    }
    public static void glutWireSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutWireSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.glutSolidSphere$MH,"glutSolidSphere");
    }
    public static void glutSolidSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutSolidSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCone$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutWireCone$MH,"glutWireCone");
    }
    public static void glutWireCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutWireCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCone$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutSolidCone$MH,"glutSolidCone");
    }
    public static void glutSolidCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutSolidCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutWireTorus$MH,"glutWireTorus");
    }
    public static void glutWireTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutWireTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutSolidTorus$MH,"glutSolidTorus");
    }
    public static void glutSolidTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutSolidTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutWireDodecahedron$MH,"glutWireDodecahedron");
    }
    public static void glutWireDodecahedron () {
        var mh$ = glutWireDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1382.glutSolidDodecahedron$MH,"glutSolidDodecahedron");
    }
    public static void glutSolidDodecahedron () {
        var mh$ = glutSolidDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutWireOctahedron$MH,"glutWireOctahedron");
    }
    public static void glutWireOctahedron () {
        var mh$ = glutWireOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutSolidOctahedron$MH,"glutSolidOctahedron");
    }
    public static void glutSolidOctahedron () {
        var mh$ = glutSolidOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutWireTetrahedron$MH,"glutWireTetrahedron");
    }
    public static void glutWireTetrahedron () {
        var mh$ = glutWireTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutSolidTetrahedron$MH,"glutSolidTetrahedron");
    }
    public static void glutSolidTetrahedron () {
        var mh$ = glutSolidTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutWireIcosahedron$MH,"glutWireIcosahedron");
    }
    public static void glutWireIcosahedron () {
        var mh$ = glutWireIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$1383.glutSolidIcosahedron$MH,"glutSolidIcosahedron");
    }
    public static void glutSolidIcosahedron () {
        var mh$ = glutSolidIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutWireTeapot$MH,"glutWireTeapot");
    }
    public static void glutWireTeapot ( double size) {
        var mh$ = glutWireTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutSolidTeapot$MH,"glutSolidTeapot");
    }
    public static void glutSolidTeapot ( double size) {
        var mh$ = glutSolidTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeString$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutGameModeString$MH,"glutGameModeString");
    }
    public static void glutGameModeString ( Addressable string) {
        var mh$ = glutGameModeString$MH();
        try {
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEnterGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutEnterGameMode$MH,"glutEnterGameMode");
    }
    public static int glutEnterGameMode () {
        var mh$ = glutEnterGameMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLeaveGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutLeaveGameMode$MH,"glutLeaveGameMode");
    }
    public static void glutLeaveGameMode () {
        var mh$ = glutLeaveGameMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$1384.glutGameModeGet$MH,"glutGameModeGet");
    }
    public static int glutGameModeGet ( int query) {
        var mh$ = glutGameModeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResizeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutVideoResizeGet$MH,"glutVideoResizeGet");
    }
    public static int glutVideoResizeGet ( int query) {
        var mh$ = glutVideoResizeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetupVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutSetupVideoResizing$MH,"glutSetupVideoResizing");
    }
    public static void glutSetupVideoResizing () {
        var mh$ = glutSetupVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStopVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutStopVideoResizing$MH,"glutStopVideoResizing");
    }
    public static void glutStopVideoResizing () {
        var mh$ = glutStopVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResize$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutVideoResize$MH,"glutVideoResize");
    }
    public static void glutVideoResize ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoResize$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoPan$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutVideoPan$MH,"glutVideoPan");
    }
    public static void glutVideoPan ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoPan$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1385.glutSetColor$MH,"glutSetColor");
    }
    public static void glutSetColor ( int color,  float red,  float green,  float blue) {
        var mh$ = glutSetColor$MH();
        try {
            mh$.invokeExact(color, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutGetColor$MH,"glutGetColor");
    }
    public static float glutGetColor ( int color,  int component) {
        var mh$ = glutGetColor$MH();
        try {
            return (float)mh$.invokeExact(color, component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCopyColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutCopyColormap$MH,"glutCopyColormap");
    }
    public static void glutCopyColormap ( int window) {
        var mh$ = glutCopyColormap$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIgnoreKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutIgnoreKeyRepeat$MH,"glutIgnoreKeyRepeat");
    }
    public static void glutIgnoreKeyRepeat ( int ignore) {
        var mh$ = glutIgnoreKeyRepeat$MH();
        try {
            mh$.invokeExact(ignore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutSetKeyRepeat$MH,"glutSetKeyRepeat");
    }
    public static void glutSetKeyRepeat ( int repeatMode) {
        var mh$ = glutSetKeyRepeat$MH();
        try {
            mh$.invokeExact(repeatMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutForceJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutForceJoystickFunc$MH,"glutForceJoystickFunc");
    }
    public static void glutForceJoystickFunc () {
        var mh$ = glutForceJoystickFunc$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$1386.glutExtensionSupported$MH,"glutExtensionSupported");
    }
    public static int glutExtensionSupported ( Addressable extension) {
        var mh$ = glutExtensionSupported$MH();
        try {
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReportErrors$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.glutReportErrors$MH,"glutReportErrors");
    }
    public static void glutReportErrors () {
        var mh$ = glutReportErrors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static int P_ALL() {
        return (int)0L;
    }
    public static int P_PID() {
        return (int)1L;
    }
    public static int P_PGID() {
        return (int)2L;
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1387.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$1388.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$1389.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$1399._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GL_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_CLIENT_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int GL_INVALID_INDEX() {
        return (int)4294967295L;
    }
    public static long GL_TIMEOUT_IGNORED() {
        return -1L;
    }
    public static int GL_ALL_SHADER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_PIXELS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_QUERY_ALL_EVENT_BITS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS_EXT() {
        return (int)4294967295L;
    }
    public static int GL_NEXT_BUFFER_NV() {
        return (int)-2L;
    }
    public static int GL_SKIP_COMPONENTS4_NV() {
        return (int)-3L;
    }
    public static int GL_SKIP_COMPONENTS3_NV() {
        return (int)-4L;
    }
    public static int GL_SKIP_COMPONENTS2_NV() {
        return (int)-5L;
    }
    public static int GL_SKIP_COMPONENTS1_NV() {
        return (int)-6L;
    }
    public static int GL_TEXCOORD4_BIT_PGI() {
        return (int)2147483648L;
    }
    public static double GLU_TESS_MAX_COORD() {
        return 1.0E150d;
    }
    public static MemoryAddress NULL() {
        return constants$1405.NULL$ADDR;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$1405.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
}


