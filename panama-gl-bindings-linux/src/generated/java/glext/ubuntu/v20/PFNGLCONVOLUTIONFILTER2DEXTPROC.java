// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLCONVOLUTIONFILTER2DEXTPROC {

    void apply(int target, int internalformat, int width, int height, int format, int type, java.lang.foreign.MemoryAddress image);
    static MemorySegment allocate(PFNGLCONVOLUTIONFILTER2DEXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLCONVOLUTIONFILTER2DEXTPROC.class, fi, constants$733.PFNGLCONVOLUTIONFILTER2DEXTPROC$FUNC, session);
    }
    static PFNGLCONVOLUTIONFILTER2DEXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _target, int _internalformat, int _width, int _height, int _format, int _type, java.lang.foreign.MemoryAddress _image) -> {
            try {
                constants$734.PFNGLCONVOLUTIONFILTER2DEXTPROC$MH.invokeExact((Addressable)symbol, _target, _internalformat, _width, _height, _format, _type, (java.lang.foreign.Addressable)_image);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


