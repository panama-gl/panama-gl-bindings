// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGETINFOLOGARBPROC {

    void apply(int obj, int maxLength, java.lang.foreign.MemoryAddress length, java.lang.foreign.MemoryAddress infoLog);
    static MemorySegment allocate(PFNGLGETINFOLOGARBPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGETINFOLOGARBPROC.class, fi, constants$500.PFNGLGETINFOLOGARBPROC$FUNC, session);
    }
    static PFNGLGETINFOLOGARBPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _obj, int _maxLength, java.lang.foreign.MemoryAddress _length, java.lang.foreign.MemoryAddress _infoLog) -> {
            try {
                constants$501.PFNGLGETINFOLOGARBPROC$MH.invokeExact((Addressable)symbol, _obj, _maxLength, (java.lang.foreign.Addressable)_length, (java.lang.foreign.Addressable)_infoLog);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


