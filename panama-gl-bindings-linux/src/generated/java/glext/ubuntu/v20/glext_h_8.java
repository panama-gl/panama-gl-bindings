// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glext_h_8 extends glext_h_7 {

    public static MethodHandle glProgramUniform2fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform2fvEXT$MH,"glProgramUniform2fvEXT");
    }
    public static void glProgramUniform2fvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform3fvEXT$MH,"glProgramUniform3fvEXT");
    }
    public static void glProgramUniform3fvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform4fvEXT$MH,"glProgramUniform4fvEXT");
    }
    public static void glProgramUniform4fvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform1ivEXT$MH,"glProgramUniform1ivEXT");
    }
    public static void glProgramUniform1ivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1ivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$862.glProgramUniform2ivEXT$MH,"glProgramUniform2ivEXT");
    }
    public static void glProgramUniform2ivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2ivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniform3ivEXT$MH,"glProgramUniform3ivEXT");
    }
    public static void glProgramUniform3ivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3ivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniform4ivEXT$MH,"glProgramUniform4ivEXT");
    }
    public static void glProgramUniform4ivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4ivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniformMatrix2fvEXT$MH,"glProgramUniformMatrix2fvEXT");
    }
    public static void glProgramUniformMatrix2fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniformMatrix3fvEXT$MH,"glProgramUniformMatrix3fvEXT");
    }
    public static void glProgramUniformMatrix3fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniformMatrix4fvEXT$MH,"glProgramUniformMatrix4fvEXT");
    }
    public static void glProgramUniformMatrix4fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$863.glProgramUniformMatrix2x3fvEXT$MH,"glProgramUniformMatrix2x3fvEXT");
    }
    public static void glProgramUniformMatrix2x3fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x3fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x2fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glProgramUniformMatrix3x2fvEXT$MH,"glProgramUniformMatrix3x2fvEXT");
    }
    public static void glProgramUniformMatrix3x2fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x2fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glProgramUniformMatrix2x4fvEXT$MH,"glProgramUniformMatrix2x4fvEXT");
    }
    public static void glProgramUniformMatrix2x4fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x4fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x2fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glProgramUniformMatrix4x2fvEXT$MH,"glProgramUniformMatrix4x2fvEXT");
    }
    public static void glProgramUniformMatrix4x2fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x2fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glProgramUniformMatrix3x4fvEXT$MH,"glProgramUniformMatrix3x4fvEXT");
    }
    public static void glProgramUniformMatrix3x4fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x4fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glProgramUniformMatrix4x3fvEXT$MH,"glProgramUniformMatrix4x3fvEXT");
    }
    public static void glProgramUniformMatrix4x3fvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x3fvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$864.glTextureBufferEXT$MH,"glTextureBufferEXT");
    }
    public static void glTextureBufferEXT ( int texture,  int target,  int internalformat,  int buffer) {
        var mh$ = glTextureBufferEXT$MH();
        try {
            mh$.invokeExact(texture, target, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glMultiTexBufferEXT$MH,"glMultiTexBufferEXT");
    }
    public static void glMultiTexBufferEXT ( int texunit,  int target,  int internalformat,  int buffer) {
        var mh$ = glMultiTexBufferEXT$MH();
        try {
            mh$.invokeExact(texunit, target, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glTextureParameterIivEXT$MH,"glTextureParameterIivEXT");
    }
    public static void glTextureParameterIivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glTextureParameterIivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glTextureParameterIuivEXT$MH,"glTextureParameterIuivEXT");
    }
    public static void glTextureParameterIuivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glTextureParameterIuivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glGetTextureParameterIivEXT$MH,"glGetTextureParameterIivEXT");
    }
    public static void glGetTextureParameterIivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterIivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glGetTextureParameterIuivEXT$MH,"glGetTextureParameterIuivEXT");
    }
    public static void glGetTextureParameterIuivEXT ( int texture,  int target,  int pname,  Addressable params) {
        var mh$ = glGetTextureParameterIuivEXT$MH();
        try {
            mh$.invokeExact(texture, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$865.glMultiTexParameterIivEXT$MH,"glMultiTexParameterIivEXT");
    }
    public static void glMultiTexParameterIivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glMultiTexParameterIuivEXT$MH,"glMultiTexParameterIuivEXT");
    }
    public static void glMultiTexParameterIuivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glMultiTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glGetMultiTexParameterIivEXT$MH,"glGetMultiTexParameterIivEXT");
    }
    public static void glGetMultiTexParameterIivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultiTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glGetMultiTexParameterIuivEXT$MH,"glGetMultiTexParameterIuivEXT");
    }
    public static void glGetMultiTexParameterIuivEXT ( int texunit,  int target,  int pname,  Addressable params) {
        var mh$ = glGetMultiTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(texunit, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glProgramUniform1uiEXT$MH,"glProgramUniform1uiEXT");
    }
    public static void glProgramUniform1uiEXT ( int program,  int location,  int v0) {
        var mh$ = glProgramUniform1uiEXT$MH();
        try {
            mh$.invokeExact(program, location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glProgramUniform2uiEXT$MH,"glProgramUniform2uiEXT");
    }
    public static void glProgramUniform2uiEXT ( int program,  int location,  int v0,  int v1) {
        var mh$ = glProgramUniform2uiEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$866.glProgramUniform3uiEXT$MH,"glProgramUniform3uiEXT");
    }
    public static void glProgramUniform3uiEXT ( int program,  int location,  int v0,  int v1,  int v2) {
        var mh$ = glProgramUniform3uiEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glProgramUniform4uiEXT$MH,"glProgramUniform4uiEXT");
    }
    public static void glProgramUniform4uiEXT ( int program,  int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glProgramUniform4uiEXT$MH();
        try {
            mh$.invokeExact(program, location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glProgramUniform1uivEXT$MH,"glProgramUniform1uivEXT");
    }
    public static void glProgramUniform1uivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1uivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glProgramUniform2uivEXT$MH,"glProgramUniform2uivEXT");
    }
    public static void glProgramUniform2uivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2uivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glProgramUniform3uivEXT$MH,"glProgramUniform3uivEXT");
    }
    public static void glProgramUniform3uivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3uivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glProgramUniform4uivEXT$MH,"glProgramUniform4uivEXT");
    }
    public static void glProgramUniform4uivEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4uivEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$867.glNamedProgramLocalParameters4fvEXT$MH,"glNamedProgramLocalParameters4fvEXT");
    }
    public static void glNamedProgramLocalParameters4fvEXT ( int program,  int target,  int index,  int count,  Addressable params) {
        var mh$ = glNamedProgramLocalParameters4fvEXT$MH();
        try {
            mh$.invokeExact(program, target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameterI4iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParameterI4iEXT$MH,"glNamedProgramLocalParameterI4iEXT");
    }
    public static void glNamedProgramLocalParameterI4iEXT ( int program,  int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glNamedProgramLocalParameterI4iEXT$MH();
        try {
            mh$.invokeExact(program, target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameterI4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParameterI4ivEXT$MH,"glNamedProgramLocalParameterI4ivEXT");
    }
    public static void glNamedProgramLocalParameterI4ivEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glNamedProgramLocalParameterI4ivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParametersI4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParametersI4ivEXT$MH,"glNamedProgramLocalParametersI4ivEXT");
    }
    public static void glNamedProgramLocalParametersI4ivEXT ( int program,  int target,  int index,  int count,  Addressable params) {
        var mh$ = glNamedProgramLocalParametersI4ivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameterI4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParameterI4uiEXT$MH,"glNamedProgramLocalParameterI4uiEXT");
    }
    public static void glNamedProgramLocalParameterI4uiEXT ( int program,  int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glNamedProgramLocalParameterI4uiEXT$MH();
        try {
            mh$.invokeExact(program, target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameterI4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParameterI4uivEXT$MH,"glNamedProgramLocalParameterI4uivEXT");
    }
    public static void glNamedProgramLocalParameterI4uivEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glNamedProgramLocalParameterI4uivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParametersI4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$868.glNamedProgramLocalParametersI4uivEXT$MH,"glNamedProgramLocalParametersI4uivEXT");
    }
    public static void glNamedProgramLocalParametersI4uivEXT ( int program,  int target,  int index,  int count,  Addressable params) {
        var mh$ = glNamedProgramLocalParametersI4uivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramLocalParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glGetNamedProgramLocalParameterIivEXT$MH,"glGetNamedProgramLocalParameterIivEXT");
    }
    public static void glGetNamedProgramLocalParameterIivEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glGetNamedProgramLocalParameterIivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramLocalParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glGetNamedProgramLocalParameterIuivEXT$MH,"glGetNamedProgramLocalParameterIuivEXT");
    }
    public static void glGetNamedProgramLocalParameterIuivEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glGetNamedProgramLocalParameterIuivEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientStateiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glEnableClientStateiEXT$MH,"glEnableClientStateiEXT");
    }
    public static void glEnableClientStateiEXT ( int array,  int index) {
        var mh$ = glEnableClientStateiEXT$MH();
        try {
            mh$.invokeExact(array, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientStateiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glDisableClientStateiEXT$MH,"glDisableClientStateiEXT");
    }
    public static void glDisableClientStateiEXT ( int array,  int index) {
        var mh$ = glDisableClientStateiEXT$MH();
        try {
            mh$.invokeExact(array, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloati_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glGetFloati_vEXT$MH,"glGetFloati_vEXT");
    }
    public static void glGetFloati_vEXT ( int pname,  int index,  Addressable params) {
        var mh$ = glGetFloati_vEXT$MH();
        try {
            mh$.invokeExact(pname, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublei_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$869.glGetDoublei_vEXT$MH,"glGetDoublei_vEXT");
    }
    public static void glGetDoublei_vEXT ( int pname,  int index,  Addressable params) {
        var mh$ = glGetDoublei_vEXT$MH();
        try {
            mh$.invokeExact(pname, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointeri_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glGetPointeri_vEXT$MH,"glGetPointeri_vEXT");
    }
    public static void glGetPointeri_vEXT ( int pname,  int index,  Addressable params) {
        var mh$ = glGetPointeri_vEXT$MH();
        try {
            mh$.invokeExact(pname, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramStringEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glNamedProgramStringEXT$MH,"glNamedProgramStringEXT");
    }
    public static void glNamedProgramStringEXT ( int program,  int target,  int format,  int len,  Addressable string) {
        var mh$ = glNamedProgramStringEXT$MH();
        try {
            mh$.invokeExact(program, target, format, len, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameter4dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glNamedProgramLocalParameter4dEXT$MH,"glNamedProgramLocalParameter4dEXT");
    }
    public static void glNamedProgramLocalParameter4dEXT ( int program,  int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glNamedProgramLocalParameter4dEXT$MH();
        try {
            mh$.invokeExact(program, target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameter4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glNamedProgramLocalParameter4dvEXT$MH,"glNamedProgramLocalParameter4dvEXT");
    }
    public static void glNamedProgramLocalParameter4dvEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glNamedProgramLocalParameter4dvEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameter4fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glNamedProgramLocalParameter4fEXT$MH,"glNamedProgramLocalParameter4fEXT");
    }
    public static void glNamedProgramLocalParameter4fEXT ( int program,  int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glNamedProgramLocalParameter4fEXT$MH();
        try {
            mh$.invokeExact(program, target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedProgramLocalParameter4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$870.glNamedProgramLocalParameter4fvEXT$MH,"glNamedProgramLocalParameter4fvEXT");
    }
    public static void glNamedProgramLocalParameter4fvEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glNamedProgramLocalParameter4fvEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramLocalParameterdvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glGetNamedProgramLocalParameterdvEXT$MH,"glGetNamedProgramLocalParameterdvEXT");
    }
    public static void glGetNamedProgramLocalParameterdvEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glGetNamedProgramLocalParameterdvEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramLocalParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glGetNamedProgramLocalParameterfvEXT$MH,"glGetNamedProgramLocalParameterfvEXT");
    }
    public static void glGetNamedProgramLocalParameterfvEXT ( int program,  int target,  int index,  Addressable params) {
        var mh$ = glGetNamedProgramLocalParameterfvEXT$MH();
        try {
            mh$.invokeExact(program, target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glGetNamedProgramivEXT$MH,"glGetNamedProgramivEXT");
    }
    public static void glGetNamedProgramivEXT ( int program,  int target,  int pname,  Addressable params) {
        var mh$ = glGetNamedProgramivEXT$MH();
        try {
            mh$.invokeExact(program, target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedProgramStringEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glGetNamedProgramStringEXT$MH,"glGetNamedProgramStringEXT");
    }
    public static void glGetNamedProgramStringEXT ( int program,  int target,  int pname,  Addressable string) {
        var mh$ = glGetNamedProgramStringEXT$MH();
        try {
            mh$.invokeExact(program, target, pname, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glNamedRenderbufferStorageEXT$MH,"glNamedRenderbufferStorageEXT");
    }
    public static void glNamedRenderbufferStorageEXT ( int renderbuffer,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorageEXT$MH();
        try {
            mh$.invokeExact(renderbuffer, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedRenderbufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$871.glGetNamedRenderbufferParameterivEXT$MH,"glGetNamedRenderbufferParameterivEXT");
    }
    public static void glGetNamedRenderbufferParameterivEXT ( int renderbuffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedRenderbufferParameterivEXT$MH();
        try {
            mh$.invokeExact(renderbuffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorageMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glNamedRenderbufferStorageMultisampleEXT$MH,"glNamedRenderbufferStorageMultisampleEXT");
    }
    public static void glNamedRenderbufferStorageMultisampleEXT ( int renderbuffer,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorageMultisampleEXT$MH();
        try {
            mh$.invokeExact(renderbuffer, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedRenderbufferStorageMultisampleCoverageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glNamedRenderbufferStorageMultisampleCoverageEXT$MH,"glNamedRenderbufferStorageMultisampleCoverageEXT");
    }
    public static void glNamedRenderbufferStorageMultisampleCoverageEXT ( int renderbuffer,  int coverageSamples,  int colorSamples,  int internalformat,  int width,  int height) {
        var mh$ = glNamedRenderbufferStorageMultisampleCoverageEXT$MH();
        try {
            mh$.invokeExact(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckNamedFramebufferStatusEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glCheckNamedFramebufferStatusEXT$MH,"glCheckNamedFramebufferStatusEXT");
    }
    public static int glCheckNamedFramebufferStatusEXT ( int framebuffer,  int target) {
        var mh$ = glCheckNamedFramebufferStatusEXT$MH();
        try {
            return (int)mh$.invokeExact(framebuffer, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTexture1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glNamedFramebufferTexture1DEXT$MH,"glNamedFramebufferTexture1DEXT");
    }
    public static void glNamedFramebufferTexture1DEXT ( int framebuffer,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glNamedFramebufferTexture1DEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTexture2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glNamedFramebufferTexture2DEXT$MH,"glNamedFramebufferTexture2DEXT");
    }
    public static void glNamedFramebufferTexture2DEXT ( int framebuffer,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glNamedFramebufferTexture2DEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTexture3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$872.glNamedFramebufferTexture3DEXT$MH,"glNamedFramebufferTexture3DEXT");
    }
    public static void glNamedFramebufferTexture3DEXT ( int framebuffer,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glNamedFramebufferTexture3DEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glNamedFramebufferRenderbufferEXT$MH,"glNamedFramebufferRenderbufferEXT");
    }
    public static void glNamedFramebufferRenderbufferEXT ( int framebuffer,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glNamedFramebufferRenderbufferEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedFramebufferAttachmentParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glGetNamedFramebufferAttachmentParameterivEXT$MH,"glGetNamedFramebufferAttachmentParameterivEXT");
    }
    public static void glGetNamedFramebufferAttachmentParameterivEXT ( int framebuffer,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetNamedFramebufferAttachmentParameterivEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateTextureMipmapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glGenerateTextureMipmapEXT$MH,"glGenerateTextureMipmapEXT");
    }
    public static void glGenerateTextureMipmapEXT ( int texture,  int target) {
        var mh$ = glGenerateTextureMipmapEXT$MH();
        try {
            mh$.invokeExact(texture, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMultiTexMipmapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glGenerateMultiTexMipmapEXT$MH,"glGenerateMultiTexMipmapEXT");
    }
    public static void glGenerateMultiTexMipmapEXT ( int texunit,  int target) {
        var mh$ = glGenerateMultiTexMipmapEXT$MH();
        try {
            mh$.invokeExact(texunit, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferDrawBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glFramebufferDrawBufferEXT$MH,"glFramebufferDrawBufferEXT");
    }
    public static void glFramebufferDrawBufferEXT ( int framebuffer,  int mode) {
        var mh$ = glFramebufferDrawBufferEXT$MH();
        try {
            mh$.invokeExact(framebuffer, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferDrawBuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$873.glFramebufferDrawBuffersEXT$MH,"glFramebufferDrawBuffersEXT");
    }
    public static void glFramebufferDrawBuffersEXT ( int framebuffer,  int n,  Addressable bufs) {
        var mh$ = glFramebufferDrawBuffersEXT$MH();
        try {
            mh$.invokeExact(framebuffer, n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferReadBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glFramebufferReadBufferEXT$MH,"glFramebufferReadBufferEXT");
    }
    public static void glFramebufferReadBufferEXT ( int framebuffer,  int mode) {
        var mh$ = glFramebufferReadBufferEXT$MH();
        try {
            mh$.invokeExact(framebuffer, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glGetFramebufferParameterivEXT$MH,"glGetFramebufferParameterivEXT");
    }
    public static void glGetFramebufferParameterivEXT ( int framebuffer,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferParameterivEXT$MH();
        try {
            mh$.invokeExact(framebuffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedCopyBufferSubDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glNamedCopyBufferSubDataEXT$MH,"glNamedCopyBufferSubDataEXT");
    }
    public static void glNamedCopyBufferSubDataEXT ( int readBuffer,  int writeBuffer,  long readOffset,  long writeOffset,  long size) {
        var mh$ = glNamedCopyBufferSubDataEXT$MH();
        try {
            mh$.invokeExact(readBuffer, writeBuffer, readOffset, writeOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glNamedFramebufferTextureEXT$MH,"glNamedFramebufferTextureEXT");
    }
    public static void glNamedFramebufferTextureEXT ( int framebuffer,  int attachment,  int texture,  int level) {
        var mh$ = glNamedFramebufferTextureEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTextureLayerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glNamedFramebufferTextureLayerEXT$MH,"glNamedFramebufferTextureLayerEXT");
    }
    public static void glNamedFramebufferTextureLayerEXT ( int framebuffer,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glNamedFramebufferTextureLayerEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferTextureFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$874.glNamedFramebufferTextureFaceEXT$MH,"glNamedFramebufferTextureFaceEXT");
    }
    public static void glNamedFramebufferTextureFaceEXT ( int framebuffer,  int attachment,  int texture,  int level,  int face) {
        var mh$ = glNamedFramebufferTextureFaceEXT$MH();
        try {
            mh$.invokeExact(framebuffer, attachment, texture, level, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glTextureRenderbufferEXT$MH,"glTextureRenderbufferEXT");
    }
    public static void glTextureRenderbufferEXT ( int texture,  int target,  int renderbuffer) {
        var mh$ = glTextureRenderbufferEXT$MH();
        try {
            mh$.invokeExact(texture, target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glMultiTexRenderbufferEXT$MH,"glMultiTexRenderbufferEXT");
    }
    public static void glMultiTexRenderbufferEXT ( int texunit,  int target,  int renderbuffer) {
        var mh$ = glMultiTexRenderbufferEXT$MH();
        try {
            mh$.invokeExact(texunit, target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glVertexArrayVertexOffsetEXT$MH,"glVertexArrayVertexOffsetEXT");
    }
    public static void glVertexArrayVertexOffsetEXT ( int vaobj,  int buffer,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayVertexOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayColorOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glVertexArrayColorOffsetEXT$MH,"glVertexArrayColorOffsetEXT");
    }
    public static void glVertexArrayColorOffsetEXT ( int vaobj,  int buffer,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayColorOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayEdgeFlagOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glVertexArrayEdgeFlagOffsetEXT$MH,"glVertexArrayEdgeFlagOffsetEXT");
    }
    public static void glVertexArrayEdgeFlagOffsetEXT ( int vaobj,  int buffer,  int stride,  long offset) {
        var mh$ = glVertexArrayEdgeFlagOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayIndexOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$875.glVertexArrayIndexOffsetEXT$MH,"glVertexArrayIndexOffsetEXT");
    }
    public static void glVertexArrayIndexOffsetEXT ( int vaobj,  int buffer,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayIndexOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayNormalOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArrayNormalOffsetEXT$MH,"glVertexArrayNormalOffsetEXT");
    }
    public static void glVertexArrayNormalOffsetEXT ( int vaobj,  int buffer,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayNormalOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayTexCoordOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArrayTexCoordOffsetEXT$MH,"glVertexArrayTexCoordOffsetEXT");
    }
    public static void glVertexArrayTexCoordOffsetEXT ( int vaobj,  int buffer,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayTexCoordOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayMultiTexCoordOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArrayMultiTexCoordOffsetEXT$MH,"glVertexArrayMultiTexCoordOffsetEXT");
    }
    public static void glVertexArrayMultiTexCoordOffsetEXT ( int vaobj,  int buffer,  int texunit,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayMultiTexCoordOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, texunit, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayFogCoordOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArrayFogCoordOffsetEXT$MH,"glVertexArrayFogCoordOffsetEXT");
    }
    public static void glVertexArrayFogCoordOffsetEXT ( int vaobj,  int buffer,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayFogCoordOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArraySecondaryColorOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArraySecondaryColorOffsetEXT$MH,"glVertexArraySecondaryColorOffsetEXT");
    }
    public static void glVertexArraySecondaryColorOffsetEXT ( int vaobj,  int buffer,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArraySecondaryColorOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$876.glVertexArrayVertexAttribOffsetEXT$MH,"glVertexArrayVertexAttribOffsetEXT");
    }
    public static void glVertexArrayVertexAttribOffsetEXT ( int vaobj,  int buffer,  int index,  int size,  int type,  byte normalized,  int stride,  long offset) {
        var mh$ = glVertexArrayVertexAttribOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, index, size, type, normalized, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribIOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glVertexArrayVertexAttribIOffsetEXT$MH,"glVertexArrayVertexAttribIOffsetEXT");
    }
    public static void glVertexArrayVertexAttribIOffsetEXT ( int vaobj,  int buffer,  int index,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayVertexAttribIOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, index, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexArrayEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glEnableVertexArrayEXT$MH,"glEnableVertexArrayEXT");
    }
    public static void glEnableVertexArrayEXT ( int vaobj,  int array) {
        var mh$ = glEnableVertexArrayEXT$MH();
        try {
            mh$.invokeExact(vaobj, array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexArrayEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glDisableVertexArrayEXT$MH,"glDisableVertexArrayEXT");
    }
    public static void glDisableVertexArrayEXT ( int vaobj,  int array) {
        var mh$ = glDisableVertexArrayEXT$MH();
        try {
            mh$.invokeExact(vaobj, array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexArrayAttribEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glEnableVertexArrayAttribEXT$MH,"glEnableVertexArrayAttribEXT");
    }
    public static void glEnableVertexArrayAttribEXT ( int vaobj,  int index) {
        var mh$ = glEnableVertexArrayAttribEXT$MH();
        try {
            mh$.invokeExact(vaobj, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexArrayAttribEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glDisableVertexArrayAttribEXT$MH,"glDisableVertexArrayAttribEXT");
    }
    public static void glDisableVertexArrayAttribEXT ( int vaobj,  int index) {
        var mh$ = glDisableVertexArrayAttribEXT$MH();
        try {
            mh$.invokeExact(vaobj, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayIntegervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$877.glGetVertexArrayIntegervEXT$MH,"glGetVertexArrayIntegervEXT");
    }
    public static void glGetVertexArrayIntegervEXT ( int vaobj,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayIntegervEXT$MH();
        try {
            mh$.invokeExact(vaobj, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayPointervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glGetVertexArrayPointervEXT$MH,"glGetVertexArrayPointervEXT");
    }
    public static void glGetVertexArrayPointervEXT ( int vaobj,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayPointervEXT$MH();
        try {
            mh$.invokeExact(vaobj, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayIntegeri_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glGetVertexArrayIntegeri_vEXT$MH,"glGetVertexArrayIntegeri_vEXT");
    }
    public static void glGetVertexArrayIntegeri_vEXT ( int vaobj,  int index,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayIntegeri_vEXT$MH();
        try {
            mh$.invokeExact(vaobj, index, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexArrayPointeri_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glGetVertexArrayPointeri_vEXT$MH,"glGetVertexArrayPointeri_vEXT");
    }
    public static void glGetVertexArrayPointeri_vEXT ( int vaobj,  int index,  int pname,  Addressable param) {
        var mh$ = glGetVertexArrayPointeri_vEXT$MH();
        try {
            mh$.invokeExact(vaobj, index, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapNamedBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glMapNamedBufferRangeEXT$MH,"glMapNamedBufferRangeEXT");
    }
    public static MemoryAddress glMapNamedBufferRangeEXT ( int buffer,  long offset,  long length,  int access) {
        var mh$ = glMapNamedBufferRangeEXT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, offset, length, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedNamedBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glFlushMappedNamedBufferRangeEXT$MH,"glFlushMappedNamedBufferRangeEXT");
    }
    public static void glFlushMappedNamedBufferRangeEXT ( int buffer,  long offset,  long length) {
        var mh$ = glFlushMappedNamedBufferRangeEXT$MH();
        try {
            mh$.invokeExact(buffer, offset, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$878.glNamedBufferStorageEXT$MH,"glNamedBufferStorageEXT");
    }
    public static void glNamedBufferStorageEXT ( int buffer,  long size,  Addressable data,  int flags) {
        var mh$ = glNamedBufferStorageEXT$MH();
        try {
            mh$.invokeExact(buffer, size, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedBufferDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glClearNamedBufferDataEXT$MH,"glClearNamedBufferDataEXT");
    }
    public static void glClearNamedBufferDataEXT ( int buffer,  int internalformat,  int format,  int type,  Addressable data) {
        var mh$ = glClearNamedBufferDataEXT$MH();
        try {
            mh$.invokeExact(buffer, internalformat, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearNamedBufferSubDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glClearNamedBufferSubDataEXT$MH,"glClearNamedBufferSubDataEXT");
    }
    public static void glClearNamedBufferSubDataEXT ( int buffer,  int internalformat,  long offset,  long size,  int format,  int type,  Addressable data) {
        var mh$ = glClearNamedBufferSubDataEXT$MH();
        try {
            mh$.invokeExact(buffer, internalformat, offset, size, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glNamedFramebufferParameteriEXT$MH,"glNamedFramebufferParameteriEXT");
    }
    public static void glNamedFramebufferParameteriEXT ( int framebuffer,  int pname,  int param) {
        var mh$ = glNamedFramebufferParameteriEXT$MH();
        try {
            mh$.invokeExact(framebuffer, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedFramebufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glGetNamedFramebufferParameterivEXT$MH,"glGetNamedFramebufferParameterivEXT");
    }
    public static void glGetNamedFramebufferParameterivEXT ( int framebuffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedFramebufferParameterivEXT$MH();
        try {
            mh$.invokeExact(framebuffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glProgramUniform1dEXT$MH,"glProgramUniform1dEXT");
    }
    public static void glProgramUniform1dEXT ( int program,  int location,  double x) {
        var mh$ = glProgramUniform1dEXT$MH();
        try {
            mh$.invokeExact(program, location, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$879.glProgramUniform2dEXT$MH,"glProgramUniform2dEXT");
    }
    public static void glProgramUniform2dEXT ( int program,  int location,  double x,  double y) {
        var mh$ = glProgramUniform2dEXT$MH();
        try {
            mh$.invokeExact(program, location, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform3dEXT$MH,"glProgramUniform3dEXT");
    }
    public static void glProgramUniform3dEXT ( int program,  int location,  double x,  double y,  double z) {
        var mh$ = glProgramUniform3dEXT$MH();
        try {
            mh$.invokeExact(program, location, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform4dEXT$MH,"glProgramUniform4dEXT");
    }
    public static void glProgramUniform4dEXT ( int program,  int location,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramUniform4dEXT$MH();
        try {
            mh$.invokeExact(program, location, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform1dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform1dvEXT$MH,"glProgramUniform1dvEXT");
    }
    public static void glProgramUniform1dvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform1dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform2dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform2dvEXT$MH,"glProgramUniform2dvEXT");
    }
    public static void glProgramUniform2dvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform2dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform3dvEXT$MH,"glProgramUniform3dvEXT");
    }
    public static void glProgramUniform3dvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform3dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniform4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$880.glProgramUniform4dvEXT$MH,"glProgramUniform4dvEXT");
    }
    public static void glProgramUniform4dvEXT ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniform4dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix2dvEXT$MH,"glProgramUniformMatrix2dvEXT");
    }
    public static void glProgramUniformMatrix2dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix3dvEXT$MH,"glProgramUniformMatrix3dvEXT");
    }
    public static void glProgramUniformMatrix3dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix4dvEXT$MH,"glProgramUniformMatrix4dvEXT");
    }
    public static void glProgramUniformMatrix4dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix2x3dvEXT$MH,"glProgramUniformMatrix2x3dvEXT");
    }
    public static void glProgramUniformMatrix2x3dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x3dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix2x4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix2x4dvEXT$MH,"glProgramUniformMatrix2x4dvEXT");
    }
    public static void glProgramUniformMatrix2x4dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix2x4dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x2dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$881.glProgramUniformMatrix3x2dvEXT$MH,"glProgramUniformMatrix3x2dvEXT");
    }
    public static void glProgramUniformMatrix3x2dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x2dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix3x4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glProgramUniformMatrix3x4dvEXT$MH,"glProgramUniformMatrix3x4dvEXT");
    }
    public static void glProgramUniformMatrix3x4dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix3x4dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x2dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glProgramUniformMatrix4x2dvEXT$MH,"glProgramUniformMatrix4x2dvEXT");
    }
    public static void glProgramUniformMatrix4x2dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x2dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformMatrix4x3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glProgramUniformMatrix4x3dvEXT$MH,"glProgramUniformMatrix4x3dvEXT");
    }
    public static void glProgramUniformMatrix4x3dvEXT ( int program,  int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glProgramUniformMatrix4x3dvEXT$MH();
        try {
            mh$.invokeExact(program, location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glTextureBufferRangeEXT$MH,"glTextureBufferRangeEXT");
    }
    public static void glTextureBufferRangeEXT ( int texture,  int target,  int internalformat,  int buffer,  long offset,  long size) {
        var mh$ = glTextureBufferRangeEXT$MH();
        try {
            mh$.invokeExact(texture, target, internalformat, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glTextureStorage1DEXT$MH,"glTextureStorage1DEXT");
    }
    public static void glTextureStorage1DEXT ( int texture,  int target,  int levels,  int internalformat,  int width) {
        var mh$ = glTextureStorage1DEXT$MH();
        try {
            mh$.invokeExact(texture, target, levels, internalformat, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$882.glTextureStorage2DEXT$MH,"glTextureStorage2DEXT");
    }
    public static void glTextureStorage2DEXT ( int texture,  int target,  int levels,  int internalformat,  int width,  int height) {
        var mh$ = glTextureStorage2DEXT$MH();
        try {
            mh$.invokeExact(texture, target, levels, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glTextureStorage3DEXT$MH,"glTextureStorage3DEXT");
    }
    public static void glTextureStorage3DEXT ( int texture,  int target,  int levels,  int internalformat,  int width,  int height,  int depth) {
        var mh$ = glTextureStorage3DEXT$MH();
        try {
            mh$.invokeExact(texture, target, levels, internalformat, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage2DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glTextureStorage2DMultisampleEXT$MH,"glTextureStorage2DMultisampleEXT");
    }
    public static void glTextureStorage2DMultisampleEXT ( int texture,  int target,  int samples,  int internalformat,  int width,  int height,  byte fixedsamplelocations) {
        var mh$ = glTextureStorage2DMultisampleEXT$MH();
        try {
            mh$.invokeExact(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorage3DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glTextureStorage3DMultisampleEXT$MH,"glTextureStorage3DMultisampleEXT");
    }
    public static void glTextureStorage3DMultisampleEXT ( int texture,  int target,  int samples,  int internalformat,  int width,  int height,  int depth,  byte fixedsamplelocations) {
        var mh$ = glTextureStorage3DMultisampleEXT$MH();
        try {
            mh$.invokeExact(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayBindVertexBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glVertexArrayBindVertexBufferEXT$MH,"glVertexArrayBindVertexBufferEXT");
    }
    public static void glVertexArrayBindVertexBufferEXT ( int vaobj,  int bindingindex,  int buffer,  long offset,  int stride) {
        var mh$ = glVertexArrayBindVertexBufferEXT$MH();
        try {
            mh$.invokeExact(vaobj, bindingindex, buffer, offset, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribFormatEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glVertexArrayVertexAttribFormatEXT$MH,"glVertexArrayVertexAttribFormatEXT");
    }
    public static void glVertexArrayVertexAttribFormatEXT ( int vaobj,  int attribindex,  int size,  int type,  byte normalized,  int relativeoffset) {
        var mh$ = glVertexArrayVertexAttribFormatEXT$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, normalized, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribIFormatEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$883.glVertexArrayVertexAttribIFormatEXT$MH,"glVertexArrayVertexAttribIFormatEXT");
    }
    public static void glVertexArrayVertexAttribIFormatEXT ( int vaobj,  int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexArrayVertexAttribIFormatEXT$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribLFormatEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glVertexArrayVertexAttribLFormatEXT$MH,"glVertexArrayVertexAttribLFormatEXT");
    }
    public static void glVertexArrayVertexAttribLFormatEXT ( int vaobj,  int attribindex,  int size,  int type,  int relativeoffset) {
        var mh$ = glVertexArrayVertexAttribLFormatEXT$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, size, type, relativeoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribBindingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glVertexArrayVertexAttribBindingEXT$MH,"glVertexArrayVertexAttribBindingEXT");
    }
    public static void glVertexArrayVertexAttribBindingEXT ( int vaobj,  int attribindex,  int bindingindex) {
        var mh$ = glVertexArrayVertexAttribBindingEXT$MH();
        try {
            mh$.invokeExact(vaobj, attribindex, bindingindex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexBindingDivisorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glVertexArrayVertexBindingDivisorEXT$MH,"glVertexArrayVertexBindingDivisorEXT");
    }
    public static void glVertexArrayVertexBindingDivisorEXT ( int vaobj,  int bindingindex,  int divisor) {
        var mh$ = glVertexArrayVertexBindingDivisorEXT$MH();
        try {
            mh$.invokeExact(vaobj, bindingindex, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribLOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glVertexArrayVertexAttribLOffsetEXT$MH,"glVertexArrayVertexAttribLOffsetEXT");
    }
    public static void glVertexArrayVertexAttribLOffsetEXT ( int vaobj,  int buffer,  int index,  int size,  int type,  int stride,  long offset) {
        var mh$ = glVertexArrayVertexAttribLOffsetEXT$MH();
        try {
            mh$.invokeExact(vaobj, buffer, index, size, type, stride, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexturePageCommitmentEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glTexturePageCommitmentEXT$MH,"glTexturePageCommitmentEXT");
    }
    public static void glTexturePageCommitmentEXT ( int texture,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  byte commit) {
        var mh$ = glTexturePageCommitmentEXT$MH();
        try {
            mh$.invokeExact(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayVertexAttribDivisorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$884.glVertexArrayVertexAttribDivisorEXT$MH,"glVertexArrayVertexAttribDivisorEXT");
    }
    public static void glVertexArrayVertexAttribDivisorEXT ( int vaobj,  int index,  int divisor) {
        var mh$ = glVertexArrayVertexAttribDivisorEXT$MH();
        try {
            mh$.invokeExact(vaobj, index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaskIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$885.glColorMaskIndexedEXT$MH,"glColorMaskIndexedEXT");
    }
    public static void glColorMaskIndexedEXT ( int index,  byte r,  byte g,  byte b,  byte a) {
        var mh$ = glColorMaskIndexedEXT$MH();
        try {
            mh$.invokeExact(index, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstancedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$886.glDrawArraysInstancedEXT$MH,"glDrawArraysInstancedEXT");
    }
    public static void glDrawArraysInstancedEXT ( int mode,  int start,  int count,  int primcount) {
        var mh$ = glDrawArraysInstancedEXT$MH();
        try {
            mh$.invokeExact(mode, start, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$886.glDrawElementsInstancedEXT$MH,"glDrawElementsInstancedEXT");
    }
    public static void glDrawElementsInstancedEXT ( int mode,  int count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glDrawElementsInstancedEXT$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$886.glDrawRangeElementsEXT$MH,"glDrawRangeElementsEXT");
    }
    public static void glDrawRangeElementsEXT ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElementsEXT$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GLeglClientBufferEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glBufferStorageExternalEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$887.glBufferStorageExternalEXT$MH,"glBufferStorageExternalEXT");
    }
    public static void glBufferStorageExternalEXT ( int target,  long offset,  long size,  Addressable clientBuffer,  int flags) {
        var mh$ = glBufferStorageExternalEXT$MH();
        try {
            mh$.invokeExact(target, offset, size, clientBuffer, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferStorageExternalEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$887.glNamedBufferStorageExternalEXT$MH,"glNamedBufferStorageExternalEXT");
    }
    public static void glNamedBufferStorageExternalEXT ( int buffer,  long offset,  long size,  Addressable clientBuffer,  int flags) {
        var mh$ = glNamedBufferStorageExternalEXT$MH();
        try {
            mh$.invokeExact(buffer, offset, size, clientBuffer, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$889.glFogCoordfEXT$MH,"glFogCoordfEXT");
    }
    public static void glFogCoordfEXT ( float coord) {
        var mh$ = glFogCoordfEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$889.glFogCoordfvEXT$MH,"glFogCoordfvEXT");
    }
    public static void glFogCoordfvEXT ( Addressable coord) {
        var mh$ = glFogCoordfvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$890.glFogCoorddEXT$MH,"glFogCoorddEXT");
    }
    public static void glFogCoorddEXT ( double coord) {
        var mh$ = glFogCoorddEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$890.glFogCoorddvEXT$MH,"glFogCoorddvEXT");
    }
    public static void glFogCoorddvEXT ( Addressable coord) {
        var mh$ = glFogCoorddvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$890.glFogCoordPointerEXT$MH,"glFogCoordPointerEXT");
    }
    public static void glFogCoordPointerEXT ( int type,  int stride,  Addressable pointer) {
        var mh$ = glFogCoordPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$890.glBlitFramebufferEXT$MH,"glBlitFramebufferEXT");
    }
    public static void glBlitFramebufferEXT ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebufferEXT$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$891.glRenderbufferStorageMultisampleEXT$MH,"glRenderbufferStorageMultisampleEXT");
    }
    public static void glRenderbufferStorageMultisampleEXT ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisampleEXT$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.glIsRenderbufferEXT$MH,"glIsRenderbufferEXT");
    }
    public static byte glIsRenderbufferEXT ( int renderbuffer) {
        var mh$ = glIsRenderbufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.glBindRenderbufferEXT$MH,"glBindRenderbufferEXT");
    }
    public static void glBindRenderbufferEXT ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.glDeleteRenderbuffersEXT$MH,"glDeleteRenderbuffersEXT");
    }
    public static void glDeleteRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.glGenRenderbuffersEXT$MH,"glGenRenderbuffersEXT");
    }
    public static void glGenRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$897.glRenderbufferStorageEXT$MH,"glRenderbufferStorageEXT");
    }
    public static void glRenderbufferStorageEXT ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glGetRenderbufferParameterivEXT$MH,"glGetRenderbufferParameterivEXT");
    }
    public static void glGetRenderbufferParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glIsFramebufferEXT$MH,"glIsFramebufferEXT");
    }
    public static byte glIsFramebufferEXT ( int framebuffer) {
        var mh$ = glIsFramebufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glBindFramebufferEXT$MH,"glBindFramebufferEXT");
    }
    public static void glBindFramebufferEXT ( int target,  int framebuffer) {
        var mh$ = glBindFramebufferEXT$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glDeleteFramebuffersEXT$MH,"glDeleteFramebuffersEXT");
    }
    public static void glDeleteFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glGenFramebuffersEXT$MH,"glGenFramebuffersEXT");
    }
    public static void glGenFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatusEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$898.glCheckFramebufferStatusEXT$MH,"glCheckFramebufferStatusEXT");
    }
    public static int glCheckFramebufferStatusEXT ( int target) {
        var mh$ = glCheckFramebufferStatusEXT$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glFramebufferTexture1DEXT$MH,"glFramebufferTexture1DEXT");
    }
    public static void glFramebufferTexture1DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glFramebufferTexture2DEXT$MH,"glFramebufferTexture2DEXT");
    }
    public static void glFramebufferTexture2DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glFramebufferTexture3DEXT$MH,"glFramebufferTexture3DEXT");
    }
    public static void glFramebufferTexture3DEXT ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glFramebufferRenderbufferEXT$MH,"glFramebufferRenderbufferEXT");
    }
    public static void glFramebufferRenderbufferEXT ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glGetFramebufferAttachmentParameterivEXT$MH,"glGetFramebufferAttachmentParameterivEXT");
    }
    public static void glGetFramebufferAttachmentParameterivEXT ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameterivEXT$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$899.glGenerateMipmapEXT$MH,"glGenerateMipmapEXT");
    }
    public static void glGenerateMipmapEXT ( int target) {
        var mh$ = glGenerateMipmapEXT$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$900.glProgramParameteriEXT$MH,"glProgramParameteriEXT");
    }
    public static void glProgramParameteriEXT ( int program,  int pname,  int value) {
        var mh$ = glProgramParameteriEXT$MH();
        try {
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$901.glProgramEnvParameters4fvEXT$MH,"glProgramEnvParameters4fvEXT");
    }
    public static void glProgramEnvParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramEnvParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$901.glProgramLocalParameters4fvEXT$MH,"glProgramLocalParameters4fvEXT");
    }
    public static void glProgramLocalParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramLocalParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.glGetUniformuivEXT$MH,"glGetUniformuivEXT");
    }
    public static void glGetUniformuivEXT ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformuivEXT$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.glBindFragDataLocationEXT$MH,"glBindFragDataLocationEXT");
    }
    public static void glBindFragDataLocationEXT ( int program,  int color,  Addressable name) {
        var mh$ = glBindFragDataLocationEXT$MH();
        try {
            mh$.invokeExact(program, color, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.glGetFragDataLocationEXT$MH,"glGetFragDataLocationEXT");
    }
    public static int glGetFragDataLocationEXT ( int program,  Addressable name) {
        var mh$ = glGetFragDataLocationEXT$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.glUniform1uiEXT$MH,"glUniform1uiEXT");
    }
    public static void glUniform1uiEXT ( int location,  int v0) {
        var mh$ = glUniform1uiEXT$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$905.glUniform2uiEXT$MH,"glUniform2uiEXT");
    }
    public static void glUniform2uiEXT ( int location,  int v0,  int v1) {
        var mh$ = glUniform2uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform3uiEXT$MH,"glUniform3uiEXT");
    }
    public static void glUniform3uiEXT ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform4uiEXT$MH,"glUniform4uiEXT");
    }
    public static void glUniform4uiEXT ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform1uivEXT$MH,"glUniform1uivEXT");
    }
    public static void glUniform1uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform2uivEXT$MH,"glUniform2uivEXT");
    }
    public static void glUniform2uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform3uivEXT$MH,"glUniform3uivEXT");
    }
    public static void glUniform3uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$906.glUniform4uivEXT$MH,"glUniform4uivEXT");
    }
    public static void glUniform4uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$910.glGetHistogramEXT$MH,"glGetHistogramEXT");
    }
    public static void glGetHistogramEXT ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetHistogramEXT$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$910.glGetHistogramParameterfvEXT$MH,"glGetHistogramParameterfvEXT");
    }
    public static void glGetHistogramParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$910.glGetHistogramParameterivEXT$MH,"glGetHistogramParameterivEXT");
    }
    public static void glGetHistogramParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$910.glGetMinmaxEXT$MH,"glGetMinmaxEXT");
    }
    public static void glGetMinmaxEXT ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetMinmaxEXT$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glGetMinmaxParameterfvEXT$MH,"glGetMinmaxParameterfvEXT");
    }
    public static void glGetMinmaxParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glGetMinmaxParameterivEXT$MH,"glGetMinmaxParameterivEXT");
    }
    public static void glGetMinmaxParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glHistogramEXT$MH,"glHistogramEXT");
    }
    public static void glHistogramEXT ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = glHistogramEXT$MH();
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinmaxEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glMinmaxEXT$MH,"glMinmaxEXT");
    }
    public static void glMinmaxEXT ( int target,  int internalformat,  byte sink) {
        var mh$ = glMinmaxEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetHistogramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glResetHistogramEXT$MH,"glResetHistogramEXT");
    }
    public static void glResetHistogramEXT ( int target) {
        var mh$ = glResetHistogramEXT$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMinmaxEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$911.glResetMinmaxEXT$MH,"glResetMinmaxEXT");
    }
    public static void glResetMinmaxEXT ( int target) {
        var mh$ = glResetMinmaxEXT$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexFuncEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$912.glIndexFuncEXT$MH,"glIndexFuncEXT");
    }
    public static void glIndexFuncEXT ( int func,  float ref) {
        var mh$ = glIndexFuncEXT$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMaterialEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$912.glIndexMaterialEXT$MH,"glIndexMaterialEXT");
    }
    public static void glIndexMaterialEXT ( int face,  int mode) {
        var mh$ = glIndexMaterialEXT$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glApplyTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$914.glApplyTextureEXT$MH,"glApplyTextureEXT");
    }
    public static void glApplyTextureEXT ( int mode) {
        var mh$ = glApplyTextureEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureLightEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$914.glTextureLightEXT$MH,"glTextureLightEXT");
    }
    public static void glTextureLightEXT ( int pname) {
        var mh$ = glTextureLightEXT$MH();
        try {
            mh$.invokeExact(pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureMaterialEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$914.glTextureMaterialEXT$MH,"glTextureMaterialEXT");
    }
    public static void glTextureMaterialEXT ( int face,  int mode) {
        var mh$ = glTextureMaterialEXT$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUnsignedBytevEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$920.glGetUnsignedBytevEXT$MH,"glGetUnsignedBytevEXT");
    }
    public static void glGetUnsignedBytevEXT ( int pname,  Addressable data) {
        var mh$ = glGetUnsignedBytevEXT$MH();
        try {
            mh$.invokeExact(pname, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUnsignedBytei_vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glGetUnsignedBytei_vEXT$MH,"glGetUnsignedBytei_vEXT");
    }
    public static void glGetUnsignedBytei_vEXT ( int target,  int index,  Addressable data) {
        var mh$ = glGetUnsignedBytei_vEXT$MH();
        try {
            mh$.invokeExact(target, index, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteMemoryObjectsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glDeleteMemoryObjectsEXT$MH,"glDeleteMemoryObjectsEXT");
    }
    public static void glDeleteMemoryObjectsEXT ( int n,  Addressable memoryObjects) {
        var mh$ = glDeleteMemoryObjectsEXT$MH();
        try {
            mh$.invokeExact(n, memoryObjects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsMemoryObjectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glIsMemoryObjectEXT$MH,"glIsMemoryObjectEXT");
    }
    public static byte glIsMemoryObjectEXT ( int memoryObject) {
        var mh$ = glIsMemoryObjectEXT$MH();
        try {
            return (byte)mh$.invokeExact(memoryObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateMemoryObjectsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glCreateMemoryObjectsEXT$MH,"glCreateMemoryObjectsEXT");
    }
    public static void glCreateMemoryObjectsEXT ( int n,  Addressable memoryObjects) {
        var mh$ = glCreateMemoryObjectsEXT$MH();
        try {
            mh$.invokeExact(n, memoryObjects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMemoryObjectParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glMemoryObjectParameterivEXT$MH,"glMemoryObjectParameterivEXT");
    }
    public static void glMemoryObjectParameterivEXT ( int memoryObject,  int pname,  Addressable params) {
        var mh$ = glMemoryObjectParameterivEXT$MH();
        try {
            mh$.invokeExact(memoryObject, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMemoryObjectParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$921.glGetMemoryObjectParameterivEXT$MH,"glGetMemoryObjectParameterivEXT");
    }
    public static void glGetMemoryObjectParameterivEXT ( int memoryObject,  int pname,  Addressable params) {
        var mh$ = glGetMemoryObjectParameterivEXT$MH();
        try {
            mh$.invokeExact(memoryObject, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageMem2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glTexStorageMem2DEXT$MH,"glTexStorageMem2DEXT");
    }
    public static void glTexStorageMem2DEXT ( int target,  int levels,  int internalFormat,  int width,  int height,  int memory,  long offset) {
        var mh$ = glTexStorageMem2DEXT$MH();
        try {
            mh$.invokeExact(target, levels, internalFormat, width, height, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageMem2DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glTexStorageMem2DMultisampleEXT$MH,"glTexStorageMem2DMultisampleEXT");
    }
    public static void glTexStorageMem2DMultisampleEXT ( int target,  int samples,  int internalFormat,  int width,  int height,  byte fixedSampleLocations,  int memory,  long offset) {
        var mh$ = glTexStorageMem2DMultisampleEXT$MH();
        try {
            mh$.invokeExact(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageMem3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glTexStorageMem3DEXT$MH,"glTexStorageMem3DEXT");
    }
    public static void glTexStorageMem3DEXT ( int target,  int levels,  int internalFormat,  int width,  int height,  int depth,  int memory,  long offset) {
        var mh$ = glTexStorageMem3DEXT$MH();
        try {
            mh$.invokeExact(target, levels, internalFormat, width, height, depth, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageMem3DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glTexStorageMem3DMultisampleEXT$MH,"glTexStorageMem3DMultisampleEXT");
    }
    public static void glTexStorageMem3DMultisampleEXT ( int target,  int samples,  int internalFormat,  int width,  int height,  int depth,  byte fixedSampleLocations,  int memory,  long offset) {
        var mh$ = glTexStorageMem3DMultisampleEXT$MH();
        try {
            mh$.invokeExact(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferStorageMemEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glBufferStorageMemEXT$MH,"glBufferStorageMemEXT");
    }
    public static void glBufferStorageMemEXT ( int target,  long size,  int memory,  long offset) {
        var mh$ = glBufferStorageMemEXT$MH();
        try {
            mh$.invokeExact(target, size, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageMem2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$922.glTextureStorageMem2DEXT$MH,"glTextureStorageMem2DEXT");
    }
    public static void glTextureStorageMem2DEXT ( int texture,  int levels,  int internalFormat,  int width,  int height,  int memory,  long offset) {
        var mh$ = glTextureStorageMem2DEXT$MH();
        try {
            mh$.invokeExact(texture, levels, internalFormat, width, height, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageMem2DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glTextureStorageMem2DMultisampleEXT$MH,"glTextureStorageMem2DMultisampleEXT");
    }
    public static void glTextureStorageMem2DMultisampleEXT ( int texture,  int samples,  int internalFormat,  int width,  int height,  byte fixedSampleLocations,  int memory,  long offset) {
        var mh$ = glTextureStorageMem2DMultisampleEXT$MH();
        try {
            mh$.invokeExact(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageMem3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glTextureStorageMem3DEXT$MH,"glTextureStorageMem3DEXT");
    }
    public static void glTextureStorageMem3DEXT ( int texture,  int levels,  int internalFormat,  int width,  int height,  int depth,  int memory,  long offset) {
        var mh$ = glTextureStorageMem3DEXT$MH();
        try {
            mh$.invokeExact(texture, levels, internalFormat, width, height, depth, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageMem3DMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glTextureStorageMem3DMultisampleEXT$MH,"glTextureStorageMem3DMultisampleEXT");
    }
    public static void glTextureStorageMem3DMultisampleEXT ( int texture,  int samples,  int internalFormat,  int width,  int height,  int depth,  byte fixedSampleLocations,  int memory,  long offset) {
        var mh$ = glTextureStorageMem3DMultisampleEXT$MH();
        try {
            mh$.invokeExact(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferStorageMemEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glNamedBufferStorageMemEXT$MH,"glNamedBufferStorageMemEXT");
    }
    public static void glNamedBufferStorageMemEXT ( int buffer,  long size,  int memory,  long offset) {
        var mh$ = glNamedBufferStorageMemEXT$MH();
        try {
            mh$.invokeExact(buffer, size, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexStorageMem1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glTexStorageMem1DEXT$MH,"glTexStorageMem1DEXT");
    }
    public static void glTexStorageMem1DEXT ( int target,  int levels,  int internalFormat,  int width,  int memory,  long offset) {
        var mh$ = glTexStorageMem1DEXT$MH();
        try {
            mh$.invokeExact(target, levels, internalFormat, width, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureStorageMem1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$923.glTextureStorageMem1DEXT$MH,"glTextureStorageMem1DEXT");
    }
    public static void glTextureStorageMem1DEXT ( int texture,  int levels,  int internalFormat,  int width,  int memory,  long offset) {
        var mh$ = glTextureStorageMem1DEXT$MH();
        try {
            mh$.invokeExact(texture, levels, internalFormat, width, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportMemoryFdEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$924.glImportMemoryFdEXT$MH,"glImportMemoryFdEXT");
    }
    public static void glImportMemoryFdEXT ( int memory,  long size,  int handleType,  int fd) {
        var mh$ = glImportMemoryFdEXT$MH();
        try {
            mh$.invokeExact(memory, size, handleType, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportMemoryWin32HandleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$925.glImportMemoryWin32HandleEXT$MH,"glImportMemoryWin32HandleEXT");
    }
    public static void glImportMemoryWin32HandleEXT ( int memory,  long size,  int handleType,  Addressable handle) {
        var mh$ = glImportMemoryWin32HandleEXT$MH();
        try {
            mh$.invokeExact(memory, size, handleType, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportMemoryWin32NameEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$925.glImportMemoryWin32NameEXT$MH,"glImportMemoryWin32NameEXT");
    }
    public static void glImportMemoryWin32NameEXT ( int memory,  long size,  int handleType,  Addressable name) {
        var mh$ = glImportMemoryWin32NameEXT$MH();
        try {
            mh$.invokeExact(memory, size, handleType, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$926.glMultiDrawArraysEXT$MH,"glMultiDrawArraysEXT");
    }
    public static void glMultiDrawArraysEXT ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawArraysEXT$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$926.glMultiDrawElementsEXT$MH,"glMultiDrawElementsEXT");
    }
    public static void glMultiDrawElementsEXT ( int mode,  Addressable count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glMultiDrawElementsEXT$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleMaskEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$927.glSampleMaskEXT$MH,"glSampleMaskEXT");
    }
    public static void glSampleMaskEXT ( float value,  byte invert) {
        var mh$ = glSampleMaskEXT$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplePatternEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$927.glSamplePatternEXT$MH,"glSamplePatternEXT");
    }
    public static void glSamplePatternEXT ( int pattern) {
        var mh$ = glSamplePatternEXT$MH();
        try {
            mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$928.glColorTableEXT$MH,"glColorTableEXT");
    }
    public static void glColorTableEXT ( int target,  int internalFormat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = glColorTableEXT$MH();
        try {
            mh$.invokeExact(target, internalFormat, width, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.glGetColorTableEXT$MH,"glGetColorTableEXT");
    }
    public static void glGetColorTableEXT ( int target,  int format,  int type,  Addressable data) {
        var mh$ = glGetColorTableEXT$MH();
        try {
            mh$.invokeExact(target, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.glGetColorTableParameterivEXT$MH,"glGetColorTableParameterivEXT");
    }
    public static void glGetColorTableParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$929.glGetColorTableParameterfvEXT$MH,"glGetColorTableParameterfvEXT");
    }
    public static void glGetColorTableParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransformParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$931.glPixelTransformParameteriEXT$MH,"glPixelTransformParameteriEXT");
    }
    public static void glPixelTransformParameteriEXT ( int target,  int pname,  int param) {
        var mh$ = glPixelTransformParameteriEXT$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransformParameterfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$931.glPixelTransformParameterfEXT$MH,"glPixelTransformParameterfEXT");
    }
    public static void glPixelTransformParameterfEXT ( int target,  int pname,  float param) {
        var mh$ = glPixelTransformParameterfEXT$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransformParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$931.glPixelTransformParameterivEXT$MH,"glPixelTransformParameterivEXT");
    }
    public static void glPixelTransformParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glPixelTransformParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransformParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glPixelTransformParameterfvEXT$MH,"glPixelTransformParameterfvEXT");
    }
    public static void glPixelTransformParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glPixelTransformParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelTransformParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glGetPixelTransformParameterivEXT$MH,"glGetPixelTransformParameterivEXT");
    }
    public static void glGetPixelTransformParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetPixelTransformParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelTransformParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$932.glGetPixelTransformParameterfvEXT$MH,"glGetPixelTransformParameterfvEXT");
    }
    public static void glGetPixelTransformParameterfvEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetPixelTransformParameterfvEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glPointParameterfEXT$MH,"glPointParameterfEXT");
    }
    public static void glPointParameterfEXT ( int pname,  float param) {
        var mh$ = glPointParameterfEXT$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glPointParameterfvEXT$MH,"glPointParameterfvEXT");
    }
    public static void glPointParameterfvEXT ( int pname,  Addressable params) {
        var mh$ = glPointParameterfvEXT$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$933.glPolygonOffsetEXT$MH,"glPolygonOffsetEXT");
    }
    public static void glPolygonOffsetEXT ( float factor,  float bias) {
        var mh$ = glPolygonOffsetEXT$MH();
        try {
            mh$.invokeExact(factor, bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffsetClampEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glPolygonOffsetClampEXT$MH,"glPolygonOffsetClampEXT");
    }
    public static void glPolygonOffsetClampEXT ( float factor,  float units,  float clamp) {
        var mh$ = glPolygonOffsetClampEXT$MH();
        try {
            mh$.invokeExact(factor, units, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertexEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$934.glProvokingVertexEXT$MH,"glProvokingVertexEXT");
    }
    public static void glProvokingVertexEXT ( int mode) {
        var mh$ = glProvokingVertexEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterSamplesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$935.glRasterSamplesEXT$MH,"glRasterSamplesEXT");
    }
    public static void glRasterSamplesEXT ( int samples,  byte fixedsamplelocations) {
        var mh$ = glRasterSamplesEXT$MH();
        try {
            mh$.invokeExact(samples, fixedsamplelocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glSecondaryColor3bEXT$MH,"glSecondaryColor3bEXT");
    }
    public static void glSecondaryColor3bEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3bEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glSecondaryColor3bvEXT$MH,"glSecondaryColor3bvEXT");
    }
    public static void glSecondaryColor3bvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3bvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glSecondaryColor3dEXT$MH,"glSecondaryColor3dEXT");
    }
    public static void glSecondaryColor3dEXT ( double red,  double green,  double blue) {
        var mh$ = glSecondaryColor3dEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glSecondaryColor3dvEXT$MH,"glSecondaryColor3dvEXT");
    }
    public static void glSecondaryColor3dvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3dvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glSecondaryColor3fEXT$MH,"glSecondaryColor3fEXT");
    }
    public static void glSecondaryColor3fEXT ( float red,  float green,  float blue) {
        var mh$ = glSecondaryColor3fEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3fvEXT$MH,"glSecondaryColor3fvEXT");
    }
    public static void glSecondaryColor3fvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3fvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3iEXT$MH,"glSecondaryColor3iEXT");
    }
    public static void glSecondaryColor3iEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3iEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3ivEXT$MH,"glSecondaryColor3ivEXT");
    }
    public static void glSecondaryColor3ivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3sEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3sEXT$MH,"glSecondaryColor3sEXT");
    }
    public static void glSecondaryColor3sEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3sEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3svEXT$MH,"glSecondaryColor3svEXT");
    }
    public static void glSecondaryColor3svEXT ( Addressable v) {
        var mh$ = glSecondaryColor3svEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glSecondaryColor3ubEXT$MH,"glSecondaryColor3ubEXT");
    }
    public static void glSecondaryColor3ubEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3ubEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColor3ubvEXT$MH,"glSecondaryColor3ubvEXT");
    }
    public static void glSecondaryColor3ubvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ubvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColor3uiEXT$MH,"glSecondaryColor3uiEXT");
    }
    public static void glSecondaryColor3uiEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3uiEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColor3uivEXT$MH,"glSecondaryColor3uivEXT");
    }
    public static void glSecondaryColor3uivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3uivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColor3usEXT$MH,"glSecondaryColor3usEXT");
    }
    public static void glSecondaryColor3usEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3usEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColor3usvEXT$MH,"glSecondaryColor3usvEXT");
    }
    public static void glSecondaryColor3usvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3usvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glSecondaryColorPointerEXT$MH,"glSecondaryColorPointerEXT");
    }
    public static void glSecondaryColorPointerEXT ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glSecondaryColorPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenSemaphoresEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glGenSemaphoresEXT$MH,"glGenSemaphoresEXT");
    }
    public static void glGenSemaphoresEXT ( int n,  Addressable semaphores) {
        var mh$ = glGenSemaphoresEXT$MH();
        try {
            mh$.invokeExact(n, semaphores);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteSemaphoresEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glDeleteSemaphoresEXT$MH,"glDeleteSemaphoresEXT");
    }
    public static void glDeleteSemaphoresEXT ( int n,  Addressable semaphores) {
        var mh$ = glDeleteSemaphoresEXT$MH();
        try {
            mh$.invokeExact(n, semaphores);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsSemaphoreEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glIsSemaphoreEXT$MH,"glIsSemaphoreEXT");
    }
    public static byte glIsSemaphoreEXT ( int semaphore) {
        var mh$ = glIsSemaphoreEXT$MH();
        try {
            return (byte)mh$.invokeExact(semaphore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSemaphoreParameterui64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glSemaphoreParameterui64vEXT$MH,"glSemaphoreParameterui64vEXT");
    }
    public static void glSemaphoreParameterui64vEXT ( int semaphore,  int pname,  Addressable params) {
        var mh$ = glSemaphoreParameterui64vEXT$MH();
        try {
            mh$.invokeExact(semaphore, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSemaphoreParameterui64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glGetSemaphoreParameterui64vEXT$MH,"glGetSemaphoreParameterui64vEXT");
    }
    public static void glGetSemaphoreParameterui64vEXT ( int semaphore,  int pname,  Addressable params) {
        var mh$ = glGetSemaphoreParameterui64vEXT$MH();
        try {
            mh$.invokeExact(semaphore, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitSemaphoreEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glWaitSemaphoreEXT$MH,"glWaitSemaphoreEXT");
    }
    public static void glWaitSemaphoreEXT ( int semaphore,  int numBufferBarriers,  Addressable buffers,  int numTextureBarriers,  Addressable textures,  Addressable srcLayouts) {
        var mh$ = glWaitSemaphoreEXT$MH();
        try {
            mh$.invokeExact(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSignalSemaphoreEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glSignalSemaphoreEXT$MH,"glSignalSemaphoreEXT");
    }
    public static void glSignalSemaphoreEXT ( int semaphore,  int numBufferBarriers,  Addressable buffers,  int numTextureBarriers,  Addressable textures,  Addressable dstLayouts) {
        var mh$ = glSignalSemaphoreEXT$MH();
        try {
            mh$.invokeExact(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportSemaphoreFdEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glImportSemaphoreFdEXT$MH,"glImportSemaphoreFdEXT");
    }
    public static void glImportSemaphoreFdEXT ( int semaphore,  int handleType,  int fd) {
        var mh$ = glImportSemaphoreFdEXT$MH();
        try {
            mh$.invokeExact(semaphore, handleType, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportSemaphoreWin32HandleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glImportSemaphoreWin32HandleEXT$MH,"glImportSemaphoreWin32HandleEXT");
    }
    public static void glImportSemaphoreWin32HandleEXT ( int semaphore,  int handleType,  Addressable handle) {
        var mh$ = glImportSemaphoreWin32HandleEXT$MH();
        try {
            mh$.invokeExact(semaphore, handleType, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportSemaphoreWin32NameEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glImportSemaphoreWin32NameEXT$MH,"glImportSemaphoreWin32NameEXT");
    }
    public static void glImportSemaphoreWin32NameEXT ( int semaphore,  int handleType,  Addressable name) {
        var mh$ = glImportSemaphoreWin32NameEXT$MH();
        try {
            mh$.invokeExact(semaphore, handleType, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseShaderProgramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glUseShaderProgramEXT$MH,"glUseShaderProgramEXT");
    }
    public static void glUseShaderProgramEXT ( int type,  int program) {
        var mh$ = glUseShaderProgramEXT$MH();
        try {
            mh$.invokeExact(type, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveProgramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glActiveProgramEXT$MH,"glActiveProgramEXT");
    }
    public static void glActiveProgramEXT ( int program) {
        var mh$ = glActiveProgramEXT$MH();
        try {
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShaderProgramEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glCreateShaderProgramEXT$MH,"glCreateShaderProgramEXT");
    }
    public static int glCreateShaderProgramEXT ( int type,  Addressable string) {
        var mh$ = glCreateShaderProgramEXT$MH();
        try {
            return (int)mh$.invokeExact(type, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferFetchBarrierEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glFramebufferFetchBarrierEXT$MH,"glFramebufferFetchBarrierEXT");
    }
    public static void glFramebufferFetchBarrierEXT () {
        var mh$ = glFramebufferFetchBarrierEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindImageTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glBindImageTextureEXT$MH,"glBindImageTextureEXT");
    }
    public static void glBindImageTextureEXT ( int index,  int texture,  int level,  byte layered,  int layer,  int access,  int format) {
        var mh$ = glBindImageTextureEXT$MH();
        try {
            mh$.invokeExact(index, texture, level, layered, layer, access, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMemoryBarrierEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glMemoryBarrierEXT$MH,"glMemoryBarrierEXT");
    }
    public static void glMemoryBarrierEXT ( int barriers) {
        var mh$ = glMemoryBarrierEXT$MH();
        try {
            mh$.invokeExact(barriers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilClearTagEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glStencilClearTagEXT$MH,"glStencilClearTagEXT");
    }
    public static void glStencilClearTagEXT ( int stencilTagBits,  int stencilClearTag) {
        var mh$ = glStencilClearTagEXT$MH();
        try {
            mh$.invokeExact(stencilTagBits, stencilClearTag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveStencilFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glActiveStencilFaceEXT$MH,"glActiveStencilFaceEXT");
    }
    public static void glActiveStencilFaceEXT ( int face) {
        var mh$ = glActiveStencilFaceEXT$MH();
        try {
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glTexSubImage1DEXT$MH,"glTexSubImage1DEXT");
    }
    public static void glTexSubImage1DEXT ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage1DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glTexSubImage2DEXT$MH,"glTexSubImage2DEXT");
    }
    public static void glTexSubImage2DEXT ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage2DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glTexImage3DEXT$MH,"glTexImage3DEXT");
    }
    public static void glTexImage3DEXT ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage3DEXT$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glTexSubImage3DEXT$MH,"glTexSubImage3DEXT");
    }
    public static void glTexSubImage3DEXT ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage3DEXT$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glFramebufferTextureLayerEXT$MH,"glFramebufferTextureLayerEXT");
    }
    public static void glFramebufferTextureLayerEXT ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayerEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glTexBufferEXT$MH,"glTexBufferEXT");
    }
    public static void glTexBufferEXT ( int target,  int internalformat,  int buffer) {
        var mh$ = glTexBufferEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glTexParameterIivEXT$MH,"glTexParameterIivEXT");
    }
    public static void glTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glTexParameterIuivEXT$MH,"glTexParameterIuivEXT");
    }
    public static void glTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glGetTexParameterIivEXT$MH,"glGetTexParameterIivEXT");
    }
    public static void glGetTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glGetTexParameterIuivEXT$MH,"glGetTexParameterIuivEXT");
    }
    public static void glGetTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glClearColorIiEXT$MH,"glClearColorIiEXT");
    }
    public static void glClearColorIiEXT ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glClearColorIiEXT$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIuiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glClearColorIuiEXT$MH,"glClearColorIuiEXT");
    }
    public static void glClearColorIuiEXT ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glClearColorIuiEXT$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResidentEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glAreTexturesResidentEXT$MH,"glAreTexturesResidentEXT");
    }
    public static byte glAreTexturesResidentEXT ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResidentEXT$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glBindTextureEXT$MH,"glBindTextureEXT");
    }
    public static void glBindTextureEXT ( int target,  int texture) {
        var mh$ = glBindTextureEXT$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTexturesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glDeleteTexturesEXT$MH,"glDeleteTexturesEXT");
    }
    public static void glDeleteTexturesEXT ( int n,  Addressable textures) {
        var mh$ = glDeleteTexturesEXT$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTexturesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glGenTexturesEXT$MH,"glGenTexturesEXT");
    }
    public static void glGenTexturesEXT ( int n,  Addressable textures) {
        var mh$ = glGenTexturesEXT$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glIsTextureEXT$MH,"glIsTextureEXT");
    }
    public static byte glIsTextureEXT ( int texture) {
        var mh$ = glIsTextureEXT$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTexturesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glPrioritizeTexturesEXT$MH,"glPrioritizeTexturesEXT");
    }
    public static void glPrioritizeTexturesEXT ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTexturesEXT$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureNormalEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glTextureNormalEXT$MH,"glTextureNormalEXT");
    }
    public static void glTextureNormalEXT ( int mode) {
        var mh$ = glTextureNormalEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjecti64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glGetQueryObjecti64vEXT$MH,"glGetQueryObjecti64vEXT");
    }
    public static void glGetQueryObjecti64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjecti64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectui64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glGetQueryObjectui64vEXT$MH,"glGetQueryObjectui64vEXT");
    }
    public static void glGetQueryObjectui64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectui64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glBeginTransformFeedbackEXT$MH,"glBeginTransformFeedbackEXT");
    }
    public static void glBeginTransformFeedbackEXT ( int primitiveMode) {
        var mh$ = glBeginTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glEndTransformFeedbackEXT$MH,"glEndTransformFeedbackEXT");
    }
    public static void glEndTransformFeedbackEXT () {
        var mh$ = glEndTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glBindBufferRangeEXT$MH,"glBindBufferRangeEXT");
    }
    public static void glBindBufferRangeEXT ( int target,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glBindBufferRangeEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glBindBufferOffsetEXT$MH,"glBindBufferOffsetEXT");
    }
    public static void glBindBufferOffsetEXT ( int target,  int index,  int buffer,  long offset) {
        var mh$ = glBindBufferOffsetEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferBaseEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glBindBufferBaseEXT$MH,"glBindBufferBaseEXT");
    }
    public static void glBindBufferBaseEXT ( int target,  int index,  int buffer) {
        var mh$ = glBindBufferBaseEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackVaryingsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glTransformFeedbackVaryingsEXT$MH,"glTransformFeedbackVaryingsEXT");
    }
    public static void glTransformFeedbackVaryingsEXT ( int program,  int count,  Addressable varyings,  int bufferMode) {
        var mh$ = glTransformFeedbackVaryingsEXT$MH();
        try {
            mh$.invokeExact(program, count, varyings, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackVaryingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glGetTransformFeedbackVaryingEXT$MH,"glGetTransformFeedbackVaryingEXT");
    }
    public static void glGetTransformFeedbackVaryingEXT ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetTransformFeedbackVaryingEXT$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElementEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glArrayElementEXT$MH,"glArrayElementEXT");
    }
    public static void glArrayElementEXT ( int i) {
        var mh$ = glArrayElementEXT$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glColorPointerEXT$MH,"glColorPointerEXT");
    }
    public static void glColorPointerEXT ( int size,  int type,  int stride,  int count,  Addressable pointer) {
        var mh$ = glColorPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glDrawArraysEXT$MH,"glDrawArraysEXT");
    }
    public static void glDrawArraysEXT ( int mode,  int first,  int count) {
        var mh$ = glDrawArraysEXT$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glEdgeFlagPointerEXT$MH,"glEdgeFlagPointerEXT");
    }
    public static void glEdgeFlagPointerEXT ( int stride,  int count,  Addressable pointer) {
        var mh$ = glEdgeFlagPointerEXT$MH();
        try {
            mh$.invokeExact(stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glGetPointervEXT$MH,"glGetPointervEXT");
    }
    public static void glGetPointervEXT ( int pname,  Addressable params) {
        var mh$ = glGetPointervEXT$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$970.glIndexPointerEXT$MH,"glIndexPointerEXT");
    }
    public static void glIndexPointerEXT ( int type,  int stride,  int count,  Addressable pointer) {
        var mh$ = glIndexPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$971.glNormalPointerEXT$MH,"glNormalPointerEXT");
    }
    public static void glNormalPointerEXT ( int type,  int stride,  int count,  Addressable pointer) {
        var mh$ = glNormalPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$971.glTexCoordPointerEXT$MH,"glTexCoordPointerEXT");
    }
    public static void glTexCoordPointerEXT ( int size,  int type,  int stride,  int count,  Addressable pointer) {
        var mh$ = glTexCoordPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$971.glVertexPointerEXT$MH,"glVertexPointerEXT");
    }
    public static void glVertexPointerEXT ( int size,  int type,  int stride,  int count,  Addressable pointer) {
        var mh$ = glVertexPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, count, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$974.glVertexAttribL1dEXT$MH,"glVertexAttribL1dEXT");
    }
    public static void glVertexAttribL1dEXT ( int index,  double x) {
        var mh$ = glVertexAttribL1dEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL2dEXT$MH,"glVertexAttribL2dEXT");
    }
    public static void glVertexAttribL2dEXT ( int index,  double x,  double y) {
        var mh$ = glVertexAttribL2dEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL3dEXT$MH,"glVertexAttribL3dEXT");
    }
    public static void glVertexAttribL3dEXT ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttribL3dEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL4dEXT$MH,"glVertexAttribL4dEXT");
    }
    public static void glVertexAttribL4dEXT ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttribL4dEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL1dvEXT$MH,"glVertexAttribL1dvEXT");
    }
    public static void glVertexAttribL1dvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribL1dvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL2dvEXT$MH,"glVertexAttribL2dvEXT");
    }
    public static void glVertexAttribL2dvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribL2dvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$975.glVertexAttribL3dvEXT$MH,"glVertexAttribL3dvEXT");
    }
    public static void glVertexAttribL3dvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribL3dvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$976.glVertexAttribL4dvEXT$MH,"glVertexAttribL4dvEXT");
    }
    public static void glVertexAttribL4dvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribL4dvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribLPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$976.glVertexAttribLPointerEXT$MH,"glVertexAttribLPointerEXT");
    }
    public static void glVertexAttribLPointerEXT ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribLPointerEXT$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribLdvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$976.glGetVertexAttribLdvEXT$MH,"glGetVertexAttribLdvEXT");
    }
    public static void glGetVertexAttribLdvEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribLdvEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginVertexShaderEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$990.glBeginVertexShaderEXT$MH,"glBeginVertexShaderEXT");
    }
    public static void glBeginVertexShaderEXT () {
        var mh$ = glBeginVertexShaderEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndVertexShaderEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$990.glEndVertexShaderEXT$MH,"glEndVertexShaderEXT");
    }
    public static void glEndVertexShaderEXT () {
        var mh$ = glEndVertexShaderEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexShaderEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$990.glBindVertexShaderEXT$MH,"glBindVertexShaderEXT");
    }
    public static void glBindVertexShaderEXT ( int id) {
        var mh$ = glBindVertexShaderEXT$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenVertexShadersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glGenVertexShadersEXT$MH,"glGenVertexShadersEXT");
    }
    public static int glGenVertexShadersEXT ( int range) {
        var mh$ = glGenVertexShadersEXT$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteVertexShaderEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glDeleteVertexShaderEXT$MH,"glDeleteVertexShaderEXT");
    }
    public static void glDeleteVertexShaderEXT ( int id) {
        var mh$ = glDeleteVertexShaderEXT$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderOp1EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glShaderOp1EXT$MH,"glShaderOp1EXT");
    }
    public static void glShaderOp1EXT ( int op,  int res,  int arg1) {
        var mh$ = glShaderOp1EXT$MH();
        try {
            mh$.invokeExact(op, res, arg1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderOp2EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glShaderOp2EXT$MH,"glShaderOp2EXT");
    }
    public static void glShaderOp2EXT ( int op,  int res,  int arg1,  int arg2) {
        var mh$ = glShaderOp2EXT$MH();
        try {
            mh$.invokeExact(op, res, arg1, arg2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderOp3EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glShaderOp3EXT$MH,"glShaderOp3EXT");
    }
    public static void glShaderOp3EXT ( int op,  int res,  int arg1,  int arg2,  int arg3) {
        var mh$ = glShaderOp3EXT$MH();
        try {
            mh$.invokeExact(op, res, arg1, arg2, arg3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSwizzleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$991.glSwizzleEXT$MH,"glSwizzleEXT");
    }
    public static void glSwizzleEXT ( int res,  int in,  int outX,  int outY,  int outZ,  int outW) {
        var mh$ = glSwizzleEXT$MH();
        try {
            mh$.invokeExact(res, in, outX, outY, outZ, outW);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWriteMaskEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glWriteMaskEXT$MH,"glWriteMaskEXT");
    }
    public static void glWriteMaskEXT ( int res,  int in,  int outX,  int outY,  int outZ,  int outW) {
        var mh$ = glWriteMaskEXT$MH();
        try {
            mh$.invokeExact(res, in, outX, outY, outZ, outW);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInsertComponentEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glInsertComponentEXT$MH,"glInsertComponentEXT");
    }
    public static void glInsertComponentEXT ( int res,  int src,  int num) {
        var mh$ = glInsertComponentEXT$MH();
        try {
            mh$.invokeExact(res, src, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glExtractComponentEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glExtractComponentEXT$MH,"glExtractComponentEXT");
    }
    public static void glExtractComponentEXT ( int res,  int src,  int num) {
        var mh$ = glExtractComponentEXT$MH();
        try {
            mh$.invokeExact(res, src, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenSymbolsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glGenSymbolsEXT$MH,"glGenSymbolsEXT");
    }
    public static int glGenSymbolsEXT ( int datatype,  int storagetype,  int range,  int components) {
        var mh$ = glGenSymbolsEXT$MH();
        try {
            return (int)mh$.invokeExact(datatype, storagetype, range, components);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetInvariantEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glSetInvariantEXT$MH,"glSetInvariantEXT");
    }
    public static void glSetInvariantEXT ( int id,  int type,  Addressable addr) {
        var mh$ = glSetInvariantEXT$MH();
        try {
            mh$.invokeExact(id, type, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetLocalConstantEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$992.glSetLocalConstantEXT$MH,"glSetLocalConstantEXT");
    }
    public static void glSetLocalConstantEXT ( int id,  int type,  Addressable addr) {
        var mh$ = glSetLocalConstantEXT$MH();
        try {
            mh$.invokeExact(id, type, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantbvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantbvEXT$MH,"glVariantbvEXT");
    }
    public static void glVariantbvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantbvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantsvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantsvEXT$MH,"glVariantsvEXT");
    }
    public static void glVariantsvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantsvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantivEXT$MH,"glVariantivEXT");
    }
    public static void glVariantivEXT ( int id,  Addressable addr) {
        var mh$ = glVariantivEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantfvEXT$MH,"glVariantfvEXT");
    }
    public static void glVariantfvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantfvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantdvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantdvEXT$MH,"glVariantdvEXT");
    }
    public static void glVariantdvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantdvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$993.glVariantubvEXT$MH,"glVariantubvEXT");
    }
    public static void glVariantubvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantubvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantusvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glVariantusvEXT$MH,"glVariantusvEXT");
    }
    public static void glVariantusvEXT ( int id,  Addressable addr) {
        var mh$ = glVariantusvEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glVariantuivEXT$MH,"glVariantuivEXT");
    }
    public static void glVariantuivEXT ( int id,  Addressable addr) {
        var mh$ = glVariantuivEXT$MH();
        try {
            mh$.invokeExact(id, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVariantPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glVariantPointerEXT$MH,"glVariantPointerEXT");
    }
    public static void glVariantPointerEXT ( int id,  int type,  int stride,  Addressable addr) {
        var mh$ = glVariantPointerEXT$MH();
        try {
            mh$.invokeExact(id, type, stride, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVariantClientStateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glEnableVariantClientStateEXT$MH,"glEnableVariantClientStateEXT");
    }
    public static void glEnableVariantClientStateEXT ( int id) {
        var mh$ = glEnableVariantClientStateEXT$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVariantClientStateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glDisableVariantClientStateEXT$MH,"glDisableVariantClientStateEXT");
    }
    public static void glDisableVariantClientStateEXT ( int id) {
        var mh$ = glDisableVariantClientStateEXT$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindLightParameterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$994.glBindLightParameterEXT$MH,"glBindLightParameterEXT");
    }
    public static int glBindLightParameterEXT ( int light,  int value) {
        var mh$ = glBindLightParameterEXT$MH();
        try {
            return (int)mh$.invokeExact(light, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindMaterialParameterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glBindMaterialParameterEXT$MH,"glBindMaterialParameterEXT");
    }
    public static int glBindMaterialParameterEXT ( int face,  int value) {
        var mh$ = glBindMaterialParameterEXT$MH();
        try {
            return (int)mh$.invokeExact(face, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexGenParameterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glBindTexGenParameterEXT$MH,"glBindTexGenParameterEXT");
    }
    public static int glBindTexGenParameterEXT ( int unit,  int coord,  int value) {
        var mh$ = glBindTexGenParameterEXT$MH();
        try {
            return (int)mh$.invokeExact(unit, coord, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTextureUnitParameterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glBindTextureUnitParameterEXT$MH,"glBindTextureUnitParameterEXT");
    }
    public static int glBindTextureUnitParameterEXT ( int unit,  int value) {
        var mh$ = glBindTextureUnitParameterEXT$MH();
        try {
            return (int)mh$.invokeExact(unit, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindParameterEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glBindParameterEXT$MH,"glBindParameterEXT");
    }
    public static int glBindParameterEXT ( int value) {
        var mh$ = glBindParameterEXT$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVariantEnabledEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glIsVariantEnabledEXT$MH,"glIsVariantEnabledEXT");
    }
    public static byte glIsVariantEnabledEXT ( int id,  int cap) {
        var mh$ = glIsVariantEnabledEXT$MH();
        try {
            return (byte)mh$.invokeExact(id, cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantBooleanvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$995.glGetVariantBooleanvEXT$MH,"glGetVariantBooleanvEXT");
    }
    public static void glGetVariantBooleanvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetVariantBooleanvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantIntegervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetVariantIntegervEXT$MH,"glGetVariantIntegervEXT");
    }
    public static void glGetVariantIntegervEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetVariantIntegervEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantFloatvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetVariantFloatvEXT$MH,"glGetVariantFloatvEXT");
    }
    public static void glGetVariantFloatvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetVariantFloatvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVariantPointervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetVariantPointervEXT$MH,"glGetVariantPointervEXT");
    }
    public static void glGetVariantPointervEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetVariantPointervEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInvariantBooleanvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetInvariantBooleanvEXT$MH,"glGetInvariantBooleanvEXT");
    }
    public static void glGetInvariantBooleanvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetInvariantBooleanvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInvariantIntegervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetInvariantIntegervEXT$MH,"glGetInvariantIntegervEXT");
    }
    public static void glGetInvariantIntegervEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetInvariantIntegervEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInvariantFloatvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$996.glGetInvariantFloatvEXT$MH,"glGetInvariantFloatvEXT");
    }
    public static void glGetInvariantFloatvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetInvariantFloatvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLocalConstantBooleanvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.glGetLocalConstantBooleanvEXT$MH,"glGetLocalConstantBooleanvEXT");
    }
    public static void glGetLocalConstantBooleanvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetLocalConstantBooleanvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLocalConstantIntegervEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.glGetLocalConstantIntegervEXT$MH,"glGetLocalConstantIntegervEXT");
    }
    public static void glGetLocalConstantIntegervEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetLocalConstantIntegervEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLocalConstantFloatvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$997.glGetLocalConstantFloatvEXT$MH,"glGetLocalConstantFloatvEXT");
    }
    public static void glGetLocalConstantFloatvEXT ( int id,  int value,  Addressable data) {
        var mh$ = glGetLocalConstantFloatvEXT$MH();
        try {
            mh$.invokeExact(id, value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexWeightfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.glVertexWeightfEXT$MH,"glVertexWeightfEXT");
    }
    public static void glVertexWeightfEXT ( float weight) {
        var mh$ = glVertexWeightfEXT$MH();
        try {
            mh$.invokeExact(weight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexWeightfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.glVertexWeightfvEXT$MH,"glVertexWeightfvEXT");
    }
    public static void glVertexWeightfvEXT ( Addressable weight) {
        var mh$ = glVertexWeightfvEXT$MH();
        try {
            mh$.invokeExact(weight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexWeightPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$998.glVertexWeightPointerEXT$MH,"glVertexWeightPointerEXT");
    }
    public static void glVertexWeightPointerEXT ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexWeightPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAcquireKeyedMutexWin32EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.glAcquireKeyedMutexWin32EXT$MH,"glAcquireKeyedMutexWin32EXT");
    }
    public static byte glAcquireKeyedMutexWin32EXT ( int memory,  long key,  int timeout) {
        var mh$ = glAcquireKeyedMutexWin32EXT$MH();
        try {
            return (byte)mh$.invokeExact(memory, key, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReleaseKeyedMutexWin32EXT$MH() {
        return RuntimeHelper.requireNonNull(constants$999.glReleaseKeyedMutexWin32EXT$MH,"glReleaseKeyedMutexWin32EXT");
    }
    public static byte glReleaseKeyedMutexWin32EXT ( int memory,  long key) {
        var mh$ = glReleaseKeyedMutexWin32EXT$MH();
        try {
            return (byte)mh$.invokeExact(memory, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowRectanglesEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.glWindowRectanglesEXT$MH,"glWindowRectanglesEXT");
    }
    public static void glWindowRectanglesEXT ( int mode,  int count,  Addressable box) {
        var mh$ = glWindowRectanglesEXT$MH();
        try {
            mh$.invokeExact(mode, count, box);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImportSyncEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1000.glImportSyncEXT$MH,"glImportSyncEXT");
    }
    public static MemoryAddress glImportSyncEXT ( int external_sync_type,  long external_sync,  int flags) {
        var mh$ = glImportSyncEXT$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(external_sync_type, external_sync, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrameTerminatorGREMEDY$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.glFrameTerminatorGREMEDY$MH,"glFrameTerminatorGREMEDY");
    }
    public static void glFrameTerminatorGREMEDY () {
        var mh$ = glFrameTerminatorGREMEDY$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStringMarkerGREMEDY$MH() {
        return RuntimeHelper.requireNonNull(constants$1001.glStringMarkerGREMEDY$MH,"glStringMarkerGREMEDY");
    }
    public static void glStringMarkerGREMEDY ( int len,  Addressable string) {
        var mh$ = glStringMarkerGREMEDY$MH();
        try {
            mh$.invokeExact(len, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImageTransformParameteriHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glImageTransformParameteriHP$MH,"glImageTransformParameteriHP");
    }
    public static void glImageTransformParameteriHP ( int target,  int pname,  int param) {
        var mh$ = glImageTransformParameteriHP$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImageTransformParameterfHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glImageTransformParameterfHP$MH,"glImageTransformParameterfHP");
    }
    public static void glImageTransformParameterfHP ( int target,  int pname,  float param) {
        var mh$ = glImageTransformParameterfHP$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImageTransformParameterivHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glImageTransformParameterivHP$MH,"glImageTransformParameterivHP");
    }
    public static void glImageTransformParameterivHP ( int target,  int pname,  Addressable params) {
        var mh$ = glImageTransformParameterivHP$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glImageTransformParameterfvHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glImageTransformParameterfvHP$MH,"glImageTransformParameterfvHP");
    }
    public static void glImageTransformParameterfvHP ( int target,  int pname,  Addressable params) {
        var mh$ = glImageTransformParameterfvHP$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetImageTransformParameterivHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glGetImageTransformParameterivHP$MH,"glGetImageTransformParameterivHP");
    }
    public static void glGetImageTransformParameterivHP ( int target,  int pname,  Addressable params) {
        var mh$ = glGetImageTransformParameterivHP$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetImageTransformParameterfvHP$MH() {
        return RuntimeHelper.requireNonNull(constants$1004.glGetImageTransformParameterfvHP$MH,"glGetImageTransformParameterfvHP");
    }
    public static void glGetImageTransformParameterfvHP ( int target,  int pname,  Addressable params) {
        var mh$ = glGetImageTransformParameterfvHP$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiModeDrawArraysIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.glMultiModeDrawArraysIBM$MH,"glMultiModeDrawArraysIBM");
    }
    public static void glMultiModeDrawArraysIBM ( Addressable mode,  Addressable first,  Addressable count,  int primcount,  int modestride) {
        var mh$ = glMultiModeDrawArraysIBM$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount, modestride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiModeDrawElementsIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1005.glMultiModeDrawElementsIBM$MH,"glMultiModeDrawElementsIBM");
    }
    public static void glMultiModeDrawElementsIBM ( Addressable mode,  Addressable count,  int type,  Addressable indices,  int primcount,  int modestride) {
        var mh$ = glMultiModeDrawElementsIBM$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount, modestride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushStaticDataIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1006.glFlushStaticDataIBM$MH,"glFlushStaticDataIBM");
    }
    public static void glFlushStaticDataIBM ( int target) {
        var mh$ = glFlushStaticDataIBM$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.glColorPointerListIBM$MH,"glColorPointerListIBM");
    }
    public static void glColorPointerListIBM ( int size,  int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glColorPointerListIBM$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.glSecondaryColorPointerListIBM$MH,"glSecondaryColorPointerListIBM");
    }
    public static void glSecondaryColorPointerListIBM ( int size,  int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glSecondaryColorPointerListIBM$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.glEdgeFlagPointerListIBM$MH,"glEdgeFlagPointerListIBM");
    }
    public static void glEdgeFlagPointerListIBM ( int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glEdgeFlagPointerListIBM$MH();
        try {
            mh$.invokeExact(stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.glFogCoordPointerListIBM$MH,"glFogCoordPointerListIBM");
    }
    public static void glFogCoordPointerListIBM ( int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glFogCoordPointerListIBM$MH();
        try {
            mh$.invokeExact(type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1009.glIndexPointerListIBM$MH,"glIndexPointerListIBM");
    }
    public static void glIndexPointerListIBM ( int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glIndexPointerListIBM$MH();
        try {
            mh$.invokeExact(type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.glNormalPointerListIBM$MH,"glNormalPointerListIBM");
    }
    public static void glNormalPointerListIBM ( int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glNormalPointerListIBM$MH();
        try {
            mh$.invokeExact(type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.glTexCoordPointerListIBM$MH,"glTexCoordPointerListIBM");
    }
    public static void glTexCoordPointerListIBM ( int size,  int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glTexCoordPointerListIBM$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointerListIBM$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.glVertexPointerListIBM$MH,"glVertexPointerListIBM");
    }
    public static void glVertexPointerListIBM ( int size,  int type,  int stride,  Addressable pointer,  int ptrstride) {
        var mh$ = glVertexPointerListIBM$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer, ptrstride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateINGR$MH() {
        return RuntimeHelper.requireNonNull(constants$1010.glBlendFuncSeparateINGR$MH,"glBlendFuncSeparateINGR");
    }
    public static void glBlendFuncSeparateINGR ( int sfactorRGB,  int dfactorRGB,  int sfactorAlpha,  int dfactorAlpha) {
        var mh$ = glBlendFuncSeparateINGR$MH();
        try {
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glApplyFramebufferAttachmentCMAAINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1011.glApplyFramebufferAttachmentCMAAINTEL$MH,"glApplyFramebufferAttachmentCMAAINTEL");
    }
    public static void glApplyFramebufferAttachmentCMAAINTEL () {
        var mh$ = glApplyFramebufferAttachmentCMAAINTEL$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSyncTextureINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.glSyncTextureINTEL$MH,"glSyncTextureINTEL");
    }
    public static void glSyncTextureINTEL ( int texture) {
        var mh$ = glSyncTextureINTEL$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapTexture2DINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.glUnmapTexture2DINTEL$MH,"glUnmapTexture2DINTEL");
    }
    public static void glUnmapTexture2DINTEL ( int texture,  int level) {
        var mh$ = glUnmapTexture2DINTEL$MH();
        try {
            mh$.invokeExact(texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapTexture2DINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1012.glMapTexture2DINTEL$MH,"glMapTexture2DINTEL");
    }
    public static MemoryAddress glMapTexture2DINTEL ( int texture,  int level,  int access,  Addressable stride,  Addressable layout) {
        var mh$ = glMapTexture2DINTEL$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(texture, level, access, stride, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointervINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.glVertexPointervINTEL$MH,"glVertexPointervINTEL");
    }
    public static void glVertexPointervINTEL ( int size,  int type,  Addressable pointer) {
        var mh$ = glVertexPointervINTEL$MH();
        try {
            mh$.invokeExact(size, type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointervINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.glNormalPointervINTEL$MH,"glNormalPointervINTEL");
    }
    public static void glNormalPointervINTEL ( int type,  Addressable pointer) {
        var mh$ = glNormalPointervINTEL$MH();
        try {
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointervINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.glColorPointervINTEL$MH,"glColorPointervINTEL");
    }
    public static void glColorPointervINTEL ( int size,  int type,  Addressable pointer) {
        var mh$ = glColorPointervINTEL$MH();
        try {
            mh$.invokeExact(size, type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointervINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.glTexCoordPointervINTEL$MH,"glTexCoordPointervINTEL");
    }
    public static void glTexCoordPointervINTEL ( int size,  int type,  Addressable pointer) {
        var mh$ = glTexCoordPointervINTEL$MH();
        try {
            mh$.invokeExact(size, type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginPerfQueryINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glBeginPerfQueryINTEL$MH,"glBeginPerfQueryINTEL");
    }
    public static void glBeginPerfQueryINTEL ( int queryHandle) {
        var mh$ = glBeginPerfQueryINTEL$MH();
        try {
            mh$.invokeExact(queryHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreatePerfQueryINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glCreatePerfQueryINTEL$MH,"glCreatePerfQueryINTEL");
    }
    public static void glCreatePerfQueryINTEL ( int queryId,  Addressable queryHandle) {
        var mh$ = glCreatePerfQueryINTEL$MH();
        try {
            mh$.invokeExact(queryId, queryHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeletePerfQueryINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glDeletePerfQueryINTEL$MH,"glDeletePerfQueryINTEL");
    }
    public static void glDeletePerfQueryINTEL ( int queryHandle) {
        var mh$ = glDeletePerfQueryINTEL$MH();
        try {
            mh$.invokeExact(queryHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndPerfQueryINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glEndPerfQueryINTEL$MH,"glEndPerfQueryINTEL");
    }
    public static void glEndPerfQueryINTEL ( int queryHandle) {
        var mh$ = glEndPerfQueryINTEL$MH();
        try {
            mh$.invokeExact(queryHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFirstPerfQueryIdINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetFirstPerfQueryIdINTEL$MH,"glGetFirstPerfQueryIdINTEL");
    }
    public static void glGetFirstPerfQueryIdINTEL ( Addressable queryId) {
        var mh$ = glGetFirstPerfQueryIdINTEL$MH();
        try {
            mh$.invokeExact(queryId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNextPerfQueryIdINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetNextPerfQueryIdINTEL$MH,"glGetNextPerfQueryIdINTEL");
    }
    public static void glGetNextPerfQueryIdINTEL ( int queryId,  Addressable nextQueryId) {
        var mh$ = glGetNextPerfQueryIdINTEL$MH();
        try {
            mh$.invokeExact(queryId, nextQueryId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfCounterInfoINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetPerfCounterInfoINTEL$MH,"glGetPerfCounterInfoINTEL");
    }
    public static void glGetPerfCounterInfoINTEL ( int queryId,  int counterId,  int counterNameLength,  Addressable counterName,  int counterDescLength,  Addressable counterDesc,  Addressable counterOffset,  Addressable counterDataSize,  Addressable counterTypeEnum,  Addressable counterDataTypeEnum,  Addressable rawCounterMaxValue) {
        var mh$ = glGetPerfCounterInfoINTEL$MH();
        try {
            mh$.invokeExact(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfQueryDataINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetPerfQueryDataINTEL$MH,"glGetPerfQueryDataINTEL");
    }
    public static void glGetPerfQueryDataINTEL ( int queryHandle,  int flags,  int dataSize,  Addressable data,  Addressable bytesWritten) {
        var mh$ = glGetPerfQueryDataINTEL$MH();
        try {
            mh$.invokeExact(queryHandle, flags, dataSize, data, bytesWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfQueryIdByNameINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetPerfQueryIdByNameINTEL$MH,"glGetPerfQueryIdByNameINTEL");
    }
    public static void glGetPerfQueryIdByNameINTEL ( Addressable queryName,  Addressable queryId) {
        var mh$ = glGetPerfQueryIdByNameINTEL$MH();
        try {
            mh$.invokeExact(queryName, queryId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPerfQueryInfoINTEL$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glGetPerfQueryInfoINTEL$MH,"glGetPerfQueryInfoINTEL");
    }
    public static void glGetPerfQueryInfoINTEL ( int queryId,  int queryNameLength,  Addressable queryName,  Addressable dataSize,  Addressable noCounters,  Addressable noInstances,  Addressable capsMask) {
        var mh$ = glGetPerfQueryInfoINTEL$MH();
        try {
            mh$.invokeExact(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferParameteriMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glFramebufferParameteriMESA$MH,"glFramebufferParameteriMESA");
    }
    public static void glFramebufferParameteriMESA ( int target,  int pname,  int param) {
        var mh$ = glFramebufferParameteriMESA$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferParameterivMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glGetFramebufferParameterivMESA$MH,"glGetFramebufferParameterivMESA");
    }
    public static void glGetFramebufferParameterivMESA ( int target,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferParameterivMESA$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResizeBuffersMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.glResizeBuffersMESA$MH,"glResizeBuffersMESA");
    }
    public static void glResizeBuffersMESA () {
        var mh$ = glResizeBuffersMESA$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.glWindowPos2dMESA$MH,"glWindowPos2dMESA");
    }
    public static void glWindowPos2dMESA ( double x,  double y) {
        var mh$ = glWindowPos2dMESA$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.glWindowPos2dvMESA$MH,"glWindowPos2dvMESA");
    }
    public static void glWindowPos2dvMESA ( Addressable v) {
        var mh$ = glWindowPos2dvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1029.glWindowPos2fMESA$MH,"glWindowPos2fMESA");
    }
    public static void glWindowPos2fMESA ( float x,  float y) {
        var mh$ = glWindowPos2fMESA$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos2fvMESA$MH,"glWindowPos2fvMESA");
    }
    public static void glWindowPos2fvMESA ( Addressable v) {
        var mh$ = glWindowPos2fvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2iMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos2iMESA$MH,"glWindowPos2iMESA");
    }
    public static void glWindowPos2iMESA ( int x,  int y) {
        var mh$ = glWindowPos2iMESA$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2ivMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos2ivMESA$MH,"glWindowPos2ivMESA");
    }
    public static void glWindowPos2ivMESA ( Addressable v) {
        var mh$ = glWindowPos2ivMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2sMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos2sMESA$MH,"glWindowPos2sMESA");
    }
    public static void glWindowPos2sMESA ( short x,  short y) {
        var mh$ = glWindowPos2sMESA$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2svMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos2svMESA$MH,"glWindowPos2svMESA");
    }
    public static void glWindowPos2svMESA ( Addressable v) {
        var mh$ = glWindowPos2svMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1030.glWindowPos3dMESA$MH,"glWindowPos3dMESA");
    }
    public static void glWindowPos3dMESA ( double x,  double y,  double z) {
        var mh$ = glWindowPos3dMESA$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3dvMESA$MH,"glWindowPos3dvMESA");
    }
    public static void glWindowPos3dvMESA ( Addressable v) {
        var mh$ = glWindowPos3dvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3fMESA$MH,"glWindowPos3fMESA");
    }
    public static void glWindowPos3fMESA ( float x,  float y,  float z) {
        var mh$ = glWindowPos3fMESA$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3fvMESA$MH,"glWindowPos3fvMESA");
    }
    public static void glWindowPos3fvMESA ( Addressable v) {
        var mh$ = glWindowPos3fvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3iMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3iMESA$MH,"glWindowPos3iMESA");
    }
    public static void glWindowPos3iMESA ( int x,  int y,  int z) {
        var mh$ = glWindowPos3iMESA$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3ivMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3ivMESA$MH,"glWindowPos3ivMESA");
    }
    public static void glWindowPos3ivMESA ( Addressable v) {
        var mh$ = glWindowPos3ivMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3sMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1031.glWindowPos3sMESA$MH,"glWindowPos3sMESA");
    }
    public static void glWindowPos3sMESA ( short x,  short y,  short z) {
        var mh$ = glWindowPos3sMESA$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3svMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos3svMESA$MH,"glWindowPos3svMESA");
    }
    public static void glWindowPos3svMESA ( Addressable v) {
        var mh$ = glWindowPos3svMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4dMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos4dMESA$MH,"glWindowPos4dMESA");
    }
    public static void glWindowPos4dMESA ( double x,  double y,  double z,  double w) {
        var mh$ = glWindowPos4dMESA$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4dvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos4dvMESA$MH,"glWindowPos4dvMESA");
    }
    public static void glWindowPos4dvMESA ( Addressable v) {
        var mh$ = glWindowPos4dvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4fMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos4fMESA$MH,"glWindowPos4fMESA");
    }
    public static void glWindowPos4fMESA ( float x,  float y,  float z,  float w) {
        var mh$ = glWindowPos4fMESA$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4fvMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos4fvMESA$MH,"glWindowPos4fvMESA");
    }
    public static void glWindowPos4fvMESA ( Addressable v) {
        var mh$ = glWindowPos4fvMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4iMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1032.glWindowPos4iMESA$MH,"glWindowPos4iMESA");
    }
    public static void glWindowPos4iMESA ( int x,  int y,  int z,  int w) {
        var mh$ = glWindowPos4iMESA$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4ivMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.glWindowPos4ivMESA$MH,"glWindowPos4ivMESA");
    }
    public static void glWindowPos4ivMESA ( Addressable v) {
        var mh$ = glWindowPos4ivMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4sMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.glWindowPos4sMESA$MH,"glWindowPos4sMESA");
    }
    public static void glWindowPos4sMESA ( short x,  short y,  short z,  short w) {
        var mh$ = glWindowPos4sMESA$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos4svMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1033.glWindowPos4svMESA$MH,"glWindowPos4svMESA");
    }
    public static void glWindowPos4svMESA ( Addressable v) {
        var mh$ = glWindowPos4svMESA$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginConditionalRenderNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.glBeginConditionalRenderNVX$MH,"glBeginConditionalRenderNVX");
    }
    public static void glBeginConditionalRenderNVX ( int id) {
        var mh$ = glBeginConditionalRenderNVX$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndConditionalRenderNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1034.glEndConditionalRenderNVX$MH,"glEndConditionalRenderNVX");
    }
    public static void glEndConditionalRenderNVX () {
        var mh$ = glEndConditionalRenderNVX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUploadGpuMaskNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.glUploadGpuMaskNVX$MH,"glUploadGpuMaskNVX");
    }
    public static void glUploadGpuMaskNVX ( int mask) {
        var mh$ = glUploadGpuMaskNVX$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastViewportArrayvNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.glMulticastViewportArrayvNVX$MH,"glMulticastViewportArrayvNVX");
    }
    public static void glMulticastViewportArrayvNVX ( int gpu,  int first,  int count,  Addressable v) {
        var mh$ = glMulticastViewportArrayvNVX$MH();
        try {
            mh$.invokeExact(gpu, first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastViewportPositionWScaleNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1036.glMulticastViewportPositionWScaleNVX$MH,"glMulticastViewportPositionWScaleNVX");
    }
    public static void glMulticastViewportPositionWScaleNVX ( int gpu,  int index,  float xcoeff,  float ycoeff) {
        var mh$ = glMulticastViewportPositionWScaleNVX$MH();
        try {
            mh$.invokeExact(gpu, index, xcoeff, ycoeff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastScissorArrayvNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.glMulticastScissorArrayvNVX$MH,"glMulticastScissorArrayvNVX");
    }
    public static void glMulticastScissorArrayvNVX ( int gpu,  int first,  int count,  Addressable v) {
        var mh$ = glMulticastScissorArrayvNVX$MH();
        try {
            mh$.invokeExact(gpu, first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAsyncCopyBufferSubDataNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.glAsyncCopyBufferSubDataNVX$MH,"glAsyncCopyBufferSubDataNVX");
    }
    public static int glAsyncCopyBufferSubDataNVX ( int waitSemaphoreCount,  Addressable waitSemaphoreArray,  Addressable fenceValueArray,  int readGpu,  int writeGpuMask,  int readBuffer,  int writeBuffer,  long readOffset,  long writeOffset,  long size,  int signalSemaphoreCount,  Addressable signalSemaphoreArray,  Addressable signalValueArray) {
        var mh$ = glAsyncCopyBufferSubDataNVX$MH();
        try {
            return (int)mh$.invokeExact(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAsyncCopyImageSubDataNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1037.glAsyncCopyImageSubDataNVX$MH,"glAsyncCopyImageSubDataNVX");
    }
    public static int glAsyncCopyImageSubDataNVX ( int waitSemaphoreCount,  Addressable waitSemaphoreArray,  Addressable waitValueArray,  int srcGpu,  int dstGpuMask,  int srcName,  int srcTarget,  int srcLevel,  int srcX,  int srcY,  int srcZ,  int dstName,  int dstTarget,  int dstLevel,  int dstX,  int dstY,  int dstZ,  int srcWidth,  int srcHeight,  int srcDepth,  int signalSemaphoreCount,  Addressable signalSemaphoreArray,  Addressable signalValueArray) {
        var mh$ = glAsyncCopyImageSubDataNVX$MH();
        try {
            return (int)mh$.invokeExact(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLGPUNamedBufferSubDataNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.glLGPUNamedBufferSubDataNVX$MH,"glLGPUNamedBufferSubDataNVX");
    }
    public static void glLGPUNamedBufferSubDataNVX ( int gpuMask,  int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glLGPUNamedBufferSubDataNVX$MH();
        try {
            mh$.invokeExact(gpuMask, buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLGPUCopyImageSubDataNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.glLGPUCopyImageSubDataNVX$MH,"glLGPUCopyImageSubDataNVX");
    }
    public static void glLGPUCopyImageSubDataNVX ( int sourceGpu,  int destinationGpuMask,  int srcName,  int srcTarget,  int srcLevel,  int srcX,  int srxY,  int srcZ,  int dstName,  int dstTarget,  int dstLevel,  int dstX,  int dstY,  int dstZ,  int width,  int height,  int depth) {
        var mh$ = glLGPUCopyImageSubDataNVX$MH();
        try {
            mh$.invokeExact(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLGPUInterlockNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1038.glLGPUInterlockNVX$MH,"glLGPUInterlockNVX");
    }
    public static void glLGPUInterlockNVX () {
        var mh$ = glLGPUInterlockNVX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgressFenceNVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.glCreateProgressFenceNVX$MH,"glCreateProgressFenceNVX");
    }
    public static int glCreateProgressFenceNVX () {
        var mh$ = glCreateProgressFenceNVX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSignalSemaphoreui64NVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.glSignalSemaphoreui64NVX$MH,"glSignalSemaphoreui64NVX");
    }
    public static void glSignalSemaphoreui64NVX ( int signalGpu,  int fenceObjectCount,  Addressable semaphoreArray,  Addressable fenceValueArray) {
        var mh$ = glSignalSemaphoreui64NVX$MH();
        try {
            mh$.invokeExact(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitSemaphoreui64NVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.glWaitSemaphoreui64NVX$MH,"glWaitSemaphoreui64NVX");
    }
    public static void glWaitSemaphoreui64NVX ( int waitGpu,  int fenceObjectCount,  Addressable semaphoreArray,  Addressable fenceValueArray) {
        var mh$ = glWaitSemaphoreui64NVX$MH();
        try {
            mh$.invokeExact(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientWaitSemaphoreui64NVX$MH() {
        return RuntimeHelper.requireNonNull(constants$1040.glClientWaitSemaphoreui64NVX$MH,"glClientWaitSemaphoreui64NVX");
    }
    public static void glClientWaitSemaphoreui64NVX ( int fenceObjectCount,  Addressable semaphoreArray,  Addressable fenceValueArray) {
        var mh$ = glClientWaitSemaphoreui64NVX$MH();
        try {
            mh$.invokeExact(fenceObjectCount, semaphoreArray, fenceValueArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaToCoverageDitherControlNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1041.glAlphaToCoverageDitherControlNV$MH,"glAlphaToCoverageDitherControlNV");
    }
    public static void glAlphaToCoverageDitherControlNV ( int mode) {
        var mh$ = glAlphaToCoverageDitherControlNV$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirectBindlessNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.glMultiDrawArraysIndirectBindlessNV$MH,"glMultiDrawArraysIndirectBindlessNV");
    }
    public static void glMultiDrawArraysIndirectBindlessNV ( int mode,  Addressable indirect,  int drawCount,  int stride,  int vertexBufferCount) {
        var mh$ = glMultiDrawArraysIndirectBindlessNV$MH();
        try {
            mh$.invokeExact(mode, indirect, drawCount, stride, vertexBufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirectBindlessNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1042.glMultiDrawElementsIndirectBindlessNV$MH,"glMultiDrawElementsIndirectBindlessNV");
    }
    public static void glMultiDrawElementsIndirectBindlessNV ( int mode,  int type,  Addressable indirect,  int drawCount,  int stride,  int vertexBufferCount) {
        var mh$ = glMultiDrawElementsIndirectBindlessNV$MH();
        try {
            mh$.invokeExact(mode, type, indirect, drawCount, stride, vertexBufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysIndirectBindlessCountNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.glMultiDrawArraysIndirectBindlessCountNV$MH,"glMultiDrawArraysIndirectBindlessCountNV");
    }
    public static void glMultiDrawArraysIndirectBindlessCountNV ( int mode,  Addressable indirect,  int drawCount,  int maxDrawCount,  int stride,  int vertexBufferCount) {
        var mh$ = glMultiDrawArraysIndirectBindlessCountNV$MH();
        try {
            mh$.invokeExact(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsIndirectBindlessCountNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1043.glMultiDrawElementsIndirectBindlessCountNV$MH,"glMultiDrawElementsIndirectBindlessCountNV");
    }
    public static void glMultiDrawElementsIndirectBindlessCountNV ( int mode,  int type,  Addressable indirect,  int drawCount,  int maxDrawCount,  int stride,  int vertexBufferCount) {
        var mh$ = glMultiDrawElementsIndirectBindlessCountNV$MH();
        try {
            mh$.invokeExact(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureHandleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1047.glGetTextureHandleNV$MH,"glGetTextureHandleNV");
    }
    public static long glGetTextureHandleNV ( int texture) {
        var mh$ = glGetTextureHandleNV$MH();
        try {
            return (long)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTextureSamplerHandleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glGetTextureSamplerHandleNV$MH,"glGetTextureSamplerHandleNV");
    }
    public static long glGetTextureSamplerHandleNV ( int texture,  int sampler) {
        var mh$ = glGetTextureSamplerHandleNV$MH();
        try {
            return (long)mh$.invokeExact(texture, sampler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeTextureHandleResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glMakeTextureHandleResidentNV$MH,"glMakeTextureHandleResidentNV");
    }
    public static void glMakeTextureHandleResidentNV ( long handle) {
        var mh$ = glMakeTextureHandleResidentNV$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeTextureHandleNonResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glMakeTextureHandleNonResidentNV$MH,"glMakeTextureHandleNonResidentNV");
    }
    public static void glMakeTextureHandleNonResidentNV ( long handle) {
        var mh$ = glMakeTextureHandleNonResidentNV$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetImageHandleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glGetImageHandleNV$MH,"glGetImageHandleNV");
    }
    public static long glGetImageHandleNV ( int texture,  int level,  byte layered,  int layer,  int format) {
        var mh$ = glGetImageHandleNV$MH();
        try {
            return (long)mh$.invokeExact(texture, level, layered, layer, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeImageHandleResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glMakeImageHandleResidentNV$MH,"glMakeImageHandleResidentNV");
    }
    public static void glMakeImageHandleResidentNV ( long handle,  int access) {
        var mh$ = glMakeImageHandleResidentNV$MH();
        try {
            mh$.invokeExact(handle, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeImageHandleNonResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1048.glMakeImageHandleNonResidentNV$MH,"glMakeImageHandleNonResidentNV");
    }
    public static void glMakeImageHandleNonResidentNV ( long handle) {
        var mh$ = glMakeImageHandleNonResidentNV$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformHandleui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glUniformHandleui64NV$MH,"glUniformHandleui64NV");
    }
    public static void glUniformHandleui64NV ( int location,  long value) {
        var mh$ = glUniformHandleui64NV$MH();
        try {
            mh$.invokeExact(location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformHandleui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glUniformHandleui64vNV$MH,"glUniformHandleui64vNV");
    }
    public static void glUniformHandleui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniformHandleui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformHandleui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glProgramUniformHandleui64NV$MH,"glProgramUniformHandleui64NV");
    }
    public static void glProgramUniformHandleui64NV ( int program,  int location,  long value) {
        var mh$ = glProgramUniformHandleui64NV$MH();
        try {
            mh$.invokeExact(program, location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformHandleui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glProgramUniformHandleui64vNV$MH,"glProgramUniformHandleui64vNV");
    }
    public static void glProgramUniformHandleui64vNV ( int program,  int location,  int count,  Addressable values) {
        var mh$ = glProgramUniformHandleui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTextureHandleResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glIsTextureHandleResidentNV$MH,"glIsTextureHandleResidentNV");
    }
    public static byte glIsTextureHandleResidentNV ( long handle) {
        var mh$ = glIsTextureHandleResidentNV$MH();
        try {
            return (byte)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsImageHandleResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1049.glIsImageHandleResidentNV$MH,"glIsImageHandleResidentNV");
    }
    public static byte glIsImageHandleResidentNV ( long handle) {
        var mh$ = glIsImageHandleResidentNV$MH();
        try {
            return (byte)mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.glBlendParameteriNV$MH,"glBlendParameteriNV");
    }
    public static void glBlendParameteriNV ( int pname,  int value) {
        var mh$ = glBlendParameteriNV$MH();
        try {
            mh$.invokeExact(pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1050.glBlendBarrierNV$MH,"glBlendBarrierNV");
    }
    public static void glBlendBarrierNV () {
        var mh$ = glBlendBarrierNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewportPositionWScaleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1051.glViewportPositionWScaleNV$MH,"glViewportPositionWScaleNV");
    }
    public static void glViewportPositionWScaleNV ( int index,  float xcoeff,  float ycoeff) {
        var mh$ = glViewportPositionWScaleNV$MH();
        try {
            mh$.invokeExact(index, xcoeff, ycoeff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateStatesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.glCreateStatesNV$MH,"glCreateStatesNV");
    }
    public static void glCreateStatesNV ( int n,  Addressable states) {
        var mh$ = glCreateStatesNV$MH();
        try {
            mh$.invokeExact(n, states);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteStatesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.glDeleteStatesNV$MH,"glDeleteStatesNV");
    }
    public static void glDeleteStatesNV ( int n,  Addressable states) {
        var mh$ = glDeleteStatesNV$MH();
        try {
            mh$.invokeExact(n, states);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsStateNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.glIsStateNV$MH,"glIsStateNV");
    }
    public static byte glIsStateNV ( int state) {
        var mh$ = glIsStateNV$MH();
        try {
            return (byte)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStateCaptureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.glStateCaptureNV$MH,"glStateCaptureNV");
    }
    public static void glStateCaptureNV ( int state,  int mode) {
        var mh$ = glStateCaptureNV$MH();
        try {
            mh$.invokeExact(state, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCommandHeaderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1057.glGetCommandHeaderNV$MH,"glGetCommandHeaderNV");
    }
    public static int glGetCommandHeaderNV ( int tokenID,  int size) {
        var mh$ = glGetCommandHeaderNV$MH();
        try {
            return (int)mh$.invokeExact(tokenID, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetStageIndexNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glGetStageIndexNV$MH,"glGetStageIndexNV");
    }
    public static short glGetStageIndexNV ( int shadertype) {
        var mh$ = glGetStageIndexNV$MH();
        try {
            return (short)mh$.invokeExact(shadertype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glDrawCommandsNV$MH,"glDrawCommandsNV");
    }
    public static void glDrawCommandsNV ( int primitiveMode,  int buffer,  Addressable indirects,  Addressable sizes,  int count) {
        var mh$ = glDrawCommandsNV$MH();
        try {
            mh$.invokeExact(primitiveMode, buffer, indirects, sizes, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawCommandsAddressNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glDrawCommandsAddressNV$MH,"glDrawCommandsAddressNV");
    }
    public static void glDrawCommandsAddressNV ( int primitiveMode,  Addressable indirects,  Addressable sizes,  int count) {
        var mh$ = glDrawCommandsAddressNV$MH();
        try {
            mh$.invokeExact(primitiveMode, indirects, sizes, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawCommandsStatesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glDrawCommandsStatesNV$MH,"glDrawCommandsStatesNV");
    }
    public static void glDrawCommandsStatesNV ( int buffer,  Addressable indirects,  Addressable sizes,  Addressable states,  Addressable fbos,  int count) {
        var mh$ = glDrawCommandsStatesNV$MH();
        try {
            mh$.invokeExact(buffer, indirects, sizes, states, fbos, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawCommandsStatesAddressNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glDrawCommandsStatesAddressNV$MH,"glDrawCommandsStatesAddressNV");
    }
    public static void glDrawCommandsStatesAddressNV ( Addressable indirects,  Addressable sizes,  Addressable states,  Addressable fbos,  int count) {
        var mh$ = glDrawCommandsStatesAddressNV$MH();
        try {
            mh$.invokeExact(indirects, sizes, states, fbos, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateCommandListsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1058.glCreateCommandListsNV$MH,"glCreateCommandListsNV");
    }
    public static void glCreateCommandListsNV ( int n,  Addressable lists) {
        var mh$ = glCreateCommandListsNV$MH();
        try {
            mh$.invokeExact(n, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteCommandListsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glDeleteCommandListsNV$MH,"glDeleteCommandListsNV");
    }
    public static void glDeleteCommandListsNV ( int n,  Addressable lists) {
        var mh$ = glDeleteCommandListsNV$MH();
        try {
            mh$.invokeExact(n, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsCommandListNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glIsCommandListNV$MH,"glIsCommandListNV");
    }
    public static byte glIsCommandListNV ( int list) {
        var mh$ = glIsCommandListNV$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListDrawCommandsStatesClientNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glListDrawCommandsStatesClientNV$MH,"glListDrawCommandsStatesClientNV");
    }
    public static void glListDrawCommandsStatesClientNV ( int list,  int segment,  Addressable indirects,  Addressable sizes,  Addressable states,  Addressable fbos,  int count) {
        var mh$ = glListDrawCommandsStatesClientNV$MH();
        try {
            mh$.invokeExact(list, segment, indirects, sizes, states, fbos, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCommandListSegmentsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glCommandListSegmentsNV$MH,"glCommandListSegmentsNV");
    }
    public static void glCommandListSegmentsNV ( int list,  int segments) {
        var mh$ = glCommandListSegmentsNV$MH();
        try {
            mh$.invokeExact(list, segments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileCommandListNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glCompileCommandListNV$MH,"glCompileCommandListNV");
    }
    public static void glCompileCommandListNV ( int list) {
        var mh$ = glCompileCommandListNV$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallCommandListNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glCallCommandListNV$MH,"glCallCommandListNV");
    }
    public static void glCallCommandListNV ( int list) {
        var mh$ = glCallCommandListNV$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.glBeginConditionalRenderNV$MH,"glBeginConditionalRenderNV");
    }
    public static void glBeginConditionalRenderNV ( int id,  int mode) {
        var mh$ = glBeginConditionalRenderNV$MH();
        try {
            mh$.invokeExact(id, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.glEndConditionalRenderNV$MH,"glEndConditionalRenderNV");
    }
    public static void glEndConditionalRenderNV () {
        var mh$ = glEndConditionalRenderNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSubpixelPrecisionBiasNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glSubpixelPrecisionBiasNV$MH,"glSubpixelPrecisionBiasNV");
    }
    public static void glSubpixelPrecisionBiasNV ( int xbits,  int ybits) {
        var mh$ = glSubpixelPrecisionBiasNV$MH();
        try {
            mh$.invokeExact(xbits, ybits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConservativeRasterParameterfNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glConservativeRasterParameterfNV$MH,"glConservativeRasterParameterfNV");
    }
    public static void glConservativeRasterParameterfNV ( int pname,  float value) {
        var mh$ = glConservativeRasterParameterfNV$MH();
        try {
            mh$.invokeExact(pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConservativeRasterParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.glConservativeRasterParameteriNV$MH,"glConservativeRasterParameteriNV");
    }
    public static void glConservativeRasterParameteriNV ( int pname,  int param) {
        var mh$ = glConservativeRasterParameteriNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyImageSubDataNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1062.glCopyImageSubDataNV$MH,"glCopyImageSubDataNV");
    }
    public static void glCopyImageSubDataNV ( int srcName,  int srcTarget,  int srcLevel,  int srcX,  int srcY,  int srcZ,  int dstName,  int dstTarget,  int dstLevel,  int dstX,  int dstY,  int dstZ,  int width,  int height,  int depth) {
        var mh$ = glCopyImageSubDataNV$MH();
        try {
            mh$.invokeExact(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRangedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.glDepthRangedNV$MH,"glDepthRangedNV");
    }
    public static void glDepthRangedNV ( double zNear,  double zFar) {
        var mh$ = glDepthRangedNV$MH();
        try {
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepthdNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.glClearDepthdNV$MH,"glClearDepthdNV");
    }
    public static void glClearDepthdNV ( double depth) {
        var mh$ = glClearDepthdNV$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthBoundsdNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.glDepthBoundsdNV$MH,"glDepthBoundsdNV");
    }
    public static void glDepthBoundsdNV ( double zmin,  double zmax) {
        var mh$ = glDepthBoundsdNV$MH();
        try {
            mh$.invokeExact(zmin, zmax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTextureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1064.glDrawTextureNV$MH,"glDrawTextureNV");
    }
    public static void glDrawTextureNV ( int texture,  int sampler,  float x0,  float y0,  float x1,  float y1,  float z,  float s0,  float t0,  float s1,  float t1) {
        var mh$ = glDrawTextureNV$MH();
        try {
            mh$.invokeExact(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawVkImageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.glDrawVkImageNV$MH,"glDrawVkImageNV");
    }
    public static void glDrawVkImageNV ( long vkImage,  int sampler,  float x0,  float y0,  float x1,  float y1,  float z,  float s0,  float t0,  float s1,  float t1) {
        var mh$ = glDrawVkImageNV$MH();
        try {
            mh$.invokeExact(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVkProcAddrNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.glGetVkProcAddrNV$MH,"glGetVkProcAddrNV");
    }
    public static MemoryAddress glGetVkProcAddrNV ( Addressable name) {
        var mh$ = glGetVkProcAddrNV$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitVkSemaphoreNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.glWaitVkSemaphoreNV$MH,"glWaitVkSemaphoreNV");
    }
    public static void glWaitVkSemaphoreNV ( long vkSemaphore) {
        var mh$ = glWaitVkSemaphoreNV$MH();
        try {
            mh$.invokeExact(vkSemaphore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSignalVkSemaphoreNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.glSignalVkSemaphoreNV$MH,"glSignalVkSemaphoreNV");
    }
    public static void glSignalVkSemaphoreNV ( long vkSemaphore) {
        var mh$ = glSignalVkSemaphoreNV$MH();
        try {
            mh$.invokeExact(vkSemaphore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSignalVkFenceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1067.glSignalVkFenceNV$MH,"glSignalVkFenceNV");
    }
    public static void glSignalVkFenceNV ( long vkFence) {
        var mh$ = glSignalVkFenceNV$MH();
        try {
            mh$.invokeExact(vkFence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapControlPointsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1070.glMapControlPointsNV$MH,"glMapControlPointsNV");
    }
    public static void glMapControlPointsNV ( int target,  int index,  int type,  int ustride,  int vstride,  int uorder,  int vorder,  byte packed,  Addressable points) {
        var mh$ = glMapControlPointsNV$MH();
        try {
            mh$.invokeExact(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glMapParameterivNV$MH,"glMapParameterivNV");
    }
    public static void glMapParameterivNV ( int target,  int pname,  Addressable params) {
        var mh$ = glMapParameterivNV$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glMapParameterfvNV$MH,"glMapParameterfvNV");
    }
    public static void glMapParameterfvNV ( int target,  int pname,  Addressable params) {
        var mh$ = glMapParameterfvNV$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapControlPointsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glGetMapControlPointsNV$MH,"glGetMapControlPointsNV");
    }
    public static void glGetMapControlPointsNV ( int target,  int index,  int type,  int ustride,  int vstride,  byte packed,  Addressable points) {
        var mh$ = glGetMapControlPointsNV$MH();
        try {
            mh$.invokeExact(target, index, type, ustride, vstride, packed, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glGetMapParameterivNV$MH,"glGetMapParameterivNV");
    }
    public static void glGetMapParameterivNV ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMapParameterivNV$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glGetMapParameterfvNV$MH,"glGetMapParameterfvNV");
    }
    public static void glGetMapParameterfvNV ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMapParameterfvNV$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapAttribParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1071.glGetMapAttribParameterivNV$MH,"glGetMapAttribParameterivNV");
    }
    public static void glGetMapAttribParameterivNV ( int target,  int index,  int pname,  Addressable params) {
        var mh$ = glGetMapAttribParameterivNV$MH();
        try {
            mh$.invokeExact(target, index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapAttribParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.glGetMapAttribParameterfvNV$MH,"glGetMapAttribParameterfvNV");
    }
    public static void glGetMapAttribParameterfvNV ( int target,  int index,  int pname,  Addressable params) {
        var mh$ = glGetMapAttribParameterfvNV$MH();
        try {
            mh$.invokeExact(target, index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMapsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1072.glEvalMapsNV$MH,"glEvalMapsNV");
    }
    public static void glEvalMapsNV ( int target,  int mode) {
        var mh$ = glEvalMapsNV$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMultisamplefvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.glGetMultisamplefvNV$MH,"glGetMultisamplefvNV");
    }
    public static void glGetMultisamplefvNV ( int pname,  int index,  Addressable val) {
        var mh$ = glGetMultisamplefvNV$MH();
        try {
            mh$.invokeExact(pname, index, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleMaskIndexedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.glSampleMaskIndexedNV$MH,"glSampleMaskIndexedNV");
    }
    public static void glSampleMaskIndexedNV ( int index,  int mask) {
        var mh$ = glSampleMaskIndexedNV$MH();
        try {
            mh$.invokeExact(index, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexRenderbufferNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1073.glTexRenderbufferNV$MH,"glTexRenderbufferNV");
    }
    public static void glTexRenderbufferNV ( int target,  int renderbuffer) {
        var mh$ = glTexRenderbufferNV$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFencesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.glDeleteFencesNV$MH,"glDeleteFencesNV");
    }
    public static void glDeleteFencesNV ( int n,  Addressable fences) {
        var mh$ = glDeleteFencesNV$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFencesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.glGenFencesNV$MH,"glGenFencesNV");
    }
    public static void glGenFencesNV ( int n,  Addressable fences) {
        var mh$ = glGenFencesNV$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFenceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.glIsFenceNV$MH,"glIsFenceNV");
    }
    public static byte glIsFenceNV ( int fence) {
        var mh$ = glIsFenceNV$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestFenceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.glTestFenceNV$MH,"glTestFenceNV");
    }
    public static byte glTestFenceNV ( int fence) {
        var mh$ = glTestFenceNV$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFenceivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1076.glGetFenceivNV$MH,"glGetFenceivNV");
    }
    public static void glGetFenceivNV ( int fence,  int pname,  Addressable params) {
        var mh$ = glGetFenceivNV$MH();
        try {
            mh$.invokeExact(fence, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishFenceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.glFinishFenceNV$MH,"glFinishFenceNV");
    }
    public static void glFinishFenceNV ( int fence) {
        var mh$ = glFinishFenceNV$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetFenceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.glSetFenceNV$MH,"glSetFenceNV");
    }
    public static void glSetFenceNV ( int fence,  int condition) {
        var mh$ = glSetFenceNV$MH();
        try {
            mh$.invokeExact(fence, condition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentCoverageColorNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1077.glFragmentCoverageColorNV$MH,"glFragmentCoverageColorNV");
    }
    public static void glFragmentCoverageColorNV ( int color) {
        var mh$ = glFragmentCoverageColorNV$MH();
        try {
            mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramNamedParameter4fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1079.glProgramNamedParameter4fNV$MH,"glProgramNamedParameter4fNV");
    }
    public static void glProgramNamedParameter4fNV ( int id,  int len,  Addressable name,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramNamedParameter4fNV$MH();
        try {
            mh$.invokeExact(id, len, name, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramNamedParameter4fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.glProgramNamedParameter4fvNV$MH,"glProgramNamedParameter4fvNV");
    }
    public static void glProgramNamedParameter4fvNV ( int id,  int len,  Addressable name,  Addressable v) {
        var mh$ = glProgramNamedParameter4fvNV$MH();
        try {
            mh$.invokeExact(id, len, name, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramNamedParameter4dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.glProgramNamedParameter4dNV$MH,"glProgramNamedParameter4dNV");
    }
    public static void glProgramNamedParameter4dNV ( int id,  int len,  Addressable name,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramNamedParameter4dNV$MH();
        try {
            mh$.invokeExact(id, len, name, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramNamedParameter4dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.glProgramNamedParameter4dvNV$MH,"glProgramNamedParameter4dvNV");
    }
    public static void glProgramNamedParameter4dvNV ( int id,  int len,  Addressable name,  Addressable v) {
        var mh$ = glProgramNamedParameter4dvNV$MH();
        try {
            mh$.invokeExact(id, len, name, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramNamedParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.glGetProgramNamedParameterfvNV$MH,"glGetProgramNamedParameterfvNV");
    }
    public static void glGetProgramNamedParameterfvNV ( int id,  int len,  Addressable name,  Addressable params) {
        var mh$ = glGetProgramNamedParameterfvNV$MH();
        try {
            mh$.invokeExact(id, len, name, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramNamedParameterdvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1080.glGetProgramNamedParameterdvNV$MH,"glGetProgramNamedParameterdvNV");
    }
    public static void glGetProgramNamedParameterdvNV ( int id,  int len,  Addressable name,  Addressable params) {
        var mh$ = glGetProgramNamedParameterdvNV$MH();
        try {
            mh$.invokeExact(id, len, name, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverageModulationTableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1081.glCoverageModulationTableNV$MH,"glCoverageModulationTableNV");
    }
    public static void glCoverageModulationTableNV ( int n,  Addressable v) {
        var mh$ = glCoverageModulationTableNV$MH();
        try {
            mh$.invokeExact(n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCoverageModulationTableNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.glGetCoverageModulationTableNV$MH,"glGetCoverageModulationTableNV");
    }
    public static void glGetCoverageModulationTableNV ( int bufsize,  Addressable v) {
        var mh$ = glGetCoverageModulationTableNV$MH();
        try {
            mh$.invokeExact(bufsize, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverageModulationNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.glCoverageModulationNV$MH,"glCoverageModulationNV");
    }
    public static void glCoverageModulationNV ( int components) {
        var mh$ = glCoverageModulationNV$MH();
        try {
            mh$.invokeExact(components);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisampleCoverageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1082.glRenderbufferStorageMultisampleCoverageNV$MH,"glRenderbufferStorageMultisampleCoverageNV");
    }
    public static void glRenderbufferStorageMultisampleCoverageNV ( int target,  int coverageSamples,  int colorSamples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisampleCoverageNV$MH();
        try {
            mh$.invokeExact(target, coverageSamples, colorSamples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramVertexLimitNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1083.glProgramVertexLimitNV$MH,"glProgramVertexLimitNV");
    }
    public static void glProgramVertexLimitNV ( int target,  int limit) {
        var mh$ = glProgramVertexLimitNV$MH();
        try {
            mh$.invokeExact(target, limit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.glFramebufferTextureEXT$MH,"glFramebufferTextureEXT");
    }
    public static void glFramebufferTextureEXT ( int target,  int attachment,  int texture,  int level) {
        var mh$ = glFramebufferTextureEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1084.glFramebufferTextureFaceEXT$MH,"glFramebufferTextureFaceEXT");
    }
    public static void glFramebufferTextureFaceEXT ( int target,  int attachment,  int texture,  int level,  int face) {
        var mh$ = glFramebufferTextureFaceEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderGpuMaskNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.glRenderGpuMaskNV$MH,"glRenderGpuMaskNV");
    }
    public static void glRenderGpuMaskNV ( int mask) {
        var mh$ = glRenderGpuMaskNV$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastBufferSubDataNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.glMulticastBufferSubDataNV$MH,"glMulticastBufferSubDataNV");
    }
    public static void glMulticastBufferSubDataNV ( int gpuMask,  int buffer,  long offset,  long size,  Addressable data) {
        var mh$ = glMulticastBufferSubDataNV$MH();
        try {
            mh$.invokeExact(gpuMask, buffer, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastCopyBufferSubDataNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.glMulticastCopyBufferSubDataNV$MH,"glMulticastCopyBufferSubDataNV");
    }
    public static void glMulticastCopyBufferSubDataNV ( int readGpu,  int writeGpuMask,  int readBuffer,  int writeBuffer,  long readOffset,  long writeOffset,  long size) {
        var mh$ = glMulticastCopyBufferSubDataNV$MH();
        try {
            mh$.invokeExact(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastCopyImageSubDataNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1088.glMulticastCopyImageSubDataNV$MH,"glMulticastCopyImageSubDataNV");
    }
    public static void glMulticastCopyImageSubDataNV ( int srcGpu,  int dstGpuMask,  int srcName,  int srcTarget,  int srcLevel,  int srcX,  int srcY,  int srcZ,  int dstName,  int dstTarget,  int dstLevel,  int dstX,  int dstY,  int dstZ,  int srcWidth,  int srcHeight,  int srcDepth) {
        var mh$ = glMulticastCopyImageSubDataNV$MH();
        try {
            mh$.invokeExact(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastBlitFramebufferNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastBlitFramebufferNV$MH,"glMulticastBlitFramebufferNV");
    }
    public static void glMulticastBlitFramebufferNV ( int srcGpu,  int dstGpu,  int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glMulticastBlitFramebufferNV$MH();
        try {
            mh$.invokeExact(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastFramebufferSampleLocationsfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastFramebufferSampleLocationsfvNV$MH,"glMulticastFramebufferSampleLocationsfvNV");
    }
    public static void glMulticastFramebufferSampleLocationsfvNV ( int gpu,  int framebuffer,  int start,  int count,  Addressable v) {
        var mh$ = glMulticastFramebufferSampleLocationsfvNV$MH();
        try {
            mh$.invokeExact(gpu, framebuffer, start, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastBarrierNV$MH,"glMulticastBarrierNV");
    }
    public static void glMulticastBarrierNV () {
        var mh$ = glMulticastBarrierNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastWaitSyncNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastWaitSyncNV$MH,"glMulticastWaitSyncNV");
    }
    public static void glMulticastWaitSyncNV ( int signalGpu,  int waitGpuMask) {
        var mh$ = glMulticastWaitSyncNV$MH();
        try {
            mh$.invokeExact(signalGpu, waitGpuMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastGetQueryObjectivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastGetQueryObjectivNV$MH,"glMulticastGetQueryObjectivNV");
    }
    public static void glMulticastGetQueryObjectivNV ( int gpu,  int id,  int pname,  Addressable params) {
        var mh$ = glMulticastGetQueryObjectivNV$MH();
        try {
            mh$.invokeExact(gpu, id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastGetQueryObjectuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1089.glMulticastGetQueryObjectuivNV$MH,"glMulticastGetQueryObjectuivNV");
    }
    public static void glMulticastGetQueryObjectuivNV ( int gpu,  int id,  int pname,  Addressable params) {
        var mh$ = glMulticastGetQueryObjectuivNV$MH();
        try {
            mh$.invokeExact(gpu, id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastGetQueryObjecti64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.glMulticastGetQueryObjecti64vNV$MH,"glMulticastGetQueryObjecti64vNV");
    }
    public static void glMulticastGetQueryObjecti64vNV ( int gpu,  int id,  int pname,  Addressable params) {
        var mh$ = glMulticastGetQueryObjecti64vNV$MH();
        try {
            mh$.invokeExact(gpu, id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMulticastGetQueryObjectui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1090.glMulticastGetQueryObjectui64vNV$MH,"glMulticastGetQueryObjectui64vNV");
    }
    public static void glMulticastGetQueryObjectui64vNV ( int gpu,  int id,  int pname,  Addressable params) {
        var mh$ = glMulticastGetQueryObjectui64vNV$MH();
        try {
            mh$.invokeExact(gpu, id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameterI4iNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.glProgramLocalParameterI4iNV$MH,"glProgramLocalParameterI4iNV");
    }
    public static void glProgramLocalParameterI4iNV ( int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glProgramLocalParameterI4iNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameterI4ivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1095.glProgramLocalParameterI4ivNV$MH,"glProgramLocalParameterI4ivNV");
    }
    public static void glProgramLocalParameterI4ivNV ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameterI4ivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParametersI4ivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramLocalParametersI4ivNV$MH,"glProgramLocalParametersI4ivNV");
    }
    public static void glProgramLocalParametersI4ivNV ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramLocalParametersI4ivNV$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameterI4uiNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramLocalParameterI4uiNV$MH,"glProgramLocalParameterI4uiNV");
    }
    public static void glProgramLocalParameterI4uiNV ( int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glProgramLocalParameterI4uiNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameterI4uivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramLocalParameterI4uivNV$MH,"glProgramLocalParameterI4uivNV");
    }
    public static void glProgramLocalParameterI4uivNV ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameterI4uivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParametersI4uivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramLocalParametersI4uivNV$MH,"glProgramLocalParametersI4uivNV");
    }
    public static void glProgramLocalParametersI4uivNV ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramLocalParametersI4uivNV$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameterI4iNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramEnvParameterI4iNV$MH,"glProgramEnvParameterI4iNV");
    }
    public static void glProgramEnvParameterI4iNV ( int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glProgramEnvParameterI4iNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameterI4ivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1096.glProgramEnvParameterI4ivNV$MH,"glProgramEnvParameterI4ivNV");
    }
    public static void glProgramEnvParameterI4ivNV ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameterI4ivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParametersI4ivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glProgramEnvParametersI4ivNV$MH,"glProgramEnvParametersI4ivNV");
    }
    public static void glProgramEnvParametersI4ivNV ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramEnvParametersI4ivNV$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameterI4uiNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glProgramEnvParameterI4uiNV$MH,"glProgramEnvParameterI4uiNV");
    }
    public static void glProgramEnvParameterI4uiNV ( int target,  int index,  int x,  int y,  int z,  int w) {
        var mh$ = glProgramEnvParameterI4uiNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameterI4uivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glProgramEnvParameterI4uivNV$MH,"glProgramEnvParameterI4uivNV");
    }
    public static void glProgramEnvParameterI4uivNV ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameterI4uivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParametersI4uivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glProgramEnvParametersI4uivNV$MH,"glProgramEnvParametersI4uivNV");
    }
    public static void glProgramEnvParametersI4uivNV ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramEnvParametersI4uivNV$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterIivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glGetProgramLocalParameterIivNV$MH,"glGetProgramLocalParameterIivNV");
    }
    public static void glGetProgramLocalParameterIivNV ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterIivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterIuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1097.glGetProgramLocalParameterIuivNV$MH,"glGetProgramLocalParameterIuivNV");
    }
    public static void glGetProgramLocalParameterIuivNV ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterIuivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterIivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.glGetProgramEnvParameterIivNV$MH,"glGetProgramEnvParameterIivNV");
    }
    public static void glGetProgramEnvParameterIivNV ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterIivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterIuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1098.glGetProgramEnvParameterIuivNV$MH,"glGetProgramEnvParameterIuivNV");
    }
    public static void glGetProgramEnvParameterIuivNV ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterIuivNV$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramSubroutineParametersuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.glProgramSubroutineParametersuivNV$MH,"glProgramSubroutineParametersuivNV");
    }
    public static void glProgramSubroutineParametersuivNV ( int target,  int count,  Addressable params) {
        var mh$ = glProgramSubroutineParametersuivNV$MH();
        try {
            mh$.invokeExact(target, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramSubroutineParameteruivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1099.glGetProgramSubroutineParameteruivNV$MH,"glGetProgramSubroutineParameteruivNV");
    }
    public static void glGetProgramSubroutineParameteruivNV ( int target,  int index,  Addressable param) {
        var mh$ = glGetProgramSubroutineParameteruivNV$MH();
        try {
            mh$.invokeExact(target, index, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.glVertex2hNV$MH,"glVertex2hNV");
    }
    public static void glVertex2hNV ( short x,  short y) {
        var mh$ = glVertex2hNV$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1114.glVertex2hvNV$MH,"glVertex2hvNV");
    }
    public static void glVertex2hvNV ( Addressable v) {
        var mh$ = glVertex2hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glVertex3hNV$MH,"glVertex3hNV");
    }
    public static void glVertex3hNV ( short x,  short y,  short z) {
        var mh$ = glVertex3hNV$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glVertex3hvNV$MH,"glVertex3hvNV");
    }
    public static void glVertex3hvNV ( Addressable v) {
        var mh$ = glVertex3hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glVertex4hNV$MH,"glVertex4hNV");
    }
    public static void glVertex4hNV ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4hNV$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glVertex4hvNV$MH,"glVertex4hvNV");
    }
    public static void glVertex4hvNV ( Addressable v) {
        var mh$ = glVertex4hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glNormal3hNV$MH,"glNormal3hNV");
    }
    public static void glNormal3hNV ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3hNV$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1115.glNormal3hvNV$MH,"glNormal3hvNV");
    }
    public static void glNormal3hvNV ( Addressable v) {
        var mh$ = glNormal3hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glColor3hNV$MH,"glColor3hNV");
    }
    public static void glColor3hNV ( short red,  short green,  short blue) {
        var mh$ = glColor3hNV$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glColor3hvNV$MH,"glColor3hvNV");
    }
    public static void glColor3hvNV ( Addressable v) {
        var mh$ = glColor3hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glColor4hNV$MH,"glColor4hNV");
    }
    public static void glColor4hNV ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4hNV$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glColor4hvNV$MH,"glColor4hvNV");
    }
    public static void glColor4hvNV ( Addressable v) {
        var mh$ = glColor4hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glTexCoord1hNV$MH,"glTexCoord1hNV");
    }
    public static void glTexCoord1hNV ( short s) {
        var mh$ = glTexCoord1hNV$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1116.glTexCoord1hvNV$MH,"glTexCoord1hvNV");
    }
    public static void glTexCoord1hvNV ( Addressable v) {
        var mh$ = glTexCoord1hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord2hNV$MH,"glTexCoord2hNV");
    }
    public static void glTexCoord2hNV ( short s,  short t) {
        var mh$ = glTexCoord2hNV$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord2hvNV$MH,"glTexCoord2hvNV");
    }
    public static void glTexCoord2hvNV ( Addressable v) {
        var mh$ = glTexCoord2hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord3hNV$MH,"glTexCoord3hNV");
    }
    public static void glTexCoord3hNV ( short s,  short t,  short r) {
        var mh$ = glTexCoord3hNV$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord3hvNV$MH,"glTexCoord3hvNV");
    }
    public static void glTexCoord3hvNV ( Addressable v) {
        var mh$ = glTexCoord3hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord4hNV$MH,"glTexCoord4hNV");
    }
    public static void glTexCoord4hNV ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4hNV$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1117.glTexCoord4hvNV$MH,"glTexCoord4hvNV");
    }
    public static void glTexCoord4hvNV ( Addressable v) {
        var mh$ = glTexCoord4hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord1hNV$MH,"glMultiTexCoord1hNV");
    }
    public static void glMultiTexCoord1hNV ( int target,  short s) {
        var mh$ = glMultiTexCoord1hNV$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord1hvNV$MH,"glMultiTexCoord1hvNV");
    }
    public static void glMultiTexCoord1hvNV ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1hvNV$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord2hNV$MH,"glMultiTexCoord2hNV");
    }
    public static void glMultiTexCoord2hNV ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2hNV$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord2hvNV$MH,"glMultiTexCoord2hvNV");
    }
    public static void glMultiTexCoord2hvNV ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2hvNV$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord3hNV$MH,"glMultiTexCoord3hNV");
    }
    public static void glMultiTexCoord3hNV ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3hNV$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1118.glMultiTexCoord3hvNV$MH,"glMultiTexCoord3hvNV");
    }
    public static void glMultiTexCoord3hvNV ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3hvNV$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glMultiTexCoord4hNV$MH,"glMultiTexCoord4hNV");
    }
    public static void glMultiTexCoord4hNV ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4hNV$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glMultiTexCoord4hvNV$MH,"glMultiTexCoord4hvNV");
    }
    public static void glMultiTexCoord4hvNV ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4hvNV$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordhNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glFogCoordhNV$MH,"glFogCoordhNV");
    }
    public static void glFogCoordhNV ( short fog) {
        var mh$ = glFogCoordhNV$MH();
        try {
            mh$.invokeExact(fog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordhvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glFogCoordhvNV$MH,"glFogCoordhvNV");
    }
    public static void glFogCoordhvNV ( Addressable fog) {
        var mh$ = glFogCoordhvNV$MH();
        try {
            mh$.invokeExact(fog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glSecondaryColor3hNV$MH,"glSecondaryColor3hNV");
    }
    public static void glSecondaryColor3hNV ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3hNV$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1119.glSecondaryColor3hvNV$MH,"glSecondaryColor3hvNV");
    }
    public static void glSecondaryColor3hvNV ( Addressable v) {
        var mh$ = glSecondaryColor3hvNV$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexWeighthNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexWeighthNV$MH,"glVertexWeighthNV");
    }
    public static void glVertexWeighthNV ( short weight) {
        var mh$ = glVertexWeighthNV$MH();
        try {
            mh$.invokeExact(weight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexWeighthvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexWeighthvNV$MH,"glVertexWeighthvNV");
    }
    public static void glVertexWeighthvNV ( Addressable weight) {
        var mh$ = glVertexWeighthvNV$MH();
        try {
            mh$.invokeExact(weight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexAttrib1hNV$MH,"glVertexAttrib1hNV");
    }
    public static void glVertexAttrib1hNV ( int index,  short x) {
        var mh$ = glVertexAttrib1hNV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexAttrib1hvNV$MH,"glVertexAttrib1hvNV");
    }
    public static void glVertexAttrib1hvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1hvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexAttrib2hNV$MH,"glVertexAttrib2hNV");
    }
    public static void glVertexAttrib2hNV ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2hNV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1120.glVertexAttrib2hvNV$MH,"glVertexAttrib2hvNV");
    }
    public static void glVertexAttrib2hvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2hvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttrib3hNV$MH,"glVertexAttrib3hNV");
    }
    public static void glVertexAttrib3hNV ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3hNV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttrib3hvNV$MH,"glVertexAttrib3hvNV");
    }
    public static void glVertexAttrib3hvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3hvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4hNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttrib4hNV$MH,"glVertexAttrib4hNV");
    }
    public static void glVertexAttrib4hNV ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4hNV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttrib4hvNV$MH,"glVertexAttrib4hvNV");
    }
    public static void glVertexAttrib4hvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4hvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs1hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttribs1hvNV$MH,"glVertexAttribs1hvNV");
    }
    public static void glVertexAttribs1hvNV ( int index,  int n,  Addressable v) {
        var mh$ = glVertexAttribs1hvNV$MH();
        try {
            mh$.invokeExact(index, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs2hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1121.glVertexAttribs2hvNV$MH,"glVertexAttribs2hvNV");
    }
    public static void glVertexAttribs2hvNV ( int index,  int n,  Addressable v) {
        var mh$ = glVertexAttribs2hvNV$MH();
        try {
            mh$.invokeExact(index, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs3hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.glVertexAttribs3hvNV$MH,"glVertexAttribs3hvNV");
    }
    public static void glVertexAttribs3hvNV ( int index,  int n,  Addressable v) {
        var mh$ = glVertexAttribs3hvNV$MH();
        try {
            mh$.invokeExact(index, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs4hvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.glVertexAttribs4hvNV$MH,"glVertexAttribs4hvNV");
    }
    public static void glVertexAttribs4hvNV ( int index,  int n,  Addressable v) {
        var mh$ = glVertexAttribs4hvNV$MH();
        try {
            mh$.invokeExact(index, n, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInternalformatSampleivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1122.glGetInternalformatSampleivNV$MH,"glGetInternalformatSampleivNV");
    }
    public static void glGetInternalformatSampleivNV ( int target,  int internalformat,  int samples,  int pname,  int bufSize,  Addressable params) {
        var mh$ = glGetInternalformatSampleivNV$MH();
        try {
            mh$.invokeExact(target, internalformat, samples, pname, bufSize, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMemoryObjectDetachedResourcesuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1124.glGetMemoryObjectDetachedResourcesuivNV$MH,"glGetMemoryObjectDetachedResourcesuivNV");
    }
    public static void glGetMemoryObjectDetachedResourcesuivNV ( int memory,  int pname,  int first,  int count,  Addressable params) {
        var mh$ = glGetMemoryObjectDetachedResourcesuivNV$MH();
        try {
            mh$.invokeExact(memory, pname, first, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMemoryObjectParameterNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.glResetMemoryObjectParameterNV$MH,"glResetMemoryObjectParameterNV");
    }
    public static void glResetMemoryObjectParameterNV ( int memory,  int pname) {
        var mh$ = glResetMemoryObjectParameterNV$MH();
        try {
            mh$.invokeExact(memory, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexAttachMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.glTexAttachMemoryNV$MH,"glTexAttachMemoryNV");
    }
    public static void glTexAttachMemoryNV ( int target,  int memory,  long offset) {
        var mh$ = glTexAttachMemoryNV$MH();
        try {
            mh$.invokeExact(target, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferAttachMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.glBufferAttachMemoryNV$MH,"glBufferAttachMemoryNV");
    }
    public static void glBufferAttachMemoryNV ( int target,  int memory,  long offset) {
        var mh$ = glBufferAttachMemoryNV$MH();
        try {
            mh$.invokeExact(target, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureAttachMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.glTextureAttachMemoryNV$MH,"glTextureAttachMemoryNV");
    }
    public static void glTextureAttachMemoryNV ( int texture,  int memory,  long offset) {
        var mh$ = glTextureAttachMemoryNV$MH();
        try {
            mh$.invokeExact(texture, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedBufferAttachMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1125.glNamedBufferAttachMemoryNV$MH,"glNamedBufferAttachMemoryNV");
    }
    public static void glNamedBufferAttachMemoryNV ( int buffer,  int memory,  long offset) {
        var mh$ = glNamedBufferAttachMemoryNV$MH();
        try {
            mh$.invokeExact(buffer, memory, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawMeshTasksNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.glDrawMeshTasksNV$MH,"glDrawMeshTasksNV");
    }
    public static void glDrawMeshTasksNV ( int first,  int count) {
        var mh$ = glDrawMeshTasksNV$MH();
        try {
            mh$.invokeExact(first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawMeshTasksIndirectNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.glDrawMeshTasksIndirectNV$MH,"glDrawMeshTasksIndirectNV");
    }
    public static void glDrawMeshTasksIndirectNV ( long indirect) {
        var mh$ = glDrawMeshTasksIndirectNV$MH();
        try {
            mh$.invokeExact(indirect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawMeshTasksIndirectNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.glMultiDrawMeshTasksIndirectNV$MH,"glMultiDrawMeshTasksIndirectNV");
    }
    public static void glMultiDrawMeshTasksIndirectNV ( long indirect,  int drawcount,  int stride) {
        var mh$ = glMultiDrawMeshTasksIndirectNV$MH();
        try {
            mh$.invokeExact(indirect, drawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawMeshTasksIndirectCountNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1127.glMultiDrawMeshTasksIndirectCountNV$MH,"glMultiDrawMeshTasksIndirectCountNV");
    }
    public static void glMultiDrawMeshTasksIndirectCountNV ( long indirect,  long drawcount,  int maxdrawcount,  int stride) {
        var mh$ = glMultiDrawMeshTasksIndirectCountNV$MH();
        try {
            mh$.invokeExact(indirect, drawcount, maxdrawcount, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenOcclusionQueriesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.glGenOcclusionQueriesNV$MH,"glGenOcclusionQueriesNV");
    }
    public static void glGenOcclusionQueriesNV ( int n,  Addressable ids) {
        var mh$ = glGenOcclusionQueriesNV$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteOcclusionQueriesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.glDeleteOcclusionQueriesNV$MH,"glDeleteOcclusionQueriesNV");
    }
    public static void glDeleteOcclusionQueriesNV ( int n,  Addressable ids) {
        var mh$ = glDeleteOcclusionQueriesNV$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsOcclusionQueryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.glIsOcclusionQueryNV$MH,"glIsOcclusionQueryNV");
    }
    public static byte glIsOcclusionQueryNV ( int id) {
        var mh$ = glIsOcclusionQueryNV$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginOcclusionQueryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.glBeginOcclusionQueryNV$MH,"glBeginOcclusionQueryNV");
    }
    public static void glBeginOcclusionQueryNV ( int id) {
        var mh$ = glBeginOcclusionQueryNV$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndOcclusionQueryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1130.glEndOcclusionQueryNV$MH,"glEndOcclusionQueryNV");
    }
    public static void glEndOcclusionQueryNV () {
        var mh$ = glEndOcclusionQueryNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetOcclusionQueryivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.glGetOcclusionQueryivNV$MH,"glGetOcclusionQueryivNV");
    }
    public static void glGetOcclusionQueryivNV ( int id,  int pname,  Addressable params) {
        var mh$ = glGetOcclusionQueryivNV$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetOcclusionQueryuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1131.glGetOcclusionQueryuivNV$MH,"glGetOcclusionQueryuivNV");
    }
    public static void glGetOcclusionQueryuivNV ( int id,  int pname,  Addressable params) {
        var mh$ = glGetOcclusionQueryuivNV$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramBufferParametersfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.glProgramBufferParametersfvNV$MH,"glProgramBufferParametersfvNV");
    }
    public static void glProgramBufferParametersfvNV ( int target,  int bindingIndex,  int wordIndex,  int count,  Addressable params) {
        var mh$ = glProgramBufferParametersfvNV$MH();
        try {
            mh$.invokeExact(target, bindingIndex, wordIndex, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramBufferParametersIivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.glProgramBufferParametersIivNV$MH,"glProgramBufferParametersIivNV");
    }
    public static void glProgramBufferParametersIivNV ( int target,  int bindingIndex,  int wordIndex,  int count,  Addressable params) {
        var mh$ = glProgramBufferParametersIivNV$MH();
        try {
            mh$.invokeExact(target, bindingIndex, wordIndex, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramBufferParametersIuivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1132.glProgramBufferParametersIuivNV$MH,"glProgramBufferParametersIuivNV");
    }
    public static void glProgramBufferParametersIuivNV ( int target,  int bindingIndex,  int wordIndex,  int count,  Addressable params) {
        var mh$ = glProgramBufferParametersIuivNV$MH();
        try {
            mh$.invokeExact(target, bindingIndex, wordIndex, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenPathsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.glGenPathsNV$MH,"glGenPathsNV");
    }
    public static int glGenPathsNV ( int range) {
        var mh$ = glGenPathsNV$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeletePathsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.glDeletePathsNV$MH,"glDeletePathsNV");
    }
    public static void glDeletePathsNV ( int path,  int range) {
        var mh$ = glDeletePathsNV$MH();
        try {
            mh$.invokeExact(path, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.glIsPathNV$MH,"glIsPathNV");
    }
    public static byte glIsPathNV ( int path) {
        var mh$ = glIsPathNV$MH();
        try {
            return (byte)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.glPathCommandsNV$MH,"glPathCommandsNV");
    }
    public static void glPathCommandsNV ( int path,  int numCommands,  Addressable commands,  int numCoords,  int coordType,  Addressable coords) {
        var mh$ = glPathCommandsNV$MH();
        try {
            mh$.invokeExact(path, numCommands, commands, numCoords, coordType, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathCoordsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1154.glPathCoordsNV$MH,"glPathCoordsNV");
    }
    public static void glPathCoordsNV ( int path,  int numCoords,  int coordType,  Addressable coords) {
        var mh$ = glPathCoordsNV$MH();
        try {
            mh$.invokeExact(path, numCoords, coordType, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathSubCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glPathSubCommandsNV$MH,"glPathSubCommandsNV");
    }
    public static void glPathSubCommandsNV ( int path,  int commandStart,  int commandsToDelete,  int numCommands,  Addressable commands,  int numCoords,  int coordType,  Addressable coords) {
        var mh$ = glPathSubCommandsNV$MH();
        try {
            mh$.invokeExact(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathSubCoordsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glPathSubCoordsNV$MH,"glPathSubCoordsNV");
    }
    public static void glPathSubCoordsNV ( int path,  int coordStart,  int numCoords,  int coordType,  Addressable coords) {
        var mh$ = glPathSubCoordsNV$MH();
        try {
            mh$.invokeExact(path, coordStart, numCoords, coordType, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathStringNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glPathStringNV$MH,"glPathStringNV");
    }
    public static void glPathStringNV ( int path,  int format,  int length,  Addressable pathString) {
        var mh$ = glPathStringNV$MH();
        try {
            mh$.invokeExact(path, format, length, pathString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathGlyphsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glPathGlyphsNV$MH,"glPathGlyphsNV");
    }
    public static void glPathGlyphsNV ( int firstPathName,  int fontTarget,  Addressable fontName,  int fontStyle,  int numGlyphs,  int type,  Addressable charcodes,  int handleMissingGlyphs,  int pathParameterTemplate,  float emScale) {
        var mh$ = glPathGlyphsNV$MH();
        try {
            mh$.invokeExact(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathGlyphRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glPathGlyphRangeNV$MH,"glPathGlyphRangeNV");
    }
    public static void glPathGlyphRangeNV ( int firstPathName,  int fontTarget,  Addressable fontName,  int fontStyle,  int firstGlyph,  int numGlyphs,  int handleMissingGlyphs,  int pathParameterTemplate,  float emScale) {
        var mh$ = glPathGlyphRangeNV$MH();
        try {
            mh$.invokeExact(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightPathsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1155.glWeightPathsNV$MH,"glWeightPathsNV");
    }
    public static void glWeightPathsNV ( int resultPath,  int numPaths,  Addressable paths,  Addressable weights) {
        var mh$ = glWeightPathsNV$MH();
        try {
            mh$.invokeExact(resultPath, numPaths, paths, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glCopyPathNV$MH,"glCopyPathNV");
    }
    public static void glCopyPathNV ( int resultPath,  int srcPath) {
        var mh$ = glCopyPathNV$MH();
        try {
            mh$.invokeExact(resultPath, srcPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterpolatePathsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glInterpolatePathsNV$MH,"glInterpolatePathsNV");
    }
    public static void glInterpolatePathsNV ( int resultPath,  int pathA,  int pathB,  float weight) {
        var mh$ = glInterpolatePathsNV$MH();
        try {
            mh$.invokeExact(resultPath, pathA, pathB, weight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glTransformPathNV$MH,"glTransformPathNV");
    }
    public static void glTransformPathNV ( int resultPath,  int srcPath,  int transformType,  Addressable transformValues) {
        var mh$ = glTransformPathNV$MH();
        try {
            mh$.invokeExact(resultPath, srcPath, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glPathParameterivNV$MH,"glPathParameterivNV");
    }
    public static void glPathParameterivNV ( int path,  int pname,  Addressable value) {
        var mh$ = glPathParameterivNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glPathParameteriNV$MH,"glPathParameteriNV");
    }
    public static void glPathParameteriNV ( int path,  int pname,  int value) {
        var mh$ = glPathParameteriNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1156.glPathParameterfvNV$MH,"glPathParameterfvNV");
    }
    public static void glPathParameterfvNV ( int path,  int pname,  Addressable value) {
        var mh$ = glPathParameterfvNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathParameterfNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glPathParameterfNV$MH,"glPathParameterfNV");
    }
    public static void glPathParameterfNV ( int path,  int pname,  float value) {
        var mh$ = glPathParameterfNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathDashArrayNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glPathDashArrayNV$MH,"glPathDashArrayNV");
    }
    public static void glPathDashArrayNV ( int path,  int dashCount,  Addressable dashArray) {
        var mh$ = glPathDashArrayNV$MH();
        try {
            mh$.invokeExact(path, dashCount, dashArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathStencilFuncNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glPathStencilFuncNV$MH,"glPathStencilFuncNV");
    }
    public static void glPathStencilFuncNV ( int func,  int ref,  int mask) {
        var mh$ = glPathStencilFuncNV$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathStencilDepthOffsetNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glPathStencilDepthOffsetNV$MH,"glPathStencilDepthOffsetNV");
    }
    public static void glPathStencilDepthOffsetNV ( float factor,  float units) {
        var mh$ = glPathStencilDepthOffsetNV$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFillPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glStencilFillPathNV$MH,"glStencilFillPathNV");
    }
    public static void glStencilFillPathNV ( int path,  int fillMode,  int mask) {
        var mh$ = glStencilFillPathNV$MH();
        try {
            mh$.invokeExact(path, fillMode, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilStrokePathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1157.glStencilStrokePathNV$MH,"glStencilStrokePathNV");
    }
    public static void glStencilStrokePathNV ( int path,  int reference,  int mask) {
        var mh$ = glStencilStrokePathNV$MH();
        try {
            mh$.invokeExact(path, reference, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFillPathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glStencilFillPathInstancedNV$MH,"glStencilFillPathInstancedNV");
    }
    public static void glStencilFillPathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int fillMode,  int mask,  int transformType,  Addressable transformValues) {
        var mh$ = glStencilFillPathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilStrokePathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glStencilStrokePathInstancedNV$MH,"glStencilStrokePathInstancedNV");
    }
    public static void glStencilStrokePathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int reference,  int mask,  int transformType,  Addressable transformValues) {
        var mh$ = glStencilStrokePathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathCoverDepthFuncNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glPathCoverDepthFuncNV$MH,"glPathCoverDepthFuncNV");
    }
    public static void glPathCoverDepthFuncNV ( int func) {
        var mh$ = glPathCoverDepthFuncNV$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverFillPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glCoverFillPathNV$MH,"glCoverFillPathNV");
    }
    public static void glCoverFillPathNV ( int path,  int coverMode) {
        var mh$ = glCoverFillPathNV$MH();
        try {
            mh$.invokeExact(path, coverMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverStrokePathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glCoverStrokePathNV$MH,"glCoverStrokePathNV");
    }
    public static void glCoverStrokePathNV ( int path,  int coverMode) {
        var mh$ = glCoverStrokePathNV$MH();
        try {
            mh$.invokeExact(path, coverMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverFillPathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1158.glCoverFillPathInstancedNV$MH,"glCoverFillPathInstancedNV");
    }
    public static void glCoverFillPathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int coverMode,  int transformType,  Addressable transformValues) {
        var mh$ = glCoverFillPathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCoverStrokePathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glCoverStrokePathInstancedNV$MH,"glCoverStrokePathInstancedNV");
    }
    public static void glCoverStrokePathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int coverMode,  int transformType,  Addressable transformValues) {
        var mh$ = glCoverStrokePathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glGetPathParameterivNV$MH,"glGetPathParameterivNV");
    }
    public static void glGetPathParameterivNV ( int path,  int pname,  Addressable value) {
        var mh$ = glGetPathParameterivNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glGetPathParameterfvNV$MH,"glGetPathParameterfvNV");
    }
    public static void glGetPathParameterfvNV ( int path,  int pname,  Addressable value) {
        var mh$ = glGetPathParameterfvNV$MH();
        try {
            mh$.invokeExact(path, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathCommandsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glGetPathCommandsNV$MH,"glGetPathCommandsNV");
    }
    public static void glGetPathCommandsNV ( int path,  Addressable commands) {
        var mh$ = glGetPathCommandsNV$MH();
        try {
            mh$.invokeExact(path, commands);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathCoordsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glGetPathCoordsNV$MH,"glGetPathCoordsNV");
    }
    public static void glGetPathCoordsNV ( int path,  Addressable coords) {
        var mh$ = glGetPathCoordsNV$MH();
        try {
            mh$.invokeExact(path, coords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathDashArrayNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1159.glGetPathDashArrayNV$MH,"glGetPathDashArrayNV");
    }
    public static void glGetPathDashArrayNV ( int path,  Addressable dashArray) {
        var mh$ = glGetPathDashArrayNV$MH();
        try {
            mh$.invokeExact(path, dashArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathMetricsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glGetPathMetricsNV$MH,"glGetPathMetricsNV");
    }
    public static void glGetPathMetricsNV ( int metricQueryMask,  int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int stride,  Addressable metrics) {
        var mh$ = glGetPathMetricsNV$MH();
        try {
            mh$.invokeExact(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathMetricRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glGetPathMetricRangeNV$MH,"glGetPathMetricRangeNV");
    }
    public static void glGetPathMetricRangeNV ( int metricQueryMask,  int firstPathName,  int numPaths,  int stride,  Addressable metrics) {
        var mh$ = glGetPathMetricRangeNV$MH();
        try {
            mh$.invokeExact(metricQueryMask, firstPathName, numPaths, stride, metrics);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathSpacingNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glGetPathSpacingNV$MH,"glGetPathSpacingNV");
    }
    public static void glGetPathSpacingNV ( int pathListMode,  int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  float advanceScale,  float kerningScale,  int transformType,  Addressable returnedSpacing) {
        var mh$ = glGetPathSpacingNV$MH();
        try {
            mh$.invokeExact(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsPointInFillPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glIsPointInFillPathNV$MH,"glIsPointInFillPathNV");
    }
    public static byte glIsPointInFillPathNV ( int path,  int mask,  float x,  float y) {
        var mh$ = glIsPointInFillPathNV$MH();
        try {
            return (byte)mh$.invokeExact(path, mask, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsPointInStrokePathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glIsPointInStrokePathNV$MH,"glIsPointInStrokePathNV");
    }
    public static byte glIsPointInStrokePathNV ( int path,  float x,  float y) {
        var mh$ = glIsPointInStrokePathNV$MH();
        try {
            return (byte)mh$.invokeExact(path, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathLengthNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1160.glGetPathLengthNV$MH,"glGetPathLengthNV");
    }
    public static float glGetPathLengthNV ( int path,  int startSegment,  int numSegments) {
        var mh$ = glGetPathLengthNV$MH();
        try {
            return (float)mh$.invokeExact(path, startSegment, numSegments);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointAlongPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glPointAlongPathNV$MH,"glPointAlongPathNV");
    }
    public static byte glPointAlongPathNV ( int path,  int startSegment,  int numSegments,  float distance,  Addressable x,  Addressable y,  Addressable tangentX,  Addressable tangentY) {
        var mh$ = glPointAlongPathNV$MH();
        try {
            return (byte)mh$.invokeExact(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoad3x2fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glMatrixLoad3x2fNV$MH,"glMatrixLoad3x2fNV");
    }
    public static void glMatrixLoad3x2fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixLoad3x2fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoad3x3fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glMatrixLoad3x3fNV$MH,"glMatrixLoad3x3fNV");
    }
    public static void glMatrixLoad3x3fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixLoad3x3fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixLoadTranspose3x3fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glMatrixLoadTranspose3x3fNV$MH,"glMatrixLoadTranspose3x3fNV");
    }
    public static void glMatrixLoadTranspose3x3fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixLoadTranspose3x3fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMult3x2fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glMatrixMult3x2fNV$MH,"glMatrixMult3x2fNV");
    }
    public static void glMatrixMult3x2fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixMult3x2fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMult3x3fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1161.glMatrixMult3x3fNV$MH,"glMatrixMult3x3fNV");
    }
    public static void glMatrixMult3x3fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixMult3x3fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMultTranspose3x3fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glMatrixMultTranspose3x3fNV$MH,"glMatrixMultTranspose3x3fNV");
    }
    public static void glMatrixMultTranspose3x3fNV ( int matrixMode,  Addressable m) {
        var mh$ = glMatrixMultTranspose3x3fNV$MH();
        try {
            mh$.invokeExact(matrixMode, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilThenCoverFillPathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glStencilThenCoverFillPathNV$MH,"glStencilThenCoverFillPathNV");
    }
    public static void glStencilThenCoverFillPathNV ( int path,  int fillMode,  int mask,  int coverMode) {
        var mh$ = glStencilThenCoverFillPathNV$MH();
        try {
            mh$.invokeExact(path, fillMode, mask, coverMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilThenCoverStrokePathNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glStencilThenCoverStrokePathNV$MH,"glStencilThenCoverStrokePathNV");
    }
    public static void glStencilThenCoverStrokePathNV ( int path,  int reference,  int mask,  int coverMode) {
        var mh$ = glStencilThenCoverStrokePathNV$MH();
        try {
            mh$.invokeExact(path, reference, mask, coverMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilThenCoverFillPathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glStencilThenCoverFillPathInstancedNV$MH,"glStencilThenCoverFillPathInstancedNV");
    }
    public static void glStencilThenCoverFillPathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int fillMode,  int mask,  int coverMode,  int transformType,  Addressable transformValues) {
        var mh$ = glStencilThenCoverFillPathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilThenCoverStrokePathInstancedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glStencilThenCoverStrokePathInstancedNV$MH,"glStencilThenCoverStrokePathInstancedNV");
    }
    public static void glStencilThenCoverStrokePathInstancedNV ( int numPaths,  int pathNameType,  Addressable paths,  int pathBase,  int reference,  int mask,  int coverMode,  int transformType,  Addressable transformValues) {
        var mh$ = glStencilThenCoverStrokePathInstancedNV$MH();
        try {
            mh$.invokeExact(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathGlyphIndexRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1162.glPathGlyphIndexRangeNV$MH,"glPathGlyphIndexRangeNV");
    }
    public static int glPathGlyphIndexRangeNV ( int fontTarget,  Addressable fontName,  int fontStyle,  int pathParameterTemplate,  float emScale,  Addressable baseAndCount) {
        var mh$ = glPathGlyphIndexRangeNV$MH();
        try {
            return (int)mh$.invokeExact(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathGlyphIndexArrayNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glPathGlyphIndexArrayNV$MH,"glPathGlyphIndexArrayNV");
    }
    public static int glPathGlyphIndexArrayNV ( int firstPathName,  int fontTarget,  Addressable fontName,  int fontStyle,  int firstGlyphIndex,  int numGlyphs,  int pathParameterTemplate,  float emScale) {
        var mh$ = glPathGlyphIndexArrayNV$MH();
        try {
            return (int)mh$.invokeExact(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathMemoryGlyphIndexArrayNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glPathMemoryGlyphIndexArrayNV$MH,"glPathMemoryGlyphIndexArrayNV");
    }
    public static int glPathMemoryGlyphIndexArrayNV ( int firstPathName,  int fontTarget,  long fontSize,  Addressable fontData,  int faceIndex,  int firstGlyphIndex,  int numGlyphs,  int pathParameterTemplate,  float emScale) {
        var mh$ = glPathMemoryGlyphIndexArrayNV$MH();
        try {
            return (int)mh$.invokeExact(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramPathFragmentInputGenNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glProgramPathFragmentInputGenNV$MH,"glProgramPathFragmentInputGenNV");
    }
    public static void glProgramPathFragmentInputGenNV ( int program,  int location,  int genMode,  int components,  Addressable coeffs) {
        var mh$ = glProgramPathFragmentInputGenNV$MH();
        try {
            mh$.invokeExact(program, location, genMode, components, coeffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramResourcefvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glGetProgramResourcefvNV$MH,"glGetProgramResourcefvNV");
    }
    public static void glGetProgramResourcefvNV ( int program,  int programInterface,  int index,  int propCount,  Addressable props,  int bufSize,  Addressable length,  Addressable params) {
        var mh$ = glGetProgramResourcefvNV$MH();
        try {
            mh$.invokeExact(program, programInterface, index, propCount, props, bufSize, length, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathColorGenNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glPathColorGenNV$MH,"glPathColorGenNV");
    }
    public static void glPathColorGenNV ( int color,  int genMode,  int colorFormat,  Addressable coeffs) {
        var mh$ = glPathColorGenNV$MH();
        try {
            mh$.invokeExact(color, genMode, colorFormat, coeffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathTexGenNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1163.glPathTexGenNV$MH,"glPathTexGenNV");
    }
    public static void glPathTexGenNV ( int texCoordSet,  int genMode,  int components,  Addressable coeffs) {
        var mh$ = glPathTexGenNV$MH();
        try {
            mh$.invokeExact(texCoordSet, genMode, components, coeffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPathFogGenNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.glPathFogGenNV$MH,"glPathFogGenNV");
    }
    public static void glPathFogGenNV ( int genMode) {
        var mh$ = glPathFogGenNV$MH();
        try {
            mh$.invokeExact(genMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathColorGenivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.glGetPathColorGenivNV$MH,"glGetPathColorGenivNV");
    }
    public static void glGetPathColorGenivNV ( int color,  int pname,  Addressable value) {
        var mh$ = glGetPathColorGenivNV$MH();
        try {
            mh$.invokeExact(color, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathColorGenfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.glGetPathColorGenfvNV$MH,"glGetPathColorGenfvNV");
    }
    public static void glGetPathColorGenfvNV ( int color,  int pname,  Addressable value) {
        var mh$ = glGetPathColorGenfvNV$MH();
        try {
            mh$.invokeExact(color, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathTexGenivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.glGetPathTexGenivNV$MH,"glGetPathTexGenivNV");
    }
    public static void glGetPathTexGenivNV ( int texCoordSet,  int pname,  Addressable value) {
        var mh$ = glGetPathTexGenivNV$MH();
        try {
            mh$.invokeExact(texCoordSet, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPathTexGenfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1164.glGetPathTexGenfvNV$MH,"glGetPathTexGenfvNV");
    }
    public static void glGetPathTexGenfvNV ( int texCoordSet,  int pname,  Addressable value) {
        var mh$ = glGetPathTexGenfvNV$MH();
        try {
            mh$.invokeExact(texCoordSet, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelDataRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.glPixelDataRangeNV$MH,"glPixelDataRangeNV");
    }
    public static void glPixelDataRangeNV ( int target,  int length,  Addressable pointer) {
        var mh$ = glPixelDataRangeNV$MH();
        try {
            mh$.invokeExact(target, length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushPixelDataRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1165.glFlushPixelDataRangeNV$MH,"glFlushPixelDataRangeNV");
    }
    public static void glFlushPixelDataRangeNV ( int target) {
        var mh$ = glFlushPixelDataRangeNV$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.glPointParameteriNV$MH,"glPointParameteriNV");
    }
    public static void glPointParameteriNV ( int pname,  int param) {
        var mh$ = glPointParameteriNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1166.glPointParameterivNV$MH,"glPointParameterivNV");
    }
    public static void glPointParameterivNV ( int pname,  Addressable params) {
        var mh$ = glPointParameterivNV$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPresentFrameKeyedNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1168.glPresentFrameKeyedNV$MH,"glPresentFrameKeyedNV");
    }
    public static void glPresentFrameKeyedNV ( int video_slot,  long minPresentTime,  int beginPresentTimeId,  int presentDurationId,  int type,  int target0,  int fill0,  int key0,  int target1,  int fill1,  int key1) {
        var mh$ = glPresentFrameKeyedNV$MH();
        try {
            mh$.invokeExact(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPresentFrameDualFillNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.glPresentFrameDualFillNV$MH,"glPresentFrameDualFillNV");
    }
    public static void glPresentFrameDualFillNV ( int video_slot,  long minPresentTime,  int beginPresentTimeId,  int presentDurationId,  int type,  int target0,  int fill0,  int target1,  int fill1,  int target2,  int fill2,  int target3,  int fill3) {
        var mh$ = glPresentFrameDualFillNV$MH();
        try {
            mh$.invokeExact(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.glGetVideoivNV$MH,"glGetVideoivNV");
    }
    public static void glGetVideoivNV ( int video_slot,  int pname,  Addressable params) {
        var mh$ = glGetVideoivNV$MH();
        try {
            mh$.invokeExact(video_slot, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideouivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.glGetVideouivNV$MH,"glGetVideouivNV");
    }
    public static void glGetVideouivNV ( int video_slot,  int pname,  Addressable params) {
        var mh$ = glGetVideouivNV$MH();
        try {
            mh$.invokeExact(video_slot, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoi64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.glGetVideoi64vNV$MH,"glGetVideoi64vNV");
    }
    public static void glGetVideoi64vNV ( int video_slot,  int pname,  Addressable params) {
        var mh$ = glGetVideoi64vNV$MH();
        try {
            mh$.invokeExact(video_slot, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1169.glGetVideoui64vNV$MH,"glGetVideoui64vNV");
    }
    public static void glGetVideoui64vNV ( int video_slot,  int pname,  Addressable params) {
        var mh$ = glGetVideoui64vNV$MH();
        try {
            mh$.invokeExact(video_slot, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrimitiveRestartNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.glPrimitiveRestartNV$MH,"glPrimitiveRestartNV");
    }
    public static void glPrimitiveRestartNV () {
        var mh$ = glPrimitiveRestartNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrimitiveRestartIndexNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1170.glPrimitiveRestartIndexNV$MH,"glPrimitiveRestartIndexNV");
    }
    public static void glPrimitiveRestartIndexNV ( int index) {
        var mh$ = glPrimitiveRestartIndexNV$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glQueryResourceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1171.glQueryResourceNV$MH,"glQueryResourceNV");
    }
    public static int glQueryResourceNV ( int queryType,  int tagId,  int bufSize,  Addressable buffer) {
        var mh$ = glQueryResourceNV$MH();
        try {
            return (int)mh$.invokeExact(queryType, tagId, bufSize, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenQueryResourceTagNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.glGenQueryResourceTagNV$MH,"glGenQueryResourceTagNV");
    }
    public static void glGenQueryResourceTagNV ( int n,  Addressable tagIds) {
        var mh$ = glGenQueryResourceTagNV$MH();
        try {
            mh$.invokeExact(n, tagIds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteQueryResourceTagNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.glDeleteQueryResourceTagNV$MH,"glDeleteQueryResourceTagNV");
    }
    public static void glDeleteQueryResourceTagNV ( int n,  Addressable tagIds) {
        var mh$ = glDeleteQueryResourceTagNV$MH();
        try {
            mh$.invokeExact(n, tagIds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glQueryResourceTagNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1172.glQueryResourceTagNV$MH,"glQueryResourceTagNV");
    }
    public static void glQueryResourceTagNV ( int tagId,  Addressable tagString) {
        var mh$ = glQueryResourceTagNV$MH();
        try {
            mh$.invokeExact(tagId, tagString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.glCombinerParameterfvNV$MH,"glCombinerParameterfvNV");
    }
    public static void glCombinerParameterfvNV ( int pname,  Addressable params) {
        var mh$ = glCombinerParameterfvNV$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerParameterfNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.glCombinerParameterfNV$MH,"glCombinerParameterfNV");
    }
    public static void glCombinerParameterfNV ( int pname,  float param) {
        var mh$ = glCombinerParameterfNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.glCombinerParameterivNV$MH,"glCombinerParameterivNV");
    }
    public static void glCombinerParameterivNV ( int pname,  Addressable params) {
        var mh$ = glCombinerParameterivNV$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.glCombinerParameteriNV$MH,"glCombinerParameteriNV");
    }
    public static void glCombinerParameteriNV ( int pname,  int param) {
        var mh$ = glCombinerParameteriNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerInputNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1177.glCombinerInputNV$MH,"glCombinerInputNV");
    }
    public static void glCombinerInputNV ( int stage,  int portion,  int variable,  int input,  int mapping,  int componentUsage) {
        var mh$ = glCombinerInputNV$MH();
        try {
            mh$.invokeExact(stage, portion, variable, input, mapping, componentUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerOutputNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glCombinerOutputNV$MH,"glCombinerOutputNV");
    }
    public static void glCombinerOutputNV ( int stage,  int portion,  int abOutput,  int cdOutput,  int sumOutput,  int scale,  int bias,  byte abDotProduct,  byte cdDotProduct,  byte muxSum) {
        var mh$ = glCombinerOutputNV$MH();
        try {
            mh$.invokeExact(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinalCombinerInputNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glFinalCombinerInputNV$MH,"glFinalCombinerInputNV");
    }
    public static void glFinalCombinerInputNV ( int variable,  int input,  int mapping,  int componentUsage) {
        var mh$ = glFinalCombinerInputNV$MH();
        try {
            mh$.invokeExact(variable, input, mapping, componentUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCombinerInputParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glGetCombinerInputParameterfvNV$MH,"glGetCombinerInputParameterfvNV");
    }
    public static void glGetCombinerInputParameterfvNV ( int stage,  int portion,  int variable,  int pname,  Addressable params) {
        var mh$ = glGetCombinerInputParameterfvNV$MH();
        try {
            mh$.invokeExact(stage, portion, variable, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCombinerInputParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glGetCombinerInputParameterivNV$MH,"glGetCombinerInputParameterivNV");
    }
    public static void glGetCombinerInputParameterivNV ( int stage,  int portion,  int variable,  int pname,  Addressable params) {
        var mh$ = glGetCombinerInputParameterivNV$MH();
        try {
            mh$.invokeExact(stage, portion, variable, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCombinerOutputParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glGetCombinerOutputParameterfvNV$MH,"glGetCombinerOutputParameterfvNV");
    }
    public static void glGetCombinerOutputParameterfvNV ( int stage,  int portion,  int pname,  Addressable params) {
        var mh$ = glGetCombinerOutputParameterfvNV$MH();
        try {
            mh$.invokeExact(stage, portion, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCombinerOutputParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1178.glGetCombinerOutputParameterivNV$MH,"glGetCombinerOutputParameterivNV");
    }
    public static void glGetCombinerOutputParameterivNV ( int stage,  int portion,  int pname,  Addressable params) {
        var mh$ = glGetCombinerOutputParameterivNV$MH();
        try {
            mh$.invokeExact(stage, portion, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFinalCombinerInputParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.glGetFinalCombinerInputParameterfvNV$MH,"glGetFinalCombinerInputParameterfvNV");
    }
    public static void glGetFinalCombinerInputParameterfvNV ( int variable,  int pname,  Addressable params) {
        var mh$ = glGetFinalCombinerInputParameterfvNV$MH();
        try {
            mh$.invokeExact(variable, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFinalCombinerInputParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1179.glGetFinalCombinerInputParameterivNV$MH,"glGetFinalCombinerInputParameterivNV");
    }
    public static void glGetFinalCombinerInputParameterivNV ( int variable,  int pname,  Addressable params) {
        var mh$ = glGetFinalCombinerInputParameterivNV$MH();
        try {
            mh$.invokeExact(variable, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCombinerStageParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.glCombinerStageParameterfvNV$MH,"glCombinerStageParameterfvNV");
    }
    public static void glCombinerStageParameterfvNV ( int stage,  int pname,  Addressable params) {
        var mh$ = glCombinerStageParameterfvNV$MH();
        try {
            mh$.invokeExact(stage, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCombinerStageParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1180.glGetCombinerStageParameterfvNV$MH,"glGetCombinerStageParameterfvNV");
    }
    public static void glGetCombinerStageParameterfvNV ( int stage,  int pname,  Addressable params) {
        var mh$ = glGetCombinerStageParameterfvNV$MH();
        try {
            mh$.invokeExact(stage, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferSampleLocationsfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.glFramebufferSampleLocationsfvNV$MH,"glFramebufferSampleLocationsfvNV");
    }
    public static void glFramebufferSampleLocationsfvNV ( int target,  int start,  int count,  Addressable v) {
        var mh$ = glFramebufferSampleLocationsfvNV$MH();
        try {
            mh$.invokeExact(target, start, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNamedFramebufferSampleLocationsfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.glNamedFramebufferSampleLocationsfvNV$MH,"glNamedFramebufferSampleLocationsfvNV");
    }
    public static void glNamedFramebufferSampleLocationsfvNV ( int framebuffer,  int start,  int count,  Addressable v) {
        var mh$ = glNamedFramebufferSampleLocationsfvNV$MH();
        try {
            mh$.invokeExact(framebuffer, start, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResolveDepthValuesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1181.glResolveDepthValuesNV$MH,"glResolveDepthValuesNV");
    }
    public static void glResolveDepthValuesNV () {
        var mh$ = glResolveDepthValuesNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissorExclusiveNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.glScissorExclusiveNV$MH,"glScissorExclusiveNV");
    }
    public static void glScissorExclusiveNV ( int x,  int y,  int width,  int height) {
        var mh$ = glScissorExclusiveNV$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissorExclusiveArrayvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1182.glScissorExclusiveArrayvNV$MH,"glScissorExclusiveArrayvNV");
    }
    public static void glScissorExclusiveArrayvNV ( int first,  int count,  Addressable v) {
        var mh$ = glScissorExclusiveArrayvNV$MH();
        try {
            mh$.invokeExact(first, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeBufferResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.glMakeBufferResidentNV$MH,"glMakeBufferResidentNV");
    }
    public static void glMakeBufferResidentNV ( int target,  int access) {
        var mh$ = glMakeBufferResidentNV$MH();
        try {
            mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeBufferNonResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.glMakeBufferNonResidentNV$MH,"glMakeBufferNonResidentNV");
    }
    public static void glMakeBufferNonResidentNV ( int target) {
        var mh$ = glMakeBufferNonResidentNV$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsBufferResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.glIsBufferResidentNV$MH,"glIsBufferResidentNV");
    }
    public static byte glIsBufferResidentNV ( int target) {
        var mh$ = glIsBufferResidentNV$MH();
        try {
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeNamedBufferResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.glMakeNamedBufferResidentNV$MH,"glMakeNamedBufferResidentNV");
    }
    public static void glMakeNamedBufferResidentNV ( int buffer,  int access) {
        var mh$ = glMakeNamedBufferResidentNV$MH();
        try {
            mh$.invokeExact(buffer, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMakeNamedBufferNonResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1187.glMakeNamedBufferNonResidentNV$MH,"glMakeNamedBufferNonResidentNV");
    }
    public static void glMakeNamedBufferNonResidentNV ( int buffer) {
        var mh$ = glMakeNamedBufferNonResidentNV$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsNamedBufferResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glIsNamedBufferResidentNV$MH,"glIsNamedBufferResidentNV");
    }
    public static byte glIsNamedBufferResidentNV ( int buffer) {
        var mh$ = glIsNamedBufferResidentNV$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameterui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glGetBufferParameterui64vNV$MH,"glGetBufferParameterui64vNV");
    }
    public static void glGetBufferParameterui64vNV ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameterui64vNV$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetNamedBufferParameterui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glGetNamedBufferParameterui64vNV$MH,"glGetNamedBufferParameterui64vNV");
    }
    public static void glGetNamedBufferParameterui64vNV ( int buffer,  int pname,  Addressable params) {
        var mh$ = glGetNamedBufferParameterui64vNV$MH();
        try {
            mh$.invokeExact(buffer, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glGetIntegerui64vNV$MH,"glGetIntegerui64vNV");
    }
    public static void glGetIntegerui64vNV ( int value,  Addressable result) {
        var mh$ = glGetIntegerui64vNV$MH();
        try {
            mh$.invokeExact(value, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glUniformui64NV$MH,"glUniformui64NV");
    }
    public static void glUniformui64NV ( int location,  long value) {
        var mh$ = glUniformui64NV$MH();
        try {
            mh$.invokeExact(location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1188.glUniformui64vNV$MH,"glUniformui64vNV");
    }
    public static void glUniformui64vNV ( int location,  int count,  Addressable value) {
        var mh$ = glUniformui64vNV$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.glProgramUniformui64NV$MH,"glProgramUniformui64NV");
    }
    public static void glProgramUniformui64NV ( int program,  int location,  long value) {
        var mh$ = glProgramUniformui64NV$MH();
        try {
            mh$.invokeExact(program, location, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramUniformui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1189.glProgramUniformui64vNV$MH,"glProgramUniformui64vNV");
    }
    public static void glProgramUniformui64vNV ( int program,  int location,  int count,  Addressable value) {
        var mh$ = glProgramUniformui64vNV$MH();
        try {
            mh$.invokeExact(program, location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindShadingRateImageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.glBindShadingRateImageNV$MH,"glBindShadingRateImageNV");
    }
    public static void glBindShadingRateImageNV ( int texture) {
        var mh$ = glBindShadingRateImageNV$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShadingRateImagePaletteNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1191.glGetShadingRateImagePaletteNV$MH,"glGetShadingRateImagePaletteNV");
    }
    public static void glGetShadingRateImagePaletteNV ( int viewport,  int entry,  Addressable rate) {
        var mh$ = glGetShadingRateImagePaletteNV$MH();
        try {
            mh$.invokeExact(viewport, entry, rate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShadingRateSampleLocationivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.glGetShadingRateSampleLocationivNV$MH,"glGetShadingRateSampleLocationivNV");
    }
    public static void glGetShadingRateSampleLocationivNV ( int rate,  int samples,  int index,  Addressable location) {
        var mh$ = glGetShadingRateSampleLocationivNV$MH();
        try {
            mh$.invokeExact(rate, samples, index, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadingRateImageBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.glShadingRateImageBarrierNV$MH,"glShadingRateImageBarrierNV");
    }
    public static void glShadingRateImageBarrierNV ( byte synchronize) {
        var mh$ = glShadingRateImageBarrierNV$MH();
        try {
            mh$.invokeExact(synchronize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadingRateImagePaletteNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.glShadingRateImagePaletteNV$MH,"glShadingRateImagePaletteNV");
    }
    public static void glShadingRateImagePaletteNV ( int viewport,  int first,  int count,  Addressable rates) {
        var mh$ = glShadingRateImagePaletteNV$MH();
        try {
            mh$.invokeExact(viewport, first, count, rates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadingRateSampleOrderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.glShadingRateSampleOrderNV$MH,"glShadingRateSampleOrderNV");
    }
    public static void glShadingRateSampleOrderNV ( int order) {
        var mh$ = glShadingRateSampleOrderNV$MH();
        try {
            mh$.invokeExact(order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadingRateSampleOrderCustomNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1192.glShadingRateSampleOrderCustomNV$MH,"glShadingRateSampleOrderCustomNV");
    }
    public static void glShadingRateSampleOrderCustomNV ( int rate,  int samples,  Addressable locations) {
        var mh$ = glShadingRateSampleOrderCustomNV$MH();
        try {
            mh$.invokeExact(rate, samples, locations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1193.glTextureBarrierNV$MH,"glTextureBarrierNV");
    }
    public static void glTextureBarrierNV () {
        var mh$ = glTextureBarrierNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2DMultisampleCoverageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.glTexImage2DMultisampleCoverageNV$MH,"glTexImage2DMultisampleCoverageNV");
    }
    public static void glTexImage2DMultisampleCoverageNV ( int target,  int coverageSamples,  int colorSamples,  int internalFormat,  int width,  int height,  byte fixedSampleLocations) {
        var mh$ = glTexImage2DMultisampleCoverageNV$MH();
        try {
            mh$.invokeExact(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3DMultisampleCoverageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.glTexImage3DMultisampleCoverageNV$MH,"glTexImage3DMultisampleCoverageNV");
    }
    public static void glTexImage3DMultisampleCoverageNV ( int target,  int coverageSamples,  int colorSamples,  int internalFormat,  int width,  int height,  int depth,  byte fixedSampleLocations) {
        var mh$ = glTexImage3DMultisampleCoverageNV$MH();
        try {
            mh$.invokeExact(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage2DMultisampleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.glTextureImage2DMultisampleNV$MH,"glTextureImage2DMultisampleNV");
    }
    public static void glTextureImage2DMultisampleNV ( int texture,  int target,  int samples,  int internalFormat,  int width,  int height,  byte fixedSampleLocations) {
        var mh$ = glTextureImage2DMultisampleNV$MH();
        try {
            mh$.invokeExact(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage3DMultisampleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1195.glTextureImage3DMultisampleNV$MH,"glTextureImage3DMultisampleNV");
    }
    public static void glTextureImage3DMultisampleNV ( int texture,  int target,  int samples,  int internalFormat,  int width,  int height,  int depth,  byte fixedSampleLocations) {
        var mh$ = glTextureImage3DMultisampleNV$MH();
        try {
            mh$.invokeExact(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage2DMultisampleCoverageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.glTextureImage2DMultisampleCoverageNV$MH,"glTextureImage2DMultisampleCoverageNV");
    }
    public static void glTextureImage2DMultisampleCoverageNV ( int texture,  int target,  int coverageSamples,  int colorSamples,  int internalFormat,  int width,  int height,  byte fixedSampleLocations) {
        var mh$ = glTextureImage2DMultisampleCoverageNV$MH();
        try {
            mh$.invokeExact(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureImage3DMultisampleCoverageNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1196.glTextureImage3DMultisampleCoverageNV$MH,"glTextureImage3DMultisampleCoverageNV");
    }
    public static void glTextureImage3DMultisampleCoverageNV ( int texture,  int target,  int coverageSamples,  int colorSamples,  int internalFormat,  int width,  int height,  int depth,  byte fixedSampleLocations) {
        var mh$ = glTextureImage3DMultisampleCoverageNV$MH();
        try {
            mh$.invokeExact(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.glBeginTransformFeedbackNV$MH,"glBeginTransformFeedbackNV");
    }
    public static void glBeginTransformFeedbackNV ( int primitiveMode) {
        var mh$ = glBeginTransformFeedbackNV$MH();
        try {
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.glEndTransformFeedbackNV$MH,"glEndTransformFeedbackNV");
    }
    public static void glEndTransformFeedbackNV () {
        var mh$ = glEndTransformFeedbackNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackAttribsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.glTransformFeedbackAttribsNV$MH,"glTransformFeedbackAttribsNV");
    }
    public static void glTransformFeedbackAttribsNV ( int count,  Addressable attribs,  int bufferMode) {
        var mh$ = glTransformFeedbackAttribsNV$MH();
        try {
            mh$.invokeExact(count, attribs, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1200.glBindBufferRangeNV$MH,"glBindBufferRangeNV");
    }
    public static void glBindBufferRangeNV ( int target,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glBindBufferRangeNV$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferOffsetNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glBindBufferOffsetNV$MH,"glBindBufferOffsetNV");
    }
    public static void glBindBufferOffsetNV ( int target,  int index,  int buffer,  long offset) {
        var mh$ = glBindBufferOffsetNV$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferBaseNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glBindBufferBaseNV$MH,"glBindBufferBaseNV");
    }
    public static void glBindBufferBaseNV ( int target,  int index,  int buffer) {
        var mh$ = glBindBufferBaseNV$MH();
        try {
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackVaryingsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glTransformFeedbackVaryingsNV$MH,"glTransformFeedbackVaryingsNV");
    }
    public static void glTransformFeedbackVaryingsNV ( int program,  int count,  Addressable locations,  int bufferMode) {
        var mh$ = glTransformFeedbackVaryingsNV$MH();
        try {
            mh$.invokeExact(program, count, locations, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveVaryingNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glActiveVaryingNV$MH,"glActiveVaryingNV");
    }
    public static void glActiveVaryingNV ( int program,  Addressable name) {
        var mh$ = glActiveVaryingNV$MH();
        try {
            mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVaryingLocationNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glGetVaryingLocationNV$MH,"glGetVaryingLocationNV");
    }
    public static int glGetVaryingLocationNV ( int program,  Addressable name) {
        var mh$ = glGetVaryingLocationNV$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveVaryingNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1201.glGetActiveVaryingNV$MH,"glGetActiveVaryingNV");
    }
    public static void glGetActiveVaryingNV ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveVaryingNV$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackVaryingNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.glGetTransformFeedbackVaryingNV$MH,"glGetTransformFeedbackVaryingNV");
    }
    public static void glGetTransformFeedbackVaryingNV ( int program,  int index,  Addressable location) {
        var mh$ = glGetTransformFeedbackVaryingNV$MH();
        try {
            mh$.invokeExact(program, index, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackStreamAttribsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1202.glTransformFeedbackStreamAttribsNV$MH,"glTransformFeedbackStreamAttribsNV");
    }
    public static void glTransformFeedbackStreamAttribsNV ( int count,  Addressable attribs,  int nbuffers,  Addressable bufstreams,  int bufferMode) {
        var mh$ = glTransformFeedbackStreamAttribsNV$MH();
        try {
            mh$.invokeExact(count, attribs, nbuffers, bufstreams, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.glBindTransformFeedbackNV$MH,"glBindTransformFeedbackNV");
    }
    public static void glBindTransformFeedbackNV ( int target,  int id) {
        var mh$ = glBindTransformFeedbackNV$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTransformFeedbacksNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1204.glDeleteTransformFeedbacksNV$MH,"glDeleteTransformFeedbacksNV");
    }
    public static void glDeleteTransformFeedbacksNV ( int n,  Addressable ids) {
        var mh$ = glDeleteTransformFeedbacksNV$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTransformFeedbacksNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.glGenTransformFeedbacksNV$MH,"glGenTransformFeedbacksNV");
    }
    public static void glGenTransformFeedbacksNV ( int n,  Addressable ids) {
        var mh$ = glGenTransformFeedbacksNV$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.glIsTransformFeedbackNV$MH,"glIsTransformFeedbackNV");
    }
    public static byte glIsTransformFeedbackNV ( int id) {
        var mh$ = glIsTransformFeedbackNV$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPauseTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.glPauseTransformFeedbackNV$MH,"glPauseTransformFeedbackNV");
    }
    public static void glPauseTransformFeedbackNV () {
        var mh$ = glPauseTransformFeedbackNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResumeTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.glResumeTransformFeedbackNV$MH,"glResumeTransformFeedbackNV");
    }
    public static void glResumeTransformFeedbackNV () {
        var mh$ = glResumeTransformFeedbackNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawTransformFeedbackNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1205.glDrawTransformFeedbackNV$MH,"glDrawTransformFeedbackNV");
    }
    public static void glDrawTransformFeedbackNV ( int mode,  int id) {
        var mh$ = glDrawTransformFeedbackNV$MH();
        try {
            mh$.invokeExact(mode, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong GLvdpauSurfaceNV = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glVDPAUInitNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.glVDPAUInitNV$MH,"glVDPAUInitNV");
    }
    public static void glVDPAUInitNV ( Addressable vdpDevice,  Addressable getProcAddress) {
        var mh$ = glVDPAUInitNV$MH();
        try {
            mh$.invokeExact(vdpDevice, getProcAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUFiniNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.glVDPAUFiniNV$MH,"glVDPAUFiniNV");
    }
    public static void glVDPAUFiniNV () {
        var mh$ = glVDPAUFiniNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAURegisterVideoSurfaceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.glVDPAURegisterVideoSurfaceNV$MH,"glVDPAURegisterVideoSurfaceNV");
    }
    public static long glVDPAURegisterVideoSurfaceNV ( Addressable vdpSurface,  int target,  int numTextureNames,  Addressable textureNames) {
        var mh$ = glVDPAURegisterVideoSurfaceNV$MH();
        try {
            return (long)mh$.invokeExact(vdpSurface, target, numTextureNames, textureNames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAURegisterOutputSurfaceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.glVDPAURegisterOutputSurfaceNV$MH,"glVDPAURegisterOutputSurfaceNV");
    }
    public static long glVDPAURegisterOutputSurfaceNV ( Addressable vdpSurface,  int target,  int numTextureNames,  Addressable textureNames) {
        var mh$ = glVDPAURegisterOutputSurfaceNV$MH();
        try {
            return (long)mh$.invokeExact(vdpSurface, target, numTextureNames, textureNames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUIsSurfaceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1209.glVDPAUIsSurfaceNV$MH,"glVDPAUIsSurfaceNV");
    }
    public static byte glVDPAUIsSurfaceNV ( long surface) {
        var mh$ = glVDPAUIsSurfaceNV$MH();
        try {
            return (byte)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUUnregisterSurfaceNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.glVDPAUUnregisterSurfaceNV$MH,"glVDPAUUnregisterSurfaceNV");
    }
    public static void glVDPAUUnregisterSurfaceNV ( long surface) {
        var mh$ = glVDPAUUnregisterSurfaceNV$MH();
        try {
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUGetSurfaceivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.glVDPAUGetSurfaceivNV$MH,"glVDPAUGetSurfaceivNV");
    }
    public static void glVDPAUGetSurfaceivNV ( long surface,  int pname,  int bufSize,  Addressable length,  Addressable values) {
        var mh$ = glVDPAUGetSurfaceivNV$MH();
        try {
            mh$.invokeExact(surface, pname, bufSize, length, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUSurfaceAccessNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.glVDPAUSurfaceAccessNV$MH,"glVDPAUSurfaceAccessNV");
    }
    public static void glVDPAUSurfaceAccessNV ( long surface,  int access) {
        var mh$ = glVDPAUSurfaceAccessNV$MH();
        try {
            mh$.invokeExact(surface, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUMapSurfacesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.glVDPAUMapSurfacesNV$MH,"glVDPAUMapSurfacesNV");
    }
    public static void glVDPAUMapSurfacesNV ( int numSurfaces,  Addressable surfaces) {
        var mh$ = glVDPAUMapSurfacesNV$MH();
        try {
            mh$.invokeExact(numSurfaces, surfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAUUnmapSurfacesNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1210.glVDPAUUnmapSurfacesNV$MH,"glVDPAUUnmapSurfacesNV");
    }
    public static void glVDPAUUnmapSurfacesNV ( int numSurface,  Addressable surfaces) {
        var mh$ = glVDPAUUnmapSurfacesNV$MH();
        try {
            mh$.invokeExact(numSurface, surfaces);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVDPAURegisterVideoSurfaceWithPictureStructureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1211.glVDPAURegisterVideoSurfaceWithPictureStructureNV$MH,"glVDPAURegisterVideoSurfaceWithPictureStructureNV");
    }
    public static long glVDPAURegisterVideoSurfaceWithPictureStructureNV ( Addressable vdpSurface,  int target,  int numTextureNames,  Addressable textureNames,  byte isFrameStructure) {
        var mh$ = glVDPAURegisterVideoSurfaceWithPictureStructureNV$MH();
        try {
            return (long)mh$.invokeExact(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushVertexArrayRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.glFlushVertexArrayRangeNV$MH,"glFlushVertexArrayRangeNV");
    }
    public static void glFlushVertexArrayRangeNV () {
        var mh$ = glFlushVertexArrayRangeNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1212.glVertexArrayRangeNV$MH,"glVertexArrayRangeNV");
    }
    public static void glVertexArrayRangeNV ( int length,  Addressable pointer) {
        var mh$ = glVertexArrayRangeNV$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.glVertexAttribL1i64NV$MH,"glVertexAttribL1i64NV");
    }
    public static void glVertexAttribL1i64NV ( int index,  long x) {
        var mh$ = glVertexAttribL1i64NV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1218.glVertexAttribL2i64NV$MH,"glVertexAttribL2i64NV");
    }
    public static void glVertexAttribL2i64NV ( int index,  long x,  long y) {
        var mh$ = glVertexAttribL2i64NV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL3i64NV$MH,"glVertexAttribL3i64NV");
    }
    public static void glVertexAttribL3i64NV ( int index,  long x,  long y,  long z) {
        var mh$ = glVertexAttribL3i64NV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4i64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL4i64NV$MH,"glVertexAttribL4i64NV");
    }
    public static void glVertexAttribL4i64NV ( int index,  long x,  long y,  long z,  long w) {
        var mh$ = glVertexAttribL4i64NV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL1i64vNV$MH,"glVertexAttribL1i64vNV");
    }
    public static void glVertexAttribL1i64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL1i64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL2i64vNV$MH,"glVertexAttribL2i64vNV");
    }
    public static void glVertexAttribL2i64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL2i64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL3i64vNV$MH,"glVertexAttribL3i64vNV");
    }
    public static void glVertexAttribL3i64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL3i64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4i64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1219.glVertexAttribL4i64vNV$MH,"glVertexAttribL4i64vNV");
    }
    public static void glVertexAttribL4i64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL4i64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL1ui64NV$MH,"glVertexAttribL1ui64NV");
    }
    public static void glVertexAttribL1ui64NV ( int index,  long x) {
        var mh$ = glVertexAttribL1ui64NV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL2ui64NV$MH,"glVertexAttribL2ui64NV");
    }
    public static void glVertexAttribL2ui64NV ( int index,  long x,  long y) {
        var mh$ = glVertexAttribL2ui64NV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL3ui64NV$MH,"glVertexAttribL3ui64NV");
    }
    public static void glVertexAttribL3ui64NV ( int index,  long x,  long y,  long z) {
        var mh$ = glVertexAttribL3ui64NV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4ui64NV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL4ui64NV$MH,"glVertexAttribL4ui64NV");
    }
    public static void glVertexAttribL4ui64NV ( int index,  long x,  long y,  long z,  long w) {
        var mh$ = glVertexAttribL4ui64NV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL1ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL1ui64vNV$MH,"glVertexAttribL1ui64vNV");
    }
    public static void glVertexAttribL1ui64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL1ui64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL2ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1220.glVertexAttribL2ui64vNV$MH,"glVertexAttribL2ui64vNV");
    }
    public static void glVertexAttribL2ui64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL2ui64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL3ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.glVertexAttribL3ui64vNV$MH,"glVertexAttribL3ui64vNV");
    }
    public static void glVertexAttribL3ui64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL3ui64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribL4ui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.glVertexAttribL4ui64vNV$MH,"glVertexAttribL4ui64vNV");
    }
    public static void glVertexAttribL4ui64vNV ( int index,  Addressable v) {
        var mh$ = glVertexAttribL4ui64vNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribLi64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.glGetVertexAttribLi64vNV$MH,"glGetVertexAttribLi64vNV");
    }
    public static void glGetVertexAttribLi64vNV ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribLi64vNV$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribLui64vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.glGetVertexAttribLui64vNV$MH,"glGetVertexAttribLui64vNV");
    }
    public static void glGetVertexAttribLui64vNV ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribLui64vNV$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribLFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1221.glVertexAttribLFormatNV$MH,"glVertexAttribLFormatNV");
    }
    public static void glVertexAttribLFormatNV ( int index,  int size,  int type,  int stride) {
        var mh$ = glVertexAttribLFormatNV$MH();
        try {
            mh$.invokeExact(index, size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferAddressRangeNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1225.glBufferAddressRangeNV$MH,"glBufferAddressRangeNV");
    }
    public static void glBufferAddressRangeNV ( int pname,  int index,  long address,  long length) {
        var mh$ = glBufferAddressRangeNV$MH();
        try {
            mh$.invokeExact(pname, index, address, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glVertexFormatNV$MH,"glVertexFormatNV");
    }
    public static void glVertexFormatNV ( int size,  int type,  int stride) {
        var mh$ = glVertexFormatNV$MH();
        try {
            mh$.invokeExact(size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glNormalFormatNV$MH,"glNormalFormatNV");
    }
    public static void glNormalFormatNV ( int type,  int stride) {
        var mh$ = glNormalFormatNV$MH();
        try {
            mh$.invokeExact(type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glColorFormatNV$MH,"glColorFormatNV");
    }
    public static void glColorFormatNV ( int size,  int type,  int stride) {
        var mh$ = glColorFormatNV$MH();
        try {
            mh$.invokeExact(size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glIndexFormatNV$MH,"glIndexFormatNV");
    }
    public static void glIndexFormatNV ( int type,  int stride) {
        var mh$ = glIndexFormatNV$MH();
        try {
            mh$.invokeExact(type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glTexCoordFormatNV$MH,"glTexCoordFormatNV");
    }
    public static void glTexCoordFormatNV ( int size,  int type,  int stride) {
        var mh$ = glTexCoordFormatNV$MH();
        try {
            mh$.invokeExact(size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1226.glEdgeFlagFormatNV$MH,"glEdgeFlagFormatNV");
    }
    public static void glEdgeFlagFormatNV ( int stride) {
        var mh$ = glEdgeFlagFormatNV$MH();
        try {
            mh$.invokeExact(stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.glSecondaryColorFormatNV$MH,"glSecondaryColorFormatNV");
    }
    public static void glSecondaryColorFormatNV ( int size,  int type,  int stride) {
        var mh$ = glSecondaryColorFormatNV$MH();
        try {
            mh$.invokeExact(size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.glFogCoordFormatNV$MH,"glFogCoordFormatNV");
    }
    public static void glFogCoordFormatNV ( int type,  int stride) {
        var mh$ = glFogCoordFormatNV$MH();
        try {
            mh$.invokeExact(type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.glVertexAttribFormatNV$MH,"glVertexAttribFormatNV");
    }
    public static void glVertexAttribFormatNV ( int index,  int size,  int type,  byte normalized,  int stride) {
        var mh$ = glVertexAttribFormatNV$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIFormatNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.glVertexAttribIFormatNV$MH,"glVertexAttribIFormatNV");
    }
    public static void glVertexAttribIFormatNV ( int index,  int size,  int type,  int stride) {
        var mh$ = glVertexAttribIFormatNV$MH();
        try {
            mh$.invokeExact(index, size, type, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerui64i_vNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1227.glGetIntegerui64i_vNV$MH,"glGetIntegerui64i_vNV");
    }
    public static void glGetIntegerui64i_vNV ( int value,  int index,  Addressable result) {
        var mh$ = glGetIntegerui64i_vNV$MH();
        try {
            mh$.invokeExact(value, index, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreProgramsResidentNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.glAreProgramsResidentNV$MH,"glAreProgramsResidentNV");
    }
    public static byte glAreProgramsResidentNV ( int n,  Addressable programs,  Addressable residences) {
        var mh$ = glAreProgramsResidentNV$MH();
        try {
            return (byte)mh$.invokeExact(n, programs, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindProgramNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.glBindProgramNV$MH,"glBindProgramNV");
    }
    public static void glBindProgramNV ( int target,  int id) {
        var mh$ = glBindProgramNV$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgramsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.glDeleteProgramsNV$MH,"glDeleteProgramsNV");
    }
    public static void glDeleteProgramsNV ( int n,  Addressable programs) {
        var mh$ = glDeleteProgramsNV$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glExecuteProgramNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.glExecuteProgramNV$MH,"glExecuteProgramNV");
    }
    public static void glExecuteProgramNV ( int target,  int id,  Addressable params) {
        var mh$ = glExecuteProgramNV$MH();
        try {
            mh$.invokeExact(target, id, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenProgramsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1249.glGenProgramsNV$MH,"glGenProgramsNV");
    }
    public static void glGenProgramsNV ( int n,  Addressable programs) {
        var mh$ = glGenProgramsNV$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramParameterdvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetProgramParameterdvNV$MH,"glGetProgramParameterdvNV");
    }
    public static void glGetProgramParameterdvNV ( int target,  int index,  int pname,  Addressable params) {
        var mh$ = glGetProgramParameterdvNV$MH();
        try {
            mh$.invokeExact(target, index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetProgramParameterfvNV$MH,"glGetProgramParameterfvNV");
    }
    public static void glGetProgramParameterfvNV ( int target,  int index,  int pname,  Addressable params) {
        var mh$ = glGetProgramParameterfvNV$MH();
        try {
            mh$.invokeExact(target, index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetProgramivNV$MH,"glGetProgramivNV");
    }
    public static void glGetProgramivNV ( int id,  int pname,  Addressable params) {
        var mh$ = glGetProgramivNV$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramStringNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetProgramStringNV$MH,"glGetProgramStringNV");
    }
    public static void glGetProgramStringNV ( int id,  int pname,  Addressable program) {
        var mh$ = glGetProgramStringNV$MH();
        try {
            mh$.invokeExact(id, pname, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTrackMatrixivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetTrackMatrixivNV$MH,"glGetTrackMatrixivNV");
    }
    public static void glGetTrackMatrixivNV ( int target,  int address,  int pname,  Addressable params) {
        var mh$ = glGetTrackMatrixivNV$MH();
        try {
            mh$.invokeExact(target, address, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribdvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1250.glGetVertexAttribdvNV$MH,"glGetVertexAttribdvNV");
    }
    public static void glGetVertexAttribdvNV ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribdvNV$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glGetVertexAttribfvNV$MH,"glGetVertexAttribfvNV");
    }
    public static void glGetVertexAttribfvNV ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribfvNV$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glGetVertexAttribivNV$MH,"glGetVertexAttribivNV");
    }
    public static void glGetVertexAttribivNV ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribivNV$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribPointervNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glGetVertexAttribPointervNV$MH,"glGetVertexAttribPointervNV");
    }
    public static void glGetVertexAttribPointervNV ( int index,  int pname,  Addressable pointer) {
        var mh$ = glGetVertexAttribPointervNV$MH();
        try {
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgramNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glIsProgramNV$MH,"glIsProgramNV");
    }
    public static byte glIsProgramNV ( int id) {
        var mh$ = glIsProgramNV$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadProgramNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glLoadProgramNV$MH,"glLoadProgramNV");
    }
    public static void glLoadProgramNV ( int target,  int id,  int len,  Addressable program) {
        var mh$ = glLoadProgramNV$MH();
        try {
            mh$.invokeExact(target, id, len, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameter4dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1251.glProgramParameter4dNV$MH,"glProgramParameter4dNV");
    }
    public static void glProgramParameter4dNV ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramParameter4dNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameter4dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glProgramParameter4dvNV$MH,"glProgramParameter4dvNV");
    }
    public static void glProgramParameter4dvNV ( int target,  int index,  Addressable v) {
        var mh$ = glProgramParameter4dvNV$MH();
        try {
            mh$.invokeExact(target, index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameter4fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glProgramParameter4fNV$MH,"glProgramParameter4fNV");
    }
    public static void glProgramParameter4fNV ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramParameter4fNV$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameter4fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glProgramParameter4fvNV$MH,"glProgramParameter4fvNV");
    }
    public static void glProgramParameter4fvNV ( int target,  int index,  Addressable v) {
        var mh$ = glProgramParameter4fvNV$MH();
        try {
            mh$.invokeExact(target, index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameters4dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glProgramParameters4dvNV$MH,"glProgramParameters4dvNV");
    }
    public static void glProgramParameters4dvNV ( int target,  int index,  int count,  Addressable v) {
        var mh$ = glProgramParameters4dvNV$MH();
        try {
            mh$.invokeExact(target, index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameters4fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glProgramParameters4fvNV$MH,"glProgramParameters4fvNV");
    }
    public static void glProgramParameters4fvNV ( int target,  int index,  int count,  Addressable v) {
        var mh$ = glProgramParameters4fvNV$MH();
        try {
            mh$.invokeExact(target, index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRequestResidentProgramsNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1252.glRequestResidentProgramsNV$MH,"glRequestResidentProgramsNV");
    }
    public static void glRequestResidentProgramsNV ( int n,  Addressable programs) {
        var mh$ = glRequestResidentProgramsNV$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTrackMatrixNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glTrackMatrixNV$MH,"glTrackMatrixNV");
    }
    public static void glTrackMatrixNV ( int target,  int address,  int matrix,  int transform) {
        var mh$ = glTrackMatrixNV$MH();
        try {
            mh$.invokeExact(target, address, matrix, transform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribPointerNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glVertexAttribPointerNV$MH,"glVertexAttribPointerNV");
    }
    public static void glVertexAttribPointerNV ( int index,  int fsize,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribPointerNV$MH();
        try {
            mh$.invokeExact(index, fsize, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glVertexAttrib1dNV$MH,"glVertexAttrib1dNV");
    }
    public static void glVertexAttrib1dNV ( int index,  double x) {
        var mh$ = glVertexAttrib1dNV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glVertexAttrib1dvNV$MH,"glVertexAttrib1dvNV");
    }
    public static void glVertexAttrib1dvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1dvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glVertexAttrib1fNV$MH,"glVertexAttrib1fNV");
    }
    public static void glVertexAttrib1fNV ( int index,  float x) {
        var mh$ = glVertexAttrib1fNV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1253.glVertexAttrib1fvNV$MH,"glVertexAttrib1fvNV");
    }
    public static void glVertexAttrib1fvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1fvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1sNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib1sNV$MH,"glVertexAttrib1sNV");
    }
    public static void glVertexAttrib1sNV ( int index,  short x) {
        var mh$ = glVertexAttrib1sNV$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib1svNV$MH,"glVertexAttrib1svNV");
    }
    public static void glVertexAttrib1svNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1svNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib2dNV$MH,"glVertexAttrib2dNV");
    }
    public static void glVertexAttrib2dNV ( int index,  double x,  double y) {
        var mh$ = glVertexAttrib2dNV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib2dvNV$MH,"glVertexAttrib2dvNV");
    }
    public static void glVertexAttrib2dvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2dvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib2fNV$MH,"glVertexAttrib2fNV");
    }
    public static void glVertexAttrib2fNV ( int index,  float x,  float y) {
        var mh$ = glVertexAttrib2fNV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1254.glVertexAttrib2fvNV$MH,"glVertexAttrib2fvNV");
    }
    public static void glVertexAttrib2fvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2fvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2sNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib2sNV$MH,"glVertexAttrib2sNV");
    }
    public static void glVertexAttrib2sNV ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2sNV$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib2svNV$MH,"glVertexAttrib2svNV");
    }
    public static void glVertexAttrib2svNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2svNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib3dNV$MH,"glVertexAttrib3dNV");
    }
    public static void glVertexAttrib3dNV ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttrib3dNV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib3dvNV$MH,"glVertexAttrib3dvNV");
    }
    public static void glVertexAttrib3dvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3dvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib3fNV$MH,"glVertexAttrib3fNV");
    }
    public static void glVertexAttrib3fNV ( int index,  float x,  float y,  float z) {
        var mh$ = glVertexAttrib3fNV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1255.glVertexAttrib3fvNV$MH,"glVertexAttrib3fvNV");
    }
    public static void glVertexAttrib3fvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3fvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3sNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib3sNV$MH,"glVertexAttrib3sNV");
    }
    public static void glVertexAttrib3sNV ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3sNV$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib3svNV$MH,"glVertexAttrib3svNV");
    }
    public static void glVertexAttrib3svNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3svNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib4dNV$MH,"glVertexAttrib4dNV");
    }
    public static void glVertexAttrib4dNV ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttrib4dNV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib4dvNV$MH,"glVertexAttrib4dvNV");
    }
    public static void glVertexAttrib4dvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4dvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib4fNV$MH,"glVertexAttrib4fNV");
    }
    public static void glVertexAttrib4fNV ( int index,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexAttrib4fNV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1256.glVertexAttrib4fvNV$MH,"glVertexAttrib4fvNV");
    }
    public static void glVertexAttrib4fvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4fvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4sNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttrib4sNV$MH,"glVertexAttrib4sNV");
    }
    public static void glVertexAttrib4sNV ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4sNV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttrib4svNV$MH,"glVertexAttrib4svNV");
    }
    public static void glVertexAttrib4svNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4svNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttrib4ubNV$MH,"glVertexAttrib4ubNV");
    }
    public static void glVertexAttrib4ubNV ( int index,  byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertexAttrib4ubNV$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttrib4ubvNV$MH,"glVertexAttrib4ubvNV");
    }
    public static void glVertexAttrib4ubvNV ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ubvNV$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs1dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttribs1dvNV$MH,"glVertexAttribs1dvNV");
    }
    public static void glVertexAttribs1dvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs1dvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs1fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1257.glVertexAttribs1fvNV$MH,"glVertexAttribs1fvNV");
    }
    public static void glVertexAttribs1fvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs1fvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs1svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs1svNV$MH,"glVertexAttribs1svNV");
    }
    public static void glVertexAttribs1svNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs1svNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs2dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs2dvNV$MH,"glVertexAttribs2dvNV");
    }
    public static void glVertexAttribs2dvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs2dvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs2fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs2fvNV$MH,"glVertexAttribs2fvNV");
    }
    public static void glVertexAttribs2fvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs2fvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs2svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs2svNV$MH,"glVertexAttribs2svNV");
    }
    public static void glVertexAttribs2svNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs2svNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs3dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs3dvNV$MH,"glVertexAttribs3dvNV");
    }
    public static void glVertexAttribs3dvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs3dvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs3fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1258.glVertexAttribs3fvNV$MH,"glVertexAttribs3fvNV");
    }
    public static void glVertexAttribs3fvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs3fvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs3svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.glVertexAttribs3svNV$MH,"glVertexAttribs3svNV");
    }
    public static void glVertexAttribs3svNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs3svNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs4dvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.glVertexAttribs4dvNV$MH,"glVertexAttribs4dvNV");
    }
    public static void glVertexAttribs4dvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs4dvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs4fvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.glVertexAttribs4fvNV$MH,"glVertexAttribs4fvNV");
    }
    public static void glVertexAttribs4fvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs4fvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs4svNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.glVertexAttribs4svNV$MH,"glVertexAttribs4svNV");
    }
    public static void glVertexAttribs4svNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs4svNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribs4ubvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1259.glVertexAttribs4ubvNV$MH,"glVertexAttribs4ubvNV");
    }
    public static void glVertexAttribs4ubvNV ( int index,  int count,  Addressable v) {
        var mh$ = glVertexAttribs4ubvNV$MH();
        try {
            mh$.invokeExact(index, count, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.glVertexAttribI1iEXT$MH,"glVertexAttribI1iEXT");
    }
    public static void glVertexAttribI1iEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1iEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.glVertexAttribI2iEXT$MH,"glVertexAttribI2iEXT");
    }
    public static void glVertexAttribI2iEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2iEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1267.glVertexAttribI3iEXT$MH,"glVertexAttribI3iEXT");
    }
    public static void glVertexAttribI3iEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI4iEXT$MH,"glVertexAttribI4iEXT");
    }
    public static void glVertexAttribI4iEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI1uiEXT$MH,"glVertexAttribI1uiEXT");
    }
    public static void glVertexAttribI1uiEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1uiEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI2uiEXT$MH,"glVertexAttribI2uiEXT");
    }
    public static void glVertexAttribI2uiEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI3uiEXT$MH,"glVertexAttribI3uiEXT");
    }
    public static void glVertexAttribI3uiEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI4uiEXT$MH,"glVertexAttribI4uiEXT");
    }
    public static void glVertexAttribI4uiEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1268.glVertexAttribI1ivEXT$MH,"glVertexAttribI1ivEXT");
    }
    public static void glVertexAttribI1ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI2ivEXT$MH,"glVertexAttribI2ivEXT");
    }
    public static void glVertexAttribI2ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI3ivEXT$MH,"glVertexAttribI3ivEXT");
    }
    public static void glVertexAttribI3ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI4ivEXT$MH,"glVertexAttribI4ivEXT");
    }
    public static void glVertexAttribI4ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI1uivEXT$MH,"glVertexAttribI1uivEXT");
    }
    public static void glVertexAttribI1uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI2uivEXT$MH,"glVertexAttribI2uivEXT");
    }
    public static void glVertexAttribI2uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1269.glVertexAttribI3uivEXT$MH,"glVertexAttribI3uivEXT");
    }
    public static void glVertexAttribI3uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribI4uivEXT$MH,"glVertexAttribI4uivEXT");
    }
    public static void glVertexAttribI4uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribI4bvEXT$MH,"glVertexAttribI4bvEXT");
    }
    public static void glVertexAttribI4bvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4bvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribI4svEXT$MH,"glVertexAttribI4svEXT");
    }
    public static void glVertexAttribI4svEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4svEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribI4ubvEXT$MH,"glVertexAttribI4ubvEXT");
    }
    public static void glVertexAttribI4ubvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ubvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribI4usvEXT$MH,"glVertexAttribI4usvEXT");
    }
    public static void glVertexAttribI4usvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4usvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1270.glVertexAttribIPointerEXT$MH,"glVertexAttribIPointerEXT");
    }
    public static void glVertexAttribIPointerEXT ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribIPointerEXT$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.glGetVertexAttribIivEXT$MH,"glGetVertexAttribIivEXT");
    }
    public static void glGetVertexAttribIivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$1271.glGetVertexAttribIuivEXT$MH,"glGetVertexAttribIuivEXT");
    }
    public static void glGetVertexAttribIuivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIuivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginVideoCaptureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.glBeginVideoCaptureNV$MH,"glBeginVideoCaptureNV");
    }
    public static void glBeginVideoCaptureNV ( int video_capture_slot) {
        var mh$ = glBeginVideoCaptureNV$MH();
        try {
            mh$.invokeExact(video_capture_slot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVideoCaptureStreamBufferNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.glBindVideoCaptureStreamBufferNV$MH,"glBindVideoCaptureStreamBufferNV");
    }
    public static void glBindVideoCaptureStreamBufferNV ( int video_capture_slot,  int stream,  int frame_region,  long offset) {
        var mh$ = glBindVideoCaptureStreamBufferNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, frame_region, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVideoCaptureStreamTextureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.glBindVideoCaptureStreamTextureNV$MH,"glBindVideoCaptureStreamTextureNV");
    }
    public static void glBindVideoCaptureStreamTextureNV ( int video_capture_slot,  int stream,  int frame_region,  int target,  int texture) {
        var mh$ = glBindVideoCaptureStreamTextureNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, frame_region, target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndVideoCaptureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1275.glEndVideoCaptureNV$MH,"glEndVideoCaptureNV");
    }
    public static void glEndVideoCaptureNV ( int video_capture_slot) {
        var mh$ = glEndVideoCaptureNV$MH();
        try {
            mh$.invokeExact(video_capture_slot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoCaptureivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glGetVideoCaptureivNV$MH,"glGetVideoCaptureivNV");
    }
    public static void glGetVideoCaptureivNV ( int video_capture_slot,  int pname,  Addressable params) {
        var mh$ = glGetVideoCaptureivNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoCaptureStreamivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glGetVideoCaptureStreamivNV$MH,"glGetVideoCaptureStreamivNV");
    }
    public static void glGetVideoCaptureStreamivNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glGetVideoCaptureStreamivNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoCaptureStreamfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glGetVideoCaptureStreamfvNV$MH,"glGetVideoCaptureStreamfvNV");
    }
    public static void glGetVideoCaptureStreamfvNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glGetVideoCaptureStreamfvNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVideoCaptureStreamdvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glGetVideoCaptureStreamdvNV$MH,"glGetVideoCaptureStreamdvNV");
    }
    public static void glGetVideoCaptureStreamdvNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glGetVideoCaptureStreamdvNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVideoCaptureNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glVideoCaptureNV$MH,"glVideoCaptureNV");
    }
    public static int glVideoCaptureNV ( int video_capture_slot,  Addressable sequence_num,  Addressable capture_time) {
        var mh$ = glVideoCaptureNV$MH();
        try {
            return (int)mh$.invokeExact(video_capture_slot, sequence_num, capture_time);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVideoCaptureStreamParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1276.glVideoCaptureStreamParameterivNV$MH,"glVideoCaptureStreamParameterivNV");
    }
    public static void glVideoCaptureStreamParameterivNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glVideoCaptureStreamParameterivNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVideoCaptureStreamParameterfvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.glVideoCaptureStreamParameterfvNV$MH,"glVideoCaptureStreamParameterfvNV");
    }
    public static void glVideoCaptureStreamParameterfvNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glVideoCaptureStreamParameterfvNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVideoCaptureStreamParameterdvNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.glVideoCaptureStreamParameterdvNV$MH,"glVideoCaptureStreamParameterdvNV");
    }
    public static void glVideoCaptureStreamParameterdvNV ( int video_capture_slot,  int stream,  int pname,  Addressable params) {
        var mh$ = glVideoCaptureStreamParameterdvNV$MH();
        try {
            mh$.invokeExact(video_capture_slot, stream, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewportSwizzleNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1277.glViewportSwizzleNV$MH,"glViewportSwizzleNV");
    }
    public static void glViewportSwizzleNV ( int index,  int swizzlex,  int swizzley,  int swizzlez,  int swizzlew) {
        var mh$ = glViewportSwizzleNV$MH();
        try {
            mh$.invokeExact(index, swizzlex, swizzley, swizzlez, swizzlew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureMultiviewOVR$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.glFramebufferTextureMultiviewOVR$MH,"glFramebufferTextureMultiviewOVR");
    }
    public static void glFramebufferTextureMultiviewOVR ( int target,  int attachment,  int texture,  int level,  int baseViewIndex,  int numViews) {
        var mh$ = glFramebufferTextureMultiviewOVR$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, baseViewIndex, numViews);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHintPGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1278.glHintPGI$MH,"glHintPGI");
    }
    public static void glHintPGI ( int target,  int mode) {
        var mh$ = glHintPGI$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDetailTexFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.glDetailTexFuncSGIS$MH,"glDetailTexFuncSGIS");
    }
    public static void glDetailTexFuncSGIS ( int target,  int n,  Addressable points) {
        var mh$ = glDetailTexFuncSGIS$MH();
        try {
            mh$.invokeExact(target, n, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDetailTexFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1279.glGetDetailTexFuncSGIS$MH,"glGetDetailTexFuncSGIS");
    }
    public static void glGetDetailTexFuncSGIS ( int target,  Addressable points) {
        var mh$ = glGetDetailTexFuncSGIS$MH();
        try {
            mh$.invokeExact(target, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.glFogFuncSGIS$MH,"glFogFuncSGIS");
    }
    public static void glFogFuncSGIS ( int n,  Addressable points) {
        var mh$ = glFogFuncSGIS$MH();
        try {
            mh$.invokeExact(n, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFogFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1280.glGetFogFuncSGIS$MH,"glGetFogFuncSGIS");
    }
    public static void glGetFogFuncSGIS ( Addressable points) {
        var mh$ = glGetFogFuncSGIS$MH();
        try {
            mh$.invokeExact(points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleMaskSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.glSampleMaskSGIS$MH,"glSampleMaskSGIS");
    }
    public static void glSampleMaskSGIS ( float value,  byte invert) {
        var mh$ = glSampleMaskSGIS$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSamplePatternSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1281.glSamplePatternSGIS$MH,"glSamplePatternSGIS");
    }
    public static void glSamplePatternSGIS ( int pattern) {
        var mh$ = glSamplePatternSGIS$MH();
        try {
            mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTexGenParameteriSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1283.glPixelTexGenParameteriSGIS$MH,"glPixelTexGenParameteriSGIS");
    }
    public static void glPixelTexGenParameteriSGIS ( int pname,  int param) {
        var mh$ = glPixelTexGenParameteriSGIS$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTexGenParameterivSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.glPixelTexGenParameterivSGIS$MH,"glPixelTexGenParameterivSGIS");
    }
    public static void glPixelTexGenParameterivSGIS ( int pname,  Addressable params) {
        var mh$ = glPixelTexGenParameterivSGIS$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTexGenParameterfSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.glPixelTexGenParameterfSGIS$MH,"glPixelTexGenParameterfSGIS");
    }
    public static void glPixelTexGenParameterfSGIS ( int pname,  float param) {
        var mh$ = glPixelTexGenParameterfSGIS$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTexGenParameterfvSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.glPixelTexGenParameterfvSGIS$MH,"glPixelTexGenParameterfvSGIS");
    }
    public static void glPixelTexGenParameterfvSGIS ( int pname,  Addressable params) {
        var mh$ = glPixelTexGenParameterfvSGIS$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelTexGenParameterivSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.glGetPixelTexGenParameterivSGIS$MH,"glGetPixelTexGenParameterivSGIS");
    }
    public static void glGetPixelTexGenParameterivSGIS ( int pname,  Addressable params) {
        var mh$ = glGetPixelTexGenParameterivSGIS$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelTexGenParameterfvSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1284.glGetPixelTexGenParameterfvSGIS$MH,"glGetPixelTexGenParameterfvSGIS");
    }
    public static void glGetPixelTexGenParameterfvSGIS ( int pname,  Addressable params) {
        var mh$ = glGetPixelTexGenParameterfvSGIS$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.glPointParameterfSGIS$MH,"glPointParameterfSGIS");
    }
    public static void glPointParameterfSGIS ( int pname,  float param) {
        var mh$ = glPointParameterfSGIS$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfvSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1285.glPointParameterfvSGIS$MH,"glPointParameterfvSGIS");
    }
    public static void glPointParameterfvSGIS ( int pname,  Addressable params) {
        var mh$ = glPointParameterfvSGIS$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSharpenTexFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.glSharpenTexFuncSGIS$MH,"glSharpenTexFuncSGIS");
    }
    public static void glSharpenTexFuncSGIS ( int target,  int n,  Addressable points) {
        var mh$ = glSharpenTexFuncSGIS$MH();
        try {
            mh$.invokeExact(target, n, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSharpenTexFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1286.glGetSharpenTexFuncSGIS$MH,"glGetSharpenTexFuncSGIS");
    }
    public static void glGetSharpenTexFuncSGIS ( int target,  Addressable points) {
        var mh$ = glGetSharpenTexFuncSGIS$MH();
        try {
            mh$.invokeExact(target, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage4DSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.glTexImage4DSGIS$MH,"glTexImage4DSGIS");
    }
    public static void glTexImage4DSGIS ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int size4d,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage4DSGIS$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage4DSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1287.glTexSubImage4DSGIS$MH,"glTexSubImage4DSGIS");
    }
    public static void glTexSubImage4DSGIS ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int woffset,  int width,  int height,  int depth,  int size4d,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage4DSGIS$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureColorMaskSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1288.glTextureColorMaskSGIS$MH,"glTextureColorMaskSGIS");
    }
    public static void glTextureColorMaskSGIS ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glTextureColorMaskSGIS$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexFilterFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.glGetTexFilterFuncSGIS$MH,"glGetTexFilterFuncSGIS");
    }
    public static void glGetTexFilterFuncSGIS ( int target,  int filter,  Addressable weights) {
        var mh$ = glGetTexFilterFuncSGIS$MH();
        try {
            mh$.invokeExact(target, filter, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexFilterFuncSGIS$MH() {
        return RuntimeHelper.requireNonNull(constants$1289.glTexFilterFuncSGIS$MH,"glTexFilterFuncSGIS");
    }
    public static void glTexFilterFuncSGIS ( int target,  int filter,  int n,  Addressable weights) {
        var mh$ = glTexFilterFuncSGIS$MH();
        try {
            mh$.invokeExact(target, filter, n, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAsyncMarkerSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.glAsyncMarkerSGIX$MH,"glAsyncMarkerSGIX");
    }
    public static void glAsyncMarkerSGIX ( int marker) {
        var mh$ = glAsyncMarkerSGIX$MH();
        try {
            mh$.invokeExact(marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishAsyncSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.glFinishAsyncSGIX$MH,"glFinishAsyncSGIX");
    }
    public static int glFinishAsyncSGIX ( Addressable markerp) {
        var mh$ = glFinishAsyncSGIX$MH();
        try {
            return (int)mh$.invokeExact(markerp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPollAsyncSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.glPollAsyncSGIX$MH,"glPollAsyncSGIX");
    }
    public static int glPollAsyncSGIX ( Addressable markerp) {
        var mh$ = glPollAsyncSGIX$MH();
        try {
            return (int)mh$.invokeExact(markerp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenAsyncMarkersSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1291.glGenAsyncMarkersSGIX$MH,"glGenAsyncMarkersSGIX");
    }
    public static int glGenAsyncMarkersSGIX ( int range) {
        var mh$ = glGenAsyncMarkersSGIX$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteAsyncMarkersSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glDeleteAsyncMarkersSGIX$MH,"glDeleteAsyncMarkersSGIX");
    }
    public static void glDeleteAsyncMarkersSGIX ( int marker,  int range) {
        var mh$ = glDeleteAsyncMarkersSGIX$MH();
        try {
            mh$.invokeExact(marker, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsAsyncMarkerSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glIsAsyncMarkerSGIX$MH,"glIsAsyncMarkerSGIX");
    }
    public static byte glIsAsyncMarkerSGIX ( int marker) {
        var mh$ = glIsAsyncMarkerSGIX$MH();
        try {
            return (byte)mh$.invokeExact(marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushRasterSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1292.glFlushRasterSGIX$MH,"glFlushRasterSGIX");
    }
    public static void glFlushRasterSGIX () {
        var mh$ = glFlushRasterSGIX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentColorMaterialSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1298.glFragmentColorMaterialSGIX$MH,"glFragmentColorMaterialSGIX");
    }
    public static void glFragmentColorMaterialSGIX ( int face,  int mode) {
        var mh$ = glFragmentColorMaterialSGIX$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightfSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightfSGIX$MH,"glFragmentLightfSGIX");
    }
    public static void glFragmentLightfSGIX ( int light,  int pname,  float param) {
        var mh$ = glFragmentLightfSGIX$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightfvSGIX$MH,"glFragmentLightfvSGIX");
    }
    public static void glFragmentLightfvSGIX ( int light,  int pname,  Addressable params) {
        var mh$ = glFragmentLightfvSGIX$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightiSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightiSGIX$MH,"glFragmentLightiSGIX");
    }
    public static void glFragmentLightiSGIX ( int light,  int pname,  int param) {
        var mh$ = glFragmentLightiSGIX$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightivSGIX$MH,"glFragmentLightivSGIX");
    }
    public static void glFragmentLightivSGIX ( int light,  int pname,  Addressable params) {
        var mh$ = glFragmentLightivSGIX$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightModelfSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightModelfSGIX$MH,"glFragmentLightModelfSGIX");
    }
    public static void glFragmentLightModelfSGIX ( int pname,  float param) {
        var mh$ = glFragmentLightModelfSGIX$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightModelfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1299.glFragmentLightModelfvSGIX$MH,"glFragmentLightModelfvSGIX");
    }
    public static void glFragmentLightModelfvSGIX ( int pname,  Addressable params) {
        var mh$ = glFragmentLightModelfvSGIX$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightModeliSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentLightModeliSGIX$MH,"glFragmentLightModeliSGIX");
    }
    public static void glFragmentLightModeliSGIX ( int pname,  int param) {
        var mh$ = glFragmentLightModeliSGIX$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentLightModelivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentLightModelivSGIX$MH,"glFragmentLightModelivSGIX");
    }
    public static void glFragmentLightModelivSGIX ( int pname,  Addressable params) {
        var mh$ = glFragmentLightModelivSGIX$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentMaterialfSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentMaterialfSGIX$MH,"glFragmentMaterialfSGIX");
    }
    public static void glFragmentMaterialfSGIX ( int face,  int pname,  float param) {
        var mh$ = glFragmentMaterialfSGIX$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentMaterialfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentMaterialfvSGIX$MH,"glFragmentMaterialfvSGIX");
    }
    public static void glFragmentMaterialfvSGIX ( int face,  int pname,  Addressable params) {
        var mh$ = glFragmentMaterialfvSGIX$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentMaterialiSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentMaterialiSGIX$MH,"glFragmentMaterialiSGIX");
    }
    public static void glFragmentMaterialiSGIX ( int face,  int pname,  int param) {
        var mh$ = glFragmentMaterialiSGIX$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFragmentMaterialivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1300.glFragmentMaterialivSGIX$MH,"glFragmentMaterialivSGIX");
    }
    public static void glFragmentMaterialivSGIX ( int face,  int pname,  Addressable params) {
        var mh$ = glFragmentMaterialivSGIX$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragmentLightfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glGetFragmentLightfvSGIX$MH,"glGetFragmentLightfvSGIX");
    }
    public static void glGetFragmentLightfvSGIX ( int light,  int pname,  Addressable params) {
        var mh$ = glGetFragmentLightfvSGIX$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragmentLightivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glGetFragmentLightivSGIX$MH,"glGetFragmentLightivSGIX");
    }
    public static void glGetFragmentLightivSGIX ( int light,  int pname,  Addressable params) {
        var mh$ = glGetFragmentLightivSGIX$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragmentMaterialfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glGetFragmentMaterialfvSGIX$MH,"glGetFragmentMaterialfvSGIX");
    }
    public static void glGetFragmentMaterialfvSGIX ( int face,  int pname,  Addressable params) {
        var mh$ = glGetFragmentMaterialfvSGIX$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragmentMaterialivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glGetFragmentMaterialivSGIX$MH,"glGetFragmentMaterialivSGIX");
    }
    public static void glGetFragmentMaterialivSGIX ( int face,  int pname,  Addressable params) {
        var mh$ = glGetFragmentMaterialivSGIX$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightEnviSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1301.glLightEnviSGIX$MH,"glLightEnviSGIX");
    }
    public static void glLightEnviSGIX ( int pname,  int param) {
        var mh$ = glLightEnviSGIX$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrameZoomSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glFrameZoomSGIX$MH,"glFrameZoomSGIX");
    }
    public static void glFrameZoomSGIX ( int factor) {
        var mh$ = glFrameZoomSGIX$MH();
        try {
            mh$.invokeExact(factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIglooInterfaceSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1302.glIglooInterfaceSGIX$MH,"glIglooInterfaceSGIX");
    }
    public static void glIglooInterfaceSGIX ( int pname,  Addressable params) {
        var mh$ = glIglooInterfaceSGIX$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInstrumentsSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1304.glGetInstrumentsSGIX$MH,"glGetInstrumentsSGIX");
    }
    public static int glGetInstrumentsSGIX () {
        var mh$ = glGetInstrumentsSGIX$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInstrumentsBufferSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glInstrumentsBufferSGIX$MH,"glInstrumentsBufferSGIX");
    }
    public static void glInstrumentsBufferSGIX ( int size,  Addressable buffer) {
        var mh$ = glInstrumentsBufferSGIX$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPollInstrumentsSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glPollInstrumentsSGIX$MH,"glPollInstrumentsSGIX");
    }
    public static int glPollInstrumentsSGIX ( Addressable marker_p) {
        var mh$ = glPollInstrumentsSGIX$MH();
        try {
            return (int)mh$.invokeExact(marker_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadInstrumentsSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glReadInstrumentsSGIX$MH,"glReadInstrumentsSGIX");
    }
    public static void glReadInstrumentsSGIX ( int marker) {
        var mh$ = glReadInstrumentsSGIX$MH();
        try {
            mh$.invokeExact(marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStartInstrumentsSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glStartInstrumentsSGIX$MH,"glStartInstrumentsSGIX");
    }
    public static void glStartInstrumentsSGIX () {
        var mh$ = glStartInstrumentsSGIX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStopInstrumentsSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1305.glStopInstrumentsSGIX$MH,"glStopInstrumentsSGIX");
    }
    public static void glStopInstrumentsSGIX ( int marker) {
        var mh$ = glStopInstrumentsSGIX$MH();
        try {
            mh$.invokeExact(marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetListParameterfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1307.glGetListParameterfvSGIX$MH,"glGetListParameterfvSGIX");
    }
    public static void glGetListParameterfvSGIX ( int list,  int pname,  Addressable params) {
        var mh$ = glGetListParameterfvSGIX$MH();
        try {
            mh$.invokeExact(list, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetListParameterivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glGetListParameterivSGIX$MH,"glGetListParameterivSGIX");
    }
    public static void glGetListParameterivSGIX ( int list,  int pname,  Addressable params) {
        var mh$ = glGetListParameterivSGIX$MH();
        try {
            mh$.invokeExact(list, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListParameterfSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glListParameterfSGIX$MH,"glListParameterfSGIX");
    }
    public static void glListParameterfSGIX ( int list,  int pname,  float param) {
        var mh$ = glListParameterfSGIX$MH();
        try {
            mh$.invokeExact(list, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListParameterfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glListParameterfvSGIX$MH,"glListParameterfvSGIX");
    }
    public static void glListParameterfvSGIX ( int list,  int pname,  Addressable params) {
        var mh$ = glListParameterfvSGIX$MH();
        try {
            mh$.invokeExact(list, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListParameteriSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glListParameteriSGIX$MH,"glListParameteriSGIX");
    }
    public static void glListParameteriSGIX ( int list,  int pname,  int param) {
        var mh$ = glListParameteriSGIX$MH();
        try {
            mh$.invokeExact(list, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListParameterivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glListParameterivSGIX$MH,"glListParameterivSGIX");
    }
    public static void glListParameterivSGIX ( int list,  int pname,  Addressable params) {
        var mh$ = glListParameterivSGIX$MH();
        try {
            mh$.invokeExact(list, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTexGenSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glPixelTexGenSGIX$MH,"glPixelTexGenSGIX");
    }
    public static void glPixelTexGenSGIX ( int mode) {
        var mh$ = glPixelTexGenSGIX$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeformationMap3dSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glDeformationMap3dSGIX$MH,"glDeformationMap3dSGIX");
    }
    public static void glDeformationMap3dSGIX ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  double w1,  double w2,  int wstride,  int worder,  Addressable points) {
        var mh$ = glDeformationMap3dSGIX$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeformationMap3fSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glDeformationMap3fSGIX$MH,"glDeformationMap3fSGIX");
    }
    public static void glDeformationMap3fSGIX ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  float w1,  float w2,  int wstride,  int worder,  Addressable points) {
        var mh$ = glDeformationMap3fSGIX$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeformSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glDeformSGIX$MH,"glDeformSGIX");
    }
    public static void glDeformSGIX ( int mask) {
        var mh$ = glDeformSGIX$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentityDeformationMapSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glLoadIdentityDeformationMapSGIX$MH,"glLoadIdentityDeformationMapSGIX");
    }
    public static void glLoadIdentityDeformationMapSGIX ( int mask) {
        var mh$ = glLoadIdentityDeformationMapSGIX$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReferencePlaneSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glReferencePlaneSGIX$MH,"glReferencePlaneSGIX");
    }
    public static void glReferencePlaneSGIX ( Addressable equation) {
        var mh$ = glReferencePlaneSGIX$MH();
        try {
            mh$.invokeExact(equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpriteParameterfSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glSpriteParameterfSGIX$MH,"glSpriteParameterfSGIX");
    }
    public static void glSpriteParameterfSGIX ( int pname,  float param) {
        var mh$ = glSpriteParameterfSGIX$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpriteParameterfvSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glSpriteParameterfvSGIX$MH,"glSpriteParameterfvSGIX");
    }
    public static void glSpriteParameterfvSGIX ( int pname,  Addressable params) {
        var mh$ = glSpriteParameterfvSGIX$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpriteParameteriSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glSpriteParameteriSGIX$MH,"glSpriteParameteriSGIX");
    }
    public static void glSpriteParameteriSGIX ( int pname,  int param) {
        var mh$ = glSpriteParameteriSGIX$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSpriteParameterivSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.glSpriteParameterivSGIX$MH,"glSpriteParameterivSGIX");
    }
    public static void glSpriteParameterivSGIX ( int pname,  Addressable params) {
        var mh$ = glSpriteParameterivSGIX$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTagSampleBufferSGIX$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.glTagSampleBufferSGIX$MH,"glTagSampleBufferSGIX");
    }
    public static void glTagSampleBufferSGIX () {
        var mh$ = glTagSampleBufferSGIX$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glColorTableSGI$MH,"glColorTableSGI");
    }
    public static void glColorTableSGI ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = glColorTableSGI$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfvSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.glColorTableParameterfvSGI$MH,"glColorTableParameterfvSGI");
    }
    public static void glColorTableParameterfvSGI ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameterfvSGI$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterivSGI$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.glColorTableParameterivSGI$MH,"glColorTableParameterivSGI");
    }
    public static void glColorTableParameterivSGI ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameterivSGI$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


