// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLVDPAUUNREGISTERSURFACENVPROC {

    void apply(long surface);
    static MemorySegment allocate(PFNGLVDPAUUNREGISTERSURFACENVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLVDPAUUNREGISTERSURFACENVPROC.class, fi, constants$836.PFNGLVDPAUUNREGISTERSURFACENVPROC$FUNC, session);
    }
    static PFNGLVDPAUUNREGISTERSURFACENVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (long _surface) -> {
            try {
                constants$836.PFNGLVDPAUUNREGISTERSURFACENVPROC$MH.invokeExact((Addressable)symbol, _surface);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


