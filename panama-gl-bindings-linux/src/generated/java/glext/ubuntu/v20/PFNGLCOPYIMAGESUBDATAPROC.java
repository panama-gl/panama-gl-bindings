// Generated by jextract

package glext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLCOPYIMAGESUBDATAPROC {

    void apply(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
    static MemorySegment allocate(PFNGLCOPYIMAGESUBDATAPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLCOPYIMAGESUBDATAPROC.class, fi, constants$334.PFNGLCOPYIMAGESUBDATAPROC$FUNC, session);
    }
    static PFNGLCOPYIMAGESUBDATAPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _srcName, int _srcTarget, int _srcLevel, int _srcX, int _srcY, int _srcZ, int _dstName, int _dstTarget, int _dstLevel, int _dstX, int _dstY, int _dstZ, int _srcWidth, int _srcHeight, int _srcDepth) -> {
            try {
                constants$334.PFNGLCOPYIMAGESUBDATAPROC$MH.invokeExact((Addressable)symbol, _srcName, _srcTarget, _srcLevel, _srcX, _srcY, _srcZ, _dstName, _dstTarget, _dstLevel, _dstX, _dstY, _dstZ, _srcWidth, _srcHeight, _srcDepth);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


