// Generated by jextract

package opengl.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$9 {

    static final FunctionDescriptor glPopMatrix$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopMatrix$MH = RuntimeHelper.downcallHandle(
        "glPopMatrix",
        constants$9.glPopMatrix$FUNC
    );
    static final FunctionDescriptor glLoadIdentity$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glLoadIdentity$MH = RuntimeHelper.downcallHandle(
        "glLoadIdentity",
        constants$9.glLoadIdentity$FUNC
    );
    static final FunctionDescriptor glLoadMatrixd$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glLoadMatrixd$MH = RuntimeHelper.downcallHandle(
        "glLoadMatrixd",
        constants$9.glLoadMatrixd$FUNC
    );
    static final FunctionDescriptor glLoadMatrixf$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glLoadMatrixf$MH = RuntimeHelper.downcallHandle(
        "glLoadMatrixf",
        constants$9.glLoadMatrixf$FUNC
    );
    static final FunctionDescriptor glMultMatrixd$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glMultMatrixd$MH = RuntimeHelper.downcallHandle(
        "glMultMatrixd",
        constants$9.glMultMatrixd$FUNC
    );
    static final FunctionDescriptor glMultMatrixf$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glMultMatrixf$MH = RuntimeHelper.downcallHandle(
        "glMultMatrixf",
        constants$9.glMultMatrixf$FUNC
    );
}


