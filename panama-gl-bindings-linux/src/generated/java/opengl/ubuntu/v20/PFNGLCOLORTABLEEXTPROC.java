// Generated by jextract

package opengl.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLCOLORTABLEEXTPROC {

    void apply(int target, int internalFormat, int width, int format, int type, java.lang.foreign.MemoryAddress table);
    static MemorySegment allocate(PFNGLCOLORTABLEEXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLCOLORTABLEEXTPROC.class, fi, constants$649.PFNGLCOLORTABLEEXTPROC$FUNC, session);
    }
    static PFNGLCOLORTABLEEXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _target, int _internalFormat, int _width, int _format, int _type, java.lang.foreign.MemoryAddress _table) -> {
            try {
                constants$649.PFNGLCOLORTABLEEXTPROC$MH.invokeExact((Addressable)symbol, _target, _internalFormat, _width, _format, _type, (java.lang.foreign.Addressable)_table);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


