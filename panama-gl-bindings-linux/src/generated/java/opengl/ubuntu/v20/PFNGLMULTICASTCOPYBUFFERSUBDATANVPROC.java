// Generated by jextract

package opengl.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC {

    void apply(int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size);
    static MemorySegment allocate(PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC.class, fi, constants$754.PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC$FUNC, session);
    }
    static PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _readGpu, int _writeGpuMask, int _readBuffer, int _writeBuffer, long _readOffset, long _writeOffset, long _size) -> {
            try {
                constants$754.PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC$MH.invokeExact((Addressable)symbol, _readGpu, _writeGpuMask, _readBuffer, _writeBuffer, _readOffset, _writeOffset, _size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


