// Generated by jextract

package opengl.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glut_h_6 extends glut_h_5 {

    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int cap) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int cap) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double near_val,  double far_val) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2i$MH,"glRasterPos2i");
    }
    public static void glRasterPos2i ( int x,  int y) {
        var mh$ = glRasterPos2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos2s$MH,"glRasterPos2s");
    }
    public static void glRasterPos2s ( short x,  short y) {
        var mh$ = glRasterPos2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3d$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3d$MH,"glRasterPos3d");
    }
    public static void glRasterPos3d ( double x,  double y,  double z) {
        var mh$ = glRasterPos3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3f$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3f$MH,"glRasterPos3f");
    }
    public static void glRasterPos3f ( float x,  float y,  float z) {
        var mh$ = glRasterPos3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3i$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3i$MH,"glRasterPos3i");
    }
    public static void glRasterPos3i ( int x,  int y,  int z) {
        var mh$ = glRasterPos3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3s$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glRasterPos3s$MH,"glRasterPos3s");
    }
    public static void glRasterPos3s ( short x,  short y,  short z) {
        var mh$ = glRasterPos3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4d$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4d$MH,"glRasterPos4d");
    }
    public static void glRasterPos4d ( double x,  double y,  double z,  double w) {
        var mh$ = glRasterPos4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4f$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4f$MH,"glRasterPos4f");
    }
    public static void glRasterPos4f ( float x,  float y,  float z,  float w) {
        var mh$ = glRasterPos4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4i$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4i$MH,"glRasterPos4i");
    }
    public static void glRasterPos4i ( int x,  int y,  int z,  int w) {
        var mh$ = glRasterPos4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4s$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos4s$MH,"glRasterPos4s");
    }
    public static void glRasterPos4s ( short x,  short y,  short z,  short w) {
        var mh$ = glRasterPos4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2dv$MH,"glRasterPos2dv");
    }
    public static void glRasterPos2dv ( Addressable v) {
        var mh$ = glRasterPos2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glRasterPos2fv$MH,"glRasterPos2fv");
    }
    public static void glRasterPos2fv ( Addressable v) {
        var mh$ = glRasterPos2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2iv$MH,"glRasterPos2iv");
    }
    public static void glRasterPos2iv ( Addressable v) {
        var mh$ = glRasterPos2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos2sv$MH,"glRasterPos2sv");
    }
    public static void glRasterPos2sv ( Addressable v) {
        var mh$ = glRasterPos2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = glRasterPos3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = glRasterPos3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = glRasterPos3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = glRasterPos3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = glRasterPos4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = glRasterPos4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = glRasterPos4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = glRasterPos4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = glRectd$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = glRectf$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = glRecti$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = glRects$MH();
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectdv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectfv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectiv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = glRectsv$MH();
        try {
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glVertexPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = glNormalPointer$MH();
        try {
            mh$.invokeExact(type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = glTexCoordPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable ptr) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = glInterleavedArrays$MH();
        try {
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = glShadeModel$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = glLightf$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = glLighti$MH();
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = glLightModelf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = glLightModeli$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = glLightModelfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = glLightModeliv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = glMaterialf$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = glMateriali$MH();
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = glPixelZoom$MH();
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = glPixelStoref$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = glPixelStorei$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = glPixelTransferf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = glPixelTransferi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapfv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = glPixelMapusv$MH();
        try {
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glReadPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = glStencilFunc$MH();
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = glStencilMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = glStencilOp$MH();
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = glTexGend$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = glTexGenf$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = glTexGeni$MH();
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = glTexEnvf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = glTexEnvi$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = glTexParameterf$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = glTexParameteri$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalFormat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalFormat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = glPrioritizeTextures$MH();
        try {
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = glIsTexture$MH();
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1d$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMap1f$MH();
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2d$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMap2f$MH();
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = glMapGrid1d$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = glMapGrid1f$MH();
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = glMapGrid2d$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = glMapGrid2f$MH();
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = glPassThrough$MH();
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = glSelectBuffer$MH();
        try {
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = glInitNames$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = glLoadName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = glPushName$MH();
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = glPopName$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElements$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glDrawRangeElements$MH,"glDrawRangeElements");
    }
    public static void glDrawRangeElements ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElements$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexImage3D$MH,"glTexImage3D");
    }
    public static void glTexImage3D ( int target,  int level,  int internalFormat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexImage3D$MH();
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexSubImage3D$MH,"glTexSubImage3D");
    }
    public static void glTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = glTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glCopyTexSubImage3D$MH,"glCopyTexSubImage3D");
    }
    public static void glCopyTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTable$MH,"glColorTable");
    }
    public static void glColorTable ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = glColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorSubTable$MH,"glColorSubTable");
    }
    public static void glColorSubTable ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = glColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, count, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameteriv$MH,"glColorTableParameteriv");
    }
    public static void glColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glColorTableParameterfv$MH,"glColorTableParameterfv");
    }
    public static void glColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorSubTable$MH,"glCopyColorSubTable");
    }
    public static void glCopyColorSubTable ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = glCopyColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glCopyColorTable$MH,"glCopyColorTable");
    }
    public static void glCopyColorTable ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTable$MH,"glGetColorTable");
    }
    public static void glGetColorTable ( int target,  int format,  int type,  Addressable table) {
        var mh$ = glGetColorTable$MH();
        try {
            mh$.invokeExact(target, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameterfv$MH,"glGetColorTableParameterfv");
    }
    public static void glGetColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGetColorTableParameteriv$MH,"glGetColorTableParameteriv");
    }
    public static void glGetColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquation$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendEquation$MH,"glBlendEquation");
    }
    public static void glBlendEquation ( int mode) {
        var mh$ = glBlendEquation$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColor$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glBlendColor$MH,"glBlendColor");
    }
    public static void glBlendColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glHistogram$MH,"glHistogram");
    }
    public static void glHistogram ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = glHistogram$MH();
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetHistogram$MH,"glResetHistogram");
    }
    public static void glResetHistogram ( int target) {
        var mh$ = glResetHistogram$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogram$MH,"glGetHistogram");
    }
    public static void glGetHistogram ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetHistogram$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameterfv$MH,"glGetHistogramParameterfv");
    }
    public static void glGetHistogramParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glGetHistogramParameteriv$MH,"glGetHistogramParameteriv");
    }
    public static void glGetHistogramParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glMinmax$MH,"glMinmax");
    }
    public static void glMinmax ( int target,  int internalformat,  byte sink) {
        var mh$ = glMinmax$MH();
        try {
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glResetMinmax$MH,"glResetMinmax");
    }
    public static void glResetMinmax ( int target) {
        var mh$ = glResetMinmax$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmax$MH,"glGetMinmax");
    }
    public static void glGetMinmax ( int target,  byte reset,  int format,  int types,  Addressable values) {
        var mh$ = glGetMinmax$MH();
        try {
            mh$.invokeExact(target, reset, format, types, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameterfv$MH,"glGetMinmaxParameterfv");
    }
    public static void glGetMinmaxParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glGetMinmaxParameteriv$MH,"glGetMinmaxParameteriv");
    }
    public static void glGetMinmaxParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter1D$MH,"glConvolutionFilter1D");
    }
    public static void glConvolutionFilter1D ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionFilter2D$MH,"glConvolutionFilter2D");
    }
    public static void glConvolutionFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glConvolutionParameterf$MH,"glConvolutionParameterf");
    }
    public static void glConvolutionParameterf ( int target,  int pname,  float params) {
        var mh$ = glConvolutionParameterf$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameterfv$MH,"glConvolutionParameterfv");
    }
    public static void glConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteri$MH,"glConvolutionParameteri");
    }
    public static void glConvolutionParameteri ( int target,  int pname,  int params) {
        var mh$ = glConvolutionParameteri$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glConvolutionParameteriv$MH,"glConvolutionParameteriv");
    }
    public static void glConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter1D$MH,"glCopyConvolutionFilter1D");
    }
    public static void glCopyConvolutionFilter1D ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glCopyConvolutionFilter2D$MH,"glCopyConvolutionFilter2D");
    }
    public static void glCopyConvolutionFilter2D ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetConvolutionFilter$MH,"glGetConvolutionFilter");
    }
    public static void glGetConvolutionFilter ( int target,  int format,  int type,  Addressable image) {
        var mh$ = glGetConvolutionFilter$MH();
        try {
            mh$.invokeExact(target, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameterfv$MH,"glGetConvolutionParameterfv");
    }
    public static void glGetConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetConvolutionParameteriv$MH,"glGetConvolutionParameteriv");
    }
    public static void glGetConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSeparableFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glSeparableFilter2D$MH,"glSeparableFilter2D");
    }
    public static void glSeparableFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable row,  Addressable column) {
        var mh$ = glSeparableFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, row, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGetSeparableFilter$MH,"glGetSeparableFilter");
    }
    public static void glGetSeparableFilter ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = glGetSeparableFilter$MH();
        try {
            mh$.invokeExact(target, format, type, row, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glActiveTexture$MH,"glActiveTexture");
    }
    public static void glActiveTexture ( int texture) {
        var mh$ = glActiveTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glClientActiveTexture$MH,"glClientActiveTexture");
    }
    public static void glClientActiveTexture ( int texture) {
        var mh$ = glClientActiveTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage1D$MH,"glCompressedTexImage1D");
    }
    public static void glCompressedTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage2D$MH,"glCompressedTexImage2D");
    }
    public static void glCompressedTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexImage3D$MH,"glCompressedTexImage3D");
    }
    public static void glCompressedTexImage3D ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage3D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage1D$MH,"glCompressedTexSubImage1D");
    }
    public static void glCompressedTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage2D$MH,"glCompressedTexSubImage2D");
    }
    public static void glCompressedTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glCompressedTexSubImage3D$MH,"glCompressedTexSubImage3D");
    }
    public static void glCompressedTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glGetCompressedTexImage$MH,"glGetCompressedTexImage");
    }
    public static void glGetCompressedTexImage ( int target,  int lod,  Addressable img) {
        var mh$ = glGetCompressedTexImage$MH();
        try {
            mh$.invokeExact(target, lod, img);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1d$MH,"glMultiTexCoord1d");
    }
    public static void glMultiTexCoord1d ( int target,  double s) {
        var mh$ = glMultiTexCoord1d$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1dv$MH,"glMultiTexCoord1dv");
    }
    public static void glMultiTexCoord1dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1f$MH,"glMultiTexCoord1f");
    }
    public static void glMultiTexCoord1f ( int target,  float s) {
        var mh$ = glMultiTexCoord1f$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1fv$MH,"glMultiTexCoord1fv");
    }
    public static void glMultiTexCoord1fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMultiTexCoord1i$MH,"glMultiTexCoord1i");
    }
    public static void glMultiTexCoord1i ( int target,  int s) {
        var mh$ = glMultiTexCoord1i$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1iv$MH,"glMultiTexCoord1iv");
    }
    public static void glMultiTexCoord1iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1s$MH,"glMultiTexCoord1s");
    }
    public static void glMultiTexCoord1s ( int target,  short s) {
        var mh$ = glMultiTexCoord1s$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord1sv$MH,"glMultiTexCoord1sv");
    }
    public static void glMultiTexCoord1sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2d$MH,"glMultiTexCoord2d");
    }
    public static void glMultiTexCoord2d ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2d$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2dv$MH,"glMultiTexCoord2dv");
    }
    public static void glMultiTexCoord2dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glMultiTexCoord2f$MH,"glMultiTexCoord2f");
    }
    public static void glMultiTexCoord2f ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2f$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2fv$MH,"glMultiTexCoord2fv");
    }
    public static void glMultiTexCoord2fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2i$MH,"glMultiTexCoord2i");
    }
    public static void glMultiTexCoord2i ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2i$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2iv$MH,"glMultiTexCoord2iv");
    }
    public static void glMultiTexCoord2iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2s$MH,"glMultiTexCoord2s");
    }
    public static void glMultiTexCoord2s ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2s$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord2sv$MH,"glMultiTexCoord2sv");
    }
    public static void glMultiTexCoord2sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glMultiTexCoord3d$MH,"glMultiTexCoord3d");
    }
    public static void glMultiTexCoord3d ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3d$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3dv$MH,"glMultiTexCoord3dv");
    }
    public static void glMultiTexCoord3dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3f$MH,"glMultiTexCoord3f");
    }
    public static void glMultiTexCoord3f ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3f$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3fv$MH,"glMultiTexCoord3fv");
    }
    public static void glMultiTexCoord3fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3i$MH,"glMultiTexCoord3i");
    }
    public static void glMultiTexCoord3i ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3i$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3iv$MH,"glMultiTexCoord3iv");
    }
    public static void glMultiTexCoord3iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glMultiTexCoord3s$MH,"glMultiTexCoord3s");
    }
    public static void glMultiTexCoord3s ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3s$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord3sv$MH,"glMultiTexCoord3sv");
    }
    public static void glMultiTexCoord3sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4d$MH,"glMultiTexCoord4d");
    }
    public static void glMultiTexCoord4d ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4d$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4dv$MH,"glMultiTexCoord4dv");
    }
    public static void glMultiTexCoord4dv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4f$MH,"glMultiTexCoord4f");
    }
    public static void glMultiTexCoord4f ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4f$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4fv$MH,"glMultiTexCoord4fv");
    }
    public static void glMultiTexCoord4fv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glMultiTexCoord4i$MH,"glMultiTexCoord4i");
    }
    public static void glMultiTexCoord4i ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4i$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4iv$MH,"glMultiTexCoord4iv");
    }
    public static void glMultiTexCoord4iv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4iv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4s$MH,"glMultiTexCoord4s");
    }
    public static void glMultiTexCoord4s ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4s$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultiTexCoord4sv$MH,"glMultiTexCoord4sv");
    }
    public static void glMultiTexCoord4sv ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4sv$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixd$MH,"glLoadTransposeMatrixd");
    }
    public static void glLoadTransposeMatrixd ( Addressable m) {
        var mh$ = glLoadTransposeMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glLoadTransposeMatrixf$MH,"glLoadTransposeMatrixf");
    }
    public static void glLoadTransposeMatrixf ( Addressable m) {
        var mh$ = glLoadTransposeMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glMultTransposeMatrixd$MH,"glMultTransposeMatrixd");
    }
    public static void glMultTransposeMatrixd ( Addressable m) {
        var mh$ = glMultTransposeMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glMultTransposeMatrixf$MH,"glMultTransposeMatrixf");
    }
    public static void glMultTransposeMatrixf ( Addressable m) {
        var mh$ = glMultTransposeMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverage$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glSampleCoverage$MH,"glSampleCoverage");
    }
    public static void glSampleCoverage ( float value,  byte invert) {
        var mh$ = glSampleCoverage$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = glActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = glClientActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = glMultiTexCoord1dARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = glMultiTexCoord1fARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = glMultiTexCoord1iARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = glMultiTexCoord1sARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2dARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2fARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2iARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2sARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt khronos_int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong khronos_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort khronos_int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfLong khronos_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong khronos_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat khronos_float_t = Constants$root.C_FLOAT$LAYOUT;
    public static OfLong khronos_stime_nanoseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int KHRONOS_FALSE() {
        return (int)0L;
    }
    public static int KHRONOS_TRUE() {
        return (int)1L;
    }
    public static int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE() {
        return (int)2147483647L;
    }
    public static OfLong GLsizeiptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfByte GLchar = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress GLsync = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfByte GLcharARB = Constants$root.C_CHAR$LAYOUT;
    public static OfLong GLsizeiptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt GLfixed = Constants$root.C_INT$LAYOUT;
    public static OfLong GLint64EXT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress GLeglImageOES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GLeglClientBufferEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLvdpauSurfaceNV = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$928.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int modeRGB,  int modeA) {
        var mh$ = glBlendEquationSeparateATI$MH();
        try {
            mh$.invokeExact(modeRGB, modeA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluBeginCurve$MH,"gluBeginCurve");
    }
    public static void gluBeginCurve ( Addressable nurb) {
        var mh$ = gluBeginCurve$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluBeginPolygon$MH,"gluBeginPolygon");
    }
    public static void gluBeginPolygon ( Addressable tess) {
        var mh$ = gluBeginPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluBeginSurface$MH,"gluBeginSurface");
    }
    public static void gluBeginSurface ( Addressable nurb) {
        var mh$ = gluBeginSurface$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBeginTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluBeginTrim$MH,"gluBeginTrim");
    }
    public static void gluBeginTrim ( Addressable nurb) {
        var mh$ = gluBeginTrim$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$930.gluBuild1DMipmapLevels$MH,"gluBuild1DMipmapLevels");
    }
    public static int gluBuild1DMipmapLevels ( int target,  int internalFormat,  int width,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild1DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild1DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluBuild1DMipmaps$MH,"gluBuild1DMipmaps");
    }
    public static int gluBuild1DMipmaps ( int target,  int internalFormat,  int width,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild1DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluBuild2DMipmapLevels$MH,"gluBuild2DMipmapLevels");
    }
    public static int gluBuild2DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild2DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild2DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluBuild2DMipmaps$MH,"gluBuild2DMipmaps");
    }
    public static int gluBuild2DMipmaps ( int target,  int internalFormat,  int width,  int height,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild2DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmapLevels$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluBuild3DMipmapLevels$MH,"gluBuild3DMipmapLevels");
    }
    public static int gluBuild3DMipmapLevels ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  int level,  int base,  int max,  Addressable data) {
        var mh$ = gluBuild3DMipmapLevels$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, level, base, max, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluBuild3DMipmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluBuild3DMipmaps$MH,"gluBuild3DMipmaps");
    }
    public static int gluBuild3DMipmaps ( int target,  int internalFormat,  int width,  int height,  int depth,  int format,  int type,  Addressable data) {
        var mh$ = gluBuild3DMipmaps$MH();
        try {
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCheckExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$931.gluCheckExtension$MH,"gluCheckExtension");
    }
    public static byte gluCheckExtension ( Addressable extName,  Addressable extString) {
        var mh$ = gluCheckExtension$MH();
        try {
            return (byte)mh$.invokeExact(extName, extString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluCylinder$MH,"gluCylinder");
    }
    public static void gluCylinder ( Addressable quad,  double base,  double top,  double height,  int slices,  int stacks) {
        var mh$ = gluCylinder$MH();
        try {
            mh$.invokeExact(quad, base, top, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluDeleteNurbsRenderer$MH,"gluDeleteNurbsRenderer");
    }
    public static void gluDeleteNurbsRenderer ( Addressable nurb) {
        var mh$ = gluDeleteNurbsRenderer$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluDeleteQuadric$MH,"gluDeleteQuadric");
    }
    public static void gluDeleteQuadric ( Addressable quad) {
        var mh$ = gluDeleteQuadric$MH();
        try {
            mh$.invokeExact(quad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDeleteTess$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluDeleteTess$MH,"gluDeleteTess");
    }
    public static void gluDeleteTess ( Addressable tess) {
        var mh$ = gluDeleteTess$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluDisk$MH,"gluDisk");
    }
    public static void gluDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops) {
        var mh$ = gluDisk$MH();
        try {
            mh$.invokeExact(quad, inner, outer, slices, loops);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$932.gluEndCurve$MH,"gluEndCurve");
    }
    public static void gluEndCurve ( Addressable nurb) {
        var mh$ = gluEndCurve$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluEndPolygon$MH,"gluEndPolygon");
    }
    public static void gluEndPolygon ( Addressable tess) {
        var mh$ = gluEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluEndSurface$MH,"gluEndSurface");
    }
    public static void gluEndSurface ( Addressable nurb) {
        var mh$ = gluEndSurface$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluEndTrim$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluEndTrim$MH,"gluEndTrim");
    }
    public static void gluEndTrim ( Addressable nurb) {
        var mh$ = gluEndTrim$MH();
        try {
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluErrorString$MH,"gluErrorString");
    }
    public static MemoryAddress gluErrorString ( int error) {
        var mh$ = gluErrorString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluGetNurbsProperty$MH,"gluGetNurbsProperty");
    }
    public static void gluGetNurbsProperty ( Addressable nurb,  int property,  Addressable data) {
        var mh$ = gluGetNurbsProperty$MH();
        try {
            mh$.invokeExact(nurb, property, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$933.gluGetString$MH,"gluGetString");
    }
    public static MemoryAddress gluGetString ( int name) {
        var mh$ = gluGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluGetTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluGetTessProperty$MH,"gluGetTessProperty");
    }
    public static void gluGetTessProperty ( Addressable tess,  int which,  Addressable data) {
        var mh$ = gluGetTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLoadSamplingMatrices$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluLoadSamplingMatrices$MH,"gluLoadSamplingMatrices");
    }
    public static void gluLoadSamplingMatrices ( Addressable nurb,  Addressable model,  Addressable perspective,  Addressable view) {
        var mh$ = gluLoadSamplingMatrices$MH();
        try {
            mh$.invokeExact(nurb, model, perspective, view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluLookAt$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluLookAt$MH,"gluLookAt");
    }
    public static void gluLookAt ( double eyeX,  double eyeY,  double eyeZ,  double centerX,  double centerY,  double centerZ,  double upX,  double upY,  double upZ) {
        var mh$ = gluLookAt$MH();
        try {
            mh$.invokeExact(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewNurbsRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluNewNurbsRenderer$MH,"gluNewNurbsRenderer");
    }
    public static MemoryAddress gluNewNurbsRenderer () {
        var mh$ = gluNewNurbsRenderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewQuadric$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluNewQuadric$MH,"gluNewQuadric");
    }
    public static MemoryAddress gluNewQuadric () {
        var mh$ = gluNewQuadric$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNewTess$MH() {
        return RuntimeHelper.requireNonNull(constants$934.gluNewTess$MH,"gluNewTess");
    }
    public static MemoryAddress gluNewTess () {
        var mh$ = gluNewTess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNextContour$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNextContour$MH,"gluNextContour");
    }
    public static void gluNextContour ( Addressable tess,  int type) {
        var mh$ = gluNextContour$MH();
        try {
            mh$.invokeExact(tess, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNurbsCallback$MH,"gluNurbsCallback");
    }
    public static void gluNurbsCallback ( Addressable nurb,  int which,  Addressable CallBackFunc) {
        var mh$ = gluNurbsCallback$MH();
        try {
            mh$.invokeExact(nurb, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackData$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNurbsCallbackData$MH,"gluNurbsCallbackData");
    }
    public static void gluNurbsCallbackData ( Addressable nurb,  Addressable userData) {
        var mh$ = gluNurbsCallbackData$MH();
        try {
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCallbackDataEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNurbsCallbackDataEXT$MH,"gluNurbsCallbackDataEXT");
    }
    public static void gluNurbsCallbackDataEXT ( Addressable nurb,  Addressable userData) {
        var mh$ = gluNurbsCallbackDataEXT$MH();
        try {
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNurbsCurve$MH,"gluNurbsCurve");
    }
    public static void gluNurbsCurve ( Addressable nurb,  int knotCount,  Addressable knots,  int stride,  Addressable control,  int order,  int type) {
        var mh$ = gluNurbsCurve$MH();
        try {
            mh$.invokeExact(nurb, knotCount, knots, stride, control, order, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$935.gluNurbsProperty$MH,"gluNurbsProperty");
    }
    public static void gluNurbsProperty ( Addressable nurb,  int property,  float value) {
        var mh$ = gluNurbsProperty$MH();
        try {
            mh$.invokeExact(nurb, property, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluNurbsSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluNurbsSurface$MH,"gluNurbsSurface");
    }
    public static void gluNurbsSurface ( Addressable nurb,  int sKnotCount,  Addressable sKnots,  int tKnotCount,  Addressable tKnots,  int sStride,  int tStride,  Addressable control,  int sOrder,  int tOrder,  int type) {
        var mh$ = gluNurbsSurface$MH();
        try {
            mh$.invokeExact(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluOrtho2D$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluOrtho2D$MH,"gluOrtho2D");
    }
    public static void gluOrtho2D ( double left,  double right,  double bottom,  double top) {
        var mh$ = gluOrtho2D$MH();
        try {
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPartialDisk$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluPartialDisk$MH,"gluPartialDisk");
    }
    public static void gluPartialDisk ( Addressable quad,  double inner,  double outer,  int slices,  int loops,  double start,  double sweep) {
        var mh$ = gluPartialDisk$MH();
        try {
            mh$.invokeExact(quad, inner, outer, slices, loops, start, sweep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPerspective$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluPerspective$MH,"gluPerspective");
    }
    public static void gluPerspective ( double fovy,  double aspect,  double zNear,  double zFar) {
        var mh$ = gluPerspective$MH();
        try {
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPickMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluPickMatrix$MH,"gluPickMatrix");
    }
    public static void gluPickMatrix ( double x,  double y,  double delX,  double delY,  Addressable viewport) {
        var mh$ = gluPickMatrix$MH();
        try {
            mh$.invokeExact(x, y, delX, delY, viewport);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluProject$MH() {
        return RuntimeHelper.requireNonNull(constants$936.gluProject$MH,"gluProject");
    }
    public static int gluProject ( double objX,  double objY,  double objZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable winX,  Addressable winY,  Addressable winZ) {
        var mh$ = gluProject$MH();
        try {
            return (int)mh$.invokeExact(objX, objY, objZ, model, proj, view, winX, winY, winZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluPwlCurve$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluPwlCurve$MH,"gluPwlCurve");
    }
    public static void gluPwlCurve ( Addressable nurb,  int count,  Addressable data,  int stride,  int type) {
        var mh$ = gluPwlCurve$MH();
        try {
            mh$.invokeExact(nurb, count, data, stride, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluQuadricCallback$MH,"gluQuadricCallback");
    }
    public static void gluQuadricCallback ( Addressable quad,  int which,  Addressable CallBackFunc) {
        var mh$ = gluQuadricCallback$MH();
        try {
            mh$.invokeExact(quad, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricDrawStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluQuadricDrawStyle$MH,"gluQuadricDrawStyle");
    }
    public static void gluQuadricDrawStyle ( Addressable quad,  int draw) {
        var mh$ = gluQuadricDrawStyle$MH();
        try {
            mh$.invokeExact(quad, draw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluQuadricNormals$MH,"gluQuadricNormals");
    }
    public static void gluQuadricNormals ( Addressable quad,  int normal) {
        var mh$ = gluQuadricNormals$MH();
        try {
            mh$.invokeExact(quad, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluQuadricOrientation$MH,"gluQuadricOrientation");
    }
    public static void gluQuadricOrientation ( Addressable quad,  int orientation) {
        var mh$ = gluQuadricOrientation$MH();
        try {
            mh$.invokeExact(quad, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluQuadricTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$937.gluQuadricTexture$MH,"gluQuadricTexture");
    }
    public static void gluQuadricTexture ( Addressable quad,  byte texture) {
        var mh$ = gluQuadricTexture$MH();
        try {
            mh$.invokeExact(quad, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluScaleImage$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluScaleImage$MH,"gluScaleImage");
    }
    public static int gluScaleImage ( int format,  int wIn,  int hIn,  int typeIn,  Addressable dataIn,  int wOut,  int hOut,  int typeOut,  Addressable dataOut) {
        var mh$ = gluScaleImage$MH();
        try {
            return (int)mh$.invokeExact(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluSphere$MH,"gluSphere");
    }
    public static void gluSphere ( Addressable quad,  double radius,  int slices,  int stacks) {
        var mh$ = gluSphere$MH();
        try {
            mh$.invokeExact(quad, radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginContour$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluTessBeginContour$MH,"gluTessBeginContour");
    }
    public static void gluTessBeginContour ( Addressable tess) {
        var mh$ = gluTessBeginContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessBeginPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluTessBeginPolygon$MH,"gluTessBeginPolygon");
    }
    public static void gluTessBeginPolygon ( Addressable tess,  Addressable data) {
        var mh$ = gluTessBeginPolygon$MH();
        try {
            mh$.invokeExact(tess, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluTessCallback$MH,"gluTessCallback");
    }
    public static void gluTessCallback ( Addressable tess,  int which,  Addressable CallBackFunc) {
        var mh$ = gluTessCallback$MH();
        try {
            mh$.invokeExact(tess, which, CallBackFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndContour$MH() {
        return RuntimeHelper.requireNonNull(constants$938.gluTessEndContour$MH,"gluTessEndContour");
    }
    public static void gluTessEndContour ( Addressable tess) {
        var mh$ = gluTessEndContour$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessEndPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluTessEndPolygon$MH,"gluTessEndPolygon");
    }
    public static void gluTessEndPolygon ( Addressable tess) {
        var mh$ = gluTessEndPolygon$MH();
        try {
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluTessNormal$MH,"gluTessNormal");
    }
    public static void gluTessNormal ( Addressable tess,  double valueX,  double valueY,  double valueZ) {
        var mh$ = gluTessNormal$MH();
        try {
            mh$.invokeExact(tess, valueX, valueY, valueZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluTessProperty$MH,"gluTessProperty");
    }
    public static void gluTessProperty ( Addressable tess,  int which,  double data) {
        var mh$ = gluTessProperty$MH();
        try {
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluTessVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluTessVertex$MH,"gluTessVertex");
    }
    public static void gluTessVertex ( Addressable tess,  Addressable location,  Addressable data) {
        var mh$ = gluTessVertex$MH();
        try {
            mh$.invokeExact(tess, location, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluUnProject$MH,"gluUnProject");
    }
    public static int gluUnProject ( double winX,  double winY,  double winZ,  Addressable model,  Addressable proj,  Addressable view,  Addressable objX,  Addressable objY,  Addressable objZ) {
        var mh$ = gluUnProject$MH();
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, model, proj, view, objX, objY, objZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gluUnProject4$MH() {
        return RuntimeHelper.requireNonNull(constants$939.gluUnProject4$MH,"gluUnProject4");
    }
    public static int gluUnProject4 ( double winX,  double winY,  double winZ,  double clipW,  Addressable model,  Addressable proj,  Addressable view,  double nearVal,  double farVal,  Addressable objX,  Addressable objY,  Addressable objZ,  Addressable objW) {
        var mh$ = gluUnProject4$MH();
        try {
            return (int)mh$.invokeExact(winX, winY, winZ, clipW, model, proj, view, nearVal, farVal, objX, objY, objZ, objW);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout glutStrokeRoman$LAYOUT() {
        return constants$940.glutStrokeRoman$LAYOUT;
    }
    public static VarHandle glutStrokeRoman$VH() {
        return constants$940.glutStrokeRoman$VH;
    }
    public static MemorySegment glutStrokeRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutStrokeRoman$SEGMENT,"glutStrokeRoman");
    }
    public static MemoryAddress glutStrokeRoman$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutStrokeRoman$VH.get(RuntimeHelper.requireNonNull(constants$940.glutStrokeRoman$SEGMENT, "glutStrokeRoman"));
    }
    public static void glutStrokeRoman$set( MemoryAddress x) {
        constants$940.glutStrokeRoman$VH.set(RuntimeHelper.requireNonNull(constants$940.glutStrokeRoman$SEGMENT, "glutStrokeRoman"), x);
    }
    public static MemoryLayout glutStrokeMonoRoman$LAYOUT() {
        return constants$940.glutStrokeMonoRoman$LAYOUT;
    }
    public static VarHandle glutStrokeMonoRoman$VH() {
        return constants$940.glutStrokeMonoRoman$VH;
    }
    public static MemorySegment glutStrokeMonoRoman$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutStrokeMonoRoman$SEGMENT,"glutStrokeMonoRoman");
    }
    public static MemoryAddress glutStrokeMonoRoman$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutStrokeMonoRoman$VH.get(RuntimeHelper.requireNonNull(constants$940.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"));
    }
    public static void glutStrokeMonoRoman$set( MemoryAddress x) {
        constants$940.glutStrokeMonoRoman$VH.set(RuntimeHelper.requireNonNull(constants$940.glutStrokeMonoRoman$SEGMENT, "glutStrokeMonoRoman"), x);
    }
    public static MemoryLayout glutBitmap9By15$LAYOUT() {
        return constants$940.glutBitmap9By15$LAYOUT;
    }
    public static VarHandle glutBitmap9By15$VH() {
        return constants$940.glutBitmap9By15$VH;
    }
    public static MemorySegment glutBitmap9By15$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutBitmap9By15$SEGMENT,"glutBitmap9By15");
    }
    public static MemoryAddress glutBitmap9By15$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutBitmap9By15$VH.get(RuntimeHelper.requireNonNull(constants$940.glutBitmap9By15$SEGMENT, "glutBitmap9By15"));
    }
    public static void glutBitmap9By15$set( MemoryAddress x) {
        constants$940.glutBitmap9By15$VH.set(RuntimeHelper.requireNonNull(constants$940.glutBitmap9By15$SEGMENT, "glutBitmap9By15"), x);
    }
    public static MemoryLayout glutBitmap8By13$LAYOUT() {
        return constants$940.glutBitmap8By13$LAYOUT;
    }
    public static VarHandle glutBitmap8By13$VH() {
        return constants$940.glutBitmap8By13$VH;
    }
    public static MemorySegment glutBitmap8By13$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutBitmap8By13$SEGMENT,"glutBitmap8By13");
    }
    public static MemoryAddress glutBitmap8By13$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutBitmap8By13$VH.get(RuntimeHelper.requireNonNull(constants$940.glutBitmap8By13$SEGMENT, "glutBitmap8By13"));
    }
    public static void glutBitmap8By13$set( MemoryAddress x) {
        constants$940.glutBitmap8By13$VH.set(RuntimeHelper.requireNonNull(constants$940.glutBitmap8By13$SEGMENT, "glutBitmap8By13"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman10$LAYOUT() {
        return constants$940.glutBitmapTimesRoman10$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman10$VH() {
        return constants$940.glutBitmapTimesRoman10$VH;
    }
    public static MemorySegment glutBitmapTimesRoman10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman10$SEGMENT,"glutBitmapTimesRoman10");
    }
    public static MemoryAddress glutBitmapTimesRoman10$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutBitmapTimesRoman10$VH.get(RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"));
    }
    public static void glutBitmapTimesRoman10$set( MemoryAddress x) {
        constants$940.glutBitmapTimesRoman10$VH.set(RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman10$SEGMENT, "glutBitmapTimesRoman10"), x);
    }
    public static MemoryLayout glutBitmapTimesRoman24$LAYOUT() {
        return constants$940.glutBitmapTimesRoman24$LAYOUT;
    }
    public static VarHandle glutBitmapTimesRoman24$VH() {
        return constants$940.glutBitmapTimesRoman24$VH;
    }
    public static MemorySegment glutBitmapTimesRoman24$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman24$SEGMENT,"glutBitmapTimesRoman24");
    }
    public static MemoryAddress glutBitmapTimesRoman24$get() {
        return (java.lang.foreign.MemoryAddress) constants$940.glutBitmapTimesRoman24$VH.get(RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"));
    }
    public static void glutBitmapTimesRoman24$set( MemoryAddress x) {
        constants$940.glutBitmapTimesRoman24$VH.set(RuntimeHelper.requireNonNull(constants$940.glutBitmapTimesRoman24$SEGMENT, "glutBitmapTimesRoman24"), x);
    }
    public static MemoryLayout glutBitmapHelvetica10$LAYOUT() {
        return constants$941.glutBitmapHelvetica10$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica10$VH() {
        return constants$941.glutBitmapHelvetica10$VH;
    }
    public static MemorySegment glutBitmapHelvetica10$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica10$SEGMENT,"glutBitmapHelvetica10");
    }
    public static MemoryAddress glutBitmapHelvetica10$get() {
        return (java.lang.foreign.MemoryAddress) constants$941.glutBitmapHelvetica10$VH.get(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"));
    }
    public static void glutBitmapHelvetica10$set( MemoryAddress x) {
        constants$941.glutBitmapHelvetica10$VH.set(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica10$SEGMENT, "glutBitmapHelvetica10"), x);
    }
    public static MemoryLayout glutBitmapHelvetica12$LAYOUT() {
        return constants$941.glutBitmapHelvetica12$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica12$VH() {
        return constants$941.glutBitmapHelvetica12$VH;
    }
    public static MemorySegment glutBitmapHelvetica12$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica12$SEGMENT,"glutBitmapHelvetica12");
    }
    public static MemoryAddress glutBitmapHelvetica12$get() {
        return (java.lang.foreign.MemoryAddress) constants$941.glutBitmapHelvetica12$VH.get(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"));
    }
    public static void glutBitmapHelvetica12$set( MemoryAddress x) {
        constants$941.glutBitmapHelvetica12$VH.set(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica12$SEGMENT, "glutBitmapHelvetica12"), x);
    }
    public static MemoryLayout glutBitmapHelvetica18$LAYOUT() {
        return constants$941.glutBitmapHelvetica18$LAYOUT;
    }
    public static VarHandle glutBitmapHelvetica18$VH() {
        return constants$941.glutBitmapHelvetica18$VH;
    }
    public static MemorySegment glutBitmapHelvetica18$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica18$SEGMENT,"glutBitmapHelvetica18");
    }
    public static MemoryAddress glutBitmapHelvetica18$get() {
        return (java.lang.foreign.MemoryAddress) constants$941.glutBitmapHelvetica18$VH.get(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"));
    }
    public static void glutBitmapHelvetica18$set( MemoryAddress x) {
        constants$941.glutBitmapHelvetica18$VH.set(RuntimeHelper.requireNonNull(constants$941.glutBitmapHelvetica18$SEGMENT, "glutBitmapHelvetica18"), x);
    }
    public static MethodHandle glutInit$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glutInit$MH,"glutInit");
    }
    public static void glutInit ( Addressable pargc,  Addressable argv) {
        var mh$ = glutInit$MH();
        try {
            mh$.invokeExact(pargc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glutInitWindowPosition$MH,"glutInitWindowPosition");
    }
    public static void glutInitWindowPosition ( int x,  int y) {
        var mh$ = glutInitWindowPosition$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$941.glutInitWindowSize$MH,"glutInitWindowSize");
    }
    public static void glutInitWindowSize ( int width,  int height) {
        var mh$ = glutInitWindowSize$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutInitDisplayMode$MH,"glutInitDisplayMode");
    }
    public static void glutInitDisplayMode ( int displayMode) {
        var mh$ = glutInitDisplayMode$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutInitDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutInitDisplayString$MH,"glutInitDisplayString");
    }
    public static void glutInitDisplayString ( Addressable displayMode) {
        var mh$ = glutInitDisplayString$MH();
        try {
            mh$.invokeExact(displayMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMainLoop$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutMainLoop$MH,"glutMainLoop");
    }
    public static void glutMainLoop () {
        var mh$ = glutMainLoop$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutCreateWindow$MH,"glutCreateWindow");
    }
    public static int glutCreateWindow ( Addressable title) {
        var mh$ = glutCreateWindow$MH();
        try {
            return (int)mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateSubWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutCreateSubWindow$MH,"glutCreateSubWindow");
    }
    public static int glutCreateSubWindow ( int window,  int x,  int y,  int width,  int height) {
        var mh$ = glutCreateSubWindow$MH();
        try {
            return (int)mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$942.glutDestroyWindow$MH,"glutDestroyWindow");
    }
    public static void glutDestroyWindow ( int window) {
        var mh$ = glutDestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutSetWindow$MH,"glutSetWindow");
    }
    public static void glutSetWindow ( int window) {
        var mh$ = glutSetWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutGetWindow$MH,"glutGetWindow");
    }
    public static int glutGetWindow () {
        var mh$ = glutGetWindow$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutSetWindowTitle$MH,"glutSetWindowTitle");
    }
    public static void glutSetWindowTitle ( Addressable title) {
        var mh$ = glutSetWindowTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetIconTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutSetIconTitle$MH,"glutSetIconTitle");
    }
    public static void glutSetIconTitle ( Addressable title) {
        var mh$ = glutSetIconTitle$MH();
        try {
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutReshapeWindow$MH,"glutReshapeWindow");
    }
    public static void glutReshapeWindow ( int width,  int height) {
        var mh$ = glutReshapeWindow$MH();
        try {
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$943.glutPositionWindow$MH,"glutPositionWindow");
    }
    public static void glutPositionWindow ( int x,  int y) {
        var mh$ = glutPositionWindow$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutShowWindow$MH,"glutShowWindow");
    }
    public static void glutShowWindow () {
        var mh$ = glutShowWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutHideWindow$MH,"glutHideWindow");
    }
    public static void glutHideWindow () {
        var mh$ = glutHideWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutIconifyWindow$MH,"glutIconifyWindow");
    }
    public static void glutIconifyWindow () {
        var mh$ = glutIconifyWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPushWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutPushWindow$MH,"glutPushWindow");
    }
    public static void glutPushWindow () {
        var mh$ = glutPushWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutPopWindow$MH,"glutPopWindow");
    }
    public static void glutPopWindow () {
        var mh$ = glutPopWindow$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutFullScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$944.glutFullScreen$MH,"glutFullScreen");
    }
    public static void glutFullScreen () {
        var mh$ = glutFullScreen$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutPostWindowRedisplay$MH,"glutPostWindowRedisplay");
    }
    public static void glutPostWindowRedisplay ( int window) {
        var mh$ = glutPostWindowRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutPostRedisplay$MH,"glutPostRedisplay");
    }
    public static void glutPostRedisplay () {
        var mh$ = glutPostRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutSwapBuffers$MH,"glutSwapBuffers");
    }
    public static void glutSwapBuffers () {
        var mh$ = glutSwapBuffers$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutWarpPointer$MH,"glutWarpPointer");
    }
    public static void glutWarpPointer ( int x,  int y) {
        var mh$ = glutWarpPointer$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutSetCursor$MH,"glutSetCursor");
    }
    public static void glutSetCursor ( int cursor) {
        var mh$ = glutSetCursor$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEstablishOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$945.glutEstablishOverlay$MH,"glutEstablishOverlay");
    }
    public static void glutEstablishOverlay () {
        var mh$ = glutEstablishOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutRemoveOverlay$MH,"glutRemoveOverlay");
    }
    public static void glutRemoveOverlay () {
        var mh$ = glutRemoveOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutUseLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutUseLayer$MH,"glutUseLayer");
    }
    public static void glutUseLayer ( int layer) {
        var mh$ = glutUseLayer$MH();
        try {
            mh$.invokeExact(layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutPostOverlayRedisplay$MH,"glutPostOverlayRedisplay");
    }
    public static void glutPostOverlayRedisplay () {
        var mh$ = glutPostOverlayRedisplay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPostWindowOverlayRedisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutPostWindowOverlayRedisplay$MH,"glutPostWindowOverlayRedisplay");
    }
    public static void glutPostWindowOverlayRedisplay ( int window) {
        var mh$ = glutPostWindowOverlayRedisplay$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutShowOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutShowOverlay$MH,"glutShowOverlay");
    }
    public static void glutShowOverlay () {
        var mh$ = glutShowOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutHideOverlay$MH() {
        return RuntimeHelper.requireNonNull(constants$946.glutHideOverlay$MH,"glutHideOverlay");
    }
    public static void glutHideOverlay () {
        var mh$ = glutHideOverlay$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutCreateMenu$MH,"glutCreateMenu");
    }
    public static int glutCreateMenu ( Addressable callback) {
        var mh$ = glutCreateMenu$MH();
        try {
            return (int)mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutDestroyMenu$MH,"glutDestroyMenu");
    }
    public static void glutDestroyMenu ( int menu) {
        var mh$ = glutDestroyMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutGetMenu$MH,"glutGetMenu");
    }
    public static int glutGetMenu () {
        var mh$ = glutGetMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$947.glutSetMenu$MH,"glutSetMenu");
    }
    public static void glutSetMenu ( int menu) {
        var mh$ = glutSetMenu$MH();
        try {
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutAddMenuEntry$MH,"glutAddMenuEntry");
    }
    public static void glutAddMenuEntry ( Addressable label,  int value) {
        var mh$ = glutAddMenuEntry$MH();
        try {
            mh$.invokeExact(label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAddSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutAddSubMenu$MH,"glutAddSubMenu");
    }
    public static void glutAddSubMenu ( Addressable label,  int subMenu) {
        var mh$ = glutAddSubMenu$MH();
        try {
            mh$.invokeExact(label, subMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToMenuEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutChangeToMenuEntry$MH,"glutChangeToMenuEntry");
    }
    public static void glutChangeToMenuEntry ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToMenuEntry$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutChangeToSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutChangeToSubMenu$MH,"glutChangeToSubMenu");
    }
    public static void glutChangeToSubMenu ( int item,  Addressable label,  int value) {
        var mh$ = glutChangeToSubMenu$MH();
        try {
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutRemoveMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutRemoveMenuItem$MH,"glutRemoveMenuItem");
    }
    public static void glutRemoveMenuItem ( int item) {
        var mh$ = glutRemoveMenuItem$MH();
        try {
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutAttachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$948.glutAttachMenu$MH,"glutAttachMenu");
    }
    public static void glutAttachMenu ( int button) {
        var mh$ = glutAttachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDetachMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$949.glutDetachMenu$MH,"glutDetachMenu");
    }
    public static void glutDetachMenu ( int button) {
        var mh$ = glutDetachMenu$MH();
        try {
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTimerFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$949.glutTimerFunc$MH,"glutTimerFunc");
    }
    public static void glutTimerFunc ( int time,  Addressable callback,  int value) {
        var mh$ = glutTimerFunc$MH();
        try {
            mh$.invokeExact(time, callback, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIdleFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glutIdleFunc$MH,"glutIdleFunc");
    }
    public static void glutIdleFunc ( Addressable callback) {
        var mh$ = glutIdleFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$950.glutKeyboardFunc$MH,"glutKeyboardFunc");
    }
    public static void glutKeyboardFunc ( Addressable callback) {
        var mh$ = glutKeyboardFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glutSpecialFunc$MH,"glutSpecialFunc");
    }
    public static void glutSpecialFunc ( Addressable callback) {
        var mh$ = glutSpecialFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReshapeFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$951.glutReshapeFunc$MH,"glutReshapeFunc");
    }
    public static void glutReshapeFunc ( Addressable callback) {
        var mh$ = glutReshapeFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVisibilityFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutVisibilityFunc$MH,"glutVisibilityFunc");
    }
    public static void glutVisibilityFunc ( Addressable callback) {
        var mh$ = glutVisibilityFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$952.glutDisplayFunc$MH,"glutDisplayFunc");
    }
    public static void glutDisplayFunc ( Addressable callback) {
        var mh$ = glutDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMouseFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutMouseFunc$MH,"glutMouseFunc");
    }
    public static void glutMouseFunc ( Addressable callback) {
        var mh$ = glutMouseFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$953.glutMotionFunc$MH,"glutMotionFunc");
    }
    public static void glutMotionFunc ( Addressable callback) {
        var mh$ = glutMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutPassiveMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutPassiveMotionFunc$MH,"glutPassiveMotionFunc");
    }
    public static void glutPassiveMotionFunc ( Addressable callback) {
        var mh$ = glutPassiveMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEntryFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$954.glutEntryFunc$MH,"glutEntryFunc");
    }
    public static void glutEntryFunc ( Addressable callback) {
        var mh$ = glutEntryFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutKeyboardUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutKeyboardUpFunc$MH,"glutKeyboardUpFunc");
    }
    public static void glutKeyboardUpFunc ( Addressable callback) {
        var mh$ = glutKeyboardUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpecialUpFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$955.glutSpecialUpFunc$MH,"glutSpecialUpFunc");
    }
    public static void glutSpecialUpFunc ( Addressable callback) {
        var mh$ = glutSpecialUpFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutJoystickFunc$MH,"glutJoystickFunc");
    }
    public static void glutJoystickFunc ( Addressable callback,  int pollInterval) {
        var mh$ = glutJoystickFunc$MH();
        try {
            mh$.invokeExact(callback, pollInterval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$956.glutMenuStateFunc$MH,"glutMenuStateFunc");
    }
    public static void glutMenuStateFunc ( Addressable callback) {
        var mh$ = glutMenuStateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutMenuStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutMenuStatusFunc$MH,"glutMenuStatusFunc");
    }
    public static void glutMenuStatusFunc ( Addressable callback) {
        var mh$ = glutMenuStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutOverlayDisplayFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$957.glutOverlayDisplayFunc$MH,"glutOverlayDisplayFunc");
    }
    public static void glutOverlayDisplayFunc ( Addressable callback) {
        var mh$ = glutOverlayDisplayFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWindowStatusFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutWindowStatusFunc$MH,"glutWindowStatusFunc");
    }
    public static void glutWindowStatusFunc ( Addressable callback) {
        var mh$ = glutWindowStatusFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$958.glutSpaceballMotionFunc$MH,"glutSpaceballMotionFunc");
    }
    public static void glutSpaceballMotionFunc ( Addressable callback) {
        var mh$ = glutSpaceballMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballRotateFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$959.glutSpaceballRotateFunc$MH,"glutSpaceballRotateFunc");
    }
    public static void glutSpaceballRotateFunc ( Addressable callback) {
        var mh$ = glutSpaceballRotateFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSpaceballButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$959.glutSpaceballButtonFunc$MH,"glutSpaceballButtonFunc");
    }
    public static void glutSpaceballButtonFunc ( Addressable callback) {
        var mh$ = glutSpaceballButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutButtonBoxFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$960.glutButtonBoxFunc$MH,"glutButtonBoxFunc");
    }
    public static void glutButtonBoxFunc ( Addressable callback) {
        var mh$ = glutButtonBoxFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDialsFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$960.glutDialsFunc$MH,"glutDialsFunc");
    }
    public static void glutDialsFunc ( Addressable callback) {
        var mh$ = glutDialsFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletMotionFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glutTabletMotionFunc$MH,"glutTabletMotionFunc");
    }
    public static void glutTabletMotionFunc ( Addressable callback) {
        var mh$ = glutTabletMotionFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutTabletButtonFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glutTabletButtonFunc$MH,"glutTabletButtonFunc");
    }
    public static void glutTabletButtonFunc ( Addressable callback) {
        var mh$ = glutTabletButtonFunc$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGet$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glutGet$MH,"glutGet");
    }
    public static int glutGet ( int query) {
        var mh$ = glutGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutDeviceGet$MH() {
        return RuntimeHelper.requireNonNull(constants$961.glutDeviceGet$MH,"glutDeviceGet");
    }
    public static int glutDeviceGet ( int query) {
        var mh$ = glutDeviceGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutGetModifiers$MH,"glutGetModifiers");
    }
    public static int glutGetModifiers () {
        var mh$ = glutGetModifiers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLayerGet$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutLayerGet$MH,"glutLayerGet");
    }
    public static int glutLayerGet ( int query) {
        var mh$ = glutLayerGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutBitmapCharacter$MH,"glutBitmapCharacter");
    }
    public static void glutBitmapCharacter ( Addressable font,  int character) {
        var mh$ = glutBitmapCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutBitmapWidth$MH,"glutBitmapWidth");
    }
    public static int glutBitmapWidth ( Addressable font,  int character) {
        var mh$ = glutBitmapWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeCharacter$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutStrokeCharacter$MH,"glutStrokeCharacter");
    }
    public static void glutStrokeCharacter ( Addressable font,  int character) {
        var mh$ = glutStrokeCharacter$MH();
        try {
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$962.glutStrokeWidth$MH,"glutStrokeWidth");
    }
    public static int glutStrokeWidth ( Addressable font,  int character) {
        var mh$ = glutStrokeWidth$MH();
        try {
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutBitmapLength$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutBitmapLength$MH,"glutBitmapLength");
    }
    public static int glutBitmapLength ( Addressable font,  Addressable string) {
        var mh$ = glutBitmapLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStrokeLength$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutStrokeLength$MH,"glutStrokeLength");
    }
    public static int glutStrokeLength ( Addressable font,  Addressable string) {
        var mh$ = glutStrokeLength$MH();
        try {
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCube$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutWireCube$MH,"glutWireCube");
    }
    public static void glutWireCube ( double size) {
        var mh$ = glutWireCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCube$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutSolidCube$MH,"glutSolidCube");
    }
    public static void glutSolidCube ( double size) {
        var mh$ = glutSolidCube$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutWireSphere$MH,"glutWireSphere");
    }
    public static void glutWireSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutWireSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$963.glutSolidSphere$MH,"glutSolidSphere");
    }
    public static void glutSolidSphere ( double radius,  int slices,  int stacks) {
        var mh$ = glutSolidSphere$MH();
        try {
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireCone$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutWireCone$MH,"glutWireCone");
    }
    public static void glutWireCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutWireCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidCone$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutSolidCone$MH,"glutSolidCone");
    }
    public static void glutSolidCone ( double base,  double height,  int slices,  int stacks) {
        var mh$ = glutSolidCone$MH();
        try {
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutWireTorus$MH,"glutWireTorus");
    }
    public static void glutWireTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutWireTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTorus$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutSolidTorus$MH,"glutSolidTorus");
    }
    public static void glutSolidTorus ( double innerRadius,  double outerRadius,  int sides,  int rings) {
        var mh$ = glutSolidTorus$MH();
        try {
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutWireDodecahedron$MH,"glutWireDodecahedron");
    }
    public static void glutWireDodecahedron () {
        var mh$ = glutWireDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidDodecahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$964.glutSolidDodecahedron$MH,"glutSolidDodecahedron");
    }
    public static void glutSolidDodecahedron () {
        var mh$ = glutSolidDodecahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutWireOctahedron$MH,"glutWireOctahedron");
    }
    public static void glutWireOctahedron () {
        var mh$ = glutWireOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidOctahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutSolidOctahedron$MH,"glutSolidOctahedron");
    }
    public static void glutSolidOctahedron () {
        var mh$ = glutSolidOctahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutWireTetrahedron$MH,"glutWireTetrahedron");
    }
    public static void glutWireTetrahedron () {
        var mh$ = glutWireTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTetrahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutSolidTetrahedron$MH,"glutSolidTetrahedron");
    }
    public static void glutSolidTetrahedron () {
        var mh$ = glutSolidTetrahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutWireIcosahedron$MH,"glutWireIcosahedron");
    }
    public static void glutWireIcosahedron () {
        var mh$ = glutWireIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidIcosahedron$MH() {
        return RuntimeHelper.requireNonNull(constants$965.glutSolidIcosahedron$MH,"glutSolidIcosahedron");
    }
    public static void glutSolidIcosahedron () {
        var mh$ = glutSolidIcosahedron$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutWireTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutWireTeapot$MH,"glutWireTeapot");
    }
    public static void glutWireTeapot ( double size) {
        var mh$ = glutWireTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSolidTeapot$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutSolidTeapot$MH,"glutSolidTeapot");
    }
    public static void glutSolidTeapot ( double size) {
        var mh$ = glutSolidTeapot$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeString$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutGameModeString$MH,"glutGameModeString");
    }
    public static void glutGameModeString ( Addressable string) {
        var mh$ = glutGameModeString$MH();
        try {
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutEnterGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutEnterGameMode$MH,"glutEnterGameMode");
    }
    public static int glutEnterGameMode () {
        var mh$ = glutEnterGameMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutLeaveGameMode$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutLeaveGameMode$MH,"glutLeaveGameMode");
    }
    public static void glutLeaveGameMode () {
        var mh$ = glutLeaveGameMode$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGameModeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$966.glutGameModeGet$MH,"glutGameModeGet");
    }
    public static int glutGameModeGet ( int query) {
        var mh$ = glutGameModeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResizeGet$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutVideoResizeGet$MH,"glutVideoResizeGet");
    }
    public static int glutVideoResizeGet ( int query) {
        var mh$ = glutVideoResizeGet$MH();
        try {
            return (int)mh$.invokeExact(query);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetupVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutSetupVideoResizing$MH,"glutSetupVideoResizing");
    }
    public static void glutSetupVideoResizing () {
        var mh$ = glutSetupVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutStopVideoResizing$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutStopVideoResizing$MH,"glutStopVideoResizing");
    }
    public static void glutStopVideoResizing () {
        var mh$ = glutStopVideoResizing$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoResize$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutVideoResize$MH,"glutVideoResize");
    }
    public static void glutVideoResize ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoResize$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutVideoPan$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutVideoPan$MH,"glutVideoPan");
    }
    public static void glutVideoPan ( int x,  int y,  int width,  int height) {
        var mh$ = glutVideoPan$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$967.glutSetColor$MH,"glutSetColor");
    }
    public static void glutSetColor ( int color,  float red,  float green,  float blue) {
        var mh$ = glutSetColor$MH();
        try {
            mh$.invokeExact(color, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutGetColor$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutGetColor$MH,"glutGetColor");
    }
    public static float glutGetColor ( int color,  int component) {
        var mh$ = glutGetColor$MH();
        try {
            return (float)mh$.invokeExact(color, component);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutCopyColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutCopyColormap$MH,"glutCopyColormap");
    }
    public static void glutCopyColormap ( int window) {
        var mh$ = glutCopyColormap$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutIgnoreKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutIgnoreKeyRepeat$MH,"glutIgnoreKeyRepeat");
    }
    public static void glutIgnoreKeyRepeat ( int ignore) {
        var mh$ = glutIgnoreKeyRepeat$MH();
        try {
            mh$.invokeExact(ignore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutSetKeyRepeat$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutSetKeyRepeat$MH,"glutSetKeyRepeat");
    }
    public static void glutSetKeyRepeat ( int repeatMode) {
        var mh$ = glutSetKeyRepeat$MH();
        try {
            mh$.invokeExact(repeatMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutForceJoystickFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutForceJoystickFunc$MH,"glutForceJoystickFunc");
    }
    public static void glutForceJoystickFunc () {
        var mh$ = glutForceJoystickFunc$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$968.glutExtensionSupported$MH,"glutExtensionSupported");
    }
    public static int glutExtensionSupported ( Addressable extension) {
        var mh$ = glutExtensionSupported$MH();
        try {
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glutReportErrors$MH() {
        return RuntimeHelper.requireNonNull(constants$969.glutReportErrors$MH,"glutReportErrors");
    }
    public static void glutReportErrors () {
        var mh$ = glutReportErrors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static int P_ALL() {
        return (int)0L;
    }
    public static int P_PID() {
        return (int)1L;
    }
    public static int P_PGID() {
        return (int)2L;
    }
    public static OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$969.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    public static long __ctype_get_mb_cur_max () {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$969.atof$MH,"atof");
    }
    public static double atof ( Addressable __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$969.atoi$MH,"atoi");
    }
    public static int atoi ( Addressable __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$969.atol$MH,"atol");
    }
    public static long atol ( Addressable __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$969.atoll$MH,"atoll");
    }
    public static long atoll ( Addressable __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtod$MH,"strtod");
    }
    public static double strtod ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtof$MH,"strtof");
    }
    public static float strtof ( Addressable __nptr,  Addressable __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtol$MH,"strtol");
    }
    public static long strtol ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtoul$MH,"strtoul");
    }
    public static long strtoul ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtoq$MH,"strtoq");
    }
    public static long strtoq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$970.strtouq$MH,"strtouq");
    }
    public static long strtouq ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$971.strtoll$MH,"strtoll");
    }
    public static long strtoll ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$971.strtoull$MH,"strtoull");
    }
    public static long strtoull ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$971.l64a$MH,"l64a");
    }
    public static MemoryAddress l64a ( long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$971.a64l$MH,"a64l");
    }
    public static long a64l ( Addressable __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$971.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$971.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$972.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$972.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$972.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$972.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$972.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$972.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$973.random$MH,"random");
    }
    public static long random () {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$973.srandom$MH,"srandom");
    }
    public static void srandom ( int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$973.initstate$MH,"initstate");
    }
    public static MemoryAddress initstate ( int __seed,  Addressable __statebuf,  long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$973.setstate$MH,"setstate");
    }
    public static MemoryAddress setstate ( Addressable __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$973.random_r$MH,"random_r");
    }
    public static int random_r ( Addressable __buf,  Addressable __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$973.srandom_r$MH,"srandom_r");
    }
    public static int srandom_r ( int __seed,  Addressable __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$974.initstate_r$MH,"initstate_r");
    }
    public static int initstate_r ( int __seed,  Addressable __statebuf,  long __statelen,  Addressable __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$974.setstate_r$MH,"setstate_r");
    }
    public static int setstate_r ( Addressable __statebuf,  Addressable __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$974.rand$MH,"rand");
    }
    public static int rand () {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$974.srand$MH,"srand");
    }
    public static void srand ( int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$974.rand_r$MH,"rand_r");
    }
    public static int rand_r ( Addressable __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$974.drand48$MH,"drand48");
    }
    public static double drand48 () {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.erand48$MH,"erand48");
    }
    public static double erand48 ( Addressable __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.lrand48$MH,"lrand48");
    }
    public static long lrand48 () {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.nrand48$MH,"nrand48");
    }
    public static long nrand48 ( Addressable __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.mrand48$MH,"mrand48");
    }
    public static long mrand48 () {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.jrand48$MH,"jrand48");
    }
    public static long jrand48 ( Addressable __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$975.srand48$MH,"srand48");
    }
    public static void srand48 ( long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$976.seed48$MH,"seed48");
    }
    public static MemoryAddress seed48 ( Addressable __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$976.lcong48$MH,"lcong48");
    }
    public static void lcong48 ( Addressable __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$976.drand48_r$MH,"drand48_r");
    }
    public static int drand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$976.erand48_r$MH,"erand48_r");
    }
    public static int erand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$976.lrand48_r$MH,"lrand48_r");
    }
    public static int lrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$976.nrand48_r$MH,"nrand48_r");
    }
    public static int nrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$977.mrand48_r$MH,"mrand48_r");
    }
    public static int mrand48_r ( Addressable __buffer,  Addressable __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$977.jrand48_r$MH,"jrand48_r");
    }
    public static int jrand48_r ( Addressable __xsubi,  Addressable __buffer,  Addressable __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$977.srand48_r$MH,"srand48_r");
    }
    public static int srand48_r ( long __seedval,  Addressable __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$977.seed48_r$MH,"seed48_r");
    }
    public static int seed48_r ( Addressable __seed16v,  Addressable __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$977.lcong48_r$MH,"lcong48_r");
    }
    public static int lcong48_r ( Addressable __param,  Addressable __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$977.malloc$MH,"malloc");
    }
    public static MemoryAddress malloc ( long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$978.calloc$MH,"calloc");
    }
    public static MemoryAddress calloc ( long __nmemb,  long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$978.realloc$MH,"realloc");
    }
    public static MemoryAddress realloc ( Addressable __ptr,  long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$978.reallocarray$MH,"reallocarray");
    }
    public static MemoryAddress reallocarray ( Addressable __ptr,  long __nmemb,  long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$978.free$MH,"free");
    }
    public static void free ( Addressable __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$978.alloca$MH,"alloca");
    }
    public static MemoryAddress alloca ( long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$978.valloc$MH,"valloc");
    }
    public static MemoryAddress valloc ( long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$979.posix_memalign$MH,"posix_memalign");
    }
    public static int posix_memalign ( Addressable __memptr,  long __alignment,  long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$979.aligned_alloc$MH,"aligned_alloc");
    }
    public static MemoryAddress aligned_alloc ( long __alignment,  long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$979.abort$MH,"abort");
    }
    public static void abort () {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$979.atexit$MH,"atexit");
    }
    public static int atexit ( Addressable __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$980.at_quick_exit$MH,"at_quick_exit");
    }
    public static int at_quick_exit ( Addressable __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$980.on_exit$MH,"on_exit");
    }
    public static int on_exit ( Addressable __func,  Addressable __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$981.exit$MH,"exit");
    }
    public static void exit ( int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$981.quick_exit$MH,"quick_exit");
    }
    public static void quick_exit ( int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$981._Exit$MH,"_Exit");
    }
    public static void _Exit ( int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$981.getenv$MH,"getenv");
    }
    public static MemoryAddress getenv ( Addressable __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$981.putenv$MH,"putenv");
    }
    public static int putenv ( Addressable __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$981.setenv$MH,"setenv");
    }
    public static int setenv ( Addressable __name,  Addressable __value,  int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$982.unsetenv$MH,"unsetenv");
    }
    public static int unsetenv ( Addressable __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$982.clearenv$MH,"clearenv");
    }
    public static int clearenv () {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$982.mktemp$MH,"mktemp");
    }
    public static MemoryAddress mktemp ( Addressable __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$982.mkstemp$MH,"mkstemp");
    }
    public static int mkstemp ( Addressable __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$982.mkstemps$MH,"mkstemps");
    }
    public static int mkstemps ( Addressable __template,  int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$982.mkdtemp$MH,"mkdtemp");
    }
    public static MemoryAddress mkdtemp ( Addressable __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$983.system$MH,"system");
    }
    public static int system ( Addressable __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$983.realpath$MH,"realpath");
    }
    public static MemoryAddress realpath ( Addressable __name,  Addressable __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$983.bsearch$MH,"bsearch");
    }
    public static MemoryAddress bsearch ( Addressable __key,  Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$983.qsort$MH,"qsort");
    }
    public static void qsort ( Addressable __base,  long __nmemb,  long __size,  Addressable __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$984.abs$MH,"abs");
    }
    public static int abs ( int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$984.labs$MH,"labs");
    }
    public static long labs ( long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$984.llabs$MH,"llabs");
    }
    public static long llabs ( long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$984.div$MH,"div");
    }
    public static MemorySegment div ( SegmentAllocator allocator,  int __numer,  int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$984.ldiv$MH,"ldiv");
    }
    public static MemorySegment ldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$984.lldiv$MH,"lldiv");
    }
    public static MemorySegment lldiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$985.ecvt$MH,"ecvt");
    }
    public static MemoryAddress ecvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$985.fcvt$MH,"fcvt");
    }
    public static MemoryAddress fcvt ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$985.gcvt$MH,"gcvt");
    }
    public static MemoryAddress gcvt ( double __value,  int __ndigit,  Addressable __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$985.ecvt_r$MH,"ecvt_r");
    }
    public static int ecvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$985.fcvt_r$MH,"fcvt_r");
    }
    public static int fcvt_r ( double __value,  int __ndigit,  Addressable __decpt,  Addressable __sign,  Addressable __buf,  long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$985.mblen$MH,"mblen");
    }
    public static int mblen ( Addressable __s,  long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$986.mbtowc$MH,"mbtowc");
    }
    public static int mbtowc ( Addressable __pwc,  Addressable __s,  long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$986.wctomb$MH,"wctomb");
    }
    public static int wctomb ( Addressable __s,  int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$986.mbstowcs$MH,"mbstowcs");
    }
    public static long mbstowcs ( Addressable __pwcs,  Addressable __s,  long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$986.wcstombs$MH,"wcstombs");
    }
    public static long wcstombs ( Addressable __s,  Addressable __pwcs,  long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$986.rpmatch$MH,"rpmatch");
    }
    public static int rpmatch ( Addressable __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$986.getsubopt$MH,"getsubopt");
    }
    public static int getsubopt ( Addressable __optionp,  Addressable __tokens,  Addressable __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$987.getloadavg$MH,"getloadavg");
    }
    public static int getloadavg ( Addressable __loadavg,  int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GL_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_CLIENT_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int GL_INVALID_INDEX() {
        return (int)4294967295L;
    }
    public static long GL_TIMEOUT_IGNORED() {
        return -1L;
    }
    public static int GL_ALL_SHADER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_PIXELS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_QUERY_ALL_EVENT_BITS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS_EXT() {
        return (int)4294967295L;
    }
    public static int GL_NEXT_BUFFER_NV() {
        return (int)-2L;
    }
    public static int GL_SKIP_COMPONENTS4_NV() {
        return (int)-3L;
    }
    public static int GL_SKIP_COMPONENTS3_NV() {
        return (int)-4L;
    }
    public static int GL_SKIP_COMPONENTS2_NV() {
        return (int)-5L;
    }
    public static int GL_SKIP_COMPONENTS1_NV() {
        return (int)-6L;
    }
    public static int GL_TEXCOORD4_BIT_PGI() {
        return (int)2147483648L;
    }
    public static double GLU_TESS_MAX_COORD() {
        return 1.0E150d;
    }
    public static MemoryAddress NULL() {
        return constants$987.NULL$ADDR;
    }
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$987.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
}


