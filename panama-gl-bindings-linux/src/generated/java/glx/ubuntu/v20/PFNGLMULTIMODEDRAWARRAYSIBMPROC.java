// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLMULTIMODEDRAWARRAYSIBMPROC {

    void apply(java.lang.foreign.MemoryAddress mode, java.lang.foreign.MemoryAddress first, java.lang.foreign.MemoryAddress count, int primcount, int modestride);
    static MemorySegment allocate(PFNGLMULTIMODEDRAWARRAYSIBMPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLMULTIMODEDRAWARRAYSIBMPROC.class, fi, constants$786.PFNGLMULTIMODEDRAWARRAYSIBMPROC$FUNC, session);
    }
    static PFNGLMULTIMODEDRAWARRAYSIBMPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _mode, java.lang.foreign.MemoryAddress _first, java.lang.foreign.MemoryAddress _count, int _primcount, int _modestride) -> {
            try {
                constants$786.PFNGLMULTIMODEDRAWARRAYSIBMPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_mode, (java.lang.foreign.Addressable)_first, (java.lang.foreign.Addressable)_count, _primcount, _modestride);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


