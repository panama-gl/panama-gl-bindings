// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLALPHAFRAGMENTOP3ATIPROC {

    void apply(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod);
    static MemorySegment allocate(PFNGLALPHAFRAGMENTOP3ATIPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLALPHAFRAGMENTOP3ATIPROC.class, fi, constants$578.PFNGLALPHAFRAGMENTOP3ATIPROC$FUNC, session);
    }
    static PFNGLALPHAFRAGMENTOP3ATIPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _op, int _dst, int _dstMod, int _arg1, int _arg1Rep, int _arg1Mod, int _arg2, int _arg2Rep, int _arg2Mod, int _arg3, int _arg3Rep, int _arg3Mod) -> {
            try {
                constants$578.PFNGLALPHAFRAGMENTOP3ATIPROC$MH.invokeExact((Addressable)symbol, _op, _dst, _dstMod, _arg1, _arg1Rep, _arg1Mod, _arg2, _arg2Rep, _arg2Mod, _arg3, _arg3Rep, _arg3Mod);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


