// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC {

    void apply(int group, int counter, int bufSize, java.lang.foreign.MemoryAddress length, java.lang.foreign.MemoryAddress counterString);
    static MemorySegment allocate(PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC.class, fi, constants$555.PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC$FUNC, session);
    }
    static PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _group, int _counter, int _bufSize, java.lang.foreign.MemoryAddress _length, java.lang.foreign.MemoryAddress _counterString) -> {
            try {
                constants$555.PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC$MH.invokeExact((Addressable)symbol, _group, _counter, _bufSize, (java.lang.foreign.Addressable)_length, (java.lang.foreign.Addressable)_counterString);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


