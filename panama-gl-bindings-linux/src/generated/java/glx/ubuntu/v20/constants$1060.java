// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$1060 {

    static final FunctionDescriptor glXFreeMemoryNV$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glXFreeMemoryNV$MH = RuntimeHelper.downcallHandle(
        "glXFreeMemoryNV",
        constants$1060.glXFreeMemoryNV$FUNC
    );
    static final FunctionDescriptor PFNGLXALLOCATEMEMORYNVPROC$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle PFNGLXALLOCATEMEMORYNVPROC$MH = RuntimeHelper.downcallHandle(
        constants$1060.PFNGLXALLOCATEMEMORYNVPROC$FUNC
    );
    static final FunctionDescriptor PFNGLXFREEMEMORYNVPROC$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle PFNGLXFREEMEMORYNVPROC$MH = RuntimeHelper.downcallHandle(
        constants$1060.PFNGLXFREEMEMORYNVPROC$FUNC
    );
    static final FunctionDescriptor glXBindTexImageARB$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glXBindTexImageARB$MH = RuntimeHelper.downcallHandle(
        "glXBindTexImageARB",
        constants$1060.glXBindTexImageARB$FUNC
    );
}


