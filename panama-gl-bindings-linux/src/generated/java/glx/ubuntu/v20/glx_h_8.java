// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glx_h_8 extends glx_h_7 {

    public static int GLX_GPU_NUM_SIMD_AMD() {
        return (int)8614L;
    }
    public static int GLX_GPU_NUM_RB_AMD() {
        return (int)8615L;
    }
    public static int GLX_GPU_NUM_SPI_AMD() {
        return (int)8616L;
    }
    public static int GLX_EXT_buffer_age() {
        return (int)1L;
    }
    public static int GLX_BACK_BUFFER_AGE_EXT() {
        return (int)8436L;
    }
    public static int GLX_EXT_context_priority() {
        return (int)1L;
    }
    public static int GLX_CONTEXT_PRIORITY_LEVEL_EXT() {
        return (int)12544L;
    }
    public static int GLX_CONTEXT_PRIORITY_HIGH_EXT() {
        return (int)12545L;
    }
    public static int GLX_CONTEXT_PRIORITY_MEDIUM_EXT() {
        return (int)12546L;
    }
    public static int GLX_CONTEXT_PRIORITY_LOW_EXT() {
        return (int)12547L;
    }
    public static int GLX_EXT_create_context_es2_profile() {
        return (int)1L;
    }
    public static int GLX_CONTEXT_ES2_PROFILE_BIT_EXT() {
        return (int)4L;
    }
    public static int GLX_EXT_create_context_es_profile() {
        return (int)1L;
    }
    public static int GLX_CONTEXT_ES_PROFILE_BIT_EXT() {
        return (int)4L;
    }
    public static int GLX_EXT_fbconfig_packed_float() {
        return (int)1L;
    }
    public static int GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT() {
        return (int)8369L;
    }
    public static int GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT() {
        return (int)8L;
    }
    public static int GLX_EXT_framebuffer_sRGB() {
        return (int)1L;
    }
    public static int GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT() {
        return (int)8370L;
    }
    public static int GLX_EXT_import_context() {
        return (int)1L;
    }
    public static int GLX_SHARE_CONTEXT_EXT() {
        return (int)32778L;
    }
    public static int GLX_VISUAL_ID_EXT() {
        return (int)32779L;
    }
    public static int GLX_SCREEN_EXT() {
        return (int)32780L;
    }
    public static int GLX_EXT_libglvnd() {
        return (int)1L;
    }
    public static int GLX_VENDOR_NAMES_EXT() {
        return (int)8438L;
    }
    public static int GLX_EXT_no_config_context() {
        return (int)1L;
    }
    public static int GLX_EXT_stereo_tree() {
        return (int)1L;
    }
    public static int GLX_STEREO_TREE_EXT() {
        return (int)8437L;
    }
    public static int GLX_STEREO_NOTIFY_MASK_EXT() {
        return (int)1L;
    }
    public static int GLX_STEREO_NOTIFY_EXT() {
        return (int)0L;
    }
    public static int GLX_EXT_swap_control() {
        return (int)1L;
    }
    public static int GLX_SWAP_INTERVAL_EXT() {
        return (int)8433L;
    }
    public static int GLX_MAX_SWAP_INTERVAL_EXT() {
        return (int)8434L;
    }
    public static int GLX_EXT_swap_control_tear() {
        return (int)1L;
    }
    public static int GLX_LATE_SWAPS_TEAR_EXT() {
        return (int)8435L;
    }
    public static int GLX_EXT_texture_from_pixmap() {
        return (int)1L;
    }
    public static int GLX_TEXTURE_1D_BIT_EXT() {
        return (int)1L;
    }
    public static int GLX_TEXTURE_2D_BIT_EXT() {
        return (int)2L;
    }
    public static int GLX_TEXTURE_RECTANGLE_BIT_EXT() {
        return (int)4L;
    }
    public static int GLX_BIND_TO_TEXTURE_RGB_EXT() {
        return (int)8400L;
    }
    public static int GLX_BIND_TO_TEXTURE_RGBA_EXT() {
        return (int)8401L;
    }
    public static int GLX_BIND_TO_MIPMAP_TEXTURE_EXT() {
        return (int)8402L;
    }
    public static int GLX_BIND_TO_TEXTURE_TARGETS_EXT() {
        return (int)8403L;
    }
    public static int GLX_Y_INVERTED_EXT() {
        return (int)8404L;
    }
    public static int GLX_TEXTURE_FORMAT_EXT() {
        return (int)8405L;
    }
    public static int GLX_TEXTURE_TARGET_EXT() {
        return (int)8406L;
    }
    public static int GLX_MIPMAP_TEXTURE_EXT() {
        return (int)8407L;
    }
    public static int GLX_TEXTURE_FORMAT_NONE_EXT() {
        return (int)8408L;
    }
    public static int GLX_TEXTURE_FORMAT_RGB_EXT() {
        return (int)8409L;
    }
    public static int GLX_TEXTURE_FORMAT_RGBA_EXT() {
        return (int)8410L;
    }
    public static int GLX_TEXTURE_1D_EXT() {
        return (int)8411L;
    }
    public static int GLX_TEXTURE_2D_EXT() {
        return (int)8412L;
    }
    public static int GLX_TEXTURE_RECTANGLE_EXT() {
        return (int)8413L;
    }
    public static int GLX_FRONT_LEFT_EXT() {
        return (int)8414L;
    }
    public static int GLX_FRONT_RIGHT_EXT() {
        return (int)8415L;
    }
    public static int GLX_BACK_LEFT_EXT() {
        return (int)8416L;
    }
    public static int GLX_BACK_RIGHT_EXT() {
        return (int)8417L;
    }
    public static int GLX_FRONT_EXT() {
        return (int)8414L;
    }
    public static int GLX_BACK_EXT() {
        return (int)8416L;
    }
    public static int GLX_AUX0_EXT() {
        return (int)8418L;
    }
    public static int GLX_AUX1_EXT() {
        return (int)8419L;
    }
    public static int GLX_AUX2_EXT() {
        return (int)8420L;
    }
    public static int GLX_AUX3_EXT() {
        return (int)8421L;
    }
    public static int GLX_AUX4_EXT() {
        return (int)8422L;
    }
    public static int GLX_AUX5_EXT() {
        return (int)8423L;
    }
    public static int GLX_AUX6_EXT() {
        return (int)8424L;
    }
    public static int GLX_AUX7_EXT() {
        return (int)8425L;
    }
    public static int GLX_AUX8_EXT() {
        return (int)8426L;
    }
    public static int GLX_AUX9_EXT() {
        return (int)8427L;
    }
    public static int GLX_EXT_visual_info() {
        return (int)1L;
    }
    public static int GLX_X_VISUAL_TYPE_EXT() {
        return (int)34L;
    }
    public static int GLX_TRANSPARENT_TYPE_EXT() {
        return (int)35L;
    }
    public static int GLX_TRANSPARENT_INDEX_VALUE_EXT() {
        return (int)36L;
    }
    public static int GLX_TRANSPARENT_RED_VALUE_EXT() {
        return (int)37L;
    }
    public static int GLX_TRANSPARENT_GREEN_VALUE_EXT() {
        return (int)38L;
    }
    public static int GLX_TRANSPARENT_BLUE_VALUE_EXT() {
        return (int)39L;
    }
    public static int GLX_TRANSPARENT_ALPHA_VALUE_EXT() {
        return (int)40L;
    }
    public static int GLX_NONE_EXT() {
        return (int)32768L;
    }
    public static int GLX_TRUE_COLOR_EXT() {
        return (int)32770L;
    }
    public static int GLX_DIRECT_COLOR_EXT() {
        return (int)32771L;
    }
    public static int GLX_PSEUDO_COLOR_EXT() {
        return (int)32772L;
    }
    public static int GLX_STATIC_COLOR_EXT() {
        return (int)32773L;
    }
    public static int GLX_GRAY_SCALE_EXT() {
        return (int)32774L;
    }
    public static int GLX_STATIC_GRAY_EXT() {
        return (int)32775L;
    }
    public static int GLX_TRANSPARENT_RGB_EXT() {
        return (int)32776L;
    }
    public static int GLX_TRANSPARENT_INDEX_EXT() {
        return (int)32777L;
    }
    public static int GLX_EXT_visual_rating() {
        return (int)1L;
    }
    public static int GLX_VISUAL_CAVEAT_EXT() {
        return (int)32L;
    }
    public static int GLX_SLOW_VISUAL_EXT() {
        return (int)32769L;
    }
    public static int GLX_NON_CONFORMANT_VISUAL_EXT() {
        return (int)32781L;
    }
    public static int GLX_INTEL_swap_event() {
        return (int)1L;
    }
    public static int GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK() {
        return (int)67108864L;
    }
    public static int GLX_EXCHANGE_COMPLETE_INTEL() {
        return (int)33152L;
    }
    public static int GLX_COPY_COMPLETE_INTEL() {
        return (int)33153L;
    }
    public static int GLX_FLIP_COMPLETE_INTEL() {
        return (int)33154L;
    }
    public static int GLX_MESA_agp_offset() {
        return (int)1L;
    }
    public static int GLX_MESA_copy_sub_buffer() {
        return (int)1L;
    }
    public static int GLX_MESA_pixmap_colormap() {
        return (int)1L;
    }
    public static int GLX_MESA_query_renderer() {
        return (int)1L;
    }
    public static int GLX_RENDERER_VENDOR_ID_MESA() {
        return (int)33155L;
    }
    public static int GLX_RENDERER_DEVICE_ID_MESA() {
        return (int)33156L;
    }
    public static int GLX_RENDERER_VERSION_MESA() {
        return (int)33157L;
    }
    public static int GLX_RENDERER_ACCELERATED_MESA() {
        return (int)33158L;
    }
    public static int GLX_RENDERER_VIDEO_MEMORY_MESA() {
        return (int)33159L;
    }
    public static int GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA() {
        return (int)33160L;
    }
    public static int GLX_RENDERER_PREFERRED_PROFILE_MESA() {
        return (int)33161L;
    }
    public static int GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA() {
        return (int)33162L;
    }
    public static int GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA() {
        return (int)33163L;
    }
    public static int GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA() {
        return (int)33164L;
    }
    public static int GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA() {
        return (int)33165L;
    }
    public static int GLX_MESA_release_buffers() {
        return (int)1L;
    }
    public static int GLX_MESA_set_3dfx_mode() {
        return (int)1L;
    }
    public static int GLX_3DFX_WINDOW_MODE_MESA() {
        return (int)1L;
    }
    public static int GLX_3DFX_FULLSCREEN_MODE_MESA() {
        return (int)2L;
    }
    public static int GLX_MESA_swap_control() {
        return (int)1L;
    }
    public static int GLX_NV_copy_buffer() {
        return (int)1L;
    }
    public static int GLX_NV_copy_image() {
        return (int)1L;
    }
    public static int GLX_NV_delay_before_swap() {
        return (int)1L;
    }
    public static int GLX_NV_float_buffer() {
        return (int)1L;
    }
    public static int GLX_FLOAT_COMPONENTS_NV() {
        return (int)8368L;
    }
    public static int GLX_NV_multisample_coverage() {
        return (int)1L;
    }
    public static int GLX_COVERAGE_SAMPLES_NV() {
        return (int)100001L;
    }
    public static int GLX_COLOR_SAMPLES_NV() {
        return (int)8371L;
    }
    public static int GLX_NV_present_video() {
        return (int)1L;
    }
    public static int GLX_NUM_VIDEO_SLOTS_NV() {
        return (int)8432L;
    }
    public static int GLX_NV_robustness_video_memory_purge() {
        return (int)1L;
    }
    public static int GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV() {
        return (int)8439L;
    }
    public static int GLX_NV_swap_group() {
        return (int)1L;
    }
    public static int GLX_NV_video_capture() {
        return (int)1L;
    }
    public static int GLX_DEVICE_ID_NV() {
        return (int)8397L;
    }
    public static int GLX_UNIQUE_ID_NV() {
        return (int)8398L;
    }
    public static int GLX_NUM_VIDEO_CAPTURE_SLOTS_NV() {
        return (int)8399L;
    }
    public static int GLX_NV_video_out() {
        return (int)1L;
    }
    public static int GLX_VIDEO_OUT_COLOR_NV() {
        return (int)8387L;
    }
    public static int GLX_VIDEO_OUT_ALPHA_NV() {
        return (int)8388L;
    }
    public static int GLX_VIDEO_OUT_DEPTH_NV() {
        return (int)8389L;
    }
    public static int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV() {
        return (int)8390L;
    }
    public static int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV() {
        return (int)8391L;
    }
    public static int GLX_VIDEO_OUT_FRAME_NV() {
        return (int)8392L;
    }
    public static int GLX_VIDEO_OUT_FIELD_1_NV() {
        return (int)8393L;
    }
    public static int GLX_VIDEO_OUT_FIELD_2_NV() {
        return (int)8394L;
    }
    public static int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV() {
        return (int)8395L;
    }
    public static int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV() {
        return (int)8396L;
    }
    public static int GLX_OML_swap_method() {
        return (int)1L;
    }
    public static int GLX_SWAP_METHOD_OML() {
        return (int)32864L;
    }
    public static int GLX_SWAP_EXCHANGE_OML() {
        return (int)32865L;
    }
    public static int GLX_SWAP_COPY_OML() {
        return (int)32866L;
    }
    public static int GLX_SWAP_UNDEFINED_OML() {
        return (int)32867L;
    }
    public static int GLX_OML_sync_control() {
        return (int)1L;
    }
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    public static int GLX_SGIS_blended_overlay() {
        return (int)1L;
    }
    public static int GLX_BLENDED_RGBA_SGIS() {
        return (int)32805L;
    }
    public static int GLX_SGIS_multisample() {
        return (int)1L;
    }
    public static int GLX_SAMPLE_BUFFERS_SGIS() {
        return (int)100000L;
    }
    public static int GLX_SAMPLES_SGIS() {
        return (int)100001L;
    }
    public static int GLX_SGIS_shared_multisample() {
        return (int)1L;
    }
    public static int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS() {
        return (int)32806L;
    }
    public static int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS() {
        return (int)32807L;
    }
    public static int GLX_SGIX_dmbuffer() {
        return (int)1L;
    }
    public static int GLX_SGIX_fbconfig() {
        return (int)1L;
    }
    public static int GLX_WINDOW_BIT_SGIX() {
        return (int)1L;
    }
    public static int GLX_PIXMAP_BIT_SGIX() {
        return (int)2L;
    }
    public static int GLX_RGBA_BIT_SGIX() {
        return (int)1L;
    }
    public static int GLX_COLOR_INDEX_BIT_SGIX() {
        return (int)2L;
    }
    public static int GLX_DRAWABLE_TYPE_SGIX() {
        return (int)32784L;
    }
    public static int GLX_RENDER_TYPE_SGIX() {
        return (int)32785L;
    }
    public static int GLX_X_RENDERABLE_SGIX() {
        return (int)32786L;
    }
    public static int GLX_FBCONFIG_ID_SGIX() {
        return (int)32787L;
    }
    public static int GLX_RGBA_TYPE_SGIX() {
        return (int)32788L;
    }
    public static int GLX_COLOR_INDEX_TYPE_SGIX() {
        return (int)32789L;
    }
    public static int GLX_SGIX_hyperpipe() {
        return (int)1L;
    }
    public static int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX() {
        return (int)80L;
    }
    public static int GLX_BAD_HYPERPIPE_CONFIG_SGIX() {
        return (int)91L;
    }
    public static int GLX_BAD_HYPERPIPE_SGIX() {
        return (int)92L;
    }
    public static int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX() {
        return (int)1L;
    }
    public static int GLX_HYPERPIPE_RENDER_PIPE_SGIX() {
        return (int)2L;
    }
    public static int GLX_PIPE_RECT_SGIX() {
        return (int)1L;
    }
    public static int GLX_PIPE_RECT_LIMITS_SGIX() {
        return (int)2L;
    }
    public static int GLX_HYPERPIPE_STEREO_SGIX() {
        return (int)3L;
    }
    public static int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX() {
        return (int)4L;
    }
    public static int GLX_HYPERPIPE_ID_SGIX() {
        return (int)32816L;
    }
    public static int GLX_SGIX_pbuffer() {
        return (int)1L;
    }
    public static int GLX_PBUFFER_BIT_SGIX() {
        return (int)4L;
    }
    public static int GLX_BUFFER_CLOBBER_MASK_SGIX() {
        return (int)134217728L;
    }
    public static int GLX_FRONT_LEFT_BUFFER_BIT_SGIX() {
        return (int)1L;
    }
    public static int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX() {
        return (int)2L;
    }
    public static int GLX_BACK_LEFT_BUFFER_BIT_SGIX() {
        return (int)4L;
    }
    public static int GLX_BACK_RIGHT_BUFFER_BIT_SGIX() {
        return (int)8L;
    }
    public static int GLX_AUX_BUFFERS_BIT_SGIX() {
        return (int)16L;
    }
    public static int GLX_DEPTH_BUFFER_BIT_SGIX() {
        return (int)32L;
    }
    public static int GLX_STENCIL_BUFFER_BIT_SGIX() {
        return (int)64L;
    }
    public static int GLX_ACCUM_BUFFER_BIT_SGIX() {
        return (int)128L;
    }
    public static int GLX_SAMPLE_BUFFERS_BIT_SGIX() {
        return (int)256L;
    }
    public static int GLX_MAX_PBUFFER_WIDTH_SGIX() {
        return (int)32790L;
    }
    public static int GLX_MAX_PBUFFER_HEIGHT_SGIX() {
        return (int)32791L;
    }
    public static int GLX_MAX_PBUFFER_PIXELS_SGIX() {
        return (int)32792L;
    }
    public static int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX() {
        return (int)32793L;
    }
    public static int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX() {
        return (int)32794L;
    }
    public static int GLX_PRESERVED_CONTENTS_SGIX() {
        return (int)32795L;
    }
    public static int GLX_LARGEST_PBUFFER_SGIX() {
        return (int)32796L;
    }
    public static int GLX_WIDTH_SGIX() {
        return (int)32797L;
    }
    public static int GLX_HEIGHT_SGIX() {
        return (int)32798L;
    }
    public static int GLX_EVENT_MASK_SGIX() {
        return (int)32799L;
    }
    public static int GLX_DAMAGED_SGIX() {
        return (int)32800L;
    }
    public static int GLX_SAVED_SGIX() {
        return (int)32801L;
    }
    public static int GLX_WINDOW_SGIX() {
        return (int)32802L;
    }
    public static int GLX_PBUFFER_SGIX() {
        return (int)32803L;
    }
    public static int GLX_SGIX_swap_barrier() {
        return (int)1L;
    }
    public static int GLX_SGIX_swap_group() {
        return (int)1L;
    }
    public static int GLX_SGIX_video_resize() {
        return (int)1L;
    }
    public static int GLX_SYNC_FRAME_SGIX() {
        return (int)0L;
    }
    public static int GLX_SYNC_SWAP_SGIX() {
        return (int)1L;
    }
    public static int GLX_SGIX_video_source() {
        return (int)1L;
    }
    public static int GLX_SGIX_visual_select_group() {
        return (int)1L;
    }
    public static int GLX_VISUAL_SELECT_GROUP_SGIX() {
        return (int)32808L;
    }
    public static int GLX_SGI_cushion() {
        return (int)1L;
    }
    public static int GLX_SGI_make_current_read() {
        return (int)1L;
    }
    public static int GLX_SGI_swap_control() {
        return (int)1L;
    }
    public static int GLX_SGI_video_sync() {
        return (int)1L;
    }
    public static int GLX_SUN_get_transparent_index() {
        return (int)1L;
    }
    public static int GLX_ARB_render_texture() {
        return (int)1L;
    }
    public static int GLX_MESA_swap_frame_usage() {
        return (int)1L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle _Xmblen$MH() {
        return RuntimeHelper.requireNonNull(constants$1._Xmblen$MH,"_Xmblen");
    }
    public static int _Xmblen ( Addressable str,  int len) {
        var mh$ = _Xmblen$MH();
        try {
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress XPointer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress _XPrivDisplay = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XOM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XOC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XFontSet = Constants$root.C_POINTER$LAYOUT;
    public static int XOMOrientation_LTR_TTB() {
        return (int)0L;
    }
    public static int XOMOrientation_RTL_TTB() {
        return (int)1L;
    }
    public static int XOMOrientation_TTB_LTR() {
        return (int)2L;
    }
    public static int XOMOrientation_TTB_RTL() {
        return (int)3L;
    }
    public static int XOMOrientation_Context() {
        return (int)4L;
    }
    public static OfAddress XIM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress XVaNestedList = Constants$root.C_POINTER$LAYOUT;
    public static int XIMForwardChar() {
        return (int)0L;
    }
    public static int XIMBackwardChar() {
        return (int)1L;
    }
    public static int XIMForwardWord() {
        return (int)2L;
    }
    public static int XIMBackwardWord() {
        return (int)3L;
    }
    public static int XIMCaretUp() {
        return (int)4L;
    }
    public static int XIMCaretDown() {
        return (int)5L;
    }
    public static int XIMNextLine() {
        return (int)6L;
    }
    public static int XIMPreviousLine() {
        return (int)7L;
    }
    public static int XIMLineStart() {
        return (int)8L;
    }
    public static int XIMLineEnd() {
        return (int)9L;
    }
    public static int XIMAbsolutePosition() {
        return (int)10L;
    }
    public static int XIMDontChange() {
        return (int)11L;
    }
    public static int XIMIsInvisible() {
        return (int)0L;
    }
    public static int XIMIsPrimary() {
        return (int)1L;
    }
    public static int XIMIsSecondary() {
        return (int)2L;
    }
    public static int XIMTextType() {
        return (int)0L;
    }
    public static int XIMBitmapType() {
        return (int)1L;
    }
    public static MemoryLayout _Xdebug$LAYOUT() {
        return constants$2._Xdebug$LAYOUT;
    }
    public static VarHandle _Xdebug$VH() {
        return constants$2._Xdebug$VH;
    }
    public static MemorySegment _Xdebug$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT,"_Xdebug");
    }
    public static int _Xdebug$get() {
        return (int) constants$2._Xdebug$VH.get(RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT, "_Xdebug"));
    }
    public static void _Xdebug$set( int x) {
        constants$2._Xdebug$VH.set(RuntimeHelper.requireNonNull(constants$2._Xdebug$SEGMENT, "_Xdebug"), x);
    }
    public static MethodHandle XLoadQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$2.XLoadQueryFont$MH,"XLoadQueryFont");
    }
    public static MemoryAddress XLoadQueryFont ( Addressable x0,  Addressable x1) {
        var mh$ = XLoadQueryFont$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryFont$MH() {
        return RuntimeHelper.requireNonNull(constants$2.XQueryFont$MH,"XQueryFont");
    }
    public static MemoryAddress XQueryFont ( Addressable x0,  long x1) {
        var mh$ = XQueryFont$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetMotionEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XGetMotionEvents$MH,"XGetMotionEvents");
    }
    public static MemoryAddress XGetMotionEvents ( Addressable x0,  long x1,  long x2,  long x3,  Addressable x4) {
        var mh$ = XGetMotionEvents$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XDeleteModifiermapEntry$MH,"XDeleteModifiermapEntry");
    }
    public static MemoryAddress XDeleteModifiermapEntry ( Addressable x0,  byte x1,  int x2) {
        var mh$ = XDeleteModifiermapEntry$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XGetModifierMapping$MH,"XGetModifierMapping");
    }
    public static MemoryAddress XGetModifierMapping ( Addressable x0) {
        var mh$ = XGetModifierMapping$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInsertModifiermapEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XInsertModifiermapEntry$MH,"XInsertModifiermapEntry");
    }
    public static MemoryAddress XInsertModifiermapEntry ( Addressable x0,  byte x1,  int x2) {
        var mh$ = XInsertModifiermapEntry$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNewModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XNewModifiermap$MH,"XNewModifiermap");
    }
    public static MemoryAddress XNewModifiermap ( int x0) {
        var mh$ = XNewModifiermap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateImage$MH() {
        return RuntimeHelper.requireNonNull(constants$3.XCreateImage$MH,"XCreateImage");
    }
    public static MemoryAddress XCreateImage ( Addressable x0,  Addressable x1,  int x2,  int x3,  int x4,  Addressable x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = XCreateImage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XInitImage$MH,"XInitImage");
    }
    public static int XInitImage ( Addressable x0) {
        var mh$ = XInitImage$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XGetImage$MH,"XGetImage");
    }
    public static MemoryAddress XGetImage ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  int x7) {
        var mh$ = XGetImage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSubImage$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XGetSubImage$MH,"XGetSubImage");
    }
    public static MemoryAddress XGetSubImage ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  int x7,  Addressable x8,  int x9,  int x10) {
        var mh$ = XGetSubImage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XOpenDisplay$MH,"XOpenDisplay");
    }
    public static MemoryAddress XOpenDisplay ( Addressable x0) {
        var mh$ = XOpenDisplay$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XrmInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XrmInitialize$MH,"XrmInitialize");
    }
    public static void XrmInitialize () {
        var mh$ = XrmInitialize$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$4.XFetchBytes$MH,"XFetchBytes");
    }
    public static MemoryAddress XFetchBytes ( Addressable x0,  Addressable x1) {
        var mh$ = XFetchBytes$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XFetchBuffer$MH,"XFetchBuffer");
    }
    public static MemoryAddress XFetchBuffer ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XFetchBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetAtomName$MH,"XGetAtomName");
    }
    public static MemoryAddress XGetAtomName ( Addressable x0,  long x1) {
        var mh$ = XGetAtomName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetAtomNames$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetAtomNames$MH,"XGetAtomNames");
    }
    public static int XGetAtomNames ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = XGetAtomNames$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetDefault$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XGetDefault$MH,"XGetDefault");
    }
    public static MemoryAddress XGetDefault ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XGetDefault$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XDisplayName$MH,"XDisplayName");
    }
    public static MemoryAddress XDisplayName ( Addressable x0) {
        var mh$ = XDisplayName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToString$MH() {
        return RuntimeHelper.requireNonNull(constants$5.XKeysymToString$MH,"XKeysymToString");
    }
    public static MemoryAddress XKeysymToString ( long x0) {
        var mh$ = XKeysymToString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSynchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XSynchronize$MH,"XSynchronize");
    }
    public static MemoryAddress XSynchronize ( Addressable x0,  int x1) {
        var mh$ = XSynchronize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAfterFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XSetAfterFunction$MH,"XSetAfterFunction");
    }
    public static MemoryAddress XSetAfterFunction ( Addressable x0,  Addressable x1) {
        var mh$ = XSetAfterFunction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtom$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XInternAtom$MH,"XInternAtom");
    }
    public static long XInternAtom ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XInternAtom$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternAtoms$MH() {
        return RuntimeHelper.requireNonNull(constants$6.XInternAtoms$MH,"XInternAtoms");
    }
    public static int XInternAtoms ( Addressable x0,  Addressable x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = XInternAtoms$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyColormapAndFree$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCopyColormapAndFree$MH,"XCopyColormapAndFree");
    }
    public static long XCopyColormapAndFree ( Addressable x0,  long x1) {
        var mh$ = XCopyColormapAndFree$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateColormap$MH,"XCreateColormap");
    }
    public static long XCreateColormap ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XCreateColormap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreatePixmapCursor$MH,"XCreatePixmapCursor");
    }
    public static long XCreatePixmapCursor ( Addressable x0,  long x1,  long x2,  Addressable x3,  Addressable x4,  int x5,  int x6) {
        var mh$ = XCreatePixmapCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGlyphCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateGlyphCursor$MH,"XCreateGlyphCursor");
    }
    public static long XCreateGlyphCursor ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6) {
        var mh$ = XCreateGlyphCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XCreateFontCursor$MH,"XCreateFontCursor");
    }
    public static long XCreateFontCursor ( Addressable x0,  int x1) {
        var mh$ = XCreateFontCursor$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLoadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$7.XLoadFont$MH,"XLoadFont");
    }
    public static long XLoadFont ( Addressable x0,  Addressable x1) {
        var mh$ = XLoadFont$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreateGC$MH,"XCreateGC");
    }
    public static MemoryAddress XCreateGC ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = XCreateGC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGContextFromGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XGContextFromGC$MH,"XGContextFromGC");
    }
    public static long XGContextFromGC ( Addressable x0) {
        var mh$ = XGContextFromGC$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlushGC$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XFlushGC$MH,"XFlushGC");
    }
    public static void XFlushGC ( Addressable x0,  Addressable x1) {
        var mh$ = XFlushGC$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreatePixmap$MH,"XCreatePixmap");
    }
    public static long XCreatePixmap ( Addressable x0,  long x1,  int x2,  int x3,  int x4) {
        var mh$ = XCreatePixmap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateBitmapFromData$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreateBitmapFromData$MH,"XCreateBitmapFromData");
    }
    public static long XCreateBitmapFromData ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = XCreateBitmapFromData$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreatePixmapFromBitmapData$MH() {
        return RuntimeHelper.requireNonNull(constants$8.XCreatePixmapFromBitmapData$MH,"XCreatePixmapFromBitmapData");
    }
    public static long XCreatePixmapFromBitmapData ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  long x5,  long x6,  int x7) {
        var mh$ = XCreatePixmapFromBitmapData$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateSimpleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XCreateSimpleWindow$MH,"XCreateSimpleWindow");
    }
    public static long XCreateSimpleWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6,  long x7,  long x8) {
        var mh$ = XCreateSimpleWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XGetSelectionOwner$MH,"XGetSelectionOwner");
    }
    public static long XGetSelectionOwner ( Addressable x0,  long x1) {
        var mh$ = XGetSelectionOwner$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XCreateWindow$MH,"XCreateWindow");
    }
    public static long XCreateWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8,  Addressable x9,  long x10,  Addressable x11) {
        var mh$ = XCreateWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListInstalledColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListInstalledColormaps$MH,"XListInstalledColormaps");
    }
    public static MemoryAddress XListInstalledColormaps ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XListInstalledColormaps$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFonts$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListFonts$MH,"XListFonts");
    }
    public static MemoryAddress XListFonts ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = XListFonts$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListFontsWithInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$9.XListFontsWithInfo$MH,"XListFontsWithInfo");
    }
    public static MemoryAddress XListFontsWithInfo ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = XListFontsWithInfo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XGetFontPath$MH,"XGetFontPath");
    }
    public static MemoryAddress XGetFontPath ( Addressable x0,  Addressable x1) {
        var mh$ = XGetFontPath$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListExtensions$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListExtensions$MH,"XListExtensions");
    }
    public static MemoryAddress XListExtensions ( Addressable x0,  Addressable x1) {
        var mh$ = XListExtensions$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListProperties$MH,"XListProperties");
    }
    public static MemoryAddress XListProperties ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XListProperties$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XListHosts$MH,"XListHosts");
    }
    public static MemoryAddress XListHosts ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XListHosts$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeycodeToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XKeycodeToKeysym$MH,"XKeycodeToKeysym");
    }
    public static long XKeycodeToKeysym ( Addressable x0,  byte x1,  int x2) {
        var mh$ = XKeycodeToKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$10.XLookupKeysym$MH,"XLookupKeysym");
    }
    public static long XLookupKeysym ( Addressable x0,  int x1) {
        var mh$ = XLookupKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XGetKeyboardMapping$MH,"XGetKeyboardMapping");
    }
    public static MemoryAddress XGetKeyboardMapping ( Addressable x0,  byte x1,  int x2,  Addressable x3) {
        var mh$ = XGetKeyboardMapping$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringToKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XStringToKeysym$MH,"XStringToKeysym");
    }
    public static long XStringToKeysym ( Addressable x0) {
        var mh$ = XStringToKeysym$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XMaxRequestSize$MH,"XMaxRequestSize");
    }
    public static long XMaxRequestSize ( Addressable x0) {
        var mh$ = XMaxRequestSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtendedMaxRequestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XExtendedMaxRequestSize$MH,"XExtendedMaxRequestSize");
    }
    public static long XExtendedMaxRequestSize ( Addressable x0) {
        var mh$ = XExtendedMaxRequestSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResourceManagerString$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XResourceManagerString$MH,"XResourceManagerString");
    }
    public static MemoryAddress XResourceManagerString ( Addressable x0) {
        var mh$ = XResourceManagerString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenResourceString$MH() {
        return RuntimeHelper.requireNonNull(constants$11.XScreenResourceString$MH,"XScreenResourceString");
    }
    public static MemoryAddress XScreenResourceString ( Addressable x0) {
        var mh$ = XScreenResourceString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayMotionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XDisplayMotionBufferSize$MH,"XDisplayMotionBufferSize");
    }
    public static long XDisplayMotionBufferSize ( Addressable x0) {
        var mh$ = XDisplayMotionBufferSize$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVisualIDFromVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XVisualIDFromVisual$MH,"XVisualIDFromVisual");
    }
    public static long XVisualIDFromVisual ( Addressable x0) {
        var mh$ = XVisualIDFromVisual$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitThreads$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XInitThreads$MH,"XInitThreads");
    }
    public static int XInitThreads () {
        var mh$ = XInitThreads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XLockDisplay$MH,"XLockDisplay");
    }
    public static void XLockDisplay ( Addressable x0) {
        var mh$ = XLockDisplay$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnlockDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XUnlockDisplay$MH,"XUnlockDisplay");
    }
    public static void XUnlockDisplay ( Addressable x0) {
        var mh$ = XUnlockDisplay$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInitExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$12.XInitExtension$MH,"XInitExtension");
    }
    public static MemoryAddress XInitExtension ( Addressable x0,  Addressable x1) {
        var mh$ = XInitExtension$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XAddExtension$MH,"XAddExtension");
    }
    public static MemoryAddress XAddExtension ( Addressable x0) {
        var mh$ = XAddExtension$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindOnExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XFindOnExtensionList$MH,"XFindOnExtensionList");
    }
    public static MemoryAddress XFindOnExtensionList ( Addressable x0,  int x1) {
        var mh$ = XFindOnExtensionList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEHeadOfExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XEHeadOfExtensionList$MH,"XEHeadOfExtensionList");
    }
    public static MemoryAddress XEHeadOfExtensionList ( MemorySegment x0) {
        var mh$ = XEHeadOfExtensionList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XRootWindow$MH,"XRootWindow");
    }
    public static long XRootWindow ( Addressable x0,  int x1) {
        var mh$ = XRootWindow$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultRootWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XDefaultRootWindow$MH,"XDefaultRootWindow");
    }
    public static long XDefaultRootWindow ( Addressable x0) {
        var mh$ = XDefaultRootWindow$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRootWindowOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$13.XRootWindowOfScreen$MH,"XRootWindowOfScreen");
    }
    public static long XRootWindowOfScreen ( Addressable x0) {
        var mh$ = XRootWindowOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultVisual$MH,"XDefaultVisual");
    }
    public static MemoryAddress XDefaultVisual ( Addressable x0,  int x1) {
        var mh$ = XDefaultVisual$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultVisualOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultVisualOfScreen$MH,"XDefaultVisualOfScreen");
    }
    public static MemoryAddress XDefaultVisualOfScreen ( Addressable x0) {
        var mh$ = XDefaultVisualOfScreen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGC$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultGC$MH,"XDefaultGC");
    }
    public static MemoryAddress XDefaultGC ( Addressable x0,  int x1) {
        var mh$ = XDefaultGC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultGCOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XDefaultGCOfScreen$MH,"XDefaultGCOfScreen");
    }
    public static MemoryAddress XDefaultGCOfScreen ( Addressable x0) {
        var mh$ = XDefaultGCOfScreen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XBlackPixel$MH,"XBlackPixel");
    }
    public static long XBlackPixel ( Addressable x0,  int x1) {
        var mh$ = XBlackPixel$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixel$MH() {
        return RuntimeHelper.requireNonNull(constants$14.XWhitePixel$MH,"XWhitePixel");
    }
    public static long XWhitePixel ( Addressable x0,  int x1) {
        var mh$ = XWhitePixel$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XAllPlanes$MH,"XAllPlanes");
    }
    public static long XAllPlanes () {
        var mh$ = XAllPlanes$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBlackPixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XBlackPixelOfScreen$MH,"XBlackPixelOfScreen");
    }
    public static long XBlackPixelOfScreen ( Addressable x0) {
        var mh$ = XBlackPixelOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWhitePixelOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XWhitePixelOfScreen$MH,"XWhitePixelOfScreen");
    }
    public static long XWhitePixelOfScreen ( Addressable x0) {
        var mh$ = XWhitePixelOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XNextRequest$MH,"XNextRequest");
    }
    public static long XNextRequest ( Addressable x0) {
        var mh$ = XNextRequest$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLastKnownRequestProcessed$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XLastKnownRequestProcessed$MH,"XLastKnownRequestProcessed");
    }
    public static long XLastKnownRequestProcessed ( Addressable x0) {
        var mh$ = XLastKnownRequestProcessed$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XServerVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$15.XServerVendor$MH,"XServerVendor");
    }
    public static MemoryAddress XServerVendor ( Addressable x0) {
        var mh$ = XServerVendor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayString$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDisplayString$MH,"XDisplayString");
    }
    public static MemoryAddress XDisplayString ( Addressable x0) {
        var mh$ = XDisplayString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultColormap$MH,"XDefaultColormap");
    }
    public static long XDefaultColormap ( Addressable x0,  int x1) {
        var mh$ = XDefaultColormap$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultColormapOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultColormapOfScreen$MH,"XDefaultColormapOfScreen");
    }
    public static long XDefaultColormapOfScreen ( Addressable x0) {
        var mh$ = XDefaultColormapOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDisplayOfScreen$MH,"XDisplayOfScreen");
    }
    public static MemoryAddress XDisplayOfScreen ( Addressable x0) {
        var mh$ = XDisplayOfScreen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XScreenOfDisplay$MH,"XScreenOfDisplay");
    }
    public static MemoryAddress XScreenOfDisplay ( Addressable x0,  int x1) {
        var mh$ = XScreenOfDisplay$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreenOfDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$16.XDefaultScreenOfDisplay$MH,"XDefaultScreenOfDisplay");
    }
    public static MemoryAddress XDefaultScreenOfDisplay ( Addressable x0) {
        var mh$ = XDefaultScreenOfDisplay$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventMaskOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XEventMaskOfScreen$MH,"XEventMaskOfScreen");
    }
    public static long XEventMaskOfScreen ( Addressable x0) {
        var mh$ = XEventMaskOfScreen$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenNumberOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XScreenNumberOfScreen$MH,"XScreenNumberOfScreen");
    }
    public static int XScreenNumberOfScreen ( Addressable x0) {
        var mh$ = XScreenNumberOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$17.XSetErrorHandler$MH,"XSetErrorHandler");
    }
    public static MemoryAddress XSetErrorHandler ( Addressable x0) {
        var mh$ = XSetErrorHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIOErrorHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XSetIOErrorHandler$MH,"XSetIOErrorHandler");
    }
    public static MemoryAddress XSetIOErrorHandler ( Addressable x0) {
        var mh$ = XSetIOErrorHandler$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListPixmapFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XListPixmapFormats$MH,"XListPixmapFormats");
    }
    public static MemoryAddress XListPixmapFormats ( Addressable x0,  Addressable x1) {
        var mh$ = XListPixmapFormats$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XListDepths$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XListDepths$MH,"XListDepths");
    }
    public static MemoryAddress XListDepths ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = XListDepths$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReconfigureWMWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XReconfigureWMWindow$MH,"XReconfigureWMWindow");
    }
    public static int XReconfigureWMWindow ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = XReconfigureWMWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$18.XGetWMProtocols$MH,"XGetWMProtocols");
    }
    public static int XGetWMProtocols ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetWMProtocols$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProtocols$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XSetWMProtocols$MH,"XSetWMProtocols");
    }
    public static int XSetWMProtocols ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XSetWMProtocols$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIconifyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XIconifyWindow$MH,"XIconifyWindow");
    }
    public static int XIconifyWindow ( Addressable x0,  long x1,  int x2) {
        var mh$ = XIconifyWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWithdrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XWithdrawWindow$MH,"XWithdrawWindow");
    }
    public static int XWithdrawWindow ( Addressable x0,  long x1,  int x2) {
        var mh$ = XWithdrawWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XGetCommand$MH,"XGetCommand");
    }
    public static int XGetCommand ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetCommand$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XGetWMColormapWindows$MH,"XGetWMColormapWindows");
    }
    public static int XGetWMColormapWindows ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetWMColormapWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMColormapWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$19.XSetWMColormapWindows$MH,"XSetWMColormapWindows");
    }
    public static int XSetWMColormapWindows ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XSetWMColormapWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XFreeStringList$MH,"XFreeStringList");
    }
    public static void XFreeStringList ( Addressable x0) {
        var mh$ = XFreeStringList$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XSetTransientForHint$MH,"XSetTransientForHint");
    }
    public static int XSetTransientForHint ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetTransientForHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XActivateScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XActivateScreenSaver$MH,"XActivateScreenSaver");
    }
    public static int XActivateScreenSaver ( Addressable x0) {
        var mh$ = XActivateScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHost$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddHost$MH,"XAddHost");
    }
    public static int XAddHost ( Addressable x0,  Addressable x1) {
        var mh$ = XAddHost$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddHosts$MH,"XAddHosts");
    }
    public static int XAddHosts ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XAddHosts$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$20.XAddToExtensionList$MH,"XAddToExtensionList");
    }
    public static int XAddToExtensionList ( Addressable x0,  Addressable x1) {
        var mh$ = XAddToExtensionList$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddToSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAddToSaveSet$MH,"XAddToSaveSet");
    }
    public static int XAddToSaveSet ( Addressable x0,  long x1) {
        var mh$ = XAddToSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColor$MH,"XAllocColor");
    }
    public static int XAllocColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XAllocColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorCells$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColorCells$MH,"XAllocColorCells");
    }
    public static int XAllocColorCells ( Addressable x0,  long x1,  int x2,  Addressable x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XAllocColorCells$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocColorPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocColorPlanes$MH,"XAllocColorPlanes");
    }
    public static int XAllocColorPlanes ( Addressable x0,  long x1,  int x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  Addressable x8,  Addressable x9,  Addressable x10) {
        var mh$ = XAllocColorPlanes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllocNamedColor$MH,"XAllocNamedColor");
    }
    public static int XAllocNamedColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XAllocNamedColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllowEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$21.XAllowEvents$MH,"XAllowEvents");
    }
    public static int XAllowEvents ( Addressable x0,  int x1,  long x2) {
        var mh$ = XAllowEvents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOff$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOff$MH,"XAutoRepeatOff");
    }
    public static int XAutoRepeatOff ( Addressable x0) {
        var mh$ = XAutoRepeatOff$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAutoRepeatOn$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XAutoRepeatOn$MH,"XAutoRepeatOn");
    }
    public static int XAutoRepeatOn ( Addressable x0) {
        var mh$ = XAutoRepeatOn$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBell$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBell$MH,"XBell");
    }
    public static int XBell ( Addressable x0,  int x1) {
        var mh$ = XBell$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapBitOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapBitOrder$MH,"XBitmapBitOrder");
    }
    public static int XBitmapBitOrder ( Addressable x0) {
        var mh$ = XBitmapBitOrder$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapPad$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapPad$MH,"XBitmapPad");
    }
    public static int XBitmapPad ( Addressable x0) {
        var mh$ = XBitmapPad$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBitmapUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$22.XBitmapUnit$MH,"XBitmapUnit");
    }
    public static int XBitmapUnit ( Addressable x0) {
        var mh$ = XBitmapUnit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCellsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XCellsOfScreen$MH,"XCellsOfScreen");
    }
    public static int XCellsOfScreen ( Addressable x0) {
        var mh$ = XCellsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeActivePointerGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeActivePointerGrab$MH,"XChangeActivePointerGrab");
    }
    public static int XChangeActivePointerGrab ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = XChangeActivePointerGrab$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeGC$MH,"XChangeGC");
    }
    public static int XChangeGC ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = XChangeGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardControl$MH,"XChangeKeyboardControl");
    }
    public static int XChangeKeyboardControl ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XChangeKeyboardControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangeKeyboardMapping$MH,"XChangeKeyboardMapping");
    }
    public static int XChangeKeyboardMapping ( Addressable x0,  int x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = XChangeKeyboardMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangePointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.XChangePointerControl$MH,"XChangePointerControl");
    }
    public static int XChangePointerControl ( Addressable x0,  int x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = XChangePointerControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeProperty$MH,"XChangeProperty");
    }
    public static int XChangeProperty ( Addressable x0,  long x1,  long x2,  long x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = XChangeProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeSaveSet$MH,"XChangeSaveSet");
    }
    public static int XChangeSaveSet ( Addressable x0,  long x1,  int x2) {
        var mh$ = XChangeSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XChangeWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XChangeWindowAttributes$MH,"XChangeWindowAttributes");
    }
    public static int XChangeWindowAttributes ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = XChangeWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$24.XCheckIfEvent$MH,"XCheckIfEvent");
    }
    public static int XCheckIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XCheckIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckMaskEvent$MH,"XCheckMaskEvent");
    }
    public static int XCheckMaskEvent ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XCheckMaskEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckTypedEvent$MH,"XCheckTypedEvent");
    }
    public static int XCheckTypedEvent ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = XCheckTypedEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckTypedWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckTypedWindowEvent$MH,"XCheckTypedWindowEvent");
    }
    public static int XCheckTypedWindowEvent ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = XCheckTypedWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCheckWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCheckWindowEvent$MH,"XCheckWindowEvent");
    }
    public static int XCheckWindowEvent ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = XCheckWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindows$MH,"XCirculateSubwindows");
    }
    public static int XCirculateSubwindows ( Addressable x0,  long x1,  int x2) {
        var mh$ = XCirculateSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsDown$MH() {
        return RuntimeHelper.requireNonNull(constants$25.XCirculateSubwindowsDown$MH,"XCirculateSubwindowsDown");
    }
    public static int XCirculateSubwindowsDown ( Addressable x0,  long x1) {
        var mh$ = XCirculateSubwindowsDown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCirculateSubwindowsUp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XCirculateSubwindowsUp$MH,"XCirculateSubwindowsUp");
    }
    public static int XCirculateSubwindowsUp ( Addressable x0,  long x1) {
        var mh$ = XCirculateSubwindowsUp$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearArea$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XClearArea$MH,"XClearArea");
    }
    public static int XClearArea ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = XClearArea$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClearWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XClearWindow$MH,"XClearWindow");
    }
    public static int XClearWindow ( Addressable x0,  long x1) {
        var mh$ = XClearWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XCloseDisplay$MH,"XCloseDisplay");
    }
    public static int XCloseDisplay ( Addressable x0) {
        var mh$ = XCloseDisplay$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConfigureWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XConfigureWindow$MH,"XConfigureWindow");
    }
    public static int XConfigureWindow ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = XConfigureWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConnectionNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$26.XConnectionNumber$MH,"XConnectionNumber");
    }
    public static int XConnectionNumber ( Addressable x0) {
        var mh$ = XConnectionNumber$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertSelection$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XConvertSelection$MH,"XConvertSelection");
    }
    public static int XConvertSelection ( Addressable x0,  long x1,  long x2,  long x3,  long x4,  long x5) {
        var mh$ = XConvertSelection$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyArea$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyArea$MH,"XCopyArea");
    }
    public static int XCopyArea ( Addressable x0,  long x1,  long x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = XCopyArea$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyGC$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyGC$MH,"XCopyGC");
    }
    public static int XCopyGC ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = XCopyGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCopyPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XCopyPlane$MH,"XCopyPlane");
    }
    public static int XCopyPlane ( Addressable x0,  long x1,  long x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9,  long x10) {
        var mh$ = XCopyPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XDefaultDepth$MH,"XDefaultDepth");
    }
    public static int XDefaultDepth ( Addressable x0,  int x1) {
        var mh$ = XDefaultDepth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultDepthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.XDefaultDepthOfScreen$MH,"XDefaultDepthOfScreen");
    }
    public static int XDefaultDepthOfScreen ( Addressable x0) {
        var mh$ = XDefaultDepthOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDefaultScreen$MH,"XDefaultScreen");
    }
    public static int XDefaultScreen ( Addressable x0) {
        var mh$ = XDefaultScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDefineCursor$MH,"XDefineCursor");
    }
    public static int XDefineCursor ( Addressable x0,  long x1,  long x2) {
        var mh$ = XDefineCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDeleteProperty$MH,"XDeleteProperty");
    }
    public static int XDeleteProperty ( Addressable x0,  long x1,  long x2) {
        var mh$ = XDeleteProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDestroyWindow$MH,"XDestroyWindow");
    }
    public static int XDestroyWindow ( Addressable x0,  long x1) {
        var mh$ = XDestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroySubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDestroySubwindows$MH,"XDestroySubwindows");
    }
    public static int XDestroySubwindows ( Addressable x0,  long x1) {
        var mh$ = XDestroySubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesBackingStore$MH() {
        return RuntimeHelper.requireNonNull(constants$28.XDoesBackingStore$MH,"XDoesBackingStore");
    }
    public static int XDoesBackingStore ( Addressable x0) {
        var mh$ = XDoesBackingStore$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDoesSaveUnders$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDoesSaveUnders$MH,"XDoesSaveUnders");
    }
    public static int XDoesSaveUnders ( Addressable x0) {
        var mh$ = XDoesSaveUnders$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisableAccessControl$MH,"XDisableAccessControl");
    }
    public static int XDisableAccessControl ( Addressable x0) {
        var mh$ = XDisableAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayCells$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayCells$MH,"XDisplayCells");
    }
    public static int XDisplayCells ( Addressable x0,  int x1) {
        var mh$ = XDisplayCells$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeight$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayHeight$MH,"XDisplayHeight");
    }
    public static int XDisplayHeight ( Addressable x0,  int x1) {
        var mh$ = XDisplayHeight$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayHeightMM$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayHeightMM$MH,"XDisplayHeightMM");
    }
    public static int XDisplayHeightMM ( Addressable x0,  int x1) {
        var mh$ = XDisplayHeightMM$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayKeycodes$MH() {
        return RuntimeHelper.requireNonNull(constants$29.XDisplayKeycodes$MH,"XDisplayKeycodes");
    }
    public static int XDisplayKeycodes ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XDisplayKeycodes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayPlanes$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayPlanes$MH,"XDisplayPlanes");
    }
    public static int XDisplayPlanes ( Addressable x0,  int x1) {
        var mh$ = XDisplayPlanes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayWidth$MH,"XDisplayWidth");
    }
    public static int XDisplayWidth ( Addressable x0,  int x1) {
        var mh$ = XDisplayWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayWidthMM$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDisplayWidthMM$MH,"XDisplayWidthMM");
    }
    public static int XDisplayWidthMM ( Addressable x0,  int x1) {
        var mh$ = XDisplayWidthMM$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArc$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawArc$MH,"XDrawArc");
    }
    public static int XDrawArc ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = XDrawArc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawArcs$MH,"XDrawArcs");
    }
    public static int XDrawArcs ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = XDrawArcs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$30.XDrawImageString$MH,"XDrawImageString");
    }
    public static int XDrawImageString ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawImageString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawImageString16$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawImageString16$MH,"XDrawImageString16");
    }
    public static int XDrawImageString16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawImageString16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawLine$MH,"XDrawLine");
    }
    public static int XDrawLine ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = XDrawLine$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawLines$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawLines$MH,"XDrawLines");
    }
    public static int XDrawLines ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5) {
        var mh$ = XDrawLines$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawPoint$MH,"XDrawPoint");
    }
    public static int XDrawPoint ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = XDrawPoint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawPoints$MH,"XDrawPoints");
    }
    public static int XDrawPoints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5) {
        var mh$ = XDrawPoints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$31.XDrawRectangle$MH,"XDrawRectangle");
    }
    public static int XDrawRectangle ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = XDrawRectangle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawRectangles$MH,"XDrawRectangles");
    }
    public static int XDrawRectangles ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = XDrawRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawSegments$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawSegments$MH,"XDrawSegments");
    }
    public static int XDrawSegments ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = XDrawSegments$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawString$MH,"XDrawString");
    }
    public static int XDrawString ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawString16$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawString16$MH,"XDrawString16");
    }
    public static int XDrawString16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawString16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawText$MH,"XDrawText");
    }
    public static int XDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDrawText16$MH() {
        return RuntimeHelper.requireNonNull(constants$32.XDrawText16$MH,"XDrawText16");
    }
    public static int XDrawText16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XDrawText16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEnableAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XEnableAccessControl$MH,"XEnableAccessControl");
    }
    public static int XEnableAccessControl ( Addressable x0) {
        var mh$ = XEnableAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEventsQueued$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XEventsQueued$MH,"XEventsQueued");
    }
    public static int XEventsQueued ( Addressable x0,  int x1) {
        var mh$ = XEventsQueued$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFetchName$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFetchName$MH,"XFetchName");
    }
    public static int XFetchName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XFetchName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillArc$MH,"XFillArc");
    }
    public static int XFillArc ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = XFillArc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillArcs$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillArcs$MH,"XFillArcs");
    }
    public static int XFillArcs ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = XFillArcs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$33.XFillPolygon$MH,"XFillPolygon");
    }
    public static int XFillPolygon ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6) {
        var mh$ = XFillPolygon$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFillRectangle$MH,"XFillRectangle");
    }
    public static int XFillRectangle ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = XFillRectangle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFillRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFillRectangles$MH,"XFillRectangles");
    }
    public static int XFillRectangles ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4) {
        var mh$ = XFillRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFlush$MH,"XFlush");
    }
    public static int XFlush ( Addressable x0) {
        var mh$ = XFlush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XForceScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XForceScreenSaver$MH,"XForceScreenSaver");
    }
    public static int XForceScreenSaver ( Addressable x0,  int x1) {
        var mh$ = XForceScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFree$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFree$MH,"XFree");
    }
    public static int XFree ( Addressable x0) {
        var mh$ = XFree$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$34.XFreeColormap$MH,"XFreeColormap");
    }
    public static int XFreeColormap ( Addressable x0,  long x1) {
        var mh$ = XFreeColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeColors$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeColors$MH,"XFreeColors");
    }
    public static int XFreeColors ( Addressable x0,  long x1,  Addressable x2,  int x3,  long x4) {
        var mh$ = XFreeColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeCursor$MH,"XFreeCursor");
    }
    public static int XFreeCursor ( Addressable x0,  long x1) {
        var mh$ = XFreeCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeExtensionList$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeExtensionList$MH,"XFreeExtensionList");
    }
    public static int XFreeExtensionList ( Addressable x0) {
        var mh$ = XFreeExtensionList$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFont$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFont$MH,"XFreeFont");
    }
    public static int XFreeFont ( Addressable x0,  Addressable x1) {
        var mh$ = XFreeFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFontInfo$MH,"XFreeFontInfo");
    }
    public static int XFreeFontInfo ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XFreeFontInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontNames$MH() {
        return RuntimeHelper.requireNonNull(constants$35.XFreeFontNames$MH,"XFreeFontNames");
    }
    public static int XFreeFontNames ( Addressable x0) {
        var mh$ = XFreeFontNames$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeFontPath$MH,"XFreeFontPath");
    }
    public static int XFreeFontPath ( Addressable x0) {
        var mh$ = XFreeFontPath$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeGC$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeGC$MH,"XFreeGC");
    }
    public static int XFreeGC ( Addressable x0,  Addressable x1) {
        var mh$ = XFreeGC$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeModifiermap$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreeModifiermap$MH,"XFreeModifiermap");
    }
    public static int XFreeModifiermap ( Addressable x0) {
        var mh$ = XFreeModifiermap$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XFreePixmap$MH,"XFreePixmap");
    }
    public static int XFreePixmap ( Addressable x0,  long x1) {
        var mh$ = XFreePixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XGeometry$MH,"XGeometry");
    }
    public static int XGeometry ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  Addressable x9,  Addressable x10,  Addressable x11,  Addressable x12) {
        var mh$ = XGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorDatabaseText$MH() {
        return RuntimeHelper.requireNonNull(constants$36.XGetErrorDatabaseText$MH,"XGetErrorDatabaseText");
    }
    public static int XGetErrorDatabaseText ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5) {
        var mh$ = XGetErrorDatabaseText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetErrorText$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetErrorText$MH,"XGetErrorText");
    }
    public static int XGetErrorText ( Addressable x0,  int x1,  Addressable x2,  int x3) {
        var mh$ = XGetErrorText$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetFontProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetFontProperty$MH,"XGetFontProperty");
    }
    public static int XGetFontProperty ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetFontProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetGCValues$MH,"XGetGCValues");
    }
    public static int XGetGCValues ( Addressable x0,  Addressable x1,  long x2,  Addressable x3) {
        var mh$ = XGetGCValues$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetGeometry$MH,"XGetGeometry");
    }
    public static int XGetGeometry ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XGetGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetIconName$MH,"XGetIconName");
    }
    public static int XGetIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$37.XGetInputFocus$MH,"XGetInputFocus");
    }
    public static int XGetInputFocus ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XGetInputFocus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetKeyboardControl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetKeyboardControl$MH,"XGetKeyboardControl");
    }
    public static int XGetKeyboardControl ( Addressable x0,  Addressable x1) {
        var mh$ = XGetKeyboardControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerControl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetPointerControl$MH,"XGetPointerControl");
    }
    public static int XGetPointerControl ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetPointerControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetPointerMapping$MH,"XGetPointerMapping");
    }
    public static int XGetPointerMapping ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XGetPointerMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetScreenSaver$MH,"XGetScreenSaver");
    }
    public static int XGetScreenSaver ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XGetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTransientForHint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetTransientForHint$MH,"XGetTransientForHint");
    }
    public static int XGetTransientForHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetTransientForHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$38.XGetWindowProperty$MH,"XGetWindowProperty");
    }
    public static int XGetWindowProperty ( Addressable x0,  long x1,  long x2,  long x3,  long x4,  int x5,  long x6,  Addressable x7,  Addressable x8,  Addressable x9,  Addressable x10,  Addressable x11) {
        var mh$ = XGetWindowProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGetWindowAttributes$MH,"XGetWindowAttributes");
    }
    public static int XGetWindowAttributes ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabButton$MH,"XGrabButton");
    }
    public static int XGrabButton ( Addressable x0,  int x1,  int x2,  long x3,  int x4,  int x5,  int x6,  int x7,  long x8,  long x9) {
        var mh$ = XGrabButton$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabKey$MH,"XGrabKey");
    }
    public static int XGrabKey ( Addressable x0,  int x1,  int x2,  long x3,  int x4,  int x5,  int x6) {
        var mh$ = XGrabKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabKeyboard$MH,"XGrabKeyboard");
    }
    public static int XGrabKeyboard ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  long x5) {
        var mh$ = XGrabKeyboard$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabPointer$MH,"XGrabPointer");
    }
    public static int XGrabPointer ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5,  long x6,  long x7,  long x8) {
        var mh$ = XGrabPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$39.XGrabServer$MH,"XGrabServer");
    }
    public static int XGrabServer ( Addressable x0) {
        var mh$ = XGrabServer$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XHeightMMOfScreen$MH,"XHeightMMOfScreen");
    }
    public static int XHeightMMOfScreen ( Addressable x0) {
        var mh$ = XHeightMMOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XHeightOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XHeightOfScreen$MH,"XHeightOfScreen");
    }
    public static int XHeightOfScreen ( Addressable x0) {
        var mh$ = XHeightOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XIfEvent$MH,"XIfEvent");
    }
    public static int XIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XImageByteOrder$MH() {
        return RuntimeHelper.requireNonNull(constants$40.XImageByteOrder$MH,"XImageByteOrder");
    }
    public static int XImageByteOrder ( Addressable x0) {
        var mh$ = XImageByteOrder$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XInstallColormap$MH,"XInstallColormap");
    }
    public static int XInstallColormap ( Addressable x0,  long x1) {
        var mh$ = XInstallColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKeysymToKeycode$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XKeysymToKeycode$MH,"XKeysymToKeycode");
    }
    public static byte XKeysymToKeycode ( Addressable x0,  long x1) {
        var mh$ = XKeysymToKeycode$MH();
        try {
            return (byte)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XKillClient$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XKillClient$MH,"XKillClient");
    }
    public static int XKillClient ( Addressable x0,  long x1) {
        var mh$ = XKillClient$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupColor$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XLookupColor$MH,"XLookupColor");
    }
    public static int XLookupColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XLookupColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLowerWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XLowerWindow$MH,"XLowerWindow");
    }
    public static int XLowerWindow ( Addressable x0,  long x1) {
        var mh$ = XLowerWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapRaised$MH() {
        return RuntimeHelper.requireNonNull(constants$41.XMapRaised$MH,"XMapRaised");
    }
    public static int XMapRaised ( Addressable x0,  long x1) {
        var mh$ = XMapRaised$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMapSubwindows$MH,"XMapSubwindows");
    }
    public static int XMapSubwindows ( Addressable x0,  long x1) {
        var mh$ = XMapSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMapWindow$MH,"XMapWindow");
    }
    public static int XMapWindow ( Addressable x0,  long x1) {
        var mh$ = XMapWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaskEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMaskEvent$MH,"XMaskEvent");
    }
    public static int XMaskEvent ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XMaskEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMaxCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMaxCmapsOfScreen$MH,"XMaxCmapsOfScreen");
    }
    public static int XMaxCmapsOfScreen ( Addressable x0) {
        var mh$ = XMaxCmapsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMinCmapsOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMinCmapsOfScreen$MH,"XMinCmapsOfScreen");
    }
    public static int XMinCmapsOfScreen ( Addressable x0) {
        var mh$ = XMinCmapsOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$42.XMoveResizeWindow$MH,"XMoveResizeWindow");
    }
    public static int XMoveResizeWindow ( Addressable x0,  long x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = XMoveResizeWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XMoveWindow$MH,"XMoveWindow");
    }
    public static int XMoveWindow ( Addressable x0,  long x1,  int x2,  int x3) {
        var mh$ = XMoveWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNextEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XNextEvent$MH,"XNextEvent");
    }
    public static int XNextEvent ( Addressable x0,  Addressable x1) {
        var mh$ = XNextEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XNoOp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XNoOp$MH,"XNoOp");
    }
    public static int XNoOp ( Addressable x0) {
        var mh$ = XNoOp$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseColor$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XParseColor$MH,"XParseColor");
    }
    public static int XParseColor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XParseColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XParseGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XParseGeometry$MH,"XParseGeometry");
    }
    public static int XParseGeometry ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XParseGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$43.XPeekEvent$MH,"XPeekEvent");
    }
    public static int XPeekEvent ( Addressable x0,  Addressable x1) {
        var mh$ = XPeekEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPeekIfEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPeekIfEvent$MH,"XPeekIfEvent");
    }
    public static int XPeekIfEvent ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XPeekIfEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPending$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPending$MH,"XPending");
    }
    public static int XPending ( Addressable x0) {
        var mh$ = XPending$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPlanesOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XPlanesOfScreen$MH,"XPlanesOfScreen");
    }
    public static int XPlanesOfScreen ( Addressable x0) {
        var mh$ = XPlanesOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolRevision$MH() {
        return RuntimeHelper.requireNonNull(constants$44.XProtocolRevision$MH,"XProtocolRevision");
    }
    public static int XProtocolRevision ( Addressable x0) {
        var mh$ = XProtocolRevision$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XProtocolVersion$MH,"XProtocolVersion");
    }
    public static int XProtocolVersion ( Addressable x0) {
        var mh$ = XProtocolVersion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutBackEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XPutBackEvent$MH,"XPutBackEvent");
    }
    public static int XPutBackEvent ( Addressable x0,  Addressable x1) {
        var mh$ = XPutBackEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPutImage$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XPutImage$MH,"XPutImage");
    }
    public static int XPutImage ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  int x6,  int x7,  int x8,  int x9) {
        var mh$ = XPutImage$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQLength$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQLength$MH,"XQLength");
    }
    public static int XQLength ( Addressable x0) {
        var mh$ = XQLength$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQueryBestCursor$MH,"XQueryBestCursor");
    }
    public static int XQueryBestCursor ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = XQueryBestCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestSize$MH() {
        return RuntimeHelper.requireNonNull(constants$45.XQueryBestSize$MH,"XQueryBestSize");
    }
    public static int XQueryBestSize ( Addressable x0,  int x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6) {
        var mh$ = XQueryBestSize$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryBestStipple$MH,"XQueryBestStipple");
    }
    public static int XQueryBestStipple ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = XQueryBestStipple$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryBestTile$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryBestTile$MH,"XQueryBestTile");
    }
    public static int XQueryBestTile ( Addressable x0,  long x1,  int x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = XQueryBestTile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColor$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryColor$MH,"XQueryColor");
    }
    public static int XQueryColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XQueryColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryColors$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryColors$MH,"XQueryColors");
    }
    public static int XQueryColors ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XQueryColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryExtension$MH,"XQueryExtension");
    }
    public static int XQueryExtension ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XQueryExtension$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$46.XQueryKeymap$MH,"XQueryKeymap");
    }
    public static int XQueryKeymap ( Addressable x0,  Addressable x1) {
        var mh$ = XQueryKeymap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryPointer$MH,"XQueryPointer");
    }
    public static int XQueryPointer ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XQueryPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents$MH,"XQueryTextExtents");
    }
    public static int XQueryTextExtents ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = XQueryTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTextExtents16$MH,"XQueryTextExtents16");
    }
    public static int XQueryTextExtents16 ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = XQueryTextExtents16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XQueryTree$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XQueryTree$MH,"XQueryTree");
    }
    public static int XQueryTree ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = XQueryTree$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRaiseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XRaiseWindow$MH,"XRaiseWindow");
    }
    public static int XRaiseWindow ( Addressable x0,  long x1) {
        var mh$ = XRaiseWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$47.XReadBitmapFile$MH,"XReadBitmapFile");
    }
    public static int XReadBitmapFile ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = XReadBitmapFile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReadBitmapFileData$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XReadBitmapFileData$MH,"XReadBitmapFileData");
    }
    public static int XReadBitmapFileData ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = XReadBitmapFileData$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRebindKeysym$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRebindKeysym$MH,"XRebindKeysym");
    }
    public static int XRebindKeysym ( Addressable x0,  long x1,  Addressable x2,  int x3,  Addressable x4,  int x5) {
        var mh$ = XRebindKeysym$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRecolorCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRecolorCursor$MH,"XRecolorCursor");
    }
    public static int XRecolorCursor ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XRecolorCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRefreshKeyboardMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRefreshKeyboardMapping$MH,"XRefreshKeyboardMapping");
    }
    public static int XRefreshKeyboardMapping ( Addressable x0) {
        var mh$ = XRefreshKeyboardMapping$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveFromSaveSet$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRemoveFromSaveSet$MH,"XRemoveFromSaveSet");
    }
    public static int XRemoveFromSaveSet ( Addressable x0,  long x1) {
        var mh$ = XRemoveFromSaveSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHost$MH() {
        return RuntimeHelper.requireNonNull(constants$48.XRemoveHost$MH,"XRemoveHost");
    }
    public static int XRemoveHost ( Addressable x0,  Addressable x1) {
        var mh$ = XRemoveHost$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveHosts$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRemoveHosts$MH,"XRemoveHosts");
    }
    public static int XRemoveHosts ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XRemoveHosts$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XReparentWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XReparentWindow$MH,"XReparentWindow");
    }
    public static int XReparentWindow ( Addressable x0,  long x1,  long x2,  int x3,  int x4) {
        var mh$ = XReparentWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XResetScreenSaver$MH,"XResetScreenSaver");
    }
    public static int XResetScreenSaver ( Addressable x0) {
        var mh$ = XResetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XResizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XResizeWindow$MH,"XResizeWindow");
    }
    public static int XResizeWindow ( Addressable x0,  long x1,  int x2,  int x3) {
        var mh$ = XResizeWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRestackWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRestackWindows$MH,"XRestackWindows");
    }
    public static int XRestackWindows ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XRestackWindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$49.XRotateBuffers$MH,"XRotateBuffers");
    }
    public static int XRotateBuffers ( Addressable x0,  int x1) {
        var mh$ = XRotateBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRotateWindowProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XRotateWindowProperties$MH,"XRotateWindowProperties");
    }
    public static int XRotateWindowProperties ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4) {
        var mh$ = XRotateWindowProperties$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XScreenCount$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XScreenCount$MH,"XScreenCount");
    }
    public static int XScreenCount ( Addressable x0) {
        var mh$ = XScreenCount$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSelectInput$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSelectInput$MH,"XSelectInput");
    }
    public static int XSelectInput ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSelectInput$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSendEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSendEvent$MH,"XSendEvent");
    }
    public static int XSendEvent ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4) {
        var mh$ = XSendEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAccessControl$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSetAccessControl$MH,"XSetAccessControl");
    }
    public static int XSetAccessControl ( Addressable x0,  int x1) {
        var mh$ = XSetAccessControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetArcMode$MH() {
        return RuntimeHelper.requireNonNull(constants$50.XSetArcMode$MH,"XSetArcMode");
    }
    public static int XSetArcMode ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetArcMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetBackground$MH,"XSetBackground");
    }
    public static int XSetBackground ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetBackground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipMask$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipMask$MH,"XSetClipMask");
    }
    public static int XSetClipMask ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetClipMask$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipOrigin$MH,"XSetClipOrigin");
    }
    public static int XSetClipOrigin ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = XSetClipOrigin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClipRectangles$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetClipRectangles$MH,"XSetClipRectangles");
    }
    public static int XSetClipRectangles ( Addressable x0,  Addressable x1,  int x2,  int x3,  Addressable x4,  int x5,  int x6) {
        var mh$ = XSetClipRectangles$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCloseDownMode$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetCloseDownMode$MH,"XSetCloseDownMode");
    }
    public static int XSetCloseDownMode ( Addressable x0,  int x1) {
        var mh$ = XSetCloseDownMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetCommand$MH() {
        return RuntimeHelper.requireNonNull(constants$51.XSetCommand$MH,"XSetCommand");
    }
    public static int XSetCommand ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XSetCommand$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetDashes$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetDashes$MH,"XSetDashes");
    }
    public static int XSetDashes ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = XSetDashes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillRule$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFillRule$MH,"XSetFillRule");
    }
    public static int XSetFillRule ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetFillRule$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFillStyle$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFillStyle$MH,"XSetFillStyle");
    }
    public static int XSetFillStyle ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetFillStyle$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFont$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFont$MH,"XSetFont");
    }
    public static int XSetFont ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFontPath$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetFontPath$MH,"XSetFontPath");
    }
    public static int XSetFontPath ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetFontPath$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetForeground$MH() {
        return RuntimeHelper.requireNonNull(constants$52.XSetForeground$MH,"XSetForeground");
    }
    public static int XSetForeground ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetForeground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetFunction$MH,"XSetFunction");
    }
    public static int XSetFunction ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetFunction$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetGraphicsExposures$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetGraphicsExposures$MH,"XSetGraphicsExposures");
    }
    public static int XSetGraphicsExposures ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetGraphicsExposures$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetIconName$MH,"XSetIconName");
    }
    public static int XSetIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetInputFocus$MH,"XSetInputFocus");
    }
    public static int XSetInputFocus ( Addressable x0,  long x1,  int x2,  long x3) {
        var mh$ = XSetInputFocus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLineAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetLineAttributes$MH,"XSetLineAttributes");
    }
    public static int XSetLineAttributes ( Addressable x0,  Addressable x1,  int x2,  int x3,  int x4,  int x5) {
        var mh$ = XSetLineAttributes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetModifierMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$53.XSetModifierMapping$MH,"XSetModifierMapping");
    }
    public static int XSetModifierMapping ( Addressable x0,  Addressable x1) {
        var mh$ = XSetModifierMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPlaneMask$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetPlaneMask$MH,"XSetPlaneMask");
    }
    public static int XSetPlaneMask ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetPlaneMask$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetPointerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetPointerMapping$MH,"XSetPointerMapping");
    }
    public static int XSetPointerMapping ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetPointerMapping$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetScreenSaver$MH,"XSetScreenSaver");
    }
    public static int XSetScreenSaver ( Addressable x0,  int x1,  int x2,  int x3,  int x4) {
        var mh$ = XSetScreenSaver$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSelectionOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetSelectionOwner$MH,"XSetSelectionOwner");
    }
    public static int XSetSelectionOwner ( Addressable x0,  long x1,  long x2,  long x3) {
        var mh$ = XSetSelectionOwner$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetState$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetState$MH,"XSetState");
    }
    public static int XSetState ( Addressable x0,  Addressable x1,  long x2,  long x3,  int x4,  long x5) {
        var mh$ = XSetState$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$54.XSetStipple$MH,"XSetStipple");
    }
    public static int XSetStipple ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetStipple$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSubwindowMode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetSubwindowMode$MH,"XSetSubwindowMode");
    }
    public static int XSetSubwindowMode ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XSetSubwindowMode$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTSOrigin$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetTSOrigin$MH,"XSetTSOrigin");
    }
    public static int XSetTSOrigin ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = XSetTSOrigin$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTile$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetTile$MH,"XSetTile");
    }
    public static int XSetTile ( Addressable x0,  Addressable x1,  long x2) {
        var mh$ = XSetTile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackground$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBackground$MH,"XSetWindowBackground");
    }
    public static int XSetWindowBackground ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetWindowBackground$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBackgroundPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBackgroundPixmap$MH,"XSetWindowBackgroundPixmap");
    }
    public static int XSetWindowBackgroundPixmap ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetWindowBackgroundPixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$55.XSetWindowBorder$MH,"XSetWindowBorder");
    }
    public static int XSetWindowBorder ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetWindowBorder$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderPixmap$MH,"XSetWindowBorderPixmap");
    }
    public static int XSetWindowBorderPixmap ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetWindowBorderPixmap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowBorderWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowBorderWidth$MH,"XSetWindowBorderWidth");
    }
    public static int XSetWindowBorderWidth ( Addressable x0,  long x1,  int x2) {
        var mh$ = XSetWindowBorderWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWindowColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XSetWindowColormap$MH,"XSetWindowColormap");
    }
    public static int XSetWindowColormap ( Addressable x0,  long x1,  long x2) {
        var mh$ = XSetWindowColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreBuffer$MH,"XStoreBuffer");
    }
    public static int XStoreBuffer ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = XStoreBuffer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreBytes$MH,"XStoreBytes");
    }
    public static int XStoreBytes ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XStoreBytes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColor$MH() {
        return RuntimeHelper.requireNonNull(constants$56.XStoreColor$MH,"XStoreColor");
    }
    public static int XStoreColor ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XStoreColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreColors$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreColors$MH,"XStoreColors");
    }
    public static int XStoreColors ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XStoreColors$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreName$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreName$MH,"XStoreName");
    }
    public static int XStoreName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XStoreName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStoreNamedColor$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XStoreNamedColor$MH,"XStoreNamedColor");
    }
    public static int XStoreNamedColor ( Addressable x0,  long x1,  Addressable x2,  long x3,  int x4) {
        var mh$ = XStoreNamedColor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSync$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XSync$MH,"XSync");
    }
    public static int XSync ( Addressable x0,  int x1) {
        var mh$ = XSync$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XTextExtents$MH,"XTextExtents");
    }
    public static int XTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6) {
        var mh$ = XTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextExtents16$MH() {
        return RuntimeHelper.requireNonNull(constants$57.XTextExtents16$MH,"XTextExtents16");
    }
    public static int XTextExtents16 ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  Addressable x5,  Addressable x6) {
        var mh$ = XTextExtents16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTextWidth$MH,"XTextWidth");
    }
    public static int XTextWidth ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XTextWidth$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextWidth16$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTextWidth16$MH,"XTextWidth16");
    }
    public static int XTextWidth16 ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XTextWidth16$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTranslateCoordinates$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XTranslateCoordinates$MH,"XTranslateCoordinates");
    }
    public static int XTranslateCoordinates ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  Addressable x5,  Addressable x6,  Addressable x7) {
        var mh$ = XTranslateCoordinates$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUndefineCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUndefineCursor$MH,"XUndefineCursor");
    }
    public static int XUndefineCursor ( Addressable x0,  long x1) {
        var mh$ = XUndefineCursor$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabButton$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUngrabButton$MH,"XUngrabButton");
    }
    public static int XUngrabButton ( Addressable x0,  int x1,  int x2,  long x3) {
        var mh$ = XUngrabButton$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKey$MH() {
        return RuntimeHelper.requireNonNull(constants$58.XUngrabKey$MH,"XUngrabKey");
    }
    public static int XUngrabKey ( Addressable x0,  int x1,  int x2,  long x3) {
        var mh$ = XUngrabKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabKeyboard$MH,"XUngrabKeyboard");
    }
    public static int XUngrabKeyboard ( Addressable x0,  long x1) {
        var mh$ = XUngrabKeyboard$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabPointer$MH,"XUngrabPointer");
    }
    public static int XUngrabPointer ( Addressable x0,  long x1) {
        var mh$ = XUngrabPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUngrabServer$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUngrabServer$MH,"XUngrabServer");
    }
    public static int XUngrabServer ( Addressable x0) {
        var mh$ = XUngrabServer$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUninstallColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUninstallColormap$MH,"XUninstallColormap");
    }
    public static int XUninstallColormap ( Addressable x0,  long x1) {
        var mh$ = XUninstallColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnloadFont$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUnloadFont$MH,"XUnloadFont");
    }
    public static int XUnloadFont ( Addressable x0,  long x1) {
        var mh$ = XUnloadFont$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapSubwindows$MH() {
        return RuntimeHelper.requireNonNull(constants$59.XUnmapSubwindows$MH,"XUnmapSubwindows");
    }
    public static int XUnmapSubwindows ( Addressable x0,  long x1) {
        var mh$ = XUnmapSubwindows$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnmapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XUnmapWindow$MH,"XUnmapWindow");
    }
    public static int XUnmapWindow ( Addressable x0,  long x1) {
        var mh$ = XUnmapWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVendorRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XVendorRelease$MH,"XVendorRelease");
    }
    public static int XVendorRelease ( Addressable x0) {
        var mh$ = XVendorRelease$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWarpPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWarpPointer$MH,"XWarpPointer");
    }
    public static int XWarpPointer ( Addressable x0,  long x1,  long x2,  int x3,  int x4,  int x5,  int x6,  int x7,  int x8) {
        var mh$ = XWarpPointer$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthMMOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWidthMMOfScreen$MH,"XWidthMMOfScreen");
    }
    public static int XWidthMMOfScreen ( Addressable x0) {
        var mh$ = XWidthMMOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWidthOfScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWidthOfScreen$MH,"XWidthOfScreen");
    }
    public static int XWidthOfScreen ( Addressable x0) {
        var mh$ = XWidthOfScreen$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWindowEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$60.XWindowEvent$MH,"XWindowEvent");
    }
    public static int XWindowEvent ( Addressable x0,  long x1,  long x2,  Addressable x3) {
        var mh$ = XWindowEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWriteBitmapFile$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XWriteBitmapFile$MH,"XWriteBitmapFile");
    }
    public static int XWriteBitmapFile ( Addressable x0,  Addressable x1,  long x2,  int x3,  int x4,  int x5,  int x6) {
        var mh$ = XWriteBitmapFile$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSupportsLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSupportsLocale$MH,"XSupportsLocale");
    }
    public static int XSupportsLocale () {
        var mh$ = XSupportsLocale$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetLocaleModifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSetLocaleModifiers$MH,"XSetLocaleModifiers");
    }
    public static MemoryAddress XSetLocaleModifiers ( Addressable x0) {
        var mh$ = XSetLocaleModifiers$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenOM$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XOpenOM$MH,"XOpenOM");
    }
    public static MemoryAddress XOpenOM ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XOpenOM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseOM$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XCloseOM$MH,"XCloseOM");
    }
    public static int XCloseOM ( Addressable x0) {
        var mh$ = XCloseOM$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$61.XSetOMValues$MH,"XSetOMValues");
    }
    public static MemoryAddress XSetOMValues ( Addressable x0, Object... x1) {
        var mh$ = XSetOMValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XGetOMValues$MH,"XGetOMValues");
    }
    public static MemoryAddress XGetOMValues ( Addressable x0, Object... x1) {
        var mh$ = XGetOMValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XDisplayOfOM$MH,"XDisplayOfOM");
    }
    public static MemoryAddress XDisplayOfOM ( Addressable x0) {
        var mh$ = XDisplayOfOM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfOM$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XLocaleOfOM$MH,"XLocaleOfOM");
    }
    public static MemoryAddress XLocaleOfOM ( Addressable x0) {
        var mh$ = XLocaleOfOM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XCreateOC$MH,"XCreateOC");
    }
    public static MemoryAddress XCreateOC ( Addressable x0, Object... x1) {
        var mh$ = XCreateOC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XDestroyOC$MH,"XDestroyOC");
    }
    public static void XDestroyOC ( Addressable x0) {
        var mh$ = XDestroyOC$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOMOfOC$MH() {
        return RuntimeHelper.requireNonNull(constants$62.XOMOfOC$MH,"XOMOfOC");
    }
    public static MemoryAddress XOMOfOC ( Addressable x0) {
        var mh$ = XOMOfOC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XSetOCValues$MH,"XSetOCValues");
    }
    public static MemoryAddress XSetOCValues ( Addressable x0, Object... x1) {
        var mh$ = XSetOCValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetOCValues$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XGetOCValues$MH,"XGetOCValues");
    }
    public static MemoryAddress XGetOCValues ( Addressable x0, Object... x1) {
        var mh$ = XGetOCValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XCreateFontSet$MH,"XCreateFontSet");
    }
    public static MemoryAddress XCreateFontSet ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = XCreateFontSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XFreeFontSet$MH,"XFreeFontSet");
    }
    public static void XFreeFontSet ( Addressable x0,  Addressable x1) {
        var mh$ = XFreeFontSet$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFontsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XFontsOfFontSet$MH,"XFontsOfFontSet");
    }
    public static int XFontsOfFontSet ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XFontsOfFontSet$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XBaseFontNameListOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$63.XBaseFontNameListOfFontSet$MH,"XBaseFontNameListOfFontSet");
    }
    public static MemoryAddress XBaseFontNameListOfFontSet ( Addressable x0) {
        var mh$ = XBaseFontNameListOfFontSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XLocaleOfFontSet$MH,"XLocaleOfFontSet");
    }
    public static MemoryAddress XLocaleOfFontSet ( Addressable x0) {
        var mh$ = XLocaleOfFontSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XContextDependentDrawing$MH,"XContextDependentDrawing");
    }
    public static int XContextDependentDrawing ( Addressable x0) {
        var mh$ = XContextDependentDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDirectionalDependentDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XDirectionalDependentDrawing$MH,"XDirectionalDependentDrawing");
    }
    public static int XDirectionalDependentDrawing ( Addressable x0) {
        var mh$ = XDirectionalDependentDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XContextualDrawing$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XContextualDrawing$MH,"XContextualDrawing");
    }
    public static int XContextualDrawing ( Addressable x0) {
        var mh$ = XContextualDrawing$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XExtentsOfFontSet$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XExtentsOfFontSet$MH,"XExtentsOfFontSet");
    }
    public static MemoryAddress XExtentsOfFontSet ( Addressable x0) {
        var mh$ = XExtentsOfFontSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$64.XmbTextEscapement$MH,"XmbTextEscapement");
    }
    public static int XmbTextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XmbTextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XwcTextEscapement$MH,"XwcTextEscapement");
    }
    public static int XwcTextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = XwcTextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextEscapement$MH() {
        return RuntimeHelper.requireNonNull(constants$65.Xutf8TextEscapement$MH,"Xutf8TextEscapement");
    }
    public static int Xutf8TextEscapement ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = Xutf8TextEscapement$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XmbTextExtents$MH,"XmbTextExtents");
    }
    public static int XmbTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = XmbTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XwcTextExtents$MH,"XwcTextExtents");
    }
    public static int XwcTextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = XwcTextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.Xutf8TextExtents$MH,"Xutf8TextExtents");
    }
    public static int Xutf8TextExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = Xutf8TextExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$65.XmbTextPerCharExtents$MH,"XmbTextPerCharExtents");
    }
    public static int XmbTextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XmbTextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XwcTextPerCharExtents$MH,"XwcTextPerCharExtents");
    }
    public static int XwcTextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XwcTextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPerCharExtents$MH() {
        return RuntimeHelper.requireNonNull(constants$66.Xutf8TextPerCharExtents$MH,"Xutf8TextPerCharExtents");
    }
    public static int Xutf8TextPerCharExtents ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = Xutf8TextPerCharExtents$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XmbDrawText$MH,"XmbDrawText");
    }
    public static void XmbDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XmbDrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XwcDrawText$MH,"XwcDrawText");
    }
    public static void XwcDrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = XwcDrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawText$MH() {
        return RuntimeHelper.requireNonNull(constants$66.Xutf8DrawText$MH,"Xutf8DrawText");
    }
    public static void Xutf8DrawText ( Addressable x0,  long x1,  Addressable x2,  int x3,  int x4,  Addressable x5,  int x6) {
        var mh$ = Xutf8DrawText$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$66.XmbDrawString$MH,"XmbDrawString");
    }
    public static void XmbDrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = XmbDrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XwcDrawString$MH,"XwcDrawString");
    }
    public static void XwcDrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = XwcDrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.Xutf8DrawString$MH,"Xutf8DrawString");
    }
    public static void Xutf8DrawString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = Xutf8DrawString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XmbDrawImageString$MH,"XmbDrawImageString");
    }
    public static void XmbDrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = XmbDrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcDrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XwcDrawImageString$MH,"XwcDrawImageString");
    }
    public static void XwcDrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = XwcDrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8DrawImageString$MH() {
        return RuntimeHelper.requireNonNull(constants$67.Xutf8DrawImageString$MH,"Xutf8DrawImageString");
    }
    public static void Xutf8DrawImageString ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  int x4,  int x5,  Addressable x6,  int x7) {
        var mh$ = Xutf8DrawImageString$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOpenIM$MH() {
        return RuntimeHelper.requireNonNull(constants$67.XOpenIM$MH,"XOpenIM");
    }
    public static MemoryAddress XOpenIM ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3) {
        var mh$ = XOpenIM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCloseIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XCloseIM$MH,"XCloseIM");
    }
    public static int XCloseIM ( Addressable x0) {
        var mh$ = XCloseIM$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XGetIMValues$MH,"XGetIMValues");
    }
    public static MemoryAddress XGetIMValues ( Addressable x0, Object... x1) {
        var mh$ = XGetIMValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIMValues$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XSetIMValues$MH,"XSetIMValues");
    }
    public static MemoryAddress XSetIMValues ( Addressable x0, Object... x1) {
        var mh$ = XSetIMValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDisplayOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XDisplayOfIM$MH,"XDisplayOfIM");
    }
    public static MemoryAddress XDisplayOfIM ( Addressable x0) {
        var mh$ = XDisplayOfIM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLocaleOfIM$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XLocaleOfIM$MH,"XLocaleOfIM");
    }
    public static MemoryAddress XLocaleOfIM ( Addressable x0) {
        var mh$ = XLocaleOfIM$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateIC$MH() {
        return RuntimeHelper.requireNonNull(constants$68.XCreateIC$MH,"XCreateIC");
    }
    public static MemoryAddress XCreateIC ( Addressable x0, Object... x1) {
        var mh$ = XCreateIC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XDestroyIC$MH,"XDestroyIC");
    }
    public static void XDestroyIC ( Addressable x0) {
        var mh$ = XDestroyIC$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XSetICFocus$MH,"XSetICFocus");
    }
    public static void XSetICFocus ( Addressable x0) {
        var mh$ = XSetICFocus$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnsetICFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XUnsetICFocus$MH,"XUnsetICFocus");
    }
    public static void XUnsetICFocus ( Addressable x0) {
        var mh$ = XUnsetICFocus$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XwcResetIC$MH,"XwcResetIC");
    }
    public static MemoryAddress XwcResetIC ( Addressable x0) {
        var mh$ = XwcResetIC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.XmbResetIC$MH,"XmbResetIC");
    }
    public static MemoryAddress XmbResetIC ( Addressable x0) {
        var mh$ = XmbResetIC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8ResetIC$MH() {
        return RuntimeHelper.requireNonNull(constants$69.Xutf8ResetIC$MH,"Xutf8ResetIC");
    }
    public static MemoryAddress Xutf8ResetIC ( Addressable x0) {
        var mh$ = Xutf8ResetIC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XSetICValues$MH,"XSetICValues");
    }
    public static MemoryAddress XSetICValues ( Addressable x0, Object... x1) {
        var mh$ = XSetICValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetICValues$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XGetICValues$MH,"XGetICValues");
    }
    public static MemoryAddress XGetICValues ( Addressable x0, Object... x1) {
        var mh$ = XGetICValues$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIMOfIC$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XIMOfIC$MH,"XIMOfIC");
    }
    public static MemoryAddress XIMOfIC ( Addressable x0) {
        var mh$ = XIMOfIC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFilterEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XFilterEvent$MH,"XFilterEvent");
    }
    public static int XFilterEvent ( Addressable x0,  long x1) {
        var mh$ = XFilterEvent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XmbLookupString$MH,"XmbLookupString");
    }
    public static int XmbLookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = XmbLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$70.XwcLookupString$MH,"XwcLookupString");
    }
    public static int XwcLookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = XwcLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8LookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$71.Xutf8LookupString$MH,"Xutf8LookupString");
    }
    public static int Xutf8LookupString ( Addressable x0,  Addressable x1,  Addressable x2,  int x3,  Addressable x4,  Addressable x5) {
        var mh$ = Xutf8LookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XVaCreateNestedList$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XVaCreateNestedList$MH,"XVaCreateNestedList");
    }
    public static MemoryAddress XVaCreateNestedList ( int x0, Object... x1) {
        var mh$ = XVaCreateNestedList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRegisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XRegisterIMInstantiateCallback$MH,"XRegisterIMInstantiateCallback");
    }
    public static int XRegisterIMInstantiateCallback ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = XRegisterIMInstantiateCallback$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnregisterIMInstantiateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$71.XUnregisterIMInstantiateCallback$MH,"XUnregisterIMInstantiateCallback");
    }
    public static int XUnregisterIMInstantiateCallback ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4,  Addressable x5) {
        var mh$ = XUnregisterIMInstantiateCallback$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XInternalConnectionNumbers$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XInternalConnectionNumbers$MH,"XInternalConnectionNumbers");
    }
    public static int XInternalConnectionNumbers ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XInternalConnectionNumbers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XProcessInternalConnection$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XProcessInternalConnection$MH,"XProcessInternalConnection");
    }
    public static void XProcessInternalConnection ( Addressable x0,  int x1) {
        var mh$ = XProcessInternalConnection$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAddConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XAddConnectionWatch$MH,"XAddConnectionWatch");
    }
    public static int XAddConnectionWatch ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XAddConnectionWatch$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRemoveConnectionWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XRemoveConnectionWatch$MH,"XRemoveConnectionWatch");
    }
    public static void XRemoveConnectionWatch ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XRemoveConnectionWatch$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetAuthorization$MH() {
        return RuntimeHelper.requireNonNull(constants$72.XSetAuthorization$MH,"XSetAuthorization");
    }
    public static void XSetAuthorization ( Addressable x0,  int x1,  Addressable x2,  int x3) {
        var mh$ = XSetAuthorization$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xmbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$72._Xmbtowc$MH,"_Xmbtowc");
    }
    public static int _Xmbtowc ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = _Xmbtowc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Xwctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$73._Xwctomb$MH,"_Xwctomb");
    }
    public static int _Xwctomb ( Addressable x0,  int x1) {
        var mh$ = _Xwctomb$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XGetEventData$MH,"XGetEventData");
    }
    public static int XGetEventData ( Addressable x0,  Addressable x1) {
        var mh$ = XGetEventData$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFreeEventData$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XFreeEventData$MH,"XFreeEventData");
    }
    public static void XFreeEventData ( Addressable x0,  Addressable x1) {
        var mh$ = XFreeEventData$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int XStringStyle() {
        return (int)0L;
    }
    public static int XCompoundTextStyle() {
        return (int)1L;
    }
    public static int XTextStyle() {
        return (int)2L;
    }
    public static int XStdICCTextStyle() {
        return (int)3L;
    }
    public static int XUTF8StringStyle() {
        return (int)4L;
    }
    public static OfAddress Region = Constants$root.C_POINTER$LAYOUT;
    public static OfInt XContext = Constants$root.C_INT$LAYOUT;
    public static MethodHandle XAllocClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocClassHint$MH,"XAllocClassHint");
    }
    public static MemoryAddress XAllocClassHint () {
        var mh$ = XAllocClassHint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocIconSize$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocIconSize$MH,"XAllocIconSize");
    }
    public static MemoryAddress XAllocIconSize () {
        var mh$ = XAllocIconSize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$73.XAllocSizeHints$MH,"XAllocSizeHints");
    }
    public static MemoryAddress XAllocSizeHints () {
        var mh$ = XAllocSizeHints$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XAllocStandardColormap$MH,"XAllocStandardColormap");
    }
    public static MemoryAddress XAllocStandardColormap () {
        var mh$ = XAllocStandardColormap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XAllocWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XAllocWMHints$MH,"XAllocWMHints");
    }
    public static MemoryAddress XAllocWMHints () {
        var mh$ = XAllocWMHints$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XClipBox$MH,"XClipBox");
    }
    public static int XClipBox ( Addressable x0,  Addressable x1) {
        var mh$ = XClipBox$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XCreateRegion$MH,"XCreateRegion");
    }
    public static MemoryAddress XCreateRegion () {
        var mh$ = XCreateRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDefaultString$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XDefaultString$MH,"XDefaultString");
    }
    public static MemoryAddress XDefaultString () {
        var mh$ = XDefaultString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$74.XDeleteContext$MH,"XDeleteContext");
    }
    public static int XDeleteContext ( Addressable x0,  long x1,  int x2) {
        var mh$ = XDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XDestroyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XDestroyRegion$MH,"XDestroyRegion");
    }
    public static int XDestroyRegion ( Addressable x0) {
        var mh$ = XDestroyRegion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEmptyRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XEmptyRegion$MH,"XEmptyRegion");
    }
    public static int XEmptyRegion ( Addressable x0) {
        var mh$ = XEmptyRegion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XEqualRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XEqualRegion$MH,"XEqualRegion");
    }
    public static int XEqualRegion ( Addressable x0,  Addressable x1) {
        var mh$ = XEqualRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XFindContext$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XFindContext$MH,"XFindContext");
    }
    public static int XFindContext ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = XFindContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XGetClassHint$MH,"XGetClassHint");
    }
    public static int XGetClassHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetClassHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$75.XGetIconSizes$MH,"XGetIconSizes");
    }
    public static int XGetIconSizes ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetIconSizes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetNormalHints$MH,"XGetNormalHints");
    }
    public static int XGetNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetRGBColormaps$MH,"XGetRGBColormaps");
    }
    public static int XGetRGBColormaps ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4) {
        var mh$ = XGetRGBColormaps$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetSizeHints$MH,"XGetSizeHints");
    }
    public static int XGetSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XGetSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetStandardColormap$MH,"XGetStandardColormap");
    }
    public static int XGetStandardColormap ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XGetStandardColormap$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetTextProperty$MH,"XGetTextProperty");
    }
    public static int XGetTextProperty ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XGetTextProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$76.XGetVisualInfo$MH,"XGetVisualInfo");
    }
    public static MemoryAddress XGetVisualInfo ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetVisualInfo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMClientMachine$MH,"XGetWMClientMachine");
    }
    public static int XGetWMClientMachine ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetWMClientMachine$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMHints$MH,"XGetWMHints");
    }
    public static MemoryAddress XGetWMHints ( Addressable x0,  long x1) {
        var mh$ = XGetWMHints$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMIconName$MH,"XGetWMIconName");
    }
    public static int XGetWMIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetWMIconName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMName$MH,"XGetWMName");
    }
    public static int XGetWMName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetWMName$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMNormalHints$MH,"XGetWMNormalHints");
    }
    public static int XGetWMNormalHints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3) {
        var mh$ = XGetWMNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$77.XGetWMSizeHints$MH,"XGetWMSizeHints");
    }
    public static int XGetWMSizeHints ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4) {
        var mh$ = XGetWMSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XGetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XGetZoomHints$MH,"XGetZoomHints");
    }
    public static int XGetZoomHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XGetZoomHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XIntersectRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XIntersectRegion$MH,"XIntersectRegion");
    }
    public static int XIntersectRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XIntersectRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XConvertCase$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XConvertCase$MH,"XConvertCase");
    }
    public static void XConvertCase ( long x0,  Addressable x1,  Addressable x2) {
        var mh$ = XConvertCase$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XLookupString$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XLookupString$MH,"XLookupString");
    }
    public static int XLookupString ( Addressable x0,  Addressable x1,  int x2,  Addressable x3,  Addressable x4) {
        var mh$ = XLookupString$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XMatchVisualInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XMatchVisualInfo$MH,"XMatchVisualInfo");
    }
    public static int XMatchVisualInfo ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = XMatchVisualInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XOffsetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$78.XOffsetRegion$MH,"XOffsetRegion");
    }
    public static int XOffsetRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = XOffsetRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPointInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XPointInRegion$MH,"XPointInRegion");
    }
    public static int XPointInRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = XPointInRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XPolygonRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XPolygonRegion$MH,"XPolygonRegion");
    }
    public static MemoryAddress XPolygonRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = XPolygonRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XRectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XRectInRegion$MH,"XRectInRegion");
    }
    public static int XRectInRegion ( Addressable x0,  int x1,  int x2,  int x3,  int x4) {
        var mh$ = XRectInRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSaveContext$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSaveContext$MH,"XSaveContext");
    }
    public static int XSaveContext ( Addressable x0,  long x1,  int x2,  Addressable x3) {
        var mh$ = XSaveContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetClassHint$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSetClassHint$MH,"XSetClassHint");
    }
    public static int XSetClassHint ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetClassHint$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetIconSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$79.XSetIconSizes$MH,"XSetIconSizes");
    }
    public static int XSetIconSizes ( Addressable x0,  long x1,  Addressable x2,  int x3) {
        var mh$ = XSetIconSizes$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetNormalHints$MH,"XSetNormalHints");
    }
    public static int XSetNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetNormalHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRGBColormaps$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetRGBColormaps$MH,"XSetRGBColormaps");
    }
    public static void XSetRGBColormaps ( Addressable x0,  long x1,  Addressable x2,  int x3,  long x4) {
        var mh$ = XSetRGBColormaps$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetSizeHints$MH,"XSetSizeHints");
    }
    public static int XSetSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XSetSizeHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetStandardProperties$MH,"XSetStandardProperties");
    }
    public static int XSetStandardProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  long x4,  Addressable x5,  int x6,  Addressable x7) {
        var mh$ = XSetStandardProperties$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetTextProperty$MH,"XSetTextProperty");
    }
    public static void XSetTextProperty ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XSetTextProperty$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMClientMachine$MH() {
        return RuntimeHelper.requireNonNull(constants$80.XSetWMClientMachine$MH,"XSetWMClientMachine");
    }
    public static void XSetWMClientMachine ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetWMClientMachine$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMHints$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMHints$MH,"XSetWMHints");
    }
    public static int XSetWMHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetWMHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMIconName$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMIconName$MH,"XSetWMIconName");
    }
    public static void XSetWMIconName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetWMIconName$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMName$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMName$MH,"XSetWMName");
    }
    public static void XSetWMName ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetWMName$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMNormalHints$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMNormalHints$MH,"XSetWMNormalHints");
    }
    public static void XSetWMNormalHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetWMNormalHints$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XSetWMProperties$MH,"XSetWMProperties");
    }
    public static void XSetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XSetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbSetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$81.XmbSetWMProperties$MH,"XmbSetWMProperties");
    }
    public static void XmbSetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = XmbSetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8SetWMProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$82.Xutf8SetWMProperties$MH,"Xutf8SetWMProperties");
    }
    public static void Xutf8SetWMProperties ( Addressable x0,  long x1,  Addressable x2,  Addressable x3,  Addressable x4,  int x5,  Addressable x6,  Addressable x7,  Addressable x8) {
        var mh$ = Xutf8SetWMProperties$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetWMSizeHints$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetWMSizeHints$MH,"XSetWMSizeHints");
    }
    public static void XSetWMSizeHints ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XSetWMSizeHints$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetRegion$MH,"XSetRegion");
    }
    public static int XSetRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XSetRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetStandardColormap$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetStandardColormap$MH,"XSetStandardColormap");
    }
    public static void XSetStandardColormap ( Addressable x0,  long x1,  Addressable x2,  long x3) {
        var mh$ = XSetStandardColormap$MH();
        try {
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSetZoomHints$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XSetZoomHints$MH,"XSetZoomHints");
    }
    public static int XSetZoomHints ( Addressable x0,  long x1,  Addressable x2) {
        var mh$ = XSetZoomHints$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XShrinkRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$82.XShrinkRegion$MH,"XShrinkRegion");
    }
    public static int XShrinkRegion ( Addressable x0,  int x1,  int x2) {
        var mh$ = XShrinkRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XStringListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XStringListToTextProperty$MH,"XStringListToTextProperty");
    }
    public static int XStringListToTextProperty ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = XStringListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XSubtractRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XSubtractRegion$MH,"XSubtractRegion");
    }
    public static int XSubtractRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XSubtractRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XmbTextListToTextProperty$MH,"XmbTextListToTextProperty");
    }
    public static int XmbTextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = XmbTextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XwcTextListToTextProperty$MH,"XwcTextListToTextProperty");
    }
    public static int XwcTextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = XwcTextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextListToTextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$83.Xutf8TextListToTextProperty$MH,"Xutf8TextListToTextProperty");
    }
    public static int Xutf8TextListToTextProperty ( Addressable display,  Addressable list,  int count,  int style,  Addressable text_prop_return) {
        var mh$ = Xutf8TextListToTextProperty$MH();
        try {
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcFreeStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$83.XwcFreeStringList$MH,"XwcFreeStringList");
    }
    public static void XwcFreeStringList ( Addressable list) {
        var mh$ = XwcFreeStringList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XTextPropertyToStringList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XTextPropertyToStringList$MH,"XTextPropertyToStringList");
    }
    public static int XTextPropertyToStringList ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XTextPropertyToStringList$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XmbTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XmbTextPropertyToTextList$MH,"XmbTextPropertyToTextList");
    }
    public static int XmbTextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = XmbTextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XwcTextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XwcTextPropertyToTextList$MH,"XwcTextPropertyToTextList");
    }
    public static int XwcTextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = XwcTextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Xutf8TextPropertyToTextList$MH() {
        return RuntimeHelper.requireNonNull(constants$84.Xutf8TextPropertyToTextList$MH,"Xutf8TextPropertyToTextList");
    }
    public static int Xutf8TextPropertyToTextList ( Addressable display,  Addressable text_prop,  Addressable list_return,  Addressable count_return) {
        var mh$ = Xutf8TextPropertyToTextList$MH();
        try {
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRectWithRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XUnionRectWithRegion$MH,"XUnionRectWithRegion");
    }
    public static int XUnionRectWithRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XUnionRectWithRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XUnionRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.XUnionRegion$MH,"XUnionRegion");
    }
    public static int XUnionRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XUnionRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XWMGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$85.XWMGeometry$MH,"XWMGeometry");
    }
    public static int XWMGeometry ( Addressable x0,  int x1,  Addressable x2,  Addressable x3,  int x4,  Addressable x5,  Addressable x6,  Addressable x7,  Addressable x8,  Addressable x9,  Addressable x10) {
        var mh$ = XWMGeometry$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle XXorRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$85.XXorRegion$MH,"XXorRegion");
    }
    public static int XXorRegion ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = XXorRegion$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLogicOp$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glLogicOp$MH,"glLogicOp");
    }
    public static void glLogicOp ( int opcode) {
        var mh$ = glLogicOp$MH();
        try {
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSize$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glPointSize$MH,"glPointSize");
    }
    public static void glPointSize ( float size) {
        var mh$ = glPointSize$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineWidth$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glLineWidth$MH,"glLineWidth");
    }
    public static void glLineWidth ( float width) {
        var mh$ = glLineWidth$MH();
        try {
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLineStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glLineStipple$MH,"glLineStipple");
    }
    public static void glLineStipple ( int factor,  short pattern) {
        var mh$ = glLineStipple$MH();
        try {
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonMode$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glPolygonMode$MH,"glPolygonMode");
    }
    public static void glPolygonMode ( int face,  int mode) {
        var mh$ = glPolygonMode$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonOffset$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glPolygonOffset$MH,"glPolygonOffset");
    }
    public static void glPolygonOffset ( float factor,  float units) {
        var mh$ = glPolygonOffset$MH();
        try {
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glPolygonStipple$MH,"glPolygonStipple");
    }
    public static void glPolygonStipple ( Addressable mask) {
        var mh$ = glPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScissor$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glScissor$MH,"glScissor");
    }
    public static void glScissor ( int x,  int y,  int width,  int height) {
        var mh$ = glScissor$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glReadBuffer$MH,"glReadBuffer");
    }
    public static void glReadBuffer ( int mode) {
        var mh$ = glReadBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glIsEnabled$MH,"glIsEnabled");
    }
    public static byte glIsEnabled ( int cap) {
        var mh$ = glIsEnabled$MH();
        try {
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int cap) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int cap) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glPushAttrib$MH,"glPushAttrib");
    }
    public static void glPushAttrib ( int mask) {
        var mh$ = glPushAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glPopAttrib$MH,"glPopAttrib");
    }
    public static void glPopAttrib () {
        var mh$ = glPopAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glPushClientAttrib$MH,"glPushClientAttrib");
    }
    public static void glPushClientAttrib ( int mask) {
        var mh$ = glPushClientAttrib$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopClientAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glPopClientAttrib$MH,"glPopClientAttrib");
    }
    public static void glPopClientAttrib () {
        var mh$ = glPopClientAttrib$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderMode$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glRenderMode$MH,"glRenderMode");
    }
    public static int glRenderMode ( int mode) {
        var mh$ = glRenderMode$MH();
        try {
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double near_val,  double far_val) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMatrixMode$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glMatrixMode$MH,"glMatrixMode");
    }
    public static void glMatrixMode ( int mode) {
        var mh$ = glMatrixMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glOrtho$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glOrtho$MH,"glOrtho");
    }
    public static void glOrtho ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glOrtho$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double near_val,  double far_val) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glViewport$MH,"glViewport");
    }
    public static void glViewport ( int x,  int y,  int width,  int height) {
        var mh$ = glViewport$MH();
        try {
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glPushMatrix$MH,"glPushMatrix");
    }
    public static void glPushMatrix () {
        var mh$ = glPushMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glPopMatrix$MH,"glPopMatrix");
    }
    public static void glPopMatrix () {
        var mh$ = glPopMatrix$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadIdentity$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glLoadIdentity$MH,"glLoadIdentity");
    }
    public static void glLoadIdentity () {
        var mh$ = glLoadIdentity$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glLoadMatrixd$MH,"glLoadMatrixd");
    }
    public static void glLoadMatrixd ( Addressable m) {
        var mh$ = glLoadMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glLoadMatrixf$MH,"glLoadMatrixf");
    }
    public static void glLoadMatrixf ( Addressable m) {
        var mh$ = glLoadMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glMultMatrixd$MH,"glMultMatrixd");
    }
    public static void glMultMatrixd ( Addressable m) {
        var mh$ = glMultMatrixd$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glMultMatrixf$MH,"glMultMatrixf");
    }
    public static void glMultMatrixf ( Addressable m) {
        var mh$ = glMultMatrixf$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotated$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glRotated$MH,"glRotated");
    }
    public static void glRotated ( double angle,  double x,  double y,  double z) {
        var mh$ = glRotated$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRotatef$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glRotatef$MH,"glRotatef");
    }
    public static void glRotatef ( float angle,  float x,  float y,  float z) {
        var mh$ = glRotatef$MH();
        try {
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glScaled$MH,"glScaled");
    }
    public static void glScaled ( double x,  double y,  double z) {
        var mh$ = glScaled$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glScalef$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glScalef$MH,"glScalef");
    }
    public static void glScalef ( float x,  float y,  float z) {
        var mh$ = glScalef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslated$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glTranslated$MH,"glTranslated");
    }
    public static void glTranslated ( double x,  double y,  double z) {
        var mh$ = glTranslated$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTranslatef$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glTranslatef$MH,"glTranslatef");
    }
    public static void glTranslatef ( float x,  float y,  float z) {
        var mh$ = glTranslatef$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsList$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glIsList$MH,"glIsList");
    }
    public static byte glIsList ( int list) {
        var mh$ = glIsList$MH();
        try {
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNewList$MH() {
        return RuntimeHelper.requireNonNull(constants$96.glNewList$MH,"glNewList");
    }
    public static void glNewList ( int list,  int mode) {
        var mh$ = glNewList$MH();
        try {
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glListBase$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glListBase$MH,"glListBase");
    }
    public static void glListBase ( int base) {
        var mh$ = glListBase$MH();
        try {
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$97.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2d$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex2d$MH,"glVertex2d");
    }
    public static void glVertex2d ( double x,  double y) {
        var mh$ = glVertex2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2f$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex2f$MH,"glVertex2f");
    }
    public static void glVertex2f ( float x,  float y) {
        var mh$ = glVertex2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2i$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex2i$MH,"glVertex2i");
    }
    public static void glVertex2i ( int x,  int y) {
        var mh$ = glVertex2i$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2s$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex2s$MH,"glVertex2s");
    }
    public static void glVertex2s ( short x,  short y) {
        var mh$ = glVertex2s$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3d$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex3d$MH,"glVertex3d");
    }
    public static void glVertex3d ( double x,  double y,  double z) {
        var mh$ = glVertex3d$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3f$MH() {
        return RuntimeHelper.requireNonNull(constants$98.glVertex3f$MH,"glVertex3f");
    }
    public static void glVertex3f ( float x,  float y,  float z) {
        var mh$ = glVertex3f$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3i$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex3i$MH,"glVertex3i");
    }
    public static void glVertex3i ( int x,  int y,  int z) {
        var mh$ = glVertex3i$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3s$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex3s$MH,"glVertex3s");
    }
    public static void glVertex3s ( short x,  short y,  short z) {
        var mh$ = glVertex3s$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4d$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex4d$MH,"glVertex4d");
    }
    public static void glVertex4d ( double x,  double y,  double z,  double w) {
        var mh$ = glVertex4d$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4f$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex4f$MH,"glVertex4f");
    }
    public static void glVertex4f ( float x,  float y,  float z,  float w) {
        var mh$ = glVertex4f$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4i$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex4i$MH,"glVertex4i");
    }
    public static void glVertex4i ( int x,  int y,  int z,  int w) {
        var mh$ = glVertex4i$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4s$MH() {
        return RuntimeHelper.requireNonNull(constants$99.glVertex4s$MH,"glVertex4s");
    }
    public static void glVertex4s ( short x,  short y,  short z,  short w) {
        var mh$ = glVertex4s$MH();
        try {
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex2dv$MH,"glVertex2dv");
    }
    public static void glVertex2dv ( Addressable v) {
        var mh$ = glVertex2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex2fv$MH,"glVertex2fv");
    }
    public static void glVertex2fv ( Addressable v) {
        var mh$ = glVertex2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex2iv$MH,"glVertex2iv");
    }
    public static void glVertex2iv ( Addressable v) {
        var mh$ = glVertex2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex2sv$MH,"glVertex2sv");
    }
    public static void glVertex2sv ( Addressable v) {
        var mh$ = glVertex2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex3dv$MH,"glVertex3dv");
    }
    public static void glVertex3dv ( Addressable v) {
        var mh$ = glVertex3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$100.glVertex3fv$MH,"glVertex3fv");
    }
    public static void glVertex3fv ( Addressable v) {
        var mh$ = glVertex3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex3iv$MH,"glVertex3iv");
    }
    public static void glVertex3iv ( Addressable v) {
        var mh$ = glVertex3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex3sv$MH,"glVertex3sv");
    }
    public static void glVertex3sv ( Addressable v) {
        var mh$ = glVertex3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex4dv$MH,"glVertex4dv");
    }
    public static void glVertex4dv ( Addressable v) {
        var mh$ = glVertex4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex4fv$MH,"glVertex4fv");
    }
    public static void glVertex4fv ( Addressable v) {
        var mh$ = glVertex4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex4iv$MH,"glVertex4iv");
    }
    public static void glVertex4iv ( Addressable v) {
        var mh$ = glVertex4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertex4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$101.glVertex4sv$MH,"glVertex4sv");
    }
    public static void glVertex4sv ( Addressable v) {
        var mh$ = glVertex4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3b$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3b$MH,"glNormal3b");
    }
    public static void glNormal3b ( byte nx,  byte ny,  byte nz) {
        var mh$ = glNormal3b$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3d$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3d$MH,"glNormal3d");
    }
    public static void glNormal3d ( double nx,  double ny,  double nz) {
        var mh$ = glNormal3d$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3f$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3f$MH,"glNormal3f");
    }
    public static void glNormal3f ( float nx,  float ny,  float nz) {
        var mh$ = glNormal3f$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3i$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3i$MH,"glNormal3i");
    }
    public static void glNormal3i ( int nx,  int ny,  int nz) {
        var mh$ = glNormal3i$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3s$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3s$MH,"glNormal3s");
    }
    public static void glNormal3s ( short nx,  short ny,  short nz) {
        var mh$ = glNormal3s$MH();
        try {
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$102.glNormal3bv$MH,"glNormal3bv");
    }
    public static void glNormal3bv ( Addressable v) {
        var mh$ = glNormal3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glNormal3dv$MH,"glNormal3dv");
    }
    public static void glNormal3dv ( Addressable v) {
        var mh$ = glNormal3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glNormal3fv$MH,"glNormal3fv");
    }
    public static void glNormal3fv ( Addressable v) {
        var mh$ = glNormal3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glNormal3iv$MH,"glNormal3iv");
    }
    public static void glNormal3iv ( Addressable v) {
        var mh$ = glNormal3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormal3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glNormal3sv$MH,"glNormal3sv");
    }
    public static void glNormal3sv ( Addressable v) {
        var mh$ = glNormal3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$103.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$104.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$105.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$106.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$107.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$108.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$109.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glTexCoord1d$MH,"glTexCoord1d");
    }
    public static void glTexCoord1d ( double s) {
        var mh$ = glTexCoord1d$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$110.glTexCoord1f$MH,"glTexCoord1f");
    }
    public static void glTexCoord1f ( float s) {
        var mh$ = glTexCoord1f$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord1i$MH,"glTexCoord1i");
    }
    public static void glTexCoord1i ( int s) {
        var mh$ = glTexCoord1i$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord1s$MH,"glTexCoord1s");
    }
    public static void glTexCoord1s ( short s) {
        var mh$ = glTexCoord1s$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord2d$MH,"glTexCoord2d");
    }
    public static void glTexCoord2d ( double s,  double t) {
        var mh$ = glTexCoord2d$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord2f$MH,"glTexCoord2f");
    }
    public static void glTexCoord2f ( float s,  float t) {
        var mh$ = glTexCoord2f$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord2i$MH,"glTexCoord2i");
    }
    public static void glTexCoord2i ( int s,  int t) {
        var mh$ = glTexCoord2i$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$111.glTexCoord2s$MH,"glTexCoord2s");
    }
    public static void glTexCoord2s ( short s,  short t) {
        var mh$ = glTexCoord2s$MH();
        try {
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord3d$MH,"glTexCoord3d");
    }
    public static void glTexCoord3d ( double s,  double t,  double r) {
        var mh$ = glTexCoord3d$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord3f$MH,"glTexCoord3f");
    }
    public static void glTexCoord3f ( float s,  float t,  float r) {
        var mh$ = glTexCoord3f$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord3i$MH,"glTexCoord3i");
    }
    public static void glTexCoord3i ( int s,  int t,  int r) {
        var mh$ = glTexCoord3i$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord3s$MH,"glTexCoord3s");
    }
    public static void glTexCoord3s ( short s,  short t,  short r) {
        var mh$ = glTexCoord3s$MH();
        try {
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord4d$MH,"glTexCoord4d");
    }
    public static void glTexCoord4d ( double s,  double t,  double r,  double q) {
        var mh$ = glTexCoord4d$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$112.glTexCoord4f$MH,"glTexCoord4f");
    }
    public static void glTexCoord4f ( float s,  float t,  float r,  float q) {
        var mh$ = glTexCoord4f$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord4i$MH,"glTexCoord4i");
    }
    public static void glTexCoord4i ( int s,  int t,  int r,  int q) {
        var mh$ = glTexCoord4i$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord4s$MH,"glTexCoord4s");
    }
    public static void glTexCoord4s ( short s,  short t,  short r,  short q) {
        var mh$ = glTexCoord4s$MH();
        try {
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord1dv$MH,"glTexCoord1dv");
    }
    public static void glTexCoord1dv ( Addressable v) {
        var mh$ = glTexCoord1dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord1fv$MH,"glTexCoord1fv");
    }
    public static void glTexCoord1fv ( Addressable v) {
        var mh$ = glTexCoord1fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord1iv$MH,"glTexCoord1iv");
    }
    public static void glTexCoord1iv ( Addressable v) {
        var mh$ = glTexCoord1iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$113.glTexCoord1sv$MH,"glTexCoord1sv");
    }
    public static void glTexCoord1sv ( Addressable v) {
        var mh$ = glTexCoord1sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord2dv$MH,"glTexCoord2dv");
    }
    public static void glTexCoord2dv ( Addressable v) {
        var mh$ = glTexCoord2dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord2fv$MH,"glTexCoord2fv");
    }
    public static void glTexCoord2fv ( Addressable v) {
        var mh$ = glTexCoord2fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord2iv$MH,"glTexCoord2iv");
    }
    public static void glTexCoord2iv ( Addressable v) {
        var mh$ = glTexCoord2iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord2sv$MH,"glTexCoord2sv");
    }
    public static void glTexCoord2sv ( Addressable v) {
        var mh$ = glTexCoord2sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord3dv$MH,"glTexCoord3dv");
    }
    public static void glTexCoord3dv ( Addressable v) {
        var mh$ = glTexCoord3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$114.glTexCoord3fv$MH,"glTexCoord3fv");
    }
    public static void glTexCoord3fv ( Addressable v) {
        var mh$ = glTexCoord3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord3iv$MH,"glTexCoord3iv");
    }
    public static void glTexCoord3iv ( Addressable v) {
        var mh$ = glTexCoord3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord3sv$MH,"glTexCoord3sv");
    }
    public static void glTexCoord3sv ( Addressable v) {
        var mh$ = glTexCoord3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord4dv$MH,"glTexCoord4dv");
    }
    public static void glTexCoord4dv ( Addressable v) {
        var mh$ = glTexCoord4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord4fv$MH,"glTexCoord4fv");
    }
    public static void glTexCoord4fv ( Addressable v) {
        var mh$ = glTexCoord4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord4iv$MH,"glTexCoord4iv");
    }
    public static void glTexCoord4iv ( Addressable v) {
        var mh$ = glTexCoord4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$115.glTexCoord4sv$MH,"glTexCoord4sv");
    }
    public static void glTexCoord4sv ( Addressable v) {
        var mh$ = glTexCoord4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2d$MH() {
        return RuntimeHelper.requireNonNull(constants$116.glRasterPos2d$MH,"glRasterPos2d");
    }
    public static void glRasterPos2d ( double x,  double y) {
        var mh$ = glRasterPos2d$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos2f$MH() {
        return RuntimeHelper.requireNonNull(constants$116.glRasterPos2f$MH,"glRasterPos2f");
    }
    public static void glRasterPos2f ( float x,  float y) {
        var mh$ = glRasterPos2f$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


