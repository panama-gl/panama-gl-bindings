// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLPATHGLYPHINDEXRANGENVPROC {

    int apply(int fontTarget, java.lang.foreign.MemoryAddress fontName, int fontStyle, int pathParameterTemplate, float emScale, java.lang.foreign.MemoryAddress baseAndCount);
    static MemorySegment allocate(PFNGLPATHGLYPHINDEXRANGENVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLPATHGLYPHINDEXRANGENVPROC.class, fi, constants$889.PFNGLPATHGLYPHINDEXRANGENVPROC$FUNC, session);
    }
    static PFNGLPATHGLYPHINDEXRANGENVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _fontTarget, java.lang.foreign.MemoryAddress _fontName, int _fontStyle, int _pathParameterTemplate, float _emScale, java.lang.foreign.MemoryAddress _baseAndCount) -> {
            try {
                return (int)constants$889.PFNGLPATHGLYPHINDEXRANGENVPROC$MH.invokeExact((Addressable)symbol, _fontTarget, (java.lang.foreign.Addressable)_fontName, _fontStyle, _pathParameterTemplate, _emScale, (java.lang.foreign.Addressable)_baseAndCount);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


