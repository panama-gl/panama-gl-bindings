// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLASYNCCOPYBUFFERSUBDATANVXPROC {

    int apply(int waitSemaphoreCount, java.lang.foreign.MemoryAddress waitSemaphoreArray, java.lang.foreign.MemoryAddress fenceValueArray, int readGpu, int writeGpuMask, int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size, int signalSemaphoreCount, java.lang.foreign.MemoryAddress signalSemaphoreArray, java.lang.foreign.MemoryAddress signalValueArray);
    static MemorySegment allocate(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC.class, fi, constants$807.PFNGLASYNCCOPYBUFFERSUBDATANVXPROC$FUNC, session);
    }
    static PFNGLASYNCCOPYBUFFERSUBDATANVXPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _waitSemaphoreCount, java.lang.foreign.MemoryAddress _waitSemaphoreArray, java.lang.foreign.MemoryAddress _fenceValueArray, int _readGpu, int _writeGpuMask, int _readBuffer, int _writeBuffer, long _readOffset, long _writeOffset, long _size, int _signalSemaphoreCount, java.lang.foreign.MemoryAddress _signalSemaphoreArray, java.lang.foreign.MemoryAddress _signalValueArray) -> {
            try {
                return (int)constants$807.PFNGLASYNCCOPYBUFFERSUBDATANVXPROC$MH.invokeExact((Addressable)symbol, _waitSemaphoreCount, (java.lang.foreign.Addressable)_waitSemaphoreArray, (java.lang.foreign.Addressable)_fenceValueArray, _readGpu, _writeGpuMask, _readBuffer, _writeBuffer, _readOffset, _writeOffset, _size, _signalSemaphoreCount, (java.lang.foreign.Addressable)_signalSemaphoreArray, (java.lang.foreign.Addressable)_signalValueArray);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


