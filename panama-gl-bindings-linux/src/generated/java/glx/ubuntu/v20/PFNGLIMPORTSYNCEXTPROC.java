// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLIMPORTSYNCEXTPROC {

    java.lang.foreign.Addressable apply(int external_sync_type, long external_sync, int flags);
    static MemorySegment allocate(PFNGLIMPORTSYNCEXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLIMPORTSYNCEXTPROC.class, fi, constants$783.PFNGLIMPORTSYNCEXTPROC$FUNC, session);
    }
    static PFNGLIMPORTSYNCEXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _external_sync_type, long _external_sync, int _flags) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$783.PFNGLIMPORTSYNCEXTPROC$MH.invokeExact((Addressable)symbol, _external_sync_type, _external_sync, _flags);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


