// Generated by jextract

package glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC {

    void apply(long indirect, long drawcount, int maxdrawcount, int stride);
    static MemorySegment allocate(PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC.class, fi, constants$868.PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC$FUNC, session);
    }
    static PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (long _indirect, long _drawcount, int _maxdrawcount, int _stride) -> {
            try {
                constants$868.PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC$MH.invokeExact((Addressable)symbol, _indirect, _drawcount, _maxdrawcount, _stride);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


