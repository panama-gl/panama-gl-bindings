// Generated by jextract

package glx.linux.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union __GLXEvent {
 *     GLXPbufferClobberEvent glxpbufferclobber;
 *     GLXBufferSwapComplete glxbufferswapcomplete;
 *     long pad[24];
 * }
 * }
 */
public class __GLXEvent {

    __GLXEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        GLXPbufferClobberEvent.layout().withName("glxpbufferclobber"),
        GLXBufferSwapComplete.layout().withName("glxbufferswapcomplete"),
        MemoryLayout.sequenceLayout(24, glx_h.C_LONG).withName("pad")
    ).withName("__GLXEvent");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout glxpbufferclobber$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("glxpbufferclobber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GLXPbufferClobberEvent glxpbufferclobber
     * }
     */
    public static final GroupLayout glxpbufferclobber$layout() {
        return glxpbufferclobber$LAYOUT;
    }

    private static final long glxpbufferclobber$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GLXPbufferClobberEvent glxpbufferclobber
     * }
     */
    public static final long glxpbufferclobber$offset() {
        return glxpbufferclobber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GLXPbufferClobberEvent glxpbufferclobber
     * }
     */
    public static MemorySegment glxpbufferclobber(MemorySegment union) {
        return union.asSlice(glxpbufferclobber$OFFSET, glxpbufferclobber$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GLXPbufferClobberEvent glxpbufferclobber
     * }
     */
    public static void glxpbufferclobber(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, glxpbufferclobber$OFFSET, glxpbufferclobber$LAYOUT.byteSize());
    }

    private static final GroupLayout glxbufferswapcomplete$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("glxbufferswapcomplete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GLXBufferSwapComplete glxbufferswapcomplete
     * }
     */
    public static final GroupLayout glxbufferswapcomplete$layout() {
        return glxbufferswapcomplete$LAYOUT;
    }

    private static final long glxbufferswapcomplete$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GLXBufferSwapComplete glxbufferswapcomplete
     * }
     */
    public static final long glxbufferswapcomplete$offset() {
        return glxbufferswapcomplete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GLXBufferSwapComplete glxbufferswapcomplete
     * }
     */
    public static MemorySegment glxbufferswapcomplete(MemorySegment union) {
        return union.asSlice(glxbufferswapcomplete$OFFSET, glxbufferswapcomplete$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GLXBufferSwapComplete glxbufferswapcomplete
     * }
     */
    public static void glxbufferswapcomplete(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, glxbufferswapcomplete$OFFSET, glxbufferswapcomplete$LAYOUT.byteSize());
    }

    private static final SequenceLayout pad$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static final SequenceLayout pad$layout() {
        return pad$LAYOUT;
    }

    private static final long pad$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static final long pad$offset() {
        return pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static MemorySegment pad(MemorySegment union) {
        return union.asSlice(pad$OFFSET, pad$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static void pad(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, pad$OFFSET, pad$LAYOUT.byteSize());
    }

    private static long[] pad$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static long[] pad$dimensions() {
        return pad$DIMS;
    }
    private static final VarHandle pad$ELEM_HANDLE = pad$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static long pad(MemorySegment union, long index0) {
        return (long)pad$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * long pad[24]
     * }
     */
    public static void pad(MemorySegment union, long index0, long fieldValue) {
        pad$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

