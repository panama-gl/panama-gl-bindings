// Generated by jextract

package glxext.linux.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     char pipeName[80];
 *     int srcXOrigin;
 *     int srcYOrigin;
 *     int srcWidth;
 *     int srcHeight;
 *     int destXOrigin;
 *     int destYOrigin;
 *     int destWidth;
 *     int destHeight;
 * }
 * }
 */
public class GLXPipeRect {

    GLXPipeRect() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(80, glxext_h.C_CHAR).withName("pipeName"),
        glxext_h.C_INT.withName("srcXOrigin"),
        glxext_h.C_INT.withName("srcYOrigin"),
        glxext_h.C_INT.withName("srcWidth"),
        glxext_h.C_INT.withName("srcHeight"),
        glxext_h.C_INT.withName("destXOrigin"),
        glxext_h.C_INT.withName("destYOrigin"),
        glxext_h.C_INT.withName("destWidth"),
        glxext_h.C_INT.withName("destHeight")
    ).withName("$anon$778:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout pipeName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pipeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static final SequenceLayout pipeName$layout() {
        return pipeName$LAYOUT;
    }

    private static final long pipeName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static final long pipeName$offset() {
        return pipeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static MemorySegment pipeName(MemorySegment struct) {
        return struct.asSlice(pipeName$OFFSET, pipeName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static void pipeName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pipeName$OFFSET, pipeName$LAYOUT.byteSize());
    }

    private static long[] pipeName$DIMS = { 80 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static long[] pipeName$dimensions() {
        return pipeName$DIMS;
    }
    private static final VarHandle pipeName$ELEM_HANDLE = pipeName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static byte pipeName(MemorySegment struct, long index0) {
        return (byte)pipeName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char pipeName[80]
     * }
     */
    public static void pipeName(MemorySegment struct, long index0, byte fieldValue) {
        pipeName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt srcXOrigin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcXOrigin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int srcXOrigin
     * }
     */
    public static final OfInt srcXOrigin$layout() {
        return srcXOrigin$LAYOUT;
    }

    private static final long srcXOrigin$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int srcXOrigin
     * }
     */
    public static final long srcXOrigin$offset() {
        return srcXOrigin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int srcXOrigin
     * }
     */
    public static int srcXOrigin(MemorySegment struct) {
        return struct.get(srcXOrigin$LAYOUT, srcXOrigin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int srcXOrigin
     * }
     */
    public static void srcXOrigin(MemorySegment struct, int fieldValue) {
        struct.set(srcXOrigin$LAYOUT, srcXOrigin$OFFSET, fieldValue);
    }

    private static final OfInt srcYOrigin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcYOrigin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int srcYOrigin
     * }
     */
    public static final OfInt srcYOrigin$layout() {
        return srcYOrigin$LAYOUT;
    }

    private static final long srcYOrigin$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int srcYOrigin
     * }
     */
    public static final long srcYOrigin$offset() {
        return srcYOrigin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int srcYOrigin
     * }
     */
    public static int srcYOrigin(MemorySegment struct) {
        return struct.get(srcYOrigin$LAYOUT, srcYOrigin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int srcYOrigin
     * }
     */
    public static void srcYOrigin(MemorySegment struct, int fieldValue) {
        struct.set(srcYOrigin$LAYOUT, srcYOrigin$OFFSET, fieldValue);
    }

    private static final OfInt srcWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int srcWidth
     * }
     */
    public static final OfInt srcWidth$layout() {
        return srcWidth$LAYOUT;
    }

    private static final long srcWidth$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int srcWidth
     * }
     */
    public static final long srcWidth$offset() {
        return srcWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int srcWidth
     * }
     */
    public static int srcWidth(MemorySegment struct) {
        return struct.get(srcWidth$LAYOUT, srcWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int srcWidth
     * }
     */
    public static void srcWidth(MemorySegment struct, int fieldValue) {
        struct.set(srcWidth$LAYOUT, srcWidth$OFFSET, fieldValue);
    }

    private static final OfInt srcHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int srcHeight
     * }
     */
    public static final OfInt srcHeight$layout() {
        return srcHeight$LAYOUT;
    }

    private static final long srcHeight$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int srcHeight
     * }
     */
    public static final long srcHeight$offset() {
        return srcHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int srcHeight
     * }
     */
    public static int srcHeight(MemorySegment struct) {
        return struct.get(srcHeight$LAYOUT, srcHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int srcHeight
     * }
     */
    public static void srcHeight(MemorySegment struct, int fieldValue) {
        struct.set(srcHeight$LAYOUT, srcHeight$OFFSET, fieldValue);
    }

    private static final OfInt destXOrigin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("destXOrigin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int destXOrigin
     * }
     */
    public static final OfInt destXOrigin$layout() {
        return destXOrigin$LAYOUT;
    }

    private static final long destXOrigin$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int destXOrigin
     * }
     */
    public static final long destXOrigin$offset() {
        return destXOrigin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int destXOrigin
     * }
     */
    public static int destXOrigin(MemorySegment struct) {
        return struct.get(destXOrigin$LAYOUT, destXOrigin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int destXOrigin
     * }
     */
    public static void destXOrigin(MemorySegment struct, int fieldValue) {
        struct.set(destXOrigin$LAYOUT, destXOrigin$OFFSET, fieldValue);
    }

    private static final OfInt destYOrigin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("destYOrigin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int destYOrigin
     * }
     */
    public static final OfInt destYOrigin$layout() {
        return destYOrigin$LAYOUT;
    }

    private static final long destYOrigin$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int destYOrigin
     * }
     */
    public static final long destYOrigin$offset() {
        return destYOrigin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int destYOrigin
     * }
     */
    public static int destYOrigin(MemorySegment struct) {
        return struct.get(destYOrigin$LAYOUT, destYOrigin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int destYOrigin
     * }
     */
    public static void destYOrigin(MemorySegment struct, int fieldValue) {
        struct.set(destYOrigin$LAYOUT, destYOrigin$OFFSET, fieldValue);
    }

    private static final OfInt destWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("destWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int destWidth
     * }
     */
    public static final OfInt destWidth$layout() {
        return destWidth$LAYOUT;
    }

    private static final long destWidth$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int destWidth
     * }
     */
    public static final long destWidth$offset() {
        return destWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int destWidth
     * }
     */
    public static int destWidth(MemorySegment struct) {
        return struct.get(destWidth$LAYOUT, destWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int destWidth
     * }
     */
    public static void destWidth(MemorySegment struct, int fieldValue) {
        struct.set(destWidth$LAYOUT, destWidth$OFFSET, fieldValue);
    }

    private static final OfInt destHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("destHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int destHeight
     * }
     */
    public static final OfInt destHeight$layout() {
        return destHeight$LAYOUT;
    }

    private static final long destHeight$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int destHeight
     * }
     */
    public static final long destHeight$offset() {
        return destHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int destHeight
     * }
     */
    public static int destHeight(MemorySegment struct) {
        return struct.get(destHeight$LAYOUT, destHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int destHeight
     * }
     */
    public static void destHeight(MemorySegment struct, int fieldValue) {
        struct.set(destHeight$LAYOUT, destHeight$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

