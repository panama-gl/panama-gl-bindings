// Generated by jextract

package glxext.linux.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class glxext_h_1 extends glxext_h_2 {

    glxext_h_1() {
        // Should not be called directly
    }
    private static final int GLX_GPU_NUM_SIMD_AMD = (int)8614L;
    /**
     * {@snippet lang=c :
     * #define GLX_GPU_NUM_SIMD_AMD 8614
     * }
     */
    public static int GLX_GPU_NUM_SIMD_AMD() {
        return GLX_GPU_NUM_SIMD_AMD;
    }
    private static final int GLX_GPU_NUM_RB_AMD = (int)8615L;
    /**
     * {@snippet lang=c :
     * #define GLX_GPU_NUM_RB_AMD 8615
     * }
     */
    public static int GLX_GPU_NUM_RB_AMD() {
        return GLX_GPU_NUM_RB_AMD;
    }
    private static final int GLX_GPU_NUM_SPI_AMD = (int)8616L;
    /**
     * {@snippet lang=c :
     * #define GLX_GPU_NUM_SPI_AMD 8616
     * }
     */
    public static int GLX_GPU_NUM_SPI_AMD() {
        return GLX_GPU_NUM_SPI_AMD;
    }
    private static final int GLX_EXT_buffer_age = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_buffer_age 1
     * }
     */
    public static int GLX_EXT_buffer_age() {
        return GLX_EXT_buffer_age;
    }
    private static final int GLX_BACK_BUFFER_AGE_EXT = (int)8436L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_BUFFER_AGE_EXT 8436
     * }
     */
    public static int GLX_BACK_BUFFER_AGE_EXT() {
        return GLX_BACK_BUFFER_AGE_EXT;
    }
    private static final int GLX_EXT_context_priority = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_context_priority 1
     * }
     */
    public static int GLX_EXT_context_priority() {
        return GLX_EXT_context_priority;
    }
    private static final int GLX_CONTEXT_PRIORITY_LEVEL_EXT = (int)12544L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_PRIORITY_LEVEL_EXT 12544
     * }
     */
    public static int GLX_CONTEXT_PRIORITY_LEVEL_EXT() {
        return GLX_CONTEXT_PRIORITY_LEVEL_EXT;
    }
    private static final int GLX_CONTEXT_PRIORITY_HIGH_EXT = (int)12545L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_PRIORITY_HIGH_EXT 12545
     * }
     */
    public static int GLX_CONTEXT_PRIORITY_HIGH_EXT() {
        return GLX_CONTEXT_PRIORITY_HIGH_EXT;
    }
    private static final int GLX_CONTEXT_PRIORITY_MEDIUM_EXT = (int)12546L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_PRIORITY_MEDIUM_EXT 12546
     * }
     */
    public static int GLX_CONTEXT_PRIORITY_MEDIUM_EXT() {
        return GLX_CONTEXT_PRIORITY_MEDIUM_EXT;
    }
    private static final int GLX_CONTEXT_PRIORITY_LOW_EXT = (int)12547L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_PRIORITY_LOW_EXT 12547
     * }
     */
    public static int GLX_CONTEXT_PRIORITY_LOW_EXT() {
        return GLX_CONTEXT_PRIORITY_LOW_EXT;
    }
    private static final int GLX_EXT_create_context_es2_profile = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_create_context_es2_profile 1
     * }
     */
    public static int GLX_EXT_create_context_es2_profile() {
        return GLX_EXT_create_context_es2_profile;
    }
    private static final int GLX_CONTEXT_ES2_PROFILE_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_ES2_PROFILE_BIT_EXT 4
     * }
     */
    public static int GLX_CONTEXT_ES2_PROFILE_BIT_EXT() {
        return GLX_CONTEXT_ES2_PROFILE_BIT_EXT;
    }
    private static final int GLX_EXT_create_context_es_profile = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_create_context_es_profile 1
     * }
     */
    public static int GLX_EXT_create_context_es_profile() {
        return GLX_EXT_create_context_es_profile;
    }
    private static final int GLX_CONTEXT_ES_PROFILE_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_CONTEXT_ES_PROFILE_BIT_EXT 4
     * }
     */
    public static int GLX_CONTEXT_ES_PROFILE_BIT_EXT() {
        return GLX_CONTEXT_ES_PROFILE_BIT_EXT;
    }
    private static final int GLX_EXT_fbconfig_packed_float = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_fbconfig_packed_float 1
     * }
     */
    public static int GLX_EXT_fbconfig_packed_float() {
        return GLX_EXT_fbconfig_packed_float;
    }
    private static final int GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT = (int)8369L;
    /**
     * {@snippet lang=c :
     * #define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 8369
     * }
     */
    public static int GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT() {
        return GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT;
    }
    private static final int GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 8
     * }
     */
    public static int GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT() {
        return GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT;
    }
    private static final int GLX_EXT_framebuffer_sRGB = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_framebuffer_sRGB 1
     * }
     */
    public static int GLX_EXT_framebuffer_sRGB() {
        return GLX_EXT_framebuffer_sRGB;
    }
    private static final int GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = (int)8370L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 8370
     * }
     */
    public static int GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT() {
        return GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT;
    }
    private static final int GLX_EXT_import_context = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_import_context 1
     * }
     */
    public static int GLX_EXT_import_context() {
        return GLX_EXT_import_context;
    }
    private static final int GLX_SHARE_CONTEXT_EXT = (int)32778L;
    /**
     * {@snippet lang=c :
     * #define GLX_SHARE_CONTEXT_EXT 32778
     * }
     */
    public static int GLX_SHARE_CONTEXT_EXT() {
        return GLX_SHARE_CONTEXT_EXT;
    }
    private static final int GLX_VISUAL_ID_EXT = (int)32779L;
    /**
     * {@snippet lang=c :
     * #define GLX_VISUAL_ID_EXT 32779
     * }
     */
    public static int GLX_VISUAL_ID_EXT() {
        return GLX_VISUAL_ID_EXT;
    }
    private static final int GLX_SCREEN_EXT = (int)32780L;
    /**
     * {@snippet lang=c :
     * #define GLX_SCREEN_EXT 32780
     * }
     */
    public static int GLX_SCREEN_EXT() {
        return GLX_SCREEN_EXT;
    }
    private static final int GLX_EXT_libglvnd = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_libglvnd 1
     * }
     */
    public static int GLX_EXT_libglvnd() {
        return GLX_EXT_libglvnd;
    }
    private static final int GLX_VENDOR_NAMES_EXT = (int)8438L;
    /**
     * {@snippet lang=c :
     * #define GLX_VENDOR_NAMES_EXT 8438
     * }
     */
    public static int GLX_VENDOR_NAMES_EXT() {
        return GLX_VENDOR_NAMES_EXT;
    }
    private static final int GLX_EXT_no_config_context = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_no_config_context 1
     * }
     */
    public static int GLX_EXT_no_config_context() {
        return GLX_EXT_no_config_context;
    }
    private static final int GLX_EXT_stereo_tree = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_stereo_tree 1
     * }
     */
    public static int GLX_EXT_stereo_tree() {
        return GLX_EXT_stereo_tree;
    }
    private static final int GLX_STEREO_TREE_EXT = (int)8437L;
    /**
     * {@snippet lang=c :
     * #define GLX_STEREO_TREE_EXT 8437
     * }
     */
    public static int GLX_STEREO_TREE_EXT() {
        return GLX_STEREO_TREE_EXT;
    }
    private static final int GLX_STEREO_NOTIFY_MASK_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_STEREO_NOTIFY_MASK_EXT 1
     * }
     */
    public static int GLX_STEREO_NOTIFY_MASK_EXT() {
        return GLX_STEREO_NOTIFY_MASK_EXT;
    }
    private static final int GLX_STEREO_NOTIFY_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLX_STEREO_NOTIFY_EXT 0
     * }
     */
    public static int GLX_STEREO_NOTIFY_EXT() {
        return GLX_STEREO_NOTIFY_EXT;
    }
    private static final int GLX_EXT_swap_control = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_swap_control 1
     * }
     */
    public static int GLX_EXT_swap_control() {
        return GLX_EXT_swap_control;
    }
    private static final int GLX_SWAP_INTERVAL_EXT = (int)8433L;
    /**
     * {@snippet lang=c :
     * #define GLX_SWAP_INTERVAL_EXT 8433
     * }
     */
    public static int GLX_SWAP_INTERVAL_EXT() {
        return GLX_SWAP_INTERVAL_EXT;
    }
    private static final int GLX_MAX_SWAP_INTERVAL_EXT = (int)8434L;
    /**
     * {@snippet lang=c :
     * #define GLX_MAX_SWAP_INTERVAL_EXT 8434
     * }
     */
    public static int GLX_MAX_SWAP_INTERVAL_EXT() {
        return GLX_MAX_SWAP_INTERVAL_EXT;
    }
    private static final int GLX_EXT_swap_control_tear = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_swap_control_tear 1
     * }
     */
    public static int GLX_EXT_swap_control_tear() {
        return GLX_EXT_swap_control_tear;
    }
    private static final int GLX_LATE_SWAPS_TEAR_EXT = (int)8435L;
    /**
     * {@snippet lang=c :
     * #define GLX_LATE_SWAPS_TEAR_EXT 8435
     * }
     */
    public static int GLX_LATE_SWAPS_TEAR_EXT() {
        return GLX_LATE_SWAPS_TEAR_EXT;
    }
    private static final int GLX_EXT_texture_from_pixmap = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_texture_from_pixmap 1
     * }
     */
    public static int GLX_EXT_texture_from_pixmap() {
        return GLX_EXT_texture_from_pixmap;
    }
    private static final int GLX_TEXTURE_1D_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_1D_BIT_EXT 1
     * }
     */
    public static int GLX_TEXTURE_1D_BIT_EXT() {
        return GLX_TEXTURE_1D_BIT_EXT;
    }
    private static final int GLX_TEXTURE_2D_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_2D_BIT_EXT 2
     * }
     */
    public static int GLX_TEXTURE_2D_BIT_EXT() {
        return GLX_TEXTURE_2D_BIT_EXT;
    }
    private static final int GLX_TEXTURE_RECTANGLE_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_RECTANGLE_BIT_EXT 4
     * }
     */
    public static int GLX_TEXTURE_RECTANGLE_BIT_EXT() {
        return GLX_TEXTURE_RECTANGLE_BIT_EXT;
    }
    private static final int GLX_BIND_TO_TEXTURE_RGB_EXT = (int)8400L;
    /**
     * {@snippet lang=c :
     * #define GLX_BIND_TO_TEXTURE_RGB_EXT 8400
     * }
     */
    public static int GLX_BIND_TO_TEXTURE_RGB_EXT() {
        return GLX_BIND_TO_TEXTURE_RGB_EXT;
    }
    private static final int GLX_BIND_TO_TEXTURE_RGBA_EXT = (int)8401L;
    /**
     * {@snippet lang=c :
     * #define GLX_BIND_TO_TEXTURE_RGBA_EXT 8401
     * }
     */
    public static int GLX_BIND_TO_TEXTURE_RGBA_EXT() {
        return GLX_BIND_TO_TEXTURE_RGBA_EXT;
    }
    private static final int GLX_BIND_TO_MIPMAP_TEXTURE_EXT = (int)8402L;
    /**
     * {@snippet lang=c :
     * #define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 8402
     * }
     */
    public static int GLX_BIND_TO_MIPMAP_TEXTURE_EXT() {
        return GLX_BIND_TO_MIPMAP_TEXTURE_EXT;
    }
    private static final int GLX_BIND_TO_TEXTURE_TARGETS_EXT = (int)8403L;
    /**
     * {@snippet lang=c :
     * #define GLX_BIND_TO_TEXTURE_TARGETS_EXT 8403
     * }
     */
    public static int GLX_BIND_TO_TEXTURE_TARGETS_EXT() {
        return GLX_BIND_TO_TEXTURE_TARGETS_EXT;
    }
    private static final int GLX_Y_INVERTED_EXT = (int)8404L;
    /**
     * {@snippet lang=c :
     * #define GLX_Y_INVERTED_EXT 8404
     * }
     */
    public static int GLX_Y_INVERTED_EXT() {
        return GLX_Y_INVERTED_EXT;
    }
    private static final int GLX_TEXTURE_FORMAT_EXT = (int)8405L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_FORMAT_EXT 8405
     * }
     */
    public static int GLX_TEXTURE_FORMAT_EXT() {
        return GLX_TEXTURE_FORMAT_EXT;
    }
    private static final int GLX_TEXTURE_TARGET_EXT = (int)8406L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_TARGET_EXT 8406
     * }
     */
    public static int GLX_TEXTURE_TARGET_EXT() {
        return GLX_TEXTURE_TARGET_EXT;
    }
    private static final int GLX_MIPMAP_TEXTURE_EXT = (int)8407L;
    /**
     * {@snippet lang=c :
     * #define GLX_MIPMAP_TEXTURE_EXT 8407
     * }
     */
    public static int GLX_MIPMAP_TEXTURE_EXT() {
        return GLX_MIPMAP_TEXTURE_EXT;
    }
    private static final int GLX_TEXTURE_FORMAT_NONE_EXT = (int)8408L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_FORMAT_NONE_EXT 8408
     * }
     */
    public static int GLX_TEXTURE_FORMAT_NONE_EXT() {
        return GLX_TEXTURE_FORMAT_NONE_EXT;
    }
    private static final int GLX_TEXTURE_FORMAT_RGB_EXT = (int)8409L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_FORMAT_RGB_EXT 8409
     * }
     */
    public static int GLX_TEXTURE_FORMAT_RGB_EXT() {
        return GLX_TEXTURE_FORMAT_RGB_EXT;
    }
    private static final int GLX_TEXTURE_FORMAT_RGBA_EXT = (int)8410L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_FORMAT_RGBA_EXT 8410
     * }
     */
    public static int GLX_TEXTURE_FORMAT_RGBA_EXT() {
        return GLX_TEXTURE_FORMAT_RGBA_EXT;
    }
    private static final int GLX_TEXTURE_1D_EXT = (int)8411L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_1D_EXT 8411
     * }
     */
    public static int GLX_TEXTURE_1D_EXT() {
        return GLX_TEXTURE_1D_EXT;
    }
    private static final int GLX_TEXTURE_2D_EXT = (int)8412L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_2D_EXT 8412
     * }
     */
    public static int GLX_TEXTURE_2D_EXT() {
        return GLX_TEXTURE_2D_EXT;
    }
    private static final int GLX_TEXTURE_RECTANGLE_EXT = (int)8413L;
    /**
     * {@snippet lang=c :
     * #define GLX_TEXTURE_RECTANGLE_EXT 8413
     * }
     */
    public static int GLX_TEXTURE_RECTANGLE_EXT() {
        return GLX_TEXTURE_RECTANGLE_EXT;
    }
    private static final int GLX_FRONT_LEFT_EXT = (int)8414L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRONT_LEFT_EXT 8414
     * }
     */
    public static int GLX_FRONT_LEFT_EXT() {
        return GLX_FRONT_LEFT_EXT;
    }
    private static final int GLX_FRONT_RIGHT_EXT = (int)8415L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRONT_RIGHT_EXT 8415
     * }
     */
    public static int GLX_FRONT_RIGHT_EXT() {
        return GLX_FRONT_RIGHT_EXT;
    }
    private static final int GLX_BACK_LEFT_EXT = (int)8416L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_LEFT_EXT 8416
     * }
     */
    public static int GLX_BACK_LEFT_EXT() {
        return GLX_BACK_LEFT_EXT;
    }
    private static final int GLX_BACK_RIGHT_EXT = (int)8417L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_RIGHT_EXT 8417
     * }
     */
    public static int GLX_BACK_RIGHT_EXT() {
        return GLX_BACK_RIGHT_EXT;
    }
    private static final int GLX_FRONT_EXT = (int)8414L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRONT_EXT 8414
     * }
     */
    public static int GLX_FRONT_EXT() {
        return GLX_FRONT_EXT;
    }
    private static final int GLX_BACK_EXT = (int)8416L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_EXT 8416
     * }
     */
    public static int GLX_BACK_EXT() {
        return GLX_BACK_EXT;
    }
    private static final int GLX_AUX0_EXT = (int)8418L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX0_EXT 8418
     * }
     */
    public static int GLX_AUX0_EXT() {
        return GLX_AUX0_EXT;
    }
    private static final int GLX_AUX1_EXT = (int)8419L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX1_EXT 8419
     * }
     */
    public static int GLX_AUX1_EXT() {
        return GLX_AUX1_EXT;
    }
    private static final int GLX_AUX2_EXT = (int)8420L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX2_EXT 8420
     * }
     */
    public static int GLX_AUX2_EXT() {
        return GLX_AUX2_EXT;
    }
    private static final int GLX_AUX3_EXT = (int)8421L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX3_EXT 8421
     * }
     */
    public static int GLX_AUX3_EXT() {
        return GLX_AUX3_EXT;
    }
    private static final int GLX_AUX4_EXT = (int)8422L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX4_EXT 8422
     * }
     */
    public static int GLX_AUX4_EXT() {
        return GLX_AUX4_EXT;
    }
    private static final int GLX_AUX5_EXT = (int)8423L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX5_EXT 8423
     * }
     */
    public static int GLX_AUX5_EXT() {
        return GLX_AUX5_EXT;
    }
    private static final int GLX_AUX6_EXT = (int)8424L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX6_EXT 8424
     * }
     */
    public static int GLX_AUX6_EXT() {
        return GLX_AUX6_EXT;
    }
    private static final int GLX_AUX7_EXT = (int)8425L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX7_EXT 8425
     * }
     */
    public static int GLX_AUX7_EXT() {
        return GLX_AUX7_EXT;
    }
    private static final int GLX_AUX8_EXT = (int)8426L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX8_EXT 8426
     * }
     */
    public static int GLX_AUX8_EXT() {
        return GLX_AUX8_EXT;
    }
    private static final int GLX_AUX9_EXT = (int)8427L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX9_EXT 8427
     * }
     */
    public static int GLX_AUX9_EXT() {
        return GLX_AUX9_EXT;
    }
    private static final int GLX_EXT_visual_info = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_visual_info 1
     * }
     */
    public static int GLX_EXT_visual_info() {
        return GLX_EXT_visual_info;
    }
    private static final int GLX_X_VISUAL_TYPE_EXT = (int)34L;
    /**
     * {@snippet lang=c :
     * #define GLX_X_VISUAL_TYPE_EXT 34
     * }
     */
    public static int GLX_X_VISUAL_TYPE_EXT() {
        return GLX_X_VISUAL_TYPE_EXT;
    }
    private static final int GLX_TRANSPARENT_TYPE_EXT = (int)35L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_TYPE_EXT 35
     * }
     */
    public static int GLX_TRANSPARENT_TYPE_EXT() {
        return GLX_TRANSPARENT_TYPE_EXT;
    }
    private static final int GLX_TRANSPARENT_INDEX_VALUE_EXT = (int)36L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_INDEX_VALUE_EXT 36
     * }
     */
    public static int GLX_TRANSPARENT_INDEX_VALUE_EXT() {
        return GLX_TRANSPARENT_INDEX_VALUE_EXT;
    }
    private static final int GLX_TRANSPARENT_RED_VALUE_EXT = (int)37L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_RED_VALUE_EXT 37
     * }
     */
    public static int GLX_TRANSPARENT_RED_VALUE_EXT() {
        return GLX_TRANSPARENT_RED_VALUE_EXT;
    }
    private static final int GLX_TRANSPARENT_GREEN_VALUE_EXT = (int)38L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_GREEN_VALUE_EXT 38
     * }
     */
    public static int GLX_TRANSPARENT_GREEN_VALUE_EXT() {
        return GLX_TRANSPARENT_GREEN_VALUE_EXT;
    }
    private static final int GLX_TRANSPARENT_BLUE_VALUE_EXT = (int)39L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_BLUE_VALUE_EXT 39
     * }
     */
    public static int GLX_TRANSPARENT_BLUE_VALUE_EXT() {
        return GLX_TRANSPARENT_BLUE_VALUE_EXT;
    }
    private static final int GLX_TRANSPARENT_ALPHA_VALUE_EXT = (int)40L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_ALPHA_VALUE_EXT 40
     * }
     */
    public static int GLX_TRANSPARENT_ALPHA_VALUE_EXT() {
        return GLX_TRANSPARENT_ALPHA_VALUE_EXT;
    }
    private static final int GLX_NONE_EXT = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define GLX_NONE_EXT 32768
     * }
     */
    public static int GLX_NONE_EXT() {
        return GLX_NONE_EXT;
    }
    private static final int GLX_TRUE_COLOR_EXT = (int)32770L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRUE_COLOR_EXT 32770
     * }
     */
    public static int GLX_TRUE_COLOR_EXT() {
        return GLX_TRUE_COLOR_EXT;
    }
    private static final int GLX_DIRECT_COLOR_EXT = (int)32771L;
    /**
     * {@snippet lang=c :
     * #define GLX_DIRECT_COLOR_EXT 32771
     * }
     */
    public static int GLX_DIRECT_COLOR_EXT() {
        return GLX_DIRECT_COLOR_EXT;
    }
    private static final int GLX_PSEUDO_COLOR_EXT = (int)32772L;
    /**
     * {@snippet lang=c :
     * #define GLX_PSEUDO_COLOR_EXT 32772
     * }
     */
    public static int GLX_PSEUDO_COLOR_EXT() {
        return GLX_PSEUDO_COLOR_EXT;
    }
    private static final int GLX_STATIC_COLOR_EXT = (int)32773L;
    /**
     * {@snippet lang=c :
     * #define GLX_STATIC_COLOR_EXT 32773
     * }
     */
    public static int GLX_STATIC_COLOR_EXT() {
        return GLX_STATIC_COLOR_EXT;
    }
    private static final int GLX_GRAY_SCALE_EXT = (int)32774L;
    /**
     * {@snippet lang=c :
     * #define GLX_GRAY_SCALE_EXT 32774
     * }
     */
    public static int GLX_GRAY_SCALE_EXT() {
        return GLX_GRAY_SCALE_EXT;
    }
    private static final int GLX_STATIC_GRAY_EXT = (int)32775L;
    /**
     * {@snippet lang=c :
     * #define GLX_STATIC_GRAY_EXT 32775
     * }
     */
    public static int GLX_STATIC_GRAY_EXT() {
        return GLX_STATIC_GRAY_EXT;
    }
    private static final int GLX_TRANSPARENT_RGB_EXT = (int)32776L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_RGB_EXT 32776
     * }
     */
    public static int GLX_TRANSPARENT_RGB_EXT() {
        return GLX_TRANSPARENT_RGB_EXT;
    }
    private static final int GLX_TRANSPARENT_INDEX_EXT = (int)32777L;
    /**
     * {@snippet lang=c :
     * #define GLX_TRANSPARENT_INDEX_EXT 32777
     * }
     */
    public static int GLX_TRANSPARENT_INDEX_EXT() {
        return GLX_TRANSPARENT_INDEX_EXT;
    }
    private static final int GLX_EXT_visual_rating = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXT_visual_rating 1
     * }
     */
    public static int GLX_EXT_visual_rating() {
        return GLX_EXT_visual_rating;
    }
    private static final int GLX_VISUAL_CAVEAT_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define GLX_VISUAL_CAVEAT_EXT 32
     * }
     */
    public static int GLX_VISUAL_CAVEAT_EXT() {
        return GLX_VISUAL_CAVEAT_EXT;
    }
    private static final int GLX_SLOW_VISUAL_EXT = (int)32769L;
    /**
     * {@snippet lang=c :
     * #define GLX_SLOW_VISUAL_EXT 32769
     * }
     */
    public static int GLX_SLOW_VISUAL_EXT() {
        return GLX_SLOW_VISUAL_EXT;
    }
    private static final int GLX_NON_CONFORMANT_VISUAL_EXT = (int)32781L;
    /**
     * {@snippet lang=c :
     * #define GLX_NON_CONFORMANT_VISUAL_EXT 32781
     * }
     */
    public static int GLX_NON_CONFORMANT_VISUAL_EXT() {
        return GLX_NON_CONFORMANT_VISUAL_EXT;
    }
    private static final int GLX_INTEL_swap_event = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_INTEL_swap_event 1
     * }
     */
    public static int GLX_INTEL_swap_event() {
        return GLX_INTEL_swap_event;
    }
    private static final int GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 67108864
     * }
     */
    public static int GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK() {
        return GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK;
    }
    private static final int GLX_EXCHANGE_COMPLETE_INTEL = (int)33152L;
    /**
     * {@snippet lang=c :
     * #define GLX_EXCHANGE_COMPLETE_INTEL 33152
     * }
     */
    public static int GLX_EXCHANGE_COMPLETE_INTEL() {
        return GLX_EXCHANGE_COMPLETE_INTEL;
    }
    private static final int GLX_COPY_COMPLETE_INTEL = (int)33153L;
    /**
     * {@snippet lang=c :
     * #define GLX_COPY_COMPLETE_INTEL 33153
     * }
     */
    public static int GLX_COPY_COMPLETE_INTEL() {
        return GLX_COPY_COMPLETE_INTEL;
    }
    private static final int GLX_FLIP_COMPLETE_INTEL = (int)33154L;
    /**
     * {@snippet lang=c :
     * #define GLX_FLIP_COMPLETE_INTEL 33154
     * }
     */
    public static int GLX_FLIP_COMPLETE_INTEL() {
        return GLX_FLIP_COMPLETE_INTEL;
    }
    private static final int GLX_MESA_agp_offset = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_agp_offset 1
     * }
     */
    public static int GLX_MESA_agp_offset() {
        return GLX_MESA_agp_offset;
    }
    private static final int GLX_MESA_copy_sub_buffer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_copy_sub_buffer 1
     * }
     */
    public static int GLX_MESA_copy_sub_buffer() {
        return GLX_MESA_copy_sub_buffer;
    }
    private static final int GLX_MESA_pixmap_colormap = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_pixmap_colormap 1
     * }
     */
    public static int GLX_MESA_pixmap_colormap() {
        return GLX_MESA_pixmap_colormap;
    }
    private static final int GLX_MESA_query_renderer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_query_renderer 1
     * }
     */
    public static int GLX_MESA_query_renderer() {
        return GLX_MESA_query_renderer;
    }
    private static final int GLX_RENDERER_VENDOR_ID_MESA = (int)33155L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_VENDOR_ID_MESA 33155
     * }
     */
    public static int GLX_RENDERER_VENDOR_ID_MESA() {
        return GLX_RENDERER_VENDOR_ID_MESA;
    }
    private static final int GLX_RENDERER_DEVICE_ID_MESA = (int)33156L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_DEVICE_ID_MESA 33156
     * }
     */
    public static int GLX_RENDERER_DEVICE_ID_MESA() {
        return GLX_RENDERER_DEVICE_ID_MESA;
    }
    private static final int GLX_RENDERER_VERSION_MESA = (int)33157L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_VERSION_MESA 33157
     * }
     */
    public static int GLX_RENDERER_VERSION_MESA() {
        return GLX_RENDERER_VERSION_MESA;
    }
    private static final int GLX_RENDERER_ACCELERATED_MESA = (int)33158L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_ACCELERATED_MESA 33158
     * }
     */
    public static int GLX_RENDERER_ACCELERATED_MESA() {
        return GLX_RENDERER_ACCELERATED_MESA;
    }
    private static final int GLX_RENDERER_VIDEO_MEMORY_MESA = (int)33159L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_VIDEO_MEMORY_MESA 33159
     * }
     */
    public static int GLX_RENDERER_VIDEO_MEMORY_MESA() {
        return GLX_RENDERER_VIDEO_MEMORY_MESA;
    }
    private static final int GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = (int)33160L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 33160
     * }
     */
    public static int GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA() {
        return GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA;
    }
    private static final int GLX_RENDERER_PREFERRED_PROFILE_MESA = (int)33161L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_PREFERRED_PROFILE_MESA 33161
     * }
     */
    public static int GLX_RENDERER_PREFERRED_PROFILE_MESA() {
        return GLX_RENDERER_PREFERRED_PROFILE_MESA;
    }
    private static final int GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = (int)33162L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 33162
     * }
     */
    public static int GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA() {
        return GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA;
    }
    private static final int GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = (int)33163L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 33163
     * }
     */
    public static int GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA() {
        return GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA;
    }
    private static final int GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = (int)33164L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 33164
     * }
     */
    public static int GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA() {
        return GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA;
    }
    private static final int GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = (int)33165L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 33165
     * }
     */
    public static int GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA() {
        return GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA;
    }
    private static final int GLX_MESA_release_buffers = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_release_buffers 1
     * }
     */
    public static int GLX_MESA_release_buffers() {
        return GLX_MESA_release_buffers;
    }
    private static final int GLX_MESA_set_3dfx_mode = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_set_3dfx_mode 1
     * }
     */
    public static int GLX_MESA_set_3dfx_mode() {
        return GLX_MESA_set_3dfx_mode;
    }
    private static final int GLX_3DFX_WINDOW_MODE_MESA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_3DFX_WINDOW_MODE_MESA 1
     * }
     */
    public static int GLX_3DFX_WINDOW_MODE_MESA() {
        return GLX_3DFX_WINDOW_MODE_MESA;
    }
    private static final int GLX_3DFX_FULLSCREEN_MODE_MESA = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_3DFX_FULLSCREEN_MODE_MESA 2
     * }
     */
    public static int GLX_3DFX_FULLSCREEN_MODE_MESA() {
        return GLX_3DFX_FULLSCREEN_MODE_MESA;
    }
    private static final int GLX_MESA_swap_control = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_swap_control 1
     * }
     */
    public static int GLX_MESA_swap_control() {
        return GLX_MESA_swap_control;
    }
    private static final int GLX_NV_copy_buffer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_copy_buffer 1
     * }
     */
    public static int GLX_NV_copy_buffer() {
        return GLX_NV_copy_buffer;
    }
    private static final int GLX_NV_copy_image = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_copy_image 1
     * }
     */
    public static int GLX_NV_copy_image() {
        return GLX_NV_copy_image;
    }
    private static final int GLX_NV_delay_before_swap = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_delay_before_swap 1
     * }
     */
    public static int GLX_NV_delay_before_swap() {
        return GLX_NV_delay_before_swap;
    }
    private static final int GLX_NV_float_buffer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_float_buffer 1
     * }
     */
    public static int GLX_NV_float_buffer() {
        return GLX_NV_float_buffer;
    }
    private static final int GLX_FLOAT_COMPONENTS_NV = (int)8368L;
    /**
     * {@snippet lang=c :
     * #define GLX_FLOAT_COMPONENTS_NV 8368
     * }
     */
    public static int GLX_FLOAT_COMPONENTS_NV() {
        return GLX_FLOAT_COMPONENTS_NV;
    }
    private static final int GLX_NV_multisample_coverage = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_multisample_coverage 1
     * }
     */
    public static int GLX_NV_multisample_coverage() {
        return GLX_NV_multisample_coverage;
    }
    private static final int GLX_COVERAGE_SAMPLES_NV = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define GLX_COVERAGE_SAMPLES_NV 100001
     * }
     */
    public static int GLX_COVERAGE_SAMPLES_NV() {
        return GLX_COVERAGE_SAMPLES_NV;
    }
    private static final int GLX_COLOR_SAMPLES_NV = (int)8371L;
    /**
     * {@snippet lang=c :
     * #define GLX_COLOR_SAMPLES_NV 8371
     * }
     */
    public static int GLX_COLOR_SAMPLES_NV() {
        return GLX_COLOR_SAMPLES_NV;
    }
    private static final int GLX_NV_present_video = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_present_video 1
     * }
     */
    public static int GLX_NV_present_video() {
        return GLX_NV_present_video;
    }
    private static final int GLX_NUM_VIDEO_SLOTS_NV = (int)8432L;
    /**
     * {@snippet lang=c :
     * #define GLX_NUM_VIDEO_SLOTS_NV 8432
     * }
     */
    public static int GLX_NUM_VIDEO_SLOTS_NV() {
        return GLX_NUM_VIDEO_SLOTS_NV;
    }
    private static final int GLX_NV_robustness_video_memory_purge = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_robustness_video_memory_purge 1
     * }
     */
    public static int GLX_NV_robustness_video_memory_purge() {
        return GLX_NV_robustness_video_memory_purge;
    }
    private static final int GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV = (int)8439L;
    /**
     * {@snippet lang=c :
     * #define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 8439
     * }
     */
    public static int GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV() {
        return GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV;
    }
    private static final int GLX_NV_swap_group = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_swap_group 1
     * }
     */
    public static int GLX_NV_swap_group() {
        return GLX_NV_swap_group;
    }
    private static final int GLX_NV_video_capture = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_video_capture 1
     * }
     */
    public static int GLX_NV_video_capture() {
        return GLX_NV_video_capture;
    }
    private static final int GLX_DEVICE_ID_NV = (int)8397L;
    /**
     * {@snippet lang=c :
     * #define GLX_DEVICE_ID_NV 8397
     * }
     */
    public static int GLX_DEVICE_ID_NV() {
        return GLX_DEVICE_ID_NV;
    }
    private static final int GLX_UNIQUE_ID_NV = (int)8398L;
    /**
     * {@snippet lang=c :
     * #define GLX_UNIQUE_ID_NV 8398
     * }
     */
    public static int GLX_UNIQUE_ID_NV() {
        return GLX_UNIQUE_ID_NV;
    }
    private static final int GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = (int)8399L;
    /**
     * {@snippet lang=c :
     * #define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV 8399
     * }
     */
    public static int GLX_NUM_VIDEO_CAPTURE_SLOTS_NV() {
        return GLX_NUM_VIDEO_CAPTURE_SLOTS_NV;
    }
    private static final int GLX_NV_video_out = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_NV_video_out 1
     * }
     */
    public static int GLX_NV_video_out() {
        return GLX_NV_video_out;
    }
    private static final int GLX_VIDEO_OUT_COLOR_NV = (int)8387L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_COLOR_NV 8387
     * }
     */
    public static int GLX_VIDEO_OUT_COLOR_NV() {
        return GLX_VIDEO_OUT_COLOR_NV;
    }
    private static final int GLX_VIDEO_OUT_ALPHA_NV = (int)8388L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_ALPHA_NV 8388
     * }
     */
    public static int GLX_VIDEO_OUT_ALPHA_NV() {
        return GLX_VIDEO_OUT_ALPHA_NV;
    }
    private static final int GLX_VIDEO_OUT_DEPTH_NV = (int)8389L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_DEPTH_NV 8389
     * }
     */
    public static int GLX_VIDEO_OUT_DEPTH_NV() {
        return GLX_VIDEO_OUT_DEPTH_NV;
    }
    private static final int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = (int)8390L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV 8390
     * }
     */
    public static int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV() {
        return GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV;
    }
    private static final int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = (int)8391L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV 8391
     * }
     */
    public static int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV() {
        return GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV;
    }
    private static final int GLX_VIDEO_OUT_FRAME_NV = (int)8392L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_FRAME_NV 8392
     * }
     */
    public static int GLX_VIDEO_OUT_FRAME_NV() {
        return GLX_VIDEO_OUT_FRAME_NV;
    }
    private static final int GLX_VIDEO_OUT_FIELD_1_NV = (int)8393L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_FIELD_1_NV 8393
     * }
     */
    public static int GLX_VIDEO_OUT_FIELD_1_NV() {
        return GLX_VIDEO_OUT_FIELD_1_NV;
    }
    private static final int GLX_VIDEO_OUT_FIELD_2_NV = (int)8394L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_FIELD_2_NV 8394
     * }
     */
    public static int GLX_VIDEO_OUT_FIELD_2_NV() {
        return GLX_VIDEO_OUT_FIELD_2_NV;
    }
    private static final int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = (int)8395L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 8395
     * }
     */
    public static int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV() {
        return GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV;
    }
    private static final int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = (int)8396L;
    /**
     * {@snippet lang=c :
     * #define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 8396
     * }
     */
    public static int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV() {
        return GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV;
    }
    private static final int GLX_OML_swap_method = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_OML_swap_method 1
     * }
     */
    public static int GLX_OML_swap_method() {
        return GLX_OML_swap_method;
    }
    private static final int GLX_SWAP_METHOD_OML = (int)32864L;
    /**
     * {@snippet lang=c :
     * #define GLX_SWAP_METHOD_OML 32864
     * }
     */
    public static int GLX_SWAP_METHOD_OML() {
        return GLX_SWAP_METHOD_OML;
    }
    private static final int GLX_SWAP_EXCHANGE_OML = (int)32865L;
    /**
     * {@snippet lang=c :
     * #define GLX_SWAP_EXCHANGE_OML 32865
     * }
     */
    public static int GLX_SWAP_EXCHANGE_OML() {
        return GLX_SWAP_EXCHANGE_OML;
    }
    private static final int GLX_SWAP_COPY_OML = (int)32866L;
    /**
     * {@snippet lang=c :
     * #define GLX_SWAP_COPY_OML 32866
     * }
     */
    public static int GLX_SWAP_COPY_OML() {
        return GLX_SWAP_COPY_OML;
    }
    private static final int GLX_SWAP_UNDEFINED_OML = (int)32867L;
    /**
     * {@snippet lang=c :
     * #define GLX_SWAP_UNDEFINED_OML 32867
     * }
     */
    public static int GLX_SWAP_UNDEFINED_OML() {
        return GLX_SWAP_UNDEFINED_OML;
    }
    private static final int GLX_OML_sync_control = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_OML_sync_control 1
     * }
     */
    public static int GLX_OML_sync_control() {
        return GLX_OML_sync_control;
    }
    private static final int _INTTYPES_H = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _INTTYPES_H 1
     * }
     */
    public static int _INTTYPES_H() {
        return _INTTYPES_H;
    }
    private static final int ____gwchar_t_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ____gwchar_t_defined 1
     * }
     */
    public static int ____gwchar_t_defined() {
        return ____gwchar_t_defined;
    }
    private static final int GLX_SGIS_blended_overlay = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIS_blended_overlay 1
     * }
     */
    public static int GLX_SGIS_blended_overlay() {
        return GLX_SGIS_blended_overlay;
    }
    private static final int GLX_BLENDED_RGBA_SGIS = (int)32805L;
    /**
     * {@snippet lang=c :
     * #define GLX_BLENDED_RGBA_SGIS 32805
     * }
     */
    public static int GLX_BLENDED_RGBA_SGIS() {
        return GLX_BLENDED_RGBA_SGIS;
    }
    private static final int GLX_SGIS_multisample = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIS_multisample 1
     * }
     */
    public static int GLX_SGIS_multisample() {
        return GLX_SGIS_multisample;
    }
    private static final int GLX_SAMPLE_BUFFERS_SGIS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define GLX_SAMPLE_BUFFERS_SGIS 100000
     * }
     */
    public static int GLX_SAMPLE_BUFFERS_SGIS() {
        return GLX_SAMPLE_BUFFERS_SGIS;
    }
    private static final int GLX_SAMPLES_SGIS = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define GLX_SAMPLES_SGIS 100001
     * }
     */
    public static int GLX_SAMPLES_SGIS() {
        return GLX_SAMPLES_SGIS;
    }
    private static final int GLX_SGIS_shared_multisample = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIS_shared_multisample 1
     * }
     */
    public static int GLX_SGIS_shared_multisample() {
        return GLX_SGIS_shared_multisample;
    }
    private static final int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = (int)32806L;
    /**
     * {@snippet lang=c :
     * #define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 32806
     * }
     */
    public static int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS() {
        return GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS;
    }
    private static final int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = (int)32807L;
    /**
     * {@snippet lang=c :
     * #define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 32807
     * }
     */
    public static int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS() {
        return GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS;
    }
    private static final int GLX_SGIX_dmbuffer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_dmbuffer 1
     * }
     */
    public static int GLX_SGIX_dmbuffer() {
        return GLX_SGIX_dmbuffer;
    }
    private static final int GLX_SGIX_fbconfig = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_fbconfig 1
     * }
     */
    public static int GLX_SGIX_fbconfig() {
        return GLX_SGIX_fbconfig;
    }
    private static final int GLX_WINDOW_BIT_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_WINDOW_BIT_SGIX 1
     * }
     */
    public static int GLX_WINDOW_BIT_SGIX() {
        return GLX_WINDOW_BIT_SGIX;
    }
    private static final int GLX_PIXMAP_BIT_SGIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_PIXMAP_BIT_SGIX 2
     * }
     */
    public static int GLX_PIXMAP_BIT_SGIX() {
        return GLX_PIXMAP_BIT_SGIX;
    }
    private static final int GLX_RGBA_BIT_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_RGBA_BIT_SGIX 1
     * }
     */
    public static int GLX_RGBA_BIT_SGIX() {
        return GLX_RGBA_BIT_SGIX;
    }
    private static final int GLX_COLOR_INDEX_BIT_SGIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_COLOR_INDEX_BIT_SGIX 2
     * }
     */
    public static int GLX_COLOR_INDEX_BIT_SGIX() {
        return GLX_COLOR_INDEX_BIT_SGIX;
    }
    private static final int GLX_DRAWABLE_TYPE_SGIX = (int)32784L;
    /**
     * {@snippet lang=c :
     * #define GLX_DRAWABLE_TYPE_SGIX 32784
     * }
     */
    public static int GLX_DRAWABLE_TYPE_SGIX() {
        return GLX_DRAWABLE_TYPE_SGIX;
    }
    private static final int GLX_RENDER_TYPE_SGIX = (int)32785L;
    /**
     * {@snippet lang=c :
     * #define GLX_RENDER_TYPE_SGIX 32785
     * }
     */
    public static int GLX_RENDER_TYPE_SGIX() {
        return GLX_RENDER_TYPE_SGIX;
    }
    private static final int GLX_X_RENDERABLE_SGIX = (int)32786L;
    /**
     * {@snippet lang=c :
     * #define GLX_X_RENDERABLE_SGIX 32786
     * }
     */
    public static int GLX_X_RENDERABLE_SGIX() {
        return GLX_X_RENDERABLE_SGIX;
    }
    private static final int GLX_FBCONFIG_ID_SGIX = (int)32787L;
    /**
     * {@snippet lang=c :
     * #define GLX_FBCONFIG_ID_SGIX 32787
     * }
     */
    public static int GLX_FBCONFIG_ID_SGIX() {
        return GLX_FBCONFIG_ID_SGIX;
    }
    private static final int GLX_RGBA_TYPE_SGIX = (int)32788L;
    /**
     * {@snippet lang=c :
     * #define GLX_RGBA_TYPE_SGIX 32788
     * }
     */
    public static int GLX_RGBA_TYPE_SGIX() {
        return GLX_RGBA_TYPE_SGIX;
    }
    private static final int GLX_COLOR_INDEX_TYPE_SGIX = (int)32789L;
    /**
     * {@snippet lang=c :
     * #define GLX_COLOR_INDEX_TYPE_SGIX 32789
     * }
     */
    public static int GLX_COLOR_INDEX_TYPE_SGIX() {
        return GLX_COLOR_INDEX_TYPE_SGIX;
    }
    private static final int GLX_SGIX_hyperpipe = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_hyperpipe 1
     * }
     */
    public static int GLX_SGIX_hyperpipe() {
        return GLX_SGIX_hyperpipe;
    }
    private static final int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = (int)80L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
     * }
     */
    public static int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX() {
        return GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX;
    }
    private static final int GLX_BAD_HYPERPIPE_CONFIG_SGIX = (int)91L;
    /**
     * {@snippet lang=c :
     * #define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
     * }
     */
    public static int GLX_BAD_HYPERPIPE_CONFIG_SGIX() {
        return GLX_BAD_HYPERPIPE_CONFIG_SGIX;
    }
    private static final int GLX_BAD_HYPERPIPE_SGIX = (int)92L;
    /**
     * {@snippet lang=c :
     * #define GLX_BAD_HYPERPIPE_SGIX 92
     * }
     */
    public static int GLX_BAD_HYPERPIPE_SGIX() {
        return GLX_BAD_HYPERPIPE_SGIX;
    }
    private static final int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 1
     * }
     */
    public static int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX() {
        return GLX_HYPERPIPE_DISPLAY_PIPE_SGIX;
    }
    private static final int GLX_HYPERPIPE_RENDER_PIPE_SGIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_RENDER_PIPE_SGIX 2
     * }
     */
    public static int GLX_HYPERPIPE_RENDER_PIPE_SGIX() {
        return GLX_HYPERPIPE_RENDER_PIPE_SGIX;
    }
    private static final int GLX_PIPE_RECT_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_PIPE_RECT_SGIX 1
     * }
     */
    public static int GLX_PIPE_RECT_SGIX() {
        return GLX_PIPE_RECT_SGIX;
    }
    private static final int GLX_PIPE_RECT_LIMITS_SGIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_PIPE_RECT_LIMITS_SGIX 2
     * }
     */
    public static int GLX_PIPE_RECT_LIMITS_SGIX() {
        return GLX_PIPE_RECT_LIMITS_SGIX;
    }
    private static final int GLX_HYPERPIPE_STEREO_SGIX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_STEREO_SGIX 3
     * }
     */
    public static int GLX_HYPERPIPE_STEREO_SGIX() {
        return GLX_HYPERPIPE_STEREO_SGIX;
    }
    private static final int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 4
     * }
     */
    public static int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX() {
        return GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX;
    }
    private static final int GLX_HYPERPIPE_ID_SGIX = (int)32816L;
    /**
     * {@snippet lang=c :
     * #define GLX_HYPERPIPE_ID_SGIX 32816
     * }
     */
    public static int GLX_HYPERPIPE_ID_SGIX() {
        return GLX_HYPERPIPE_ID_SGIX;
    }
    private static final int GLX_SGIX_pbuffer = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_pbuffer 1
     * }
     */
    public static int GLX_SGIX_pbuffer() {
        return GLX_SGIX_pbuffer;
    }
    private static final int GLX_PBUFFER_BIT_SGIX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_PBUFFER_BIT_SGIX 4
     * }
     */
    public static int GLX_PBUFFER_BIT_SGIX() {
        return GLX_PBUFFER_BIT_SGIX;
    }
    private static final int GLX_BUFFER_CLOBBER_MASK_SGIX = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define GLX_BUFFER_CLOBBER_MASK_SGIX 134217728
     * }
     */
    public static int GLX_BUFFER_CLOBBER_MASK_SGIX() {
        return GLX_BUFFER_CLOBBER_MASK_SGIX;
    }
    private static final int GLX_FRONT_LEFT_BUFFER_BIT_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 1
     * }
     */
    public static int GLX_FRONT_LEFT_BUFFER_BIT_SGIX() {
        return GLX_FRONT_LEFT_BUFFER_BIT_SGIX;
    }
    private static final int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 2
     * }
     */
    public static int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX() {
        return GLX_FRONT_RIGHT_BUFFER_BIT_SGIX;
    }
    private static final int GLX_BACK_LEFT_BUFFER_BIT_SGIX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_LEFT_BUFFER_BIT_SGIX 4
     * }
     */
    public static int GLX_BACK_LEFT_BUFFER_BIT_SGIX() {
        return GLX_BACK_LEFT_BUFFER_BIT_SGIX;
    }
    private static final int GLX_BACK_RIGHT_BUFFER_BIT_SGIX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 8
     * }
     */
    public static int GLX_BACK_RIGHT_BUFFER_BIT_SGIX() {
        return GLX_BACK_RIGHT_BUFFER_BIT_SGIX;
    }
    private static final int GLX_AUX_BUFFERS_BIT_SGIX = (int)16L;
    /**
     * {@snippet lang=c :
     * #define GLX_AUX_BUFFERS_BIT_SGIX 16
     * }
     */
    public static int GLX_AUX_BUFFERS_BIT_SGIX() {
        return GLX_AUX_BUFFERS_BIT_SGIX;
    }
    private static final int GLX_DEPTH_BUFFER_BIT_SGIX = (int)32L;
    /**
     * {@snippet lang=c :
     * #define GLX_DEPTH_BUFFER_BIT_SGIX 32
     * }
     */
    public static int GLX_DEPTH_BUFFER_BIT_SGIX() {
        return GLX_DEPTH_BUFFER_BIT_SGIX;
    }
    private static final int GLX_STENCIL_BUFFER_BIT_SGIX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define GLX_STENCIL_BUFFER_BIT_SGIX 64
     * }
     */
    public static int GLX_STENCIL_BUFFER_BIT_SGIX() {
        return GLX_STENCIL_BUFFER_BIT_SGIX;
    }
    private static final int GLX_ACCUM_BUFFER_BIT_SGIX = (int)128L;
    /**
     * {@snippet lang=c :
     * #define GLX_ACCUM_BUFFER_BIT_SGIX 128
     * }
     */
    public static int GLX_ACCUM_BUFFER_BIT_SGIX() {
        return GLX_ACCUM_BUFFER_BIT_SGIX;
    }
    private static final int GLX_SAMPLE_BUFFERS_BIT_SGIX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define GLX_SAMPLE_BUFFERS_BIT_SGIX 256
     * }
     */
    public static int GLX_SAMPLE_BUFFERS_BIT_SGIX() {
        return GLX_SAMPLE_BUFFERS_BIT_SGIX;
    }
    private static final int GLX_MAX_PBUFFER_WIDTH_SGIX = (int)32790L;
    /**
     * {@snippet lang=c :
     * #define GLX_MAX_PBUFFER_WIDTH_SGIX 32790
     * }
     */
    public static int GLX_MAX_PBUFFER_WIDTH_SGIX() {
        return GLX_MAX_PBUFFER_WIDTH_SGIX;
    }
    private static final int GLX_MAX_PBUFFER_HEIGHT_SGIX = (int)32791L;
    /**
     * {@snippet lang=c :
     * #define GLX_MAX_PBUFFER_HEIGHT_SGIX 32791
     * }
     */
    public static int GLX_MAX_PBUFFER_HEIGHT_SGIX() {
        return GLX_MAX_PBUFFER_HEIGHT_SGIX;
    }
    private static final int GLX_MAX_PBUFFER_PIXELS_SGIX = (int)32792L;
    /**
     * {@snippet lang=c :
     * #define GLX_MAX_PBUFFER_PIXELS_SGIX 32792
     * }
     */
    public static int GLX_MAX_PBUFFER_PIXELS_SGIX() {
        return GLX_MAX_PBUFFER_PIXELS_SGIX;
    }
    private static final int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = (int)32793L;
    /**
     * {@snippet lang=c :
     * #define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 32793
     * }
     */
    public static int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX() {
        return GLX_OPTIMAL_PBUFFER_WIDTH_SGIX;
    }
    private static final int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = (int)32794L;
    /**
     * {@snippet lang=c :
     * #define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 32794
     * }
     */
    public static int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX() {
        return GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX;
    }
    private static final int GLX_PRESERVED_CONTENTS_SGIX = (int)32795L;
    /**
     * {@snippet lang=c :
     * #define GLX_PRESERVED_CONTENTS_SGIX 32795
     * }
     */
    public static int GLX_PRESERVED_CONTENTS_SGIX() {
        return GLX_PRESERVED_CONTENTS_SGIX;
    }
    private static final int GLX_LARGEST_PBUFFER_SGIX = (int)32796L;
    /**
     * {@snippet lang=c :
     * #define GLX_LARGEST_PBUFFER_SGIX 32796
     * }
     */
    public static int GLX_LARGEST_PBUFFER_SGIX() {
        return GLX_LARGEST_PBUFFER_SGIX;
    }
    private static final int GLX_WIDTH_SGIX = (int)32797L;
    /**
     * {@snippet lang=c :
     * #define GLX_WIDTH_SGIX 32797
     * }
     */
    public static int GLX_WIDTH_SGIX() {
        return GLX_WIDTH_SGIX;
    }
    private static final int GLX_HEIGHT_SGIX = (int)32798L;
    /**
     * {@snippet lang=c :
     * #define GLX_HEIGHT_SGIX 32798
     * }
     */
    public static int GLX_HEIGHT_SGIX() {
        return GLX_HEIGHT_SGIX;
    }
    private static final int GLX_EVENT_MASK_SGIX = (int)32799L;
    /**
     * {@snippet lang=c :
     * #define GLX_EVENT_MASK_SGIX 32799
     * }
     */
    public static int GLX_EVENT_MASK_SGIX() {
        return GLX_EVENT_MASK_SGIX;
    }
    private static final int GLX_DAMAGED_SGIX = (int)32800L;
    /**
     * {@snippet lang=c :
     * #define GLX_DAMAGED_SGIX 32800
     * }
     */
    public static int GLX_DAMAGED_SGIX() {
        return GLX_DAMAGED_SGIX;
    }
    private static final int GLX_SAVED_SGIX = (int)32801L;
    /**
     * {@snippet lang=c :
     * #define GLX_SAVED_SGIX 32801
     * }
     */
    public static int GLX_SAVED_SGIX() {
        return GLX_SAVED_SGIX;
    }
    private static final int GLX_WINDOW_SGIX = (int)32802L;
    /**
     * {@snippet lang=c :
     * #define GLX_WINDOW_SGIX 32802
     * }
     */
    public static int GLX_WINDOW_SGIX() {
        return GLX_WINDOW_SGIX;
    }
    private static final int GLX_PBUFFER_SGIX = (int)32803L;
    /**
     * {@snippet lang=c :
     * #define GLX_PBUFFER_SGIX 32803
     * }
     */
    public static int GLX_PBUFFER_SGIX() {
        return GLX_PBUFFER_SGIX;
    }
    private static final int GLX_SGIX_swap_barrier = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_swap_barrier 1
     * }
     */
    public static int GLX_SGIX_swap_barrier() {
        return GLX_SGIX_swap_barrier;
    }
    private static final int GLX_SGIX_swap_group = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_swap_group 1
     * }
     */
    public static int GLX_SGIX_swap_group() {
        return GLX_SGIX_swap_group;
    }
    private static final int GLX_SGIX_video_resize = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_video_resize 1
     * }
     */
    public static int GLX_SGIX_video_resize() {
        return GLX_SGIX_video_resize;
    }
    private static final int GLX_SYNC_FRAME_SGIX = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLX_SYNC_FRAME_SGIX 0
     * }
     */
    public static int GLX_SYNC_FRAME_SGIX() {
        return GLX_SYNC_FRAME_SGIX;
    }
    private static final int GLX_SYNC_SWAP_SGIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SYNC_SWAP_SGIX 1
     * }
     */
    public static int GLX_SYNC_SWAP_SGIX() {
        return GLX_SYNC_SWAP_SGIX;
    }
    private static final int GLX_SGIX_video_source = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_video_source 1
     * }
     */
    public static int GLX_SGIX_video_source() {
        return GLX_SGIX_video_source;
    }
    private static final int GLX_SGIX_visual_select_group = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGIX_visual_select_group 1
     * }
     */
    public static int GLX_SGIX_visual_select_group() {
        return GLX_SGIX_visual_select_group;
    }
    private static final int GLX_VISUAL_SELECT_GROUP_SGIX = (int)32808L;
    /**
     * {@snippet lang=c :
     * #define GLX_VISUAL_SELECT_GROUP_SGIX 32808
     * }
     */
    public static int GLX_VISUAL_SELECT_GROUP_SGIX() {
        return GLX_VISUAL_SELECT_GROUP_SGIX;
    }
    private static final int GLX_SGI_cushion = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGI_cushion 1
     * }
     */
    public static int GLX_SGI_cushion() {
        return GLX_SGI_cushion;
    }
    private static final int GLX_SGI_make_current_read = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGI_make_current_read 1
     * }
     */
    public static int GLX_SGI_make_current_read() {
        return GLX_SGI_make_current_read;
    }
    private static final int GLX_SGI_swap_control = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGI_swap_control 1
     * }
     */
    public static int GLX_SGI_swap_control() {
        return GLX_SGI_swap_control;
    }
    private static final int GLX_SGI_video_sync = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SGI_video_sync 1
     * }
     */
    public static int GLX_SGI_video_sync() {
        return GLX_SGI_video_sync;
    }
    private static final int GLX_SUN_get_transparent_index = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_SUN_get_transparent_index 1
     * }
     */
    public static int GLX_SUN_get_transparent_index() {
        return GLX_SUN_get_transparent_index;
    }
    private static final int GLX_ARB_render_texture = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_ARB_render_texture 1
     * }
     */
    public static int GLX_ARB_render_texture() {
        return GLX_ARB_render_texture;
    }
    private static final int GLX_MESA_swap_frame_usage = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLX_MESA_swap_frame_usage 1
     * }
     */
    public static int GLX_MESA_swap_frame_usage() {
        return GLX_MESA_swap_frame_usage;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u_char
     * }
     */
    public static final OfByte __u_char = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u_short
     * }
     */
    public static final OfShort __u_short = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u_int
     * }
     */
    public static final OfInt __u_int = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_long
     * }
     */
    public static final OfLong __u_long = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __int64_t
     * }
     */
    public static final OfLong __int64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int8_t __int_least8_t
     * }
     */
    public static final OfByte __int_least8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t __uint_least8_t
     * }
     */
    public static final OfByte __uint_least8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t __int_least16_t
     * }
     */
    public static final OfShort __int_least16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __uint_least16_t
     * }
     */
    public static final OfShort __uint_least16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __int_least32_t
     * }
     */
    public static final OfInt __int_least32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __uint_least32_t
     * }
     */
    public static final OfInt __uint_least32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __int_least64_t
     * }
     */
    public static final OfLong __int_least64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __uint_least64_t
     * }
     */
    public static final OfLong __uint_least64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __quad_t
     * }
     */
    public static final OfLong __quad_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __u_quad_t
     * }
     */
    public static final OfLong __u_quad_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __intmax_t
     * }
     */
    public static final OfLong __intmax_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __uintmax_t
     * }
     */
    public static final OfLong __uintmax_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __dev_t
     * }
     */
    public static final OfLong __dev_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uid_t
     * }
     */
    public static final OfInt __uid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __gid_t
     * }
     */
    public static final OfInt __gid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino_t
     * }
     */
    public static final OfLong __ino_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __ino64_t
     * }
     */
    public static final OfLong __ino64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __mode_t
     * }
     */
    public static final OfInt __mode_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __nlink_t
     * }
     */
    public static final OfLong __nlink_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off_t
     * }
     */
    public static final OfLong __off_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __off64_t
     * }
     */
    public static final OfLong __off64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __pid_t
     * }
     */
    public static final OfInt __pid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __clock_t
     * }
     */
    public static final OfLong __clock_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim_t
     * }
     */
    public static final OfLong __rlim_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __rlim64_t
     * }
     */
    public static final OfLong __rlim64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __id_t
     * }
     */
    public static final OfInt __id_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __time_t
     * }
     */
    public static final OfLong __time_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __useconds_t
     * }
     */
    public static final OfInt __useconds_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __suseconds_t
     * }
     */
    public static final OfLong __suseconds_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __daddr_t
     * }
     */
    public static final OfInt __daddr_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __key_t
     * }
     */
    public static final OfInt __key_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __clockid_t
     * }
     */
    public static final OfInt __clockid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *__timer_t
     * }
     */
    public static final AddressLayout __timer_t = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __blksize_t
     * }
     */
    public static final OfLong __blksize_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt_t
     * }
     */
    public static final OfLong __blkcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __blkcnt64_t
     * }
     */
    public static final OfLong __blkcnt64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt_t
     * }
     */
    public static final OfLong __fsblkcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsblkcnt64_t
     * }
     */
    public static final OfLong __fsblkcnt64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt_t
     * }
     */
    public static final OfLong __fsfilcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __fsfilcnt64_t
     * }
     */
    public static final OfLong __fsfilcnt64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fsword_t
     * }
     */
    public static final OfLong __fsword_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __ssize_t
     * }
     */
    public static final OfLong __ssize_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __syscall_slong_t
     * }
     */
    public static final OfLong __syscall_slong_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __syscall_ulong_t
     * }
     */
    public static final OfLong __syscall_ulong_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __off64_t __loff_t
     * }
     */
    public static final OfLong __loff_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef char *__caddr_t
     * }
     */
    public static final AddressLayout __caddr_t = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long __intptr_t
     * }
     */
    public static final OfLong __intptr_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __socklen_t
     * }
     */
    public static final OfInt __socklen_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __sig_atomic_t
     * }
     */
    public static final OfInt __sig_atomic_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfLong nlink_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __pid_t pid_t
     * }
     */
    public static final OfInt pid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __clock_t clock_t
     * }
     */
    public static final OfLong clock_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __clockid_t clockid_t
     * }
     */
    public static final OfInt clockid_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __time_t time_t
     * }
     */
    public static final OfLong time_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __timer_t timer_t
     * }
     */
    public static final AddressLayout timer_t = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = glxext_h.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("pselect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MemorySegment pselect$address() {
        return pselect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfLong blksize_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XID
     * }
     */
    public static final OfLong XID = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Mask
     * }
     */
    public static final OfLong Mask = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Atom
     * }
     */
    public static final OfLong Atom = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long VisualID
     * }
     */
    public static final OfLong VisualID = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long Time
     * }
     */
    public static final OfLong Time = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Window
     * }
     */
    public static final OfLong Window = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Drawable
     * }
     */
    public static final OfLong Drawable = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Font
     * }
     */
    public static final OfLong Font = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Pixmap
     * }
     */
    public static final OfLong Pixmap = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Cursor
     * }
     */
    public static final OfLong Cursor = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID Colormap
     * }
     */
    public static final OfLong Colormap = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID GContext
     * }
     */
    public static final OfLong GContext = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef XID KeySym
     * }
     */
    public static final OfLong KeySym = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char KeyCode
     * }
     */
    public static final OfByte KeyCode = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = glxext_h.C_INT;

    private static class _Xmblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("_Xmblen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static FunctionDescriptor _Xmblen$descriptor() {
        return _Xmblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static MethodHandle _Xmblen$handle() {
        return _Xmblen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static MemorySegment _Xmblen$address() {
        return _Xmblen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int _Xmblen(char *str, int len)
     * }
     */
    public static int _Xmblen(MemorySegment str, int len) {
        var mh$ = _Xmblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xmblen", str, len);
            }
            return (int)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef char *XPointer
     * }
     */
    public static final AddressLayout XPointer = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XGC *GC
     * }
     */
    public static final AddressLayout GC = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     XExtData *ext_data;
     *     struct _XPrivate *private1;
     *     int fd;
     *     int private2;
     *     int proto_major_version;
     *     int proto_minor_version;
     *     char *vendor;
     *     XID private3;
     *     XID private4;
     *     XID private5;
     *     int private6;
     *     XID (*resource_alloc)(struct _XDisplay *);
     *     int byte_order;
     *     int bitmap_unit;
     *     int bitmap_pad;
     *     int bitmap_bit_order;
     *     int nformats;
     *     ScreenFormat *pixmap_format;
     *     int private8;
     *     int release;
     *     struct _XPrivate *private9;
     *     struct _XPrivate *private10;
     *     int qlen;
     *     unsigned long last_request_read;
     *     unsigned long request;
     *     XPointer private11;
     *     XPointer private12;
     *     XPointer private13;
     *     XPointer private14;
     *     unsigned int max_request_size;
     *     struct _XrmHashBucketRec *db;
     *     int (*private15)(struct _XDisplay *);
     *     char *display_name;
     *     int default_screen;
     *     int nscreens;
     *     Screen *screens;
     *     unsigned long motion_buffer;
     *     unsigned long private16;
     *     int min_keycode;
     *     int max_keycode;
     *     XPointer private17;
     *     XPointer private18;
     *     int private19;
     *     char *xdefaults;
     * } *_XPrivDisplay
     * }
     */
    public static final AddressLayout _XPrivDisplay = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOM *XOM
     * }
     */
    public static final AddressLayout XOM = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOC *XOC
     * }
     */
    public static final AddressLayout XOC = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XOC *XFontSet
     * }
     */
    public static final AddressLayout XFontSet = glxext_h.C_POINTER;
    private static final int XOMOrientation_LTR_TTB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_LTR_TTB = 0
     * }
     */
    public static int XOMOrientation_LTR_TTB() {
        return XOMOrientation_LTR_TTB;
    }
    private static final int XOMOrientation_RTL_TTB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_RTL_TTB = 1
     * }
     */
    public static int XOMOrientation_RTL_TTB() {
        return XOMOrientation_RTL_TTB;
    }
    private static final int XOMOrientation_TTB_LTR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_TTB_LTR = 2
     * }
     */
    public static int XOMOrientation_TTB_LTR() {
        return XOMOrientation_TTB_LTR;
    }
    private static final int XOMOrientation_TTB_RTL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_TTB_RTL = 3
     * }
     */
    public static int XOMOrientation_TTB_RTL() {
        return XOMOrientation_TTB_RTL;
    }
    private static final int XOMOrientation_Context = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XOMOrientation_Context = 4
     * }
     */
    public static int XOMOrientation_Context() {
        return XOMOrientation_Context;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _XIM *XIM
     * }
     */
    public static final AddressLayout XIM = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _XIC *XIC
     * }
     */
    public static final AddressLayout XIC = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMStyle
     * }
     */
    public static final OfLong XIMStyle = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *XVaNestedList
     * }
     */
    public static final AddressLayout XVaNestedList = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMFeedback
     * }
     */
    public static final OfLong XIMFeedback = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMPreeditState
     * }
     */
    public static final OfLong XIMPreeditState = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMResetState
     * }
     */
    public static final OfLong XIMResetState = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMStringConversionFeedback
     * }
     */
    public static final OfLong XIMStringConversionFeedback = glxext_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionPosition
     * }
     */
    public static final OfShort XIMStringConversionPosition = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionType
     * }
     */
    public static final OfShort XIMStringConversionType = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short XIMStringConversionOperation
     * }
     */
    public static final OfShort XIMStringConversionOperation = glxext_h.C_SHORT;
    private static final int XIMForwardChar = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMForwardChar = 0
     * }
     */
    public static int XIMForwardChar() {
        return XIMForwardChar;
    }
    private static final int XIMBackwardChar = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBackwardChar = 1
     * }
     */
    public static int XIMBackwardChar() {
        return XIMBackwardChar;
    }
    private static final int XIMForwardWord = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMForwardWord = 2
     * }
     */
    public static int XIMForwardWord() {
        return XIMForwardWord;
    }
    private static final int XIMBackwardWord = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBackwardWord = 3
     * }
     */
    public static int XIMBackwardWord() {
        return XIMBackwardWord;
    }
    private static final int XIMCaretUp = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMCaretUp = 4
     * }
     */
    public static int XIMCaretUp() {
        return XIMCaretUp;
    }
    private static final int XIMCaretDown = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMCaretDown = 5
     * }
     */
    public static int XIMCaretDown() {
        return XIMCaretDown;
    }
    private static final int XIMNextLine = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMNextLine = 6
     * }
     */
    public static int XIMNextLine() {
        return XIMNextLine;
    }
    private static final int XIMPreviousLine = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMPreviousLine = 7
     * }
     */
    public static int XIMPreviousLine() {
        return XIMPreviousLine;
    }
    private static final int XIMLineStart = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMLineStart = 8
     * }
     */
    public static int XIMLineStart() {
        return XIMLineStart;
    }
    private static final int XIMLineEnd = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMLineEnd = 9
     * }
     */
    public static int XIMLineEnd() {
        return XIMLineEnd;
    }
    private static final int XIMAbsolutePosition = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMAbsolutePosition = 10
     * }
     */
    public static int XIMAbsolutePosition() {
        return XIMAbsolutePosition;
    }
    private static final int XIMDontChange = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMDontChange = 11
     * }
     */
    public static int XIMDontChange() {
        return XIMDontChange;
    }
    private static final int XIMIsInvisible = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsInvisible = 0
     * }
     */
    public static int XIMIsInvisible() {
        return XIMIsInvisible;
    }
    private static final int XIMIsPrimary = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsPrimary = 1
     * }
     */
    public static int XIMIsPrimary() {
        return XIMIsPrimary;
    }
    private static final int XIMIsSecondary = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMIsSecondary = 2
     * }
     */
    public static int XIMIsSecondary() {
        return XIMIsSecondary;
    }
    private static final int XIMTextType = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMTextType = 0
     * }
     */
    public static int XIMTextType() {
        return XIMTextType;
    }
    private static final int XIMBitmapType = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XIMBitmapType = 1
     * }
     */
    public static int XIMBitmapType() {
        return XIMBitmapType;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long XIMHotKeyState
     * }
     */
    public static final OfLong XIMHotKeyState = glxext_h.C_LONG;

    private static class _Xdebug$constants {
        public static final OfInt LAYOUT = glxext_h.C_INT;
        public static final MemorySegment SEGMENT = glxext_h.findOrThrow("_Xdebug").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static OfInt _Xdebug$layout() {
        return _Xdebug$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static MemorySegment _Xdebug$segment() {
        return _Xdebug$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static int _Xdebug() {
        return _Xdebug$constants.SEGMENT.get(_Xdebug$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern int _Xdebug
     * }
     */
    public static void _Xdebug(int varValue) {
        _Xdebug$constants.SEGMENT.set(_Xdebug$constants.LAYOUT, 0L, varValue);
    }

    private static class XLoadQueryFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLoadQueryFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XLoadQueryFont$descriptor() {
        return XLoadQueryFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static MethodHandle XLoadQueryFont$handle() {
        return XLoadQueryFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static MemorySegment XLoadQueryFont$address() {
        return XLoadQueryFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XFontStruct *XLoadQueryFont(Display *, const char *)
     * }
     */
    public static MemorySegment XLoadQueryFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadQueryFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLoadQueryFont", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static FunctionDescriptor XQueryFont$descriptor() {
        return XQueryFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static MethodHandle XQueryFont$handle() {
        return XQueryFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static MemorySegment XQueryFont$address() {
        return XQueryFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XFontStruct *XQueryFont(Display *, XID)
     * }
     */
    public static MemorySegment XQueryFont(MemorySegment x0, long x1) {
        var mh$ = XQueryFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryFont", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetMotionEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetMotionEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static FunctionDescriptor XGetMotionEvents$descriptor() {
        return XGetMotionEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static MethodHandle XGetMotionEvents$handle() {
        return XGetMotionEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static MemorySegment XGetMotionEvents$address() {
        return XGetMotionEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *)
     * }
     */
    public static MemorySegment XGetMotionEvents(MemorySegment x0, long x1, long x2, long x3, MemorySegment x4) {
        var mh$ = XGetMotionEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetMotionEvents", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteModifiermapEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_CHAR,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDeleteModifiermapEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XDeleteModifiermapEntry$descriptor() {
        return XDeleteModifiermapEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MethodHandle XDeleteModifiermapEntry$handle() {
        return XDeleteModifiermapEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XDeleteModifiermapEntry$address() {
        return XDeleteModifiermapEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XDeleteModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XDeleteModifiermapEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteModifiermapEntry", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetModifierMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetModifierMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static FunctionDescriptor XGetModifierMapping$descriptor() {
        return XGetModifierMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static MethodHandle XGetModifierMapping$handle() {
        return XGetModifierMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static MemorySegment XGetModifierMapping$address() {
        return XGetModifierMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XGetModifierMapping(Display *)
     * }
     */
    public static MemorySegment XGetModifierMapping(MemorySegment x0) {
        var mh$ = XGetModifierMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetModifierMapping", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInsertModifiermapEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_CHAR,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInsertModifiermapEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XInsertModifiermapEntry$descriptor() {
        return XInsertModifiermapEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MethodHandle XInsertModifiermapEntry$handle() {
        return XInsertModifiermapEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XInsertModifiermapEntry$address() {
        return XInsertModifiermapEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, KeyCode, int)
     * }
     */
    public static MemorySegment XInsertModifiermapEntry(MemorySegment x0, byte x1, int x2) {
        var mh$ = XInsertModifiermapEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInsertModifiermapEntry", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNewModifiermap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XNewModifiermap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static FunctionDescriptor XNewModifiermap$descriptor() {
        return XNewModifiermap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static MethodHandle XNewModifiermap$handle() {
        return XNewModifiermap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static MemorySegment XNewModifiermap$address() {
        return XNewModifiermap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XModifierKeymap *XNewModifiermap(int)
     * }
     */
    public static MemorySegment XNewModifiermap(int x0) {
        var mh$ = XNewModifiermap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNewModifiermap", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XCreateImage$descriptor() {
        return XCreateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XCreateImage$handle() {
        return XCreateImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XCreateImage$address() {
        return XCreateImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XCreateImage(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, MemorySegment x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCreateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInitImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static FunctionDescriptor XInitImage$descriptor() {
        return XInitImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static MethodHandle XInitImage$handle() {
        return XInitImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static MemorySegment XInitImage$address() {
        return XInitImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XInitImage(XImage *)
     * }
     */
    public static int XInitImage(MemorySegment x0) {
        var mh$ = XInitImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitImage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static FunctionDescriptor XGetImage$descriptor() {
        return XGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static MethodHandle XGetImage$handle() {
        return XGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static MemorySegment XGetImage$address() {
        return XGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int)
     * }
     */
    public static MemorySegment XGetImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7) {
        var mh$ = XGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetImage", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSubImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetSubImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static FunctionDescriptor XGetSubImage$descriptor() {
        return XGetSubImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static MethodHandle XGetSubImage$handle() {
        return XGetSubImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static MemorySegment XGetSubImage$address() {
        return XGetSubImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned long, int, XImage *, int, int)
     * }
     */
    public static MemorySegment XGetSubImage(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, int x7, MemorySegment x8, int x9, int x10) {
        var mh$ = XGetSubImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSubImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XOpenDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static FunctionDescriptor XOpenDisplay$descriptor() {
        return XOpenDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static MethodHandle XOpenDisplay$handle() {
        return XOpenDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static MemorySegment XOpenDisplay$address() {
        return XOpenDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Display *XOpenDisplay(const char *)
     * }
     */
    public static MemorySegment XOpenDisplay(MemorySegment x0) {
        var mh$ = XOpenDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenDisplay", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XrmInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XrmInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static FunctionDescriptor XrmInitialize$descriptor() {
        return XrmInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static MethodHandle XrmInitialize$handle() {
        return XrmInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static MemorySegment XrmInitialize$address() {
        return XrmInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XrmInitialize()
     * }
     */
    public static void XrmInitialize() {
        var mh$ = XrmInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XrmInitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFetchBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static FunctionDescriptor XFetchBytes$descriptor() {
        return XFetchBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static MethodHandle XFetchBytes$handle() {
        return XFetchBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static MemorySegment XFetchBytes$address() {
        return XFetchBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XFetchBytes(Display *, int *)
     * }
     */
    public static MemorySegment XFetchBytes(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFetchBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchBytes", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFetchBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static FunctionDescriptor XFetchBuffer$descriptor() {
        return XFetchBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static MethodHandle XFetchBuffer$handle() {
        return XFetchBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static MemorySegment XFetchBuffer$address() {
        return XFetchBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XFetchBuffer(Display *, int *, int)
     * }
     */
    public static MemorySegment XFetchBuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFetchBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchBuffer", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetAtomName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetAtomName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static FunctionDescriptor XGetAtomName$descriptor() {
        return XGetAtomName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static MethodHandle XGetAtomName$handle() {
        return XGetAtomName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static MemorySegment XGetAtomName$address() {
        return XGetAtomName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XGetAtomName(Display *, Atom)
     * }
     */
    public static MemorySegment XGetAtomName(MemorySegment x0, long x1) {
        var mh$ = XGetAtomName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetAtomName", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetAtomNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetAtomNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static FunctionDescriptor XGetAtomNames$descriptor() {
        return XGetAtomNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static MethodHandle XGetAtomNames$handle() {
        return XGetAtomNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static MemorySegment XGetAtomNames$address() {
        return XGetAtomNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetAtomNames(Display *, Atom *, int, char **)
     * }
     */
    public static int XGetAtomNames(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XGetAtomNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetAtomNames", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetDefault");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor XGetDefault$descriptor() {
        return XGetDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static MethodHandle XGetDefault$handle() {
        return XGetDefault.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static MemorySegment XGetDefault$address() {
        return XGetDefault.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XGetDefault(Display *, const char *, const char *)
     * }
     */
    public static MemorySegment XGetDefault(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetDefault", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static FunctionDescriptor XDisplayName$descriptor() {
        return XDisplayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static MethodHandle XDisplayName$handle() {
        return XDisplayName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static MemorySegment XDisplayName$address() {
        return XDisplayName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XDisplayName(const char *)
     * }
     */
    public static MemorySegment XDisplayName(MemorySegment x0) {
        var mh$ = XDisplayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayName", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeysymToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XKeysymToString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static FunctionDescriptor XKeysymToString$descriptor() {
        return XKeysymToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static MethodHandle XKeysymToString$handle() {
        return XKeysymToString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static MemorySegment XKeysymToString$address() {
        return XKeysymToString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XKeysymToString(KeySym)
     * }
     */
    public static MemorySegment XKeysymToString(long x0) {
        var mh$ = XKeysymToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeysymToString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSynchronize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSynchronize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static FunctionDescriptor XSynchronize$descriptor() {
        return XSynchronize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static MethodHandle XSynchronize$handle() {
        return XSynchronize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static MemorySegment XSynchronize$address() {
        return XSynchronize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int (*XSynchronize(Display *, int))(Display *)
     * }
     */
    public static MemorySegment XSynchronize(MemorySegment x0, int x1) {
        var mh$ = XSynchronize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSynchronize", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAfterFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetAfterFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static FunctionDescriptor XSetAfterFunction$descriptor() {
        return XSetAfterFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static MethodHandle XSetAfterFunction$handle() {
        return XSetAfterFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static MemorySegment XSetAfterFunction$address() {
        return XSetAfterFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int (*XSetAfterFunction(Display *, int (*)(Display *)))(Display *)
     * }
     */
    public static MemorySegment XSetAfterFunction(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetAfterFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAfterFunction", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternAtom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInternAtom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static FunctionDescriptor XInternAtom$descriptor() {
        return XInternAtom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static MethodHandle XInternAtom$handle() {
        return XInternAtom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static MemorySegment XInternAtom$address() {
        return XInternAtom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Atom XInternAtom(Display *, const char *, int)
     * }
     */
    public static long XInternAtom(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XInternAtom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternAtom", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternAtoms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInternAtoms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static FunctionDescriptor XInternAtoms$descriptor() {
        return XInternAtoms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static MethodHandle XInternAtoms$handle() {
        return XInternAtoms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static MemorySegment XInternAtoms$address() {
        return XInternAtoms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XInternAtoms(Display *, char **, int, int, Atom *)
     * }
     */
    public static int XInternAtoms(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XInternAtoms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternAtoms", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyColormapAndFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCopyColormapAndFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XCopyColormapAndFree$descriptor() {
        return XCopyColormapAndFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static MethodHandle XCopyColormapAndFree$handle() {
        return XCopyColormapAndFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static MemorySegment XCopyColormapAndFree$address() {
        return XCopyColormapAndFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Colormap XCopyColormapAndFree(Display *, Colormap)
     * }
     */
    public static long XCopyColormapAndFree(MemorySegment x0, long x1) {
        var mh$ = XCopyColormapAndFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyColormapAndFree", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static FunctionDescriptor XCreateColormap$descriptor() {
        return XCreateColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static MethodHandle XCreateColormap$handle() {
        return XCreateColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static MemorySegment XCreateColormap$address() {
        return XCreateColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Colormap XCreateColormap(Display *, Window, Visual *, int)
     * }
     */
    public static long XCreateColormap(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XCreateColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateColormap", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmapCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreatePixmapCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmapCursor$descriptor() {
        return XCreatePixmapCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmapCursor$handle() {
        return XCreatePixmapCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XCreatePixmapCursor$address() {
        return XCreatePixmapCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int)
     * }
     */
    public static long XCreatePixmapCursor(MemorySegment x0, long x1, long x2, MemorySegment x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XCreatePixmapCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmapCursor", x0, x1, x2, x3, x4, x5, x6);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateGlyphCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateGlyphCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static FunctionDescriptor XCreateGlyphCursor$descriptor() {
        return XCreateGlyphCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static MethodHandle XCreateGlyphCursor$handle() {
        return XCreateGlyphCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static MemorySegment XCreateGlyphCursor$address() {
        return XCreateGlyphCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, const XColor *, const XColor *)
     * }
     */
    public static long XCreateGlyphCursor(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XCreateGlyphCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateGlyphCursor", x0, x1, x2, x3, x4, x5, x6);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateFontCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateFontCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreateFontCursor$descriptor() {
        return XCreateFontCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static MethodHandle XCreateFontCursor$handle() {
        return XCreateFontCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static MemorySegment XCreateFontCursor$address() {
        return XCreateFontCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Cursor XCreateFontCursor(Display *, unsigned int)
     * }
     */
    public static long XCreateFontCursor(MemorySegment x0, int x1) {
        var mh$ = XCreateFontCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateFontCursor", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLoadFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLoadFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XLoadFont$descriptor() {
        return XLoadFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static MethodHandle XLoadFont$handle() {
        return XLoadFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static MemorySegment XLoadFont$address() {
        return XLoadFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Font XLoadFont(Display *, const char *)
     * }
     */
    public static long XLoadFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XLoadFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLoadFont", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XCreateGC$descriptor() {
        return XCreateGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XCreateGC$handle() {
        return XCreateGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static MemorySegment XCreateGC$address() {
        return XCreateGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GC XCreateGC(Display *, Drawable, unsigned long, XGCValues *)
     * }
     */
    public static MemorySegment XCreateGC(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCreateGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateGC", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGContextFromGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGContextFromGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static FunctionDescriptor XGContextFromGC$descriptor() {
        return XGContextFromGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static MethodHandle XGContextFromGC$handle() {
        return XGContextFromGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static MemorySegment XGContextFromGC$address() {
        return XGContextFromGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GContext XGContextFromGC(GC)
     * }
     */
    public static long XGContextFromGC(MemorySegment x0) {
        var mh$ = XGContextFromGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGContextFromGC", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFlushGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFlushGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static FunctionDescriptor XFlushGC$descriptor() {
        return XFlushGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static MethodHandle XFlushGC$handle() {
        return XFlushGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static MemorySegment XFlushGC$address() {
        return XFlushGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XFlushGC(Display *, GC)
     * }
     */
    public static void XFlushGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFlushGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFlushGC", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreatePixmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmap$descriptor() {
        return XCreatePixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmap$handle() {
        return XCreatePixmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XCreatePixmap$address() {
        return XCreatePixmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int)
     * }
     */
    public static long XCreatePixmap(MemorySegment x0, long x1, int x2, int x3, int x4) {
        var mh$ = XCreatePixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmap", x0, x1, x2, x3, x4);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateBitmapFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateBitmapFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreateBitmapFromData$descriptor() {
        return XCreateBitmapFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XCreateBitmapFromData$handle() {
        return XCreateBitmapFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XCreateBitmapFromData$address() {
        return XCreateBitmapFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int)
     * }
     */
    public static long XCreateBitmapFromData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XCreateBitmapFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateBitmapFromData", x0, x1, x2, x3, x4);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreatePixmapFromBitmapData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreatePixmapFromBitmapData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static FunctionDescriptor XCreatePixmapFromBitmapData$descriptor() {
        return XCreatePixmapFromBitmapData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static MethodHandle XCreatePixmapFromBitmapData$handle() {
        return XCreatePixmapFromBitmapData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static MemorySegment XCreatePixmapFromBitmapData$address() {
        return XCreatePixmapFromBitmapData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned long, unsigned long, unsigned int)
     * }
     */
    public static long XCreatePixmapFromBitmapData(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, long x5, long x6, int x7) {
        var mh$ = XCreatePixmapFromBitmapData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreatePixmapFromBitmapData", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateSimpleWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateSimpleWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static FunctionDescriptor XCreateSimpleWindow$descriptor() {
        return XCreateSimpleWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static MethodHandle XCreateSimpleWindow$handle() {
        return XCreateSimpleWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static MemorySegment XCreateSimpleWindow$address() {
        return XCreateSimpleWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
     * }
     */
    public static long XCreateSimpleWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, long x7, long x8) {
        var mh$ = XCreateSimpleWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateSimpleWindow", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSelectionOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetSelectionOwner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static FunctionDescriptor XGetSelectionOwner$descriptor() {
        return XGetSelectionOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static MethodHandle XGetSelectionOwner$handle() {
        return XGetSelectionOwner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static MemorySegment XGetSelectionOwner$address() {
        return XGetSelectionOwner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XGetSelectionOwner(Display *, Atom)
     * }
     */
    public static long XGetSelectionOwner(MemorySegment x0, long x1) {
        var mh$ = XGetSelectionOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSelectionOwner", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XCreateWindow$descriptor() {
        return XCreateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MethodHandle XCreateWindow$handle() {
        return XCreateWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MemorySegment XCreateWindow$address() {
        return XCreateWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static long XCreateWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, long x10, MemorySegment x11) {
        var mh$ = XCreateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateWindow", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListInstalledColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListInstalledColormaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static FunctionDescriptor XListInstalledColormaps$descriptor() {
        return XListInstalledColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static MethodHandle XListInstalledColormaps$handle() {
        return XListInstalledColormaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListInstalledColormaps$address() {
        return XListInstalledColormaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Colormap *XListInstalledColormaps(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListInstalledColormaps(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListInstalledColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListInstalledColormaps", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListFonts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListFonts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static FunctionDescriptor XListFonts$descriptor() {
        return XListFonts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static MethodHandle XListFonts$handle() {
        return XListFonts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static MemorySegment XListFonts$address() {
        return XListFonts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **XListFonts(Display *, const char *, int, int *)
     * }
     */
    public static MemorySegment XListFonts(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = XListFonts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListFonts", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListFontsWithInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListFontsWithInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static FunctionDescriptor XListFontsWithInfo$descriptor() {
        return XListFontsWithInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static MethodHandle XListFontsWithInfo$handle() {
        return XListFontsWithInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static MemorySegment XListFontsWithInfo$address() {
        return XListFontsWithInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **)
     * }
     */
    public static MemorySegment XListFontsWithInfo(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XListFontsWithInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListFontsWithInfo", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetFontPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static FunctionDescriptor XGetFontPath$descriptor() {
        return XGetFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static MethodHandle XGetFontPath$handle() {
        return XGetFontPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static MemorySegment XGetFontPath$address() {
        return XGetFontPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **XGetFontPath(Display *, int *)
     * }
     */
    public static MemorySegment XGetFontPath(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetFontPath", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListExtensions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListExtensions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static FunctionDescriptor XListExtensions$descriptor() {
        return XListExtensions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static MethodHandle XListExtensions$handle() {
        return XListExtensions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static MemorySegment XListExtensions$address() {
        return XListExtensions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char **XListExtensions(Display *, int *)
     * }
     */
    public static MemorySegment XListExtensions(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListExtensions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListExtensions", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static FunctionDescriptor XListProperties$descriptor() {
        return XListProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static MethodHandle XListProperties$handle() {
        return XListProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListProperties$address() {
        return XListProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Atom *XListProperties(Display *, Window, int *)
     * }
     */
    public static MemorySegment XListProperties(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XListProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListProperties", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListHosts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static FunctionDescriptor XListHosts$descriptor() {
        return XListHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static MethodHandle XListHosts$handle() {
        return XListHosts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static MemorySegment XListHosts$address() {
        return XListHosts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XHostAddress *XListHosts(Display *, int *, int *)
     * }
     */
    public static MemorySegment XListHosts(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XListHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListHosts", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeycodeToKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_CHAR,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XKeycodeToKeysym");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static FunctionDescriptor XKeycodeToKeysym$descriptor() {
        return XKeycodeToKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static MethodHandle XKeycodeToKeysym$handle() {
        return XKeycodeToKeysym.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static MemorySegment XKeycodeToKeysym$address() {
        return XKeycodeToKeysym.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern KeySym XKeycodeToKeysym(Display *, KeyCode, int)
     * }
     */
    public static long XKeycodeToKeysym(MemorySegment x0, byte x1, int x2) {
        var mh$ = XKeycodeToKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeycodeToKeysym", x0, x1, x2);
            }
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLookupKeysym");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static FunctionDescriptor XLookupKeysym$descriptor() {
        return XLookupKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static MethodHandle XLookupKeysym$handle() {
        return XLookupKeysym.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static MemorySegment XLookupKeysym$address() {
        return XLookupKeysym.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern KeySym XLookupKeysym(XKeyEvent *, int)
     * }
     */
    public static long XLookupKeysym(MemorySegment x0, int x1) {
        var mh$ = XLookupKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupKeysym", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_CHAR,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetKeyboardMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static FunctionDescriptor XGetKeyboardMapping$descriptor() {
        return XGetKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static MethodHandle XGetKeyboardMapping$handle() {
        return XGetKeyboardMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static MemorySegment XGetKeyboardMapping$address() {
        return XGetKeyboardMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern KeySym *XGetKeyboardMapping(Display *, KeyCode, int, int *)
     * }
     */
    public static MemorySegment XGetKeyboardMapping(MemorySegment x0, byte x1, int x2, MemorySegment x3) {
        var mh$ = XGetKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetKeyboardMapping", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStringToKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStringToKeysym");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static FunctionDescriptor XStringToKeysym$descriptor() {
        return XStringToKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static MethodHandle XStringToKeysym$handle() {
        return XStringToKeysym.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static MemorySegment XStringToKeysym$address() {
        return XStringToKeysym.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern KeySym XStringToKeysym(const char *)
     * }
     */
    public static long XStringToKeysym(MemorySegment x0) {
        var mh$ = XStringToKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStringToKeysym", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaxRequestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMaxRequestSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static FunctionDescriptor XMaxRequestSize$descriptor() {
        return XMaxRequestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static MethodHandle XMaxRequestSize$handle() {
        return XMaxRequestSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static MemorySegment XMaxRequestSize$address() {
        return XMaxRequestSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long XMaxRequestSize(Display *)
     * }
     */
    public static long XMaxRequestSize(MemorySegment x0) {
        var mh$ = XMaxRequestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaxRequestSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XExtendedMaxRequestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XExtendedMaxRequestSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static FunctionDescriptor XExtendedMaxRequestSize$descriptor() {
        return XExtendedMaxRequestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static MethodHandle XExtendedMaxRequestSize$handle() {
        return XExtendedMaxRequestSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static MemorySegment XExtendedMaxRequestSize$address() {
        return XExtendedMaxRequestSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long XExtendedMaxRequestSize(Display *)
     * }
     */
    public static long XExtendedMaxRequestSize(MemorySegment x0) {
        var mh$ = XExtendedMaxRequestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XExtendedMaxRequestSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResourceManagerString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XResourceManagerString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static FunctionDescriptor XResourceManagerString$descriptor() {
        return XResourceManagerString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static MethodHandle XResourceManagerString$handle() {
        return XResourceManagerString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static MemorySegment XResourceManagerString$address() {
        return XResourceManagerString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XResourceManagerString(Display *)
     * }
     */
    public static MemorySegment XResourceManagerString(MemorySegment x0) {
        var mh$ = XResourceManagerString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResourceManagerString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenResourceString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XScreenResourceString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static FunctionDescriptor XScreenResourceString$descriptor() {
        return XScreenResourceString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static MethodHandle XScreenResourceString$handle() {
        return XScreenResourceString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static MemorySegment XScreenResourceString$address() {
        return XScreenResourceString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XScreenResourceString(Screen *)
     * }
     */
    public static MemorySegment XScreenResourceString(MemorySegment x0) {
        var mh$ = XScreenResourceString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenResourceString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayMotionBufferSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayMotionBufferSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static FunctionDescriptor XDisplayMotionBufferSize$descriptor() {
        return XDisplayMotionBufferSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static MethodHandle XDisplayMotionBufferSize$handle() {
        return XDisplayMotionBufferSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static MemorySegment XDisplayMotionBufferSize$address() {
        return XDisplayMotionBufferSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XDisplayMotionBufferSize(Display *)
     * }
     */
    public static long XDisplayMotionBufferSize(MemorySegment x0) {
        var mh$ = XDisplayMotionBufferSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayMotionBufferSize", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XVisualIDFromVisual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XVisualIDFromVisual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static FunctionDescriptor XVisualIDFromVisual$descriptor() {
        return XVisualIDFromVisual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static MethodHandle XVisualIDFromVisual$handle() {
        return XVisualIDFromVisual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static MemorySegment XVisualIDFromVisual$address() {
        return XVisualIDFromVisual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern VisualID XVisualIDFromVisual(Visual *)
     * }
     */
    public static long XVisualIDFromVisual(MemorySegment x0) {
        var mh$ = XVisualIDFromVisual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XVisualIDFromVisual", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitThreads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInitThreads");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static FunctionDescriptor XInitThreads$descriptor() {
        return XInitThreads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static MethodHandle XInitThreads$handle() {
        return XInitThreads.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static MemorySegment XInitThreads$address() {
        return XInitThreads.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XInitThreads()
     * }
     */
    public static int XInitThreads() {
        var mh$ = XInitThreads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitThreads");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLockDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLockDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XLockDisplay$descriptor() {
        return XLockDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static MethodHandle XLockDisplay$handle() {
        return XLockDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static MemorySegment XLockDisplay$address() {
        return XLockDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XLockDisplay(Display *)
     * }
     */
    public static void XLockDisplay(MemorySegment x0) {
        var mh$ = XLockDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLockDisplay", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnlockDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnlockDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XUnlockDisplay$descriptor() {
        return XUnlockDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static MethodHandle XUnlockDisplay$handle() {
        return XUnlockDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static MemorySegment XUnlockDisplay$address() {
        return XUnlockDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XUnlockDisplay(Display *)
     * }
     */
    public static void XUnlockDisplay(MemorySegment x0) {
        var mh$ = XUnlockDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnlockDisplay", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInitExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInitExtension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static FunctionDescriptor XInitExtension$descriptor() {
        return XInitExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static MethodHandle XInitExtension$handle() {
        return XInitExtension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static MemorySegment XInitExtension$address() {
        return XInitExtension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XExtCodes *XInitExtension(Display *, const char *)
     * }
     */
    public static MemorySegment XInitExtension(MemorySegment x0, MemorySegment x1) {
        var mh$ = XInitExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInitExtension", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddExtension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static FunctionDescriptor XAddExtension$descriptor() {
        return XAddExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static MethodHandle XAddExtension$handle() {
        return XAddExtension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static MemorySegment XAddExtension$address() {
        return XAddExtension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XExtCodes *XAddExtension(Display *)
     * }
     */
    public static MemorySegment XAddExtension(MemorySegment x0) {
        var mh$ = XAddExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddExtension", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFindOnExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFindOnExtensionList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static FunctionDescriptor XFindOnExtensionList$descriptor() {
        return XFindOnExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static MethodHandle XFindOnExtensionList$handle() {
        return XFindOnExtensionList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static MemorySegment XFindOnExtensionList$address() {
        return XFindOnExtensionList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XExtData *XFindOnExtensionList(XExtData **, int)
     * }
     */
    public static MemorySegment XFindOnExtensionList(MemorySegment x0, int x1) {
        var mh$ = XFindOnExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFindOnExtensionList", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEHeadOfExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            XEDataObject.layout()
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEHeadOfExtensionList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static FunctionDescriptor XEHeadOfExtensionList$descriptor() {
        return XEHeadOfExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static MethodHandle XEHeadOfExtensionList$handle() {
        return XEHeadOfExtensionList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static MemorySegment XEHeadOfExtensionList$address() {
        return XEHeadOfExtensionList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XExtData **XEHeadOfExtensionList(XEDataObject)
     * }
     */
    public static MemorySegment XEHeadOfExtensionList(MemorySegment x0) {
        var mh$ = XEHeadOfExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEHeadOfExtensionList", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRootWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRootWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static FunctionDescriptor XRootWindow$descriptor() {
        return XRootWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static MethodHandle XRootWindow$handle() {
        return XRootWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static MemorySegment XRootWindow$address() {
        return XRootWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XRootWindow(Display *, int)
     * }
     */
    public static long XRootWindow(MemorySegment x0, int x1) {
        var mh$ = XRootWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRootWindow", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultRootWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultRootWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultRootWindow$descriptor() {
        return XDefaultRootWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static MethodHandle XDefaultRootWindow$handle() {
        return XDefaultRootWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static MemorySegment XDefaultRootWindow$address() {
        return XDefaultRootWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XDefaultRootWindow(Display *)
     * }
     */
    public static long XDefaultRootWindow(MemorySegment x0) {
        var mh$ = XDefaultRootWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultRootWindow", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRootWindowOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRootWindowOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XRootWindowOfScreen$descriptor() {
        return XRootWindowOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static MethodHandle XRootWindowOfScreen$handle() {
        return XRootWindowOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static MemorySegment XRootWindowOfScreen$address() {
        return XRootWindowOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Window XRootWindowOfScreen(Screen *)
     * }
     */
    public static long XRootWindowOfScreen(MemorySegment x0) {
        var mh$ = XRootWindowOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRootWindowOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultVisual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultVisual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultVisual$descriptor() {
        return XDefaultVisual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static MethodHandle XDefaultVisual$handle() {
        return XDefaultVisual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static MemorySegment XDefaultVisual$address() {
        return XDefaultVisual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Visual *XDefaultVisual(Display *, int)
     * }
     */
    public static MemorySegment XDefaultVisual(MemorySegment x0, int x1) {
        var mh$ = XDefaultVisual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultVisual", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultVisualOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultVisualOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultVisualOfScreen$descriptor() {
        return XDefaultVisualOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultVisualOfScreen$handle() {
        return XDefaultVisualOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultVisualOfScreen$address() {
        return XDefaultVisualOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Visual *XDefaultVisualOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultVisualOfScreen(MemorySegment x0) {
        var mh$ = XDefaultVisualOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultVisualOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultGC$descriptor() {
        return XDefaultGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static MethodHandle XDefaultGC$handle() {
        return XDefaultGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static MemorySegment XDefaultGC$address() {
        return XDefaultGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GC XDefaultGC(Display *, int)
     * }
     */
    public static MemorySegment XDefaultGC(MemorySegment x0, int x1) {
        var mh$ = XDefaultGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultGC", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultGCOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultGCOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultGCOfScreen$descriptor() {
        return XDefaultGCOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultGCOfScreen$handle() {
        return XDefaultGCOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultGCOfScreen$address() {
        return XDefaultGCOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GC XDefaultGCOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultGCOfScreen(MemorySegment x0) {
        var mh$ = XDefaultGCOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultGCOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBlackPixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBlackPixel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static FunctionDescriptor XBlackPixel$descriptor() {
        return XBlackPixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static MethodHandle XBlackPixel$handle() {
        return XBlackPixel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static MemorySegment XBlackPixel$address() {
        return XBlackPixel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XBlackPixel(Display *, int)
     * }
     */
    public static long XBlackPixel(MemorySegment x0, int x1) {
        var mh$ = XBlackPixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBlackPixel", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWhitePixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWhitePixel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static FunctionDescriptor XWhitePixel$descriptor() {
        return XWhitePixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static MethodHandle XWhitePixel$handle() {
        return XWhitePixel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static MemorySegment XWhitePixel$address() {
        return XWhitePixel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XWhitePixel(Display *, int)
     * }
     */
    public static long XWhitePixel(MemorySegment x0, int x1) {
        var mh$ = XWhitePixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWhitePixel", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllPlanes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static FunctionDescriptor XAllPlanes$descriptor() {
        return XAllPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static MethodHandle XAllPlanes$handle() {
        return XAllPlanes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static MemorySegment XAllPlanes$address() {
        return XAllPlanes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XAllPlanes()
     * }
     */
    public static long XAllPlanes() {
        var mh$ = XAllPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllPlanes");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBlackPixelOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBlackPixelOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XBlackPixelOfScreen$descriptor() {
        return XBlackPixelOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static MethodHandle XBlackPixelOfScreen$handle() {
        return XBlackPixelOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static MemorySegment XBlackPixelOfScreen$address() {
        return XBlackPixelOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XBlackPixelOfScreen(Screen *)
     * }
     */
    public static long XBlackPixelOfScreen(MemorySegment x0) {
        var mh$ = XBlackPixelOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBlackPixelOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWhitePixelOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWhitePixelOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWhitePixelOfScreen$descriptor() {
        return XWhitePixelOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWhitePixelOfScreen$handle() {
        return XWhitePixelOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static MemorySegment XWhitePixelOfScreen$address() {
        return XWhitePixelOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XWhitePixelOfScreen(Screen *)
     * }
     */
    public static long XWhitePixelOfScreen(MemorySegment x0) {
        var mh$ = XWhitePixelOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWhitePixelOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNextRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XNextRequest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static FunctionDescriptor XNextRequest$descriptor() {
        return XNextRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static MethodHandle XNextRequest$handle() {
        return XNextRequest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static MemorySegment XNextRequest$address() {
        return XNextRequest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XNextRequest(Display *)
     * }
     */
    public static long XNextRequest(MemorySegment x0) {
        var mh$ = XNextRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNextRequest", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLastKnownRequestProcessed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLastKnownRequestProcessed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static FunctionDescriptor XLastKnownRequestProcessed$descriptor() {
        return XLastKnownRequestProcessed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static MethodHandle XLastKnownRequestProcessed$handle() {
        return XLastKnownRequestProcessed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static MemorySegment XLastKnownRequestProcessed$address() {
        return XLastKnownRequestProcessed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern unsigned long XLastKnownRequestProcessed(Display *)
     * }
     */
    public static long XLastKnownRequestProcessed(MemorySegment x0) {
        var mh$ = XLastKnownRequestProcessed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLastKnownRequestProcessed", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XServerVendor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XServerVendor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static FunctionDescriptor XServerVendor$descriptor() {
        return XServerVendor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static MethodHandle XServerVendor$handle() {
        return XServerVendor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static MemorySegment XServerVendor$address() {
        return XServerVendor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XServerVendor(Display *)
     * }
     */
    public static MemorySegment XServerVendor(MemorySegment x0) {
        var mh$ = XServerVendor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XServerVendor", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static FunctionDescriptor XDisplayString$descriptor() {
        return XDisplayString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static MethodHandle XDisplayString$handle() {
        return XDisplayString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static MemorySegment XDisplayString$address() {
        return XDisplayString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XDisplayString(Display *)
     * }
     */
    public static MemorySegment XDisplayString(MemorySegment x0) {
        var mh$ = XDisplayString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayString", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultColormap$descriptor() {
        return XDefaultColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static MethodHandle XDefaultColormap$handle() {
        return XDefaultColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static MemorySegment XDefaultColormap$address() {
        return XDefaultColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Colormap XDefaultColormap(Display *, int)
     * }
     */
    public static long XDefaultColormap(MemorySegment x0, int x1) {
        var mh$ = XDefaultColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultColormap", x0, x1);
            }
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultColormapOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultColormapOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultColormapOfScreen$descriptor() {
        return XDefaultColormapOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultColormapOfScreen$handle() {
        return XDefaultColormapOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultColormapOfScreen$address() {
        return XDefaultColormapOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Colormap XDefaultColormapOfScreen(Screen *)
     * }
     */
    public static long XDefaultColormapOfScreen(MemorySegment x0) {
        var mh$ = XDefaultColormapOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultColormapOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDisplayOfScreen$descriptor() {
        return XDisplayOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDisplayOfScreen$handle() {
        return XDisplayOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDisplayOfScreen$address() {
        return XDisplayOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDisplayOfScreen(MemorySegment x0) {
        var mh$ = XDisplayOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfScreen", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenOfDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XScreenOfDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static FunctionDescriptor XScreenOfDisplay$descriptor() {
        return XScreenOfDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static MethodHandle XScreenOfDisplay$handle() {
        return XScreenOfDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static MemorySegment XScreenOfDisplay$address() {
        return XScreenOfDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Screen *XScreenOfDisplay(Display *, int)
     * }
     */
    public static MemorySegment XScreenOfDisplay(MemorySegment x0, int x1) {
        var mh$ = XScreenOfDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenOfDisplay", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultScreenOfDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultScreenOfDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultScreenOfDisplay$descriptor() {
        return XDefaultScreenOfDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static MethodHandle XDefaultScreenOfDisplay$handle() {
        return XDefaultScreenOfDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static MemorySegment XDefaultScreenOfDisplay$address() {
        return XDefaultScreenOfDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Screen *XDefaultScreenOfDisplay(Display *)
     * }
     */
    public static MemorySegment XDefaultScreenOfDisplay(MemorySegment x0) {
        var mh$ = XDefaultScreenOfDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultScreenOfDisplay", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEventMaskOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEventMaskOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XEventMaskOfScreen$descriptor() {
        return XEventMaskOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static MethodHandle XEventMaskOfScreen$handle() {
        return XEventMaskOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static MemorySegment XEventMaskOfScreen$address() {
        return XEventMaskOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern long XEventMaskOfScreen(Screen *)
     * }
     */
    public static long XEventMaskOfScreen(MemorySegment x0) {
        var mh$ = XEventMaskOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEventMaskOfScreen", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenNumberOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XScreenNumberOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XScreenNumberOfScreen$descriptor() {
        return XScreenNumberOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static MethodHandle XScreenNumberOfScreen$handle() {
        return XScreenNumberOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static MemorySegment XScreenNumberOfScreen$address() {
        return XScreenNumberOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XScreenNumberOfScreen(Screen *)
     * }
     */
    public static int XScreenNumberOfScreen(MemorySegment x0) {
        var mh$ = XScreenNumberOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenNumberOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetErrorHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetErrorHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static FunctionDescriptor XSetErrorHandler$descriptor() {
        return XSetErrorHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static MethodHandle XSetErrorHandler$handle() {
        return XSetErrorHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static MemorySegment XSetErrorHandler$address() {
        return XSetErrorHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XErrorHandler XSetErrorHandler(XErrorHandler)
     * }
     */
    public static MemorySegment XSetErrorHandler(MemorySegment x0) {
        var mh$ = XSetErrorHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetErrorHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIOErrorHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetIOErrorHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static FunctionDescriptor XSetIOErrorHandler$descriptor() {
        return XSetIOErrorHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static MethodHandle XSetIOErrorHandler$handle() {
        return XSetIOErrorHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static MemorySegment XSetIOErrorHandler$address() {
        return XSetIOErrorHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler)
     * }
     */
    public static MemorySegment XSetIOErrorHandler(MemorySegment x0) {
        var mh$ = XSetIOErrorHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIOErrorHandler", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListPixmapFormats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListPixmapFormats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static FunctionDescriptor XListPixmapFormats$descriptor() {
        return XListPixmapFormats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static MethodHandle XListPixmapFormats$handle() {
        return XListPixmapFormats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static MemorySegment XListPixmapFormats$address() {
        return XListPixmapFormats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XPixmapFormatValues *XListPixmapFormats(Display *, int *)
     * }
     */
    public static MemorySegment XListPixmapFormats(MemorySegment x0, MemorySegment x1) {
        var mh$ = XListPixmapFormats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListPixmapFormats", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XListDepths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XListDepths");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static FunctionDescriptor XListDepths$descriptor() {
        return XListDepths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static MethodHandle XListDepths$handle() {
        return XListDepths.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static MemorySegment XListDepths$address() {
        return XListDepths.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *XListDepths(Display *, int, int *)
     * }
     */
    public static MemorySegment XListDepths(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XListDepths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XListDepths", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReconfigureWMWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XReconfigureWMWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static FunctionDescriptor XReconfigureWMWindow$descriptor() {
        return XReconfigureWMWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static MethodHandle XReconfigureWMWindow$handle() {
        return XReconfigureWMWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static MemorySegment XReconfigureWMWindow$address() {
        return XReconfigureWMWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *)
     * }
     */
    public static int XReconfigureWMWindow(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XReconfigureWMWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReconfigureWMWindow", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMProtocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMProtocols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static FunctionDescriptor XGetWMProtocols$descriptor() {
        return XGetWMProtocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static MethodHandle XGetWMProtocols$handle() {
        return XGetWMProtocols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static MemorySegment XGetWMProtocols$address() {
        return XGetWMProtocols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMProtocols(Display *, Window, Atom **, int *)
     * }
     */
    public static int XGetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMProtocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMProtocols", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMProtocols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMProtocols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static FunctionDescriptor XSetWMProtocols$descriptor() {
        return XSetWMProtocols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static MethodHandle XSetWMProtocols$handle() {
        return XSetWMProtocols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static MemorySegment XSetWMProtocols$address() {
        return XSetWMProtocols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWMProtocols(Display *, Window, Atom *, int)
     * }
     */
    public static int XSetWMProtocols(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMProtocols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMProtocols", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIconifyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XIconifyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XIconifyWindow$descriptor() {
        return XIconifyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static MethodHandle XIconifyWindow$handle() {
        return XIconifyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static MemorySegment XIconifyWindow$address() {
        return XIconifyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XIconifyWindow(Display *, Window, int)
     * }
     */
    public static int XIconifyWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XIconifyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIconifyWindow", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWithdrawWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWithdrawWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XWithdrawWindow$descriptor() {
        return XWithdrawWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static MethodHandle XWithdrawWindow$handle() {
        return XWithdrawWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static MemorySegment XWithdrawWindow$address() {
        return XWithdrawWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWithdrawWindow(Display *, Window, int)
     * }
     */
    public static int XWithdrawWindow(MemorySegment x0, long x1, int x2) {
        var mh$ = XWithdrawWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWithdrawWindow", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetCommand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static FunctionDescriptor XGetCommand$descriptor() {
        return XGetCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static MethodHandle XGetCommand$handle() {
        return XGetCommand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static MemorySegment XGetCommand$address() {
        return XGetCommand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetCommand(Display *, Window, char ***, int *)
     * }
     */
    public static int XGetCommand(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetCommand", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMColormapWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMColormapWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static FunctionDescriptor XGetWMColormapWindows$descriptor() {
        return XGetWMColormapWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static MethodHandle XGetWMColormapWindows$handle() {
        return XGetWMColormapWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static MemorySegment XGetWMColormapWindows$address() {
        return XGetWMColormapWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMColormapWindows(Display *, Window, Window **, int *)
     * }
     */
    public static int XGetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMColormapWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMColormapWindows", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMColormapWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMColormapWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static FunctionDescriptor XSetWMColormapWindows$descriptor() {
        return XSetWMColormapWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static MethodHandle XSetWMColormapWindows$handle() {
        return XSetWMColormapWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static MemorySegment XSetWMColormapWindows$address() {
        return XSetWMColormapWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWMColormapWindows(Display *, Window, Window *, int)
     * }
     */
    public static int XSetWMColormapWindows(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetWMColormapWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMColormapWindows", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeStringList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static FunctionDescriptor XFreeStringList$descriptor() {
        return XFreeStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static MethodHandle XFreeStringList$handle() {
        return XFreeStringList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static MemorySegment XFreeStringList$address() {
        return XFreeStringList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XFreeStringList(char **)
     * }
     */
    public static void XFreeStringList(MemorySegment x0) {
        var mh$ = XFreeStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeStringList", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTransientForHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetTransientForHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static FunctionDescriptor XSetTransientForHint$descriptor() {
        return XSetTransientForHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static MethodHandle XSetTransientForHint$handle() {
        return XSetTransientForHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static MemorySegment XSetTransientForHint$address() {
        return XSetTransientForHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetTransientForHint(Display *, Window, Window)
     * }
     */
    public static int XSetTransientForHint(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetTransientForHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTransientForHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XActivateScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XActivateScreenSaver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static FunctionDescriptor XActivateScreenSaver$descriptor() {
        return XActivateScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static MethodHandle XActivateScreenSaver$handle() {
        return XActivateScreenSaver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static MemorySegment XActivateScreenSaver$address() {
        return XActivateScreenSaver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XActivateScreenSaver(Display *)
     * }
     */
    public static int XActivateScreenSaver(MemorySegment x0) {
        var mh$ = XActivateScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XActivateScreenSaver", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddHost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static FunctionDescriptor XAddHost$descriptor() {
        return XAddHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static MethodHandle XAddHost$handle() {
        return XAddHost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static MemorySegment XAddHost$address() {
        return XAddHost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAddHost(Display *, XHostAddress *)
     * }
     */
    public static int XAddHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddHost", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddHosts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static FunctionDescriptor XAddHosts$descriptor() {
        return XAddHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MethodHandle XAddHosts$handle() {
        return XAddHosts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MemorySegment XAddHosts$address() {
        return XAddHosts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAddHosts(Display *, XHostAddress *, int)
     * }
     */
    public static int XAddHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XAddHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddHosts", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddToExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddToExtensionList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static FunctionDescriptor XAddToExtensionList$descriptor() {
        return XAddToExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static MethodHandle XAddToExtensionList$handle() {
        return XAddToExtensionList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static MemorySegment XAddToExtensionList$address() {
        return XAddToExtensionList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAddToExtensionList(struct _XExtData **, XExtData *)
     * }
     */
    public static int XAddToExtensionList(MemorySegment x0, MemorySegment x1) {
        var mh$ = XAddToExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddToExtensionList", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddToSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddToSaveSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static FunctionDescriptor XAddToSaveSet$descriptor() {
        return XAddToSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static MethodHandle XAddToSaveSet$handle() {
        return XAddToSaveSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static MemorySegment XAddToSaveSet$address() {
        return XAddToSaveSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAddToSaveSet(Display *, Window)
     * }
     */
    public static int XAddToSaveSet(MemorySegment x0, long x1) {
        var mh$ = XAddToSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddToSaveSet", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XAllocColor$descriptor() {
        return XAllocColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XAllocColor$handle() {
        return XAllocColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static MemorySegment XAllocColor$address() {
        return XAllocColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAllocColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XAllocColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XAllocColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColorCells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocColorCells");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static FunctionDescriptor XAllocColorCells$descriptor() {
        return XAllocColorCells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static MethodHandle XAllocColorCells$handle() {
        return XAllocColorCells.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static MemorySegment XAllocColorCells$address() {
        return XAllocColorCells.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAllocColorCells(Display *, Colormap, int, unsigned long *, unsigned int, unsigned long *, unsigned int)
     * }
     */
    public static int XAllocColorCells(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XAllocColorCells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColorCells", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocColorPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocColorPlanes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static FunctionDescriptor XAllocColorPlanes$descriptor() {
        return XAllocColorPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static MethodHandle XAllocColorPlanes$handle() {
        return XAllocColorPlanes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static MemorySegment XAllocColorPlanes$address() {
        return XAllocColorPlanes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAllocColorPlanes(Display *, Colormap, int, unsigned long *, int, int, int, int, unsigned long *, unsigned long *, unsigned long *)
     * }
     */
    public static int XAllocColorPlanes(MemorySegment x0, long x1, int x2, MemorySegment x3, int x4, int x5, int x6, int x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XAllocColorPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocColorPlanes", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocNamedColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocNamedColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XAllocNamedColor$descriptor() {
        return XAllocNamedColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MethodHandle XAllocNamedColor$handle() {
        return XAllocNamedColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MemorySegment XAllocNamedColor$address() {
        return XAllocNamedColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static int XAllocNamedColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XAllocNamedColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocNamedColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllowEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllowEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static FunctionDescriptor XAllowEvents$descriptor() {
        return XAllowEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static MethodHandle XAllowEvents$handle() {
        return XAllowEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static MemorySegment XAllowEvents$address() {
        return XAllowEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAllowEvents(Display *, int, Time)
     * }
     */
    public static int XAllowEvents(MemorySegment x0, int x1, long x2) {
        var mh$ = XAllowEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllowEvents", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAutoRepeatOff {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAutoRepeatOff");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static FunctionDescriptor XAutoRepeatOff$descriptor() {
        return XAutoRepeatOff.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static MethodHandle XAutoRepeatOff$handle() {
        return XAutoRepeatOff.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static MemorySegment XAutoRepeatOff$address() {
        return XAutoRepeatOff.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAutoRepeatOff(Display *)
     * }
     */
    public static int XAutoRepeatOff(MemorySegment x0) {
        var mh$ = XAutoRepeatOff.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAutoRepeatOff", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAutoRepeatOn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAutoRepeatOn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static FunctionDescriptor XAutoRepeatOn$descriptor() {
        return XAutoRepeatOn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static MethodHandle XAutoRepeatOn$handle() {
        return XAutoRepeatOn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static MemorySegment XAutoRepeatOn$address() {
        return XAutoRepeatOn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAutoRepeatOn(Display *)
     * }
     */
    public static int XAutoRepeatOn(MemorySegment x0) {
        var mh$ = XAutoRepeatOn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAutoRepeatOn", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static FunctionDescriptor XBell$descriptor() {
        return XBell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static MethodHandle XBell$handle() {
        return XBell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static MemorySegment XBell$address() {
        return XBell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XBell(Display *, int)
     * }
     */
    public static int XBell(MemorySegment x0, int x1) {
        var mh$ = XBell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBell", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapBitOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBitmapBitOrder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapBitOrder$descriptor() {
        return XBitmapBitOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static MethodHandle XBitmapBitOrder$handle() {
        return XBitmapBitOrder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static MemorySegment XBitmapBitOrder$address() {
        return XBitmapBitOrder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XBitmapBitOrder(Display *)
     * }
     */
    public static int XBitmapBitOrder(MemorySegment x0) {
        var mh$ = XBitmapBitOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapBitOrder", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapPad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBitmapPad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapPad$descriptor() {
        return XBitmapPad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static MethodHandle XBitmapPad$handle() {
        return XBitmapPad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static MemorySegment XBitmapPad$address() {
        return XBitmapPad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XBitmapPad(Display *)
     * }
     */
    public static int XBitmapPad(MemorySegment x0) {
        var mh$ = XBitmapPad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapPad", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBitmapUnit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBitmapUnit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static FunctionDescriptor XBitmapUnit$descriptor() {
        return XBitmapUnit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static MethodHandle XBitmapUnit$handle() {
        return XBitmapUnit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static MemorySegment XBitmapUnit$address() {
        return XBitmapUnit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XBitmapUnit(Display *)
     * }
     */
    public static int XBitmapUnit(MemorySegment x0) {
        var mh$ = XBitmapUnit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBitmapUnit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCellsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCellsOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XCellsOfScreen$descriptor() {
        return XCellsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XCellsOfScreen$handle() {
        return XCellsOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static MemorySegment XCellsOfScreen$address() {
        return XCellsOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCellsOfScreen(Screen *)
     * }
     */
    public static int XCellsOfScreen(MemorySegment x0) {
        var mh$ = XCellsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCellsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeActivePointerGrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeActivePointerGrab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static FunctionDescriptor XChangeActivePointerGrab$descriptor() {
        return XChangeActivePointerGrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static MethodHandle XChangeActivePointerGrab$handle() {
        return XChangeActivePointerGrab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static MemorySegment XChangeActivePointerGrab$address() {
        return XChangeActivePointerGrab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time)
     * }
     */
    public static int XChangeActivePointerGrab(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = XChangeActivePointerGrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeActivePointerGrab", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XChangeGC$descriptor() {
        return XChangeGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XChangeGC$handle() {
        return XChangeGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MemorySegment XChangeGC$address() {
        return XChangeGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeGC(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static int XChangeGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XChangeGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeGC", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeKeyboardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeKeyboardControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static FunctionDescriptor XChangeKeyboardControl$descriptor() {
        return XChangeKeyboardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static MethodHandle XChangeKeyboardControl$handle() {
        return XChangeKeyboardControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static MemorySegment XChangeKeyboardControl$address() {
        return XChangeKeyboardControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeKeyboardControl(Display *, unsigned long, XKeyboardControl *)
     * }
     */
    public static int XChangeKeyboardControl(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XChangeKeyboardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeKeyboardControl", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeKeyboardMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static FunctionDescriptor XChangeKeyboardMapping$descriptor() {
        return XChangeKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static MethodHandle XChangeKeyboardMapping$handle() {
        return XChangeKeyboardMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static MemorySegment XChangeKeyboardMapping$address() {
        return XChangeKeyboardMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeKeyboardMapping(Display *, int, int, KeySym *, int)
     * }
     */
    public static int XChangeKeyboardMapping(MemorySegment x0, int x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XChangeKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeKeyboardMapping", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangePointerControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangePointerControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XChangePointerControl$descriptor() {
        return XChangePointerControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static MethodHandle XChangePointerControl$handle() {
        return XChangePointerControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static MemorySegment XChangePointerControl$address() {
        return XChangePointerControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangePointerControl(Display *, int, int, int, int, int)
     * }
     */
    public static int XChangePointerControl(MemorySegment x0, int x1, int x2, int x3, int x4, int x5) {
        var mh$ = XChangePointerControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangePointerControl", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XChangeProperty$descriptor() {
        return XChangeProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static MethodHandle XChangeProperty$handle() {
        return XChangeProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static MemorySegment XChangeProperty$address() {
        return XChangeProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned char *, int)
     * }
     */
    public static int XChangeProperty(MemorySegment x0, long x1, long x2, long x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XChangeProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeProperty", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeSaveSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XChangeSaveSet$descriptor() {
        return XChangeSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static MethodHandle XChangeSaveSet$handle() {
        return XChangeSaveSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static MemorySegment XChangeSaveSet$address() {
        return XChangeSaveSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeSaveSet(Display *, Window, int)
     * }
     */
    public static int XChangeSaveSet(MemorySegment x0, long x1, int x2) {
        var mh$ = XChangeSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeSaveSet", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XChangeWindowAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XChangeWindowAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XChangeWindowAttributes$descriptor() {
        return XChangeWindowAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MethodHandle XChangeWindowAttributes$handle() {
        return XChangeWindowAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static MemorySegment XChangeWindowAttributes$address() {
        return XChangeWindowAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XChangeWindowAttributes(Display *, Window, unsigned long, XSetWindowAttributes *)
     * }
     */
    public static int XChangeWindowAttributes(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XChangeWindowAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XChangeWindowAttributes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCheckIfEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XCheckIfEvent$descriptor() {
        return XCheckIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XCheckIfEvent$handle() {
        return XCheckIfEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MemorySegment XCheckIfEvent$address() {
        return XCheckIfEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XCheckIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XCheckIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckMaskEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCheckMaskEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckMaskEvent$descriptor() {
        return XCheckMaskEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MethodHandle XCheckMaskEvent$handle() {
        return XCheckMaskEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MemorySegment XCheckMaskEvent$address() {
        return XCheckMaskEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCheckMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static int XCheckMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XCheckMaskEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckMaskEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckTypedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCheckTypedEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckTypedEvent$descriptor() {
        return XCheckTypedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static MethodHandle XCheckTypedEvent$handle() {
        return XCheckTypedEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static MemorySegment XCheckTypedEvent$address() {
        return XCheckTypedEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCheckTypedEvent(Display *, int, XEvent *)
     * }
     */
    public static int XCheckTypedEvent(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XCheckTypedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckTypedEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckTypedWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCheckTypedWindowEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckTypedWindowEvent$descriptor() {
        return XCheckTypedWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static MethodHandle XCheckTypedWindowEvent$handle() {
        return XCheckTypedWindowEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static MemorySegment XCheckTypedWindowEvent$address() {
        return XCheckTypedWindowEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCheckTypedWindowEvent(Display *, Window, int, XEvent *)
     * }
     */
    public static int XCheckTypedWindowEvent(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XCheckTypedWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckTypedWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCheckWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCheckWindowEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XCheckWindowEvent$descriptor() {
        return XCheckWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MethodHandle XCheckWindowEvent$handle() {
        return XCheckWindowEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MemorySegment XCheckWindowEvent$address() {
        return XCheckWindowEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCheckWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static int XCheckWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XCheckWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCheckWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCirculateSubwindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindows$descriptor() {
        return XCirculateSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static MethodHandle XCirculateSubwindows$handle() {
        return XCirculateSubwindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static MemorySegment XCirculateSubwindows$address() {
        return XCirculateSubwindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindows(Display *, Window, int)
     * }
     */
    public static int XCirculateSubwindows(MemorySegment x0, long x1, int x2) {
        var mh$ = XCirculateSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindows", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindowsDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCirculateSubwindowsDown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindowsDown$descriptor() {
        return XCirculateSubwindowsDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static MethodHandle XCirculateSubwindowsDown$handle() {
        return XCirculateSubwindowsDown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static MemorySegment XCirculateSubwindowsDown$address() {
        return XCirculateSubwindowsDown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsDown(Display *, Window)
     * }
     */
    public static int XCirculateSubwindowsDown(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindowsDown", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCirculateSubwindowsUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCirculateSubwindowsUp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static FunctionDescriptor XCirculateSubwindowsUp$descriptor() {
        return XCirculateSubwindowsUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static MethodHandle XCirculateSubwindowsUp$handle() {
        return XCirculateSubwindowsUp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static MemorySegment XCirculateSubwindowsUp$address() {
        return XCirculateSubwindowsUp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCirculateSubwindowsUp(Display *, Window)
     * }
     */
    public static int XCirculateSubwindowsUp(MemorySegment x0, long x1) {
        var mh$ = XCirculateSubwindowsUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCirculateSubwindowsUp", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClearArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XClearArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static FunctionDescriptor XClearArea$descriptor() {
        return XClearArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static MethodHandle XClearArea$handle() {
        return XClearArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static MemorySegment XClearArea$address() {
        return XClearArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int)
     * }
     */
    public static int XClearArea(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, int x6) {
        var mh$ = XClearArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClearArea", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClearWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XClearWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XClearWindow$descriptor() {
        return XClearWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static MethodHandle XClearWindow$handle() {
        return XClearWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static MemorySegment XClearWindow$address() {
        return XClearWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XClearWindow(Display *, Window)
     * }
     */
    public static int XClearWindow(MemorySegment x0, long x1) {
        var mh$ = XClearWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClearWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCloseDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static FunctionDescriptor XCloseDisplay$descriptor() {
        return XCloseDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static MethodHandle XCloseDisplay$handle() {
        return XCloseDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static MemorySegment XCloseDisplay$address() {
        return XCloseDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCloseDisplay(Display *)
     * }
     */
    public static int XCloseDisplay(MemorySegment x0) {
        var mh$ = XCloseDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseDisplay", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConfigureWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XConfigureWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static FunctionDescriptor XConfigureWindow$descriptor() {
        return XConfigureWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static MethodHandle XConfigureWindow$handle() {
        return XConfigureWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static MemorySegment XConfigureWindow$address() {
        return XConfigureWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *)
     * }
     */
    public static int XConfigureWindow(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XConfigureWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConfigureWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConnectionNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XConnectionNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static FunctionDescriptor XConnectionNumber$descriptor() {
        return XConnectionNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static MethodHandle XConnectionNumber$handle() {
        return XConnectionNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static MemorySegment XConnectionNumber$address() {
        return XConnectionNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XConnectionNumber(Display *)
     * }
     */
    public static int XConnectionNumber(MemorySegment x0) {
        var mh$ = XConnectionNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConnectionNumber", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConvertSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XConvertSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static FunctionDescriptor XConvertSelection$descriptor() {
        return XConvertSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static MethodHandle XConvertSelection$handle() {
        return XConvertSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static MemorySegment XConvertSelection$address() {
        return XConvertSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time)
     * }
     */
    public static int XConvertSelection(MemorySegment x0, long x1, long x2, long x3, long x4, long x5) {
        var mh$ = XConvertSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConvertSelection", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCopyArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XCopyArea$descriptor() {
        return XCopyArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XCopyArea$handle() {
        return XCopyArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XCopyArea$address() {
        return XCopyArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XCopyArea(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XCopyArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyArea", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCopyGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static FunctionDescriptor XCopyGC$descriptor() {
        return XCopyGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static MethodHandle XCopyGC$handle() {
        return XCopyGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static MemorySegment XCopyGC$address() {
        return XCopyGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCopyGC(Display *, GC, unsigned long, GC)
     * }
     */
    public static int XCopyGC(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XCopyGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyGC", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCopyPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCopyPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XCopyPlane$descriptor() {
        return XCopyPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static MethodHandle XCopyPlane$handle() {
        return XCopyPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static MemorySegment XCopyPlane$address() {
        return XCopyPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned long)
     * }
     */
    public static int XCopyPlane(MemorySegment x0, long x1, long x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9, long x10) {
        var mh$ = XCopyPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCopyPlane", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static FunctionDescriptor XDefaultDepth$descriptor() {
        return XDefaultDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static MethodHandle XDefaultDepth$handle() {
        return XDefaultDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static MemorySegment XDefaultDepth$address() {
        return XDefaultDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDefaultDepth(Display *, int)
     * }
     */
    public static int XDefaultDepth(MemorySegment x0, int x1) {
        var mh$ = XDefaultDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultDepth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultDepthOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultDepthOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XDefaultDepthOfScreen$descriptor() {
        return XDefaultDepthOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static MethodHandle XDefaultDepthOfScreen$handle() {
        return XDefaultDepthOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static MemorySegment XDefaultDepthOfScreen$address() {
        return XDefaultDepthOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDefaultDepthOfScreen(Screen *)
     * }
     */
    public static int XDefaultDepthOfScreen(MemorySegment x0) {
        var mh$ = XDefaultDepthOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultDepthOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static FunctionDescriptor XDefaultScreen$descriptor() {
        return XDefaultScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static MethodHandle XDefaultScreen$handle() {
        return XDefaultScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static MemorySegment XDefaultScreen$address() {
        return XDefaultScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDefaultScreen(Display *)
     * }
     */
    public static int XDefaultScreen(MemorySegment x0) {
        var mh$ = XDefaultScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefineCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefineCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static FunctionDescriptor XDefineCursor$descriptor() {
        return XDefineCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static MethodHandle XDefineCursor$handle() {
        return XDefineCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static MemorySegment XDefineCursor$address() {
        return XDefineCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDefineCursor(Display *, Window, Cursor)
     * }
     */
    public static int XDefineCursor(MemorySegment x0, long x1, long x2) {
        var mh$ = XDefineCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefineCursor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDeleteProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static FunctionDescriptor XDeleteProperty$descriptor() {
        return XDeleteProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static MethodHandle XDeleteProperty$handle() {
        return XDeleteProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static MemorySegment XDeleteProperty$address() {
        return XDeleteProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDeleteProperty(Display *, Window, Atom)
     * }
     */
    public static int XDeleteProperty(MemorySegment x0, long x1, long x2) {
        var mh$ = XDeleteProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDestroyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XDestroyWindow$descriptor() {
        return XDestroyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static MethodHandle XDestroyWindow$handle() {
        return XDestroyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static MemorySegment XDestroyWindow$address() {
        return XDestroyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDestroyWindow(Display *, Window)
     * }
     */
    public static int XDestroyWindow(MemorySegment x0, long x1) {
        var mh$ = XDestroyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroySubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDestroySubwindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XDestroySubwindows$descriptor() {
        return XDestroySubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XDestroySubwindows$handle() {
        return XDestroySubwindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static MemorySegment XDestroySubwindows$address() {
        return XDestroySubwindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDestroySubwindows(Display *, Window)
     * }
     */
    public static int XDestroySubwindows(MemorySegment x0, long x1) {
        var mh$ = XDestroySubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroySubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDoesBackingStore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDoesBackingStore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static FunctionDescriptor XDoesBackingStore$descriptor() {
        return XDoesBackingStore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static MethodHandle XDoesBackingStore$handle() {
        return XDoesBackingStore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static MemorySegment XDoesBackingStore$address() {
        return XDoesBackingStore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDoesBackingStore(Screen *)
     * }
     */
    public static int XDoesBackingStore(MemorySegment x0) {
        var mh$ = XDoesBackingStore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDoesBackingStore", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDoesSaveUnders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDoesSaveUnders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static FunctionDescriptor XDoesSaveUnders$descriptor() {
        return XDoesSaveUnders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static MethodHandle XDoesSaveUnders$handle() {
        return XDoesSaveUnders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static MemorySegment XDoesSaveUnders$address() {
        return XDoesSaveUnders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDoesSaveUnders(Screen *)
     * }
     */
    public static int XDoesSaveUnders(MemorySegment x0) {
        var mh$ = XDoesSaveUnders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDoesSaveUnders", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisableAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisableAccessControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static FunctionDescriptor XDisableAccessControl$descriptor() {
        return XDisableAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static MethodHandle XDisableAccessControl$handle() {
        return XDisableAccessControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static MemorySegment XDisableAccessControl$address() {
        return XDisableAccessControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisableAccessControl(Display *)
     * }
     */
    public static int XDisableAccessControl(MemorySegment x0) {
        var mh$ = XDisableAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisableAccessControl", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayCells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayCells");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayCells$descriptor() {
        return XDisplayCells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static MethodHandle XDisplayCells$handle() {
        return XDisplayCells.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static MemorySegment XDisplayCells$address() {
        return XDisplayCells.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayCells(Display *, int)
     * }
     */
    public static int XDisplayCells(MemorySegment x0, int x1) {
        var mh$ = XDisplayCells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayCells", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayHeight$descriptor() {
        return XDisplayHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static MethodHandle XDisplayHeight$handle() {
        return XDisplayHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static MemorySegment XDisplayHeight$address() {
        return XDisplayHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayHeight(Display *, int)
     * }
     */
    public static int XDisplayHeight(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayHeight", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayHeightMM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayHeightMM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayHeightMM$descriptor() {
        return XDisplayHeightMM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static MethodHandle XDisplayHeightMM$handle() {
        return XDisplayHeightMM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static MemorySegment XDisplayHeightMM$address() {
        return XDisplayHeightMM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayHeightMM(Display *, int)
     * }
     */
    public static int XDisplayHeightMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayHeightMM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayHeightMM", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayKeycodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayKeycodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static FunctionDescriptor XDisplayKeycodes$descriptor() {
        return XDisplayKeycodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static MethodHandle XDisplayKeycodes$handle() {
        return XDisplayKeycodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static MemorySegment XDisplayKeycodes$address() {
        return XDisplayKeycodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayKeycodes(Display *, int *, int *)
     * }
     */
    public static int XDisplayKeycodes(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XDisplayKeycodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayKeycodes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayPlanes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayPlanes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayPlanes$descriptor() {
        return XDisplayPlanes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static MethodHandle XDisplayPlanes$handle() {
        return XDisplayPlanes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static MemorySegment XDisplayPlanes$address() {
        return XDisplayPlanes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayPlanes(Display *, int)
     * }
     */
    public static int XDisplayPlanes(MemorySegment x0, int x1) {
        var mh$ = XDisplayPlanes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayPlanes", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayWidth$descriptor() {
        return XDisplayWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static MethodHandle XDisplayWidth$handle() {
        return XDisplayWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static MemorySegment XDisplayWidth$address() {
        return XDisplayWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayWidth(Display *, int)
     * }
     */
    public static int XDisplayWidth(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayWidth", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDisplayWidthMM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayWidthMM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static FunctionDescriptor XDisplayWidthMM$descriptor() {
        return XDisplayWidthMM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static MethodHandle XDisplayWidthMM$handle() {
        return XDisplayWidthMM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static MemorySegment XDisplayWidthMM$address() {
        return XDisplayWidthMM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDisplayWidthMM(Display *, int)
     * }
     */
    public static int XDisplayWidthMM(MemorySegment x0, int x1) {
        var mh$ = XDisplayWidthMM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayWidthMM", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XDrawArc$descriptor() {
        return XDrawArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XDrawArc$handle() {
        return XDrawArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XDrawArc$address() {
        return XDrawArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XDrawArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XDrawArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawArc", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawArcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawArcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static FunctionDescriptor XDrawArcs$descriptor() {
        return XDrawArcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MethodHandle XDrawArcs$handle() {
        return XDrawArcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MemorySegment XDrawArcs$address() {
        return XDrawArcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static int XDrawArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawArcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawArcs", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawImageString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XDrawImageString$descriptor() {
        return XDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XDrawImageString$handle() {
        return XDrawImageString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment XDrawImageString$address() {
        return XDrawImageString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static int XDrawImageString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawImageString", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawImageString16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawImageString16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XDrawImageString16$descriptor() {
        return XDrawImageString16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MethodHandle XDrawImageString16$handle() {
        return XDrawImageString16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MemorySegment XDrawImageString16$address() {
        return XDrawImageString16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static int XDrawImageString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawImageString16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawImageString16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawLine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XDrawLine$descriptor() {
        return XDrawLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static MethodHandle XDrawLine$handle() {
        return XDrawLine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static MemorySegment XDrawLine$address() {
        return XDrawLine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawLine(Display *, Drawable, GC, int, int, int, int)
     * }
     */
    public static int XDrawLine(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawLine", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawLines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawLines");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XDrawLines$descriptor() {
        return XDrawLines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MethodHandle XDrawLines$handle() {
        return XDrawLines.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MemorySegment XDrawLines$address() {
        return XDrawLines.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawLines(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static int XDrawLines(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawLines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawLines", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static FunctionDescriptor XDrawPoint$descriptor() {
        return XDrawPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static MethodHandle XDrawPoint$handle() {
        return XDrawPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static MemorySegment XDrawPoint$address() {
        return XDrawPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawPoint(Display *, Drawable, GC, int, int)
     * }
     */
    public static int XDrawPoint(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XDrawPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawPoint", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XDrawPoints$descriptor() {
        return XDrawPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MethodHandle XDrawPoints$handle() {
        return XDrawPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static MemorySegment XDrawPoints$address() {
        return XDrawPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int)
     * }
     */
    public static int XDrawPoints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5) {
        var mh$ = XDrawPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawPoints", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawRectangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XDrawRectangle$descriptor() {
        return XDrawRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XDrawRectangle$handle() {
        return XDrawRectangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XDrawRectangle$address() {
        return XDrawRectangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XDrawRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XDrawRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawRectangle", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawRectangles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static FunctionDescriptor XDrawRectangles$descriptor() {
        return XDrawRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MethodHandle XDrawRectangles$handle() {
        return XDrawRectangles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MemorySegment XDrawRectangles$address() {
        return XDrawRectangles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static int XDrawRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawRectangles", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawSegments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawSegments");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static FunctionDescriptor XDrawSegments$descriptor() {
        return XDrawSegments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static MethodHandle XDrawSegments$handle() {
        return XDrawSegments.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static MemorySegment XDrawSegments$address() {
        return XDrawSegments.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawSegments(Display *, Drawable, GC, XSegment *, int)
     * }
     */
    public static int XDrawSegments(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XDrawSegments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawSegments", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XDrawString$descriptor() {
        return XDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XDrawString$handle() {
        return XDrawString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment XDrawString$address() {
        return XDrawString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawString(Display *, Drawable, GC, int, int, const char *, int)
     * }
     */
    public static int XDrawString(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawString", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawString16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawString16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XDrawString16$descriptor() {
        return XDrawString16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MethodHandle XDrawString16$handle() {
        return XDrawString16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static MemorySegment XDrawString16$address() {
        return XDrawString16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int)
     * }
     */
    public static int XDrawString16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawString16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawString16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static FunctionDescriptor XDrawText$descriptor() {
        return XDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static MethodHandle XDrawText$handle() {
        return XDrawText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static MemorySegment XDrawText$address() {
        return XDrawText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int)
     * }
     */
    public static int XDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDrawText16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDrawText16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static FunctionDescriptor XDrawText16$descriptor() {
        return XDrawText16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static MethodHandle XDrawText16$handle() {
        return XDrawText16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static MemorySegment XDrawText16$address() {
        return XDrawText16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int)
     * }
     */
    public static int XDrawText16(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XDrawText16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDrawText16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEnableAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEnableAccessControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static FunctionDescriptor XEnableAccessControl$descriptor() {
        return XEnableAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static MethodHandle XEnableAccessControl$handle() {
        return XEnableAccessControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static MemorySegment XEnableAccessControl$address() {
        return XEnableAccessControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XEnableAccessControl(Display *)
     * }
     */
    public static int XEnableAccessControl(MemorySegment x0) {
        var mh$ = XEnableAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEnableAccessControl", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEventsQueued {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEventsQueued");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static FunctionDescriptor XEventsQueued$descriptor() {
        return XEventsQueued.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static MethodHandle XEventsQueued$handle() {
        return XEventsQueued.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static MemorySegment XEventsQueued$address() {
        return XEventsQueued.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XEventsQueued(Display *, int)
     * }
     */
    public static int XEventsQueued(MemorySegment x0, int x1) {
        var mh$ = XEventsQueued.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEventsQueued", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFetchName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFetchName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static FunctionDescriptor XFetchName$descriptor() {
        return XFetchName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static MethodHandle XFetchName$handle() {
        return XFetchName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static MemorySegment XFetchName$address() {
        return XFetchName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFetchName(Display *, Window, char **)
     * }
     */
    public static int XFetchName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XFetchName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFetchName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFillArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XFillArc$descriptor() {
        return XFillArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XFillArc$handle() {
        return XFillArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XFillArc$address() {
        return XFillArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XFillArc(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XFillArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillArc", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillArcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFillArcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static FunctionDescriptor XFillArcs$descriptor() {
        return XFillArcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MethodHandle XFillArcs$handle() {
        return XFillArcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static MemorySegment XFillArcs$address() {
        return XFillArcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFillArcs(Display *, Drawable, GC, XArc *, int)
     * }
     */
    public static int XFillArcs(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillArcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillArcs", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFillPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static FunctionDescriptor XFillPolygon$descriptor() {
        return XFillPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static MethodHandle XFillPolygon$handle() {
        return XFillPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static MemorySegment XFillPolygon$address() {
        return XFillPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int)
     * }
     */
    public static int XFillPolygon(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6) {
        var mh$ = XFillPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillPolygon", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFillRectangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XFillRectangle$descriptor() {
        return XFillRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XFillRectangle$handle() {
        return XFillRectangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XFillRectangle$address() {
        return XFillRectangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XFillRectangle(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, int x5, int x6) {
        var mh$ = XFillRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillRectangle", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFillRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFillRectangles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static FunctionDescriptor XFillRectangles$descriptor() {
        return XFillRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MethodHandle XFillRectangles$handle() {
        return XFillRectangles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static MemorySegment XFillRectangles$address() {
        return XFillRectangles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFillRectangles(Display *, Drawable, GC, XRectangle *, int)
     * }
     */
    public static int XFillRectangles(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4) {
        var mh$ = XFillRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFillRectangles", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static FunctionDescriptor XFlush$descriptor() {
        return XFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static MethodHandle XFlush$handle() {
        return XFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static MemorySegment XFlush$address() {
        return XFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFlush(Display *)
     * }
     */
    public static int XFlush(MemorySegment x0) {
        var mh$ = XFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFlush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XForceScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XForceScreenSaver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static FunctionDescriptor XForceScreenSaver$descriptor() {
        return XForceScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static MethodHandle XForceScreenSaver$handle() {
        return XForceScreenSaver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static MemorySegment XForceScreenSaver$address() {
        return XForceScreenSaver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XForceScreenSaver(Display *, int)
     * }
     */
    public static int XForceScreenSaver(MemorySegment x0, int x1) {
        var mh$ = XForceScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XForceScreenSaver", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static FunctionDescriptor XFree$descriptor() {
        return XFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static MethodHandle XFree$handle() {
        return XFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static MemorySegment XFree$address() {
        return XFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFree(void *)
     * }
     */
    public static int XFree(MemorySegment x0) {
        var mh$ = XFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFree", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XFreeColormap$descriptor() {
        return XFreeColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XFreeColormap$handle() {
        return XFreeColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static MemorySegment XFreeColormap$address() {
        return XFreeColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeColormap(Display *, Colormap)
     * }
     */
    public static int XFreeColormap(MemorySegment x0, long x1) {
        var mh$ = XFreeColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XFreeColors$descriptor() {
        return XFreeColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static MethodHandle XFreeColors$handle() {
        return XFreeColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static MemorySegment XFreeColors$address() {
        return XFreeColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeColors(Display *, Colormap, unsigned long *, int, unsigned long)
     * }
     */
    public static int XFreeColors(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XFreeColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeColors", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static FunctionDescriptor XFreeCursor$descriptor() {
        return XFreeCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static MethodHandle XFreeCursor$handle() {
        return XFreeCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static MemorySegment XFreeCursor$address() {
        return XFreeCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeCursor(Display *, Cursor)
     * }
     */
    public static int XFreeCursor(MemorySegment x0, long x1) {
        var mh$ = XFreeCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeCursor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeExtensionList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeExtensionList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static FunctionDescriptor XFreeExtensionList$descriptor() {
        return XFreeExtensionList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static MethodHandle XFreeExtensionList$handle() {
        return XFreeExtensionList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static MemorySegment XFreeExtensionList$address() {
        return XFreeExtensionList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeExtensionList(char **)
     * }
     */
    public static int XFreeExtensionList(MemorySegment x0) {
        var mh$ = XFreeExtensionList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeExtensionList", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static FunctionDescriptor XFreeFont$descriptor() {
        return XFreeFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static MethodHandle XFreeFont$handle() {
        return XFreeFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static MemorySegment XFreeFont$address() {
        return XFreeFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeFont(Display *, XFontStruct *)
     * }
     */
    public static int XFreeFont(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFont", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeFontInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static FunctionDescriptor XFreeFontInfo$descriptor() {
        return XFreeFontInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static MethodHandle XFreeFontInfo$handle() {
        return XFreeFontInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static MemorySegment XFreeFontInfo$address() {
        return XFreeFontInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeFontInfo(char **, XFontStruct *, int)
     * }
     */
    public static int XFreeFontInfo(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XFreeFontInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontInfo", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeFontNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static FunctionDescriptor XFreeFontNames$descriptor() {
        return XFreeFontNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static MethodHandle XFreeFontNames$handle() {
        return XFreeFontNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static MemorySegment XFreeFontNames$address() {
        return XFreeFontNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeFontNames(char **)
     * }
     */
    public static int XFreeFontNames(MemorySegment x0) {
        var mh$ = XFreeFontNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontNames", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeFontPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static FunctionDescriptor XFreeFontPath$descriptor() {
        return XFreeFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static MethodHandle XFreeFontPath$handle() {
        return XFreeFontPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static MemorySegment XFreeFontPath$address() {
        return XFreeFontPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeFontPath(char **)
     * }
     */
    public static int XFreeFontPath(MemorySegment x0) {
        var mh$ = XFreeFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontPath", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeGC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeGC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static FunctionDescriptor XFreeGC$descriptor() {
        return XFreeGC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static MethodHandle XFreeGC$handle() {
        return XFreeGC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static MemorySegment XFreeGC$address() {
        return XFreeGC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeGC(Display *, GC)
     * }
     */
    public static int XFreeGC(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeGC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeGC", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeModifiermap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeModifiermap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static FunctionDescriptor XFreeModifiermap$descriptor() {
        return XFreeModifiermap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static MethodHandle XFreeModifiermap$handle() {
        return XFreeModifiermap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static MemorySegment XFreeModifiermap$address() {
        return XFreeModifiermap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreeModifiermap(XModifierKeymap *)
     * }
     */
    public static int XFreeModifiermap(MemorySegment x0) {
        var mh$ = XFreeModifiermap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeModifiermap", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreePixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreePixmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static FunctionDescriptor XFreePixmap$descriptor() {
        return XFreePixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static MethodHandle XFreePixmap$handle() {
        return XFreePixmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static MemorySegment XFreePixmap$address() {
        return XFreePixmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFreePixmap(Display *, Pixmap)
     * }
     */
    public static int XFreePixmap(MemorySegment x0, long x1) {
        var mh$ = XFreePixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreePixmap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGeometry$descriptor() {
        return XGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGeometry$handle() {
        return XGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static MemorySegment XGeometry$address() {
        return XGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *)
     * }
     */
    public static int XGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, MemorySegment x9, MemorySegment x10, MemorySegment x11, MemorySegment x12) {
        var mh$ = XGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetErrorDatabaseText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetErrorDatabaseText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static FunctionDescriptor XGetErrorDatabaseText$descriptor() {
        return XGetErrorDatabaseText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static MethodHandle XGetErrorDatabaseText$handle() {
        return XGetErrorDatabaseText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static MemorySegment XGetErrorDatabaseText$address() {
        return XGetErrorDatabaseText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int)
     * }
     */
    public static int XGetErrorDatabaseText(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5) {
        var mh$ = XGetErrorDatabaseText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetErrorDatabaseText", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetErrorText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetErrorText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static FunctionDescriptor XGetErrorText$descriptor() {
        return XGetErrorText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static MethodHandle XGetErrorText$handle() {
        return XGetErrorText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static MemorySegment XGetErrorText$address() {
        return XGetErrorText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetErrorText(Display *, int, char *, int)
     * }
     */
    public static int XGetErrorText(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XGetErrorText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetErrorText", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetFontProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetFontProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static FunctionDescriptor XGetFontProperty$descriptor() {
        return XGetFontProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static MethodHandle XGetFontProperty$handle() {
        return XGetFontProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static MemorySegment XGetFontProperty$address() {
        return XGetFontProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetFontProperty(XFontStruct *, Atom, unsigned long *)
     * }
     */
    public static int XGetFontProperty(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetFontProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetFontProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetGCValues {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetGCValues");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static FunctionDescriptor XGetGCValues$descriptor() {
        return XGetGCValues.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MethodHandle XGetGCValues$handle() {
        return XGetGCValues.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static MemorySegment XGetGCValues$address() {
        return XGetGCValues.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetGCValues(Display *, GC, unsigned long, XGCValues *)
     * }
     */
    public static int XGetGCValues(MemorySegment x0, MemorySegment x1, long x2, MemorySegment x3) {
        var mh$ = XGetGCValues.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetGCValues", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XGetGeometry$descriptor() {
        return XGetGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XGetGeometry$handle() {
        return XGetGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XGetGeometry$address() {
        return XGetGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *)
     * }
     */
    public static int XGetGeometry(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XGetGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetIconName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static FunctionDescriptor XGetIconName$descriptor() {
        return XGetIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static MethodHandle XGetIconName$handle() {
        return XGetIconName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static MemorySegment XGetIconName$address() {
        return XGetIconName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetIconName(Display *, Window, char **)
     * }
     */
    public static int XGetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetInputFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetInputFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static FunctionDescriptor XGetInputFocus$descriptor() {
        return XGetInputFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static MethodHandle XGetInputFocus$handle() {
        return XGetInputFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static MemorySegment XGetInputFocus$address() {
        return XGetInputFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetInputFocus(Display *, Window *, int *)
     * }
     */
    public static int XGetInputFocus(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XGetInputFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetInputFocus", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetKeyboardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetKeyboardControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static FunctionDescriptor XGetKeyboardControl$descriptor() {
        return XGetKeyboardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static MethodHandle XGetKeyboardControl$handle() {
        return XGetKeyboardControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static MemorySegment XGetKeyboardControl$address() {
        return XGetKeyboardControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetKeyboardControl(Display *, XKeyboardState *)
     * }
     */
    public static int XGetKeyboardControl(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetKeyboardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetKeyboardControl", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetPointerControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetPointerControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGetPointerControl$descriptor() {
        return XGetPointerControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGetPointerControl$handle() {
        return XGetPointerControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static MemorySegment XGetPointerControl$address() {
        return XGetPointerControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetPointerControl(Display *, int *, int *, int *)
     * }
     */
    public static int XGetPointerControl(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetPointerControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetPointerControl", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetPointerMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetPointerMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XGetPointerMapping$descriptor() {
        return XGetPointerMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static MethodHandle XGetPointerMapping$handle() {
        return XGetPointerMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static MemorySegment XGetPointerMapping$address() {
        return XGetPointerMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetPointerMapping(Display *, unsigned char *, int)
     * }
     */
    public static int XGetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XGetPointerMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetPointerMapping", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetScreenSaver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XGetScreenSaver$descriptor() {
        return XGetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XGetScreenSaver$handle() {
        return XGetScreenSaver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static MemorySegment XGetScreenSaver$address() {
        return XGetScreenSaver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetScreenSaver(Display *, int *, int *, int *, int *)
     * }
     */
    public static int XGetScreenSaver(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XGetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetScreenSaver", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetTransientForHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetTransientForHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static FunctionDescriptor XGetTransientForHint$descriptor() {
        return XGetTransientForHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static MethodHandle XGetTransientForHint$handle() {
        return XGetTransientForHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static MemorySegment XGetTransientForHint$address() {
        return XGetTransientForHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetTransientForHint(Display *, Window, Window *)
     * }
     */
    public static int XGetTransientForHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetTransientForHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetTransientForHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWindowProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWindowProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static FunctionDescriptor XGetWindowProperty$descriptor() {
        return XGetWindowProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static MethodHandle XGetWindowProperty$handle() {
        return XGetWindowProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static MemorySegment XGetWindowProperty$address() {
        return XGetWindowProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWindowProperty(Display *, Window, Atom, long, long, int, Atom, Atom *, int *, unsigned long *, unsigned long *, unsigned char **)
     * }
     */
    public static int XGetWindowProperty(MemorySegment x0, long x1, long x2, long x3, long x4, int x5, long x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10, MemorySegment x11) {
        var mh$ = XGetWindowProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWindowProperty", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWindowAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWindowAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static FunctionDescriptor XGetWindowAttributes$descriptor() {
        return XGetWindowAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static MethodHandle XGetWindowAttributes$handle() {
        return XGetWindowAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static MemorySegment XGetWindowAttributes$address() {
        return XGetWindowAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWindowAttributes(Display *, Window, XWindowAttributes *)
     * }
     */
    public static int XGetWindowAttributes(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWindowAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWindowAttributes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGrabButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static FunctionDescriptor XGrabButton$descriptor() {
        return XGrabButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static MethodHandle XGrabButton$handle() {
        return XGrabButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static MemorySegment XGrabButton$address() {
        return XGrabButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor)
     * }
     */
    public static int XGrabButton(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6, int x7, long x8, long x9) {
        var mh$ = XGrabButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabButton", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGrabKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static FunctionDescriptor XGrabKey$descriptor() {
        return XGrabKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static MethodHandle XGrabKey$handle() {
        return XGrabKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static MemorySegment XGrabKey$address() {
        return XGrabKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGrabKey(Display *, int, unsigned int, Window, int, int, int)
     * }
     */
    public static int XGrabKey(MemorySegment x0, int x1, int x2, long x3, int x4, int x5, int x6) {
        var mh$ = XGrabKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabKey", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabKeyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGrabKeyboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static FunctionDescriptor XGrabKeyboard$descriptor() {
        return XGrabKeyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static MethodHandle XGrabKeyboard$handle() {
        return XGrabKeyboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static MemorySegment XGrabKeyboard$address() {
        return XGrabKeyboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGrabKeyboard(Display *, Window, int, int, int, Time)
     * }
     */
    public static int XGrabKeyboard(MemorySegment x0, long x1, int x2, int x3, int x4, long x5) {
        var mh$ = XGrabKeyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabKeyboard", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGrabPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static FunctionDescriptor XGrabPointer$descriptor() {
        return XGrabPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static MethodHandle XGrabPointer$handle() {
        return XGrabPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static MemorySegment XGrabPointer$address() {
        return XGrabPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time)
     * }
     */
    public static int XGrabPointer(MemorySegment x0, long x1, int x2, int x3, int x4, int x5, long x6, long x7, long x8) {
        var mh$ = XGrabPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGrabServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGrabServer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static FunctionDescriptor XGrabServer$descriptor() {
        return XGrabServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static MethodHandle XGrabServer$handle() {
        return XGrabServer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static MemorySegment XGrabServer$address() {
        return XGrabServer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGrabServer(Display *)
     * }
     */
    public static int XGrabServer(MemorySegment x0) {
        var mh$ = XGrabServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGrabServer", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XHeightMMOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XHeightMMOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XHeightMMOfScreen$descriptor() {
        return XHeightMMOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static MethodHandle XHeightMMOfScreen$handle() {
        return XHeightMMOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static MemorySegment XHeightMMOfScreen$address() {
        return XHeightMMOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XHeightMMOfScreen(Screen *)
     * }
     */
    public static int XHeightMMOfScreen(MemorySegment x0) {
        var mh$ = XHeightMMOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XHeightMMOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XHeightOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XHeightOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XHeightOfScreen$descriptor() {
        return XHeightOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static MethodHandle XHeightOfScreen$handle() {
        return XHeightOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static MemorySegment XHeightOfScreen$address() {
        return XHeightOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XHeightOfScreen(Screen *)
     * }
     */
    public static int XHeightOfScreen(MemorySegment x0) {
        var mh$ = XHeightOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XHeightOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XIfEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XIfEvent$descriptor() {
        return XIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XIfEvent$handle() {
        return XIfEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MemorySegment XIfEvent$address() {
        return XIfEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XImageByteOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XImageByteOrder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static FunctionDescriptor XImageByteOrder$descriptor() {
        return XImageByteOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static MethodHandle XImageByteOrder$handle() {
        return XImageByteOrder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static MemorySegment XImageByteOrder$address() {
        return XImageByteOrder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XImageByteOrder(Display *)
     * }
     */
    public static int XImageByteOrder(MemorySegment x0) {
        var mh$ = XImageByteOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XImageByteOrder", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInstallColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInstallColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XInstallColormap$descriptor() {
        return XInstallColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XInstallColormap$handle() {
        return XInstallColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static MemorySegment XInstallColormap$address() {
        return XInstallColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XInstallColormap(Display *, Colormap)
     * }
     */
    public static int XInstallColormap(MemorySegment x0, long x1) {
        var mh$ = XInstallColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInstallColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKeysymToKeycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_CHAR,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XKeysymToKeycode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static FunctionDescriptor XKeysymToKeycode$descriptor() {
        return XKeysymToKeycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static MethodHandle XKeysymToKeycode$handle() {
        return XKeysymToKeycode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static MemorySegment XKeysymToKeycode$address() {
        return XKeysymToKeycode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern KeyCode XKeysymToKeycode(Display *, KeySym)
     * }
     */
    public static byte XKeysymToKeycode(MemorySegment x0, long x1) {
        var mh$ = XKeysymToKeycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKeysymToKeycode", x0, x1);
            }
            return (byte)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XKillClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XKillClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static FunctionDescriptor XKillClient$descriptor() {
        return XKillClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static MethodHandle XKillClient$handle() {
        return XKillClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static MemorySegment XKillClient$address() {
        return XKillClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XKillClient(Display *, XID)
     * }
     */
    public static int XKillClient(MemorySegment x0, long x1) {
        var mh$ = XKillClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XKillClient", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLookupColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XLookupColor$descriptor() {
        return XLookupColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MethodHandle XLookupColor$handle() {
        return XLookupColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static MemorySegment XLookupColor$address() {
        return XLookupColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *)
     * }
     */
    public static int XLookupColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLowerWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLowerWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XLowerWindow$descriptor() {
        return XLowerWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static MethodHandle XLowerWindow$handle() {
        return XLowerWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static MemorySegment XLowerWindow$address() {
        return XLowerWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XLowerWindow(Display *, Window)
     * }
     */
    public static int XLowerWindow(MemorySegment x0, long x1) {
        var mh$ = XLowerWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLowerWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapRaised {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMapRaised");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapRaised$descriptor() {
        return XMapRaised.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static MethodHandle XMapRaised$handle() {
        return XMapRaised.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static MemorySegment XMapRaised$address() {
        return XMapRaised.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMapRaised(Display *, Window)
     * }
     */
    public static int XMapRaised(MemorySegment x0, long x1) {
        var mh$ = XMapRaised.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapRaised", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMapSubwindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapSubwindows$descriptor() {
        return XMapSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XMapSubwindows$handle() {
        return XMapSubwindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static MemorySegment XMapSubwindows$address() {
        return XMapSubwindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMapSubwindows(Display *, Window)
     * }
     */
    public static int XMapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XMapSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapSubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMapWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMapWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XMapWindow$descriptor() {
        return XMapWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static MethodHandle XMapWindow$handle() {
        return XMapWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static MemorySegment XMapWindow$address() {
        return XMapWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMapWindow(Display *, Window)
     * }
     */
    public static int XMapWindow(MemorySegment x0, long x1) {
        var mh$ = XMapWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMapWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaskEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMaskEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XMaskEvent$descriptor() {
        return XMaskEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MethodHandle XMaskEvent$handle() {
        return XMaskEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static MemorySegment XMaskEvent$address() {
        return XMaskEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMaskEvent(Display *, long, XEvent *)
     * }
     */
    public static int XMaskEvent(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XMaskEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaskEvent", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMaxCmapsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMaxCmapsOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XMaxCmapsOfScreen$descriptor() {
        return XMaxCmapsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XMaxCmapsOfScreen$handle() {
        return XMaxCmapsOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static MemorySegment XMaxCmapsOfScreen$address() {
        return XMaxCmapsOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMaxCmapsOfScreen(Screen *)
     * }
     */
    public static int XMaxCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMaxCmapsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMaxCmapsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMinCmapsOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMinCmapsOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XMinCmapsOfScreen$descriptor() {
        return XMinCmapsOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static MethodHandle XMinCmapsOfScreen$handle() {
        return XMinCmapsOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static MemorySegment XMinCmapsOfScreen$address() {
        return XMinCmapsOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMinCmapsOfScreen(Screen *)
     * }
     */
    public static int XMinCmapsOfScreen(MemorySegment x0) {
        var mh$ = XMinCmapsOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMinCmapsOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMoveResizeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMoveResizeWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XMoveResizeWindow$descriptor() {
        return XMoveResizeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XMoveResizeWindow$handle() {
        return XMoveResizeWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XMoveResizeWindow$address() {
        return XMoveResizeWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XMoveResizeWindow(MemorySegment x0, long x1, int x2, int x3, int x4, int x5) {
        var mh$ = XMoveResizeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMoveResizeWindow", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMoveWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMoveWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static FunctionDescriptor XMoveWindow$descriptor() {
        return XMoveWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static MethodHandle XMoveWindow$handle() {
        return XMoveWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static MemorySegment XMoveWindow$address() {
        return XMoveWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMoveWindow(Display *, Window, int, int)
     * }
     */
    public static int XMoveWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XMoveWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMoveWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNextEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XNextEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XNextEvent$descriptor() {
        return XNextEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XNextEvent$handle() {
        return XNextEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static MemorySegment XNextEvent$address() {
        return XNextEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XNextEvent(Display *, XEvent *)
     * }
     */
    public static int XNextEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XNextEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNextEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XNoOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XNoOp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static FunctionDescriptor XNoOp$descriptor() {
        return XNoOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static MethodHandle XNoOp$handle() {
        return XNoOp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static MemorySegment XNoOp$address() {
        return XNoOp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XNoOp(Display *)
     * }
     */
    public static int XNoOp(MemorySegment x0) {
        var mh$ = XNoOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XNoOp", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XParseColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XParseColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static FunctionDescriptor XParseColor$descriptor() {
        return XParseColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static MethodHandle XParseColor$handle() {
        return XParseColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static MemorySegment XParseColor$address() {
        return XParseColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XParseColor(Display *, Colormap, const char *, XColor *)
     * }
     */
    public static int XParseColor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XParseColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XParseColor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XParseGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XParseGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XParseGeometry$descriptor() {
        return XParseGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XParseGeometry$handle() {
        return XParseGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XParseGeometry$address() {
        return XParseGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *)
     * }
     */
    public static int XParseGeometry(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XParseGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XParseGeometry", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPeekEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPeekEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XPeekEvent$descriptor() {
        return XPeekEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XPeekEvent$handle() {
        return XPeekEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static MemorySegment XPeekEvent$address() {
        return XPeekEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPeekEvent(Display *, XEvent *)
     * }
     */
    public static int XPeekEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPeekEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPeekEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPeekIfEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPeekIfEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static FunctionDescriptor XPeekIfEvent$descriptor() {
        return XPeekIfEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MethodHandle XPeekIfEvent$handle() {
        return XPeekIfEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static MemorySegment XPeekIfEvent$address() {
        return XPeekIfEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer)
     * }
     */
    public static int XPeekIfEvent(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XPeekIfEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPeekIfEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPending");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static FunctionDescriptor XPending$descriptor() {
        return XPending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static MethodHandle XPending$handle() {
        return XPending.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static MemorySegment XPending$address() {
        return XPending.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPending(Display *)
     * }
     */
    public static int XPending(MemorySegment x0) {
        var mh$ = XPending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPending", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPlanesOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPlanesOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XPlanesOfScreen$descriptor() {
        return XPlanesOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static MethodHandle XPlanesOfScreen$handle() {
        return XPlanesOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static MemorySegment XPlanesOfScreen$address() {
        return XPlanesOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPlanesOfScreen(Screen *)
     * }
     */
    public static int XPlanesOfScreen(MemorySegment x0) {
        var mh$ = XPlanesOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPlanesOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProtocolRevision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XProtocolRevision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static FunctionDescriptor XProtocolRevision$descriptor() {
        return XProtocolRevision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static MethodHandle XProtocolRevision$handle() {
        return XProtocolRevision.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static MemorySegment XProtocolRevision$address() {
        return XProtocolRevision.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XProtocolRevision(Display *)
     * }
     */
    public static int XProtocolRevision(MemorySegment x0) {
        var mh$ = XProtocolRevision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProtocolRevision", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProtocolVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XProtocolVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static FunctionDescriptor XProtocolVersion$descriptor() {
        return XProtocolVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static MethodHandle XProtocolVersion$handle() {
        return XProtocolVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static MemorySegment XProtocolVersion$address() {
        return XProtocolVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XProtocolVersion(Display *)
     * }
     */
    public static int XProtocolVersion(MemorySegment x0) {
        var mh$ = XProtocolVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProtocolVersion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPutBackEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPutBackEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static FunctionDescriptor XPutBackEvent$descriptor() {
        return XPutBackEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static MethodHandle XPutBackEvent$handle() {
        return XPutBackEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static MemorySegment XPutBackEvent$address() {
        return XPutBackEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPutBackEvent(Display *, XEvent *)
     * }
     */
    public static int XPutBackEvent(MemorySegment x0, MemorySegment x1) {
        var mh$ = XPutBackEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPutBackEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPutImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPutImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XPutImage$descriptor() {
        return XPutImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XPutImage$handle() {
        return XPutImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XPutImage$address() {
        return XPutImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XPutImage(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, int x6, int x7, int x8, int x9) {
        var mh$ = XPutImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPutImage", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static FunctionDescriptor XQLength$descriptor() {
        return XQLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static MethodHandle XQLength$handle() {
        return XQLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static MemorySegment XQLength$address() {
        return XQLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQLength(Display *)
     * }
     */
    public static int XQLength(MemorySegment x0) {
        var mh$ = XQLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQLength", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryBestCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestCursor$descriptor() {
        return XQueryBestCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestCursor$handle() {
        return XQueryBestCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XQueryBestCursor$address() {
        return XQueryBestCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestCursor(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestCursor", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryBestSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestSize$descriptor() {
        return XQueryBestSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestSize$handle() {
        return XQueryBestSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XQueryBestSize$address() {
        return XQueryBestSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestSize(MemorySegment x0, int x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XQueryBestSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestSize", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryBestStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestStipple$descriptor() {
        return XQueryBestStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestStipple$handle() {
        return XQueryBestStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XQueryBestStipple$address() {
        return XQueryBestStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestStipple(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestStipple", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryBestTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryBestTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryBestTile$descriptor() {
        return XQueryBestTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryBestTile$handle() {
        return XQueryBestTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static MemorySegment XQueryBestTile$address() {
        return XQueryBestTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *)
     * }
     */
    public static int XQueryBestTile(MemorySegment x0, long x1, int x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryBestTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryBestTile", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XQueryColor$descriptor() {
        return XQueryColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XQueryColor$handle() {
        return XQueryColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static MemorySegment XQueryColor$address() {
        return XQueryColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XQueryColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XQueryColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static FunctionDescriptor XQueryColors$descriptor() {
        return XQueryColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MethodHandle XQueryColors$handle() {
        return XQueryColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MemorySegment XQueryColors$address() {
        return XQueryColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static int XQueryColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XQueryColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryColors", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryExtension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XQueryExtension$descriptor() {
        return XQueryExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static MethodHandle XQueryExtension$handle() {
        return XQueryExtension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static MemorySegment XQueryExtension$address() {
        return XQueryExtension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryExtension(Display *, const char *, int *, int *, int *)
     * }
     */
    public static int XQueryExtension(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XQueryExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryExtension", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryKeymap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryKeymap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static FunctionDescriptor XQueryKeymap$descriptor() {
        return XQueryKeymap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static MethodHandle XQueryKeymap$handle() {
        return XQueryKeymap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static MemorySegment XQueryKeymap$address() {
        return XQueryKeymap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryKeymap(Display *, char [32])
     * }
     */
    public static int XQueryKeymap(MemorySegment x0, MemorySegment x1) {
        var mh$ = XQueryKeymap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryKeymap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryPointer$descriptor() {
        return XQueryPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static MethodHandle XQueryPointer$handle() {
        return XQueryPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static MemorySegment XQueryPointer$address() {
        return XQueryPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *)
     * }
     */
    public static int XQueryPointer(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XQueryPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryTextExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XQueryTextExtents$descriptor() {
        return XQueryTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XQueryTextExtents$handle() {
        return XQueryTextExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MemorySegment XQueryTextExtents$address() {
        return XQueryTextExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XQueryTextExtents(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTextExtents", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTextExtents16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryTextExtents16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XQueryTextExtents16$descriptor() {
        return XQueryTextExtents16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XQueryTextExtents16$handle() {
        return XQueryTextExtents16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MemorySegment XQueryTextExtents16$address() {
        return XQueryTextExtents16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XQueryTextExtents16(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XQueryTextExtents16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTextExtents16", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XQueryTree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XQueryTree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static FunctionDescriptor XQueryTree$descriptor() {
        return XQueryTree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static MethodHandle XQueryTree$handle() {
        return XQueryTree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static MemorySegment XQueryTree$address() {
        return XQueryTree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *)
     * }
     */
    public static int XQueryTree(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XQueryTree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XQueryTree", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRaiseWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRaiseWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XRaiseWindow$descriptor() {
        return XRaiseWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static MethodHandle XRaiseWindow$handle() {
        return XRaiseWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static MemorySegment XRaiseWindow$address() {
        return XRaiseWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRaiseWindow(Display *, Window)
     * }
     */
    public static int XRaiseWindow(MemorySegment x0, long x1) {
        var mh$ = XRaiseWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRaiseWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReadBitmapFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XReadBitmapFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static FunctionDescriptor XReadBitmapFile$descriptor() {
        return XReadBitmapFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static MethodHandle XReadBitmapFile$handle() {
        return XReadBitmapFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static MemorySegment XReadBitmapFile$address() {
        return XReadBitmapFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *)
     * }
     */
    public static int XReadBitmapFile(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XReadBitmapFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReadBitmapFile", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReadBitmapFileData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XReadBitmapFileData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static FunctionDescriptor XReadBitmapFileData$descriptor() {
        return XReadBitmapFileData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static MethodHandle XReadBitmapFileData$handle() {
        return XReadBitmapFileData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static MemorySegment XReadBitmapFileData$address() {
        return XReadBitmapFileData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned char **, int *, int *)
     * }
     */
    public static int XReadBitmapFileData(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XReadBitmapFileData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReadBitmapFileData", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRebindKeysym {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRebindKeysym");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XRebindKeysym$descriptor() {
        return XRebindKeysym.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static MethodHandle XRebindKeysym$handle() {
        return XRebindKeysym.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static MemorySegment XRebindKeysym$address() {
        return XRebindKeysym.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned char *, int)
     * }
     */
    public static int XRebindKeysym(MemorySegment x0, long x1, MemorySegment x2, int x3, MemorySegment x4, int x5) {
        var mh$ = XRebindKeysym.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRebindKeysym", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRecolorCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRecolorCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static FunctionDescriptor XRecolorCursor$descriptor() {
        return XRecolorCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static MethodHandle XRecolorCursor$handle() {
        return XRecolorCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static MemorySegment XRecolorCursor$address() {
        return XRecolorCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRecolorCursor(Display *, Cursor, XColor *, XColor *)
     * }
     */
    public static int XRecolorCursor(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XRecolorCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRecolorCursor", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRefreshKeyboardMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRefreshKeyboardMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static FunctionDescriptor XRefreshKeyboardMapping$descriptor() {
        return XRefreshKeyboardMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static MethodHandle XRefreshKeyboardMapping$handle() {
        return XRefreshKeyboardMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static MemorySegment XRefreshKeyboardMapping$address() {
        return XRefreshKeyboardMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRefreshKeyboardMapping(XMappingEvent *)
     * }
     */
    public static int XRefreshKeyboardMapping(MemorySegment x0) {
        var mh$ = XRefreshKeyboardMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRefreshKeyboardMapping", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveFromSaveSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRemoveFromSaveSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static FunctionDescriptor XRemoveFromSaveSet$descriptor() {
        return XRemoveFromSaveSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static MethodHandle XRemoveFromSaveSet$handle() {
        return XRemoveFromSaveSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static MemorySegment XRemoveFromSaveSet$address() {
        return XRemoveFromSaveSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRemoveFromSaveSet(Display *, Window)
     * }
     */
    public static int XRemoveFromSaveSet(MemorySegment x0, long x1) {
        var mh$ = XRemoveFromSaveSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveFromSaveSet", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveHost {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRemoveHost");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static FunctionDescriptor XRemoveHost$descriptor() {
        return XRemoveHost.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static MethodHandle XRemoveHost$handle() {
        return XRemoveHost.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static MemorySegment XRemoveHost$address() {
        return XRemoveHost.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRemoveHost(Display *, XHostAddress *)
     * }
     */
    public static int XRemoveHost(MemorySegment x0, MemorySegment x1) {
        var mh$ = XRemoveHost.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveHost", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveHosts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRemoveHosts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static FunctionDescriptor XRemoveHosts$descriptor() {
        return XRemoveHosts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MethodHandle XRemoveHosts$handle() {
        return XRemoveHosts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static MemorySegment XRemoveHosts$address() {
        return XRemoveHosts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRemoveHosts(Display *, XHostAddress *, int)
     * }
     */
    public static int XRemoveHosts(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRemoveHosts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveHosts", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XReparentWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XReparentWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static FunctionDescriptor XReparentWindow$descriptor() {
        return XReparentWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static MethodHandle XReparentWindow$handle() {
        return XReparentWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static MemorySegment XReparentWindow$address() {
        return XReparentWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XReparentWindow(Display *, Window, Window, int, int)
     * }
     */
    public static int XReparentWindow(MemorySegment x0, long x1, long x2, int x3, int x4) {
        var mh$ = XReparentWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XReparentWindow", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XResetScreenSaver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static FunctionDescriptor XResetScreenSaver$descriptor() {
        return XResetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static MethodHandle XResetScreenSaver$handle() {
        return XResetScreenSaver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static MemorySegment XResetScreenSaver$address() {
        return XResetScreenSaver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XResetScreenSaver(Display *)
     * }
     */
    public static int XResetScreenSaver(MemorySegment x0) {
        var mh$ = XResetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResetScreenSaver", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XResizeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XResizeWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XResizeWindow$descriptor() {
        return XResizeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XResizeWindow$handle() {
        return XResizeWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XResizeWindow$address() {
        return XResizeWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XResizeWindow(Display *, Window, unsigned int, unsigned int)
     * }
     */
    public static int XResizeWindow(MemorySegment x0, long x1, int x2, int x3) {
        var mh$ = XResizeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XResizeWindow", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRestackWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRestackWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static FunctionDescriptor XRestackWindows$descriptor() {
        return XRestackWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static MethodHandle XRestackWindows$handle() {
        return XRestackWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static MemorySegment XRestackWindows$address() {
        return XRestackWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRestackWindows(Display *, Window *, int)
     * }
     */
    public static int XRestackWindows(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XRestackWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRestackWindows", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRotateBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRotateBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static FunctionDescriptor XRotateBuffers$descriptor() {
        return XRotateBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static MethodHandle XRotateBuffers$handle() {
        return XRotateBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static MemorySegment XRotateBuffers$address() {
        return XRotateBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRotateBuffers(Display *, int)
     * }
     */
    public static int XRotateBuffers(MemorySegment x0, int x1) {
        var mh$ = XRotateBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRotateBuffers", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRotateWindowProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRotateWindowProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static FunctionDescriptor XRotateWindowProperties$descriptor() {
        return XRotateWindowProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static MethodHandle XRotateWindowProperties$handle() {
        return XRotateWindowProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static MemorySegment XRotateWindowProperties$address() {
        return XRotateWindowProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRotateWindowProperties(Display *, Window, Atom *, int, int)
     * }
     */
    public static int XRotateWindowProperties(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4) {
        var mh$ = XRotateWindowProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRotateWindowProperties", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XScreenCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XScreenCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static FunctionDescriptor XScreenCount$descriptor() {
        return XScreenCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static MethodHandle XScreenCount$handle() {
        return XScreenCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static MemorySegment XScreenCount$address() {
        return XScreenCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XScreenCount(Display *)
     * }
     */
    public static int XScreenCount(MemorySegment x0) {
        var mh$ = XScreenCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XScreenCount", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSelectInput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSelectInput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static FunctionDescriptor XSelectInput$descriptor() {
        return XSelectInput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static MethodHandle XSelectInput$handle() {
        return XSelectInput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static MemorySegment XSelectInput$address() {
        return XSelectInput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSelectInput(Display *, Window, long)
     * }
     */
    public static int XSelectInput(MemorySegment x0, long x1, long x2) {
        var mh$ = XSelectInput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSelectInput", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSendEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSendEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XSendEvent$descriptor() {
        return XSendEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static MethodHandle XSendEvent$handle() {
        return XSendEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static MemorySegment XSendEvent$address() {
        return XSendEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSendEvent(Display *, Window, int, long, XEvent *)
     * }
     */
    public static int XSendEvent(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4) {
        var mh$ = XSendEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSendEvent", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAccessControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetAccessControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static FunctionDescriptor XSetAccessControl$descriptor() {
        return XSetAccessControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static MethodHandle XSetAccessControl$handle() {
        return XSetAccessControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static MemorySegment XSetAccessControl$address() {
        return XSetAccessControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetAccessControl(Display *, int)
     * }
     */
    public static int XSetAccessControl(MemorySegment x0, int x1) {
        var mh$ = XSetAccessControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAccessControl", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetArcMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetArcMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetArcMode$descriptor() {
        return XSetArcMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetArcMode$handle() {
        return XSetArcMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetArcMode$address() {
        return XSetArcMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetArcMode(Display *, GC, int)
     * }
     */
    public static int XSetArcMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetArcMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetArcMode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetBackground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetBackground$descriptor() {
        return XSetBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetBackground$handle() {
        return XSetBackground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static MemorySegment XSetBackground$address() {
        return XSetBackground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetBackground(Display *, GC, unsigned long)
     * }
     */
    public static int XSetBackground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetBackground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetClipMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetClipMask$descriptor() {
        return XSetClipMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetClipMask$handle() {
        return XSetClipMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static MemorySegment XSetClipMask$address() {
        return XSetClipMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetClipMask(Display *, GC, Pixmap)
     * }
     */
    public static int XSetClipMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetClipMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipMask", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetClipOrigin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static FunctionDescriptor XSetClipOrigin$descriptor() {
        return XSetClipOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static MethodHandle XSetClipOrigin$handle() {
        return XSetClipOrigin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static MemorySegment XSetClipOrigin$address() {
        return XSetClipOrigin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetClipOrigin(Display *, GC, int, int)
     * }
     */
    public static int XSetClipOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetClipOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipOrigin", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClipRectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetClipRectangles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static FunctionDescriptor XSetClipRectangles$descriptor() {
        return XSetClipRectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static MethodHandle XSetClipRectangles$handle() {
        return XSetClipRectangles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static MemorySegment XSetClipRectangles$address() {
        return XSetClipRectangles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int)
     * }
     */
    public static int XSetClipRectangles(MemorySegment x0, MemorySegment x1, int x2, int x3, MemorySegment x4, int x5, int x6) {
        var mh$ = XSetClipRectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClipRectangles", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetCloseDownMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetCloseDownMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static FunctionDescriptor XSetCloseDownMode$descriptor() {
        return XSetCloseDownMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static MethodHandle XSetCloseDownMode$handle() {
        return XSetCloseDownMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static MemorySegment XSetCloseDownMode$address() {
        return XSetCloseDownMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetCloseDownMode(Display *, int)
     * }
     */
    public static int XSetCloseDownMode(MemorySegment x0, int x1) {
        var mh$ = XSetCloseDownMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetCloseDownMode", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetCommand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetCommand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static FunctionDescriptor XSetCommand$descriptor() {
        return XSetCommand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static MethodHandle XSetCommand$handle() {
        return XSetCommand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static MemorySegment XSetCommand$address() {
        return XSetCommand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetCommand(Display *, Window, char **, int)
     * }
     */
    public static int XSetCommand(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetCommand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetCommand", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetDashes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetDashes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XSetDashes$descriptor() {
        return XSetDashes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static MethodHandle XSetDashes$handle() {
        return XSetDashes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static MemorySegment XSetDashes$address() {
        return XSetDashes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetDashes(Display *, GC, int, const char *, int)
     * }
     */
    public static int XSetDashes(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = XSetDashes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetDashes", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFillRule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetFillRule");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFillRule$descriptor() {
        return XSetFillRule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFillRule$handle() {
        return XSetFillRule.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetFillRule$address() {
        return XSetFillRule.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetFillRule(Display *, GC, int)
     * }
     */
    public static int XSetFillRule(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillRule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFillRule", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFillStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetFillStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFillStyle$descriptor() {
        return XSetFillStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFillStyle$handle() {
        return XSetFillStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetFillStyle$address() {
        return XSetFillStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetFillStyle(Display *, GC, int)
     * }
     */
    public static int XSetFillStyle(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFillStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFillStyle", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static FunctionDescriptor XSetFont$descriptor() {
        return XSetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static MethodHandle XSetFont$handle() {
        return XSetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static MemorySegment XSetFont$address() {
        return XSetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetFont(Display *, GC, Font)
     * }
     */
    public static int XSetFont(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFont", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFontPath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetFontPath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static FunctionDescriptor XSetFontPath$descriptor() {
        return XSetFontPath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static MethodHandle XSetFontPath$handle() {
        return XSetFontPath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static MemorySegment XSetFontPath$address() {
        return XSetFontPath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetFontPath(Display *, char **, int)
     * }
     */
    public static int XSetFontPath(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFontPath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFontPath", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetForeground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetForeground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetForeground$descriptor() {
        return XSetForeground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetForeground$handle() {
        return XSetForeground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static MemorySegment XSetForeground$address() {
        return XSetForeground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetForeground(Display *, GC, unsigned long)
     * }
     */
    public static int XSetForeground(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetForeground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetForeground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetFunction$descriptor() {
        return XSetFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetFunction$handle() {
        return XSetFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetFunction$address() {
        return XSetFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetFunction(Display *, GC, int)
     * }
     */
    public static int XSetFunction(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetFunction", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetGraphicsExposures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetGraphicsExposures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetGraphicsExposures$descriptor() {
        return XSetGraphicsExposures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetGraphicsExposures$handle() {
        return XSetGraphicsExposures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetGraphicsExposures$address() {
        return XSetGraphicsExposures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetGraphicsExposures(Display *, GC, int)
     * }
     */
    public static int XSetGraphicsExposures(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetGraphicsExposures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetGraphicsExposures", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetIconName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static FunctionDescriptor XSetIconName$descriptor() {
        return XSetIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static MethodHandle XSetIconName$handle() {
        return XSetIconName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static MemorySegment XSetIconName$address() {
        return XSetIconName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetIconName(Display *, Window, const char *)
     * }
     */
    public static int XSetIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetInputFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetInputFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static FunctionDescriptor XSetInputFocus$descriptor() {
        return XSetInputFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static MethodHandle XSetInputFocus$handle() {
        return XSetInputFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static MemorySegment XSetInputFocus$address() {
        return XSetInputFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetInputFocus(Display *, Window, int, Time)
     * }
     */
    public static int XSetInputFocus(MemorySegment x0, long x1, int x2, long x3) {
        var mh$ = XSetInputFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetInputFocus", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetLineAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetLineAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static FunctionDescriptor XSetLineAttributes$descriptor() {
        return XSetLineAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static MethodHandle XSetLineAttributes$handle() {
        return XSetLineAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static MemorySegment XSetLineAttributes$address() {
        return XSetLineAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetLineAttributes(Display *, GC, unsigned int, int, int, int)
     * }
     */
    public static int XSetLineAttributes(MemorySegment x0, MemorySegment x1, int x2, int x3, int x4, int x5) {
        var mh$ = XSetLineAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetLineAttributes", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetModifierMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetModifierMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static FunctionDescriptor XSetModifierMapping$descriptor() {
        return XSetModifierMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static MethodHandle XSetModifierMapping$handle() {
        return XSetModifierMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static MemorySegment XSetModifierMapping$address() {
        return XSetModifierMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetModifierMapping(Display *, XModifierKeymap *)
     * }
     */
    public static int XSetModifierMapping(MemorySegment x0, MemorySegment x1) {
        var mh$ = XSetModifierMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetModifierMapping", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetPlaneMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetPlaneMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetPlaneMask$descriptor() {
        return XSetPlaneMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static MethodHandle XSetPlaneMask$handle() {
        return XSetPlaneMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static MemorySegment XSetPlaneMask$address() {
        return XSetPlaneMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetPlaneMask(Display *, GC, unsigned long)
     * }
     */
    public static int XSetPlaneMask(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetPlaneMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetPlaneMask", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetPointerMapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetPointerMapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static FunctionDescriptor XSetPointerMapping$descriptor() {
        return XSetPointerMapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static MethodHandle XSetPointerMapping$handle() {
        return XSetPointerMapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static MemorySegment XSetPointerMapping$address() {
        return XSetPointerMapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetPointerMapping(Display *, const unsigned char *, int)
     * }
     */
    public static int XSetPointerMapping(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetPointerMapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetPointerMapping", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetScreenSaver {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetScreenSaver");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static FunctionDescriptor XSetScreenSaver$descriptor() {
        return XSetScreenSaver.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static MethodHandle XSetScreenSaver$handle() {
        return XSetScreenSaver.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static MemorySegment XSetScreenSaver$address() {
        return XSetScreenSaver.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetScreenSaver(Display *, int, int, int, int)
     * }
     */
    public static int XSetScreenSaver(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XSetScreenSaver.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetScreenSaver", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSelectionOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetSelectionOwner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static FunctionDescriptor XSetSelectionOwner$descriptor() {
        return XSetSelectionOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static MethodHandle XSetSelectionOwner$handle() {
        return XSetSelectionOwner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static MemorySegment XSetSelectionOwner$address() {
        return XSetSelectionOwner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetSelectionOwner(Display *, Atom, Window, Time)
     * }
     */
    public static int XSetSelectionOwner(MemorySegment x0, long x1, long x2, long x3) {
        var mh$ = XSetSelectionOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSelectionOwner", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetState$descriptor() {
        return XSetState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static MethodHandle XSetState$handle() {
        return XSetState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static MemorySegment XSetState$address() {
        return XSetState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetState(Display *, GC, unsigned long, unsigned long, int, unsigned long)
     * }
     */
    public static int XSetState(MemorySegment x0, MemorySegment x1, long x2, long x3, int x4, long x5) {
        var mh$ = XSetState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetState", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetStipple$descriptor() {
        return XSetStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetStipple$handle() {
        return XSetStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static MemorySegment XSetStipple$address() {
        return XSetStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetStipple(Display *, GC, Pixmap)
     * }
     */
    public static int XSetStipple(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStipple", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSubwindowMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetSubwindowMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static FunctionDescriptor XSetSubwindowMode$descriptor() {
        return XSetSubwindowMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static MethodHandle XSetSubwindowMode$handle() {
        return XSetSubwindowMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static MemorySegment XSetSubwindowMode$address() {
        return XSetSubwindowMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetSubwindowMode(Display *, GC, int)
     * }
     */
    public static int XSetSubwindowMode(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XSetSubwindowMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSubwindowMode", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTSOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetTSOrigin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static FunctionDescriptor XSetTSOrigin$descriptor() {
        return XSetTSOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static MethodHandle XSetTSOrigin$handle() {
        return XSetTSOrigin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static MemorySegment XSetTSOrigin$address() {
        return XSetTSOrigin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetTSOrigin(Display *, GC, int, int)
     * }
     */
    public static int XSetTSOrigin(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XSetTSOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTSOrigin", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetTile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetTile$descriptor() {
        return XSetTile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static MethodHandle XSetTile$handle() {
        return XSetTile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static MemorySegment XSetTile$address() {
        return XSetTile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetTile(Display *, GC, Pixmap)
     * }
     */
    public static int XSetTile(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = XSetTile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTile", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowBackground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetWindowBackground$descriptor() {
        return XSetWindowBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static MethodHandle XSetWindowBackground$handle() {
        return XSetWindowBackground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static MemorySegment XSetWindowBackground$address() {
        return XSetWindowBackground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowBackground(Display *, Window, unsigned long)
     * }
     */
    public static int XSetWindowBackground(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBackground", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBackgroundPixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowBackgroundPixmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetWindowBackgroundPixmap$descriptor() {
        return XSetWindowBackgroundPixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MethodHandle XSetWindowBackgroundPixmap$handle() {
        return XSetWindowBackgroundPixmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MemorySegment XSetWindowBackgroundPixmap$address() {
        return XSetWindowBackgroundPixmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowBackgroundPixmap(Display *, Window, Pixmap)
     * }
     */
    public static int XSetWindowBackgroundPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBackgroundPixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBackgroundPixmap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowBorder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static FunctionDescriptor XSetWindowBorder$descriptor() {
        return XSetWindowBorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static MethodHandle XSetWindowBorder$handle() {
        return XSetWindowBorder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static MemorySegment XSetWindowBorder$address() {
        return XSetWindowBorder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorder(Display *, Window, unsigned long)
     * }
     */
    public static int XSetWindowBorder(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorder", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorderPixmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowBorderPixmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static FunctionDescriptor XSetWindowBorderPixmap$descriptor() {
        return XSetWindowBorderPixmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MethodHandle XSetWindowBorderPixmap$handle() {
        return XSetWindowBorderPixmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static MemorySegment XSetWindowBorderPixmap$address() {
        return XSetWindowBorderPixmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorderPixmap(Display *, Window, Pixmap)
     * }
     */
    public static int XSetWindowBorderPixmap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowBorderPixmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorderPixmap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowBorderWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowBorderWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static FunctionDescriptor XSetWindowBorderWidth$descriptor() {
        return XSetWindowBorderWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static MethodHandle XSetWindowBorderWidth$handle() {
        return XSetWindowBorderWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static MemorySegment XSetWindowBorderWidth$address() {
        return XSetWindowBorderWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowBorderWidth(Display *, Window, unsigned int)
     * }
     */
    public static int XSetWindowBorderWidth(MemorySegment x0, long x1, int x2) {
        var mh$ = XSetWindowBorderWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowBorderWidth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWindowColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWindowColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static FunctionDescriptor XSetWindowColormap$descriptor() {
        return XSetWindowColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static MethodHandle XSetWindowColormap$handle() {
        return XSetWindowColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static MemorySegment XSetWindowColormap$address() {
        return XSetWindowColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWindowColormap(Display *, Window, Colormap)
     * }
     */
    public static int XSetWindowColormap(MemorySegment x0, long x1, long x2) {
        var mh$ = XSetWindowColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWindowColormap", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static FunctionDescriptor XStoreBuffer$descriptor() {
        return XStoreBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static MethodHandle XStoreBuffer$handle() {
        return XStoreBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static MemorySegment XStoreBuffer$address() {
        return XStoreBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreBuffer(Display *, const char *, int, int)
     * }
     */
    public static int XStoreBuffer(MemorySegment x0, MemorySegment x1, int x2, int x3) {
        var mh$ = XStoreBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreBuffer", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static FunctionDescriptor XStoreBytes$descriptor() {
        return XStoreBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static MethodHandle XStoreBytes$handle() {
        return XStoreBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static MemorySegment XStoreBytes$address() {
        return XStoreBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreBytes(Display *, const char *, int)
     * }
     */
    public static int XStoreBytes(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XStoreBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreBytes", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static FunctionDescriptor XStoreColor$descriptor() {
        return XStoreColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static MethodHandle XStoreColor$handle() {
        return XStoreColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static MemorySegment XStoreColor$address() {
        return XStoreColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreColor(Display *, Colormap, XColor *)
     * }
     */
    public static int XStoreColor(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreColor", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static FunctionDescriptor XStoreColors$descriptor() {
        return XStoreColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MethodHandle XStoreColors$handle() {
        return XStoreColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static MemorySegment XStoreColors$address() {
        return XStoreColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreColors(Display *, Colormap, XColor *, int)
     * }
     */
    public static int XStoreColors(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XStoreColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreColors", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static FunctionDescriptor XStoreName$descriptor() {
        return XStoreName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static MethodHandle XStoreName$handle() {
        return XStoreName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static MemorySegment XStoreName$address() {
        return XStoreName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreName(Display *, Window, const char *)
     * }
     */
    public static int XStoreName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XStoreName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStoreNamedColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStoreNamedColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static FunctionDescriptor XStoreNamedColor$descriptor() {
        return XStoreNamedColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static MethodHandle XStoreNamedColor$handle() {
        return XStoreNamedColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static MemorySegment XStoreNamedColor$address() {
        return XStoreNamedColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStoreNamedColor(Display *, Colormap, const char *, unsigned long, int)
     * }
     */
    public static int XStoreNamedColor(MemorySegment x0, long x1, MemorySegment x2, long x3, int x4) {
        var mh$ = XStoreNamedColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStoreNamedColor", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static FunctionDescriptor XSync$descriptor() {
        return XSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static MethodHandle XSync$handle() {
        return XSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static MemorySegment XSync$address() {
        return XSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSync(Display *, int)
     * }
     */
    public static int XSync(MemorySegment x0, int x1) {
        var mh$ = XSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSync", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTextExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XTextExtents$descriptor() {
        return XTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XTextExtents$handle() {
        return XTextExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MemorySegment XTextExtents$address() {
        return XTextExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextExtents", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextExtents16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTextExtents16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static FunctionDescriptor XTextExtents16$descriptor() {
        return XTextExtents16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MethodHandle XTextExtents16$handle() {
        return XTextExtents16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static MemorySegment XTextExtents16$address() {
        return XTextExtents16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *)
     * }
     */
    public static int XTextExtents16(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, MemorySegment x5, MemorySegment x6) {
        var mh$ = XTextExtents16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextExtents16", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTextWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static FunctionDescriptor XTextWidth$descriptor() {
        return XTextWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static MethodHandle XTextWidth$handle() {
        return XTextWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static MemorySegment XTextWidth$address() {
        return XTextWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTextWidth(XFontStruct *, const char *, int)
     * }
     */
    public static int XTextWidth(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextWidth", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextWidth16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTextWidth16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static FunctionDescriptor XTextWidth16$descriptor() {
        return XTextWidth16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static MethodHandle XTextWidth16$handle() {
        return XTextWidth16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static MemorySegment XTextWidth16$address() {
        return XTextWidth16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTextWidth16(XFontStruct *, const XChar2b *, int)
     * }
     */
    public static int XTextWidth16(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XTextWidth16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextWidth16", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTranslateCoordinates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTranslateCoordinates");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static FunctionDescriptor XTranslateCoordinates$descriptor() {
        return XTranslateCoordinates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static MethodHandle XTranslateCoordinates$handle() {
        return XTranslateCoordinates.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static MemorySegment XTranslateCoordinates$address() {
        return XTranslateCoordinates.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *)
     * }
     */
    public static int XTranslateCoordinates(MemorySegment x0, long x1, long x2, int x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7) {
        var mh$ = XTranslateCoordinates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTranslateCoordinates", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUndefineCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUndefineCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUndefineCursor$descriptor() {
        return XUndefineCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static MethodHandle XUndefineCursor$handle() {
        return XUndefineCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static MemorySegment XUndefineCursor$address() {
        return XUndefineCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUndefineCursor(Display *, Window)
     * }
     */
    public static int XUndefineCursor(MemorySegment x0, long x1) {
        var mh$ = XUndefineCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUndefineCursor", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUngrabButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static FunctionDescriptor XUngrabButton$descriptor() {
        return XUngrabButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static MethodHandle XUngrabButton$handle() {
        return XUngrabButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static MemorySegment XUngrabButton$address() {
        return XUngrabButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUngrabButton(Display *, unsigned int, unsigned int, Window)
     * }
     */
    public static int XUngrabButton(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabButton", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUngrabKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static FunctionDescriptor XUngrabKey$descriptor() {
        return XUngrabKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static MethodHandle XUngrabKey$handle() {
        return XUngrabKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static MemorySegment XUngrabKey$address() {
        return XUngrabKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUngrabKey(Display *, int, unsigned int, Window)
     * }
     */
    public static int XUngrabKey(MemorySegment x0, int x1, int x2, long x3) {
        var mh$ = XUngrabKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabKey", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabKeyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUngrabKeyboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static FunctionDescriptor XUngrabKeyboard$descriptor() {
        return XUngrabKeyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static MethodHandle XUngrabKeyboard$handle() {
        return XUngrabKeyboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static MemorySegment XUngrabKeyboard$address() {
        return XUngrabKeyboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUngrabKeyboard(Display *, Time)
     * }
     */
    public static int XUngrabKeyboard(MemorySegment x0, long x1) {
        var mh$ = XUngrabKeyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabKeyboard", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUngrabPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static FunctionDescriptor XUngrabPointer$descriptor() {
        return XUngrabPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static MethodHandle XUngrabPointer$handle() {
        return XUngrabPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static MemorySegment XUngrabPointer$address() {
        return XUngrabPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUngrabPointer(Display *, Time)
     * }
     */
    public static int XUngrabPointer(MemorySegment x0, long x1) {
        var mh$ = XUngrabPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabPointer", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUngrabServer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUngrabServer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static FunctionDescriptor XUngrabServer$descriptor() {
        return XUngrabServer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static MethodHandle XUngrabServer$handle() {
        return XUngrabServer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static MemorySegment XUngrabServer$address() {
        return XUngrabServer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUngrabServer(Display *)
     * }
     */
    public static int XUngrabServer(MemorySegment x0) {
        var mh$ = XUngrabServer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUngrabServer", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUninstallColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUninstallColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static FunctionDescriptor XUninstallColormap$descriptor() {
        return XUninstallColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static MethodHandle XUninstallColormap$handle() {
        return XUninstallColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static MemorySegment XUninstallColormap$address() {
        return XUninstallColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUninstallColormap(Display *, Colormap)
     * }
     */
    public static int XUninstallColormap(MemorySegment x0, long x1) {
        var mh$ = XUninstallColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUninstallColormap", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnloadFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnloadFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static FunctionDescriptor XUnloadFont$descriptor() {
        return XUnloadFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static MethodHandle XUnloadFont$handle() {
        return XUnloadFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static MemorySegment XUnloadFont$address() {
        return XUnloadFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnloadFont(Display *, Font)
     * }
     */
    public static int XUnloadFont(MemorySegment x0, long x1) {
        var mh$ = XUnloadFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnloadFont", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnmapSubwindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnmapSubwindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUnmapSubwindows$descriptor() {
        return XUnmapSubwindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static MethodHandle XUnmapSubwindows$handle() {
        return XUnmapSubwindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static MemorySegment XUnmapSubwindows$address() {
        return XUnmapSubwindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnmapSubwindows(Display *, Window)
     * }
     */
    public static int XUnmapSubwindows(MemorySegment x0, long x1) {
        var mh$ = XUnmapSubwindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnmapSubwindows", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnmapWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnmapWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static FunctionDescriptor XUnmapWindow$descriptor() {
        return XUnmapWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static MethodHandle XUnmapWindow$handle() {
        return XUnmapWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static MemorySegment XUnmapWindow$address() {
        return XUnmapWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnmapWindow(Display *, Window)
     * }
     */
    public static int XUnmapWindow(MemorySegment x0, long x1) {
        var mh$ = XUnmapWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnmapWindow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XVendorRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XVendorRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static FunctionDescriptor XVendorRelease$descriptor() {
        return XVendorRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static MethodHandle XVendorRelease$handle() {
        return XVendorRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static MemorySegment XVendorRelease$address() {
        return XVendorRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XVendorRelease(Display *)
     * }
     */
    public static int XVendorRelease(MemorySegment x0) {
        var mh$ = XVendorRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XVendorRelease", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWarpPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWarpPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XWarpPointer$descriptor() {
        return XWarpPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XWarpPointer$handle() {
        return XWarpPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XWarpPointer$address() {
        return XWarpPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XWarpPointer(MemorySegment x0, long x1, long x2, int x3, int x4, int x5, int x6, int x7, int x8) {
        var mh$ = XWarpPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWarpPointer", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWidthMMOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWidthMMOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWidthMMOfScreen$descriptor() {
        return XWidthMMOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWidthMMOfScreen$handle() {
        return XWidthMMOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static MemorySegment XWidthMMOfScreen$address() {
        return XWidthMMOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWidthMMOfScreen(Screen *)
     * }
     */
    public static int XWidthMMOfScreen(MemorySegment x0) {
        var mh$ = XWidthMMOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWidthMMOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWidthOfScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWidthOfScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static FunctionDescriptor XWidthOfScreen$descriptor() {
        return XWidthOfScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static MethodHandle XWidthOfScreen$handle() {
        return XWidthOfScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static MemorySegment XWidthOfScreen$address() {
        return XWidthOfScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWidthOfScreen(Screen *)
     * }
     */
    public static int XWidthOfScreen(MemorySegment x0) {
        var mh$ = XWidthOfScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWidthOfScreen", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWindowEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWindowEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static FunctionDescriptor XWindowEvent$descriptor() {
        return XWindowEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MethodHandle XWindowEvent$handle() {
        return XWindowEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static MemorySegment XWindowEvent$address() {
        return XWindowEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWindowEvent(Display *, Window, long, XEvent *)
     * }
     */
    public static int XWindowEvent(MemorySegment x0, long x1, long x2, MemorySegment x3) {
        var mh$ = XWindowEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWindowEvent", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWriteBitmapFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWriteBitmapFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static FunctionDescriptor XWriteBitmapFile$descriptor() {
        return XWriteBitmapFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static MethodHandle XWriteBitmapFile$handle() {
        return XWriteBitmapFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static MemorySegment XWriteBitmapFile$address() {
        return XWriteBitmapFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int)
     * }
     */
    public static int XWriteBitmapFile(MemorySegment x0, MemorySegment x1, long x2, int x3, int x4, int x5, int x6) {
        var mh$ = XWriteBitmapFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWriteBitmapFile", x0, x1, x2, x3, x4, x5, x6);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSupportsLocale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSupportsLocale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static FunctionDescriptor XSupportsLocale$descriptor() {
        return XSupportsLocale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static MethodHandle XSupportsLocale$handle() {
        return XSupportsLocale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static MemorySegment XSupportsLocale$address() {
        return XSupportsLocale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSupportsLocale()
     * }
     */
    public static int XSupportsLocale() {
        var mh$ = XSupportsLocale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSupportsLocale");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetLocaleModifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetLocaleModifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static FunctionDescriptor XSetLocaleModifiers$descriptor() {
        return XSetLocaleModifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static MethodHandle XSetLocaleModifiers$handle() {
        return XSetLocaleModifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static MemorySegment XSetLocaleModifiers$address() {
        return XSetLocaleModifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XSetLocaleModifiers(const char *)
     * }
     */
    public static MemorySegment XSetLocaleModifiers(MemorySegment x0) {
        var mh$ = XSetLocaleModifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetLocaleModifiers", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XOpenOM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static FunctionDescriptor XOpenOM$descriptor() {
        return XOpenOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static MethodHandle XOpenOM$handle() {
        return XOpenOM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static MemorySegment XOpenOM$address() {
        return XOpenOM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *)
     * }
     */
    public static MemorySegment XOpenOM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenOM", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCloseOM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static FunctionDescriptor XCloseOM$descriptor() {
        return XCloseOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static MethodHandle XCloseOM$handle() {
        return XCloseOM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static MemorySegment XCloseOM$address() {
        return XCloseOM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCloseOM(XOM)
     * }
     */
    public static int XCloseOM(MemorySegment x0) {
        var mh$ = XCloseOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseOM", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetOMValues(XOM, ...)
     * }
     */
    public static class XSetOMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XSetOMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetOMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetOMValues(XOM, ...)
         * }
         */
        public static XSetOMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetOMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetOMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetOMValues(XOM, ...)
     * }
     */
    public static class XGetOMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XGetOMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetOMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetOMValues(XOM, ...)
         * }
         */
        public static XGetOMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetOMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetOMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDisplayOfOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayOfOM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static FunctionDescriptor XDisplayOfOM$descriptor() {
        return XDisplayOfOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static MethodHandle XDisplayOfOM$handle() {
        return XDisplayOfOM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static MemorySegment XDisplayOfOM$address() {
        return XDisplayOfOM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfOM(XOM)
     * }
     */
    public static MemorySegment XDisplayOfOM(MemorySegment x0) {
        var mh$ = XDisplayOfOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfOM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLocaleOfOM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static FunctionDescriptor XLocaleOfOM$descriptor() {
        return XLocaleOfOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static MethodHandle XLocaleOfOM$handle() {
        return XLocaleOfOM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static MemorySegment XLocaleOfOM$address() {
        return XLocaleOfOM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfOM(XOM)
     * }
     */
    public static MemorySegment XLocaleOfOM(MemorySegment x0) {
        var mh$ = XLocaleOfOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfOM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XOC XCreateOC(XOM, ...)
     * }
     */
    public static class XCreateOC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateOC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XCreateOC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XOC XCreateOC(XOM, ...)
         * }
         */
        public static XCreateOC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XCreateOC(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XCreateOC", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDestroyOC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDestroyOC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static FunctionDescriptor XDestroyOC$descriptor() {
        return XDestroyOC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static MethodHandle XDestroyOC$handle() {
        return XDestroyOC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static MemorySegment XDestroyOC$address() {
        return XDestroyOC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XDestroyOC(XOC)
     * }
     */
    public static void XDestroyOC(MemorySegment x0) {
        var mh$ = XDestroyOC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyOC", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOMOfOC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XOMOfOC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static FunctionDescriptor XOMOfOC$descriptor() {
        return XOMOfOC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static MethodHandle XOMOfOC$handle() {
        return XOMOfOC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static MemorySegment XOMOfOC$address() {
        return XOMOfOC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XOM XOMOfOC(XOC)
     * }
     */
    public static MemorySegment XOMOfOC(MemorySegment x0) {
        var mh$ = XOMOfOC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOMOfOC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetOCValues(XOC, ...)
     * }
     */
    public static class XSetOCValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XSetOCValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetOCValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetOCValues(XOC, ...)
         * }
         */
        public static XSetOCValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetOCValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetOCValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetOCValues(XOC, ...)
     * }
     */
    public static class XGetOCValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XGetOCValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetOCValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetOCValues(XOC, ...)
         * }
         */
        public static XGetOCValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetOCValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetOCValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XCreateFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static FunctionDescriptor XCreateFontSet$descriptor() {
        return XCreateFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static MethodHandle XCreateFontSet$handle() {
        return XCreateFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static MemorySegment XCreateFontSet$address() {
        return XCreateFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **)
     * }
     */
    public static MemorySegment XCreateFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XCreateFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateFontSet", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static FunctionDescriptor XFreeFontSet$descriptor() {
        return XFreeFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static MethodHandle XFreeFontSet$handle() {
        return XFreeFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static MemorySegment XFreeFontSet$address() {
        return XFreeFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XFreeFontSet(Display *, XFontSet)
     * }
     */
    public static void XFreeFontSet(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeFontSet", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFontsOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFontsOfFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static FunctionDescriptor XFontsOfFontSet$descriptor() {
        return XFontsOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static MethodHandle XFontsOfFontSet$handle() {
        return XFontsOfFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static MemorySegment XFontsOfFontSet$address() {
        return XFontsOfFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***)
     * }
     */
    public static int XFontsOfFontSet(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XFontsOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFontsOfFontSet", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XBaseFontNameListOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XBaseFontNameListOfFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XBaseFontNameListOfFontSet$descriptor() {
        return XBaseFontNameListOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XBaseFontNameListOfFontSet$handle() {
        return XBaseFontNameListOfFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XBaseFontNameListOfFontSet$address() {
        return XBaseFontNameListOfFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XBaseFontNameListOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XBaseFontNameListOfFontSet(MemorySegment x0) {
        var mh$ = XBaseFontNameListOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XBaseFontNameListOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLocaleOfFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XLocaleOfFontSet$descriptor() {
        return XLocaleOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XLocaleOfFontSet$handle() {
        return XLocaleOfFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XLocaleOfFontSet$address() {
        return XLocaleOfFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XLocaleOfFontSet(MemorySegment x0) {
        var mh$ = XLocaleOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XContextDependentDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XContextDependentDrawing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XContextDependentDrawing$descriptor() {
        return XContextDependentDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static MethodHandle XContextDependentDrawing$handle() {
        return XContextDependentDrawing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static MemorySegment XContextDependentDrawing$address() {
        return XContextDependentDrawing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XContextDependentDrawing(XFontSet)
     * }
     */
    public static int XContextDependentDrawing(MemorySegment x0) {
        var mh$ = XContextDependentDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XContextDependentDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDirectionalDependentDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDirectionalDependentDrawing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XDirectionalDependentDrawing$descriptor() {
        return XDirectionalDependentDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static MethodHandle XDirectionalDependentDrawing$handle() {
        return XDirectionalDependentDrawing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static MemorySegment XDirectionalDependentDrawing$address() {
        return XDirectionalDependentDrawing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDirectionalDependentDrawing(XFontSet)
     * }
     */
    public static int XDirectionalDependentDrawing(MemorySegment x0) {
        var mh$ = XDirectionalDependentDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDirectionalDependentDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XContextualDrawing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XContextualDrawing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static FunctionDescriptor XContextualDrawing$descriptor() {
        return XContextualDrawing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static MethodHandle XContextualDrawing$handle() {
        return XContextualDrawing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static MemorySegment XContextualDrawing$address() {
        return XContextualDrawing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XContextualDrawing(XFontSet)
     * }
     */
    public static int XContextualDrawing(MemorySegment x0) {
        var mh$ = XContextualDrawing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XContextualDrawing", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XExtentsOfFontSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XExtentsOfFontSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static FunctionDescriptor XExtentsOfFontSet$descriptor() {
        return XExtentsOfFontSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static MethodHandle XExtentsOfFontSet$handle() {
        return XExtentsOfFontSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XExtentsOfFontSet$address() {
        return XExtentsOfFontSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XFontSetExtents *XExtentsOfFontSet(XFontSet)
     * }
     */
    public static MemorySegment XExtentsOfFontSet(MemorySegment x0) {
        var mh$ = XExtentsOfFontSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XExtentsOfFontSet", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbTextEscapement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbTextEscapement$descriptor() {
        return XmbTextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MethodHandle XmbTextEscapement$handle() {
        return XmbTextEscapement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MemorySegment XmbTextEscapement$address() {
        return XmbTextEscapement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbTextEscapement(XFontSet, const char *, int)
     * }
     */
    public static int XmbTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XmbTextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcTextEscapement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcTextEscapement$descriptor() {
        return XwcTextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcTextEscapement$handle() {
        return XwcTextEscapement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static MemorySegment XwcTextEscapement$address() {
        return XwcTextEscapement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcTextEscapement(XFontSet, const wchar_t *, int)
     * }
     */
    public static int XwcTextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = XwcTextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextEscapement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8TextEscapement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8TextEscapement$descriptor() {
        return Xutf8TextEscapement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MethodHandle Xutf8TextEscapement$handle() {
        return Xutf8TextEscapement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static MemorySegment Xutf8TextEscapement$address() {
        return Xutf8TextEscapement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8TextEscapement(XFontSet, const char *, int)
     * }
     */
    public static int Xutf8TextEscapement(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = Xutf8TextEscapement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextEscapement", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbTextExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XmbTextExtents$descriptor() {
        return XmbTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XmbTextExtents$handle() {
        return XmbTextExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment XmbTextExtents$address() {
        return XmbTextExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int XmbTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XmbTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcTextExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XwcTextExtents$descriptor() {
        return XwcTextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XwcTextExtents$handle() {
        return XwcTextExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment XwcTextExtents$address() {
        return XwcTextExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int XwcTextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XwcTextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8TextExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor Xutf8TextExtents$descriptor() {
        return Xutf8TextExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle Xutf8TextExtents$handle() {
        return Xutf8TextExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment Xutf8TextExtents$address() {
        return Xutf8TextExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8TextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *)
     * }
     */
    public static int Xutf8TextExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = Xutf8TextExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextExtents", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbTextPerCharExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XmbTextPerCharExtents$descriptor() {
        return XmbTextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XmbTextPerCharExtents$handle() {
        return XmbTextPerCharExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment XmbTextPerCharExtents$address() {
        return XmbTextPerCharExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int XmbTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbTextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcTextPerCharExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor XwcTextPerCharExtents$descriptor() {
        return XwcTextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle XwcTextPerCharExtents$handle() {
        return XwcTextPerCharExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment XwcTextPerCharExtents$address() {
        return XwcTextPerCharExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int XwcTextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XwcTextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextPerCharExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8TextPerCharExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static FunctionDescriptor Xutf8TextPerCharExtents$descriptor() {
        return Xutf8TextPerCharExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MethodHandle Xutf8TextPerCharExtents$handle() {
        return Xutf8TextPerCharExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static MemorySegment Xutf8TextPerCharExtents$address() {
        return Xutf8TextPerCharExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8TextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *)
     * }
     */
    public static int Xutf8TextPerCharExtents(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8TextPerCharExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextPerCharExtents", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbDrawText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawText$descriptor() {
        return XmbDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MethodHandle XmbDrawText$handle() {
        return XmbDrawText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MemorySegment XmbDrawText$address() {
        return XmbDrawText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static void XmbDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XmbDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcDrawText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawText$descriptor() {
        return XwcDrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static MethodHandle XwcDrawText$handle() {
        return XwcDrawText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static MemorySegment XwcDrawText$address() {
        return XwcDrawText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int)
     * }
     */
    public static void XwcDrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = XwcDrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8DrawText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawText$descriptor() {
        return Xutf8DrawText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MethodHandle Xutf8DrawText$handle() {
        return Xutf8DrawText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static MemorySegment Xutf8DrawText$address() {
        return Xutf8DrawText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int)
     * }
     */
    public static void Xutf8DrawText(MemorySegment x0, long x1, MemorySegment x2, int x3, int x4, MemorySegment x5, int x6) {
        var mh$ = Xutf8DrawText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawText", x0, x1, x2, x3, x4, x5, x6);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbDrawString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawString$descriptor() {
        return XmbDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XmbDrawString$handle() {
        return XmbDrawString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment XmbDrawString$address() {
        return XmbDrawString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void XmbDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcDrawString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawString$descriptor() {
        return XwcDrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcDrawString$handle() {
        return XwcDrawString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MemorySegment XwcDrawString$address() {
        return XwcDrawString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static void XwcDrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8DrawString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawString$descriptor() {
        return Xutf8DrawString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle Xutf8DrawString$handle() {
        return Xutf8DrawString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment Xutf8DrawString$address() {
        return Xutf8DrawString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void Xutf8DrawString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbDrawImageString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor XmbDrawImageString$descriptor() {
        return XmbDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle XmbDrawImageString$handle() {
        return XmbDrawImageString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment XmbDrawImageString$address() {
        return XmbDrawImageString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void XmbDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XmbDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbDrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcDrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcDrawImageString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static FunctionDescriptor XwcDrawImageString$descriptor() {
        return XwcDrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MethodHandle XwcDrawImageString$handle() {
        return XwcDrawImageString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static MemorySegment XwcDrawImageString$address() {
        return XwcDrawImageString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int)
     * }
     */
    public static void XwcDrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = XwcDrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcDrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8DrawImageString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8DrawImageString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static FunctionDescriptor Xutf8DrawImageString$descriptor() {
        return Xutf8DrawImageString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MethodHandle Xutf8DrawImageString$handle() {
        return Xutf8DrawImageString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static MemorySegment Xutf8DrawImageString$address() {
        return Xutf8DrawImageString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void Xutf8DrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int)
     * }
     */
    public static void Xutf8DrawImageString(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, int x4, int x5, MemorySegment x6, int x7) {
        var mh$ = Xutf8DrawImageString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8DrawImageString", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOpenIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XOpenIM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static FunctionDescriptor XOpenIM$descriptor() {
        return XOpenIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static MethodHandle XOpenIM$handle() {
        return XOpenIM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static MemorySegment XOpenIM$address() {
        return XOpenIM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *)
     * }
     */
    public static MemorySegment XOpenIM(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XOpenIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOpenIM", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCloseIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCloseIM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static FunctionDescriptor XCloseIM$descriptor() {
        return XCloseIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static MethodHandle XCloseIM$handle() {
        return XCloseIM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static MemorySegment XCloseIM$address() {
        return XCloseIM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XCloseIM(XIM)
     * }
     */
    public static int XCloseIM(MemorySegment x0) {
        var mh$ = XCloseIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCloseIM", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetIMValues(XIM, ...)
     * }
     */
    public static class XGetIMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XGetIMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetIMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetIMValues(XIM, ...)
         * }
         */
        public static XGetIMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetIMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetIMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetIMValues(XIM, ...)
     * }
     */
    public static class XSetIMValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XSetIMValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetIMValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetIMValues(XIM, ...)
         * }
         */
        public static XSetIMValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetIMValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetIMValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDisplayOfIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDisplayOfIM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static FunctionDescriptor XDisplayOfIM$descriptor() {
        return XDisplayOfIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static MethodHandle XDisplayOfIM$handle() {
        return XDisplayOfIM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static MemorySegment XDisplayOfIM$address() {
        return XDisplayOfIM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Display *XDisplayOfIM(XIM)
     * }
     */
    public static MemorySegment XDisplayOfIM(MemorySegment x0) {
        var mh$ = XDisplayOfIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDisplayOfIM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLocaleOfIM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLocaleOfIM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static FunctionDescriptor XLocaleOfIM$descriptor() {
        return XLocaleOfIM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static MethodHandle XLocaleOfIM$handle() {
        return XLocaleOfIM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static MemorySegment XLocaleOfIM$address() {
        return XLocaleOfIM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XLocaleOfIM(XIM)
     * }
     */
    public static MemorySegment XLocaleOfIM(MemorySegment x0) {
        var mh$ = XLocaleOfIM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLocaleOfIM", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XIC XCreateIC(XIM, ...)
     * }
     */
    public static class XCreateIC {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateIC");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XCreateIC(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XIC XCreateIC(XIM, ...)
         * }
         */
        public static XCreateIC makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XCreateIC(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XCreateIC", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XDestroyIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDestroyIC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static FunctionDescriptor XDestroyIC$descriptor() {
        return XDestroyIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static MethodHandle XDestroyIC$handle() {
        return XDestroyIC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static MemorySegment XDestroyIC$address() {
        return XDestroyIC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XDestroyIC(XIC)
     * }
     */
    public static void XDestroyIC(MemorySegment x0) {
        var mh$ = XDestroyIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyIC", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetICFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetICFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static FunctionDescriptor XSetICFocus$descriptor() {
        return XSetICFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static MethodHandle XSetICFocus$handle() {
        return XSetICFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static MemorySegment XSetICFocus$address() {
        return XSetICFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetICFocus(XIC)
     * }
     */
    public static void XSetICFocus(MemorySegment x0) {
        var mh$ = XSetICFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetICFocus", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnsetICFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnsetICFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static FunctionDescriptor XUnsetICFocus$descriptor() {
        return XUnsetICFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static MethodHandle XUnsetICFocus$handle() {
        return XUnsetICFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static MemorySegment XUnsetICFocus$address() {
        return XUnsetICFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XUnsetICFocus(XIC)
     * }
     */
    public static void XUnsetICFocus(MemorySegment x0) {
        var mh$ = XUnsetICFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnsetICFocus", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcResetIC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static FunctionDescriptor XwcResetIC$descriptor() {
        return XwcResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static MethodHandle XwcResetIC$handle() {
        return XwcResetIC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static MemorySegment XwcResetIC$address() {
        return XwcResetIC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern wchar_t *XwcResetIC(XIC)
     * }
     */
    public static MemorySegment XwcResetIC(MemorySegment x0) {
        var mh$ = XwcResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbResetIC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static FunctionDescriptor XmbResetIC$descriptor() {
        return XmbResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static MethodHandle XmbResetIC$handle() {
        return XmbResetIC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static MemorySegment XmbResetIC$address() {
        return XmbResetIC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *XmbResetIC(XIC)
     * }
     */
    public static MemorySegment XmbResetIC(MemorySegment x0) {
        var mh$ = XmbResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8ResetIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8ResetIC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static FunctionDescriptor Xutf8ResetIC$descriptor() {
        return Xutf8ResetIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static MethodHandle Xutf8ResetIC$handle() {
        return Xutf8ResetIC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static MemorySegment Xutf8ResetIC$address() {
        return Xutf8ResetIC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *Xutf8ResetIC(XIC)
     * }
     */
    public static MemorySegment Xutf8ResetIC(MemorySegment x0) {
        var mh$ = Xutf8ResetIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8ResetIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XSetICValues(XIC, ...)
     * }
     */
    public static class XSetICValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XSetICValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XSetICValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XSetICValues(XIC, ...)
         * }
         */
        public static XSetICValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XSetICValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XSetICValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern char *XGetICValues(XIC, ...)
     * }
     */
    public static class XGetICValues {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_POINTER
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XGetICValues");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XGetICValues(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern char *XGetICValues(XIC, ...)
         * }
         */
        public static XGetICValues makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XGetICValues(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XGetICValues", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XIMOfIC {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XIMOfIC");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static FunctionDescriptor XIMOfIC$descriptor() {
        return XIMOfIC.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static MethodHandle XIMOfIC$handle() {
        return XIMOfIC.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static MemorySegment XIMOfIC$address() {
        return XIMOfIC.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XIM XIMOfIC(XIC)
     * }
     */
    public static MemorySegment XIMOfIC(MemorySegment x0) {
        var mh$ = XIMOfIC.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIMOfIC", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFilterEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFilterEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static FunctionDescriptor XFilterEvent$descriptor() {
        return XFilterEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static MethodHandle XFilterEvent$handle() {
        return XFilterEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static MemorySegment XFilterEvent$address() {
        return XFilterEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFilterEvent(XEvent *, Window)
     * }
     */
    public static int XFilterEvent(MemorySegment x0, long x1) {
        var mh$ = XFilterEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFilterEvent", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbLookupString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor XmbLookupString$descriptor() {
        return XmbLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle XmbLookupString$handle() {
        return XmbLookupString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MemorySegment XmbLookupString$address() {
        return XmbLookupString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static int XmbLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XmbLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbLookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcLookupString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor XwcLookupString$descriptor() {
        return XwcLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle XwcLookupString$handle() {
        return XwcLookupString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static MemorySegment XwcLookupString$address() {
        return XwcLookupString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *)
     * }
     */
    public static int XwcLookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XwcLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcLookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8LookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8LookupString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static FunctionDescriptor Xutf8LookupString$descriptor() {
        return Xutf8LookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MethodHandle Xutf8LookupString$handle() {
        return Xutf8LookupString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static MemorySegment Xutf8LookupString$address() {
        return Xutf8LookupString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8LookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *)
     * }
     */
    public static int Xutf8LookupString(MemorySegment x0, MemorySegment x1, MemorySegment x2, int x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = Xutf8LookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8LookupString", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern XVaNestedList XVaCreateNestedList(int, ...)
     * }
     */
    public static class XVaCreateNestedList {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                glxext_h.C_POINTER,
                glxext_h.C_INT
            );
        private static final MemorySegment ADDR = glxext_h.findOrThrow("XVaCreateNestedList");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private XVaCreateNestedList(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern XVaNestedList XVaCreateNestedList(int, ...)
         * }
         */
        public static XVaCreateNestedList makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new XVaCreateNestedList(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("XVaCreateNestedList", x0, x1);
                }
                return (MemorySegment)spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class XRegisterIMInstantiateCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRegisterIMInstantiateCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static FunctionDescriptor XRegisterIMInstantiateCallback$descriptor() {
        return XRegisterIMInstantiateCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MethodHandle XRegisterIMInstantiateCallback$handle() {
        return XRegisterIMInstantiateCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MemorySegment XRegisterIMInstantiateCallback$address() {
        return XRegisterIMInstantiateCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static int XRegisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XRegisterIMInstantiateCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRegisterIMInstantiateCallback", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnregisterIMInstantiateCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnregisterIMInstantiateCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static FunctionDescriptor XUnregisterIMInstantiateCallback$descriptor() {
        return XUnregisterIMInstantiateCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MethodHandle XUnregisterIMInstantiateCallback$handle() {
        return XUnregisterIMInstantiateCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static MemorySegment XUnregisterIMInstantiateCallback$address() {
        return XUnregisterIMInstantiateCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIDProc, XPointer)
     * }
     */
    public static int XUnregisterIMInstantiateCallback(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = XUnregisterIMInstantiateCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnregisterIMInstantiateCallback", x0, x1, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XInternalConnectionNumbers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XInternalConnectionNumbers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static FunctionDescriptor XInternalConnectionNumbers$descriptor() {
        return XInternalConnectionNumbers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static MethodHandle XInternalConnectionNumbers$handle() {
        return XInternalConnectionNumbers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static MemorySegment XInternalConnectionNumbers$address() {
        return XInternalConnectionNumbers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XInternalConnectionNumbers(Display *, int **, int *)
     * }
     */
    public static int XInternalConnectionNumbers(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XInternalConnectionNumbers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XInternalConnectionNumbers", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XProcessInternalConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XProcessInternalConnection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static FunctionDescriptor XProcessInternalConnection$descriptor() {
        return XProcessInternalConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static MethodHandle XProcessInternalConnection$handle() {
        return XProcessInternalConnection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static MemorySegment XProcessInternalConnection$address() {
        return XProcessInternalConnection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XProcessInternalConnection(Display *, int)
     * }
     */
    public static void XProcessInternalConnection(MemorySegment x0, int x1) {
        var mh$ = XProcessInternalConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XProcessInternalConnection", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAddConnectionWatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAddConnectionWatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static FunctionDescriptor XAddConnectionWatch$descriptor() {
        return XAddConnectionWatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MethodHandle XAddConnectionWatch$handle() {
        return XAddConnectionWatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MemorySegment XAddConnectionWatch$address() {
        return XAddConnectionWatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static int XAddConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XAddConnectionWatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAddConnectionWatch", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRemoveConnectionWatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRemoveConnectionWatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static FunctionDescriptor XRemoveConnectionWatch$descriptor() {
        return XRemoveConnectionWatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MethodHandle XRemoveConnectionWatch$handle() {
        return XRemoveConnectionWatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static MemorySegment XRemoveConnectionWatch$address() {
        return XRemoveConnectionWatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer)
     * }
     */
    public static void XRemoveConnectionWatch(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XRemoveConnectionWatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRemoveConnectionWatch", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetAuthorization {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetAuthorization");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static FunctionDescriptor XSetAuthorization$descriptor() {
        return XSetAuthorization.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static MethodHandle XSetAuthorization$handle() {
        return XSetAuthorization.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static MemorySegment XSetAuthorization$address() {
        return XSetAuthorization.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetAuthorization(char *, int, char *, int)
     * }
     */
    public static void XSetAuthorization(MemorySegment x0, int x1, MemorySegment x2, int x3) {
        var mh$ = XSetAuthorization.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetAuthorization", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Xmbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("_Xmbtowc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static FunctionDescriptor _Xmbtowc$descriptor() {
        return _Xmbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static MethodHandle _Xmbtowc$handle() {
        return _Xmbtowc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static MemorySegment _Xmbtowc$address() {
        return _Xmbtowc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int _Xmbtowc(wchar_t *, char *, int)
     * }
     */
    public static int _Xmbtowc(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = _Xmbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xmbtowc", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Xwctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("_Xwctomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static FunctionDescriptor _Xwctomb$descriptor() {
        return _Xwctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static MethodHandle _Xwctomb$handle() {
        return _Xwctomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static MemorySegment _Xwctomb$address() {
        return _Xwctomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int _Xwctomb(char *, wchar_t)
     * }
     */
    public static int _Xwctomb(MemorySegment x0, int x1) {
        var mh$ = _Xwctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Xwctomb", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetEventData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetEventData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static FunctionDescriptor XGetEventData$descriptor() {
        return XGetEventData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MethodHandle XGetEventData$handle() {
        return XGetEventData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MemorySegment XGetEventData$address() {
        return XGetEventData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static int XGetEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XGetEventData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetEventData", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFreeEventData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFreeEventData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static FunctionDescriptor XFreeEventData$descriptor() {
        return XFreeEventData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MethodHandle XFreeEventData$handle() {
        return XFreeEventData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static MemorySegment XFreeEventData$address() {
        return XFreeEventData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XFreeEventData(Display *, XGenericEventCookie *)
     * }
     */
    public static void XFreeEventData(MemorySegment x0, MemorySegment x1) {
        var mh$ = XFreeEventData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFreeEventData", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int XStringStyle = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XStringStyle = 0
     * }
     */
    public static int XStringStyle() {
        return XStringStyle;
    }
    private static final int XCompoundTextStyle = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XCompoundTextStyle = 1
     * }
     */
    public static int XCompoundTextStyle() {
        return XCompoundTextStyle;
    }
    private static final int XTextStyle = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XTextStyle = 2
     * }
     */
    public static int XTextStyle() {
        return XTextStyle;
    }
    private static final int XStdICCTextStyle = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XStdICCTextStyle = 3
     * }
     */
    public static int XStdICCTextStyle() {
        return XStdICCTextStyle;
    }
    private static final int XUTF8StringStyle = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.XUTF8StringStyle = 4
     * }
     */
    public static int XUTF8StringStyle() {
        return XUTF8StringStyle;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _XRegion *Region
     * }
     */
    public static final AddressLayout Region = glxext_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int XContext
     * }
     */
    public static final OfInt XContext = glxext_h.C_INT;

    private static class XAllocClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocClassHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static FunctionDescriptor XAllocClassHint$descriptor() {
        return XAllocClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static MethodHandle XAllocClassHint$handle() {
        return XAllocClassHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static MemorySegment XAllocClassHint$address() {
        return XAllocClassHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XClassHint *XAllocClassHint()
     * }
     */
    public static MemorySegment XAllocClassHint() {
        var mh$ = XAllocClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocClassHint");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocIconSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocIconSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static FunctionDescriptor XAllocIconSize$descriptor() {
        return XAllocIconSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static MethodHandle XAllocIconSize$handle() {
        return XAllocIconSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static MemorySegment XAllocIconSize$address() {
        return XAllocIconSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XIconSize *XAllocIconSize()
     * }
     */
    public static MemorySegment XAllocIconSize() {
        var mh$ = XAllocIconSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocIconSize");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocSizeHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static FunctionDescriptor XAllocSizeHints$descriptor() {
        return XAllocSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static MethodHandle XAllocSizeHints$handle() {
        return XAllocSizeHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static MemorySegment XAllocSizeHints$address() {
        return XAllocSizeHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XSizeHints *XAllocSizeHints()
     * }
     */
    public static MemorySegment XAllocSizeHints() {
        var mh$ = XAllocSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocSizeHints");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocStandardColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static FunctionDescriptor XAllocStandardColormap$descriptor() {
        return XAllocStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static MethodHandle XAllocStandardColormap$handle() {
        return XAllocStandardColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static MemorySegment XAllocStandardColormap$address() {
        return XAllocStandardColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XStandardColormap *XAllocStandardColormap()
     * }
     */
    public static MemorySegment XAllocStandardColormap() {
        var mh$ = XAllocStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocStandardColormap");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XAllocWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XAllocWMHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static FunctionDescriptor XAllocWMHints$descriptor() {
        return XAllocWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static MethodHandle XAllocWMHints$handle() {
        return XAllocWMHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static MemorySegment XAllocWMHints$address() {
        return XAllocWMHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XWMHints *XAllocWMHints()
     * }
     */
    public static MemorySegment XAllocWMHints() {
        var mh$ = XAllocWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XAllocWMHints");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XClipBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XClipBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static FunctionDescriptor XClipBox$descriptor() {
        return XClipBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static MethodHandle XClipBox$handle() {
        return XClipBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static MemorySegment XClipBox$address() {
        return XClipBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XClipBox(Region, XRectangle *)
     * }
     */
    public static int XClipBox(MemorySegment x0, MemorySegment x1) {
        var mh$ = XClipBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XClipBox", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XCreateRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XCreateRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static FunctionDescriptor XCreateRegion$descriptor() {
        return XCreateRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static MethodHandle XCreateRegion$handle() {
        return XCreateRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static MemorySegment XCreateRegion$address() {
        return XCreateRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Region XCreateRegion()
     * }
     */
    public static MemorySegment XCreateRegion() {
        var mh$ = XCreateRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XCreateRegion");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDefaultString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDefaultString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static FunctionDescriptor XDefaultString$descriptor() {
        return XDefaultString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static MethodHandle XDefaultString$handle() {
        return XDefaultString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static MemorySegment XDefaultString$address() {
        return XDefaultString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *XDefaultString()
     * }
     */
    public static MemorySegment XDefaultString() {
        var mh$ = XDefaultString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDefaultString");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDeleteContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDeleteContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static FunctionDescriptor XDeleteContext$descriptor() {
        return XDeleteContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static MethodHandle XDeleteContext$handle() {
        return XDeleteContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static MemorySegment XDeleteContext$address() {
        return XDeleteContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDeleteContext(Display *, XID, XContext)
     * }
     */
    public static int XDeleteContext(MemorySegment x0, long x1, int x2) {
        var mh$ = XDeleteContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDeleteContext", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XDestroyRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XDestroyRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static FunctionDescriptor XDestroyRegion$descriptor() {
        return XDestroyRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static MethodHandle XDestroyRegion$handle() {
        return XDestroyRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static MemorySegment XDestroyRegion$address() {
        return XDestroyRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XDestroyRegion(Region)
     * }
     */
    public static int XDestroyRegion(MemorySegment x0) {
        var mh$ = XDestroyRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XDestroyRegion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEmptyRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEmptyRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static FunctionDescriptor XEmptyRegion$descriptor() {
        return XEmptyRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static MethodHandle XEmptyRegion$handle() {
        return XEmptyRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static MemorySegment XEmptyRegion$address() {
        return XEmptyRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XEmptyRegion(Region)
     * }
     */
    public static int XEmptyRegion(MemorySegment x0) {
        var mh$ = XEmptyRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEmptyRegion", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XEqualRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XEqualRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static FunctionDescriptor XEqualRegion$descriptor() {
        return XEqualRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static MethodHandle XEqualRegion$handle() {
        return XEqualRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static MemorySegment XEqualRegion$address() {
        return XEqualRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XEqualRegion(Region, Region)
     * }
     */
    public static int XEqualRegion(MemorySegment x0, MemorySegment x1) {
        var mh$ = XEqualRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XEqualRegion", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XFindContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XFindContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static FunctionDescriptor XFindContext$descriptor() {
        return XFindContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static MethodHandle XFindContext$handle() {
        return XFindContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static MemorySegment XFindContext$address() {
        return XFindContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XFindContext(Display *, XID, XContext, XPointer *)
     * }
     */
    public static int XFindContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XFindContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XFindContext", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetClassHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static FunctionDescriptor XGetClassHint$descriptor() {
        return XGetClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MethodHandle XGetClassHint$handle() {
        return XGetClassHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MemorySegment XGetClassHint$address() {
        return XGetClassHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static int XGetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetClassHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetIconSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetIconSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static FunctionDescriptor XGetIconSizes$descriptor() {
        return XGetIconSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static MethodHandle XGetIconSizes$handle() {
        return XGetIconSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static MemorySegment XGetIconSizes$address() {
        return XGetIconSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetIconSizes(Display *, Window, XIconSize **, int *)
     * }
     */
    public static int XGetIconSizes(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetIconSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetIconSizes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetNormalHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XGetNormalHints$descriptor() {
        return XGetNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XGetNormalHints$handle() {
        return XGetNormalHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MemorySegment XGetNormalHints$address() {
        return XGetNormalHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XGetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetNormalHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetRGBColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetRGBColormaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static FunctionDescriptor XGetRGBColormaps$descriptor() {
        return XGetRGBColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static MethodHandle XGetRGBColormaps$handle() {
        return XGetRGBColormaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static MemorySegment XGetRGBColormaps$address() {
        return XGetRGBColormaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom)
     * }
     */
    public static int XGetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetRGBColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetRGBColormaps", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetSizeHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XGetSizeHints$descriptor() {
        return XGetSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XGetSizeHints$handle() {
        return XGetSizeHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MemorySegment XGetSizeHints$address() {
        return XGetSizeHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static int XGetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetSizeHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetStandardColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static FunctionDescriptor XGetStandardColormap$descriptor() {
        return XGetStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MethodHandle XGetStandardColormap$handle() {
        return XGetStandardColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MemorySegment XGetStandardColormap$address() {
        return XGetStandardColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static int XGetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetStandardColormap", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static FunctionDescriptor XGetTextProperty$descriptor() {
        return XGetTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MethodHandle XGetTextProperty$handle() {
        return XGetTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MemorySegment XGetTextProperty$address() {
        return XGetTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static int XGetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XGetTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetTextProperty", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetVisualInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetVisualInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static FunctionDescriptor XGetVisualInfo$descriptor() {
        return XGetVisualInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static MethodHandle XGetVisualInfo$handle() {
        return XGetVisualInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static MemorySegment XGetVisualInfo$address() {
        return XGetVisualInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XVisualInfo *XGetVisualInfo(Display *, long, XVisualInfo *, int *)
     * }
     */
    public static MemorySegment XGetVisualInfo(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetVisualInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetVisualInfo", x0, x1, x2, x3);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMClientMachine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMClientMachine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMClientMachine$descriptor() {
        return XGetWMClientMachine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMClientMachine$handle() {
        return XGetWMClientMachine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XGetWMClientMachine$address() {
        return XGetWMClientMachine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMClientMachine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMClientMachine", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static FunctionDescriptor XGetWMHints$descriptor() {
        return XGetWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static MethodHandle XGetWMHints$handle() {
        return XGetWMHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static MemorySegment XGetWMHints$address() {
        return XGetWMHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern XWMHints *XGetWMHints(Display *, Window)
     * }
     */
    public static MemorySegment XGetWMHints(MemorySegment x0, long x1) {
        var mh$ = XGetWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMHints", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMIconName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMIconName$descriptor() {
        return XGetWMIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMIconName$handle() {
        return XGetWMIconName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XGetWMIconName$address() {
        return XGetWMIconName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMIconName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XGetWMName$descriptor() {
        return XGetWMName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XGetWMName$handle() {
        return XGetWMName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XGetWMName$address() {
        return XGetWMName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static int XGetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetWMName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMName", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMNormalHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static FunctionDescriptor XGetWMNormalHints$descriptor() {
        return XGetWMNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static MethodHandle XGetWMNormalHints$handle() {
        return XGetWMNormalHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static MemorySegment XGetWMNormalHints$address() {
        return XGetWMNormalHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMNormalHints(Display *, Window, XSizeHints *, long *)
     * }
     */
    public static int XGetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = XGetWMNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMNormalHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetWMSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetWMSizeHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static FunctionDescriptor XGetWMSizeHints$descriptor() {
        return XGetWMSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static MethodHandle XGetWMSizeHints$handle() {
        return XGetWMSizeHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static MemorySegment XGetWMSizeHints$address() {
        return XGetWMSizeHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetWMSizeHints(Display *, Window, XSizeHints *, long *, Atom)
     * }
     */
    public static int XGetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4) {
        var mh$ = XGetWMSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetWMSizeHints", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XGetZoomHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XGetZoomHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XGetZoomHints$descriptor() {
        return XGetZoomHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XGetZoomHints$handle() {
        return XGetZoomHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MemorySegment XGetZoomHints$address() {
        return XGetZoomHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XGetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XGetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XGetZoomHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XGetZoomHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XIntersectRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XIntersectRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XIntersectRegion$descriptor() {
        return XIntersectRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XIntersectRegion$handle() {
        return XIntersectRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static MemorySegment XIntersectRegion$address() {
        return XIntersectRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XIntersectRegion(Region, Region, Region)
     * }
     */
    public static int XIntersectRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XIntersectRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XIntersectRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XConvertCase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XConvertCase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static FunctionDescriptor XConvertCase$descriptor() {
        return XConvertCase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static MethodHandle XConvertCase$handle() {
        return XConvertCase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static MemorySegment XConvertCase$address() {
        return XConvertCase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XConvertCase(KeySym, KeySym *, KeySym *)
     * }
     */
    public static void XConvertCase(long x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XConvertCase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XConvertCase", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XLookupString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XLookupString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static FunctionDescriptor XLookupString$descriptor() {
        return XLookupString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static MethodHandle XLookupString$handle() {
        return XLookupString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static MemorySegment XLookupString$address() {
        return XLookupString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *)
     * }
     */
    public static int XLookupString(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = XLookupString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XLookupString", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XMatchVisualInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XMatchVisualInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static FunctionDescriptor XMatchVisualInfo$descriptor() {
        return XMatchVisualInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static MethodHandle XMatchVisualInfo$handle() {
        return XMatchVisualInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static MemorySegment XMatchVisualInfo$address() {
        return XMatchVisualInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *)
     * }
     */
    public static int XMatchVisualInfo(MemorySegment x0, int x1, int x2, int x3, MemorySegment x4) {
        var mh$ = XMatchVisualInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XMatchVisualInfo", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XOffsetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XOffsetRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XOffsetRegion$descriptor() {
        return XOffsetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static MethodHandle XOffsetRegion$handle() {
        return XOffsetRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static MemorySegment XOffsetRegion$address() {
        return XOffsetRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XOffsetRegion(Region, int, int)
     * }
     */
    public static int XOffsetRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XOffsetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XOffsetRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPointInRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPointInRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XPointInRegion$descriptor() {
        return XPointInRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static MethodHandle XPointInRegion$handle() {
        return XPointInRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static MemorySegment XPointInRegion$address() {
        return XPointInRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XPointInRegion(Region, int, int)
     * }
     */
    public static int XPointInRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPointInRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPointInRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XPolygonRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XPolygonRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static FunctionDescriptor XPolygonRegion$descriptor() {
        return XPolygonRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static MethodHandle XPolygonRegion$handle() {
        return XPolygonRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static MemorySegment XPolygonRegion$address() {
        return XPolygonRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern Region XPolygonRegion(XPoint *, int, int)
     * }
     */
    public static MemorySegment XPolygonRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XPolygonRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XPolygonRegion", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XRectInRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XRectInRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static FunctionDescriptor XRectInRegion$descriptor() {
        return XRectInRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static MethodHandle XRectInRegion$handle() {
        return XRectInRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static MemorySegment XRectInRegion$address() {
        return XRectInRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XRectInRegion(Region, int, int, unsigned int, unsigned int)
     * }
     */
    public static int XRectInRegion(MemorySegment x0, int x1, int x2, int x3, int x4) {
        var mh$ = XRectInRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XRectInRegion", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSaveContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSaveContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static FunctionDescriptor XSaveContext$descriptor() {
        return XSaveContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static MethodHandle XSaveContext$handle() {
        return XSaveContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static MemorySegment XSaveContext$address() {
        return XSaveContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSaveContext(Display *, XID, XContext, const char *)
     * }
     */
    public static int XSaveContext(MemorySegment x0, long x1, int x2, MemorySegment x3) {
        var mh$ = XSaveContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSaveContext", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetClassHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetClassHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static FunctionDescriptor XSetClassHint$descriptor() {
        return XSetClassHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MethodHandle XSetClassHint$handle() {
        return XSetClassHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static MemorySegment XSetClassHint$address() {
        return XSetClassHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetClassHint(Display *, Window, XClassHint *)
     * }
     */
    public static int XSetClassHint(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetClassHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetClassHint", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetIconSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetIconSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static FunctionDescriptor XSetIconSizes$descriptor() {
        return XSetIconSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static MethodHandle XSetIconSizes$handle() {
        return XSetIconSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static MemorySegment XSetIconSizes$address() {
        return XSetIconSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetIconSizes(Display *, Window, XIconSize *, int)
     * }
     */
    public static int XSetIconSizes(MemorySegment x0, long x1, MemorySegment x2, int x3) {
        var mh$ = XSetIconSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetIconSizes", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetNormalHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetNormalHints$descriptor() {
        return XSetNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetNormalHints$handle() {
        return XSetNormalHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MemorySegment XSetNormalHints$address() {
        return XSetNormalHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XSetNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetNormalHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetRGBColormaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetRGBColormaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static FunctionDescriptor XSetRGBColormaps$descriptor() {
        return XSetRGBColormaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static MethodHandle XSetRGBColormaps$handle() {
        return XSetRGBColormaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static MemorySegment XSetRGBColormaps$address() {
        return XSetRGBColormaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom)
     * }
     */
    public static void XSetRGBColormaps(MemorySegment x0, long x1, MemorySegment x2, int x3, long x4) {
        var mh$ = XSetRGBColormaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetRGBColormaps", x0, x1, x2, x3, x4);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetSizeHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XSetSizeHints$descriptor() {
        return XSetSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XSetSizeHints$handle() {
        return XSetSizeHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MemorySegment XSetSizeHints$address() {
        return XSetSizeHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static int XSetSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetSizeHints", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStandardProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetStandardProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetStandardProperties$descriptor() {
        return XSetStandardProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static MethodHandle XSetStandardProperties$handle() {
        return XSetStandardProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static MemorySegment XSetStandardProperties$address() {
        return XSetStandardProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *)
     * }
     */
    public static int XSetStandardProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, long x4, MemorySegment x5, int x6, MemorySegment x7) {
        var mh$ = XSetStandardProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStandardProperties", x0, x1, x2, x3, x4, x5, x6, x7);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static FunctionDescriptor XSetTextProperty$descriptor() {
        return XSetTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MethodHandle XSetTextProperty$handle() {
        return XSetTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static MemorySegment XSetTextProperty$address() {
        return XSetTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetTextProperty(Display *, Window, XTextProperty *, Atom)
     * }
     */
    public static void XSetTextProperty(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetTextProperty", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMClientMachine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMClientMachine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMClientMachine$descriptor() {
        return XSetWMClientMachine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMClientMachine$handle() {
        return XSetWMClientMachine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XSetWMClientMachine$address() {
        return XSetWMClientMachine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMClientMachine(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMClientMachine(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMClientMachine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMClientMachine", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static FunctionDescriptor XSetWMHints$descriptor() {
        return XSetWMHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static MethodHandle XSetWMHints$handle() {
        return XSetWMHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static MemorySegment XSetWMHints$address() {
        return XSetWMHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetWMHints(Display *, Window, XWMHints *)
     * }
     */
    public static int XSetWMHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMIconName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMIconName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMIconName$descriptor() {
        return XSetWMIconName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMIconName$handle() {
        return XSetWMIconName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XSetWMIconName$address() {
        return XSetWMIconName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMIconName(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMIconName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMIconName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMIconName", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XSetWMName$descriptor() {
        return XSetWMName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MethodHandle XSetWMName$handle() {
        return XSetWMName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static MemorySegment XSetWMName$address() {
        return XSetWMName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMName(Display *, Window, XTextProperty *)
     * }
     */
    public static void XSetWMName(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMName", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMNormalHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMNormalHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetWMNormalHints$descriptor() {
        return XSetWMNormalHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetWMNormalHints$handle() {
        return XSetWMNormalHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MemorySegment XSetWMNormalHints$address() {
        return XSetWMNormalHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMNormalHints(Display *, Window, XSizeHints *)
     * }
     */
    public static void XSetWMNormalHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetWMNormalHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMNormalHints", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor XSetWMProperties$descriptor() {
        return XSetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle XSetWMProperties$handle() {
        return XSetWMProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MemorySegment XSetWMProperties$address() {
        return XSetWMProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void XSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XSetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbSetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbSetWMProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor XmbSetWMProperties$descriptor() {
        return XmbSetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle XmbSetWMProperties$handle() {
        return XmbSetWMProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MemorySegment XmbSetWMProperties$address() {
        return XmbSetWMProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void XmbSetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = XmbSetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbSetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8SetWMProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8SetWMProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static FunctionDescriptor Xutf8SetWMProperties$descriptor() {
        return Xutf8SetWMProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MethodHandle Xutf8SetWMProperties$handle() {
        return Xutf8SetWMProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static MemorySegment Xutf8SetWMProperties$address() {
        return Xutf8SetWMProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void Xutf8SetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *)
     * }
     */
    public static void Xutf8SetWMProperties(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3, MemorySegment x4, int x5, MemorySegment x6, MemorySegment x7, MemorySegment x8) {
        var mh$ = Xutf8SetWMProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8SetWMProperties", x0, x1, x2, x3, x4, x5, x6, x7, x8);
            }
            mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetWMSizeHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetWMSizeHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static FunctionDescriptor XSetWMSizeHints$descriptor() {
        return XSetWMSizeHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MethodHandle XSetWMSizeHints$handle() {
        return XSetWMSizeHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static MemorySegment XSetWMSizeHints$address() {
        return XSetWMSizeHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom)
     * }
     */
    public static void XSetWMSizeHints(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetWMSizeHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetWMSizeHints", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static FunctionDescriptor XSetRegion$descriptor() {
        return XSetRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static MethodHandle XSetRegion$handle() {
        return XSetRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static MemorySegment XSetRegion$address() {
        return XSetRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetRegion(Display *, GC, Region)
     * }
     */
    public static int XSetRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSetRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetStandardColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER,
            glxext_h.C_LONG
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetStandardColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static FunctionDescriptor XSetStandardColormap$descriptor() {
        return XSetStandardColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MethodHandle XSetStandardColormap$handle() {
        return XSetStandardColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static MemorySegment XSetStandardColormap$address() {
        return XSetStandardColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom)
     * }
     */
    public static void XSetStandardColormap(MemorySegment x0, long x1, MemorySegment x2, long x3) {
        var mh$ = XSetStandardColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetStandardColormap", x0, x1, x2, x3);
            }
            mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSetZoomHints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_LONG,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSetZoomHints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static FunctionDescriptor XSetZoomHints$descriptor() {
        return XSetZoomHints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MethodHandle XSetZoomHints$handle() {
        return XSetZoomHints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static MemorySegment XSetZoomHints$address() {
        return XSetZoomHints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSetZoomHints(Display *, Window, XSizeHints *)
     * }
     */
    public static int XSetZoomHints(MemorySegment x0, long x1, MemorySegment x2) {
        var mh$ = XSetZoomHints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSetZoomHints", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XShrinkRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XShrinkRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static FunctionDescriptor XShrinkRegion$descriptor() {
        return XShrinkRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static MethodHandle XShrinkRegion$handle() {
        return XShrinkRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static MemorySegment XShrinkRegion$address() {
        return XShrinkRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XShrinkRegion(Region, int, int)
     * }
     */
    public static int XShrinkRegion(MemorySegment x0, int x1, int x2) {
        var mh$ = XShrinkRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XShrinkRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XStringListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XStringListToTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static FunctionDescriptor XStringListToTextProperty$descriptor() {
        return XStringListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static MethodHandle XStringListToTextProperty$handle() {
        return XStringListToTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static MemorySegment XStringListToTextProperty$address() {
        return XStringListToTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XStringListToTextProperty(char **, int, XTextProperty *)
     * }
     */
    public static int XStringListToTextProperty(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = XStringListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XStringListToTextProperty", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XSubtractRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XSubtractRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XSubtractRegion$descriptor() {
        return XSubtractRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XSubtractRegion$handle() {
        return XSubtractRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static MemorySegment XSubtractRegion$address() {
        return XSubtractRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XSubtractRegion(Region, Region, Region)
     * }
     */
    public static int XSubtractRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XSubtractRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XSubtractRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbTextListToTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor XmbTextListToTextProperty$descriptor() {
        return XmbTextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle XmbTextListToTextProperty$handle() {
        return XmbTextListToTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MemorySegment XmbTextListToTextProperty$address() {
        return XmbTextListToTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbTextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int XmbTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XmbTextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcTextListToTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor XwcTextListToTextProperty$descriptor() {
        return XwcTextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle XwcTextListToTextProperty$handle() {
        return XwcTextListToTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MemorySegment XwcTextListToTextProperty$address() {
        return XwcTextListToTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcTextListToTextProperty(Display *display, wchar_t **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int XwcTextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = XwcTextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextListToTextProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8TextListToTextProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static FunctionDescriptor Xutf8TextListToTextProperty$descriptor() {
        return Xutf8TextListToTextProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MethodHandle Xutf8TextListToTextProperty$handle() {
        return Xutf8TextListToTextProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static MemorySegment Xutf8TextListToTextProperty$address() {
        return Xutf8TextListToTextProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8TextListToTextProperty(Display *display, char **list, int count, XICCEncodingStyle style, XTextProperty *text_prop_return)
     * }
     */
    public static int Xutf8TextListToTextProperty(MemorySegment display, MemorySegment list, int count, int style, MemorySegment text_prop_return) {
        var mh$ = Xutf8TextListToTextProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextListToTextProperty", display, list, count, style, text_prop_return);
            }
            return (int)mh$.invokeExact(display, list, count, style, text_prop_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcFreeStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcFreeStringList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static FunctionDescriptor XwcFreeStringList$descriptor() {
        return XwcFreeStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static MethodHandle XwcFreeStringList$handle() {
        return XwcFreeStringList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static MemorySegment XwcFreeStringList$address() {
        return XwcFreeStringList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void XwcFreeStringList(wchar_t **list)
     * }
     */
    public static void XwcFreeStringList(MemorySegment list) {
        var mh$ = XwcFreeStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcFreeStringList", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XTextPropertyToStringList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XTextPropertyToStringList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static FunctionDescriptor XTextPropertyToStringList$descriptor() {
        return XTextPropertyToStringList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static MethodHandle XTextPropertyToStringList$handle() {
        return XTextPropertyToStringList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static MemorySegment XTextPropertyToStringList$address() {
        return XTextPropertyToStringList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XTextPropertyToStringList(XTextProperty *, char ***, int *)
     * }
     */
    public static int XTextPropertyToStringList(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XTextPropertyToStringList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XTextPropertyToStringList", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XmbTextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XmbTextPropertyToTextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor XmbTextPropertyToTextList$descriptor() {
        return XmbTextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MethodHandle XmbTextPropertyToTextList$handle() {
        return XmbTextPropertyToTextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MemorySegment XmbTextPropertyToTextList$address() {
        return XmbTextPropertyToTextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XmbTextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static int XmbTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XmbTextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XmbTextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XwcTextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XwcTextPropertyToTextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor XwcTextPropertyToTextList$descriptor() {
        return XwcTextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static MethodHandle XwcTextPropertyToTextList$handle() {
        return XwcTextPropertyToTextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static MemorySegment XwcTextPropertyToTextList$address() {
        return XwcTextPropertyToTextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XwcTextPropertyToTextList(Display *display, const XTextProperty *text_prop, wchar_t ***list_return, int *count_return)
     * }
     */
    public static int XwcTextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = XwcTextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XwcTextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Xutf8TextPropertyToTextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("Xutf8TextPropertyToTextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static FunctionDescriptor Xutf8TextPropertyToTextList$descriptor() {
        return Xutf8TextPropertyToTextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MethodHandle Xutf8TextPropertyToTextList$handle() {
        return Xutf8TextPropertyToTextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static MemorySegment Xutf8TextPropertyToTextList$address() {
        return Xutf8TextPropertyToTextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int Xutf8TextPropertyToTextList(Display *display, const XTextProperty *text_prop, char ***list_return, int *count_return)
     * }
     */
    public static int Xutf8TextPropertyToTextList(MemorySegment display, MemorySegment text_prop, MemorySegment list_return, MemorySegment count_return) {
        var mh$ = Xutf8TextPropertyToTextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Xutf8TextPropertyToTextList", display, text_prop, list_return, count_return);
            }
            return (int)mh$.invokeExact(display, text_prop, list_return, count_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnionRectWithRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnionRectWithRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static FunctionDescriptor XUnionRectWithRegion$descriptor() {
        return XUnionRectWithRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static MethodHandle XUnionRectWithRegion$handle() {
        return XUnionRectWithRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static MemorySegment XUnionRectWithRegion$address() {
        return XUnionRectWithRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnionRectWithRegion(XRectangle *, Region, Region)
     * }
     */
    public static int XUnionRectWithRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRectWithRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnionRectWithRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XUnionRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XUnionRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XUnionRegion$descriptor() {
        return XUnionRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XUnionRegion$handle() {
        return XUnionRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static MemorySegment XUnionRegion$address() {
        return XUnionRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XUnionRegion(Region, Region, Region)
     * }
     */
    public static int XUnionRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XUnionRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XUnionRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XWMGeometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XWMGeometry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static FunctionDescriptor XWMGeometry$descriptor() {
        return XWMGeometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static MethodHandle XWMGeometry$handle() {
        return XWMGeometry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static MemorySegment XWMGeometry$address() {
        return XWMGeometry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *)
     * }
     */
    public static int XWMGeometry(MemorySegment x0, int x1, MemorySegment x2, MemorySegment x3, int x4, MemorySegment x5, MemorySegment x6, MemorySegment x7, MemorySegment x8, MemorySegment x9, MemorySegment x10) {
        var mh$ = XWMGeometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XWMGeometry", x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XXorRegion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("XXorRegion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static FunctionDescriptor XXorRegion$descriptor() {
        return XXorRegion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static MethodHandle XXorRegion$handle() {
        return XXorRegion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static MemorySegment XXorRegion$address() {
        return XXorRegion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int XXorRegion(Region, Region, Region)
     * }
     */
    public static int XXorRegion(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = XXorRegion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XXorRegion", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLenum
     * }
     */
    public static final OfInt GLenum = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char GLboolean
     * }
     */
    public static final OfByte GLboolean = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLbitfield
     * }
     */
    public static final OfInt GLbitfield = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char GLbyte
     * }
     */
    public static final OfByte GLbyte = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short GLshort
     * }
     */
    public static final OfShort GLshort = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int GLint
     * }
     */
    public static final OfInt GLint = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char GLubyte
     * }
     */
    public static final OfByte GLubyte = glxext_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short GLushort
     * }
     */
    public static final OfShort GLushort = glxext_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int GLuint
     * }
     */
    public static final OfInt GLuint = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int GLsizei
     * }
     */
    public static final OfInt GLsizei = glxext_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float GLfloat
     * }
     */
    public static final OfFloat GLfloat = glxext_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef float GLclampf
     * }
     */
    public static final OfFloat GLclampf = glxext_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double GLdouble
     * }
     */
    public static final OfDouble GLdouble = glxext_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double GLclampd
     * }
     */
    public static final OfDouble GLclampd = glxext_h.C_DOUBLE;

    private static class glClearIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClearIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClearIndex(GLfloat c)
     * }
     */
    public static FunctionDescriptor glClearIndex$descriptor() {
        return glClearIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClearIndex(GLfloat c)
     * }
     */
    public static MethodHandle glClearIndex$handle() {
        return glClearIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClearIndex(GLfloat c)
     * }
     */
    public static MemorySegment glClearIndex$address() {
        return glClearIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClearIndex(GLfloat c)
     * }
     */
    public static void glClearIndex(float c) {
        var mh$ = glClearIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearIndex", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClearColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static FunctionDescriptor glClearColor$descriptor() {
        return glClearColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MethodHandle glClearColor$handle() {
        return glClearColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MemorySegment glClearColor$address() {
        return glClearColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static void glClearColor(float red, float green, float blue, float alpha) {
        var mh$ = glClearColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearColor", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClear(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glClear$descriptor() {
        return glClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClear(GLbitfield mask)
     * }
     */
    public static MethodHandle glClear$handle() {
        return glClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClear(GLbitfield mask)
     * }
     */
    public static MemorySegment glClear$address() {
        return glClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClear(GLbitfield mask)
     * }
     */
    public static void glClear(int mask) {
        var mh$ = glClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClear", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glIndexMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glIndexMask(GLuint mask)
     * }
     */
    public static FunctionDescriptor glIndexMask$descriptor() {
        return glIndexMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glIndexMask(GLuint mask)
     * }
     */
    public static MethodHandle glIndexMask$handle() {
        return glIndexMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glIndexMask(GLuint mask)
     * }
     */
    public static MemorySegment glIndexMask$address() {
        return glIndexMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glIndexMask(GLuint mask)
     * }
     */
    public static void glIndexMask(int mask) {
        var mh$ = glIndexMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexMask", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_CHAR,
            glxext_h.C_CHAR,
            glxext_h.C_CHAR,
            glxext_h.C_CHAR
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glColorMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static FunctionDescriptor glColorMask$descriptor() {
        return glColorMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static MethodHandle glColorMask$handle() {
        return glColorMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static MemorySegment glColorMask$address() {
        return glColorMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static void glColorMask(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColorMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorMask", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAlphaFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glAlphaFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static FunctionDescriptor glAlphaFunc$descriptor() {
        return glAlphaFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static MethodHandle glAlphaFunc$handle() {
        return glAlphaFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static MemorySegment glAlphaFunc$address() {
        return glAlphaFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static void glAlphaFunc(int func, float ref) {
        var mh$ = glAlphaFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAlphaFunc", func, ref);
            }
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glBlendFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static FunctionDescriptor glBlendFunc$descriptor() {
        return glBlendFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static MethodHandle glBlendFunc$handle() {
        return glBlendFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static MemorySegment glBlendFunc$address() {
        return glBlendFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static void glBlendFunc(int sfactor, int dfactor) {
        var mh$ = glBlendFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendFunc", sfactor, dfactor);
            }
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLogicOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLogicOp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLogicOp(GLenum opcode)
     * }
     */
    public static FunctionDescriptor glLogicOp$descriptor() {
        return glLogicOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLogicOp(GLenum opcode)
     * }
     */
    public static MethodHandle glLogicOp$handle() {
        return glLogicOp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLogicOp(GLenum opcode)
     * }
     */
    public static MemorySegment glLogicOp$address() {
        return glLogicOp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLogicOp(GLenum opcode)
     * }
     */
    public static void glLogicOp(int opcode) {
        var mh$ = glLogicOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLogicOp", opcode);
            }
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCullFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glCullFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glCullFace(GLenum mode)
     * }
     */
    public static FunctionDescriptor glCullFace$descriptor() {
        return glCullFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glCullFace(GLenum mode)
     * }
     */
    public static MethodHandle glCullFace$handle() {
        return glCullFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glCullFace(GLenum mode)
     * }
     */
    public static MemorySegment glCullFace$address() {
        return glCullFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glCullFace(GLenum mode)
     * }
     */
    public static void glCullFace(int mode) {
        var mh$ = glCullFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCullFace", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFrontFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glFrontFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glFrontFace(GLenum mode)
     * }
     */
    public static FunctionDescriptor glFrontFace$descriptor() {
        return glFrontFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glFrontFace(GLenum mode)
     * }
     */
    public static MethodHandle glFrontFace$handle() {
        return glFrontFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glFrontFace(GLenum mode)
     * }
     */
    public static MemorySegment glFrontFace$address() {
        return glFrontFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glFrontFace(GLenum mode)
     * }
     */
    public static void glFrontFace(int mode) {
        var mh$ = glFrontFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFrontFace", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPointSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPointSize(GLfloat size)
     * }
     */
    public static FunctionDescriptor glPointSize$descriptor() {
        return glPointSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPointSize(GLfloat size)
     * }
     */
    public static MethodHandle glPointSize$handle() {
        return glPointSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPointSize(GLfloat size)
     * }
     */
    public static MemorySegment glPointSize$address() {
        return glPointSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPointSize(GLfloat size)
     * }
     */
    public static void glPointSize(float size) {
        var mh$ = glPointSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointSize", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLineWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLineWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLineWidth(GLfloat width)
     * }
     */
    public static FunctionDescriptor glLineWidth$descriptor() {
        return glLineWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLineWidth(GLfloat width)
     * }
     */
    public static MethodHandle glLineWidth$handle() {
        return glLineWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLineWidth(GLfloat width)
     * }
     */
    public static MemorySegment glLineWidth$address() {
        return glLineWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLineWidth(GLfloat width)
     * }
     */
    public static void glLineWidth(float width) {
        var mh$ = glLineWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLineWidth", width);
            }
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLineStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_SHORT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLineStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static FunctionDescriptor glLineStipple$descriptor() {
        return glLineStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static MethodHandle glLineStipple$handle() {
        return glLineStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static MemorySegment glLineStipple$address() {
        return glLineStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static void glLineStipple(int factor, short pattern) {
        var mh$ = glLineStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLineStipple", factor, pattern);
            }
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPolygonMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static FunctionDescriptor glPolygonMode$descriptor() {
        return glPolygonMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static MethodHandle glPolygonMode$handle() {
        return glPolygonMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static MemorySegment glPolygonMode$address() {
        return glPolygonMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static void glPolygonMode(int face, int mode) {
        var mh$ = glPolygonMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonMode", face, mode);
            }
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPolygonOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static FunctionDescriptor glPolygonOffset$descriptor() {
        return glPolygonOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static MethodHandle glPolygonOffset$handle() {
        return glPolygonOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static MemorySegment glPolygonOffset$address() {
        return glPolygonOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static void glPolygonOffset(float factor, float units) {
        var mh$ = glPolygonOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonOffset", factor, units);
            }
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPolygonStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static FunctionDescriptor glPolygonStipple$descriptor() {
        return glPolygonStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static MethodHandle glPolygonStipple$handle() {
        return glPolygonStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static MemorySegment glPolygonStipple$address() {
        return glPolygonStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static void glPolygonStipple(MemorySegment mask) {
        var mh$ = glPolygonStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonStipple", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPolygonStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetPolygonStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static FunctionDescriptor glGetPolygonStipple$descriptor() {
        return glGetPolygonStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static MethodHandle glGetPolygonStipple$handle() {
        return glGetPolygonStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static MemorySegment glGetPolygonStipple$address() {
        return glGetPolygonStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static void glGetPolygonStipple(MemorySegment mask) {
        var mh$ = glGetPolygonStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPolygonStipple", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEdgeFlag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_CHAR
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEdgeFlag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEdgeFlag(GLboolean flag)
     * }
     */
    public static FunctionDescriptor glEdgeFlag$descriptor() {
        return glEdgeFlag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEdgeFlag(GLboolean flag)
     * }
     */
    public static MethodHandle glEdgeFlag$handle() {
        return glEdgeFlag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEdgeFlag(GLboolean flag)
     * }
     */
    public static MemorySegment glEdgeFlag$address() {
        return glEdgeFlag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEdgeFlag(GLboolean flag)
     * }
     */
    public static void glEdgeFlag(byte flag) {
        var mh$ = glEdgeFlag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEdgeFlag", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEdgeFlagv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEdgeFlagv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static FunctionDescriptor glEdgeFlagv$descriptor() {
        return glEdgeFlagv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static MethodHandle glEdgeFlagv$handle() {
        return glEdgeFlagv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static MemorySegment glEdgeFlagv$address() {
        return glEdgeFlagv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static void glEdgeFlagv(MemorySegment flag) {
        var mh$ = glEdgeFlagv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEdgeFlagv", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScissor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glScissor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glScissor$descriptor() {
        return glScissor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glScissor$handle() {
        return glScissor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glScissor$address() {
        return glScissor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glScissor(int x, int y, int width, int height) {
        var mh$ = glScissor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScissor", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClipPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClipPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static FunctionDescriptor glClipPlane$descriptor() {
        return glClipPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static MethodHandle glClipPlane$handle() {
        return glClipPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static MemorySegment glClipPlane$address() {
        return glClipPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static void glClipPlane(int plane, MemorySegment equation) {
        var mh$ = glClipPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClipPlane", plane, equation);
            }
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetClipPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetClipPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static FunctionDescriptor glGetClipPlane$descriptor() {
        return glGetClipPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static MethodHandle glGetClipPlane$handle() {
        return glGetClipPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static MemorySegment glGetClipPlane$address() {
        return glGetClipPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static void glGetClipPlane(int plane, MemorySegment equation) {
        var mh$ = glGetClipPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetClipPlane", plane, equation);
            }
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDrawBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDrawBuffer(GLenum mode)
     * }
     */
    public static FunctionDescriptor glDrawBuffer$descriptor() {
        return glDrawBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDrawBuffer(GLenum mode)
     * }
     */
    public static MethodHandle glDrawBuffer$handle() {
        return glDrawBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDrawBuffer(GLenum mode)
     * }
     */
    public static MemorySegment glDrawBuffer$address() {
        return glDrawBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDrawBuffer(GLenum mode)
     * }
     */
    public static void glDrawBuffer(int mode) {
        var mh$ = glDrawBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawBuffer", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glReadBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glReadBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glReadBuffer(GLenum mode)
     * }
     */
    public static FunctionDescriptor glReadBuffer$descriptor() {
        return glReadBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glReadBuffer(GLenum mode)
     * }
     */
    public static MethodHandle glReadBuffer$handle() {
        return glReadBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glReadBuffer(GLenum mode)
     * }
     */
    public static MemorySegment glReadBuffer$address() {
        return glReadBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glReadBuffer(GLenum mode)
     * }
     */
    public static void glReadBuffer(int mode) {
        var mh$ = glReadBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glReadBuffer", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEnable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEnable(GLenum cap)
     * }
     */
    public static FunctionDescriptor glEnable$descriptor() {
        return glEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEnable(GLenum cap)
     * }
     */
    public static MethodHandle glEnable$handle() {
        return glEnable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEnable(GLenum cap)
     * }
     */
    public static MemorySegment glEnable$address() {
        return glEnable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEnable(GLenum cap)
     * }
     */
    public static void glEnable(int cap) {
        var mh$ = glEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnable", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDisable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDisable(GLenum cap)
     * }
     */
    public static FunctionDescriptor glDisable$descriptor() {
        return glDisable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDisable(GLenum cap)
     * }
     */
    public static MethodHandle glDisable$handle() {
        return glDisable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDisable(GLenum cap)
     * }
     */
    public static MemorySegment glDisable$address() {
        return glDisable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDisable(GLenum cap)
     * }
     */
    public static void glDisable(int cap) {
        var mh$ = glDisable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisable", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_CHAR,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glIsEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static FunctionDescriptor glIsEnabled$descriptor() {
        return glIsEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static MethodHandle glIsEnabled$handle() {
        return glIsEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static MemorySegment glIsEnabled$address() {
        return glIsEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static byte glIsEnabled(int cap) {
        var mh$ = glIsEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsEnabled", cap);
            }
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableClientState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEnableClientState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEnableClientState(GLenum cap)
     * }
     */
    public static FunctionDescriptor glEnableClientState$descriptor() {
        return glEnableClientState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEnableClientState(GLenum cap)
     * }
     */
    public static MethodHandle glEnableClientState$handle() {
        return glEnableClientState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEnableClientState(GLenum cap)
     * }
     */
    public static MemorySegment glEnableClientState$address() {
        return glEnableClientState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEnableClientState(GLenum cap)
     * }
     */
    public static void glEnableClientState(int cap) {
        var mh$ = glEnableClientState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableClientState", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableClientState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDisableClientState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDisableClientState(GLenum cap)
     * }
     */
    public static FunctionDescriptor glDisableClientState$descriptor() {
        return glDisableClientState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDisableClientState(GLenum cap)
     * }
     */
    public static MethodHandle glDisableClientState$handle() {
        return glDisableClientState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDisableClientState(GLenum cap)
     * }
     */
    public static MemorySegment glDisableClientState$address() {
        return glDisableClientState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDisableClientState(GLenum cap)
     * }
     */
    public static void glDisableClientState(int cap) {
        var mh$ = glDisableClientState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableClientState", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBooleanv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetBooleanv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static FunctionDescriptor glGetBooleanv$descriptor() {
        return glGetBooleanv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static MethodHandle glGetBooleanv$handle() {
        return glGetBooleanv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static MemorySegment glGetBooleanv$address() {
        return glGetBooleanv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static void glGetBooleanv(int pname, MemorySegment params) {
        var mh$ = glGetBooleanv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBooleanv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetDoublev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetDoublev");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetDoublev$descriptor() {
        return glGetDoublev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static MethodHandle glGetDoublev$handle() {
        return glGetDoublev.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static MemorySegment glGetDoublev$address() {
        return glGetDoublev.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static void glGetDoublev(int pname, MemorySegment params) {
        var mh$ = glGetDoublev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetDoublev", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetFloatv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetFloatv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetFloatv$descriptor() {
        return glGetFloatv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetFloatv$handle() {
        return glGetFloatv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetFloatv$address() {
        return glGetFloatv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetFloatv(int pname, MemorySegment params) {
        var mh$ = glGetFloatv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetFloatv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetIntegerv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetIntegerv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetIntegerv$descriptor() {
        return glGetIntegerv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetIntegerv$handle() {
        return glGetIntegerv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetIntegerv$address() {
        return glGetIntegerv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static void glGetIntegerv(int pname, MemorySegment params) {
        var mh$ = glGetIntegerv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetIntegerv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPushAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPushAttrib(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glPushAttrib$descriptor() {
        return glPushAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPushAttrib(GLbitfield mask)
     * }
     */
    public static MethodHandle glPushAttrib$handle() {
        return glPushAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPushAttrib(GLbitfield mask)
     * }
     */
    public static MemorySegment glPushAttrib$address() {
        return glPushAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPushAttrib(GLbitfield mask)
     * }
     */
    public static void glPushAttrib(int mask) {
        var mh$ = glPushAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushAttrib", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPopAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPopAttrib()
     * }
     */
    public static FunctionDescriptor glPopAttrib$descriptor() {
        return glPopAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPopAttrib()
     * }
     */
    public static MethodHandle glPopAttrib$handle() {
        return glPopAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPopAttrib()
     * }
     */
    public static MemorySegment glPopAttrib$address() {
        return glPopAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPopAttrib()
     * }
     */
    public static void glPopAttrib() {
        var mh$ = glPopAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopAttrib");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushClientAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPushClientAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glPushClientAttrib$descriptor() {
        return glPushClientAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static MethodHandle glPushClientAttrib$handle() {
        return glPushClientAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static MemorySegment glPushClientAttrib$address() {
        return glPushClientAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static void glPushClientAttrib(int mask) {
        var mh$ = glPushClientAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushClientAttrib", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopClientAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPopClientAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPopClientAttrib()
     * }
     */
    public static FunctionDescriptor glPopClientAttrib$descriptor() {
        return glPopClientAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPopClientAttrib()
     * }
     */
    public static MethodHandle glPopClientAttrib$handle() {
        return glPopClientAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPopClientAttrib()
     * }
     */
    public static MemorySegment glPopClientAttrib$address() {
        return glPopClientAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPopClientAttrib()
     * }
     */
    public static void glPopClientAttrib() {
        var mh$ = glPopClientAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopClientAttrib");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glRenderMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLint glRenderMode(GLenum mode)
     * }
     */
    public static FunctionDescriptor glRenderMode$descriptor() {
        return glRenderMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLint glRenderMode(GLenum mode)
     * }
     */
    public static MethodHandle glRenderMode$handle() {
        return glRenderMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLint glRenderMode(GLenum mode)
     * }
     */
    public static MemorySegment glRenderMode$address() {
        return glRenderMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLint glRenderMode(GLenum mode)
     * }
     */
    public static int glRenderMode(int mode) {
        var mh$ = glRenderMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderMode", mode);
            }
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLenum glGetError()
     * }
     */
    public static FunctionDescriptor glGetError$descriptor() {
        return glGetError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLenum glGetError()
     * }
     */
    public static MethodHandle glGetError$handle() {
        return glGetError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLenum glGetError()
     * }
     */
    public static MemorySegment glGetError$address() {
        return glGetError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLenum glGetError()
     * }
     */
    public static int glGetError() {
        var mh$ = glGetError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_POINTER,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const GLubyte *glGetString(GLenum name)
     * }
     */
    public static FunctionDescriptor glGetString$descriptor() {
        return glGetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MethodHandle glGetString$handle() {
        return glGetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MemorySegment glGetString$address() {
        return glGetString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MemorySegment glGetString(int name) {
        var mh$ = glGetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetString", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glFinish()
     * }
     */
    public static FunctionDescriptor glFinish$descriptor() {
        return glFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glFinish()
     * }
     */
    public static MethodHandle glFinish$handle() {
        return glFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glFinish()
     * }
     */
    public static MemorySegment glFinish$address() {
        return glFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glFinish()
     * }
     */
    public static void glFinish() {
        var mh$ = glFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFinish");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glFlush()
     * }
     */
    public static FunctionDescriptor glFlush$descriptor() {
        return glFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glFlush()
     * }
     */
    public static MethodHandle glFlush$handle() {
        return glFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glFlush()
     * }
     */
    public static MemorySegment glFlush$address() {
        return glFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glFlush()
     * }
     */
    public static void glFlush() {
        var mh$ = glFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFlush");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glHint(GLenum target, GLenum mode)
     * }
     */
    public static FunctionDescriptor glHint$descriptor() {
        return glHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glHint(GLenum target, GLenum mode)
     * }
     */
    public static MethodHandle glHint$handle() {
        return glHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glHint(GLenum target, GLenum mode)
     * }
     */
    public static MemorySegment glHint$address() {
        return glHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glHint(GLenum target, GLenum mode)
     * }
     */
    public static void glHint(int target, int mode) {
        var mh$ = glHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glHint", target, mode);
            }
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClearDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClearDepth(GLclampd depth)
     * }
     */
    public static FunctionDescriptor glClearDepth$descriptor() {
        return glClearDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClearDepth(GLclampd depth)
     * }
     */
    public static MethodHandle glClearDepth$handle() {
        return glClearDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClearDepth(GLclampd depth)
     * }
     */
    public static MemorySegment glClearDepth$address() {
        return glClearDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClearDepth(GLclampd depth)
     * }
     */
    public static void glClearDepth(double depth) {
        var mh$ = glClearDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearDepth", depth);
            }
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDepthFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDepthFunc(GLenum func)
     * }
     */
    public static FunctionDescriptor glDepthFunc$descriptor() {
        return glDepthFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDepthFunc(GLenum func)
     * }
     */
    public static MethodHandle glDepthFunc$handle() {
        return glDepthFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDepthFunc(GLenum func)
     * }
     */
    public static MemorySegment glDepthFunc$address() {
        return glDepthFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDepthFunc(GLenum func)
     * }
     */
    public static void glDepthFunc(int func) {
        var mh$ = glDepthFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_CHAR
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDepthMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDepthMask(GLboolean flag)
     * }
     */
    public static FunctionDescriptor glDepthMask$descriptor() {
        return glDepthMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDepthMask(GLboolean flag)
     * }
     */
    public static MethodHandle glDepthMask$handle() {
        return glDepthMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDepthMask(GLboolean flag)
     * }
     */
    public static MemorySegment glDepthMask$address() {
        return glDepthMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDepthMask(GLboolean flag)
     * }
     */
    public static void glDepthMask(byte flag) {
        var mh$ = glDepthMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthMask", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDepthRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDepthRange(GLclampd near_val, GLclampd far_val)
     * }
     */
    public static FunctionDescriptor glDepthRange$descriptor() {
        return glDepthRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDepthRange(GLclampd near_val, GLclampd far_val)
     * }
     */
    public static MethodHandle glDepthRange$handle() {
        return glDepthRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDepthRange(GLclampd near_val, GLclampd far_val)
     * }
     */
    public static MemorySegment glDepthRange$address() {
        return glDepthRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDepthRange(GLclampd near_val, GLclampd far_val)
     * }
     */
    public static void glDepthRange(double near_val, double far_val) {
        var mh$ = glDepthRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthRange", near_val, far_val);
            }
            mh$.invokeExact(near_val, far_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearAccum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glClearAccum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static FunctionDescriptor glClearAccum$descriptor() {
        return glClearAccum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MethodHandle glClearAccum$handle() {
        return glClearAccum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MemorySegment glClearAccum$address() {
        return glClearAccum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static void glClearAccum(float red, float green, float blue, float alpha) {
        var mh$ = glClearAccum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearAccum", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAccum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glAccum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static FunctionDescriptor glAccum$descriptor() {
        return glAccum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static MethodHandle glAccum$handle() {
        return glAccum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static MemorySegment glAccum$address() {
        return glAccum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static void glAccum(int op, float value) {
        var mh$ = glAccum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAccum", op, value);
            }
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMatrixMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glMatrixMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glMatrixMode(GLenum mode)
     * }
     */
    public static FunctionDescriptor glMatrixMode$descriptor() {
        return glMatrixMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glMatrixMode(GLenum mode)
     * }
     */
    public static MethodHandle glMatrixMode$handle() {
        return glMatrixMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glMatrixMode(GLenum mode)
     * }
     */
    public static MemorySegment glMatrixMode$address() {
        return glMatrixMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glMatrixMode(GLenum mode)
     * }
     */
    public static void glMatrixMode(int mode) {
        var mh$ = glMatrixMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMatrixMode", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glOrtho {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glOrtho");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static FunctionDescriptor glOrtho$descriptor() {
        return glOrtho.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static MethodHandle glOrtho$handle() {
        return glOrtho.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static MemorySegment glOrtho$address() {
        return glOrtho.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static void glOrtho(double left, double right, double bottom, double top, double near_val, double far_val) {
        var mh$ = glOrtho.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glOrtho", left, right, bottom, top, near_val, far_val);
            }
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFrustum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glFrustum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static FunctionDescriptor glFrustum$descriptor() {
        return glFrustum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static MethodHandle glFrustum$handle() {
        return glFrustum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static MemorySegment glFrustum$address() {
        return glFrustum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)
     * }
     */
    public static void glFrustum(double left, double right, double bottom, double top, double near_val, double far_val) {
        var mh$ = glFrustum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFrustum", left, right, bottom, top, near_val, far_val);
            }
            mh$.invokeExact(left, right, bottom, top, near_val, far_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glViewport$descriptor() {
        return glViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glViewport$handle() {
        return glViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glViewport$address() {
        return glViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glViewport(int x, int y, int width, int height) {
        var mh$ = glViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glViewport", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPushMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPushMatrix()
     * }
     */
    public static FunctionDescriptor glPushMatrix$descriptor() {
        return glPushMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPushMatrix()
     * }
     */
    public static MethodHandle glPushMatrix$handle() {
        return glPushMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPushMatrix()
     * }
     */
    public static MemorySegment glPushMatrix$address() {
        return glPushMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPushMatrix()
     * }
     */
    public static void glPushMatrix() {
        var mh$ = glPushMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushMatrix");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glPopMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glPopMatrix()
     * }
     */
    public static FunctionDescriptor glPopMatrix$descriptor() {
        return glPopMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glPopMatrix()
     * }
     */
    public static MethodHandle glPopMatrix$handle() {
        return glPopMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glPopMatrix()
     * }
     */
    public static MemorySegment glPopMatrix$address() {
        return glPopMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glPopMatrix()
     * }
     */
    public static void glPopMatrix() {
        var mh$ = glPopMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopMatrix");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLoadIdentity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLoadIdentity()
     * }
     */
    public static FunctionDescriptor glLoadIdentity$descriptor() {
        return glLoadIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLoadIdentity()
     * }
     */
    public static MethodHandle glLoadIdentity$handle() {
        return glLoadIdentity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLoadIdentity()
     * }
     */
    public static MemorySegment glLoadIdentity$address() {
        return glLoadIdentity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLoadIdentity()
     * }
     */
    public static void glLoadIdentity() {
        var mh$ = glLoadIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadIdentity");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLoadMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glLoadMatrixd$descriptor() {
        return glLoadMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glLoadMatrixd$handle() {
        return glLoadMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glLoadMatrixd$address() {
        return glLoadMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static void glLoadMatrixd(MemorySegment m) {
        var mh$ = glLoadMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glLoadMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glLoadMatrixf$descriptor() {
        return glLoadMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glLoadMatrixf$handle() {
        return glLoadMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glLoadMatrixf$address() {
        return glLoadMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static void glLoadMatrixf(MemorySegment m) {
        var mh$ = glLoadMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glMultMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glMultMatrixd$descriptor() {
        return glMultMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glMultMatrixd$handle() {
        return glMultMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glMultMatrixd$address() {
        return glMultMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static void glMultMatrixd(MemorySegment m) {
        var mh$ = glMultMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glMultMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glMultMatrixf$descriptor() {
        return glMultMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glMultMatrixf$handle() {
        return glMultMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glMultMatrixf$address() {
        return glMultMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static void glMultMatrixf(MemorySegment m) {
        var mh$ = glMultMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRotated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glRotated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glRotated$descriptor() {
        return glRotated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glRotated$handle() {
        return glRotated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glRotated$address() {
        return glRotated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glRotated(double angle, double x, double y, double z) {
        var mh$ = glRotated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRotated", angle, x, y, z);
            }
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRotatef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glRotatef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glRotatef$descriptor() {
        return glRotatef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glRotatef$handle() {
        return glRotatef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glRotatef$address() {
        return glRotatef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glRotatef(float angle, float x, float y, float z) {
        var mh$ = glRotatef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRotatef", angle, x, y, z);
            }
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glScaled$descriptor() {
        return glScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glScaled$handle() {
        return glScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glScaled$address() {
        return glScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glScaled(double x, double y, double z) {
        var mh$ = glScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScaled", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScalef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glScalef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glScalef$descriptor() {
        return glScalef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glScalef$handle() {
        return glScalef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glScalef$address() {
        return glScalef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glScalef(float x, float y, float z) {
        var mh$ = glScalef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScalef", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTranslated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glTranslated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glTranslated$descriptor() {
        return glTranslated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glTranslated$handle() {
        return glTranslated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glTranslated$address() {
        return glTranslated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glTranslated(double x, double y, double z) {
        var mh$ = glTranslated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTranslated", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTranslatef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glTranslatef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glTranslatef$descriptor() {
        return glTranslatef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glTranslatef$handle() {
        return glTranslatef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glTranslatef$address() {
        return glTranslatef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glTranslatef(float x, float y, float z) {
        var mh$ = glTranslatef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTranslatef", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_CHAR,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glIsList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLboolean glIsList(GLuint list)
     * }
     */
    public static FunctionDescriptor glIsList$descriptor() {
        return glIsList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLboolean glIsList(GLuint list)
     * }
     */
    public static MethodHandle glIsList$handle() {
        return glIsList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLboolean glIsList(GLuint list)
     * }
     */
    public static MemorySegment glIsList$address() {
        return glIsList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLboolean glIsList(GLuint list)
     * }
     */
    public static byte glIsList(int list) {
        var mh$ = glIsList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsList", list);
            }
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glDeleteLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static FunctionDescriptor glDeleteLists$descriptor() {
        return glDeleteLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static MethodHandle glDeleteLists$handle() {
        return glDeleteLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static MemorySegment glDeleteLists$address() {
        return glDeleteLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static void glDeleteLists(int list, int range) {
        var mh$ = glDeleteLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteLists", list, range);
            }
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glGenLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GLuint glGenLists(GLsizei range)
     * }
     */
    public static FunctionDescriptor glGenLists$descriptor() {
        return glGenLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GLuint glGenLists(GLsizei range)
     * }
     */
    public static MethodHandle glGenLists$handle() {
        return glGenLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * GLuint glGenLists(GLsizei range)
     * }
     */
    public static MemorySegment glGenLists$address() {
        return glGenLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * GLuint glGenLists(GLsizei range)
     * }
     */
    public static int glGenLists(int range) {
        var mh$ = glGenLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenLists", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNewList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNewList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static FunctionDescriptor glNewList$descriptor() {
        return glNewList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static MethodHandle glNewList$handle() {
        return glNewList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static MemorySegment glNewList$address() {
        return glNewList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static void glNewList(int list, int mode) {
        var mh$ = glNewList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNewList", list, mode);
            }
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEndList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEndList()
     * }
     */
    public static FunctionDescriptor glEndList$descriptor() {
        return glEndList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEndList()
     * }
     */
    public static MethodHandle glEndList$handle() {
        return glEndList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEndList()
     * }
     */
    public static MemorySegment glEndList$address() {
        return glEndList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEndList()
     * }
     */
    public static void glEndList() {
        var mh$ = glEndList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndList");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCallList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glCallList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glCallList(GLuint list)
     * }
     */
    public static FunctionDescriptor glCallList$descriptor() {
        return glCallList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glCallList(GLuint list)
     * }
     */
    public static MethodHandle glCallList$handle() {
        return glCallList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glCallList(GLuint list)
     * }
     */
    public static MemorySegment glCallList$address() {
        return glCallList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glCallList(GLuint list)
     * }
     */
    public static void glCallList(int list) {
        var mh$ = glCallList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCallList", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCallLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glCallLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static FunctionDescriptor glCallLists$descriptor() {
        return glCallLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static MethodHandle glCallLists$handle() {
        return glCallLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static MemorySegment glCallLists$address() {
        return glCallLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static void glCallLists(int n, int type, MemorySegment lists) {
        var mh$ = glCallLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCallLists", n, type, lists);
            }
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glListBase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glListBase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glListBase(GLuint base)
     * }
     */
    public static FunctionDescriptor glListBase$descriptor() {
        return glListBase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glListBase(GLuint base)
     * }
     */
    public static MethodHandle glListBase$handle() {
        return glListBase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glListBase(GLuint base)
     * }
     */
    public static MemorySegment glListBase$address() {
        return glListBase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glListBase(GLuint base)
     * }
     */
    public static void glListBase(int base) {
        var mh$ = glListBase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glListBase", base);
            }
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glBegin(GLenum mode)
     * }
     */
    public static FunctionDescriptor glBegin$descriptor() {
        return glBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glBegin(GLenum mode)
     * }
     */
    public static MethodHandle glBegin$handle() {
        return glBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glBegin(GLenum mode)
     * }
     */
    public static MemorySegment glBegin$address() {
        return glBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glBegin(GLenum mode)
     * }
     */
    public static void glBegin(int mode) {
        var mh$ = glBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBegin", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glEnd()
     * }
     */
    public static FunctionDescriptor glEnd$descriptor() {
        return glEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glEnd()
     * }
     */
    public static MethodHandle glEnd$handle() {
        return glEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glEnd()
     * }
     */
    public static MemorySegment glEnd$address() {
        return glEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glEnd()
     * }
     */
    public static void glEnd() {
        var mh$ = glEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnd");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glVertex2d$descriptor() {
        return glVertex2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glVertex2d$handle() {
        return glVertex2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glVertex2d$address() {
        return glVertex2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static void glVertex2d(double x, double y) {
        var mh$ = glVertex2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2d", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glVertex2f$descriptor() {
        return glVertex2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glVertex2f$handle() {
        return glVertex2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glVertex2f$address() {
        return glVertex2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static void glVertex2f(float x, float y) {
        var mh$ = glVertex2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2f", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2i(GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glVertex2i$descriptor() {
        return glVertex2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2i(GLint x, GLint y)
     * }
     */
    public static MethodHandle glVertex2i$handle() {
        return glVertex2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2i(GLint x, GLint y)
     * }
     */
    public static MemorySegment glVertex2i$address() {
        return glVertex2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2i(GLint x, GLint y)
     * }
     */
    public static void glVertex2i(int x, int y) {
        var mh$ = glVertex2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2i", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_SHORT,
            glxext_h.C_SHORT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glVertex2s$descriptor() {
        return glVertex2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glVertex2s$handle() {
        return glVertex2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glVertex2s$address() {
        return glVertex2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static void glVertex2s(short x, short y) {
        var mh$ = glVertex2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2s", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glVertex3d$descriptor() {
        return glVertex3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glVertex3d$handle() {
        return glVertex3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glVertex3d$address() {
        return glVertex3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glVertex3d(double x, double y, double z) {
        var mh$ = glVertex3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3d", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glVertex3f$descriptor() {
        return glVertex3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glVertex3f$handle() {
        return glVertex3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glVertex3f$address() {
        return glVertex3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glVertex3f(float x, float y, float z) {
        var mh$ = glVertex3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3f", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glVertex3i$descriptor() {
        return glVertex3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glVertex3i$handle() {
        return glVertex3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glVertex3i$address() {
        return glVertex3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static void glVertex3i(int x, int y, int z) {
        var mh$ = glVertex3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3i", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_SHORT,
            glxext_h.C_SHORT,
            glxext_h.C_SHORT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glVertex3s$descriptor() {
        return glVertex3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glVertex3s$handle() {
        return glVertex3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glVertex3s$address() {
        return glVertex3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glVertex3s(short x, short y, short z) {
        var mh$ = glVertex3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3s", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glVertex4d$descriptor() {
        return glVertex4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glVertex4d$handle() {
        return glVertex4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glVertex4d$address() {
        return glVertex4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glVertex4d(double x, double y, double z, double w) {
        var mh$ = glVertex4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4d", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glVertex4f$descriptor() {
        return glVertex4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glVertex4f$handle() {
        return glVertex4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glVertex4f$address() {
        return glVertex4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glVertex4f(float x, float y, float z, float w) {
        var mh$ = glVertex4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4f", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static FunctionDescriptor glVertex4i$descriptor() {
        return glVertex4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MethodHandle glVertex4i$handle() {
        return glVertex4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MemorySegment glVertex4i$address() {
        return glVertex4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static void glVertex4i(int x, int y, int z, int w) {
        var mh$ = glVertex4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4i", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_SHORT,
            glxext_h.C_SHORT,
            glxext_h.C_SHORT,
            glxext_h.C_SHORT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static FunctionDescriptor glVertex4s$descriptor() {
        return glVertex4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MethodHandle glVertex4s$handle() {
        return glVertex4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MemorySegment glVertex4s$address() {
        return glVertex4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static void glVertex4s(short x, short y, short z, short w) {
        var mh$ = glVertex4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4s", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex2dv$descriptor() {
        return glVertex2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex2dv$handle() {
        return glVertex2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex2dv$address() {
        return glVertex2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2dv(const GLdouble *v)
     * }
     */
    public static void glVertex2dv(MemorySegment v) {
        var mh$ = glVertex2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex2fv$descriptor() {
        return glVertex2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex2fv$handle() {
        return glVertex2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex2fv$address() {
        return glVertex2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2fv(const GLfloat *v)
     * }
     */
    public static void glVertex2fv(MemorySegment v) {
        var mh$ = glVertex2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex2iv$descriptor() {
        return glVertex2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex2iv$handle() {
        return glVertex2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex2iv$address() {
        return glVertex2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2iv(const GLint *v)
     * }
     */
    public static void glVertex2iv(MemorySegment v) {
        var mh$ = glVertex2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex2sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex2sv$descriptor() {
        return glVertex2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex2sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex2sv$handle() {
        return glVertex2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex2sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex2sv$address() {
        return glVertex2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex2sv(const GLshort *v)
     * }
     */
    public static void glVertex2sv(MemorySegment v) {
        var mh$ = glVertex2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex3dv$descriptor() {
        return glVertex3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex3dv$handle() {
        return glVertex3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex3dv$address() {
        return glVertex3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3dv(const GLdouble *v)
     * }
     */
    public static void glVertex3dv(MemorySegment v) {
        var mh$ = glVertex3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex3fv$descriptor() {
        return glVertex3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex3fv$handle() {
        return glVertex3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex3fv$address() {
        return glVertex3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3fv(const GLfloat *v)
     * }
     */
    public static void glVertex3fv(MemorySegment v) {
        var mh$ = glVertex3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex3iv$descriptor() {
        return glVertex3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex3iv$handle() {
        return glVertex3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex3iv$address() {
        return glVertex3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3iv(const GLint *v)
     * }
     */
    public static void glVertex3iv(MemorySegment v) {
        var mh$ = glVertex3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex3sv$descriptor() {
        return glVertex3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex3sv$handle() {
        return glVertex3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex3sv$address() {
        return glVertex3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex3sv(const GLshort *v)
     * }
     */
    public static void glVertex3sv(MemorySegment v) {
        var mh$ = glVertex3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex4dv$descriptor() {
        return glVertex4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex4dv$handle() {
        return glVertex4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex4dv$address() {
        return glVertex4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4dv(const GLdouble *v)
     * }
     */
    public static void glVertex4dv(MemorySegment v) {
        var mh$ = glVertex4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex4fv$descriptor() {
        return glVertex4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex4fv$handle() {
        return glVertex4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex4fv$address() {
        return glVertex4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4fv(const GLfloat *v)
     * }
     */
    public static void glVertex4fv(MemorySegment v) {
        var mh$ = glVertex4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex4iv$descriptor() {
        return glVertex4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex4iv$handle() {
        return glVertex4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex4iv$address() {
        return glVertex4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4iv(const GLint *v)
     * }
     */
    public static void glVertex4iv(MemorySegment v) {
        var mh$ = glVertex4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_POINTER
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glVertex4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glVertex4sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex4sv$descriptor() {
        return glVertex4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glVertex4sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex4sv$handle() {
        return glVertex4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glVertex4sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex4sv$address() {
        return glVertex4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glVertex4sv(const GLshort *v)
     * }
     */
    public static void glVertex4sv(MemorySegment v) {
        var mh$ = glVertex4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3b {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_CHAR,
            glxext_h.C_CHAR,
            glxext_h.C_CHAR
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNormal3b");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static FunctionDescriptor glNormal3b$descriptor() {
        return glNormal3b.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static MethodHandle glNormal3b$handle() {
        return glNormal3b.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static MemorySegment glNormal3b$address() {
        return glNormal3b.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static void glNormal3b(byte nx, byte ny, byte nz) {
        var mh$ = glNormal3b.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3b", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE,
            glxext_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNormal3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static FunctionDescriptor glNormal3d$descriptor() {
        return glNormal3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static MethodHandle glNormal3d$handle() {
        return glNormal3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static MemorySegment glNormal3d$address() {
        return glNormal3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static void glNormal3d(double nx, double ny, double nz) {
        var mh$ = glNormal3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3d", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT,
            glxext_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNormal3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static FunctionDescriptor glNormal3f$descriptor() {
        return glNormal3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static MethodHandle glNormal3f$handle() {
        return glNormal3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static MemorySegment glNormal3f$address() {
        return glNormal3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static void glNormal3f(float nx, float ny, float nz) {
        var mh$ = glNormal3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3f", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_INT,
            glxext_h.C_INT,
            glxext_h.C_INT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNormal3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static FunctionDescriptor glNormal3i$descriptor() {
        return glNormal3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static MethodHandle glNormal3i$handle() {
        return glNormal3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static MemorySegment glNormal3i$address() {
        return glNormal3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static void glNormal3i(int nx, int ny, int nz) {
        var mh$ = glNormal3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3i", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glxext_h.C_SHORT,
            glxext_h.C_SHORT,
            glxext_h.C_SHORT
        );

        public static final MemorySegment ADDR = glxext_h.findOrThrow("glNormal3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static FunctionDescriptor glNormal3s$descriptor() {
        return glNormal3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static MethodHandle glNormal3s$handle() {
        return glNormal3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static MemorySegment glNormal3s$address() {
        return glNormal3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static void glNormal3s(short nx, short ny, short nz) {
        var mh$ = glNormal3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3s", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

