// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGETSEPARABLEFILTEREXTPROC {

    void apply(int target, int format, int type, java.lang.foreign.MemoryAddress row, java.lang.foreign.MemoryAddress column, java.lang.foreign.MemoryAddress span);
    static MemorySegment allocate(PFNGLGETSEPARABLEFILTEREXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGETSEPARABLEFILTEREXTPROC.class, fi, constants$609.PFNGLGETSEPARABLEFILTEREXTPROC$FUNC, session);
    }
    static PFNGLGETSEPARABLEFILTEREXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _target, int _format, int _type, java.lang.foreign.MemoryAddress _row, java.lang.foreign.MemoryAddress _column, java.lang.foreign.MemoryAddress _span) -> {
            try {
                constants$609.PFNGLGETSEPARABLEFILTEREXTPROC$MH.invokeExact((Addressable)symbol, _target, _format, _type, (java.lang.foreign.Addressable)_row, (java.lang.foreign.Addressable)_column, (java.lang.foreign.Addressable)_span);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


