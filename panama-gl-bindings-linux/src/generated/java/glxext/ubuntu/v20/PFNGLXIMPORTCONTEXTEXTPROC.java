// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLXIMPORTCONTEXTEXTPROC {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress dpy, long contextID);
    static MemorySegment allocate(PFNGLXIMPORTCONTEXTEXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLXIMPORTCONTEXTEXTPROC.class, fi, constants$1032.PFNGLXIMPORTCONTEXTEXTPROC$FUNC, session);
    }
    static PFNGLXIMPORTCONTEXTEXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _dpy, long _contextID) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$1033.PFNGLXIMPORTCONTEXTEXTPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_dpy, _contextID);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


