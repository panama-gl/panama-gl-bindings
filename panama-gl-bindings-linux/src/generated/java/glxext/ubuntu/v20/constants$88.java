// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$88 {

    static final FunctionDescriptor glGetPolygonStipple$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glGetPolygonStipple$MH = RuntimeHelper.downcallHandle(
        "glGetPolygonStipple",
        constants$88.glGetPolygonStipple$FUNC
    );
    static final FunctionDescriptor glEdgeFlag$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle glEdgeFlag$MH = RuntimeHelper.downcallHandle(
        "glEdgeFlag",
        constants$88.glEdgeFlag$FUNC
    );
    static final FunctionDescriptor glEdgeFlagv$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glEdgeFlagv$MH = RuntimeHelper.downcallHandle(
        "glEdgeFlagv",
        constants$88.glEdgeFlagv$FUNC
    );
    static final FunctionDescriptor glScissor$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle glScissor$MH = RuntimeHelper.downcallHandle(
        "glScissor",
        constants$88.glScissor$FUNC
    );
    static final FunctionDescriptor glClipPlane$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glClipPlane$MH = RuntimeHelper.downcallHandle(
        "glClipPlane",
        constants$88.glClipPlane$FUNC
    );
    static final FunctionDescriptor glGetClipPlane$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle glGetClipPlane$MH = RuntimeHelper.downcallHandle(
        "glGetClipPlane",
        constants$88.glGetClipPlane$FUNC
    );
}


