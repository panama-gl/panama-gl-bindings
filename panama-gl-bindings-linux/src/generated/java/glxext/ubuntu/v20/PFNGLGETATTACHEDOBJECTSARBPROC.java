// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGETATTACHEDOBJECTSARBPROC {

    void apply(int containerObj, int maxCount, java.lang.foreign.MemoryAddress count, java.lang.foreign.MemoryAddress obj);
    static MemorySegment allocate(PFNGLGETATTACHEDOBJECTSARBPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGETATTACHEDOBJECTSARBPROC.class, fi, constants$454.PFNGLGETATTACHEDOBJECTSARBPROC$FUNC, session);
    }
    static PFNGLGETATTACHEDOBJECTSARBPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _containerObj, int _maxCount, java.lang.foreign.MemoryAddress _count, java.lang.foreign.MemoryAddress _obj) -> {
            try {
                constants$454.PFNGLGETATTACHEDOBJECTSARBPROC$MH.invokeExact((Addressable)symbol, _containerObj, _maxCount, (java.lang.foreign.Addressable)_count, (java.lang.foreign.Addressable)_obj);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


