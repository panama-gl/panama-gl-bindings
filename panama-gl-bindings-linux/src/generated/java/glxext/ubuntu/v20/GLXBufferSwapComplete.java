// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class GLXBufferSwapComplete {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("serial"),
        Constants$root.C_INT$LAYOUT.withName("send_event"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("display"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("drawable"),
        Constants$root.C_INT$LAYOUT.withName("event_type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("ust"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("msc"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("sbc")
    );
    public static MemoryLayout $LAYOUT() {
        return GLXBufferSwapComplete.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return GLXBufferSwapComplete.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)GLXBufferSwapComplete.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        GLXBufferSwapComplete.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)GLXBufferSwapComplete.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        GLXBufferSwapComplete.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serial"));
    public static VarHandle serial$VH() {
        return GLXBufferSwapComplete.serial$VH;
    }
    public static long serial$get(MemorySegment seg) {
        return (long)GLXBufferSwapComplete.serial$VH.get(seg);
    }
    public static void serial$set( MemorySegment seg, long x) {
        GLXBufferSwapComplete.serial$VH.set(seg, x);
    }
    public static long serial$get(MemorySegment seg, long index) {
        return (long)GLXBufferSwapComplete.serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serial$set(MemorySegment seg, long index, long x) {
        GLXBufferSwapComplete.serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return GLXBufferSwapComplete.send_event$VH;
    }
    public static int send_event$get(MemorySegment seg) {
        return (int)GLXBufferSwapComplete.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, int x) {
        GLXBufferSwapComplete.send_event$VH.set(seg, x);
    }
    public static int send_event$get(MemorySegment seg, long index) {
        return (int)GLXBufferSwapComplete.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, int x) {
        GLXBufferSwapComplete.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("display"));
    public static VarHandle display$VH() {
        return GLXBufferSwapComplete.display$VH;
    }
    public static MemoryAddress display$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)GLXBufferSwapComplete.display$VH.get(seg);
    }
    public static void display$set( MemorySegment seg, MemoryAddress x) {
        GLXBufferSwapComplete.display$VH.set(seg, x);
    }
    public static MemoryAddress display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)GLXBufferSwapComplete.display$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemoryAddress x) {
        GLXBufferSwapComplete.display$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle drawable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drawable"));
    public static VarHandle drawable$VH() {
        return GLXBufferSwapComplete.drawable$VH;
    }
    public static long drawable$get(MemorySegment seg) {
        return (long)GLXBufferSwapComplete.drawable$VH.get(seg);
    }
    public static void drawable$set( MemorySegment seg, long x) {
        GLXBufferSwapComplete.drawable$VH.set(seg, x);
    }
    public static long drawable$get(MemorySegment seg, long index) {
        return (long)GLXBufferSwapComplete.drawable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drawable$set(MemorySegment seg, long index, long x) {
        GLXBufferSwapComplete.drawable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle event_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("event_type"));
    public static VarHandle event_type$VH() {
        return GLXBufferSwapComplete.event_type$VH;
    }
    public static int event_type$get(MemorySegment seg) {
        return (int)GLXBufferSwapComplete.event_type$VH.get(seg);
    }
    public static void event_type$set( MemorySegment seg, int x) {
        GLXBufferSwapComplete.event_type$VH.set(seg, x);
    }
    public static int event_type$get(MemorySegment seg, long index) {
        return (int)GLXBufferSwapComplete.event_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event_type$set(MemorySegment seg, long index, int x) {
        GLXBufferSwapComplete.event_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ust$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ust"));
    public static VarHandle ust$VH() {
        return GLXBufferSwapComplete.ust$VH;
    }
    public static long ust$get(MemorySegment seg) {
        return (long)GLXBufferSwapComplete.ust$VH.get(seg);
    }
    public static void ust$set( MemorySegment seg, long x) {
        GLXBufferSwapComplete.ust$VH.set(seg, x);
    }
    public static long ust$get(MemorySegment seg, long index) {
        return (long)GLXBufferSwapComplete.ust$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ust$set(MemorySegment seg, long index, long x) {
        GLXBufferSwapComplete.ust$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle msc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msc"));
    public static VarHandle msc$VH() {
        return GLXBufferSwapComplete.msc$VH;
    }
    public static long msc$get(MemorySegment seg) {
        return (long)GLXBufferSwapComplete.msc$VH.get(seg);
    }
    public static void msc$set( MemorySegment seg, long x) {
        GLXBufferSwapComplete.msc$VH.set(seg, x);
    }
    public static long msc$get(MemorySegment seg, long index) {
        return (long)GLXBufferSwapComplete.msc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msc$set(MemorySegment seg, long index, long x) {
        GLXBufferSwapComplete.msc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sbc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sbc"));
    public static VarHandle sbc$VH() {
        return GLXBufferSwapComplete.sbc$VH;
    }
    public static long sbc$get(MemorySegment seg) {
        return (long)GLXBufferSwapComplete.sbc$VH.get(seg);
    }
    public static void sbc$set( MemorySegment seg, long x) {
        GLXBufferSwapComplete.sbc$VH.set(seg, x);
    }
    public static long sbc$get(MemorySegment seg, long index) {
        return (long)GLXBufferSwapComplete.sbc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sbc$set(MemorySegment seg, long index, long x) {
        GLXBufferSwapComplete.sbc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


