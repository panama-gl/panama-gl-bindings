// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGLOBALALPHAFACTORBSUNPROC {

    void apply(byte factor);
    static MemorySegment allocate(PFNGLGLOBALALPHAFACTORBSUNPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGLOBALALPHAFACTORBSUNPROC.class, fi, constants$995.PFNGLGLOBALALPHAFACTORBSUNPROC$FUNC, session);
    }
    static PFNGLGLOBALALPHAFACTORBSUNPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (byte _factor) -> {
            try {
                constants$995.PFNGLGLOBALALPHAFACTORBSUNPROC$MH.invokeExact((Addressable)symbol, _factor);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


