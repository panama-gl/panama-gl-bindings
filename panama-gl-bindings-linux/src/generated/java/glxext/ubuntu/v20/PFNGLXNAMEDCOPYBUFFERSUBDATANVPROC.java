// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC {

    void apply(java.lang.foreign.MemoryAddress dpy, java.lang.foreign.MemoryAddress readCtx, java.lang.foreign.MemoryAddress writeCtx, int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size);
    static MemorySegment allocate(PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC.class, fi, constants$1038.PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC$FUNC, session);
    }
    static PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _dpy, java.lang.foreign.MemoryAddress _readCtx, java.lang.foreign.MemoryAddress _writeCtx, int _readBuffer, int _writeBuffer, long _readOffset, long _writeOffset, long _size) -> {
            try {
                constants$1038.PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_dpy, (java.lang.foreign.Addressable)_readCtx, (java.lang.foreign.Addressable)_writeCtx, _readBuffer, _writeBuffer, _readOffset, _writeOffset, _size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


