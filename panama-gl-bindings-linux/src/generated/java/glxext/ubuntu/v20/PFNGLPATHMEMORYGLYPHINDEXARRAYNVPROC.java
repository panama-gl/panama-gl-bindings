// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC {

    int apply(int firstPathName, int fontTarget, long fontSize, java.lang.foreign.MemoryAddress fontData, int faceIndex, int firstGlyphIndex, int numGlyphs, int pathParameterTemplate, float emScale);
    static MemorySegment allocate(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC.class, fi, constants$889.PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC$FUNC, session);
    }
    static PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _firstPathName, int _fontTarget, long _fontSize, java.lang.foreign.MemoryAddress _fontData, int _faceIndex, int _firstGlyphIndex, int _numGlyphs, int _pathParameterTemplate, float _emScale) -> {
            try {
                return (int)constants$889.PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC$MH.invokeExact((Addressable)symbol, _firstPathName, _fontTarget, _fontSize, (java.lang.foreign.Addressable)_fontData, _faceIndex, _firstGlyphIndex, _numGlyphs, _pathParameterTemplate, _emScale);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


