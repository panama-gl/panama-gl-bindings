// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC {

    void apply(int mode, int first, int count, int instancecount, int baseinstance);
    static MemorySegment allocate(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC.class, fi, constants$334.PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC$FUNC, session);
    }
    static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _mode, int _first, int _count, int _instancecount, int _baseinstance) -> {
            try {
                constants$334.PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC$MH.invokeExact((Addressable)symbol, _mode, _first, _count, _instancecount, _baseinstance);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


