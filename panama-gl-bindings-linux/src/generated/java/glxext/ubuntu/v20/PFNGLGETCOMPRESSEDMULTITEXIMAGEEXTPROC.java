// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC {

    void apply(int texunit, int target, int lod, java.lang.foreign.MemoryAddress img);
    static MemorySegment allocate(PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC.class, fi, constants$653.PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC$FUNC, session);
    }
    static PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _texunit, int _target, int _lod, java.lang.foreign.MemoryAddress _img) -> {
            try {
                constants$653.PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC$MH.invokeExact((Addressable)symbol, _texunit, _target, _lod, (java.lang.foreign.Addressable)_img);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


