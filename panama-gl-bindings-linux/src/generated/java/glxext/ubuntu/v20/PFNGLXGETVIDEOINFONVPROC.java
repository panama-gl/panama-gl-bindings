// Generated by jextract

package glxext.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface PFNGLXGETVIDEOINFONVPROC {

    int apply(java.lang.foreign.MemoryAddress dpy, int screen, int VideoDevice, java.lang.foreign.MemoryAddress pulCounterOutputPbuffer, java.lang.foreign.MemoryAddress pulCounterOutputVideo);
    static MemorySegment allocate(PFNGLXGETVIDEOINFONVPROC fi, MemorySession session) {
        return RuntimeHelper.upcallStub(PFNGLXGETVIDEOINFONVPROC.class, fi, constants$1045.PFNGLXGETVIDEOINFONVPROC$FUNC, session);
    }
    static PFNGLXGETVIDEOINFONVPROC ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _dpy, int _screen, int _VideoDevice, java.lang.foreign.MemoryAddress _pulCounterOutputPbuffer, java.lang.foreign.MemoryAddress _pulCounterOutputVideo) -> {
            try {
                return (int)constants$1045.PFNGLXGETVIDEOINFONVPROC$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_dpy, _screen, _VideoDevice, (java.lang.foreign.Addressable)_pulCounterOutputPbuffer, (java.lang.foreign.Addressable)_pulCounterOutputVideo);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


