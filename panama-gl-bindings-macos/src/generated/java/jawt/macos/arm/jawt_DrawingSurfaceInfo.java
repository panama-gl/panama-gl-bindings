// Generated by jextract

package jawt.macos.arm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jawt_DrawingSurfaceInfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("platformInfo"),
        Constants$root.C_POINTER$LAYOUT.withName("ds"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("x"),
            Constants$root.C_INT$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("bounds"),
        Constants$root.C_INT$LAYOUT.withName("clipSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("clip")
    ).withName("jawt_DrawingSurfaceInfo");
    public static MemoryLayout $LAYOUT() {
        return jawt_DrawingSurfaceInfo.$struct$LAYOUT;
    }
    static final VarHandle platformInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("platformInfo"));
    public static VarHandle platformInfo$VH() {
        return jawt_DrawingSurfaceInfo.platformInfo$VH;
    }
    public static MemoryAddress platformInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.platformInfo$VH.get(seg);
    }
    public static void platformInfo$set( MemorySegment seg, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.platformInfo$VH.set(seg, x);
    }
    public static MemoryAddress platformInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.platformInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void platformInfo$set(MemorySegment seg, long index, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.platformInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ds"));
    public static VarHandle ds$VH() {
        return jawt_DrawingSurfaceInfo.ds$VH;
    }
    public static MemoryAddress ds$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.ds$VH.get(seg);
    }
    public static void ds$set( MemorySegment seg, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.ds$VH.set(seg, x);
    }
    public static MemoryAddress ds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.ds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ds$set(MemorySegment seg, long index, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.ds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bounds$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle clipSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clipSize"));
    public static VarHandle clipSize$VH() {
        return jawt_DrawingSurfaceInfo.clipSize$VH;
    }
    public static int clipSize$get(MemorySegment seg) {
        return (int)jawt_DrawingSurfaceInfo.clipSize$VH.get(seg);
    }
    public static void clipSize$set( MemorySegment seg, int x) {
        jawt_DrawingSurfaceInfo.clipSize$VH.set(seg, x);
    }
    public static int clipSize$get(MemorySegment seg, long index) {
        return (int)jawt_DrawingSurfaceInfo.clipSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clipSize$set(MemorySegment seg, long index, int x) {
        jawt_DrawingSurfaceInfo.clipSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle clip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clip"));
    public static VarHandle clip$VH() {
        return jawt_DrawingSurfaceInfo.clip$VH;
    }
    public static MemoryAddress clip$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.clip$VH.get(seg);
    }
    public static void clip$set( MemorySegment seg, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.clip$VH.set(seg, x);
    }
    public static MemoryAddress clip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)jawt_DrawingSurfaceInfo.clip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clip$set(MemorySegment seg, long index, MemoryAddress x) {
        jawt_DrawingSurfaceInfo.clip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


