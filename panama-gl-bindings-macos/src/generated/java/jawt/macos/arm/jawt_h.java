// Generated by jextract

package jawt.macos.arm;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class jawt_h  {

    /* package-private */ jawt_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    public static int RENAME_SECLUDE() {
        return (int)1L;
    }
    public static int RENAME_SWAP() {
        return (int)2L;
    }
    public static int RENAME_EXCL() {
        return (int)4L;
    }
    public static int __SLBF() {
        return (int)1L;
    }
    public static int __SNBF() {
        return (int)2L;
    }
    public static int __SRD() {
        return (int)4L;
    }
    public static int __SWR() {
        return (int)8L;
    }
    public static int __SRW() {
        return (int)16L;
    }
    public static int __SEOF() {
        return (int)32L;
    }
    public static int __SERR() {
        return (int)64L;
    }
    public static int __SMBF() {
        return (int)128L;
    }
    public static int __SAPP() {
        return (int)256L;
    }
    public static int __SSTR() {
        return (int)512L;
    }
    public static int __SOPT() {
        return (int)1024L;
    }
    public static int __SNPT() {
        return (int)2048L;
    }
    public static int __SOFF() {
        return (int)4096L;
    }
    public static int __SMOD() {
        return (int)8192L;
    }
    public static int __SALC() {
        return (int)16384L;
    }
    public static int __SIGN() {
        return (int)32768L;
    }
    public static int _IOFBF() {
        return (int)0L;
    }
    public static int _IOLBF() {
        return (int)1L;
    }
    public static int _IONBF() {
        return (int)2L;
    }
    public static int BUFSIZ() {
        return (int)1024L;
    }
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    public static int FILENAME_MAX() {
        return (int)1024L;
    }
    public static int L_tmpnam() {
        return (int)1024L;
    }
    public static int TMP_MAX() {
        return (int)308915776L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int L_ctermid() {
        return (int)1024L;
    }
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    public static int JNI_FALSE() {
        return (int)0L;
    }
    public static int JNI_TRUE() {
        return (int)1L;
    }
    public static int JNI_OK() {
        return (int)0L;
    }
    public static int JNI_COMMIT() {
        return (int)1L;
    }
    public static int JNI_ABORT() {
        return (int)2L;
    }
    public static int JNI_VERSION_1_1() {
        return (int)65537L;
    }
    public static int JNI_VERSION_1_2() {
        return (int)65538L;
    }
    public static int JNI_VERSION_1_4() {
        return (int)65540L;
    }
    public static int JNI_VERSION_1_6() {
        return (int)65542L;
    }
    public static int JNI_VERSION_1_8() {
        return (int)65544L;
    }
    public static int JNI_VERSION_9() {
        return (int)589824L;
    }
    public static int JNI_VERSION_10() {
        return (int)655360L;
    }
    public static int JNI_VERSION_19() {
        return (int)1245184L;
    }
    public static int JAWT_LOCK_ERROR() {
        return (int)1L;
    }
    public static int JAWT_LOCK_CLIP_CHANGED() {
        return (int)2L;
    }
    public static int JAWT_LOCK_BOUNDS_CHANGED() {
        return (int)4L;
    }
    public static int JAWT_LOCK_SURFACE_CHANGED() {
        return (int)8L;
    }
    public static int JAWT_VERSION_1_3() {
        return (int)65539L;
    }
    public static int JAWT_VERSION_1_4() {
        return (int)65540L;
    }
    public static int JAWT_VERSION_1_7() {
        return (int)65543L;
    }
    public static int JAWT_VERSION_9() {
        return (int)589824L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt __darwin_nl_item = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wctrans_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renameat$MH,"renameat");
    }
    public static int renameat ( int x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renamex_np$MH,"renamex_np");
    }
    public static int renamex_np ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = renamex_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$0.renameatx_np$MH,"renameatx_np");
    }
    public static int renameatx_np ( int x0,  Addressable x1,  int x2,  Addressable x3,  int x4) {
        var mh$ = renameatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong fpos_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout __stdinp$LAYOUT() {
        return constants$0.__stdinp$LAYOUT;
    }
    public static VarHandle __stdinp$VH() {
        return constants$0.__stdinp$VH;
    }
    public static MemorySegment __stdinp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT,"__stdinp");
    }
    public static MemoryAddress __stdinp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stdinp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT, "__stdinp"));
    }
    public static void __stdinp$set( MemoryAddress x) {
        constants$0.__stdinp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stdinp$SEGMENT, "__stdinp"), x);
    }
    public static MemoryLayout __stdoutp$LAYOUT() {
        return constants$0.__stdoutp$LAYOUT;
    }
    public static VarHandle __stdoutp$VH() {
        return constants$0.__stdoutp$VH;
    }
    public static MemorySegment __stdoutp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT,"__stdoutp");
    }
    public static MemoryAddress __stdoutp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stdoutp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT, "__stdoutp"));
    }
    public static void __stdoutp$set( MemoryAddress x) {
        constants$0.__stdoutp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stdoutp$SEGMENT, "__stdoutp"), x);
    }
    public static MemoryLayout __stderrp$LAYOUT() {
        return constants$0.__stderrp$LAYOUT;
    }
    public static VarHandle __stderrp$VH() {
        return constants$0.__stderrp$VH;
    }
    public static MemorySegment __stderrp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT,"__stderrp");
    }
    public static MemoryAddress __stderrp$get() {
        return (java.lang.foreign.MemoryAddress) constants$0.__stderrp$VH.get(RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT, "__stderrp"));
    }
    public static void __stderrp$set( MemoryAddress x) {
        constants$0.__stderrp$VH.set(RuntimeHelper.requireNonNull(constants$0.__stderrp$SEGMENT, "__stderrp"), x);
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$1.clearerr$MH,"clearerr");
    }
    public static void clearerr ( Addressable x0) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fclose$MH,"fclose");
    }
    public static int fclose ( Addressable x0) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.feof$MH,"feof");
    }
    public static int feof ( Addressable x0) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$1.ferror$MH,"ferror");
    }
    public static int ferror ( Addressable x0) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fflush$MH,"fflush");
    }
    public static int fflush ( Addressable x0) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.fgetc$MH,"fgetc");
    }
    public static int fgetc ( Addressable x0) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fgetpos$MH,"fgetpos");
    }
    public static int fgetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fgets$MH,"fgets");
    }
    public static MemoryAddress fgets ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fopen$MH,"fopen");
    }
    public static MemoryAddress fopen ( Addressable __filename,  Addressable __mode) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fprintf$MH,"fprintf");
    }
    public static int fprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fputc$MH,"fputc");
    }
    public static int fputc ( int x0,  Addressable x1) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fputs$MH,"fputs");
    }
    public static int fputs ( Addressable x0,  Addressable x1) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fread$MH,"fread");
    }
    public static long fread ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.freopen$MH,"freopen");
    }
    public static MemoryAddress freopen ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fscanf$MH,"fscanf");
    }
    public static int fscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fseek$MH,"fseek");
    }
    public static int fseek ( Addressable x0,  long x1,  int x2) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fsetpos$MH,"fsetpos");
    }
    public static int fsetpos ( Addressable x0,  Addressable x1) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$3.ftell$MH,"ftell");
    }
    public static long ftell ( Addressable x0) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fwrite$MH,"fwrite");
    }
    public static long fwrite ( Addressable __ptr,  long __size,  long __nitems,  Addressable __stream) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$4.getc$MH,"getc");
    }
    public static int getc ( Addressable x0) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$4.getchar$MH,"getchar");
    }
    public static int getchar () {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$4.gets$MH,"gets");
    }
    public static MemoryAddress gets ( Addressable x0) {
        var mh$ = gets$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$4.perror$MH,"perror");
    }
    public static void perror ( Addressable x0) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.printf$MH,"printf");
    }
    public static int printf ( Addressable x0, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$5.putc$MH,"putc");
    }
    public static int putc ( int x0,  Addressable x1) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$5.putchar$MH,"putchar");
    }
    public static int putchar ( int x0) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$5.puts$MH,"puts");
    }
    public static int puts ( Addressable x0) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$5.remove$MH,"remove");
    }
    public static int remove ( Addressable x0) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rename$MH,"rename");
    }
    public static int rename ( Addressable __old,  Addressable __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$5.rewind$MH,"rewind");
    }
    public static void rewind ( Addressable x0) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.scanf$MH,"scanf");
    }
    public static int scanf ( Addressable x0, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setbuf$MH,"setbuf");
    }
    public static void setbuf ( Addressable x0,  Addressable x1) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.setvbuf$MH,"setvbuf");
    }
    public static int setvbuf ( Addressable x0,  Addressable x1,  int x2,  long x3) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sprintf$MH,"sprintf");
    }
    public static int sprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sscanf$MH,"sscanf");
    }
    public static int sscanf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$6.tmpfile$MH,"tmpfile");
    }
    public static MemoryAddress tmpfile () {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$7.tmpnam$MH,"tmpnam");
    }
    public static MemoryAddress tmpnam ( Addressable x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.ungetc$MH,"ungetc");
    }
    public static int ungetc ( int x0,  Addressable x1) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vfprintf$MH,"vfprintf");
    }
    public static int vfprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vprintf$MH,"vprintf");
    }
    public static int vprintf ( Addressable x0,  Addressable x1) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsprintf$MH,"vsprintf");
    }
    public static int vsprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.ctermid$MH,"ctermid");
    }
    public static MemoryAddress ctermid ( Addressable x0) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fdopen$MH,"fdopen");
    }
    public static MemoryAddress fdopen ( int x0,  Addressable x1) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fileno$MH,"fileno");
    }
    public static int fileno ( Addressable x0) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$8.pclose$MH,"pclose");
    }
    public static int pclose ( Addressable x0) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$8.popen$MH,"popen");
    }
    public static MemoryAddress popen ( Addressable x0,  Addressable x1) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __srget$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__srget$MH,"__srget");
    }
    public static int __srget ( Addressable x0) {
        var mh$ = __srget$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__svfscanf$MH,"__svfscanf");
    }
    public static int __svfscanf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = __svfscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swbuf$MH,"__swbuf");
    }
    public static int __swbuf ( int x0,  Addressable x1) {
        var mh$ = __swbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sputc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__sputc$MH,"__sputc");
    }
    public static int __sputc ( int _c,  Addressable _p) {
        var mh$ = __sputc$MH();
        try {
            return (int)mh$.invokeExact(_c, _p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.flockfile$MH,"flockfile");
    }
    public static void flockfile ( Addressable x0) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.ftrylockfile$MH,"ftrylockfile");
    }
    public static int ftrylockfile ( Addressable x0) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$9.funlockfile$MH,"funlockfile");
    }
    public static void funlockfile ( Addressable x0) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getc_unlocked$MH,"getc_unlocked");
    }
    public static int getc_unlocked ( Addressable x0) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getchar_unlocked$MH,"getchar_unlocked");
    }
    public static int getchar_unlocked () {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putc_unlocked$MH,"putc_unlocked");
    }
    public static int putc_unlocked ( int x0,  Addressable x1) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putchar_unlocked$MH,"putchar_unlocked");
    }
    public static int putchar_unlocked ( int x0) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getw$MH,"getw");
    }
    public static int getw ( Addressable x0) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$10.putw$MH,"putw");
    }
    public static int putw ( int x0,  Addressable x1) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.tempnam$MH,"tempnam");
    }
    public static MemoryAddress tempnam ( Addressable __dir,  Addressable __prefix) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseeko$MH,"fseeko");
    }
    public static int fseeko ( Addressable __stream,  long __offset,  int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftello$MH,"ftello");
    }
    public static long ftello ( Addressable __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.snprintf$MH,"snprintf");
    }
    public static int snprintf ( Addressable __str,  long __size,  Addressable __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vfscanf$MH,"vfscanf");
    }
    public static int vfscanf ( Addressable __stream,  Addressable __format,  Addressable x2) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vscanf$MH,"vscanf");
    }
    public static int vscanf ( Addressable __format,  Addressable x1) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$11.vsnprintf$MH,"vsnprintf");
    }
    public static int vsnprintf ( Addressable __str,  long __size,  Addressable __format,  Addressable x3) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vsscanf$MH,"vsscanf");
    }
    public static int vsscanf ( Addressable __str,  Addressable __format,  Addressable x2) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.dprintf$MH,"dprintf");
    }
    public static int dprintf ( int x0,  Addressable x1, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$12.vdprintf$MH,"vdprintf");
    }
    public static int vdprintf ( int x0,  Addressable x1,  Addressable x2) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getdelim$MH,"getdelim");
    }
    public static long getdelim ( Addressable __linep,  Addressable __linecapp,  int __delimiter,  Addressable __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getline$MH,"getline");
    }
    public static long getline ( Addressable __linep,  Addressable __linecapp,  Addressable __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fmemopen$MH,"fmemopen");
    }
    public static MemoryAddress fmemopen ( Addressable __buf,  long __size,  Addressable __mode) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$13.open_memstream$MH,"open_memstream");
    }
    public static MemoryAddress open_memstream ( Addressable __bufp,  Addressable __sizep) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return constants$13.sys_nerr$LAYOUT;
    }
    public static VarHandle sys_nerr$VH() {
        return constants$13.sys_nerr$VH;
    }
    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT,"sys_nerr");
    }
    public static int sys_nerr$get() {
        return (int) constants$13.sys_nerr$VH.get(RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT, "sys_nerr"));
    }
    public static void sys_nerr$set( int x) {
        constants$13.sys_nerr$VH.set(RuntimeHelper.requireNonNull(constants$13.sys_nerr$SEGMENT, "sys_nerr"), x);
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.asprintf$MH,"asprintf");
    }
    public static int asprintf ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ctermid_r$MH,"ctermid_r");
    }
    public static MemoryAddress ctermid_r ( Addressable x0) {
        var mh$ = ctermid_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetln$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fgetln$MH,"fgetln");
    }
    public static MemoryAddress fgetln ( Addressable x0,  Addressable x1) {
        var mh$ = fgetln$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fmtcheck$MH,"fmtcheck");
    }
    public static MemoryAddress fmtcheck ( Addressable x0,  Addressable x1) {
        var mh$ = fmtcheck$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpurge$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fpurge$MH,"fpurge");
    }
    public static int fpurge ( Addressable x0) {
        var mh$ = fpurge$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.setbuffer$MH,"setbuffer");
    }
    public static void setbuffer ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.setlinebuf$MH,"setlinebuf");
    }
    public static int setlinebuf ( Addressable x0) {
        var mh$ = setlinebuf$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vasprintf$MH,"vasprintf");
    }
    public static int vasprintf ( Addressable x0,  Addressable x1,  Addressable x2) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle zopen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.zopen$MH,"zopen");
    }
    public static MemoryAddress zopen ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = zopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funopen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.funopen$MH,"funopen");
    }
    public static MemoryAddress funopen ( Addressable x0,  Addressable x1,  Addressable x2,  Addressable x3,  Addressable x4) {
        var mh$ = funopen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__sprintf_chk$MH,"__sprintf_chk");
    }
    public static int __sprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3, Object... x4) {
        var mh$ = __sprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__snprintf_chk$MH,"__snprintf_chk");
    }
    public static int __snprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4, Object... x5) {
        var mh$ = __snprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__vsprintf_chk$MH,"__vsprintf_chk");
    }
    public static int __vsprintf_chk ( Addressable x0,  int x1,  long x2,  Addressable x3,  Addressable x4) {
        var mh$ = __vsprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__vsnprintf_chk$MH,"__vsnprintf_chk");
    }
    public static int __vsnprintf_chk ( Addressable x0,  long x1,  int x2,  long x3,  Addressable x4,  Addressable x5) {
        var mh$ = __vsnprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt jint = Constants$root.C_INT$LAYOUT;
    public static OfLong jlong = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort jshort = Constants$root.C_SHORT$LAYOUT;
    public static OfFloat jfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble jdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt jsize = Constants$root.C_INT$LAYOUT;
    public static OfAddress jobject = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jclass = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jthrowable = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jstring = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jarray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jbooleanArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jbyteArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jcharArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jshortArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jintArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jlongArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jfloatArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jdoubleArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jobjectArray = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jweak = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jfieldID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress jmethodID = Constants$root.C_POINTER$LAYOUT;
    public static int JNIInvalidRefType() {
        return (int)0L;
    }
    public static int JNILocalRefType() {
        return (int)1L;
    }
    public static int JNIGlobalRefType() {
        return (int)2L;
    }
    public static int JNIWeakGlobalRefType() {
        return (int)3L;
    }
    public static OfAddress JNIEnv = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress JavaVM = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle JNI_GetDefaultJavaVMInitArgs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JNI_GetDefaultJavaVMInitArgs$MH,"JNI_GetDefaultJavaVMInitArgs");
    }
    public static int JNI_GetDefaultJavaVMInitArgs ( Addressable args) {
        var mh$ = JNI_GetDefaultJavaVMInitArgs$MH();
        try {
            return (int)mh$.invokeExact(args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JNI_CreateJavaVM$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JNI_CreateJavaVM$MH,"JNI_CreateJavaVM");
    }
    public static int JNI_CreateJavaVM ( Addressable pvm,  Addressable penv,  Addressable args) {
        var mh$ = JNI_CreateJavaVM$MH();
        try {
            return (int)mh$.invokeExact(pvm, penv, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JNI_GetCreatedJavaVMs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JNI_GetCreatedJavaVMs$MH,"JNI_GetCreatedJavaVMs");
    }
    public static int JNI_GetCreatedJavaVMs ( Addressable x0,  int x1,  Addressable x2) {
        var mh$ = JNI_GetCreatedJavaVMs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JNI_OnLoad$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JNI_OnLoad$MH,"JNI_OnLoad");
    }
    public static int JNI_OnLoad ( Addressable vm,  Addressable reserved) {
        var mh$ = JNI_OnLoad$MH();
        try {
            return (int)mh$.invokeExact(vm, reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JNI_OnUnload$MH() {
        return RuntimeHelper.requireNonNull(constants$17.JNI_OnUnload$MH,"JNI_OnUnload");
    }
    public static void JNI_OnUnload ( Addressable vm,  Addressable reserved) {
        var mh$ = JNI_OnUnload$MH();
        try {
            mh$.invokeExact(vm, reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle JAWT_GetAWT$MH() {
        return RuntimeHelper.requireNonNull(constants$18.JAWT_GetAWT$MH,"JAWT_GetAWT");
    }
    public static byte JAWT_GetAWT ( Addressable env,  Addressable awt) {
        var mh$ = JAWT_GetAWT$MH();
        try {
            return (byte)mh$.invokeExact(env, awt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$18.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$18.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$18.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)110000L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)110300L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$18.__DARWIN_NULL$ADDR;
    }
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static MemoryAddress NULL() {
        return constants$18.NULL$ADDR;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static MemorySegment P_tmpdir() {
        return constants$19.P_tmpdir$SEGMENT;
    }
    public static int JNI_ERR() {
        return (int)-1L;
    }
    public static int JNI_EDETACHED() {
        return (int)-2L;
    }
    public static int JNI_EVERSION() {
        return (int)-3L;
    }
    public static int JNI_ENOMEM() {
        return (int)-4L;
    }
    public static int JNI_EEXIST() {
        return (int)-5L;
    }
    public static int JNI_EINVAL() {
        return (int)-6L;
    }
}


