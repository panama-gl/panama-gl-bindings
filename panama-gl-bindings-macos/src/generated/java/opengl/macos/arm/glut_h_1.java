// Generated by jextract

package opengl.macos.arm;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class glut_h_1 extends glut_h_2 {

    glut_h_1() {
        // Should not be called directly
    }
    private static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = (int)34340L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_ATTRIB_ARRAY_STRIDE 34340
     * }
     */
    public static int GL_VERTEX_ATTRIB_ARRAY_STRIDE() {
        return GL_VERTEX_ATTRIB_ARRAY_STRIDE;
    }
    private static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = (int)34341L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_ATTRIB_ARRAY_TYPE 34341
     * }
     */
    public static int GL_VERTEX_ATTRIB_ARRAY_TYPE() {
        return GL_VERTEX_ATTRIB_ARRAY_TYPE;
    }
    private static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = (int)34922L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 34922
     * }
     */
    public static int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED() {
        return GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
    }
    private static final int GL_CURRENT_VERTEX_ATTRIB = (int)34342L;
    /**
     * {@snippet lang=c :
     * #define GL_CURRENT_VERTEX_ATTRIB 34342
     * }
     */
    public static int GL_CURRENT_VERTEX_ATTRIB() {
        return GL_CURRENT_VERTEX_ATTRIB;
    }
    private static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = (int)34373L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_ATTRIB_ARRAY_POINTER 34373
     * }
     */
    public static int GL_VERTEX_ATTRIB_ARRAY_POINTER() {
        return GL_VERTEX_ATTRIB_ARRAY_POINTER;
    }
    private static final int GL_VERTEX_PROGRAM_POINT_SIZE = (int)34370L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_PROGRAM_POINT_SIZE 34370
     * }
     */
    public static int GL_VERTEX_PROGRAM_POINT_SIZE() {
        return GL_VERTEX_PROGRAM_POINT_SIZE;
    }
    private static final int GL_VERTEX_PROGRAM_TWO_SIDE = (int)34371L;
    /**
     * {@snippet lang=c :
     * #define GL_VERTEX_PROGRAM_TWO_SIDE 34371
     * }
     */
    public static int GL_VERTEX_PROGRAM_TWO_SIDE() {
        return GL_VERTEX_PROGRAM_TWO_SIDE;
    }
    private static final int GL_MAX_TEXTURE_COORDS = (int)34929L;
    /**
     * {@snippet lang=c :
     * #define GL_MAX_TEXTURE_COORDS 34929
     * }
     */
    public static int GL_MAX_TEXTURE_COORDS() {
        return GL_MAX_TEXTURE_COORDS;
    }
    private static final int GL_MAX_TEXTURE_IMAGE_UNITS = (int)34930L;
    /**
     * {@snippet lang=c :
     * #define GL_MAX_TEXTURE_IMAGE_UNITS 34930
     * }
     */
    public static int GL_MAX_TEXTURE_IMAGE_UNITS() {
        return GL_MAX_TEXTURE_IMAGE_UNITS;
    }
    private static final int GL_MAX_DRAW_BUFFERS = (int)34852L;
    /**
     * {@snippet lang=c :
     * #define GL_MAX_DRAW_BUFFERS 34852
     * }
     */
    public static int GL_MAX_DRAW_BUFFERS() {
        return GL_MAX_DRAW_BUFFERS;
    }
    private static final int GL_DRAW_BUFFER0 = (int)34853L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER0 34853
     * }
     */
    public static int GL_DRAW_BUFFER0() {
        return GL_DRAW_BUFFER0;
    }
    private static final int GL_DRAW_BUFFER1 = (int)34854L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER1 34854
     * }
     */
    public static int GL_DRAW_BUFFER1() {
        return GL_DRAW_BUFFER1;
    }
    private static final int GL_DRAW_BUFFER2 = (int)34855L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER2 34855
     * }
     */
    public static int GL_DRAW_BUFFER2() {
        return GL_DRAW_BUFFER2;
    }
    private static final int GL_DRAW_BUFFER3 = (int)34856L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER3 34856
     * }
     */
    public static int GL_DRAW_BUFFER3() {
        return GL_DRAW_BUFFER3;
    }
    private static final int GL_DRAW_BUFFER4 = (int)34857L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER4 34857
     * }
     */
    public static int GL_DRAW_BUFFER4() {
        return GL_DRAW_BUFFER4;
    }
    private static final int GL_DRAW_BUFFER5 = (int)34858L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER5 34858
     * }
     */
    public static int GL_DRAW_BUFFER5() {
        return GL_DRAW_BUFFER5;
    }
    private static final int GL_DRAW_BUFFER6 = (int)34859L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER6 34859
     * }
     */
    public static int GL_DRAW_BUFFER6() {
        return GL_DRAW_BUFFER6;
    }
    private static final int GL_DRAW_BUFFER7 = (int)34860L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER7 34860
     * }
     */
    public static int GL_DRAW_BUFFER7() {
        return GL_DRAW_BUFFER7;
    }
    private static final int GL_DRAW_BUFFER8 = (int)34861L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER8 34861
     * }
     */
    public static int GL_DRAW_BUFFER8() {
        return GL_DRAW_BUFFER8;
    }
    private static final int GL_DRAW_BUFFER9 = (int)34862L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER9 34862
     * }
     */
    public static int GL_DRAW_BUFFER9() {
        return GL_DRAW_BUFFER9;
    }
    private static final int GL_DRAW_BUFFER10 = (int)34863L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER10 34863
     * }
     */
    public static int GL_DRAW_BUFFER10() {
        return GL_DRAW_BUFFER10;
    }
    private static final int GL_DRAW_BUFFER11 = (int)34864L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER11 34864
     * }
     */
    public static int GL_DRAW_BUFFER11() {
        return GL_DRAW_BUFFER11;
    }
    private static final int GL_DRAW_BUFFER12 = (int)34865L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER12 34865
     * }
     */
    public static int GL_DRAW_BUFFER12() {
        return GL_DRAW_BUFFER12;
    }
    private static final int GL_DRAW_BUFFER13 = (int)34866L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER13 34866
     * }
     */
    public static int GL_DRAW_BUFFER13() {
        return GL_DRAW_BUFFER13;
    }
    private static final int GL_DRAW_BUFFER14 = (int)34867L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER14 34867
     * }
     */
    public static int GL_DRAW_BUFFER14() {
        return GL_DRAW_BUFFER14;
    }
    private static final int GL_DRAW_BUFFER15 = (int)34868L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_BUFFER15 34868
     * }
     */
    public static int GL_DRAW_BUFFER15() {
        return GL_DRAW_BUFFER15;
    }
    private static final int GL_POINT_SPRITE = (int)34913L;
    /**
     * {@snippet lang=c :
     * #define GL_POINT_SPRITE 34913
     * }
     */
    public static int GL_POINT_SPRITE() {
        return GL_POINT_SPRITE;
    }
    private static final int GL_COORD_REPLACE = (int)34914L;
    /**
     * {@snippet lang=c :
     * #define GL_COORD_REPLACE 34914
     * }
     */
    public static int GL_COORD_REPLACE() {
        return GL_COORD_REPLACE;
    }
    private static final int GL_POINT_SPRITE_COORD_ORIGIN = (int)36000L;
    /**
     * {@snippet lang=c :
     * #define GL_POINT_SPRITE_COORD_ORIGIN 36000
     * }
     */
    public static int GL_POINT_SPRITE_COORD_ORIGIN() {
        return GL_POINT_SPRITE_COORD_ORIGIN;
    }
    private static final int GL_LOWER_LEFT = (int)36001L;
    /**
     * {@snippet lang=c :
     * #define GL_LOWER_LEFT 36001
     * }
     */
    public static int GL_LOWER_LEFT() {
        return GL_LOWER_LEFT;
    }
    private static final int GL_UPPER_LEFT = (int)36002L;
    /**
     * {@snippet lang=c :
     * #define GL_UPPER_LEFT 36002
     * }
     */
    public static int GL_UPPER_LEFT() {
        return GL_UPPER_LEFT;
    }
    private static final int GL_STENCIL_BACK_FUNC = (int)34816L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_FUNC 34816
     * }
     */
    public static int GL_STENCIL_BACK_FUNC() {
        return GL_STENCIL_BACK_FUNC;
    }
    private static final int GL_STENCIL_BACK_VALUE_MASK = (int)36004L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_VALUE_MASK 36004
     * }
     */
    public static int GL_STENCIL_BACK_VALUE_MASK() {
        return GL_STENCIL_BACK_VALUE_MASK;
    }
    private static final int GL_STENCIL_BACK_REF = (int)36003L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_REF 36003
     * }
     */
    public static int GL_STENCIL_BACK_REF() {
        return GL_STENCIL_BACK_REF;
    }
    private static final int GL_STENCIL_BACK_FAIL = (int)34817L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_FAIL 34817
     * }
     */
    public static int GL_STENCIL_BACK_FAIL() {
        return GL_STENCIL_BACK_FAIL;
    }
    private static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = (int)34818L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_PASS_DEPTH_FAIL 34818
     * }
     */
    public static int GL_STENCIL_BACK_PASS_DEPTH_FAIL() {
        return GL_STENCIL_BACK_PASS_DEPTH_FAIL;
    }
    private static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = (int)34819L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_PASS_DEPTH_PASS 34819
     * }
     */
    public static int GL_STENCIL_BACK_PASS_DEPTH_PASS() {
        return GL_STENCIL_BACK_PASS_DEPTH_PASS;
    }
    private static final int GL_STENCIL_BACK_WRITEMASK = (int)36005L;
    /**
     * {@snippet lang=c :
     * #define GL_STENCIL_BACK_WRITEMASK 36005
     * }
     */
    public static int GL_STENCIL_BACK_WRITEMASK() {
        return GL_STENCIL_BACK_WRITEMASK;
    }
    private static final int GL_CURRENT_RASTER_SECONDARY_COLOR = (int)33887L;
    /**
     * {@snippet lang=c :
     * #define GL_CURRENT_RASTER_SECONDARY_COLOR 33887
     * }
     */
    public static int GL_CURRENT_RASTER_SECONDARY_COLOR() {
        return GL_CURRENT_RASTER_SECONDARY_COLOR;
    }
    private static final int GL_PIXEL_PACK_BUFFER = (int)35051L;
    /**
     * {@snippet lang=c :
     * #define GL_PIXEL_PACK_BUFFER 35051
     * }
     */
    public static int GL_PIXEL_PACK_BUFFER() {
        return GL_PIXEL_PACK_BUFFER;
    }
    private static final int GL_PIXEL_UNPACK_BUFFER = (int)35052L;
    /**
     * {@snippet lang=c :
     * #define GL_PIXEL_UNPACK_BUFFER 35052
     * }
     */
    public static int GL_PIXEL_UNPACK_BUFFER() {
        return GL_PIXEL_UNPACK_BUFFER;
    }
    private static final int GL_PIXEL_PACK_BUFFER_BINDING = (int)35053L;
    /**
     * {@snippet lang=c :
     * #define GL_PIXEL_PACK_BUFFER_BINDING 35053
     * }
     */
    public static int GL_PIXEL_PACK_BUFFER_BINDING() {
        return GL_PIXEL_PACK_BUFFER_BINDING;
    }
    private static final int GL_PIXEL_UNPACK_BUFFER_BINDING = (int)35055L;
    /**
     * {@snippet lang=c :
     * #define GL_PIXEL_UNPACK_BUFFER_BINDING 35055
     * }
     */
    public static int GL_PIXEL_UNPACK_BUFFER_BINDING() {
        return GL_PIXEL_UNPACK_BUFFER_BINDING;
    }
    private static final int GL_FLOAT_MAT2x3 = (int)35685L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT2x3 35685
     * }
     */
    public static int GL_FLOAT_MAT2x3() {
        return GL_FLOAT_MAT2x3;
    }
    private static final int GL_FLOAT_MAT2x4 = (int)35686L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT2x4 35686
     * }
     */
    public static int GL_FLOAT_MAT2x4() {
        return GL_FLOAT_MAT2x4;
    }
    private static final int GL_FLOAT_MAT3x2 = (int)35687L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT3x2 35687
     * }
     */
    public static int GL_FLOAT_MAT3x2() {
        return GL_FLOAT_MAT3x2;
    }
    private static final int GL_FLOAT_MAT3x4 = (int)35688L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT3x4 35688
     * }
     */
    public static int GL_FLOAT_MAT3x4() {
        return GL_FLOAT_MAT3x4;
    }
    private static final int GL_FLOAT_MAT4x2 = (int)35689L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT4x2 35689
     * }
     */
    public static int GL_FLOAT_MAT4x2() {
        return GL_FLOAT_MAT4x2;
    }
    private static final int GL_FLOAT_MAT4x3 = (int)35690L;
    /**
     * {@snippet lang=c :
     * #define GL_FLOAT_MAT4x3 35690
     * }
     */
    public static int GL_FLOAT_MAT4x3() {
        return GL_FLOAT_MAT4x3;
    }
    private static final int GL_SRGB = (int)35904L;
    /**
     * {@snippet lang=c :
     * #define GL_SRGB 35904
     * }
     */
    public static int GL_SRGB() {
        return GL_SRGB;
    }
    private static final int GL_SRGB8 = (int)35905L;
    /**
     * {@snippet lang=c :
     * #define GL_SRGB8 35905
     * }
     */
    public static int GL_SRGB8() {
        return GL_SRGB8;
    }
    private static final int GL_SRGB_ALPHA = (int)35906L;
    /**
     * {@snippet lang=c :
     * #define GL_SRGB_ALPHA 35906
     * }
     */
    public static int GL_SRGB_ALPHA() {
        return GL_SRGB_ALPHA;
    }
    private static final int GL_SRGB8_ALPHA8 = (int)35907L;
    /**
     * {@snippet lang=c :
     * #define GL_SRGB8_ALPHA8 35907
     * }
     */
    public static int GL_SRGB8_ALPHA8() {
        return GL_SRGB8_ALPHA8;
    }
    private static final int GL_SLUMINANCE_ALPHA = (int)35908L;
    /**
     * {@snippet lang=c :
     * #define GL_SLUMINANCE_ALPHA 35908
     * }
     */
    public static int GL_SLUMINANCE_ALPHA() {
        return GL_SLUMINANCE_ALPHA;
    }
    private static final int GL_SLUMINANCE8_ALPHA8 = (int)35909L;
    /**
     * {@snippet lang=c :
     * #define GL_SLUMINANCE8_ALPHA8 35909
     * }
     */
    public static int GL_SLUMINANCE8_ALPHA8() {
        return GL_SLUMINANCE8_ALPHA8;
    }
    private static final int GL_SLUMINANCE = (int)35910L;
    /**
     * {@snippet lang=c :
     * #define GL_SLUMINANCE 35910
     * }
     */
    public static int GL_SLUMINANCE() {
        return GL_SLUMINANCE;
    }
    private static final int GL_SLUMINANCE8 = (int)35911L;
    /**
     * {@snippet lang=c :
     * #define GL_SLUMINANCE8 35911
     * }
     */
    public static int GL_SLUMINANCE8() {
        return GL_SLUMINANCE8;
    }
    private static final int GL_COMPRESSED_SRGB = (int)35912L;
    /**
     * {@snippet lang=c :
     * #define GL_COMPRESSED_SRGB 35912
     * }
     */
    public static int GL_COMPRESSED_SRGB() {
        return GL_COMPRESSED_SRGB;
    }
    private static final int GL_COMPRESSED_SRGB_ALPHA = (int)35913L;
    /**
     * {@snippet lang=c :
     * #define GL_COMPRESSED_SRGB_ALPHA 35913
     * }
     */
    public static int GL_COMPRESSED_SRGB_ALPHA() {
        return GL_COMPRESSED_SRGB_ALPHA;
    }
    private static final int GL_COMPRESSED_SLUMINANCE = (int)35914L;
    /**
     * {@snippet lang=c :
     * #define GL_COMPRESSED_SLUMINANCE 35914
     * }
     */
    public static int GL_COMPRESSED_SLUMINANCE() {
        return GL_COMPRESSED_SLUMINANCE;
    }
    private static final int GL_COMPRESSED_SLUMINANCE_ALPHA = (int)35915L;
    /**
     * {@snippet lang=c :
     * #define GL_COMPRESSED_SLUMINANCE_ALPHA 35915
     * }
     */
    public static int GL_COMPRESSED_SLUMINANCE_ALPHA() {
        return GL_COMPRESSED_SLUMINANCE_ALPHA;
    }
    private static final int GLU_EXT_object_space_tess = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_EXT_object_space_tess 1
     * }
     */
    public static int GLU_EXT_object_space_tess() {
        return GLU_EXT_object_space_tess;
    }
    private static final int GLU_EXT_nurbs_tessellator = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_EXT_nurbs_tessellator 1
     * }
     */
    public static int GLU_EXT_nurbs_tessellator() {
        return GLU_EXT_nurbs_tessellator;
    }
    private static final int GLU_FALSE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLU_FALSE 0
     * }
     */
    public static int GLU_FALSE() {
        return GLU_FALSE;
    }
    private static final int GLU_TRUE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_TRUE 1
     * }
     */
    public static int GLU_TRUE() {
        return GLU_TRUE;
    }
    private static final int GLU_VERSION_1_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_VERSION_1_1 1
     * }
     */
    public static int GLU_VERSION_1_1() {
        return GLU_VERSION_1_1;
    }
    private static final int GLU_VERSION_1_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_VERSION_1_2 1
     * }
     */
    public static int GLU_VERSION_1_2() {
        return GLU_VERSION_1_2;
    }
    private static final int GLU_VERSION_1_3 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLU_VERSION_1_3 1
     * }
     */
    public static int GLU_VERSION_1_3() {
        return GLU_VERSION_1_3;
    }
    private static final int GLU_VERSION = (int)100800L;
    /**
     * {@snippet lang=c :
     * #define GLU_VERSION 100800
     * }
     */
    public static int GLU_VERSION() {
        return GLU_VERSION;
    }
    private static final int GLU_EXTENSIONS = (int)100801L;
    /**
     * {@snippet lang=c :
     * #define GLU_EXTENSIONS 100801
     * }
     */
    public static int GLU_EXTENSIONS() {
        return GLU_EXTENSIONS;
    }
    private static final int GLU_INVALID_ENUM = (int)100900L;
    /**
     * {@snippet lang=c :
     * #define GLU_INVALID_ENUM 100900
     * }
     */
    public static int GLU_INVALID_ENUM() {
        return GLU_INVALID_ENUM;
    }
    private static final int GLU_INVALID_VALUE = (int)100901L;
    /**
     * {@snippet lang=c :
     * #define GLU_INVALID_VALUE 100901
     * }
     */
    public static int GLU_INVALID_VALUE() {
        return GLU_INVALID_VALUE;
    }
    private static final int GLU_OUT_OF_MEMORY = (int)100902L;
    /**
     * {@snippet lang=c :
     * #define GLU_OUT_OF_MEMORY 100902
     * }
     */
    public static int GLU_OUT_OF_MEMORY() {
        return GLU_OUT_OF_MEMORY;
    }
    private static final int GLU_INCOMPATIBLE_GL_VERSION = (int)100903L;
    /**
     * {@snippet lang=c :
     * #define GLU_INCOMPATIBLE_GL_VERSION 100903
     * }
     */
    public static int GLU_INCOMPATIBLE_GL_VERSION() {
        return GLU_INCOMPATIBLE_GL_VERSION;
    }
    private static final int GLU_INVALID_OPERATION = (int)100904L;
    /**
     * {@snippet lang=c :
     * #define GLU_INVALID_OPERATION 100904
     * }
     */
    public static int GLU_INVALID_OPERATION() {
        return GLU_INVALID_OPERATION;
    }
    private static final int GLU_OUTLINE_POLYGON = (int)100240L;
    /**
     * {@snippet lang=c :
     * #define GLU_OUTLINE_POLYGON 100240
     * }
     */
    public static int GLU_OUTLINE_POLYGON() {
        return GLU_OUTLINE_POLYGON;
    }
    private static final int GLU_OUTLINE_PATCH = (int)100241L;
    /**
     * {@snippet lang=c :
     * #define GLU_OUTLINE_PATCH 100241
     * }
     */
    public static int GLU_OUTLINE_PATCH() {
        return GLU_OUTLINE_PATCH;
    }
    private static final int GLU_NURBS_ERROR = (int)100103L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR 100103
     * }
     */
    public static int GLU_NURBS_ERROR() {
        return GLU_NURBS_ERROR;
    }
    private static final int GLU_ERROR = (int)100103L;
    /**
     * {@snippet lang=c :
     * #define GLU_ERROR 100103
     * }
     */
    public static int GLU_ERROR() {
        return GLU_ERROR;
    }
    private static final int GLU_NURBS_BEGIN = (int)100164L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_BEGIN 100164
     * }
     */
    public static int GLU_NURBS_BEGIN() {
        return GLU_NURBS_BEGIN;
    }
    private static final int GLU_NURBS_BEGIN_EXT = (int)100164L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_BEGIN_EXT 100164
     * }
     */
    public static int GLU_NURBS_BEGIN_EXT() {
        return GLU_NURBS_BEGIN_EXT;
    }
    private static final int GLU_NURBS_VERTEX = (int)100165L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_VERTEX 100165
     * }
     */
    public static int GLU_NURBS_VERTEX() {
        return GLU_NURBS_VERTEX;
    }
    private static final int GLU_NURBS_VERTEX_EXT = (int)100165L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_VERTEX_EXT 100165
     * }
     */
    public static int GLU_NURBS_VERTEX_EXT() {
        return GLU_NURBS_VERTEX_EXT;
    }
    private static final int GLU_NURBS_NORMAL = (int)100166L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_NORMAL 100166
     * }
     */
    public static int GLU_NURBS_NORMAL() {
        return GLU_NURBS_NORMAL;
    }
    private static final int GLU_NURBS_NORMAL_EXT = (int)100166L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_NORMAL_EXT 100166
     * }
     */
    public static int GLU_NURBS_NORMAL_EXT() {
        return GLU_NURBS_NORMAL_EXT;
    }
    private static final int GLU_NURBS_COLOR = (int)100167L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_COLOR 100167
     * }
     */
    public static int GLU_NURBS_COLOR() {
        return GLU_NURBS_COLOR;
    }
    private static final int GLU_NURBS_COLOR_EXT = (int)100167L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_COLOR_EXT 100167
     * }
     */
    public static int GLU_NURBS_COLOR_EXT() {
        return GLU_NURBS_COLOR_EXT;
    }
    private static final int GLU_NURBS_TEXTURE_COORD = (int)100168L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TEXTURE_COORD 100168
     * }
     */
    public static int GLU_NURBS_TEXTURE_COORD() {
        return GLU_NURBS_TEXTURE_COORD;
    }
    private static final int GLU_NURBS_TEX_COORD_EXT = (int)100168L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TEX_COORD_EXT 100168
     * }
     */
    public static int GLU_NURBS_TEX_COORD_EXT() {
        return GLU_NURBS_TEX_COORD_EXT;
    }
    private static final int GLU_NURBS_END = (int)100169L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_END 100169
     * }
     */
    public static int GLU_NURBS_END() {
        return GLU_NURBS_END;
    }
    private static final int GLU_NURBS_END_EXT = (int)100169L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_END_EXT 100169
     * }
     */
    public static int GLU_NURBS_END_EXT() {
        return GLU_NURBS_END_EXT;
    }
    private static final int GLU_NURBS_BEGIN_DATA = (int)100170L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_BEGIN_DATA 100170
     * }
     */
    public static int GLU_NURBS_BEGIN_DATA() {
        return GLU_NURBS_BEGIN_DATA;
    }
    private static final int GLU_NURBS_BEGIN_DATA_EXT = (int)100170L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_BEGIN_DATA_EXT 100170
     * }
     */
    public static int GLU_NURBS_BEGIN_DATA_EXT() {
        return GLU_NURBS_BEGIN_DATA_EXT;
    }
    private static final int GLU_NURBS_VERTEX_DATA = (int)100171L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_VERTEX_DATA 100171
     * }
     */
    public static int GLU_NURBS_VERTEX_DATA() {
        return GLU_NURBS_VERTEX_DATA;
    }
    private static final int GLU_NURBS_VERTEX_DATA_EXT = (int)100171L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_VERTEX_DATA_EXT 100171
     * }
     */
    public static int GLU_NURBS_VERTEX_DATA_EXT() {
        return GLU_NURBS_VERTEX_DATA_EXT;
    }
    private static final int GLU_NURBS_NORMAL_DATA = (int)100172L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_NORMAL_DATA 100172
     * }
     */
    public static int GLU_NURBS_NORMAL_DATA() {
        return GLU_NURBS_NORMAL_DATA;
    }
    private static final int GLU_NURBS_NORMAL_DATA_EXT = (int)100172L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_NORMAL_DATA_EXT 100172
     * }
     */
    public static int GLU_NURBS_NORMAL_DATA_EXT() {
        return GLU_NURBS_NORMAL_DATA_EXT;
    }
    private static final int GLU_NURBS_COLOR_DATA = (int)100173L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_COLOR_DATA 100173
     * }
     */
    public static int GLU_NURBS_COLOR_DATA() {
        return GLU_NURBS_COLOR_DATA;
    }
    private static final int GLU_NURBS_COLOR_DATA_EXT = (int)100173L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_COLOR_DATA_EXT 100173
     * }
     */
    public static int GLU_NURBS_COLOR_DATA_EXT() {
        return GLU_NURBS_COLOR_DATA_EXT;
    }
    private static final int GLU_NURBS_TEXTURE_COORD_DATA = (int)100174L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TEXTURE_COORD_DATA 100174
     * }
     */
    public static int GLU_NURBS_TEXTURE_COORD_DATA() {
        return GLU_NURBS_TEXTURE_COORD_DATA;
    }
    private static final int GLU_NURBS_TEX_COORD_DATA_EXT = (int)100174L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TEX_COORD_DATA_EXT 100174
     * }
     */
    public static int GLU_NURBS_TEX_COORD_DATA_EXT() {
        return GLU_NURBS_TEX_COORD_DATA_EXT;
    }
    private static final int GLU_NURBS_END_DATA = (int)100175L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_END_DATA 100175
     * }
     */
    public static int GLU_NURBS_END_DATA() {
        return GLU_NURBS_END_DATA;
    }
    private static final int GLU_NURBS_END_DATA_EXT = (int)100175L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_END_DATA_EXT 100175
     * }
     */
    public static int GLU_NURBS_END_DATA_EXT() {
        return GLU_NURBS_END_DATA_EXT;
    }
    private static final int GLU_NURBS_ERROR1 = (int)100251L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR1 100251
     * }
     */
    public static int GLU_NURBS_ERROR1() {
        return GLU_NURBS_ERROR1;
    }
    private static final int GLU_NURBS_ERROR2 = (int)100252L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR2 100252
     * }
     */
    public static int GLU_NURBS_ERROR2() {
        return GLU_NURBS_ERROR2;
    }
    private static final int GLU_NURBS_ERROR3 = (int)100253L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR3 100253
     * }
     */
    public static int GLU_NURBS_ERROR3() {
        return GLU_NURBS_ERROR3;
    }
    private static final int GLU_NURBS_ERROR4 = (int)100254L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR4 100254
     * }
     */
    public static int GLU_NURBS_ERROR4() {
        return GLU_NURBS_ERROR4;
    }
    private static final int GLU_NURBS_ERROR5 = (int)100255L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR5 100255
     * }
     */
    public static int GLU_NURBS_ERROR5() {
        return GLU_NURBS_ERROR5;
    }
    private static final int GLU_NURBS_ERROR6 = (int)100256L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR6 100256
     * }
     */
    public static int GLU_NURBS_ERROR6() {
        return GLU_NURBS_ERROR6;
    }
    private static final int GLU_NURBS_ERROR7 = (int)100257L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR7 100257
     * }
     */
    public static int GLU_NURBS_ERROR7() {
        return GLU_NURBS_ERROR7;
    }
    private static final int GLU_NURBS_ERROR8 = (int)100258L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR8 100258
     * }
     */
    public static int GLU_NURBS_ERROR8() {
        return GLU_NURBS_ERROR8;
    }
    private static final int GLU_NURBS_ERROR9 = (int)100259L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR9 100259
     * }
     */
    public static int GLU_NURBS_ERROR9() {
        return GLU_NURBS_ERROR9;
    }
    private static final int GLU_NURBS_ERROR10 = (int)100260L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR10 100260
     * }
     */
    public static int GLU_NURBS_ERROR10() {
        return GLU_NURBS_ERROR10;
    }
    private static final int GLU_NURBS_ERROR11 = (int)100261L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR11 100261
     * }
     */
    public static int GLU_NURBS_ERROR11() {
        return GLU_NURBS_ERROR11;
    }
    private static final int GLU_NURBS_ERROR12 = (int)100262L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR12 100262
     * }
     */
    public static int GLU_NURBS_ERROR12() {
        return GLU_NURBS_ERROR12;
    }
    private static final int GLU_NURBS_ERROR13 = (int)100263L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR13 100263
     * }
     */
    public static int GLU_NURBS_ERROR13() {
        return GLU_NURBS_ERROR13;
    }
    private static final int GLU_NURBS_ERROR14 = (int)100264L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR14 100264
     * }
     */
    public static int GLU_NURBS_ERROR14() {
        return GLU_NURBS_ERROR14;
    }
    private static final int GLU_NURBS_ERROR15 = (int)100265L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR15 100265
     * }
     */
    public static int GLU_NURBS_ERROR15() {
        return GLU_NURBS_ERROR15;
    }
    private static final int GLU_NURBS_ERROR16 = (int)100266L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR16 100266
     * }
     */
    public static int GLU_NURBS_ERROR16() {
        return GLU_NURBS_ERROR16;
    }
    private static final int GLU_NURBS_ERROR17 = (int)100267L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR17 100267
     * }
     */
    public static int GLU_NURBS_ERROR17() {
        return GLU_NURBS_ERROR17;
    }
    private static final int GLU_NURBS_ERROR18 = (int)100268L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR18 100268
     * }
     */
    public static int GLU_NURBS_ERROR18() {
        return GLU_NURBS_ERROR18;
    }
    private static final int GLU_NURBS_ERROR19 = (int)100269L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR19 100269
     * }
     */
    public static int GLU_NURBS_ERROR19() {
        return GLU_NURBS_ERROR19;
    }
    private static final int GLU_NURBS_ERROR20 = (int)100270L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR20 100270
     * }
     */
    public static int GLU_NURBS_ERROR20() {
        return GLU_NURBS_ERROR20;
    }
    private static final int GLU_NURBS_ERROR21 = (int)100271L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR21 100271
     * }
     */
    public static int GLU_NURBS_ERROR21() {
        return GLU_NURBS_ERROR21;
    }
    private static final int GLU_NURBS_ERROR22 = (int)100272L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR22 100272
     * }
     */
    public static int GLU_NURBS_ERROR22() {
        return GLU_NURBS_ERROR22;
    }
    private static final int GLU_NURBS_ERROR23 = (int)100273L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR23 100273
     * }
     */
    public static int GLU_NURBS_ERROR23() {
        return GLU_NURBS_ERROR23;
    }
    private static final int GLU_NURBS_ERROR24 = (int)100274L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR24 100274
     * }
     */
    public static int GLU_NURBS_ERROR24() {
        return GLU_NURBS_ERROR24;
    }
    private static final int GLU_NURBS_ERROR25 = (int)100275L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR25 100275
     * }
     */
    public static int GLU_NURBS_ERROR25() {
        return GLU_NURBS_ERROR25;
    }
    private static final int GLU_NURBS_ERROR26 = (int)100276L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR26 100276
     * }
     */
    public static int GLU_NURBS_ERROR26() {
        return GLU_NURBS_ERROR26;
    }
    private static final int GLU_NURBS_ERROR27 = (int)100277L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR27 100277
     * }
     */
    public static int GLU_NURBS_ERROR27() {
        return GLU_NURBS_ERROR27;
    }
    private static final int GLU_NURBS_ERROR28 = (int)100278L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR28 100278
     * }
     */
    public static int GLU_NURBS_ERROR28() {
        return GLU_NURBS_ERROR28;
    }
    private static final int GLU_NURBS_ERROR29 = (int)100279L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR29 100279
     * }
     */
    public static int GLU_NURBS_ERROR29() {
        return GLU_NURBS_ERROR29;
    }
    private static final int GLU_NURBS_ERROR30 = (int)100280L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR30 100280
     * }
     */
    public static int GLU_NURBS_ERROR30() {
        return GLU_NURBS_ERROR30;
    }
    private static final int GLU_NURBS_ERROR31 = (int)100281L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR31 100281
     * }
     */
    public static int GLU_NURBS_ERROR31() {
        return GLU_NURBS_ERROR31;
    }
    private static final int GLU_NURBS_ERROR32 = (int)100282L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR32 100282
     * }
     */
    public static int GLU_NURBS_ERROR32() {
        return GLU_NURBS_ERROR32;
    }
    private static final int GLU_NURBS_ERROR33 = (int)100283L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR33 100283
     * }
     */
    public static int GLU_NURBS_ERROR33() {
        return GLU_NURBS_ERROR33;
    }
    private static final int GLU_NURBS_ERROR34 = (int)100284L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR34 100284
     * }
     */
    public static int GLU_NURBS_ERROR34() {
        return GLU_NURBS_ERROR34;
    }
    private static final int GLU_NURBS_ERROR35 = (int)100285L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR35 100285
     * }
     */
    public static int GLU_NURBS_ERROR35() {
        return GLU_NURBS_ERROR35;
    }
    private static final int GLU_NURBS_ERROR36 = (int)100286L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR36 100286
     * }
     */
    public static int GLU_NURBS_ERROR36() {
        return GLU_NURBS_ERROR36;
    }
    private static final int GLU_NURBS_ERROR37 = (int)100287L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_ERROR37 100287
     * }
     */
    public static int GLU_NURBS_ERROR37() {
        return GLU_NURBS_ERROR37;
    }
    private static final int GLU_AUTO_LOAD_MATRIX = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define GLU_AUTO_LOAD_MATRIX 100200
     * }
     */
    public static int GLU_AUTO_LOAD_MATRIX() {
        return GLU_AUTO_LOAD_MATRIX;
    }
    private static final int GLU_CULLING = (int)100201L;
    /**
     * {@snippet lang=c :
     * #define GLU_CULLING 100201
     * }
     */
    public static int GLU_CULLING() {
        return GLU_CULLING;
    }
    private static final int GLU_SAMPLING_TOLERANCE = (int)100203L;
    /**
     * {@snippet lang=c :
     * #define GLU_SAMPLING_TOLERANCE 100203
     * }
     */
    public static int GLU_SAMPLING_TOLERANCE() {
        return GLU_SAMPLING_TOLERANCE;
    }
    private static final int GLU_DISPLAY_MODE = (int)100204L;
    /**
     * {@snippet lang=c :
     * #define GLU_DISPLAY_MODE 100204
     * }
     */
    public static int GLU_DISPLAY_MODE() {
        return GLU_DISPLAY_MODE;
    }
    private static final int GLU_PARAMETRIC_TOLERANCE = (int)100202L;
    /**
     * {@snippet lang=c :
     * #define GLU_PARAMETRIC_TOLERANCE 100202
     * }
     */
    public static int GLU_PARAMETRIC_TOLERANCE() {
        return GLU_PARAMETRIC_TOLERANCE;
    }
    private static final int GLU_SAMPLING_METHOD = (int)100205L;
    /**
     * {@snippet lang=c :
     * #define GLU_SAMPLING_METHOD 100205
     * }
     */
    public static int GLU_SAMPLING_METHOD() {
        return GLU_SAMPLING_METHOD;
    }
    private static final int GLU_U_STEP = (int)100206L;
    /**
     * {@snippet lang=c :
     * #define GLU_U_STEP 100206
     * }
     */
    public static int GLU_U_STEP() {
        return GLU_U_STEP;
    }
    private static final int GLU_V_STEP = (int)100207L;
    /**
     * {@snippet lang=c :
     * #define GLU_V_STEP 100207
     * }
     */
    public static int GLU_V_STEP() {
        return GLU_V_STEP;
    }
    private static final int GLU_NURBS_MODE = (int)100160L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_MODE 100160
     * }
     */
    public static int GLU_NURBS_MODE() {
        return GLU_NURBS_MODE;
    }
    private static final int GLU_NURBS_MODE_EXT = (int)100160L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_MODE_EXT 100160
     * }
     */
    public static int GLU_NURBS_MODE_EXT() {
        return GLU_NURBS_MODE_EXT;
    }
    private static final int GLU_NURBS_TESSELLATOR = (int)100161L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TESSELLATOR 100161
     * }
     */
    public static int GLU_NURBS_TESSELLATOR() {
        return GLU_NURBS_TESSELLATOR;
    }
    private static final int GLU_NURBS_TESSELLATOR_EXT = (int)100161L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_TESSELLATOR_EXT 100161
     * }
     */
    public static int GLU_NURBS_TESSELLATOR_EXT() {
        return GLU_NURBS_TESSELLATOR_EXT;
    }
    private static final int GLU_NURBS_RENDERER = (int)100162L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_RENDERER 100162
     * }
     */
    public static int GLU_NURBS_RENDERER() {
        return GLU_NURBS_RENDERER;
    }
    private static final int GLU_NURBS_RENDERER_EXT = (int)100162L;
    /**
     * {@snippet lang=c :
     * #define GLU_NURBS_RENDERER_EXT 100162
     * }
     */
    public static int GLU_NURBS_RENDERER_EXT() {
        return GLU_NURBS_RENDERER_EXT;
    }
    private static final int GLU_OBJECT_PARAMETRIC_ERROR = (int)100208L;
    /**
     * {@snippet lang=c :
     * #define GLU_OBJECT_PARAMETRIC_ERROR 100208
     * }
     */
    public static int GLU_OBJECT_PARAMETRIC_ERROR() {
        return GLU_OBJECT_PARAMETRIC_ERROR;
    }
    private static final int GLU_OBJECT_PARAMETRIC_ERROR_EXT = (int)100208L;
    /**
     * {@snippet lang=c :
     * #define GLU_OBJECT_PARAMETRIC_ERROR_EXT 100208
     * }
     */
    public static int GLU_OBJECT_PARAMETRIC_ERROR_EXT() {
        return GLU_OBJECT_PARAMETRIC_ERROR_EXT;
    }
    private static final int GLU_OBJECT_PATH_LENGTH = (int)100209L;
    /**
     * {@snippet lang=c :
     * #define GLU_OBJECT_PATH_LENGTH 100209
     * }
     */
    public static int GLU_OBJECT_PATH_LENGTH() {
        return GLU_OBJECT_PATH_LENGTH;
    }
    private static final int GLU_OBJECT_PATH_LENGTH_EXT = (int)100209L;
    /**
     * {@snippet lang=c :
     * #define GLU_OBJECT_PATH_LENGTH_EXT 100209
     * }
     */
    public static int GLU_OBJECT_PATH_LENGTH_EXT() {
        return GLU_OBJECT_PATH_LENGTH_EXT;
    }
    private static final int GLU_PATH_LENGTH = (int)100215L;
    /**
     * {@snippet lang=c :
     * #define GLU_PATH_LENGTH 100215
     * }
     */
    public static int GLU_PATH_LENGTH() {
        return GLU_PATH_LENGTH;
    }
    private static final int GLU_PARAMETRIC_ERROR = (int)100216L;
    /**
     * {@snippet lang=c :
     * #define GLU_PARAMETRIC_ERROR 100216
     * }
     */
    public static int GLU_PARAMETRIC_ERROR() {
        return GLU_PARAMETRIC_ERROR;
    }
    private static final int GLU_DOMAIN_DISTANCE = (int)100217L;
    /**
     * {@snippet lang=c :
     * #define GLU_DOMAIN_DISTANCE 100217
     * }
     */
    public static int GLU_DOMAIN_DISTANCE() {
        return GLU_DOMAIN_DISTANCE;
    }
    private static final int GLU_MAP1_TRIM_2 = (int)100210L;
    /**
     * {@snippet lang=c :
     * #define GLU_MAP1_TRIM_2 100210
     * }
     */
    public static int GLU_MAP1_TRIM_2() {
        return GLU_MAP1_TRIM_2;
    }
    private static final int GLU_MAP1_TRIM_3 = (int)100211L;
    /**
     * {@snippet lang=c :
     * #define GLU_MAP1_TRIM_3 100211
     * }
     */
    public static int GLU_MAP1_TRIM_3() {
        return GLU_MAP1_TRIM_3;
    }
    private static final int GLU_POINT = (int)100010L;
    /**
     * {@snippet lang=c :
     * #define GLU_POINT 100010
     * }
     */
    public static int GLU_POINT() {
        return GLU_POINT;
    }
    private static final int GLU_LINE = (int)100011L;
    /**
     * {@snippet lang=c :
     * #define GLU_LINE 100011
     * }
     */
    public static int GLU_LINE() {
        return GLU_LINE;
    }
    private static final int GLU_FILL = (int)100012L;
    /**
     * {@snippet lang=c :
     * #define GLU_FILL 100012
     * }
     */
    public static int GLU_FILL() {
        return GLU_FILL;
    }
    private static final int GLU_SILHOUETTE = (int)100013L;
    /**
     * {@snippet lang=c :
     * #define GLU_SILHOUETTE 100013
     * }
     */
    public static int GLU_SILHOUETTE() {
        return GLU_SILHOUETTE;
    }
    private static final int GLU_SMOOTH = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define GLU_SMOOTH 100000
     * }
     */
    public static int GLU_SMOOTH() {
        return GLU_SMOOTH;
    }
    private static final int GLU_FLAT = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define GLU_FLAT 100001
     * }
     */
    public static int GLU_FLAT() {
        return GLU_FLAT;
    }
    private static final int GLU_NONE = (int)100002L;
    /**
     * {@snippet lang=c :
     * #define GLU_NONE 100002
     * }
     */
    public static int GLU_NONE() {
        return GLU_NONE;
    }
    private static final int GLU_OUTSIDE = (int)100020L;
    /**
     * {@snippet lang=c :
     * #define GLU_OUTSIDE 100020
     * }
     */
    public static int GLU_OUTSIDE() {
        return GLU_OUTSIDE;
    }
    private static final int GLU_INSIDE = (int)100021L;
    /**
     * {@snippet lang=c :
     * #define GLU_INSIDE 100021
     * }
     */
    public static int GLU_INSIDE() {
        return GLU_INSIDE;
    }
    private static final int GLU_TESS_BEGIN = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_BEGIN 100100
     * }
     */
    public static int GLU_TESS_BEGIN() {
        return GLU_TESS_BEGIN;
    }
    private static final int GLU_BEGIN = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define GLU_BEGIN 100100
     * }
     */
    public static int GLU_BEGIN() {
        return GLU_BEGIN;
    }
    private static final int GLU_TESS_VERTEX = (int)100101L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_VERTEX 100101
     * }
     */
    public static int GLU_TESS_VERTEX() {
        return GLU_TESS_VERTEX;
    }
    private static final int GLU_VERTEX = (int)100101L;
    /**
     * {@snippet lang=c :
     * #define GLU_VERTEX 100101
     * }
     */
    public static int GLU_VERTEX() {
        return GLU_VERTEX;
    }
    private static final int GLU_TESS_END = (int)100102L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_END 100102
     * }
     */
    public static int GLU_TESS_END() {
        return GLU_TESS_END;
    }
    private static final int GLU_END = (int)100102L;
    /**
     * {@snippet lang=c :
     * #define GLU_END 100102
     * }
     */
    public static int GLU_END() {
        return GLU_END;
    }
    private static final int GLU_TESS_ERROR = (int)100103L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR 100103
     * }
     */
    public static int GLU_TESS_ERROR() {
        return GLU_TESS_ERROR;
    }
    private static final int GLU_TESS_EDGE_FLAG = (int)100104L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_EDGE_FLAG 100104
     * }
     */
    public static int GLU_TESS_EDGE_FLAG() {
        return GLU_TESS_EDGE_FLAG;
    }
    private static final int GLU_EDGE_FLAG = (int)100104L;
    /**
     * {@snippet lang=c :
     * #define GLU_EDGE_FLAG 100104
     * }
     */
    public static int GLU_EDGE_FLAG() {
        return GLU_EDGE_FLAG;
    }
    private static final int GLU_TESS_COMBINE = (int)100105L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_COMBINE 100105
     * }
     */
    public static int GLU_TESS_COMBINE() {
        return GLU_TESS_COMBINE;
    }
    private static final int GLU_TESS_BEGIN_DATA = (int)100106L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_BEGIN_DATA 100106
     * }
     */
    public static int GLU_TESS_BEGIN_DATA() {
        return GLU_TESS_BEGIN_DATA;
    }
    private static final int GLU_TESS_VERTEX_DATA = (int)100107L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_VERTEX_DATA 100107
     * }
     */
    public static int GLU_TESS_VERTEX_DATA() {
        return GLU_TESS_VERTEX_DATA;
    }
    private static final int GLU_TESS_END_DATA = (int)100108L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_END_DATA 100108
     * }
     */
    public static int GLU_TESS_END_DATA() {
        return GLU_TESS_END_DATA;
    }
    private static final int GLU_TESS_ERROR_DATA = (int)100109L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR_DATA 100109
     * }
     */
    public static int GLU_TESS_ERROR_DATA() {
        return GLU_TESS_ERROR_DATA;
    }
    private static final int GLU_TESS_EDGE_FLAG_DATA = (int)100110L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_EDGE_FLAG_DATA 100110
     * }
     */
    public static int GLU_TESS_EDGE_FLAG_DATA() {
        return GLU_TESS_EDGE_FLAG_DATA;
    }
    private static final int GLU_TESS_COMBINE_DATA = (int)100111L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_COMBINE_DATA 100111
     * }
     */
    public static int GLU_TESS_COMBINE_DATA() {
        return GLU_TESS_COMBINE_DATA;
    }
    private static final int GLU_CW = (int)100120L;
    /**
     * {@snippet lang=c :
     * #define GLU_CW 100120
     * }
     */
    public static int GLU_CW() {
        return GLU_CW;
    }
    private static final int GLU_CCW = (int)100121L;
    /**
     * {@snippet lang=c :
     * #define GLU_CCW 100121
     * }
     */
    public static int GLU_CCW() {
        return GLU_CCW;
    }
    private static final int GLU_INTERIOR = (int)100122L;
    /**
     * {@snippet lang=c :
     * #define GLU_INTERIOR 100122
     * }
     */
    public static int GLU_INTERIOR() {
        return GLU_INTERIOR;
    }
    private static final int GLU_EXTERIOR = (int)100123L;
    /**
     * {@snippet lang=c :
     * #define GLU_EXTERIOR 100123
     * }
     */
    public static int GLU_EXTERIOR() {
        return GLU_EXTERIOR;
    }
    private static final int GLU_UNKNOWN = (int)100124L;
    /**
     * {@snippet lang=c :
     * #define GLU_UNKNOWN 100124
     * }
     */
    public static int GLU_UNKNOWN() {
        return GLU_UNKNOWN;
    }
    private static final int GLU_TESS_WINDING_RULE = (int)100140L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_RULE 100140
     * }
     */
    public static int GLU_TESS_WINDING_RULE() {
        return GLU_TESS_WINDING_RULE;
    }
    private static final int GLU_TESS_BOUNDARY_ONLY = (int)100141L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_BOUNDARY_ONLY 100141
     * }
     */
    public static int GLU_TESS_BOUNDARY_ONLY() {
        return GLU_TESS_BOUNDARY_ONLY;
    }
    private static final int GLU_TESS_TOLERANCE = (int)100142L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_TOLERANCE 100142
     * }
     */
    public static int GLU_TESS_TOLERANCE() {
        return GLU_TESS_TOLERANCE;
    }
    private static final int GLU_TESS_ERROR1 = (int)100151L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR1 100151
     * }
     */
    public static int GLU_TESS_ERROR1() {
        return GLU_TESS_ERROR1;
    }
    private static final int GLU_TESS_ERROR2 = (int)100152L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR2 100152
     * }
     */
    public static int GLU_TESS_ERROR2() {
        return GLU_TESS_ERROR2;
    }
    private static final int GLU_TESS_ERROR3 = (int)100153L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR3 100153
     * }
     */
    public static int GLU_TESS_ERROR3() {
        return GLU_TESS_ERROR3;
    }
    private static final int GLU_TESS_ERROR4 = (int)100154L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR4 100154
     * }
     */
    public static int GLU_TESS_ERROR4() {
        return GLU_TESS_ERROR4;
    }
    private static final int GLU_TESS_ERROR5 = (int)100155L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR5 100155
     * }
     */
    public static int GLU_TESS_ERROR5() {
        return GLU_TESS_ERROR5;
    }
    private static final int GLU_TESS_ERROR6 = (int)100156L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR6 100156
     * }
     */
    public static int GLU_TESS_ERROR6() {
        return GLU_TESS_ERROR6;
    }
    private static final int GLU_TESS_ERROR7 = (int)100157L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR7 100157
     * }
     */
    public static int GLU_TESS_ERROR7() {
        return GLU_TESS_ERROR7;
    }
    private static final int GLU_TESS_ERROR8 = (int)100158L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_ERROR8 100158
     * }
     */
    public static int GLU_TESS_ERROR8() {
        return GLU_TESS_ERROR8;
    }
    private static final int GLU_TESS_MISSING_BEGIN_POLYGON = (int)100151L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_MISSING_BEGIN_POLYGON 100151
     * }
     */
    public static int GLU_TESS_MISSING_BEGIN_POLYGON() {
        return GLU_TESS_MISSING_BEGIN_POLYGON;
    }
    private static final int GLU_TESS_MISSING_BEGIN_CONTOUR = (int)100152L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_MISSING_BEGIN_CONTOUR 100152
     * }
     */
    public static int GLU_TESS_MISSING_BEGIN_CONTOUR() {
        return GLU_TESS_MISSING_BEGIN_CONTOUR;
    }
    private static final int GLU_TESS_MISSING_END_POLYGON = (int)100153L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_MISSING_END_POLYGON 100153
     * }
     */
    public static int GLU_TESS_MISSING_END_POLYGON() {
        return GLU_TESS_MISSING_END_POLYGON;
    }
    private static final int GLU_TESS_MISSING_END_CONTOUR = (int)100154L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_MISSING_END_CONTOUR 100154
     * }
     */
    public static int GLU_TESS_MISSING_END_CONTOUR() {
        return GLU_TESS_MISSING_END_CONTOUR;
    }
    private static final int GLU_TESS_COORD_TOO_LARGE = (int)100155L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_COORD_TOO_LARGE 100155
     * }
     */
    public static int GLU_TESS_COORD_TOO_LARGE() {
        return GLU_TESS_COORD_TOO_LARGE;
    }
    private static final int GLU_TESS_NEED_COMBINE_CALLBACK = (int)100156L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_NEED_COMBINE_CALLBACK 100156
     * }
     */
    public static int GLU_TESS_NEED_COMBINE_CALLBACK() {
        return GLU_TESS_NEED_COMBINE_CALLBACK;
    }
    private static final int GLU_TESS_WINDING_ODD = (int)100130L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_ODD 100130
     * }
     */
    public static int GLU_TESS_WINDING_ODD() {
        return GLU_TESS_WINDING_ODD;
    }
    private static final int GLU_TESS_WINDING_NONZERO = (int)100131L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_NONZERO 100131
     * }
     */
    public static int GLU_TESS_WINDING_NONZERO() {
        return GLU_TESS_WINDING_NONZERO;
    }
    private static final int GLU_TESS_WINDING_POSITIVE = (int)100132L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_POSITIVE 100132
     * }
     */
    public static int GLU_TESS_WINDING_POSITIVE() {
        return GLU_TESS_WINDING_POSITIVE;
    }
    private static final int GLU_TESS_WINDING_NEGATIVE = (int)100133L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_NEGATIVE 100133
     * }
     */
    public static int GLU_TESS_WINDING_NEGATIVE() {
        return GLU_TESS_WINDING_NEGATIVE;
    }
    private static final int GLU_TESS_WINDING_ABS_GEQ_TWO = (int)100134L;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_WINDING_ABS_GEQ_TWO 100134
     * }
     */
    public static int GLU_TESS_WINDING_ABS_GEQ_TWO() {
        return GLU_TESS_WINDING_ABS_GEQ_TWO;
    }
    private static final int GLUT_API_VERSION = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLUT_API_VERSION 5
     * }
     */
    public static int GLUT_API_VERSION() {
        return GLUT_API_VERSION;
    }
    private static final int GLUT_XLIB_IMPLEMENTATION = (int)15L;
    /**
     * {@snippet lang=c :
     * #define GLUT_XLIB_IMPLEMENTATION 15
     * }
     */
    public static int GLUT_XLIB_IMPLEMENTATION() {
        return GLUT_XLIB_IMPLEMENTATION;
    }
    private static final int GLUT_MACOSX_IMPLEMENTATION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MACOSX_IMPLEMENTATION 4
     * }
     */
    public static int GLUT_MACOSX_IMPLEMENTATION() {
        return GLUT_MACOSX_IMPLEMENTATION;
    }
    private static final int GLUT_RGB = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_RGB 0
     * }
     */
    public static int GLUT_RGB() {
        return GLUT_RGB;
    }
    private static final int GLUT_INDEX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INDEX 1
     * }
     */
    public static int GLUT_INDEX() {
        return GLUT_INDEX;
    }
    private static final int GLUT_SINGLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_SINGLE 0
     * }
     */
    public static int GLUT_SINGLE() {
        return GLUT_SINGLE;
    }
    private static final int GLUT_DOUBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DOUBLE 2
     * }
     */
    public static int GLUT_DOUBLE() {
        return GLUT_DOUBLE;
    }
    private static final int GLUT_ACCUM = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ACCUM 4
     * }
     */
    public static int GLUT_ACCUM() {
        return GLUT_ACCUM;
    }
    private static final int GLUT_ALPHA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ALPHA 8
     * }
     */
    public static int GLUT_ALPHA() {
        return GLUT_ALPHA;
    }
    private static final int GLUT_DEPTH = (int)16L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DEPTH 16
     * }
     */
    public static int GLUT_DEPTH() {
        return GLUT_DEPTH;
    }
    private static final int GLUT_STENCIL = (int)32L;
    /**
     * {@snippet lang=c :
     * #define GLUT_STENCIL 32
     * }
     */
    public static int GLUT_STENCIL() {
        return GLUT_STENCIL;
    }
    private static final int GLUT_MULTISAMPLE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MULTISAMPLE 128
     * }
     */
    public static int GLUT_MULTISAMPLE() {
        return GLUT_MULTISAMPLE;
    }
    private static final int GLUT_STEREO = (int)256L;
    /**
     * {@snippet lang=c :
     * #define GLUT_STEREO 256
     * }
     */
    public static int GLUT_STEREO() {
        return GLUT_STEREO;
    }
    private static final int GLUT_LUMINANCE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define GLUT_LUMINANCE 512
     * }
     */
    public static int GLUT_LUMINANCE() {
        return GLUT_LUMINANCE;
    }
    private static final int GLUT_NO_RECOVERY = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NO_RECOVERY 1024
     * }
     */
    public static int GLUT_NO_RECOVERY() {
        return GLUT_NO_RECOVERY;
    }
    private static final int GLUT_3_2_CORE_PROFILE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define GLUT_3_2_CORE_PROFILE 2048
     * }
     */
    public static int GLUT_3_2_CORE_PROFILE() {
        return GLUT_3_2_CORE_PROFILE;
    }
    private static final int GLUT_LEFT_BUTTON = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_LEFT_BUTTON 0
     * }
     */
    public static int GLUT_LEFT_BUTTON() {
        return GLUT_LEFT_BUTTON;
    }
    private static final int GLUT_MIDDLE_BUTTON = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MIDDLE_BUTTON 1
     * }
     */
    public static int GLUT_MIDDLE_BUTTON() {
        return GLUT_MIDDLE_BUTTON;
    }
    private static final int GLUT_RIGHT_BUTTON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_RIGHT_BUTTON 2
     * }
     */
    public static int GLUT_RIGHT_BUTTON() {
        return GLUT_RIGHT_BUTTON;
    }
    private static final int GLUT_DOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DOWN 0
     * }
     */
    public static int GLUT_DOWN() {
        return GLUT_DOWN;
    }
    private static final int GLUT_UP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_UP 1
     * }
     */
    public static int GLUT_UP() {
        return GLUT_UP;
    }
    private static final int GLUT_KEY_F1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F1 1
     * }
     */
    public static int GLUT_KEY_F1() {
        return GLUT_KEY_F1;
    }
    private static final int GLUT_KEY_F2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F2 2
     * }
     */
    public static int GLUT_KEY_F2() {
        return GLUT_KEY_F2;
    }
    private static final int GLUT_KEY_F3 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F3 3
     * }
     */
    public static int GLUT_KEY_F3() {
        return GLUT_KEY_F3;
    }
    private static final int GLUT_KEY_F4 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F4 4
     * }
     */
    public static int GLUT_KEY_F4() {
        return GLUT_KEY_F4;
    }
    private static final int GLUT_KEY_F5 = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F5 5
     * }
     */
    public static int GLUT_KEY_F5() {
        return GLUT_KEY_F5;
    }
    private static final int GLUT_KEY_F6 = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F6 6
     * }
     */
    public static int GLUT_KEY_F6() {
        return GLUT_KEY_F6;
    }
    private static final int GLUT_KEY_F7 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F7 7
     * }
     */
    public static int GLUT_KEY_F7() {
        return GLUT_KEY_F7;
    }
    private static final int GLUT_KEY_F8 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F8 8
     * }
     */
    public static int GLUT_KEY_F8() {
        return GLUT_KEY_F8;
    }
    private static final int GLUT_KEY_F9 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F9 9
     * }
     */
    public static int GLUT_KEY_F9() {
        return GLUT_KEY_F9;
    }
    private static final int GLUT_KEY_F10 = (int)10L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F10 10
     * }
     */
    public static int GLUT_KEY_F10() {
        return GLUT_KEY_F10;
    }
    private static final int GLUT_KEY_F11 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F11 11
     * }
     */
    public static int GLUT_KEY_F11() {
        return GLUT_KEY_F11;
    }
    private static final int GLUT_KEY_F12 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_F12 12
     * }
     */
    public static int GLUT_KEY_F12() {
        return GLUT_KEY_F12;
    }
    private static final int GLUT_KEY_LEFT = (int)100L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_LEFT 100
     * }
     */
    public static int GLUT_KEY_LEFT() {
        return GLUT_KEY_LEFT;
    }
    private static final int GLUT_KEY_UP = (int)101L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_UP 101
     * }
     */
    public static int GLUT_KEY_UP() {
        return GLUT_KEY_UP;
    }
    private static final int GLUT_KEY_RIGHT = (int)102L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_RIGHT 102
     * }
     */
    public static int GLUT_KEY_RIGHT() {
        return GLUT_KEY_RIGHT;
    }
    private static final int GLUT_KEY_DOWN = (int)103L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_DOWN 103
     * }
     */
    public static int GLUT_KEY_DOWN() {
        return GLUT_KEY_DOWN;
    }
    private static final int GLUT_KEY_PAGE_UP = (int)104L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_PAGE_UP 104
     * }
     */
    public static int GLUT_KEY_PAGE_UP() {
        return GLUT_KEY_PAGE_UP;
    }
    private static final int GLUT_KEY_PAGE_DOWN = (int)105L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_PAGE_DOWN 105
     * }
     */
    public static int GLUT_KEY_PAGE_DOWN() {
        return GLUT_KEY_PAGE_DOWN;
    }
    private static final int GLUT_KEY_HOME = (int)106L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_HOME 106
     * }
     */
    public static int GLUT_KEY_HOME() {
        return GLUT_KEY_HOME;
    }
    private static final int GLUT_KEY_END = (int)107L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_END 107
     * }
     */
    public static int GLUT_KEY_END() {
        return GLUT_KEY_END;
    }
    private static final int GLUT_KEY_INSERT = (int)108L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_INSERT 108
     * }
     */
    public static int GLUT_KEY_INSERT() {
        return GLUT_KEY_INSERT;
    }
    private static final int GLUT_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_LEFT 0
     * }
     */
    public static int GLUT_LEFT() {
        return GLUT_LEFT;
    }
    private static final int GLUT_ENTERED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ENTERED 1
     * }
     */
    public static int GLUT_ENTERED() {
        return GLUT_ENTERED;
    }
    private static final int GLUT_MENU_NOT_IN_USE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MENU_NOT_IN_USE 0
     * }
     */
    public static int GLUT_MENU_NOT_IN_USE() {
        return GLUT_MENU_NOT_IN_USE;
    }
    private static final int GLUT_MENU_IN_USE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MENU_IN_USE 1
     * }
     */
    public static int GLUT_MENU_IN_USE() {
        return GLUT_MENU_IN_USE;
    }
    private static final int GLUT_NOT_VISIBLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NOT_VISIBLE 0
     * }
     */
    public static int GLUT_NOT_VISIBLE() {
        return GLUT_NOT_VISIBLE;
    }
    private static final int GLUT_VISIBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VISIBLE 1
     * }
     */
    public static int GLUT_VISIBLE() {
        return GLUT_VISIBLE;
    }
    private static final int GLUT_HIDDEN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HIDDEN 0
     * }
     */
    public static int GLUT_HIDDEN() {
        return GLUT_HIDDEN;
    }
    private static final int GLUT_FULLY_RETAINED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_FULLY_RETAINED 1
     * }
     */
    public static int GLUT_FULLY_RETAINED() {
        return GLUT_FULLY_RETAINED;
    }
    private static final int GLUT_PARTIALLY_RETAINED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_PARTIALLY_RETAINED 2
     * }
     */
    public static int GLUT_PARTIALLY_RETAINED() {
        return GLUT_PARTIALLY_RETAINED;
    }
    private static final int GLUT_FULLY_COVERED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLUT_FULLY_COVERED 3
     * }
     */
    public static int GLUT_FULLY_COVERED() {
        return GLUT_FULLY_COVERED;
    }
    private static final int GLUT_RED = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_RED 0
     * }
     */
    public static int GLUT_RED() {
        return GLUT_RED;
    }
    private static final int GLUT_GREEN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GREEN 1
     * }
     */
    public static int GLUT_GREEN() {
        return GLUT_GREEN;
    }
    private static final int GLUT_BLUE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_BLUE 2
     * }
     */
    public static int GLUT_BLUE() {
        return GLUT_BLUE;
    }
    private static final int GLUT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NORMAL 0
     * }
     */
    public static int GLUT_NORMAL() {
        return GLUT_NORMAL;
    }
    private static final int GLUT_OVERLAY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_OVERLAY 1
     * }
     */
    public static int GLUT_OVERLAY() {
        return GLUT_OVERLAY;
    }
    private static final int GLUT_WINDOW_X = (int)100L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_X 100
     * }
     */
    public static int GLUT_WINDOW_X() {
        return GLUT_WINDOW_X;
    }
    private static final int GLUT_WINDOW_Y = (int)101L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_Y 101
     * }
     */
    public static int GLUT_WINDOW_Y() {
        return GLUT_WINDOW_Y;
    }
    private static final int GLUT_WINDOW_WIDTH = (int)102L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_WIDTH 102
     * }
     */
    public static int GLUT_WINDOW_WIDTH() {
        return GLUT_WINDOW_WIDTH;
    }
    private static final int GLUT_WINDOW_HEIGHT = (int)103L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_HEIGHT 103
     * }
     */
    public static int GLUT_WINDOW_HEIGHT() {
        return GLUT_WINDOW_HEIGHT;
    }
    private static final int GLUT_WINDOW_BUFFER_SIZE = (int)104L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_BUFFER_SIZE 104
     * }
     */
    public static int GLUT_WINDOW_BUFFER_SIZE() {
        return GLUT_WINDOW_BUFFER_SIZE;
    }
    private static final int GLUT_WINDOW_STENCIL_SIZE = (int)105L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_STENCIL_SIZE 105
     * }
     */
    public static int GLUT_WINDOW_STENCIL_SIZE() {
        return GLUT_WINDOW_STENCIL_SIZE;
    }
    private static final int GLUT_WINDOW_DEPTH_SIZE = (int)106L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_DEPTH_SIZE 106
     * }
     */
    public static int GLUT_WINDOW_DEPTH_SIZE() {
        return GLUT_WINDOW_DEPTH_SIZE;
    }
    private static final int GLUT_WINDOW_RED_SIZE = (int)107L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_RED_SIZE 107
     * }
     */
    public static int GLUT_WINDOW_RED_SIZE() {
        return GLUT_WINDOW_RED_SIZE;
    }
    private static final int GLUT_WINDOW_GREEN_SIZE = (int)108L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_GREEN_SIZE 108
     * }
     */
    public static int GLUT_WINDOW_GREEN_SIZE() {
        return GLUT_WINDOW_GREEN_SIZE;
    }
    private static final int GLUT_WINDOW_BLUE_SIZE = (int)109L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_BLUE_SIZE 109
     * }
     */
    public static int GLUT_WINDOW_BLUE_SIZE() {
        return GLUT_WINDOW_BLUE_SIZE;
    }
    private static final int GLUT_WINDOW_ALPHA_SIZE = (int)110L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_ALPHA_SIZE 110
     * }
     */
    public static int GLUT_WINDOW_ALPHA_SIZE() {
        return GLUT_WINDOW_ALPHA_SIZE;
    }
    private static final int GLUT_WINDOW_ACCUM_RED_SIZE = (int)111L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_ACCUM_RED_SIZE 111
     * }
     */
    public static int GLUT_WINDOW_ACCUM_RED_SIZE() {
        return GLUT_WINDOW_ACCUM_RED_SIZE;
    }
    private static final int GLUT_WINDOW_ACCUM_GREEN_SIZE = (int)112L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_ACCUM_GREEN_SIZE 112
     * }
     */
    public static int GLUT_WINDOW_ACCUM_GREEN_SIZE() {
        return GLUT_WINDOW_ACCUM_GREEN_SIZE;
    }
    private static final int GLUT_WINDOW_ACCUM_BLUE_SIZE = (int)113L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_ACCUM_BLUE_SIZE 113
     * }
     */
    public static int GLUT_WINDOW_ACCUM_BLUE_SIZE() {
        return GLUT_WINDOW_ACCUM_BLUE_SIZE;
    }
    private static final int GLUT_WINDOW_ACCUM_ALPHA_SIZE = (int)114L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_ACCUM_ALPHA_SIZE 114
     * }
     */
    public static int GLUT_WINDOW_ACCUM_ALPHA_SIZE() {
        return GLUT_WINDOW_ACCUM_ALPHA_SIZE;
    }
    private static final int GLUT_WINDOW_DOUBLEBUFFER = (int)115L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_DOUBLEBUFFER 115
     * }
     */
    public static int GLUT_WINDOW_DOUBLEBUFFER() {
        return GLUT_WINDOW_DOUBLEBUFFER;
    }
    private static final int GLUT_WINDOW_RGBA = (int)116L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_RGBA 116
     * }
     */
    public static int GLUT_WINDOW_RGBA() {
        return GLUT_WINDOW_RGBA;
    }
    private static final int GLUT_WINDOW_PARENT = (int)117L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_PARENT 117
     * }
     */
    public static int GLUT_WINDOW_PARENT() {
        return GLUT_WINDOW_PARENT;
    }
    private static final int GLUT_WINDOW_NUM_CHILDREN = (int)118L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_NUM_CHILDREN 118
     * }
     */
    public static int GLUT_WINDOW_NUM_CHILDREN() {
        return GLUT_WINDOW_NUM_CHILDREN;
    }
    private static final int GLUT_WINDOW_COLORMAP_SIZE = (int)119L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_COLORMAP_SIZE 119
     * }
     */
    public static int GLUT_WINDOW_COLORMAP_SIZE() {
        return GLUT_WINDOW_COLORMAP_SIZE;
    }
    private static final int GLUT_WINDOW_NUM_SAMPLES = (int)120L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_NUM_SAMPLES 120
     * }
     */
    public static int GLUT_WINDOW_NUM_SAMPLES() {
        return GLUT_WINDOW_NUM_SAMPLES;
    }
    private static final int GLUT_WINDOW_STEREO = (int)121L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_STEREO 121
     * }
     */
    public static int GLUT_WINDOW_STEREO() {
        return GLUT_WINDOW_STEREO;
    }
    private static final int GLUT_WINDOW_CURSOR = (int)122L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_CURSOR 122
     * }
     */
    public static int GLUT_WINDOW_CURSOR() {
        return GLUT_WINDOW_CURSOR;
    }
    private static final int GLUT_SCREEN_WIDTH = (int)200L;
    /**
     * {@snippet lang=c :
     * #define GLUT_SCREEN_WIDTH 200
     * }
     */
    public static int GLUT_SCREEN_WIDTH() {
        return GLUT_SCREEN_WIDTH;
    }
    private static final int GLUT_SCREEN_HEIGHT = (int)201L;
    /**
     * {@snippet lang=c :
     * #define GLUT_SCREEN_HEIGHT 201
     * }
     */
    public static int GLUT_SCREEN_HEIGHT() {
        return GLUT_SCREEN_HEIGHT;
    }
    private static final int GLUT_SCREEN_WIDTH_MM = (int)202L;
    /**
     * {@snippet lang=c :
     * #define GLUT_SCREEN_WIDTH_MM 202
     * }
     */
    public static int GLUT_SCREEN_WIDTH_MM() {
        return GLUT_SCREEN_WIDTH_MM;
    }
    private static final int GLUT_SCREEN_HEIGHT_MM = (int)203L;
    /**
     * {@snippet lang=c :
     * #define GLUT_SCREEN_HEIGHT_MM 203
     * }
     */
    public static int GLUT_SCREEN_HEIGHT_MM() {
        return GLUT_SCREEN_HEIGHT_MM;
    }
    private static final int GLUT_MENU_NUM_ITEMS = (int)300L;
    /**
     * {@snippet lang=c :
     * #define GLUT_MENU_NUM_ITEMS 300
     * }
     */
    public static int GLUT_MENU_NUM_ITEMS() {
        return GLUT_MENU_NUM_ITEMS;
    }
    private static final int GLUT_DISPLAY_MODE_POSSIBLE = (int)400L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DISPLAY_MODE_POSSIBLE 400
     * }
     */
    public static int GLUT_DISPLAY_MODE_POSSIBLE() {
        return GLUT_DISPLAY_MODE_POSSIBLE;
    }
    private static final int GLUT_INIT_WINDOW_X = (int)500L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INIT_WINDOW_X 500
     * }
     */
    public static int GLUT_INIT_WINDOW_X() {
        return GLUT_INIT_WINDOW_X;
    }
    private static final int GLUT_INIT_WINDOW_Y = (int)501L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INIT_WINDOW_Y 501
     * }
     */
    public static int GLUT_INIT_WINDOW_Y() {
        return GLUT_INIT_WINDOW_Y;
    }
    private static final int GLUT_INIT_WINDOW_WIDTH = (int)502L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INIT_WINDOW_WIDTH 502
     * }
     */
    public static int GLUT_INIT_WINDOW_WIDTH() {
        return GLUT_INIT_WINDOW_WIDTH;
    }
    private static final int GLUT_INIT_WINDOW_HEIGHT = (int)503L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INIT_WINDOW_HEIGHT 503
     * }
     */
    public static int GLUT_INIT_WINDOW_HEIGHT() {
        return GLUT_INIT_WINDOW_HEIGHT;
    }
    private static final int GLUT_INIT_DISPLAY_MODE = (int)504L;
    /**
     * {@snippet lang=c :
     * #define GLUT_INIT_DISPLAY_MODE 504
     * }
     */
    public static int GLUT_INIT_DISPLAY_MODE() {
        return GLUT_INIT_DISPLAY_MODE;
    }
    private static final int GLUT_ELAPSED_TIME = (int)700L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ELAPSED_TIME 700
     * }
     */
    public static int GLUT_ELAPSED_TIME() {
        return GLUT_ELAPSED_TIME;
    }
    private static final int GLUT_WINDOW_FORMAT_ID = (int)123L;
    /**
     * {@snippet lang=c :
     * #define GLUT_WINDOW_FORMAT_ID 123
     * }
     */
    public static int GLUT_WINDOW_FORMAT_ID() {
        return GLUT_WINDOW_FORMAT_ID;
    }
    private static final int GLUT_HAS_KEYBOARD = (int)600L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_KEYBOARD 600
     * }
     */
    public static int GLUT_HAS_KEYBOARD() {
        return GLUT_HAS_KEYBOARD;
    }
    private static final int GLUT_HAS_MOUSE = (int)601L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_MOUSE 601
     * }
     */
    public static int GLUT_HAS_MOUSE() {
        return GLUT_HAS_MOUSE;
    }
    private static final int GLUT_HAS_SPACEBALL = (int)602L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_SPACEBALL 602
     * }
     */
    public static int GLUT_HAS_SPACEBALL() {
        return GLUT_HAS_SPACEBALL;
    }
    private static final int GLUT_HAS_DIAL_AND_BUTTON_BOX = (int)603L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_DIAL_AND_BUTTON_BOX 603
     * }
     */
    public static int GLUT_HAS_DIAL_AND_BUTTON_BOX() {
        return GLUT_HAS_DIAL_AND_BUTTON_BOX;
    }
    private static final int GLUT_HAS_TABLET = (int)604L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_TABLET 604
     * }
     */
    public static int GLUT_HAS_TABLET() {
        return GLUT_HAS_TABLET;
    }
    private static final int GLUT_NUM_MOUSE_BUTTONS = (int)605L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NUM_MOUSE_BUTTONS 605
     * }
     */
    public static int GLUT_NUM_MOUSE_BUTTONS() {
        return GLUT_NUM_MOUSE_BUTTONS;
    }
    private static final int GLUT_NUM_SPACEBALL_BUTTONS = (int)606L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NUM_SPACEBALL_BUTTONS 606
     * }
     */
    public static int GLUT_NUM_SPACEBALL_BUTTONS() {
        return GLUT_NUM_SPACEBALL_BUTTONS;
    }
    private static final int GLUT_NUM_BUTTON_BOX_BUTTONS = (int)607L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NUM_BUTTON_BOX_BUTTONS 607
     * }
     */
    public static int GLUT_NUM_BUTTON_BOX_BUTTONS() {
        return GLUT_NUM_BUTTON_BOX_BUTTONS;
    }
    private static final int GLUT_NUM_DIALS = (int)608L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NUM_DIALS 608
     * }
     */
    public static int GLUT_NUM_DIALS() {
        return GLUT_NUM_DIALS;
    }
    private static final int GLUT_NUM_TABLET_BUTTONS = (int)609L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NUM_TABLET_BUTTONS 609
     * }
     */
    public static int GLUT_NUM_TABLET_BUTTONS() {
        return GLUT_NUM_TABLET_BUTTONS;
    }
    private static final int GLUT_DEVICE_IGNORE_KEY_REPEAT = (int)610L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DEVICE_IGNORE_KEY_REPEAT 610
     * }
     */
    public static int GLUT_DEVICE_IGNORE_KEY_REPEAT() {
        return GLUT_DEVICE_IGNORE_KEY_REPEAT;
    }
    private static final int GLUT_DEVICE_KEY_REPEAT = (int)611L;
    /**
     * {@snippet lang=c :
     * #define GLUT_DEVICE_KEY_REPEAT 611
     * }
     */
    public static int GLUT_DEVICE_KEY_REPEAT() {
        return GLUT_DEVICE_KEY_REPEAT;
    }
    private static final int GLUT_HAS_JOYSTICK = (int)612L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_JOYSTICK 612
     * }
     */
    public static int GLUT_HAS_JOYSTICK() {
        return GLUT_HAS_JOYSTICK;
    }
    private static final int GLUT_OWNS_JOYSTICK = (int)613L;
    /**
     * {@snippet lang=c :
     * #define GLUT_OWNS_JOYSTICK 613
     * }
     */
    public static int GLUT_OWNS_JOYSTICK() {
        return GLUT_OWNS_JOYSTICK;
    }
    private static final int GLUT_JOYSTICK_BUTTONS = (int)614L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_BUTTONS 614
     * }
     */
    public static int GLUT_JOYSTICK_BUTTONS() {
        return GLUT_JOYSTICK_BUTTONS;
    }
    private static final int GLUT_JOYSTICK_AXES = (int)615L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_AXES 615
     * }
     */
    public static int GLUT_JOYSTICK_AXES() {
        return GLUT_JOYSTICK_AXES;
    }
    private static final int GLUT_JOYSTICK_POLL_RATE = (int)616L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_POLL_RATE 616
     * }
     */
    public static int GLUT_JOYSTICK_POLL_RATE() {
        return GLUT_JOYSTICK_POLL_RATE;
    }
    private static final int GLUT_OVERLAY_POSSIBLE = (int)800L;
    /**
     * {@snippet lang=c :
     * #define GLUT_OVERLAY_POSSIBLE 800
     * }
     */
    public static int GLUT_OVERLAY_POSSIBLE() {
        return GLUT_OVERLAY_POSSIBLE;
    }
    private static final int GLUT_LAYER_IN_USE = (int)801L;
    /**
     * {@snippet lang=c :
     * #define GLUT_LAYER_IN_USE 801
     * }
     */
    public static int GLUT_LAYER_IN_USE() {
        return GLUT_LAYER_IN_USE;
    }
    private static final int GLUT_HAS_OVERLAY = (int)802L;
    /**
     * {@snippet lang=c :
     * #define GLUT_HAS_OVERLAY 802
     * }
     */
    public static int GLUT_HAS_OVERLAY() {
        return GLUT_HAS_OVERLAY;
    }
    private static final int GLUT_TRANSPARENT_INDEX = (int)803L;
    /**
     * {@snippet lang=c :
     * #define GLUT_TRANSPARENT_INDEX 803
     * }
     */
    public static int GLUT_TRANSPARENT_INDEX() {
        return GLUT_TRANSPARENT_INDEX;
    }
    private static final int GLUT_NORMAL_DAMAGED = (int)804L;
    /**
     * {@snippet lang=c :
     * #define GLUT_NORMAL_DAMAGED 804
     * }
     */
    public static int GLUT_NORMAL_DAMAGED() {
        return GLUT_NORMAL_DAMAGED;
    }
    private static final int GLUT_OVERLAY_DAMAGED = (int)805L;
    /**
     * {@snippet lang=c :
     * #define GLUT_OVERLAY_DAMAGED 805
     * }
     */
    public static int GLUT_OVERLAY_DAMAGED() {
        return GLUT_OVERLAY_DAMAGED;
    }
    private static final int GLUT_VIDEO_RESIZE_POSSIBLE = (int)900L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_POSSIBLE 900
     * }
     */
    public static int GLUT_VIDEO_RESIZE_POSSIBLE() {
        return GLUT_VIDEO_RESIZE_POSSIBLE;
    }
    private static final int GLUT_VIDEO_RESIZE_IN_USE = (int)901L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_IN_USE 901
     * }
     */
    public static int GLUT_VIDEO_RESIZE_IN_USE() {
        return GLUT_VIDEO_RESIZE_IN_USE;
    }
    private static final int GLUT_VIDEO_RESIZE_X_DELTA = (int)902L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_X_DELTA 902
     * }
     */
    public static int GLUT_VIDEO_RESIZE_X_DELTA() {
        return GLUT_VIDEO_RESIZE_X_DELTA;
    }
    private static final int GLUT_VIDEO_RESIZE_Y_DELTA = (int)903L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_Y_DELTA 903
     * }
     */
    public static int GLUT_VIDEO_RESIZE_Y_DELTA() {
        return GLUT_VIDEO_RESIZE_Y_DELTA;
    }
    private static final int GLUT_VIDEO_RESIZE_WIDTH_DELTA = (int)904L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_WIDTH_DELTA 904
     * }
     */
    public static int GLUT_VIDEO_RESIZE_WIDTH_DELTA() {
        return GLUT_VIDEO_RESIZE_WIDTH_DELTA;
    }
    private static final int GLUT_VIDEO_RESIZE_HEIGHT_DELTA = (int)905L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_HEIGHT_DELTA 905
     * }
     */
    public static int GLUT_VIDEO_RESIZE_HEIGHT_DELTA() {
        return GLUT_VIDEO_RESIZE_HEIGHT_DELTA;
    }
    private static final int GLUT_VIDEO_RESIZE_X = (int)906L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_X 906
     * }
     */
    public static int GLUT_VIDEO_RESIZE_X() {
        return GLUT_VIDEO_RESIZE_X;
    }
    private static final int GLUT_VIDEO_RESIZE_Y = (int)907L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_Y 907
     * }
     */
    public static int GLUT_VIDEO_RESIZE_Y() {
        return GLUT_VIDEO_RESIZE_Y;
    }
    private static final int GLUT_VIDEO_RESIZE_WIDTH = (int)908L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_WIDTH 908
     * }
     */
    public static int GLUT_VIDEO_RESIZE_WIDTH() {
        return GLUT_VIDEO_RESIZE_WIDTH;
    }
    private static final int GLUT_VIDEO_RESIZE_HEIGHT = (int)909L;
    /**
     * {@snippet lang=c :
     * #define GLUT_VIDEO_RESIZE_HEIGHT 909
     * }
     */
    public static int GLUT_VIDEO_RESIZE_HEIGHT() {
        return GLUT_VIDEO_RESIZE_HEIGHT;
    }
    private static final int GLUT_ACTIVE_SHIFT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ACTIVE_SHIFT 1
     * }
     */
    public static int GLUT_ACTIVE_SHIFT() {
        return GLUT_ACTIVE_SHIFT;
    }
    private static final int GLUT_ACTIVE_CTRL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ACTIVE_CTRL 2
     * }
     */
    public static int GLUT_ACTIVE_CTRL() {
        return GLUT_ACTIVE_CTRL;
    }
    private static final int GLUT_ACTIVE_ALT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_ACTIVE_ALT 4
     * }
     */
    public static int GLUT_ACTIVE_ALT() {
        return GLUT_ACTIVE_ALT;
    }
    private static final int GLUT_CURSOR_RIGHT_ARROW = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_RIGHT_ARROW 0
     * }
     */
    public static int GLUT_CURSOR_RIGHT_ARROW() {
        return GLUT_CURSOR_RIGHT_ARROW;
    }
    private static final int GLUT_CURSOR_LEFT_ARROW = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_LEFT_ARROW 1
     * }
     */
    public static int GLUT_CURSOR_LEFT_ARROW() {
        return GLUT_CURSOR_LEFT_ARROW;
    }
    private static final int GLUT_CURSOR_INFO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_INFO 2
     * }
     */
    public static int GLUT_CURSOR_INFO() {
        return GLUT_CURSOR_INFO;
    }
    private static final int GLUT_CURSOR_DESTROY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_DESTROY 3
     * }
     */
    public static int GLUT_CURSOR_DESTROY() {
        return GLUT_CURSOR_DESTROY;
    }
    private static final int GLUT_CURSOR_HELP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_HELP 4
     * }
     */
    public static int GLUT_CURSOR_HELP() {
        return GLUT_CURSOR_HELP;
    }
    private static final int GLUT_CURSOR_CYCLE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_CYCLE 5
     * }
     */
    public static int GLUT_CURSOR_CYCLE() {
        return GLUT_CURSOR_CYCLE;
    }
    private static final int GLUT_CURSOR_SPRAY = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_SPRAY 6
     * }
     */
    public static int GLUT_CURSOR_SPRAY() {
        return GLUT_CURSOR_SPRAY;
    }
    private static final int GLUT_CURSOR_WAIT = (int)7L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_WAIT 7
     * }
     */
    public static int GLUT_CURSOR_WAIT() {
        return GLUT_CURSOR_WAIT;
    }
    private static final int GLUT_CURSOR_TEXT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_TEXT 8
     * }
     */
    public static int GLUT_CURSOR_TEXT() {
        return GLUT_CURSOR_TEXT;
    }
    private static final int GLUT_CURSOR_CROSSHAIR = (int)9L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_CROSSHAIR 9
     * }
     */
    public static int GLUT_CURSOR_CROSSHAIR() {
        return GLUT_CURSOR_CROSSHAIR;
    }
    private static final int GLUT_CURSOR_UP_DOWN = (int)10L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_UP_DOWN 10
     * }
     */
    public static int GLUT_CURSOR_UP_DOWN() {
        return GLUT_CURSOR_UP_DOWN;
    }
    private static final int GLUT_CURSOR_LEFT_RIGHT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_LEFT_RIGHT 11
     * }
     */
    public static int GLUT_CURSOR_LEFT_RIGHT() {
        return GLUT_CURSOR_LEFT_RIGHT;
    }
    private static final int GLUT_CURSOR_TOP_SIDE = (int)12L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_TOP_SIDE 12
     * }
     */
    public static int GLUT_CURSOR_TOP_SIDE() {
        return GLUT_CURSOR_TOP_SIDE;
    }
    private static final int GLUT_CURSOR_BOTTOM_SIDE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_BOTTOM_SIDE 13
     * }
     */
    public static int GLUT_CURSOR_BOTTOM_SIDE() {
        return GLUT_CURSOR_BOTTOM_SIDE;
    }
    private static final int GLUT_CURSOR_LEFT_SIDE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_LEFT_SIDE 14
     * }
     */
    public static int GLUT_CURSOR_LEFT_SIDE() {
        return GLUT_CURSOR_LEFT_SIDE;
    }
    private static final int GLUT_CURSOR_RIGHT_SIDE = (int)15L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_RIGHT_SIDE 15
     * }
     */
    public static int GLUT_CURSOR_RIGHT_SIDE() {
        return GLUT_CURSOR_RIGHT_SIDE;
    }
    private static final int GLUT_CURSOR_TOP_LEFT_CORNER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_TOP_LEFT_CORNER 16
     * }
     */
    public static int GLUT_CURSOR_TOP_LEFT_CORNER() {
        return GLUT_CURSOR_TOP_LEFT_CORNER;
    }
    private static final int GLUT_CURSOR_TOP_RIGHT_CORNER = (int)17L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_TOP_RIGHT_CORNER 17
     * }
     */
    public static int GLUT_CURSOR_TOP_RIGHT_CORNER() {
        return GLUT_CURSOR_TOP_RIGHT_CORNER;
    }
    private static final int GLUT_CURSOR_BOTTOM_RIGHT_CORNER = (int)18L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_BOTTOM_RIGHT_CORNER 18
     * }
     */
    public static int GLUT_CURSOR_BOTTOM_RIGHT_CORNER() {
        return GLUT_CURSOR_BOTTOM_RIGHT_CORNER;
    }
    private static final int GLUT_CURSOR_BOTTOM_LEFT_CORNER = (int)19L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_BOTTOM_LEFT_CORNER 19
     * }
     */
    public static int GLUT_CURSOR_BOTTOM_LEFT_CORNER() {
        return GLUT_CURSOR_BOTTOM_LEFT_CORNER;
    }
    private static final int GLUT_CURSOR_INHERIT = (int)100L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_INHERIT 100
     * }
     */
    public static int GLUT_CURSOR_INHERIT() {
        return GLUT_CURSOR_INHERIT;
    }
    private static final int GLUT_CURSOR_NONE = (int)101L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_NONE 101
     * }
     */
    public static int GLUT_CURSOR_NONE() {
        return GLUT_CURSOR_NONE;
    }
    private static final int GLUT_CURSOR_FULL_CROSSHAIR = (int)102L;
    /**
     * {@snippet lang=c :
     * #define GLUT_CURSOR_FULL_CROSSHAIR 102
     * }
     */
    public static int GLUT_CURSOR_FULL_CROSSHAIR() {
        return GLUT_CURSOR_FULL_CROSSHAIR;
    }
    private static final int GLUT_KEY_REPEAT_OFF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_REPEAT_OFF 0
     * }
     */
    public static int GLUT_KEY_REPEAT_OFF() {
        return GLUT_KEY_REPEAT_OFF;
    }
    private static final int GLUT_KEY_REPEAT_ON = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_REPEAT_ON 1
     * }
     */
    public static int GLUT_KEY_REPEAT_ON() {
        return GLUT_KEY_REPEAT_ON;
    }
    private static final int GLUT_KEY_REPEAT_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_KEY_REPEAT_DEFAULT 2
     * }
     */
    public static int GLUT_KEY_REPEAT_DEFAULT() {
        return GLUT_KEY_REPEAT_DEFAULT;
    }
    private static final int GLUT_JOYSTICK_BUTTON_A = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_BUTTON_A 1
     * }
     */
    public static int GLUT_JOYSTICK_BUTTON_A() {
        return GLUT_JOYSTICK_BUTTON_A;
    }
    private static final int GLUT_JOYSTICK_BUTTON_B = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_BUTTON_B 2
     * }
     */
    public static int GLUT_JOYSTICK_BUTTON_B() {
        return GLUT_JOYSTICK_BUTTON_B;
    }
    private static final int GLUT_JOYSTICK_BUTTON_C = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_BUTTON_C 4
     * }
     */
    public static int GLUT_JOYSTICK_BUTTON_C() {
        return GLUT_JOYSTICK_BUTTON_C;
    }
    private static final int GLUT_JOYSTICK_BUTTON_D = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GLUT_JOYSTICK_BUTTON_D 8
     * }
     */
    public static int GLUT_JOYSTICK_BUTTON_D() {
        return GLUT_JOYSTICK_BUTTON_D;
    }
    private static final int GLUT_GAME_MODE_ACTIVE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_ACTIVE 0
     * }
     */
    public static int GLUT_GAME_MODE_ACTIVE() {
        return GLUT_GAME_MODE_ACTIVE;
    }
    private static final int GLUT_GAME_MODE_POSSIBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_POSSIBLE 1
     * }
     */
    public static int GLUT_GAME_MODE_POSSIBLE() {
        return GLUT_GAME_MODE_POSSIBLE;
    }
    private static final int GLUT_GAME_MODE_WIDTH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_WIDTH 2
     * }
     */
    public static int GLUT_GAME_MODE_WIDTH() {
        return GLUT_GAME_MODE_WIDTH;
    }
    private static final int GLUT_GAME_MODE_HEIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_HEIGHT 3
     * }
     */
    public static int GLUT_GAME_MODE_HEIGHT() {
        return GLUT_GAME_MODE_HEIGHT;
    }
    private static final int GLUT_GAME_MODE_PIXEL_DEPTH = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_PIXEL_DEPTH 4
     * }
     */
    public static int GLUT_GAME_MODE_PIXEL_DEPTH() {
        return GLUT_GAME_MODE_PIXEL_DEPTH;
    }
    private static final int GLUT_GAME_MODE_REFRESH_RATE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_REFRESH_RATE 5
     * }
     */
    public static int GLUT_GAME_MODE_REFRESH_RATE() {
        return GLUT_GAME_MODE_REFRESH_RATE;
    }
    private static final int GLUT_GAME_MODE_DISPLAY_CHANGED = (int)6L;
    /**
     * {@snippet lang=c :
     * #define GLUT_GAME_MODE_DISPLAY_CHANGED 6
     * }
     */
    public static int GLUT_GAME_MODE_DISPLAY_CHANGED() {
        return GLUT_GAME_MODE_DISPLAY_CHANGED;
    }
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = glut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = glut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLbitfield
     * }
     */
    public static final OfInt GLbitfield = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint8_t GLboolean
     * }
     */
    public static final OfByte GLboolean = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int8_t GLbyte
     * }
     */
    public static final OfByte GLbyte = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef float GLclampf
     * }
     */
    public static final OfFloat GLclampf = glut_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLenum
     * }
     */
    public static final OfInt GLenum = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float GLfloat
     * }
     */
    public static final OfFloat GLfloat = glut_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLint
     * }
     */
    public static final OfInt GLint = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int16_t GLshort
     * }
     */
    public static final OfShort GLshort = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLsizei
     * }
     */
    public static final OfInt GLsizei = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint8_t GLubyte
     * }
     */
    public static final OfByte GLubyte = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLuint
     * }
     */
    public static final OfInt GLuint = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLushort
     * }
     */
    public static final OfShort GLushort = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef char GLchar
     * }
     */
    public static final OfByte GLchar = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef char GLcharARB
     * }
     */
    public static final OfByte GLcharARB = glut_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef void *GLhandleARB
     * }
     */
    public static final AddressLayout GLhandleARB = glut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef double GLdouble
     * }
     */
    public static final OfDouble GLdouble = glut_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double GLclampd
     * }
     */
    public static final OfDouble GLclampd = glut_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLfixed
     * }
     */
    public static final OfInt GLfixed = glut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLhalf
     * }
     */
    public static final OfShort GLhalf = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLhalfARB
     * }
     */
    public static final OfShort GLhalfARB = glut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int64_t GLint64
     * }
     */
    public static final OfLong GLint64 = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct __GLsync *GLsync
     * }
     */
    public static final AddressLayout GLsync = glut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef uint64_t GLuint64
     * }
     */
    public static final OfLong GLuint64 = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t GLint64EXT
     * }
     */
    public static final OfLong GLint64EXT = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t GLuint64EXT
     * }
     */
    public static final OfLong GLuint64EXT = glut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLintptr
     * }
     */
    public static final OfLong GLintptr = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLsizeiptr
     * }
     */
    public static final OfLong GLsizeiptr = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLintptrARB
     * }
     */
    public static final OfLong GLintptrARB = glut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLsizeiptrARB
     * }
     */
    public static final OfLong GLsizeiptrARB = glut_h.C_LONG;

    private static class glClampColorARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClampColorARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClampColorARB(GLenum target, GLenum clamp)
     * }
     */
    public static FunctionDescriptor glClampColorARB$descriptor() {
        return glClampColorARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClampColorARB(GLenum target, GLenum clamp)
     * }
     */
    public static MethodHandle glClampColorARB$handle() {
        return glClampColorARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClampColorARB(GLenum target, GLenum clamp)
     * }
     */
    public static MemorySegment glClampColorARB$address() {
        return glClampColorARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClampColorARB(GLenum target, GLenum clamp)
     * }
     */
    public static void glClampColorARB(int target, int clamp) {
        var mh$ = glClampColorARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClampColorARB", target, clamp);
            }
            mh$.invokeExact(target, clamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawBuffersARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawBuffersARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawBuffersARB(GLsizei n, const GLenum *bufs)
     * }
     */
    public static FunctionDescriptor glDrawBuffersARB$descriptor() {
        return glDrawBuffersARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawBuffersARB(GLsizei n, const GLenum *bufs)
     * }
     */
    public static MethodHandle glDrawBuffersARB$handle() {
        return glDrawBuffersARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawBuffersARB(GLsizei n, const GLenum *bufs)
     * }
     */
    public static MemorySegment glDrawBuffersARB$address() {
        return glDrawBuffersARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawBuffersARB(GLsizei n, const GLenum *bufs)
     * }
     */
    public static void glDrawBuffersARB(int n, MemorySegment bufs) {
        var mh$ = glDrawBuffersARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawBuffersARB", n, bufs);
            }
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawElementsBaseVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawElementsBaseVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static FunctionDescriptor glDrawElementsBaseVertex$descriptor() {
        return glDrawElementsBaseVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static MethodHandle glDrawElementsBaseVertex$handle() {
        return glDrawElementsBaseVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static MemorySegment glDrawElementsBaseVertex$address() {
        return glDrawElementsBaseVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static void glDrawElementsBaseVertex(int mode, int count, int type, MemorySegment indices, int base_vertex) {
        var mh$ = glDrawElementsBaseVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawElementsBaseVertex", mode, count, type, indices, base_vertex);
            }
            mh$.invokeExact(mode, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawRangeElementsBaseVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawRangeElementsBaseVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static FunctionDescriptor glDrawRangeElementsBaseVertex$descriptor() {
        return glDrawRangeElementsBaseVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static MethodHandle glDrawRangeElementsBaseVertex$handle() {
        return glDrawRangeElementsBaseVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static MemorySegment glDrawRangeElementsBaseVertex$address() {
        return glDrawRangeElementsBaseVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex)
     * }
     */
    public static void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, MemorySegment indices, int base_vertex) {
        var mh$ = glDrawRangeElementsBaseVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawRangeElementsBaseVertex", mode, start, end, count, type, indices, base_vertex);
            }
            mh$.invokeExact(mode, start, end, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawElementsInstancedBaseVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawElementsInstancedBaseVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint base_vertex)
     * }
     */
    public static FunctionDescriptor glDrawElementsInstancedBaseVertex$descriptor() {
        return glDrawElementsInstancedBaseVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint base_vertex)
     * }
     */
    public static MethodHandle glDrawElementsInstancedBaseVertex$handle() {
        return glDrawElementsInstancedBaseVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint base_vertex)
     * }
     */
    public static MemorySegment glDrawElementsInstancedBaseVertex$address() {
        return glDrawElementsInstancedBaseVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint base_vertex)
     * }
     */
    public static void glDrawElementsInstancedBaseVertex(int mode, int count, int type, MemorySegment indices, int primcount, int base_vertex) {
        var mh$ = glDrawElementsInstancedBaseVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawElementsInstancedBaseVertex", mode, count, type, indices, primcount, base_vertex);
            }
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawElementsBaseVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawElementsBaseVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount, const GLint *base_vertex)
     * }
     */
    public static FunctionDescriptor glMultiDrawElementsBaseVertex$descriptor() {
        return glMultiDrawElementsBaseVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount, const GLint *base_vertex)
     * }
     */
    public static MethodHandle glMultiDrawElementsBaseVertex$handle() {
        return glMultiDrawElementsBaseVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount, const GLint *base_vertex)
     * }
     */
    public static MemorySegment glMultiDrawElementsBaseVertex$address() {
        return glMultiDrawElementsBaseVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount, const GLint *base_vertex)
     * }
     */
    public static void glMultiDrawElementsBaseVertex(int mode, MemorySegment count, int type, MemorySegment indices, int primcount, MemorySegment base_vertex) {
        var mh$ = glMultiDrawElementsBaseVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawElementsBaseVertex", mode, count, type, indices, primcount, base_vertex);
            }
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawArraysInstancedARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawArraysInstancedARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glDrawArraysInstancedARB$descriptor() {
        return glDrawArraysInstancedARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
     * }
     */
    public static MethodHandle glDrawArraysInstancedARB$handle() {
        return glDrawArraysInstancedARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
     * }
     */
    public static MemorySegment glDrawArraysInstancedARB$address() {
        return glDrawArraysInstancedARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
     * }
     */
    public static void glDrawArraysInstancedARB(int mode, int first, int count, int primcount) {
        var mh$ = glDrawArraysInstancedARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawArraysInstancedARB", mode, first, count, primcount);
            }
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawElementsInstancedARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawElementsInstancedARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glDrawElementsInstancedARB$descriptor() {
        return glDrawElementsInstancedARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
     * }
     */
    public static MethodHandle glDrawElementsInstancedARB$handle() {
        return glDrawElementsInstancedARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
     * }
     */
    public static MemorySegment glDrawElementsInstancedARB$address() {
        return glDrawElementsInstancedARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
     * }
     */
    public static void glDrawElementsInstancedARB(int mode, int count, int type, MemorySegment indices, int primcount) {
        var mh$ = glDrawElementsInstancedARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawElementsInstancedARB", mode, count, type, indices, primcount);
            }
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsRenderbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsRenderbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbuffer(GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glIsRenderbuffer$descriptor() {
        return glIsRenderbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbuffer(GLuint renderbuffer)
     * }
     */
    public static MethodHandle glIsRenderbuffer$handle() {
        return glIsRenderbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbuffer(GLuint renderbuffer)
     * }
     */
    public static MemorySegment glIsRenderbuffer$address() {
        return glIsRenderbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbuffer(GLuint renderbuffer)
     * }
     */
    public static byte glIsRenderbuffer(int renderbuffer) {
        var mh$ = glIsRenderbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsRenderbuffer", renderbuffer);
            }
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindRenderbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindRenderbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glBindRenderbuffer$descriptor() {
        return glBindRenderbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
     * }
     */
    public static MethodHandle glBindRenderbuffer$handle() {
        return glBindRenderbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
     * }
     */
    public static MemorySegment glBindRenderbuffer$address() {
        return glBindRenderbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
     * }
     */
    public static void glBindRenderbuffer(int target, int renderbuffer) {
        var mh$ = glBindRenderbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindRenderbuffer", target, renderbuffer);
            }
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteRenderbuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteRenderbuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static FunctionDescriptor glDeleteRenderbuffers$descriptor() {
        return glDeleteRenderbuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static MethodHandle glDeleteRenderbuffers$handle() {
        return glDeleteRenderbuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static MemorySegment glDeleteRenderbuffers$address() {
        return glDeleteRenderbuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static void glDeleteRenderbuffers(int n, MemorySegment renderbuffers) {
        var mh$ = glDeleteRenderbuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteRenderbuffers", n, renderbuffers);
            }
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenRenderbuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenRenderbuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static FunctionDescriptor glGenRenderbuffers$descriptor() {
        return glGenRenderbuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static MethodHandle glGenRenderbuffers$handle() {
        return glGenRenderbuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static MemorySegment glGenRenderbuffers$address() {
        return glGenRenderbuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static void glGenRenderbuffers(int n, MemorySegment renderbuffers) {
        var mh$ = glGenRenderbuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenRenderbuffers", n, renderbuffers);
            }
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderbufferStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRenderbufferStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glRenderbufferStorage$descriptor() {
        return glRenderbufferStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glRenderbufferStorage$handle() {
        return glRenderbufferStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glRenderbufferStorage$address() {
        return glRenderbufferStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static void glRenderbufferStorage(int target, int internalformat, int width, int height) {
        var mh$ = glRenderbufferStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderbufferStorage", target, internalformat, width, height);
            }
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetRenderbufferParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetRenderbufferParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetRenderbufferParameteriv$descriptor() {
        return glGetRenderbufferParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetRenderbufferParameteriv$handle() {
        return glGetRenderbufferParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetRenderbufferParameteriv$address() {
        return glGetRenderbufferParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetRenderbufferParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetRenderbufferParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetRenderbufferParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsFramebuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsFramebuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebuffer(GLuint framebuffer)
     * }
     */
    public static FunctionDescriptor glIsFramebuffer$descriptor() {
        return glIsFramebuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebuffer(GLuint framebuffer)
     * }
     */
    public static MethodHandle glIsFramebuffer$handle() {
        return glIsFramebuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebuffer(GLuint framebuffer)
     * }
     */
    public static MemorySegment glIsFramebuffer$address() {
        return glIsFramebuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsFramebuffer(GLuint framebuffer)
     * }
     */
    public static byte glIsFramebuffer(int framebuffer) {
        var mh$ = glIsFramebuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsFramebuffer", framebuffer);
            }
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindFramebuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindFramebuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindFramebuffer(GLenum target, GLuint framebuffer)
     * }
     */
    public static FunctionDescriptor glBindFramebuffer$descriptor() {
        return glBindFramebuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindFramebuffer(GLenum target, GLuint framebuffer)
     * }
     */
    public static MethodHandle glBindFramebuffer$handle() {
        return glBindFramebuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindFramebuffer(GLenum target, GLuint framebuffer)
     * }
     */
    public static MemorySegment glBindFramebuffer$address() {
        return glBindFramebuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindFramebuffer(GLenum target, GLuint framebuffer)
     * }
     */
    public static void glBindFramebuffer(int target, int framebuffer) {
        var mh$ = glBindFramebuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindFramebuffer", target, framebuffer);
            }
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteFramebuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteFramebuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static FunctionDescriptor glDeleteFramebuffers$descriptor() {
        return glDeleteFramebuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static MethodHandle glDeleteFramebuffers$handle() {
        return glDeleteFramebuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static MemorySegment glDeleteFramebuffers$address() {
        return glDeleteFramebuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static void glDeleteFramebuffers(int n, MemorySegment framebuffers) {
        var mh$ = glDeleteFramebuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteFramebuffers", n, framebuffers);
            }
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenFramebuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenFramebuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static FunctionDescriptor glGenFramebuffers$descriptor() {
        return glGenFramebuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static MethodHandle glGenFramebuffers$handle() {
        return glGenFramebuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static MemorySegment glGenFramebuffers$address() {
        return glGenFramebuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static void glGenFramebuffers(int n, MemorySegment framebuffers) {
        var mh$ = glGenFramebuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenFramebuffers", n, framebuffers);
            }
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCheckFramebufferStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCheckFramebufferStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatus(GLenum target)
     * }
     */
    public static FunctionDescriptor glCheckFramebufferStatus$descriptor() {
        return glCheckFramebufferStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatus(GLenum target)
     * }
     */
    public static MethodHandle glCheckFramebufferStatus$handle() {
        return glCheckFramebufferStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatus(GLenum target)
     * }
     */
    public static MemorySegment glCheckFramebufferStatus$address() {
        return glCheckFramebufferStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatus(GLenum target)
     * }
     */
    public static int glCheckFramebufferStatus(int target) {
        var mh$ = glCheckFramebufferStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCheckFramebufferStatus", target);
            }
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture1D$descriptor() {
        return glFramebufferTexture1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MethodHandle glFramebufferTexture1D$handle() {
        return glFramebufferTexture1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MemorySegment glFramebufferTexture1D$address() {
        return glFramebufferTexture1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level) {
        var mh$ = glFramebufferTexture1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture1D", target, attachment, textarget, texture, level);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture2D$descriptor() {
        return glFramebufferTexture2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MethodHandle glFramebufferTexture2D$handle() {
        return glFramebufferTexture2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MemorySegment glFramebufferTexture2D$address() {
        return glFramebufferTexture2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static void glFramebufferTexture2D(int target, int attachment, int textarget, int texture, int level) {
        var mh$ = glFramebufferTexture2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture2D", target, attachment, textarget, texture, level);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture3D$descriptor() {
        return glFramebufferTexture3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static MethodHandle glFramebufferTexture3D$handle() {
        return glFramebufferTexture3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static MemorySegment glFramebufferTexture3D$address() {
        return glFramebufferTexture3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static void glFramebufferTexture3D(int target, int attachment, int textarget, int texture, int level, int zoffset) {
        var mh$ = glFramebufferTexture3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture3D", target, attachment, textarget, texture, level, zoffset);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferRenderbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferRenderbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glFramebufferRenderbuffer$descriptor() {
        return glFramebufferRenderbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static MethodHandle glFramebufferRenderbuffer$handle() {
        return glFramebufferRenderbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static MemorySegment glFramebufferRenderbuffer$address() {
        return glFramebufferRenderbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static void glFramebufferRenderbuffer(int target, int attachment, int renderbuffertarget, int renderbuffer) {
        var mh$ = glFramebufferRenderbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferRenderbuffer", target, attachment, renderbuffertarget, renderbuffer);
            }
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetFramebufferAttachmentParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetFramebufferAttachmentParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetFramebufferAttachmentParameteriv$descriptor() {
        return glGetFramebufferAttachmentParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetFramebufferAttachmentParameteriv$handle() {
        return glGetFramebufferAttachmentParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetFramebufferAttachmentParameteriv$address() {
        return glGetFramebufferAttachmentParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static void glGetFramebufferAttachmentParameteriv(int target, int attachment, int pname, MemorySegment params) {
        var mh$ = glGetFramebufferAttachmentParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetFramebufferAttachmentParameteriv", target, attachment, pname, params);
            }
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenerateMipmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenerateMipmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenerateMipmap(GLenum target)
     * }
     */
    public static FunctionDescriptor glGenerateMipmap$descriptor() {
        return glGenerateMipmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenerateMipmap(GLenum target)
     * }
     */
    public static MethodHandle glGenerateMipmap$handle() {
        return glGenerateMipmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenerateMipmap(GLenum target)
     * }
     */
    public static MemorySegment glGenerateMipmap$address() {
        return glGenerateMipmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenerateMipmap(GLenum target)
     * }
     */
    public static void glGenerateMipmap(int target) {
        var mh$ = glGenerateMipmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenerateMipmap", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlitFramebuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlitFramebuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static FunctionDescriptor glBlitFramebuffer$descriptor() {
        return glBlitFramebuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static MethodHandle glBlitFramebuffer$handle() {
        return glBlitFramebuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static MemorySegment glBlitFramebuffer$address() {
        return glBlitFramebuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
        var mh$ = glBlitFramebuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlitFramebuffer", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
            }
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderbufferStorageMultisample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRenderbufferStorageMultisample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glRenderbufferStorageMultisample$descriptor() {
        return glRenderbufferStorageMultisample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glRenderbufferStorageMultisample$handle() {
        return glRenderbufferStorageMultisample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glRenderbufferStorageMultisample$address() {
        return glRenderbufferStorageMultisample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height) {
        var mh$ = glRenderbufferStorageMultisample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderbufferStorageMultisample", target, samples, internalformat, width, height);
            }
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTextureLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTextureLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static FunctionDescriptor glFramebufferTextureLayer$descriptor() {
        return glFramebufferTextureLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static MethodHandle glFramebufferTextureLayer$handle() {
        return glFramebufferTextureLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static MemorySegment glFramebufferTextureLayer$address() {
        return glFramebufferTextureLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static void glFramebufferTextureLayer(int target, int attachment, int texture, int level, int layer) {
        var mh$ = glFramebufferTextureLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTextureLayer", target, attachment, texture, level, layer);
            }
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribDivisorARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribDivisorARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribDivisorARB(GLuint index, GLuint divisor)
     * }
     */
    public static FunctionDescriptor glVertexAttribDivisorARB$descriptor() {
        return glVertexAttribDivisorARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribDivisorARB(GLuint index, GLuint divisor)
     * }
     */
    public static MethodHandle glVertexAttribDivisorARB$handle() {
        return glVertexAttribDivisorARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribDivisorARB(GLuint index, GLuint divisor)
     * }
     */
    public static MemorySegment glVertexAttribDivisorARB$address() {
        return glVertexAttribDivisorARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribDivisorARB(GLuint index, GLuint divisor)
     * }
     */
    public static void glVertexAttribDivisorARB(int index, int divisor) {
        var mh$ = glVertexAttribDivisorARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribDivisorARB", index, divisor);
            }
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSampleCoverageARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSampleCoverageARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSampleCoverageARB(GLclampf value, GLboolean invert)
     * }
     */
    public static FunctionDescriptor glSampleCoverageARB$descriptor() {
        return glSampleCoverageARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSampleCoverageARB(GLclampf value, GLboolean invert)
     * }
     */
    public static MethodHandle glSampleCoverageARB$handle() {
        return glSampleCoverageARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSampleCoverageARB(GLclampf value, GLboolean invert)
     * }
     */
    public static MemorySegment glSampleCoverageARB$address() {
        return glSampleCoverageARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSampleCoverageARB(GLclampf value, GLboolean invert)
     * }
     */
    public static void glSampleCoverageARB(float value, byte invert) {
        var mh$ = glSampleCoverageARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSampleCoverageARB", value, invert);
            }
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glActiveTextureARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glActiveTextureARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glActiveTextureARB(GLenum texture)
     * }
     */
    public static FunctionDescriptor glActiveTextureARB$descriptor() {
        return glActiveTextureARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glActiveTextureARB(GLenum texture)
     * }
     */
    public static MethodHandle glActiveTextureARB$handle() {
        return glActiveTextureARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glActiveTextureARB(GLenum texture)
     * }
     */
    public static MemorySegment glActiveTextureARB$address() {
        return glActiveTextureARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glActiveTextureARB(GLenum texture)
     * }
     */
    public static void glActiveTextureARB(int texture) {
        var mh$ = glActiveTextureARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glActiveTextureARB", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClientActiveTextureARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClientActiveTextureARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClientActiveTextureARB(GLenum texture)
     * }
     */
    public static FunctionDescriptor glClientActiveTextureARB$descriptor() {
        return glClientActiveTextureARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClientActiveTextureARB(GLenum texture)
     * }
     */
    public static MethodHandle glClientActiveTextureARB$handle() {
        return glClientActiveTextureARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClientActiveTextureARB(GLenum texture)
     * }
     */
    public static MemorySegment glClientActiveTextureARB$address() {
        return glClientActiveTextureARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClientActiveTextureARB(GLenum texture)
     * }
     */
    public static void glClientActiveTextureARB(int texture) {
        var mh$ = glClientActiveTextureARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClientActiveTextureARB", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dARB(GLenum target, GLdouble s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1dARB$descriptor() {
        return glMultiTexCoord1dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dARB(GLenum target, GLdouble s)
     * }
     */
    public static MethodHandle glMultiTexCoord1dARB$handle() {
        return glMultiTexCoord1dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dARB(GLenum target, GLdouble s)
     * }
     */
    public static MemorySegment glMultiTexCoord1dARB$address() {
        return glMultiTexCoord1dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dARB(GLenum target, GLdouble s)
     * }
     */
    public static void glMultiTexCoord1dARB(int target, double s) {
        var mh$ = glMultiTexCoord1dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1dARB", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1dvARB$descriptor() {
        return glMultiTexCoord1dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1dvARB$handle() {
        return glMultiTexCoord1dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1dvARB$address() {
        return glMultiTexCoord1dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord1dvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1dvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fARB(GLenum target, GLfloat s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1fARB$descriptor() {
        return glMultiTexCoord1fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fARB(GLenum target, GLfloat s)
     * }
     */
    public static MethodHandle glMultiTexCoord1fARB$handle() {
        return glMultiTexCoord1fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fARB(GLenum target, GLfloat s)
     * }
     */
    public static MemorySegment glMultiTexCoord1fARB$address() {
        return glMultiTexCoord1fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fARB(GLenum target, GLfloat s)
     * }
     */
    public static void glMultiTexCoord1fARB(int target, float s) {
        var mh$ = glMultiTexCoord1fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1fARB", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1fvARB$descriptor() {
        return glMultiTexCoord1fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1fvARB$handle() {
        return glMultiTexCoord1fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1fvARB$address() {
        return glMultiTexCoord1fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord1fvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1fvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iARB(GLenum target, GLint s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1iARB$descriptor() {
        return glMultiTexCoord1iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iARB(GLenum target, GLint s)
     * }
     */
    public static MethodHandle glMultiTexCoord1iARB$handle() {
        return glMultiTexCoord1iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iARB(GLenum target, GLint s)
     * }
     */
    public static MemorySegment glMultiTexCoord1iARB$address() {
        return glMultiTexCoord1iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iARB(GLenum target, GLint s)
     * }
     */
    public static void glMultiTexCoord1iARB(int target, int s) {
        var mh$ = glMultiTexCoord1iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1iARB", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1ivARB(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1ivARB$descriptor() {
        return glMultiTexCoord1ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1ivARB$handle() {
        return glMultiTexCoord1ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1ivARB$address() {
        return glMultiTexCoord1ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1ivARB(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord1ivARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1ivARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sARB(GLenum target, GLshort s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1sARB$descriptor() {
        return glMultiTexCoord1sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sARB(GLenum target, GLshort s)
     * }
     */
    public static MethodHandle glMultiTexCoord1sARB$handle() {
        return glMultiTexCoord1sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sARB(GLenum target, GLshort s)
     * }
     */
    public static MemorySegment glMultiTexCoord1sARB$address() {
        return glMultiTexCoord1sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sARB(GLenum target, GLshort s)
     * }
     */
    public static void glMultiTexCoord1sARB(int target, short s) {
        var mh$ = glMultiTexCoord1sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1sARB", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1svARB(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1svARB$descriptor() {
        return glMultiTexCoord1svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1svARB$handle() {
        return glMultiTexCoord1svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1svARB$address() {
        return glMultiTexCoord1svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1svARB(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord1svARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1svARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2dARB$descriptor() {
        return glMultiTexCoord2dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static MethodHandle glMultiTexCoord2dARB$handle() {
        return glMultiTexCoord2dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static MemorySegment glMultiTexCoord2dARB$address() {
        return glMultiTexCoord2dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static void glMultiTexCoord2dARB(int target, double s, double t) {
        var mh$ = glMultiTexCoord2dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2dARB", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2dvARB$descriptor() {
        return glMultiTexCoord2dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2dvARB$handle() {
        return glMultiTexCoord2dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2dvARB$address() {
        return glMultiTexCoord2dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord2dvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2dvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2fARB$descriptor() {
        return glMultiTexCoord2fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static MethodHandle glMultiTexCoord2fARB$handle() {
        return glMultiTexCoord2fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static MemorySegment glMultiTexCoord2fARB$address() {
        return glMultiTexCoord2fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static void glMultiTexCoord2fARB(int target, float s, float t) {
        var mh$ = glMultiTexCoord2fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2fARB", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2fvARB$descriptor() {
        return glMultiTexCoord2fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2fvARB$handle() {
        return glMultiTexCoord2fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2fvARB$address() {
        return glMultiTexCoord2fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord2fvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2fvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2iARB$descriptor() {
        return glMultiTexCoord2iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
     * }
     */
    public static MethodHandle glMultiTexCoord2iARB$handle() {
        return glMultiTexCoord2iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
     * }
     */
    public static MemorySegment glMultiTexCoord2iARB$address() {
        return glMultiTexCoord2iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
     * }
     */
    public static void glMultiTexCoord2iARB(int target, int s, int t) {
        var mh$ = glMultiTexCoord2iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2iARB", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2ivARB(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2ivARB$descriptor() {
        return glMultiTexCoord2ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2ivARB$handle() {
        return glMultiTexCoord2ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2ivARB$address() {
        return glMultiTexCoord2ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2ivARB(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord2ivARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2ivARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2sARB$descriptor() {
        return glMultiTexCoord2sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static MethodHandle glMultiTexCoord2sARB$handle() {
        return glMultiTexCoord2sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static MemorySegment glMultiTexCoord2sARB$address() {
        return glMultiTexCoord2sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static void glMultiTexCoord2sARB(int target, short s, short t) {
        var mh$ = glMultiTexCoord2sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2sARB", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2svARB(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2svARB$descriptor() {
        return glMultiTexCoord2svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2svARB$handle() {
        return glMultiTexCoord2svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2svARB$address() {
        return glMultiTexCoord2svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2svARB(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord2svARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2svARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3dARB$descriptor() {
        return glMultiTexCoord3dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MethodHandle glMultiTexCoord3dARB$handle() {
        return glMultiTexCoord3dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MemorySegment glMultiTexCoord3dARB$address() {
        return glMultiTexCoord3dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static void glMultiTexCoord3dARB(int target, double s, double t, double r) {
        var mh$ = glMultiTexCoord3dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3dARB", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3dvARB$descriptor() {
        return glMultiTexCoord3dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3dvARB$handle() {
        return glMultiTexCoord3dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3dvARB$address() {
        return glMultiTexCoord3dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord3dvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3dvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3fARB$descriptor() {
        return glMultiTexCoord3fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MethodHandle glMultiTexCoord3fARB$handle() {
        return glMultiTexCoord3fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MemorySegment glMultiTexCoord3fARB$address() {
        return glMultiTexCoord3fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static void glMultiTexCoord3fARB(int target, float s, float t, float r) {
        var mh$ = glMultiTexCoord3fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3fARB", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3fvARB$descriptor() {
        return glMultiTexCoord3fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3fvARB$handle() {
        return glMultiTexCoord3fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3fvARB$address() {
        return glMultiTexCoord3fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord3fvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3fvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3iARB$descriptor() {
        return glMultiTexCoord3iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static MethodHandle glMultiTexCoord3iARB$handle() {
        return glMultiTexCoord3iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static MemorySegment glMultiTexCoord3iARB$address() {
        return glMultiTexCoord3iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static void glMultiTexCoord3iARB(int target, int s, int t, int r) {
        var mh$ = glMultiTexCoord3iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3iARB", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3ivARB(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3ivARB$descriptor() {
        return glMultiTexCoord3ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3ivARB$handle() {
        return glMultiTexCoord3ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3ivARB$address() {
        return glMultiTexCoord3ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3ivARB(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord3ivARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3ivARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3sARB$descriptor() {
        return glMultiTexCoord3sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MethodHandle glMultiTexCoord3sARB$handle() {
        return glMultiTexCoord3sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MemorySegment glMultiTexCoord3sARB$address() {
        return glMultiTexCoord3sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static void glMultiTexCoord3sARB(int target, short s, short t, short r) {
        var mh$ = glMultiTexCoord3sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3sARB", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3svARB(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3svARB$descriptor() {
        return glMultiTexCoord3svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3svARB$handle() {
        return glMultiTexCoord3svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3svARB$address() {
        return glMultiTexCoord3svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3svARB(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord3svARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3svARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4dARB$descriptor() {
        return glMultiTexCoord4dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MethodHandle glMultiTexCoord4dARB$handle() {
        return glMultiTexCoord4dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MemorySegment glMultiTexCoord4dARB$address() {
        return glMultiTexCoord4dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static void glMultiTexCoord4dARB(int target, double s, double t, double r, double q) {
        var mh$ = glMultiTexCoord4dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4dARB", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4dvARB$descriptor() {
        return glMultiTexCoord4dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4dvARB$handle() {
        return glMultiTexCoord4dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4dvARB$address() {
        return glMultiTexCoord4dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord4dvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4dvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4fARB$descriptor() {
        return glMultiTexCoord4fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MethodHandle glMultiTexCoord4fARB$handle() {
        return glMultiTexCoord4fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MemorySegment glMultiTexCoord4fARB$address() {
        return glMultiTexCoord4fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static void glMultiTexCoord4fARB(int target, float s, float t, float r, float q) {
        var mh$ = glMultiTexCoord4fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4fARB", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4fvARB$descriptor() {
        return glMultiTexCoord4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4fvARB$handle() {
        return glMultiTexCoord4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4fvARB$address() {
        return glMultiTexCoord4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord4fvARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4fvARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4iARB$descriptor() {
        return glMultiTexCoord4iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MethodHandle glMultiTexCoord4iARB$handle() {
        return glMultiTexCoord4iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MemorySegment glMultiTexCoord4iARB$address() {
        return glMultiTexCoord4iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static void glMultiTexCoord4iARB(int target, int s, int t, int r, int q) {
        var mh$ = glMultiTexCoord4iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4iARB", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4ivARB(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4ivARB$descriptor() {
        return glMultiTexCoord4ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4ivARB$handle() {
        return glMultiTexCoord4ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4ivARB(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4ivARB$address() {
        return glMultiTexCoord4ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4ivARB(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord4ivARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4ivARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4sARB$descriptor() {
        return glMultiTexCoord4sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MethodHandle glMultiTexCoord4sARB$handle() {
        return glMultiTexCoord4sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MemorySegment glMultiTexCoord4sARB$address() {
        return glMultiTexCoord4sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static void glMultiTexCoord4sARB(int target, short s, short t, short r, short q) {
        var mh$ = glMultiTexCoord4sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4sARB", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4svARB(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4svARB$descriptor() {
        return glMultiTexCoord4svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4svARB$handle() {
        return glMultiTexCoord4svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4svARB(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4svARB$address() {
        return glMultiTexCoord4svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4svARB(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord4svARB(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4svARB", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenQueriesARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenQueriesARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenQueriesARB(GLsizei n, GLuint *ids)
     * }
     */
    public static FunctionDescriptor glGenQueriesARB$descriptor() {
        return glGenQueriesARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenQueriesARB(GLsizei n, GLuint *ids)
     * }
     */
    public static MethodHandle glGenQueriesARB$handle() {
        return glGenQueriesARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenQueriesARB(GLsizei n, GLuint *ids)
     * }
     */
    public static MemorySegment glGenQueriesARB$address() {
        return glGenQueriesARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenQueriesARB(GLsizei n, GLuint *ids)
     * }
     */
    public static void glGenQueriesARB(int n, MemorySegment ids) {
        var mh$ = glGenQueriesARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenQueriesARB", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteQueriesARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteQueriesARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteQueriesARB(GLsizei n, const GLuint *ids)
     * }
     */
    public static FunctionDescriptor glDeleteQueriesARB$descriptor() {
        return glDeleteQueriesARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteQueriesARB(GLsizei n, const GLuint *ids)
     * }
     */
    public static MethodHandle glDeleteQueriesARB$handle() {
        return glDeleteQueriesARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteQueriesARB(GLsizei n, const GLuint *ids)
     * }
     */
    public static MemorySegment glDeleteQueriesARB$address() {
        return glDeleteQueriesARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteQueriesARB(GLsizei n, const GLuint *ids)
     * }
     */
    public static void glDeleteQueriesARB(int n, MemorySegment ids) {
        var mh$ = glDeleteQueriesARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteQueriesARB", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsQueryARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsQueryARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsQueryARB(GLuint id)
     * }
     */
    public static FunctionDescriptor glIsQueryARB$descriptor() {
        return glIsQueryARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsQueryARB(GLuint id)
     * }
     */
    public static MethodHandle glIsQueryARB$handle() {
        return glIsQueryARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsQueryARB(GLuint id)
     * }
     */
    public static MemorySegment glIsQueryARB$address() {
        return glIsQueryARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsQueryARB(GLuint id)
     * }
     */
    public static byte glIsQueryARB(int id) {
        var mh$ = glIsQueryARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsQueryARB", id);
            }
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBeginQueryARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBeginQueryARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBeginQueryARB(GLenum target, GLuint id)
     * }
     */
    public static FunctionDescriptor glBeginQueryARB$descriptor() {
        return glBeginQueryARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBeginQueryARB(GLenum target, GLuint id)
     * }
     */
    public static MethodHandle glBeginQueryARB$handle() {
        return glBeginQueryARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBeginQueryARB(GLenum target, GLuint id)
     * }
     */
    public static MemorySegment glBeginQueryARB$address() {
        return glBeginQueryARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBeginQueryARB(GLenum target, GLuint id)
     * }
     */
    public static void glBeginQueryARB(int target, int id) {
        var mh$ = glBeginQueryARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBeginQueryARB", target, id);
            }
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndQueryARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEndQueryARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEndQueryARB(GLenum target)
     * }
     */
    public static FunctionDescriptor glEndQueryARB$descriptor() {
        return glEndQueryARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEndQueryARB(GLenum target)
     * }
     */
    public static MethodHandle glEndQueryARB$handle() {
        return glEndQueryARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEndQueryARB(GLenum target)
     * }
     */
    public static MemorySegment glEndQueryARB$address() {
        return glEndQueryARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEndQueryARB(GLenum target)
     * }
     */
    public static void glEndQueryARB(int target) {
        var mh$ = glEndQueryARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndQueryARB", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryivARB$descriptor() {
        return glGetQueryivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetQueryivARB$handle() {
        return glGetQueryivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetQueryivARB$address() {
        return glGetQueryivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetQueryivARB(int target, int pname, MemorySegment params) {
        var mh$ = glGetQueryivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryivARB", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjectivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjectivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjectivARB$descriptor() {
        return glGetQueryObjectivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetQueryObjectivARB$handle() {
        return glGetQueryObjectivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetQueryObjectivARB$address() {
        return glGetQueryObjectivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static void glGetQueryObjectivARB(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjectivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjectivARB", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjectuivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjectuivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjectuivARB$descriptor() {
        return glGetQueryObjectuivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static MethodHandle glGetQueryObjectuivARB$handle() {
        return glGetQueryObjectuivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static MemorySegment glGetQueryObjectuivARB$address() {
        return glGetQueryObjectuivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static void glGetQueryObjectuivARB(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjectuivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjectuivARB", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameterfARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameterfARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameterfARB(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glPointParameterfARB$descriptor() {
        return glPointParameterfARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameterfARB(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glPointParameterfARB$handle() {
        return glPointParameterfARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameterfARB(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glPointParameterfARB$address() {
        return glPointParameterfARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameterfARB(GLenum pname, GLfloat param)
     * }
     */
    public static void glPointParameterfARB(int pname, float param) {
        var mh$ = glPointParameterfARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameterfARB", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameterfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameterfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameterfvARB(GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glPointParameterfvARB$descriptor() {
        return glPointParameterfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameterfvARB(GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glPointParameterfvARB$handle() {
        return glPointParameterfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameterfvARB(GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glPointParameterfvARB$address() {
        return glPointParameterfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameterfvARB(GLenum pname, const GLfloat *params)
     * }
     */
    public static void glPointParameterfvARB(int pname, MemorySegment params) {
        var mh$ = glPointParameterfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameterfvARB", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProvokingVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProvokingVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProvokingVertex(GLenum mode)
     * }
     */
    public static FunctionDescriptor glProvokingVertex$descriptor() {
        return glProvokingVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProvokingVertex(GLenum mode)
     * }
     */
    public static MethodHandle glProvokingVertex$handle() {
        return glProvokingVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProvokingVertex(GLenum mode)
     * }
     */
    public static MemorySegment glProvokingVertex$address() {
        return glProvokingVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProvokingVertex(GLenum mode)
     * }
     */
    public static void glProvokingVertex(int mode) {
        var mh$ = glProvokingVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProvokingVertex", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteObjectARB(GLhandleARB obj)
     * }
     */
    public static FunctionDescriptor glDeleteObjectARB$descriptor() {
        return glDeleteObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteObjectARB(GLhandleARB obj)
     * }
     */
    public static MethodHandle glDeleteObjectARB$handle() {
        return glDeleteObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteObjectARB(GLhandleARB obj)
     * }
     */
    public static MemorySegment glDeleteObjectARB$address() {
        return glDeleteObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteObjectARB(GLhandleARB obj)
     * }
     */
    public static void glDeleteObjectARB(MemorySegment obj) {
        var mh$ = glDeleteObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteObjectARB", obj);
            }
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetHandleARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetHandleARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLhandleARB glGetHandleARB(GLenum pname)
     * }
     */
    public static FunctionDescriptor glGetHandleARB$descriptor() {
        return glGetHandleARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLhandleARB glGetHandleARB(GLenum pname)
     * }
     */
    public static MethodHandle glGetHandleARB$handle() {
        return glGetHandleARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLhandleARB glGetHandleARB(GLenum pname)
     * }
     */
    public static MemorySegment glGetHandleARB$address() {
        return glGetHandleARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLhandleARB glGetHandleARB(GLenum pname)
     * }
     */
    public static MemorySegment glGetHandleARB(int pname) {
        var mh$ = glGetHandleARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetHandleARB", pname);
            }
            return (MemorySegment)mh$.invokeExact(pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDetachObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDetachObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
     * }
     */
    public static FunctionDescriptor glDetachObjectARB$descriptor() {
        return glDetachObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
     * }
     */
    public static MethodHandle glDetachObjectARB$handle() {
        return glDetachObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
     * }
     */
    public static MemorySegment glDetachObjectARB$address() {
        return glDetachObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
     * }
     */
    public static void glDetachObjectARB(MemorySegment containerObj, MemorySegment attachedObj) {
        var mh$ = glDetachObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDetachObjectARB", containerObj, attachedObj);
            }
            mh$.invokeExact(containerObj, attachedObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCreateShaderObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCreateShaderObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
     * }
     */
    public static FunctionDescriptor glCreateShaderObjectARB$descriptor() {
        return glCreateShaderObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
     * }
     */
    public static MethodHandle glCreateShaderObjectARB$handle() {
        return glCreateShaderObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
     * }
     */
    public static MemorySegment glCreateShaderObjectARB$address() {
        return glCreateShaderObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
     * }
     */
    public static MemorySegment glCreateShaderObjectARB(int shaderType) {
        var mh$ = glCreateShaderObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCreateShaderObjectARB", shaderType);
            }
            return (MemorySegment)mh$.invokeExact(shaderType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glShaderSourceARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glShaderSourceARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB *const *string, const GLint *length)
     * }
     */
    public static FunctionDescriptor glShaderSourceARB$descriptor() {
        return glShaderSourceARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB *const *string, const GLint *length)
     * }
     */
    public static MethodHandle glShaderSourceARB$handle() {
        return glShaderSourceARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB *const *string, const GLint *length)
     * }
     */
    public static MemorySegment glShaderSourceARB$address() {
        return glShaderSourceARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB *const *string, const GLint *length)
     * }
     */
    public static void glShaderSourceARB(MemorySegment shaderObj, int count, MemorySegment string, MemorySegment length) {
        var mh$ = glShaderSourceARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glShaderSourceARB", shaderObj, count, string, length);
            }
            mh$.invokeExact(shaderObj, count, string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompileShaderARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompileShaderARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompileShaderARB(GLhandleARB shaderObj)
     * }
     */
    public static FunctionDescriptor glCompileShaderARB$descriptor() {
        return glCompileShaderARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompileShaderARB(GLhandleARB shaderObj)
     * }
     */
    public static MethodHandle glCompileShaderARB$handle() {
        return glCompileShaderARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompileShaderARB(GLhandleARB shaderObj)
     * }
     */
    public static MemorySegment glCompileShaderARB$address() {
        return glCompileShaderARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompileShaderARB(GLhandleARB shaderObj)
     * }
     */
    public static void glCompileShaderARB(MemorySegment shaderObj) {
        var mh$ = glCompileShaderARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompileShaderARB", shaderObj);
            }
            mh$.invokeExact(shaderObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCreateProgramObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCreateProgramObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateProgramObjectARB()
     * }
     */
    public static FunctionDescriptor glCreateProgramObjectARB$descriptor() {
        return glCreateProgramObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateProgramObjectARB()
     * }
     */
    public static MethodHandle glCreateProgramObjectARB$handle() {
        return glCreateProgramObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLhandleARB glCreateProgramObjectARB()
     * }
     */
    public static MemorySegment glCreateProgramObjectARB$address() {
        return glCreateProgramObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLhandleARB glCreateProgramObjectARB()
     * }
     */
    public static MemorySegment glCreateProgramObjectARB() {
        var mh$ = glCreateProgramObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCreateProgramObjectARB");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAttachObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glAttachObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
     * }
     */
    public static FunctionDescriptor glAttachObjectARB$descriptor() {
        return glAttachObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
     * }
     */
    public static MethodHandle glAttachObjectARB$handle() {
        return glAttachObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
     * }
     */
    public static MemorySegment glAttachObjectARB$address() {
        return glAttachObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
     * }
     */
    public static void glAttachObjectARB(MemorySegment containerObj, MemorySegment obj) {
        var mh$ = glAttachObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAttachObjectARB", containerObj, obj);
            }
            mh$.invokeExact(containerObj, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLinkProgramARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLinkProgramARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLinkProgramARB(GLhandleARB programObj)
     * }
     */
    public static FunctionDescriptor glLinkProgramARB$descriptor() {
        return glLinkProgramARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLinkProgramARB(GLhandleARB programObj)
     * }
     */
    public static MethodHandle glLinkProgramARB$handle() {
        return glLinkProgramARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLinkProgramARB(GLhandleARB programObj)
     * }
     */
    public static MemorySegment glLinkProgramARB$address() {
        return glLinkProgramARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLinkProgramARB(GLhandleARB programObj)
     * }
     */
    public static void glLinkProgramARB(MemorySegment programObj) {
        var mh$ = glLinkProgramARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLinkProgramARB", programObj);
            }
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUseProgramObjectARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUseProgramObjectARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUseProgramObjectARB(GLhandleARB programObj)
     * }
     */
    public static FunctionDescriptor glUseProgramObjectARB$descriptor() {
        return glUseProgramObjectARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUseProgramObjectARB(GLhandleARB programObj)
     * }
     */
    public static MethodHandle glUseProgramObjectARB$handle() {
        return glUseProgramObjectARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUseProgramObjectARB(GLhandleARB programObj)
     * }
     */
    public static MemorySegment glUseProgramObjectARB$address() {
        return glUseProgramObjectARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUseProgramObjectARB(GLhandleARB programObj)
     * }
     */
    public static void glUseProgramObjectARB(MemorySegment programObj) {
        var mh$ = glUseProgramObjectARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUseProgramObjectARB", programObj);
            }
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glValidateProgramARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glValidateProgramARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glValidateProgramARB(GLhandleARB programObj)
     * }
     */
    public static FunctionDescriptor glValidateProgramARB$descriptor() {
        return glValidateProgramARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glValidateProgramARB(GLhandleARB programObj)
     * }
     */
    public static MethodHandle glValidateProgramARB$handle() {
        return glValidateProgramARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glValidateProgramARB(GLhandleARB programObj)
     * }
     */
    public static MemorySegment glValidateProgramARB$address() {
        return glValidateProgramARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glValidateProgramARB(GLhandleARB programObj)
     * }
     */
    public static void glValidateProgramARB(MemorySegment programObj) {
        var mh$ = glValidateProgramARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glValidateProgramARB", programObj);
            }
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1fARB(GLint location, GLfloat v0)
     * }
     */
    public static FunctionDescriptor glUniform1fARB$descriptor() {
        return glUniform1fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1fARB(GLint location, GLfloat v0)
     * }
     */
    public static MethodHandle glUniform1fARB$handle() {
        return glUniform1fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1fARB(GLint location, GLfloat v0)
     * }
     */
    public static MemorySegment glUniform1fARB$address() {
        return glUniform1fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1fARB(GLint location, GLfloat v0)
     * }
     */
    public static void glUniform1fARB(int location, float v0) {
        var mh$ = glUniform1fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1fARB", location, v0);
            }
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static FunctionDescriptor glUniform2fARB$descriptor() {
        return glUniform2fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static MethodHandle glUniform2fARB$handle() {
        return glUniform2fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static MemorySegment glUniform2fARB$address() {
        return glUniform2fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static void glUniform2fARB(int location, float v0, float v1) {
        var mh$ = glUniform2fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2fARB", location, v0, v1);
            }
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static FunctionDescriptor glUniform3fARB$descriptor() {
        return glUniform3fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static MethodHandle glUniform3fARB$handle() {
        return glUniform3fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static MemorySegment glUniform3fARB$address() {
        return glUniform3fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static void glUniform3fARB(int location, float v0, float v1, float v2) {
        var mh$ = glUniform3fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3fARB", location, v0, v1, v2);
            }
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static FunctionDescriptor glUniform4fARB$descriptor() {
        return glUniform4fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static MethodHandle glUniform4fARB$handle() {
        return glUniform4fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static MemorySegment glUniform4fARB$address() {
        return glUniform4fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static void glUniform4fARB(int location, float v0, float v1, float v2, float v3) {
        var mh$ = glUniform4fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4fARB", location, v0, v1, v2, v3);
            }
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1iARB(GLint location, GLint v0)
     * }
     */
    public static FunctionDescriptor glUniform1iARB$descriptor() {
        return glUniform1iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1iARB(GLint location, GLint v0)
     * }
     */
    public static MethodHandle glUniform1iARB$handle() {
        return glUniform1iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1iARB(GLint location, GLint v0)
     * }
     */
    public static MemorySegment glUniform1iARB$address() {
        return glUniform1iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1iARB(GLint location, GLint v0)
     * }
     */
    public static void glUniform1iARB(int location, int v0) {
        var mh$ = glUniform1iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1iARB", location, v0);
            }
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2iARB(GLint location, GLint v0, GLint v1)
     * }
     */
    public static FunctionDescriptor glUniform2iARB$descriptor() {
        return glUniform2iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2iARB(GLint location, GLint v0, GLint v1)
     * }
     */
    public static MethodHandle glUniform2iARB$handle() {
        return glUniform2iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2iARB(GLint location, GLint v0, GLint v1)
     * }
     */
    public static MemorySegment glUniform2iARB$address() {
        return glUniform2iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2iARB(GLint location, GLint v0, GLint v1)
     * }
     */
    public static void glUniform2iARB(int location, int v0, int v1) {
        var mh$ = glUniform2iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2iARB", location, v0, v1);
            }
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static FunctionDescriptor glUniform3iARB$descriptor() {
        return glUniform3iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static MethodHandle glUniform3iARB$handle() {
        return glUniform3iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static MemorySegment glUniform3iARB$address() {
        return glUniform3iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static void glUniform3iARB(int location, int v0, int v1, int v2) {
        var mh$ = glUniform3iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3iARB", location, v0, v1, v2);
            }
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static FunctionDescriptor glUniform4iARB$descriptor() {
        return glUniform4iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static MethodHandle glUniform4iARB$handle() {
        return glUniform4iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static MemorySegment glUniform4iARB$address() {
        return glUniform4iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static void glUniform4iARB(int location, int v0, int v1, int v2, int v3) {
        var mh$ = glUniform4iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4iARB", location, v0, v1, v2, v3);
            }
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform1fvARB$descriptor() {
        return glUniform1fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform1fvARB$handle() {
        return glUniform1fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform1fvARB$address() {
        return glUniform1fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform1fvARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform1fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1fvARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform2fvARB$descriptor() {
        return glUniform2fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform2fvARB$handle() {
        return glUniform2fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform2fvARB$address() {
        return glUniform2fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform2fvARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform2fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2fvARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform3fvARB$descriptor() {
        return glUniform3fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform3fvARB$handle() {
        return glUniform3fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform3fvARB$address() {
        return glUniform3fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform3fvARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform3fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3fvARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform4fvARB$descriptor() {
        return glUniform4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform4fvARB$handle() {
        return glUniform4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform4fvARB$address() {
        return glUniform4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform4fvARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4fvARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform1ivARB$descriptor() {
        return glUniform1ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform1ivARB$handle() {
        return glUniform1ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform1ivARB$address() {
        return glUniform1ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform1ivARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform1ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1ivARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform2ivARB$descriptor() {
        return glUniform2ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform2ivARB$handle() {
        return glUniform2ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform2ivARB$address() {
        return glUniform2ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform2ivARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform2ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2ivARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform3ivARB$descriptor() {
        return glUniform3ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform3ivARB$handle() {
        return glUniform3ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform3ivARB$address() {
        return glUniform3ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform3ivARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform3ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3ivARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform4ivARB$descriptor() {
        return glUniform4ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform4ivARB$handle() {
        return glUniform4ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform4ivARB$address() {
        return glUniform4ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform4ivARB(int location, int count, MemorySegment value) {
        var mh$ = glUniform4ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4ivARB", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix2fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix2fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix2fvARB$descriptor() {
        return glUniformMatrix2fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix2fvARB$handle() {
        return glUniformMatrix2fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix2fvARB$address() {
        return glUniformMatrix2fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix2fvARB(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix2fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix2fvARB", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix3fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix3fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix3fvARB$descriptor() {
        return glUniformMatrix3fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix3fvARB$handle() {
        return glUniformMatrix3fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix3fvARB$address() {
        return glUniformMatrix3fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix3fvARB(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix3fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix3fvARB", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix4fvARB$descriptor() {
        return glUniformMatrix4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix4fvARB$handle() {
        return glUniformMatrix4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix4fvARB$address() {
        return glUniformMatrix4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix4fvARB(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix4fvARB", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetObjectParameterfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetObjectParameterfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetObjectParameterfvARB$descriptor() {
        return glGetObjectParameterfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetObjectParameterfvARB$handle() {
        return glGetObjectParameterfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetObjectParameterfvARB$address() {
        return glGetObjectParameterfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetObjectParameterfvARB(MemorySegment obj, int pname, MemorySegment params) {
        var mh$ = glGetObjectParameterfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetObjectParameterfvARB", obj, pname, params);
            }
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetObjectParameterivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetObjectParameterivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetObjectParameterivARB$descriptor() {
        return glGetObjectParameterivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetObjectParameterivARB$handle() {
        return glGetObjectParameterivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetObjectParameterivARB$address() {
        return glGetObjectParameterivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
     * }
     */
    public static void glGetObjectParameterivARB(MemorySegment obj, int pname, MemorySegment params) {
        var mh$ = glGetObjectParameterivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetObjectParameterivARB", obj, pname, params);
            }
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetInfoLogARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetInfoLogARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
     * }
     */
    public static FunctionDescriptor glGetInfoLogARB$descriptor() {
        return glGetInfoLogARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
     * }
     */
    public static MethodHandle glGetInfoLogARB$handle() {
        return glGetInfoLogARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
     * }
     */
    public static MemorySegment glGetInfoLogARB$address() {
        return glGetInfoLogARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
     * }
     */
    public static void glGetInfoLogARB(MemorySegment obj, int maxLength, MemorySegment length, MemorySegment infoLog) {
        var mh$ = glGetInfoLogARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetInfoLogARB", obj, maxLength, length, infoLog);
            }
            mh$.invokeExact(obj, maxLength, length, infoLog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetAttachedObjectsARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetAttachedObjectsARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
     * }
     */
    public static FunctionDescriptor glGetAttachedObjectsARB$descriptor() {
        return glGetAttachedObjectsARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
     * }
     */
    public static MethodHandle glGetAttachedObjectsARB$handle() {
        return glGetAttachedObjectsARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
     * }
     */
    public static MemorySegment glGetAttachedObjectsARB$address() {
        return glGetAttachedObjectsARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
     * }
     */
    public static void glGetAttachedObjectsARB(MemorySegment containerObj, int maxCount, MemorySegment count, MemorySegment obj) {
        var mh$ = glGetAttachedObjectsARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetAttachedObjectsARB", containerObj, maxCount, count, obj);
            }
            mh$.invokeExact(containerObj, maxCount, count, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformLocationARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformLocationARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static FunctionDescriptor glGetUniformLocationARB$descriptor() {
        return glGetUniformLocationARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static MethodHandle glGetUniformLocationARB$handle() {
        return glGetUniformLocationARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static MemorySegment glGetUniformLocationARB$address() {
        return glGetUniformLocationARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static int glGetUniformLocationARB(MemorySegment programObj, MemorySegment name) {
        var mh$ = glGetUniformLocationARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformLocationARB", programObj, name);
            }
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetActiveUniformARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetActiveUniformARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static FunctionDescriptor glGetActiveUniformARB$descriptor() {
        return glGetActiveUniformARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static MethodHandle glGetActiveUniformARB$handle() {
        return glGetActiveUniformARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static MemorySegment glGetActiveUniformARB$address() {
        return glGetActiveUniformARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static void glGetActiveUniformARB(MemorySegment programObj, int index, int maxLength, MemorySegment length, MemorySegment size, MemorySegment type, MemorySegment name) {
        var mh$ = glGetActiveUniformARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetActiveUniformARB", programObj, index, maxLength, length, size, type, name);
            }
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetUniformfvARB$descriptor() {
        return glGetUniformfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
     * }
     */
    public static MethodHandle glGetUniformfvARB$handle() {
        return glGetUniformfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
     * }
     */
    public static MemorySegment glGetUniformfvARB$address() {
        return glGetUniformfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
     * }
     */
    public static void glGetUniformfvARB(MemorySegment programObj, int location, MemorySegment params) {
        var mh$ = glGetUniformfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformfvARB", programObj, location, params);
            }
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetUniformivARB$descriptor() {
        return glGetUniformivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
     * }
     */
    public static MethodHandle glGetUniformivARB$handle() {
        return glGetUniformivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
     * }
     */
    public static MemorySegment glGetUniformivARB$address() {
        return glGetUniformivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
     * }
     */
    public static void glGetUniformivARB(MemorySegment programObj, int location, MemorySegment params) {
        var mh$ = glGetUniformivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformivARB", programObj, location, params);
            }
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetShaderSourceARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetShaderSourceARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
     * }
     */
    public static FunctionDescriptor glGetShaderSourceARB$descriptor() {
        return glGetShaderSourceARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
     * }
     */
    public static MethodHandle glGetShaderSourceARB$handle() {
        return glGetShaderSourceARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
     * }
     */
    public static MemorySegment glGetShaderSourceARB$address() {
        return glGetShaderSourceARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
     * }
     */
    public static void glGetShaderSourceARB(MemorySegment obj, int maxLength, MemorySegment length, MemorySegment source) {
        var mh$ = glGetShaderSourceARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetShaderSourceARB", obj, maxLength, length, source);
            }
            mh$.invokeExact(obj, maxLength, length, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFenceSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFenceSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLsync glFenceSync(GLenum condition, GLbitfield flags)
     * }
     */
    public static FunctionDescriptor glFenceSync$descriptor() {
        return glFenceSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLsync glFenceSync(GLenum condition, GLbitfield flags)
     * }
     */
    public static MethodHandle glFenceSync$handle() {
        return glFenceSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLsync glFenceSync(GLenum condition, GLbitfield flags)
     * }
     */
    public static MemorySegment glFenceSync$address() {
        return glFenceSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLsync glFenceSync(GLenum condition, GLbitfield flags)
     * }
     */
    public static MemorySegment glFenceSync(int condition, int flags) {
        var mh$ = glFenceSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFenceSync", condition, flags);
            }
            return (MemorySegment)mh$.invokeExact(condition, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsSync(GLsync sync)
     * }
     */
    public static FunctionDescriptor glIsSync$descriptor() {
        return glIsSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsSync(GLsync sync)
     * }
     */
    public static MethodHandle glIsSync$handle() {
        return glIsSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsSync(GLsync sync)
     * }
     */
    public static MemorySegment glIsSync$address() {
        return glIsSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsSync(GLsync sync)
     * }
     */
    public static byte glIsSync(MemorySegment sync) {
        var mh$ = glIsSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsSync", sync);
            }
            return (byte)mh$.invokeExact(sync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteSync(GLsync sync)
     * }
     */
    public static FunctionDescriptor glDeleteSync$descriptor() {
        return glDeleteSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteSync(GLsync sync)
     * }
     */
    public static MethodHandle glDeleteSync$handle() {
        return glDeleteSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteSync(GLsync sync)
     * }
     */
    public static MemorySegment glDeleteSync$address() {
        return glDeleteSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteSync(GLsync sync)
     * }
     */
    public static void glDeleteSync(MemorySegment sync) {
        var mh$ = glDeleteSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteSync", sync);
            }
            mh$.invokeExact(sync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClientWaitSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClientWaitSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static FunctionDescriptor glClientWaitSync$descriptor() {
        return glClientWaitSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static MethodHandle glClientWaitSync$handle() {
        return glClientWaitSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static MemorySegment glClientWaitSync$address() {
        return glClientWaitSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static int glClientWaitSync(MemorySegment sync, int flags, long timeout) {
        var mh$ = glClientWaitSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClientWaitSync", sync, flags, timeout);
            }
            return (int)mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWaitSync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWaitSync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static FunctionDescriptor glWaitSync$descriptor() {
        return glWaitSync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static MethodHandle glWaitSync$handle() {
        return glWaitSync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static MemorySegment glWaitSync$address() {
        return glWaitSync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
     * }
     */
    public static void glWaitSync(MemorySegment sync, int flags, long timeout) {
        var mh$ = glWaitSync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWaitSync", sync, flags, timeout);
            }
            mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetInteger64v {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetInteger64v");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetInteger64v(GLenum pname, GLint64 *params)
     * }
     */
    public static FunctionDescriptor glGetInteger64v$descriptor() {
        return glGetInteger64v.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetInteger64v(GLenum pname, GLint64 *params)
     * }
     */
    public static MethodHandle glGetInteger64v$handle() {
        return glGetInteger64v.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetInteger64v(GLenum pname, GLint64 *params)
     * }
     */
    public static MemorySegment glGetInteger64v$address() {
        return glGetInteger64v.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetInteger64v(GLenum pname, GLint64 *params)
     * }
     */
    public static void glGetInteger64v(int pname, MemorySegment params) {
        var mh$ = glGetInteger64v.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetInteger64v", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetSynciv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetSynciv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
     * }
     */
    public static FunctionDescriptor glGetSynciv$descriptor() {
        return glGetSynciv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
     * }
     */
    public static MethodHandle glGetSynciv$handle() {
        return glGetSynciv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
     * }
     */
    public static MemorySegment glGetSynciv$address() {
        return glGetSynciv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
     * }
     */
    public static void glGetSynciv(MemorySegment sync, int pname, int bufSize, MemorySegment length, MemorySegment values) {
        var mh$ = glGetSynciv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetSynciv", sync, pname, bufSize, length, values);
            }
            mh$.invokeExact(sync, pname, bufSize, length, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage3DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage3DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage3DARB$descriptor() {
        return glCompressedTexImage3DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage3DARB$handle() {
        return glCompressedTexImage3DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage3DARB$address() {
        return glCompressedTexImage3DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage3DARB(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage3DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage3DARB", target, level, internalformat, width, height, depth, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage2DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage2DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage2DARB$descriptor() {
        return glCompressedTexImage2DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage2DARB$handle() {
        return glCompressedTexImage2DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage2DARB$address() {
        return glCompressedTexImage2DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage2DARB(int target, int level, int internalformat, int width, int height, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage2DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage2DARB", target, level, internalformat, width, height, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage1DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage1DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage1DARB$descriptor() {
        return glCompressedTexImage1DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage1DARB$handle() {
        return glCompressedTexImage1DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage1DARB$address() {
        return glCompressedTexImage1DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage1DARB(int target, int level, int internalformat, int width, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage1DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage1DARB", target, level, internalformat, width, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage3DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage3DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage3DARB$descriptor() {
        return glCompressedTexSubImage3DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage3DARB$handle() {
        return glCompressedTexSubImage3DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage3DARB$address() {
        return glCompressedTexSubImage3DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage3DARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage3DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage3DARB", target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage2DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage2DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage2DARB$descriptor() {
        return glCompressedTexSubImage2DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage2DARB$handle() {
        return glCompressedTexSubImage2DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage2DARB$address() {
        return glCompressedTexSubImage2DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage2DARB(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage2DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage2DARB", target, level, xoffset, yoffset, width, height, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage1DARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage1DARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage1DARB$descriptor() {
        return glCompressedTexSubImage1DARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage1DARB$handle() {
        return glCompressedTexSubImage1DARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage1DARB$address() {
        return glCompressedTexSubImage1DARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage1DARB(int target, int level, int xoffset, int width, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage1DARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage1DARB", target, level, xoffset, width, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetCompressedTexImageARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetCompressedTexImageARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *data)
     * }
     */
    public static FunctionDescriptor glGetCompressedTexImageARB$descriptor() {
        return glGetCompressedTexImageARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *data)
     * }
     */
    public static MethodHandle glGetCompressedTexImageARB$handle() {
        return glGetCompressedTexImageARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *data)
     * }
     */
    public static MemorySegment glGetCompressedTexImageARB$address() {
        return glGetCompressedTexImageARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *data)
     * }
     */
    public static void glGetCompressedTexImageARB(int target, int level, MemorySegment data) {
        var mh$ = glGetCompressedTexImageARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetCompressedTexImageARB", target, level, data);
            }
            mh$.invokeExact(target, level, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadTransposeMatrixfARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadTransposeMatrixfARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glLoadTransposeMatrixfARB$descriptor() {
        return glLoadTransposeMatrixfARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static MethodHandle glLoadTransposeMatrixfARB$handle() {
        return glLoadTransposeMatrixfARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static MemorySegment glLoadTransposeMatrixfARB$address() {
        return glLoadTransposeMatrixfARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static void glLoadTransposeMatrixfARB(MemorySegment m) {
        var mh$ = glLoadTransposeMatrixfARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadTransposeMatrixfARB", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadTransposeMatrixdARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadTransposeMatrixdARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glLoadTransposeMatrixdARB$descriptor() {
        return glLoadTransposeMatrixdARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static MethodHandle glLoadTransposeMatrixdARB$handle() {
        return glLoadTransposeMatrixdARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static MemorySegment glLoadTransposeMatrixdARB$address() {
        return glLoadTransposeMatrixdARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static void glLoadTransposeMatrixdARB(MemorySegment m) {
        var mh$ = glLoadTransposeMatrixdARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadTransposeMatrixdARB", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultTransposeMatrixfARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultTransposeMatrixfARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glMultTransposeMatrixfARB$descriptor() {
        return glMultTransposeMatrixfARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static MethodHandle glMultTransposeMatrixfARB$handle() {
        return glMultTransposeMatrixfARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static MemorySegment glMultTransposeMatrixfARB$address() {
        return glMultTransposeMatrixfARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixfARB(const GLfloat *m)
     * }
     */
    public static void glMultTransposeMatrixfARB(MemorySegment m) {
        var mh$ = glMultTransposeMatrixfARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultTransposeMatrixfARB", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultTransposeMatrixdARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultTransposeMatrixdARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glMultTransposeMatrixdARB$descriptor() {
        return glMultTransposeMatrixdARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static MethodHandle glMultTransposeMatrixdARB$handle() {
        return glMultTransposeMatrixdARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static MemorySegment glMultTransposeMatrixdARB$address() {
        return glMultTransposeMatrixdARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixdARB(const GLdouble *m)
     * }
     */
    public static void glMultTransposeMatrixdARB(MemorySegment m) {
        var mh$ = glMultTransposeMatrixdARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultTransposeMatrixdARB", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightbvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightbvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightbvARB(GLint size, const GLbyte *weights)
     * }
     */
    public static FunctionDescriptor glWeightbvARB$descriptor() {
        return glWeightbvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightbvARB(GLint size, const GLbyte *weights)
     * }
     */
    public static MethodHandle glWeightbvARB$handle() {
        return glWeightbvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightbvARB(GLint size, const GLbyte *weights)
     * }
     */
    public static MemorySegment glWeightbvARB$address() {
        return glWeightbvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightbvARB(GLint size, const GLbyte *weights)
     * }
     */
    public static void glWeightbvARB(int size, MemorySegment weights) {
        var mh$ = glWeightbvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightbvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightsvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightsvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightsvARB(GLint size, const GLshort *weights)
     * }
     */
    public static FunctionDescriptor glWeightsvARB$descriptor() {
        return glWeightsvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightsvARB(GLint size, const GLshort *weights)
     * }
     */
    public static MethodHandle glWeightsvARB$handle() {
        return glWeightsvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightsvARB(GLint size, const GLshort *weights)
     * }
     */
    public static MemorySegment glWeightsvARB$address() {
        return glWeightsvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightsvARB(GLint size, const GLshort *weights)
     * }
     */
    public static void glWeightsvARB(int size, MemorySegment weights) {
        var mh$ = glWeightsvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightsvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightivARB(GLint size, const GLint *weights)
     * }
     */
    public static FunctionDescriptor glWeightivARB$descriptor() {
        return glWeightivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightivARB(GLint size, const GLint *weights)
     * }
     */
    public static MethodHandle glWeightivARB$handle() {
        return glWeightivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightivARB(GLint size, const GLint *weights)
     * }
     */
    public static MemorySegment glWeightivARB$address() {
        return glWeightivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightivARB(GLint size, const GLint *weights)
     * }
     */
    public static void glWeightivARB(int size, MemorySegment weights) {
        var mh$ = glWeightivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightivARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightfvARB(GLint size, const GLfloat *weights)
     * }
     */
    public static FunctionDescriptor glWeightfvARB$descriptor() {
        return glWeightfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightfvARB(GLint size, const GLfloat *weights)
     * }
     */
    public static MethodHandle glWeightfvARB$handle() {
        return glWeightfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightfvARB(GLint size, const GLfloat *weights)
     * }
     */
    public static MemorySegment glWeightfvARB$address() {
        return glWeightfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightfvARB(GLint size, const GLfloat *weights)
     * }
     */
    public static void glWeightfvARB(int size, MemorySegment weights) {
        var mh$ = glWeightfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightfvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightdvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightdvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightdvARB(GLint size, const GLdouble *weights)
     * }
     */
    public static FunctionDescriptor glWeightdvARB$descriptor() {
        return glWeightdvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightdvARB(GLint size, const GLdouble *weights)
     * }
     */
    public static MethodHandle glWeightdvARB$handle() {
        return glWeightdvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightdvARB(GLint size, const GLdouble *weights)
     * }
     */
    public static MemorySegment glWeightdvARB$address() {
        return glWeightdvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightdvARB(GLint size, const GLdouble *weights)
     * }
     */
    public static void glWeightdvARB(int size, MemorySegment weights) {
        var mh$ = glWeightdvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightdvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightubvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightubvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightubvARB(GLint size, const GLubyte *weights)
     * }
     */
    public static FunctionDescriptor glWeightubvARB$descriptor() {
        return glWeightubvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightubvARB(GLint size, const GLubyte *weights)
     * }
     */
    public static MethodHandle glWeightubvARB$handle() {
        return glWeightubvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightubvARB(GLint size, const GLubyte *weights)
     * }
     */
    public static MemorySegment glWeightubvARB$address() {
        return glWeightubvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightubvARB(GLint size, const GLubyte *weights)
     * }
     */
    public static void glWeightubvARB(int size, MemorySegment weights) {
        var mh$ = glWeightubvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightubvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightusvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightusvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightusvARB(GLint size, const GLushort *weights)
     * }
     */
    public static FunctionDescriptor glWeightusvARB$descriptor() {
        return glWeightusvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightusvARB(GLint size, const GLushort *weights)
     * }
     */
    public static MethodHandle glWeightusvARB$handle() {
        return glWeightusvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightusvARB(GLint size, const GLushort *weights)
     * }
     */
    public static MemorySegment glWeightusvARB$address() {
        return glWeightusvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightusvARB(GLint size, const GLushort *weights)
     * }
     */
    public static void glWeightusvARB(int size, MemorySegment weights) {
        var mh$ = glWeightusvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightusvARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightuivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightuivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightuivARB(GLint size, const GLuint *weights)
     * }
     */
    public static FunctionDescriptor glWeightuivARB$descriptor() {
        return glWeightuivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightuivARB(GLint size, const GLuint *weights)
     * }
     */
    public static MethodHandle glWeightuivARB$handle() {
        return glWeightuivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightuivARB(GLint size, const GLuint *weights)
     * }
     */
    public static MemorySegment glWeightuivARB$address() {
        return glWeightuivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightuivARB(GLint size, const GLuint *weights)
     * }
     */
    public static void glWeightuivARB(int size, MemorySegment weights) {
        var mh$ = glWeightuivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightuivARB", size, weights);
            }
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWeightPointerARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWeightPointerARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glWeightPointerARB$descriptor() {
        return glWeightPointerARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glWeightPointerARB$handle() {
        return glWeightPointerARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glWeightPointerARB$address() {
        return glWeightPointerARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glWeightPointerARB(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glWeightPointerARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWeightPointerARB", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexBlendARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexBlendARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexBlendARB(GLint count)
     * }
     */
    public static FunctionDescriptor glVertexBlendARB$descriptor() {
        return glVertexBlendARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexBlendARB(GLint count)
     * }
     */
    public static MethodHandle glVertexBlendARB$handle() {
        return glVertexBlendARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexBlendARB(GLint count)
     * }
     */
    public static MemorySegment glVertexBlendARB$address() {
        return glVertexBlendARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexBlendARB(GLint count)
     * }
     */
    public static void glVertexBlendARB(int count) {
        var mh$ = glVertexBlendARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexBlendARB", count);
            }
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindBufferARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindBufferARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindBufferARB(GLenum target, GLuint buffer)
     * }
     */
    public static FunctionDescriptor glBindBufferARB$descriptor() {
        return glBindBufferARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindBufferARB(GLenum target, GLuint buffer)
     * }
     */
    public static MethodHandle glBindBufferARB$handle() {
        return glBindBufferARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindBufferARB(GLenum target, GLuint buffer)
     * }
     */
    public static MemorySegment glBindBufferARB$address() {
        return glBindBufferARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindBufferARB(GLenum target, GLuint buffer)
     * }
     */
    public static void glBindBufferARB(int target, int buffer) {
        var mh$ = glBindBufferARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindBufferARB", target, buffer);
            }
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteBuffersARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteBuffersARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
     * }
     */
    public static FunctionDescriptor glDeleteBuffersARB$descriptor() {
        return glDeleteBuffersARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
     * }
     */
    public static MethodHandle glDeleteBuffersARB$handle() {
        return glDeleteBuffersARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
     * }
     */
    public static MemorySegment glDeleteBuffersARB$address() {
        return glDeleteBuffersARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
     * }
     */
    public static void glDeleteBuffersARB(int n, MemorySegment buffers) {
        var mh$ = glDeleteBuffersARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteBuffersARB", n, buffers);
            }
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenBuffersARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenBuffersARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenBuffersARB(GLsizei n, GLuint *buffers)
     * }
     */
    public static FunctionDescriptor glGenBuffersARB$descriptor() {
        return glGenBuffersARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenBuffersARB(GLsizei n, GLuint *buffers)
     * }
     */
    public static MethodHandle glGenBuffersARB$handle() {
        return glGenBuffersARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenBuffersARB(GLsizei n, GLuint *buffers)
     * }
     */
    public static MemorySegment glGenBuffersARB$address() {
        return glGenBuffersARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenBuffersARB(GLsizei n, GLuint *buffers)
     * }
     */
    public static void glGenBuffersARB(int n, MemorySegment buffers) {
        var mh$ = glGenBuffersARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenBuffersARB", n, buffers);
            }
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsBufferARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsBufferARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsBufferARB(GLuint buffer)
     * }
     */
    public static FunctionDescriptor glIsBufferARB$descriptor() {
        return glIsBufferARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsBufferARB(GLuint buffer)
     * }
     */
    public static MethodHandle glIsBufferARB$handle() {
        return glIsBufferARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsBufferARB(GLuint buffer)
     * }
     */
    public static MemorySegment glIsBufferARB$address() {
        return glIsBufferARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsBufferARB(GLuint buffer)
     * }
     */
    public static byte glIsBufferARB(int buffer) {
        var mh$ = glIsBufferARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsBufferARB", buffer);
            }
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBufferDataARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBufferDataARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
     * }
     */
    public static FunctionDescriptor glBufferDataARB$descriptor() {
        return glBufferDataARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
     * }
     */
    public static MethodHandle glBufferDataARB$handle() {
        return glBufferDataARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
     * }
     */
    public static MemorySegment glBufferDataARB$address() {
        return glBufferDataARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
     * }
     */
    public static void glBufferDataARB(int target, long size, MemorySegment data, int usage) {
        var mh$ = glBufferDataARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBufferDataARB", target, size, data, usage);
            }
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBufferSubDataARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBufferSubDataARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glBufferSubDataARB$descriptor() {
        return glBufferSubDataARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
     * }
     */
    public static MethodHandle glBufferSubDataARB$handle() {
        return glBufferSubDataARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
     * }
     */
    public static MemorySegment glBufferSubDataARB$address() {
        return glBufferSubDataARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
     * }
     */
    public static void glBufferSubDataARB(int target, long offset, long size, MemorySegment data) {
        var mh$ = glBufferSubDataARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBufferSubDataARB", target, offset, size, data);
            }
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferSubDataARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferSubDataARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
     * }
     */
    public static FunctionDescriptor glGetBufferSubDataARB$descriptor() {
        return glGetBufferSubDataARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
     * }
     */
    public static MethodHandle glGetBufferSubDataARB$handle() {
        return glGetBufferSubDataARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
     * }
     */
    public static MemorySegment glGetBufferSubDataARB$address() {
        return glGetBufferSubDataARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
     * }
     */
    public static void glGetBufferSubDataARB(int target, long offset, long size, MemorySegment data) {
        var mh$ = glGetBufferSubDataARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferSubDataARB", target, offset, size, data);
            }
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapBufferARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapBufferARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBufferARB(GLenum target, GLenum access)
     * }
     */
    public static FunctionDescriptor glMapBufferARB$descriptor() {
        return glMapBufferARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBufferARB(GLenum target, GLenum access)
     * }
     */
    public static MethodHandle glMapBufferARB$handle() {
        return glMapBufferARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBufferARB(GLenum target, GLenum access)
     * }
     */
    public static MemorySegment glMapBufferARB$address() {
        return glMapBufferARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLvoid *glMapBufferARB(GLenum target, GLenum access)
     * }
     */
    public static MemorySegment glMapBufferARB(int target, int access) {
        var mh$ = glMapBufferARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapBufferARB", target, access);
            }
            return (MemorySegment)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUnmapBufferARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUnmapBufferARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBufferARB(GLenum target)
     * }
     */
    public static FunctionDescriptor glUnmapBufferARB$descriptor() {
        return glUnmapBufferARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBufferARB(GLenum target)
     * }
     */
    public static MethodHandle glUnmapBufferARB$handle() {
        return glUnmapBufferARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBufferARB(GLenum target)
     * }
     */
    public static MemorySegment glUnmapBufferARB$address() {
        return glUnmapBufferARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glUnmapBufferARB(GLenum target)
     * }
     */
    public static byte glUnmapBufferARB(int target) {
        var mh$ = glUnmapBufferARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUnmapBufferARB", target);
            }
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferParameterivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferParameterivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetBufferParameterivARB$descriptor() {
        return glGetBufferParameterivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetBufferParameterivARB$handle() {
        return glGetBufferParameterivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetBufferParameterivARB$address() {
        return glGetBufferParameterivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetBufferParameterivARB(int target, int pname, MemorySegment params) {
        var mh$ = glGetBufferParameterivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferParameterivARB", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferPointervARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferPointervARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static FunctionDescriptor glGetBufferPointervARB$descriptor() {
        return glGetBufferPointervARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MethodHandle glGetBufferPointervARB$handle() {
        return glGetBufferPointervARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MemorySegment glGetBufferPointervARB$address() {
        return glGetBufferPointervARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static void glGetBufferPointervARB(int target, int pname, MemorySegment params) {
        var mh$ = glGetBufferPointervARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferPointervARB", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindProgramARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindProgramARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindProgramARB(GLenum target, GLuint program)
     * }
     */
    public static FunctionDescriptor glBindProgramARB$descriptor() {
        return glBindProgramARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindProgramARB(GLenum target, GLuint program)
     * }
     */
    public static MethodHandle glBindProgramARB$handle() {
        return glBindProgramARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindProgramARB(GLenum target, GLuint program)
     * }
     */
    public static MemorySegment glBindProgramARB$address() {
        return glBindProgramARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindProgramARB(GLenum target, GLuint program)
     * }
     */
    public static void glBindProgramARB(int target, int program) {
        var mh$ = glBindProgramARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindProgramARB", target, program);
            }
            mh$.invokeExact(target, program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteProgramsARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteProgramsARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteProgramsARB(GLsizei n, const GLuint *programs)
     * }
     */
    public static FunctionDescriptor glDeleteProgramsARB$descriptor() {
        return glDeleteProgramsARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteProgramsARB(GLsizei n, const GLuint *programs)
     * }
     */
    public static MethodHandle glDeleteProgramsARB$handle() {
        return glDeleteProgramsARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteProgramsARB(GLsizei n, const GLuint *programs)
     * }
     */
    public static MemorySegment glDeleteProgramsARB$address() {
        return glDeleteProgramsARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteProgramsARB(GLsizei n, const GLuint *programs)
     * }
     */
    public static void glDeleteProgramsARB(int n, MemorySegment programs) {
        var mh$ = glDeleteProgramsARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteProgramsARB", n, programs);
            }
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenProgramsARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenProgramsARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenProgramsARB(GLsizei n, GLuint *programs)
     * }
     */
    public static FunctionDescriptor glGenProgramsARB$descriptor() {
        return glGenProgramsARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenProgramsARB(GLsizei n, GLuint *programs)
     * }
     */
    public static MethodHandle glGenProgramsARB$handle() {
        return glGenProgramsARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenProgramsARB(GLsizei n, GLuint *programs)
     * }
     */
    public static MemorySegment glGenProgramsARB$address() {
        return glGenProgramsARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenProgramsARB(GLsizei n, GLuint *programs)
     * }
     */
    public static void glGenProgramsARB(int n, MemorySegment programs) {
        var mh$ = glGenProgramsARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenProgramsARB", n, programs);
            }
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsProgramARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsProgramARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgramARB(GLuint program)
     * }
     */
    public static FunctionDescriptor glIsProgramARB$descriptor() {
        return glIsProgramARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgramARB(GLuint program)
     * }
     */
    public static MethodHandle glIsProgramARB$handle() {
        return glIsProgramARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgramARB(GLuint program)
     * }
     */
    public static MemorySegment glIsProgramARB$address() {
        return glIsProgramARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsProgramARB(GLuint program)
     * }
     */
    public static byte glIsProgramARB(int program) {
        var mh$ = glIsProgramARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsProgramARB", program);
            }
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramEnvParameter4dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramEnvParameter4dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glProgramEnvParameter4dARB$descriptor() {
        return glProgramEnvParameter4dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glProgramEnvParameter4dARB$handle() {
        return glProgramEnvParameter4dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glProgramEnvParameter4dARB$address() {
        return glProgramEnvParameter4dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w) {
        var mh$ = glProgramEnvParameter4dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramEnvParameter4dARB", target, index, x, y, z, w);
            }
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramEnvParameter4dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramEnvParameter4dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static FunctionDescriptor glProgramEnvParameter4dvARB$descriptor() {
        return glProgramEnvParameter4dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static MethodHandle glProgramEnvParameter4dvARB$handle() {
        return glProgramEnvParameter4dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static MemorySegment glProgramEnvParameter4dvARB$address() {
        return glProgramEnvParameter4dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static void glProgramEnvParameter4dvARB(int target, int index, MemorySegment params) {
        var mh$ = glProgramEnvParameter4dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramEnvParameter4dvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramEnvParameter4fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramEnvParameter4fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glProgramEnvParameter4fARB$descriptor() {
        return glProgramEnvParameter4fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glProgramEnvParameter4fARB$handle() {
        return glProgramEnvParameter4fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glProgramEnvParameter4fARB$address() {
        return glProgramEnvParameter4fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glProgramEnvParameter4fARB(int target, int index, float x, float y, float z, float w) {
        var mh$ = glProgramEnvParameter4fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramEnvParameter4fARB", target, index, x, y, z, w);
            }
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramEnvParameter4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramEnvParameter4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glProgramEnvParameter4fvARB$descriptor() {
        return glProgramEnvParameter4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static MethodHandle glProgramEnvParameter4fvARB$handle() {
        return glProgramEnvParameter4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static MemorySegment glProgramEnvParameter4fvARB$address() {
        return glProgramEnvParameter4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static void glProgramEnvParameter4fvARB(int target, int index, MemorySegment params) {
        var mh$ = glProgramEnvParameter4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramEnvParameter4fvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramLocalParameter4dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramLocalParameter4dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glProgramLocalParameter4dARB$descriptor() {
        return glProgramLocalParameter4dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glProgramLocalParameter4dARB$handle() {
        return glProgramLocalParameter4dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glProgramLocalParameter4dARB$address() {
        return glProgramLocalParameter4dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w) {
        var mh$ = glProgramLocalParameter4dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramLocalParameter4dARB", target, index, x, y, z, w);
            }
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramLocalParameter4dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramLocalParameter4dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static FunctionDescriptor glProgramLocalParameter4dvARB$descriptor() {
        return glProgramLocalParameter4dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static MethodHandle glProgramLocalParameter4dvARB$handle() {
        return glProgramLocalParameter4dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static MemorySegment glProgramLocalParameter4dvARB$address() {
        return glProgramLocalParameter4dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
     * }
     */
    public static void glProgramLocalParameter4dvARB(int target, int index, MemorySegment params) {
        var mh$ = glProgramLocalParameter4dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramLocalParameter4dvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramLocalParameter4fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramLocalParameter4fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glProgramLocalParameter4fARB$descriptor() {
        return glProgramLocalParameter4fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glProgramLocalParameter4fARB$handle() {
        return glProgramLocalParameter4fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glProgramLocalParameter4fARB$address() {
        return glProgramLocalParameter4fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glProgramLocalParameter4fARB(int target, int index, float x, float y, float z, float w) {
        var mh$ = glProgramLocalParameter4fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramLocalParameter4fARB", target, index, x, y, z, w);
            }
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramLocalParameter4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramLocalParameter4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glProgramLocalParameter4fvARB$descriptor() {
        return glProgramLocalParameter4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static MethodHandle glProgramLocalParameter4fvARB$handle() {
        return glProgramLocalParameter4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static MemorySegment glProgramLocalParameter4fvARB$address() {
        return glProgramLocalParameter4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
     * }
     */
    public static void glProgramLocalParameter4fvARB(int target, int index, MemorySegment params) {
        var mh$ = glProgramLocalParameter4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramLocalParameter4fvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramEnvParameterdvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramEnvParameterdvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetProgramEnvParameterdvARB$descriptor() {
        return glGetProgramEnvParameterdvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static MethodHandle glGetProgramEnvParameterdvARB$handle() {
        return glGetProgramEnvParameterdvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static MemorySegment glGetProgramEnvParameterdvARB$address() {
        return glGetProgramEnvParameterdvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static void glGetProgramEnvParameterdvARB(int target, int index, MemorySegment params) {
        var mh$ = glGetProgramEnvParameterdvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramEnvParameterdvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramEnvParameterfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramEnvParameterfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetProgramEnvParameterfvARB$descriptor() {
        return glGetProgramEnvParameterfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static MethodHandle glGetProgramEnvParameterfvARB$handle() {
        return glGetProgramEnvParameterfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static MemorySegment glGetProgramEnvParameterfvARB$address() {
        return glGetProgramEnvParameterfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static void glGetProgramEnvParameterfvARB(int target, int index, MemorySegment params) {
        var mh$ = glGetProgramEnvParameterfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramEnvParameterfvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramEnvParameters4fvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramEnvParameters4fvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glProgramEnvParameters4fvEXT$descriptor() {
        return glProgramEnvParameters4fvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static MethodHandle glProgramEnvParameters4fvEXT$handle() {
        return glProgramEnvParameters4fvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static MemorySegment glProgramEnvParameters4fvEXT$address() {
        return glProgramEnvParameters4fvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static void glProgramEnvParameters4fvEXT(int target, int index, int count, MemorySegment params) {
        var mh$ = glProgramEnvParameters4fvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramEnvParameters4fvEXT", target, index, count, params);
            }
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramLocalParameters4fvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramLocalParameters4fvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glProgramLocalParameters4fvEXT$descriptor() {
        return glProgramLocalParameters4fvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static MethodHandle glProgramLocalParameters4fvEXT$handle() {
        return glProgramLocalParameters4fvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static MemorySegment glProgramLocalParameters4fvEXT$address() {
        return glProgramLocalParameters4fvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
     * }
     */
    public static void glProgramLocalParameters4fvEXT(int target, int index, int count, MemorySegment params) {
        var mh$ = glProgramLocalParameters4fvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramLocalParameters4fvEXT", target, index, count, params);
            }
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramLocalParameterdvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramLocalParameterdvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetProgramLocalParameterdvARB$descriptor() {
        return glGetProgramLocalParameterdvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static MethodHandle glGetProgramLocalParameterdvARB$handle() {
        return glGetProgramLocalParameterdvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static MemorySegment glGetProgramLocalParameterdvARB$address() {
        return glGetProgramLocalParameterdvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
     * }
     */
    public static void glGetProgramLocalParameterdvARB(int target, int index, MemorySegment params) {
        var mh$ = glGetProgramLocalParameterdvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramLocalParameterdvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramLocalParameterfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramLocalParameterfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetProgramLocalParameterfvARB$descriptor() {
        return glGetProgramLocalParameterfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static MethodHandle glGetProgramLocalParameterfvARB$handle() {
        return glGetProgramLocalParameterfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static MemorySegment glGetProgramLocalParameterfvARB$address() {
        return glGetProgramLocalParameterfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
     * }
     */
    public static void glGetProgramLocalParameterfvARB(int target, int index, MemorySegment params) {
        var mh$ = glGetProgramLocalParameterfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramLocalParameterfvARB", target, index, params);
            }
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramStringARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramStringARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
     * }
     */
    public static FunctionDescriptor glProgramStringARB$descriptor() {
        return glProgramStringARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
     * }
     */
    public static MethodHandle glProgramStringARB$handle() {
        return glProgramStringARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
     * }
     */
    public static MemorySegment glProgramStringARB$address() {
        return glProgramStringARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
     * }
     */
    public static void glProgramStringARB(int target, int format, int len, MemorySegment string) {
        var mh$ = glProgramStringARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramStringARB", target, format, len, string);
            }
            mh$.invokeExact(target, format, len, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramStringARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramStringARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
     * }
     */
    public static FunctionDescriptor glGetProgramStringARB$descriptor() {
        return glGetProgramStringARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
     * }
     */
    public static MethodHandle glGetProgramStringARB$handle() {
        return glGetProgramStringARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
     * }
     */
    public static MemorySegment glGetProgramStringARB$address() {
        return glGetProgramStringARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
     * }
     */
    public static void glGetProgramStringARB(int target, int pname, MemorySegment string) {
        var mh$ = glGetProgramStringARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramStringARB", target, pname, string);
            }
            mh$.invokeExact(target, pname, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetProgramivARB$descriptor() {
        return glGetProgramivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetProgramivARB$handle() {
        return glGetProgramivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetProgramivARB$address() {
        return glGetProgramivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetProgramivARB(int target, int pname, MemorySegment params) {
        var mh$ = glGetProgramivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramivARB", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindAttribLocationARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindAttribLocationARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
     * }
     */
    public static FunctionDescriptor glBindAttribLocationARB$descriptor() {
        return glBindAttribLocationARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
     * }
     */
    public static MethodHandle glBindAttribLocationARB$handle() {
        return glBindAttribLocationARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
     * }
     */
    public static MemorySegment glBindAttribLocationARB$address() {
        return glBindAttribLocationARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
     * }
     */
    public static void glBindAttribLocationARB(MemorySegment programObj, int index, MemorySegment name) {
        var mh$ = glBindAttribLocationARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindAttribLocationARB", programObj, index, name);
            }
            mh$.invokeExact(programObj, index, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetActiveAttribARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetActiveAttribARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static FunctionDescriptor glGetActiveAttribARB$descriptor() {
        return glGetActiveAttribARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static MethodHandle glGetActiveAttribARB$handle() {
        return glGetActiveAttribARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static MemorySegment glGetActiveAttribARB$address() {
        return glGetActiveAttribARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
     * }
     */
    public static void glGetActiveAttribARB(MemorySegment programObj, int index, int maxLength, MemorySegment length, MemorySegment size, MemorySegment type, MemorySegment name) {
        var mh$ = glGetActiveAttribARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetActiveAttribARB", programObj, index, maxLength, length, size, type, name);
            }
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetAttribLocationARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetAttribLocationARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static FunctionDescriptor glGetAttribLocationARB$descriptor() {
        return glGetAttribLocationARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static MethodHandle glGetAttribLocationARB$handle() {
        return glGetAttribLocationARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static MemorySegment glGetAttribLocationARB$address() {
        return glGetAttribLocationARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
     * }
     */
    public static int glGetAttribLocationARB(MemorySegment programObj, MemorySegment name) {
        var mh$ = glGetAttribLocationARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetAttribLocationARB", programObj, name);
            }
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dARB(GLuint index, GLdouble x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1dARB$descriptor() {
        return glVertexAttrib1dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dARB(GLuint index, GLdouble x)
     * }
     */
    public static MethodHandle glVertexAttrib1dARB$handle() {
        return glVertexAttrib1dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dARB(GLuint index, GLdouble x)
     * }
     */
    public static MemorySegment glVertexAttrib1dARB$address() {
        return glVertexAttrib1dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1dARB(GLuint index, GLdouble x)
     * }
     */
    public static void glVertexAttrib1dARB(int index, double x) {
        var mh$ = glVertexAttrib1dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1dARB", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1dvARB$descriptor() {
        return glVertexAttrib1dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib1dvARB$handle() {
        return glVertexAttrib1dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib1dvARB$address() {
        return glVertexAttrib1dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib1dvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1dvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fARB(GLuint index, GLfloat x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1fARB$descriptor() {
        return glVertexAttrib1fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fARB(GLuint index, GLfloat x)
     * }
     */
    public static MethodHandle glVertexAttrib1fARB$handle() {
        return glVertexAttrib1fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fARB(GLuint index, GLfloat x)
     * }
     */
    public static MemorySegment glVertexAttrib1fARB$address() {
        return glVertexAttrib1fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1fARB(GLuint index, GLfloat x)
     * }
     */
    public static void glVertexAttrib1fARB(int index, float x) {
        var mh$ = glVertexAttrib1fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1fARB", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1fvARB$descriptor() {
        return glVertexAttrib1fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib1fvARB$handle() {
        return glVertexAttrib1fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib1fvARB$address() {
        return glVertexAttrib1fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib1fvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1fvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sARB(GLuint index, GLshort x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1sARB$descriptor() {
        return glVertexAttrib1sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sARB(GLuint index, GLshort x)
     * }
     */
    public static MethodHandle glVertexAttrib1sARB$handle() {
        return glVertexAttrib1sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sARB(GLuint index, GLshort x)
     * }
     */
    public static MemorySegment glVertexAttrib1sARB$address() {
        return glVertexAttrib1sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1sARB(GLuint index, GLshort x)
     * }
     */
    public static void glVertexAttrib1sARB(int index, short x) {
        var mh$ = glVertexAttrib1sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1sARB", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1svARB(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1svARB$descriptor() {
        return glVertexAttrib1svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib1svARB$handle() {
        return glVertexAttrib1svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib1svARB$address() {
        return glVertexAttrib1svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1svARB(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib1svARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1svARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2dARB$descriptor() {
        return glVertexAttrib2dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glVertexAttrib2dARB$handle() {
        return glVertexAttrib2dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glVertexAttrib2dARB$address() {
        return glVertexAttrib2dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static void glVertexAttrib2dARB(int index, double x, double y) {
        var mh$ = glVertexAttrib2dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2dARB", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2dvARB$descriptor() {
        return glVertexAttrib2dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib2dvARB$handle() {
        return glVertexAttrib2dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib2dvARB$address() {
        return glVertexAttrib2dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib2dvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2dvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2fARB$descriptor() {
        return glVertexAttrib2fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glVertexAttrib2fARB$handle() {
        return glVertexAttrib2fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glVertexAttrib2fARB$address() {
        return glVertexAttrib2fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static void glVertexAttrib2fARB(int index, float x, float y) {
        var mh$ = glVertexAttrib2fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2fARB", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2fvARB$descriptor() {
        return glVertexAttrib2fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib2fvARB$handle() {
        return glVertexAttrib2fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib2fvARB$address() {
        return glVertexAttrib2fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib2fvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2fvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2sARB$descriptor() {
        return glVertexAttrib2sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glVertexAttrib2sARB$handle() {
        return glVertexAttrib2sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glVertexAttrib2sARB$address() {
        return glVertexAttrib2sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static void glVertexAttrib2sARB(int index, short x, short y) {
        var mh$ = glVertexAttrib2sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2sARB", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2svARB(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2svARB$descriptor() {
        return glVertexAttrib2svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib2svARB$handle() {
        return glVertexAttrib2svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib2svARB$address() {
        return glVertexAttrib2svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2svARB(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib2svARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2svARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3dARB$descriptor() {
        return glVertexAttrib3dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glVertexAttrib3dARB$handle() {
        return glVertexAttrib3dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glVertexAttrib3dARB$address() {
        return glVertexAttrib3dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glVertexAttrib3dARB(int index, double x, double y, double z) {
        var mh$ = glVertexAttrib3dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3dARB", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3dvARB$descriptor() {
        return glVertexAttrib3dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib3dvARB$handle() {
        return glVertexAttrib3dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib3dvARB$address() {
        return glVertexAttrib3dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib3dvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3dvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3fARB$descriptor() {
        return glVertexAttrib3fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glVertexAttrib3fARB$handle() {
        return glVertexAttrib3fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glVertexAttrib3fARB$address() {
        return glVertexAttrib3fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glVertexAttrib3fARB(int index, float x, float y, float z) {
        var mh$ = glVertexAttrib3fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3fARB", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3fvARB$descriptor() {
        return glVertexAttrib3fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib3fvARB$handle() {
        return glVertexAttrib3fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib3fvARB$address() {
        return glVertexAttrib3fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib3fvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3fvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3sARB$descriptor() {
        return glVertexAttrib3sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glVertexAttrib3sARB$handle() {
        return glVertexAttrib3sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glVertexAttrib3sARB$address() {
        return glVertexAttrib3sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glVertexAttrib3sARB(int index, short x, short y, short z) {
        var mh$ = glVertexAttrib3sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3sARB", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3svARB(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3svARB$descriptor() {
        return glVertexAttrib3svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib3svARB$handle() {
        return glVertexAttrib3svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib3svARB$address() {
        return glVertexAttrib3svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3svARB(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib3svARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3svARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NbvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NbvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NbvARB$descriptor() {
        return glVertexAttrib4NbvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NbvARB$handle() {
        return glVertexAttrib4NbvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NbvARB$address() {
        return glVertexAttrib4NbvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static void glVertexAttrib4NbvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NbvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NbvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NivARB(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NivARB$descriptor() {
        return glVertexAttrib4NivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NivARB(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NivARB$handle() {
        return glVertexAttrib4NivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NivARB(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NivARB$address() {
        return glVertexAttrib4NivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NivARB(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttrib4NivARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NivARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NsvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NsvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NsvARB$descriptor() {
        return glVertexAttrib4NsvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NsvARB$handle() {
        return glVertexAttrib4NsvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NsvARB$address() {
        return glVertexAttrib4NsvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib4NsvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NsvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NsvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NubARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NubARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NubARB$descriptor() {
        return glVertexAttrib4NubARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static MethodHandle glVertexAttrib4NubARB$handle() {
        return glVertexAttrib4NubARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static MemorySegment glVertexAttrib4NubARB$address() {
        return glVertexAttrib4NubARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static void glVertexAttrib4NubARB(int index, byte x, byte y, byte z, byte w) {
        var mh$ = glVertexAttrib4NubARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NubARB", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NubvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NubvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NubvARB$descriptor() {
        return glVertexAttrib4NubvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NubvARB$handle() {
        return glVertexAttrib4NubvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NubvARB$address() {
        return glVertexAttrib4NubvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static void glVertexAttrib4NubvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NubvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NubvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NuivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NuivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NuivARB$descriptor() {
        return glVertexAttrib4NuivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NuivARB$handle() {
        return glVertexAttrib4NuivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NuivARB$address() {
        return glVertexAttrib4NuivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttrib4NuivARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NuivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NuivARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4NusvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4NusvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4NusvARB$descriptor() {
        return glVertexAttrib4NusvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4NusvARB$handle() {
        return glVertexAttrib4NusvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4NusvARB$address() {
        return glVertexAttrib4NusvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
     * }
     */
    public static void glVertexAttrib4NusvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4NusvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4NusvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4bvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4bvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4bvARB$descriptor() {
        return glVertexAttrib4bvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4bvARB$handle() {
        return glVertexAttrib4bvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4bvARB$address() {
        return glVertexAttrib4bvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
     * }
     */
    public static void glVertexAttrib4bvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4bvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4bvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4dARB$descriptor() {
        return glVertexAttrib4dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glVertexAttrib4dARB$handle() {
        return glVertexAttrib4dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glVertexAttrib4dARB$address() {
        return glVertexAttrib4dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glVertexAttrib4dARB(int index, double x, double y, double z, double w) {
        var mh$ = glVertexAttrib4dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4dARB", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4dvARB$descriptor() {
        return glVertexAttrib4dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib4dvARB$handle() {
        return glVertexAttrib4dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib4dvARB$address() {
        return glVertexAttrib4dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib4dvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4dvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4fARB$descriptor() {
        return glVertexAttrib4fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glVertexAttrib4fARB$handle() {
        return glVertexAttrib4fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glVertexAttrib4fARB$address() {
        return glVertexAttrib4fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glVertexAttrib4fARB(int index, float x, float y, float z, float w) {
        var mh$ = glVertexAttrib4fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4fARB", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4fvARB$descriptor() {
        return glVertexAttrib4fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib4fvARB$handle() {
        return glVertexAttrib4fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib4fvARB$address() {
        return glVertexAttrib4fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib4fvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4fvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ivARB(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4ivARB$descriptor() {
        return glVertexAttrib4ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ivARB(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4ivARB$handle() {
        return glVertexAttrib4ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ivARB(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4ivARB$address() {
        return glVertexAttrib4ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4ivARB(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttrib4ivARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4ivARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4sARB$descriptor() {
        return glVertexAttrib4sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MethodHandle glVertexAttrib4sARB$handle() {
        return glVertexAttrib4sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MemorySegment glVertexAttrib4sARB$address() {
        return glVertexAttrib4sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static void glVertexAttrib4sARB(int index, short x, short y, short z, short w) {
        var mh$ = glVertexAttrib4sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4sARB", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4svARB(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4svARB$descriptor() {
        return glVertexAttrib4svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4svARB$handle() {
        return glVertexAttrib4svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4svARB(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4svARB$address() {
        return glVertexAttrib4svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4svARB(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib4svARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4svARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4ubvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4ubvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4ubvARB$descriptor() {
        return glVertexAttrib4ubvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4ubvARB$handle() {
        return glVertexAttrib4ubvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4ubvARB$address() {
        return glVertexAttrib4ubvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
     * }
     */
    public static void glVertexAttrib4ubvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4ubvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4ubvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4uivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4uivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uivARB(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4uivARB$descriptor() {
        return glVertexAttrib4uivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uivARB(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4uivARB$handle() {
        return glVertexAttrib4uivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uivARB(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4uivARB$address() {
        return glVertexAttrib4uivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4uivARB(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttrib4uivARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4uivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4uivARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4usvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4usvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usvARB(GLuint index, const GLushort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4usvARB$descriptor() {
        return glVertexAttrib4usvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usvARB(GLuint index, const GLushort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4usvARB$handle() {
        return glVertexAttrib4usvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usvARB(GLuint index, const GLushort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4usvARB$address() {
        return glVertexAttrib4usvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4usvARB(GLuint index, const GLushort *v)
     * }
     */
    public static void glVertexAttrib4usvARB(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4usvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4usvARB", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribPointerARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribPointerARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glVertexAttribPointerARB$descriptor() {
        return glVertexAttribPointerARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glVertexAttribPointerARB$handle() {
        return glVertexAttribPointerARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glVertexAttribPointerARB$address() {
        return glVertexAttribPointerARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glVertexAttribPointerARB(int index, int size, int type, byte normalized, int stride, MemorySegment pointer) {
        var mh$ = glVertexAttribPointerARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribPointerARB", index, size, type, normalized, stride, pointer);
            }
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableVertexAttribArrayARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisableVertexAttribArrayARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static FunctionDescriptor glDisableVertexAttribArrayARB$descriptor() {
        return glDisableVertexAttribArrayARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static MethodHandle glDisableVertexAttribArrayARB$handle() {
        return glDisableVertexAttribArrayARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static MemorySegment glDisableVertexAttribArrayARB$address() {
        return glDisableVertexAttribArrayARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static void glDisableVertexAttribArrayARB(int index) {
        var mh$ = glDisableVertexAttribArrayARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableVertexAttribArrayARB", index);
            }
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableVertexAttribArrayARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnableVertexAttribArrayARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static FunctionDescriptor glEnableVertexAttribArrayARB$descriptor() {
        return glEnableVertexAttribArrayARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static MethodHandle glEnableVertexAttribArrayARB$handle() {
        return glEnableVertexAttribArrayARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static MemorySegment glEnableVertexAttribArrayARB$address() {
        return glEnableVertexAttribArrayARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArrayARB(GLuint index)
     * }
     */
    public static void glEnableVertexAttribArrayARB(int index) {
        var mh$ = glEnableVertexAttribArrayARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableVertexAttribArrayARB", index);
            }
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribPointervARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribPointervARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribPointervARB$descriptor() {
        return glGetVertexAttribPointervARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static MethodHandle glGetVertexAttribPointervARB$handle() {
        return glGetVertexAttribPointervARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static MemorySegment glGetVertexAttribPointervARB$address() {
        return glGetVertexAttribPointervARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static void glGetVertexAttribPointervARB(int index, int pname, MemorySegment pointer) {
        var mh$ = glGetVertexAttribPointervARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribPointervARB", index, pname, pointer);
            }
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribdvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribdvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribdvARB$descriptor() {
        return glGetVertexAttribdvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static MethodHandle glGetVertexAttribdvARB$handle() {
        return glGetVertexAttribdvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static MemorySegment glGetVertexAttribdvARB$address() {
        return glGetVertexAttribdvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static void glGetVertexAttribdvARB(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribdvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribdvARB", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribfvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribfvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribfvARB$descriptor() {
        return glGetVertexAttribfvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetVertexAttribfvARB$handle() {
        return glGetVertexAttribfvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetVertexAttribfvARB$address() {
        return glGetVertexAttribfvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetVertexAttribfvARB(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribfvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribfvARB", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribivARB$descriptor() {
        return glGetVertexAttribivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetVertexAttribivARB$handle() {
        return glGetVertexAttribivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetVertexAttribivARB$address() {
        return glGetVertexAttribivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static void glGetVertexAttribivARB(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribivARB", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2dARB(GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glWindowPos2dARB$descriptor() {
        return glWindowPos2dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2dARB(GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glWindowPos2dARB$handle() {
        return glWindowPos2dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2dARB(GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glWindowPos2dARB$address() {
        return glWindowPos2dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2dARB(GLdouble x, GLdouble y)
     * }
     */
    public static void glWindowPos2dARB(double x, double y) {
        var mh$ = glWindowPos2dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2dARB", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2dvARB(const GLdouble *p)
     * }
     */
    public static FunctionDescriptor glWindowPos2dvARB$descriptor() {
        return glWindowPos2dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2dvARB(const GLdouble *p)
     * }
     */
    public static MethodHandle glWindowPos2dvARB$handle() {
        return glWindowPos2dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2dvARB(const GLdouble *p)
     * }
     */
    public static MemorySegment glWindowPos2dvARB$address() {
        return glWindowPos2dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2dvARB(const GLdouble *p)
     * }
     */
    public static void glWindowPos2dvARB(MemorySegment p) {
        var mh$ = glWindowPos2dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2dvARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2fARB(GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glWindowPos2fARB$descriptor() {
        return glWindowPos2fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2fARB(GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glWindowPos2fARB$handle() {
        return glWindowPos2fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2fARB(GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glWindowPos2fARB$address() {
        return glWindowPos2fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2fARB(GLfloat x, GLfloat y)
     * }
     */
    public static void glWindowPos2fARB(float x, float y) {
        var mh$ = glWindowPos2fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2fARB", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2fvARB(const GLfloat *p)
     * }
     */
    public static FunctionDescriptor glWindowPos2fvARB$descriptor() {
        return glWindowPos2fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2fvARB(const GLfloat *p)
     * }
     */
    public static MethodHandle glWindowPos2fvARB$handle() {
        return glWindowPos2fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2fvARB(const GLfloat *p)
     * }
     */
    public static MemorySegment glWindowPos2fvARB$address() {
        return glWindowPos2fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2fvARB(const GLfloat *p)
     * }
     */
    public static void glWindowPos2fvARB(MemorySegment p) {
        var mh$ = glWindowPos2fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2fvARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2iARB(GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glWindowPos2iARB$descriptor() {
        return glWindowPos2iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2iARB(GLint x, GLint y)
     * }
     */
    public static MethodHandle glWindowPos2iARB$handle() {
        return glWindowPos2iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2iARB(GLint x, GLint y)
     * }
     */
    public static MemorySegment glWindowPos2iARB$address() {
        return glWindowPos2iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2iARB(GLint x, GLint y)
     * }
     */
    public static void glWindowPos2iARB(int x, int y) {
        var mh$ = glWindowPos2iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2iARB", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2ivARB(const GLint *p)
     * }
     */
    public static FunctionDescriptor glWindowPos2ivARB$descriptor() {
        return glWindowPos2ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2ivARB(const GLint *p)
     * }
     */
    public static MethodHandle glWindowPos2ivARB$handle() {
        return glWindowPos2ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2ivARB(const GLint *p)
     * }
     */
    public static MemorySegment glWindowPos2ivARB$address() {
        return glWindowPos2ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2ivARB(const GLint *p)
     * }
     */
    public static void glWindowPos2ivARB(MemorySegment p) {
        var mh$ = glWindowPos2ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2ivARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2sARB(GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glWindowPos2sARB$descriptor() {
        return glWindowPos2sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2sARB(GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glWindowPos2sARB$handle() {
        return glWindowPos2sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2sARB(GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glWindowPos2sARB$address() {
        return glWindowPos2sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2sARB(GLshort x, GLshort y)
     * }
     */
    public static void glWindowPos2sARB(short x, short y) {
        var mh$ = glWindowPos2sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2sARB", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2svARB(const GLshort *p)
     * }
     */
    public static FunctionDescriptor glWindowPos2svARB$descriptor() {
        return glWindowPos2svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2svARB(const GLshort *p)
     * }
     */
    public static MethodHandle glWindowPos2svARB$handle() {
        return glWindowPos2svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2svARB(const GLshort *p)
     * }
     */
    public static MemorySegment glWindowPos2svARB$address() {
        return glWindowPos2svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2svARB(const GLshort *p)
     * }
     */
    public static void glWindowPos2svARB(MemorySegment p) {
        var mh$ = glWindowPos2svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2svARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3dARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3dARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glWindowPos3dARB$descriptor() {
        return glWindowPos3dARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glWindowPos3dARB$handle() {
        return glWindowPos3dARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glWindowPos3dARB$address() {
        return glWindowPos3dARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glWindowPos3dARB(double x, double y, double z) {
        var mh$ = glWindowPos3dARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3dARB", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3dvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3dvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3dvARB(const GLdouble *p)
     * }
     */
    public static FunctionDescriptor glWindowPos3dvARB$descriptor() {
        return glWindowPos3dvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3dvARB(const GLdouble *p)
     * }
     */
    public static MethodHandle glWindowPos3dvARB$handle() {
        return glWindowPos3dvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3dvARB(const GLdouble *p)
     * }
     */
    public static MemorySegment glWindowPos3dvARB$address() {
        return glWindowPos3dvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3dvARB(const GLdouble *p)
     * }
     */
    public static void glWindowPos3dvARB(MemorySegment p) {
        var mh$ = glWindowPos3dvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3dvARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3fARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3fARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glWindowPos3fARB$descriptor() {
        return glWindowPos3fARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glWindowPos3fARB$handle() {
        return glWindowPos3fARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glWindowPos3fARB$address() {
        return glWindowPos3fARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glWindowPos3fARB(float x, float y, float z) {
        var mh$ = glWindowPos3fARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3fARB", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3fvARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3fvARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3fvARB(const GLfloat *p)
     * }
     */
    public static FunctionDescriptor glWindowPos3fvARB$descriptor() {
        return glWindowPos3fvARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3fvARB(const GLfloat *p)
     * }
     */
    public static MethodHandle glWindowPos3fvARB$handle() {
        return glWindowPos3fvARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3fvARB(const GLfloat *p)
     * }
     */
    public static MemorySegment glWindowPos3fvARB$address() {
        return glWindowPos3fvARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3fvARB(const GLfloat *p)
     * }
     */
    public static void glWindowPos3fvARB(MemorySegment p) {
        var mh$ = glWindowPos3fvARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3fvARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3iARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3iARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3iARB(GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glWindowPos3iARB$descriptor() {
        return glWindowPos3iARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3iARB(GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glWindowPos3iARB$handle() {
        return glWindowPos3iARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3iARB(GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glWindowPos3iARB$address() {
        return glWindowPos3iARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3iARB(GLint x, GLint y, GLint z)
     * }
     */
    public static void glWindowPos3iARB(int x, int y, int z) {
        var mh$ = glWindowPos3iARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3iARB", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3ivARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3ivARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3ivARB(const GLint *p)
     * }
     */
    public static FunctionDescriptor glWindowPos3ivARB$descriptor() {
        return glWindowPos3ivARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3ivARB(const GLint *p)
     * }
     */
    public static MethodHandle glWindowPos3ivARB$handle() {
        return glWindowPos3ivARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3ivARB(const GLint *p)
     * }
     */
    public static MemorySegment glWindowPos3ivARB$address() {
        return glWindowPos3ivARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3ivARB(const GLint *p)
     * }
     */
    public static void glWindowPos3ivARB(MemorySegment p) {
        var mh$ = glWindowPos3ivARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3ivARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3sARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3sARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glWindowPos3sARB$descriptor() {
        return glWindowPos3sARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glWindowPos3sARB$handle() {
        return glWindowPos3sARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glWindowPos3sARB$address() {
        return glWindowPos3sARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glWindowPos3sARB(short x, short y, short z) {
        var mh$ = glWindowPos3sARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3sARB", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3svARB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3svARB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3svARB(const GLshort *p)
     * }
     */
    public static FunctionDescriptor glWindowPos3svARB$descriptor() {
        return glWindowPos3svARB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3svARB(const GLshort *p)
     * }
     */
    public static MethodHandle glWindowPos3svARB$handle() {
        return glWindowPos3svARB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3svARB(const GLshort *p)
     * }
     */
    public static MemorySegment glWindowPos3svARB$address() {
        return glWindowPos3svARB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3svARB(const GLshort *p)
     * }
     */
    public static void glWindowPos3svARB(MemorySegment p) {
        var mh$ = glWindowPos3svARB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3svARB", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformBufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformBufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
     * }
     */
    public static FunctionDescriptor glUniformBufferEXT$descriptor() {
        return glUniformBufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
     * }
     */
    public static MethodHandle glUniformBufferEXT$handle() {
        return glUniformBufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
     * }
     */
    public static MemorySegment glUniformBufferEXT$address() {
        return glUniformBufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
     * }
     */
    public static void glUniformBufferEXT(int program, int location, int buffer) {
        var mh$ = glUniformBufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformBufferEXT", program, location, buffer);
            }
            mh$.invokeExact(program, location, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformBufferSizeEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformBufferSizeEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)
     * }
     */
    public static FunctionDescriptor glGetUniformBufferSizeEXT$descriptor() {
        return glGetUniformBufferSizeEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)
     * }
     */
    public static MethodHandle glGetUniformBufferSizeEXT$handle() {
        return glGetUniformBufferSizeEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)
     * }
     */
    public static MemorySegment glGetUniformBufferSizeEXT$address() {
        return glGetUniformBufferSizeEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)
     * }
     */
    public static int glGetUniformBufferSizeEXT(int program, int location) {
        var mh$ = glGetUniformBufferSizeEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformBufferSizeEXT", program, location);
            }
            return (int)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformOffsetEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_LONG,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformOffsetEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)
     * }
     */
    public static FunctionDescriptor glGetUniformOffsetEXT$descriptor() {
        return glGetUniformOffsetEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)
     * }
     */
    public static MethodHandle glGetUniformOffsetEXT$handle() {
        return glGetUniformOffsetEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)
     * }
     */
    public static MemorySegment glGetUniformOffsetEXT$address() {
        return glGetUniformOffsetEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)
     * }
     */
    public static long glGetUniformOffsetEXT(int program, int location) {
        var mh$ = glGetUniformOffsetEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformOffsetEXT", program, location);
            }
            return (long)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendColorEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendColorEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static FunctionDescriptor glBlendColorEXT$descriptor() {
        return glBlendColorEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MethodHandle glBlendColorEXT$handle() {
        return glBlendColorEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MemorySegment glBlendColorEXT$address() {
        return glBlendColorEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static void glBlendColorEXT(float red, float green, float blue, float alpha) {
        var mh$ = glBlendColorEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendColorEXT", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendEquationSeparateEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendEquationSeparateEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static FunctionDescriptor glBlendEquationSeparateEXT$descriptor() {
        return glBlendEquationSeparateEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static MethodHandle glBlendEquationSeparateEXT$handle() {
        return glBlendEquationSeparateEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static MemorySegment glBlendEquationSeparateEXT$address() {
        return glBlendEquationSeparateEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static void glBlendEquationSeparateEXT(int modeRGB, int modeAlpha) {
        var mh$ = glBlendEquationSeparateEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendEquationSeparateEXT", modeRGB, modeAlpha);
            }
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendFuncSeparateEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendFuncSeparateEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
     * }
     */
    public static FunctionDescriptor glBlendFuncSeparateEXT$descriptor() {
        return glBlendFuncSeparateEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
     * }
     */
    public static MethodHandle glBlendFuncSeparateEXT$handle() {
        return glBlendFuncSeparateEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
     * }
     */
    public static MemorySegment glBlendFuncSeparateEXT$address() {
        return glBlendFuncSeparateEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
     * }
     */
    public static void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha) {
        var mh$ = glBlendFuncSeparateEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendFuncSeparateEXT", sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
            }
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendEquationEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendEquationEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendEquationEXT(GLenum mode)
     * }
     */
    public static FunctionDescriptor glBlendEquationEXT$descriptor() {
        return glBlendEquationEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendEquationEXT(GLenum mode)
     * }
     */
    public static MethodHandle glBlendEquationEXT$handle() {
        return glBlendEquationEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendEquationEXT(GLenum mode)
     * }
     */
    public static MemorySegment glBlendEquationEXT$address() {
        return glBlendEquationEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendEquationEXT(GLenum mode)
     * }
     */
    public static void glBlendEquationEXT(int mode) {
        var mh$ = glBlendEquationEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendEquationEXT", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLabelObjectEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLabelObjectEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
     * }
     */
    public static FunctionDescriptor glLabelObjectEXT$descriptor() {
        return glLabelObjectEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
     * }
     */
    public static MethodHandle glLabelObjectEXT$handle() {
        return glLabelObjectEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
     * }
     */
    public static MemorySegment glLabelObjectEXT$address() {
        return glLabelObjectEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
     * }
     */
    public static void glLabelObjectEXT(int type, int object, int length, MemorySegment label) {
        var mh$ = glLabelObjectEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLabelObjectEXT", type, object, length, label);
            }
            mh$.invokeExact(type, object, length, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetObjectLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetObjectLabelEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
     * }
     */
    public static FunctionDescriptor glGetObjectLabelEXT$descriptor() {
        return glGetObjectLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
     * }
     */
    public static MethodHandle glGetObjectLabelEXT$handle() {
        return glGetObjectLabelEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
     * }
     */
    public static MemorySegment glGetObjectLabelEXT$address() {
        return glGetObjectLabelEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
     * }
     */
    public static void glGetObjectLabelEXT(int type, int object, int bufSize, MemorySegment length, MemorySegment label) {
        var mh$ = glGetObjectLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetObjectLabelEXT", type, object, bufSize, length, label);
            }
            mh$.invokeExact(type, object, bufSize, length, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glInsertEventMarkerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glInsertEventMarkerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glInsertEventMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static FunctionDescriptor glInsertEventMarkerEXT$descriptor() {
        return glInsertEventMarkerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glInsertEventMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static MethodHandle glInsertEventMarkerEXT$handle() {
        return glInsertEventMarkerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glInsertEventMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static MemorySegment glInsertEventMarkerEXT$address() {
        return glInsertEventMarkerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glInsertEventMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static void glInsertEventMarkerEXT(int length, MemorySegment marker) {
        var mh$ = glInsertEventMarkerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glInsertEventMarkerEXT", length, marker);
            }
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushGroupMarkerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPushGroupMarkerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPushGroupMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static FunctionDescriptor glPushGroupMarkerEXT$descriptor() {
        return glPushGroupMarkerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPushGroupMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static MethodHandle glPushGroupMarkerEXT$handle() {
        return glPushGroupMarkerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPushGroupMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static MemorySegment glPushGroupMarkerEXT$address() {
        return glPushGroupMarkerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPushGroupMarkerEXT(GLsizei length, const char *marker)
     * }
     */
    public static void glPushGroupMarkerEXT(int length, MemorySegment marker) {
        var mh$ = glPushGroupMarkerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushGroupMarkerEXT", length, marker);
            }
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopGroupMarkerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPopGroupMarkerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPopGroupMarkerEXT()
     * }
     */
    public static FunctionDescriptor glPopGroupMarkerEXT$descriptor() {
        return glPopGroupMarkerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPopGroupMarkerEXT()
     * }
     */
    public static MethodHandle glPopGroupMarkerEXT$handle() {
        return glPopGroupMarkerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPopGroupMarkerEXT()
     * }
     */
    public static MemorySegment glPopGroupMarkerEXT$address() {
        return glPopGroupMarkerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPopGroupMarkerEXT()
     * }
     */
    public static void glPopGroupMarkerEXT() {
        var mh$ = glPopGroupMarkerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopGroupMarkerEXT");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthBoundsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDepthBoundsEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
     * }
     */
    public static FunctionDescriptor glDepthBoundsEXT$descriptor() {
        return glDepthBoundsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
     * }
     */
    public static MethodHandle glDepthBoundsEXT$handle() {
        return glDepthBoundsEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
     * }
     */
    public static MemorySegment glDepthBoundsEXT$address() {
        return glDepthBoundsEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
     * }
     */
    public static void glDepthBoundsEXT(double zmin, double zmax) {
        var mh$ = glDepthBoundsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthBoundsEXT", zmin, zmax);
            }
            mh$.invokeExact(zmin, zmax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorMaskIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorMaskIndexedEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
     * }
     */
    public static FunctionDescriptor glColorMaskIndexedEXT$descriptor() {
        return glColorMaskIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
     * }
     */
    public static MethodHandle glColorMaskIndexedEXT$handle() {
        return glColorMaskIndexedEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
     * }
     */
    public static MemorySegment glColorMaskIndexedEXT$address() {
        return glColorMaskIndexedEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
     * }
     */
    public static void glColorMaskIndexedEXT(int index, byte r, byte g, byte b, byte a) {
        var mh$ = glColorMaskIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorMaskIndexedEXT", index, r, g, b, a);
            }
            mh$.invokeExact(index, r, g, b, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnableIndexedEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static FunctionDescriptor glEnableIndexedEXT$descriptor() {
        return glEnableIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MethodHandle glEnableIndexedEXT$handle() {
        return glEnableIndexedEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MemorySegment glEnableIndexedEXT$address() {
        return glEnableIndexedEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static void glEnableIndexedEXT(int target, int index) {
        var mh$ = glEnableIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableIndexedEXT", target, index);
            }
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisableIndexedEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static FunctionDescriptor glDisableIndexedEXT$descriptor() {
        return glDisableIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MethodHandle glDisableIndexedEXT$handle() {
        return glDisableIndexedEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MemorySegment glDisableIndexedEXT$address() {
        return glDisableIndexedEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisableIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static void glDisableIndexedEXT(int target, int index) {
        var mh$ = glDisableIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableIndexedEXT", target, index);
            }
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsEnabledIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsEnabledIndexedEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static FunctionDescriptor glIsEnabledIndexedEXT$descriptor() {
        return glIsEnabledIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MethodHandle glIsEnabledIndexedEXT$handle() {
        return glIsEnabledIndexedEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static MemorySegment glIsEnabledIndexedEXT$address() {
        return glIsEnabledIndexedEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index)
     * }
     */
    public static byte glIsEnabledIndexedEXT(int target, int index) {
        var mh$ = glIsEnabledIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsEnabledIndexedEXT", target, index);
            }
            return (byte)mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawRangeElementsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawRangeElementsEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static FunctionDescriptor glDrawRangeElementsEXT$descriptor() {
        return glDrawRangeElementsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MethodHandle glDrawRangeElementsEXT$handle() {
        return glDrawRangeElementsEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MemorySegment glDrawRangeElementsEXT$address() {
        return glDrawRangeElementsEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static void glDrawRangeElementsEXT(int mode, int start, int end, int count, int type, MemorySegment indices) {
        var mh$ = glDrawRangeElementsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawRangeElementsEXT", mode, start, end, count, type, indices);
            }
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordfEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordfEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordfEXT(GLfloat coord)
     * }
     */
    public static FunctionDescriptor glFogCoordfEXT$descriptor() {
        return glFogCoordfEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordfEXT(GLfloat coord)
     * }
     */
    public static MethodHandle glFogCoordfEXT$handle() {
        return glFogCoordfEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordfEXT(GLfloat coord)
     * }
     */
    public static MemorySegment glFogCoordfEXT$address() {
        return glFogCoordfEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordfEXT(GLfloat coord)
     * }
     */
    public static void glFogCoordfEXT(float coord) {
        var mh$ = glFogCoordfEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordfEXT", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordfvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordfvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordfvEXT(const GLfloat *coord)
     * }
     */
    public static FunctionDescriptor glFogCoordfvEXT$descriptor() {
        return glFogCoordfvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordfvEXT(const GLfloat *coord)
     * }
     */
    public static MethodHandle glFogCoordfvEXT$handle() {
        return glFogCoordfvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordfvEXT(const GLfloat *coord)
     * }
     */
    public static MemorySegment glFogCoordfvEXT$address() {
        return glFogCoordfvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordfvEXT(const GLfloat *coord)
     * }
     */
    public static void glFogCoordfvEXT(MemorySegment coord) {
        var mh$ = glFogCoordfvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordfvEXT", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoorddEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoorddEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoorddEXT(GLdouble coord)
     * }
     */
    public static FunctionDescriptor glFogCoorddEXT$descriptor() {
        return glFogCoorddEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoorddEXT(GLdouble coord)
     * }
     */
    public static MethodHandle glFogCoorddEXT$handle() {
        return glFogCoorddEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoorddEXT(GLdouble coord)
     * }
     */
    public static MemorySegment glFogCoorddEXT$address() {
        return glFogCoorddEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoorddEXT(GLdouble coord)
     * }
     */
    public static void glFogCoorddEXT(double coord) {
        var mh$ = glFogCoorddEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoorddEXT", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoorddvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoorddvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoorddvEXT(const GLdouble *coord)
     * }
     */
    public static FunctionDescriptor glFogCoorddvEXT$descriptor() {
        return glFogCoorddvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoorddvEXT(const GLdouble *coord)
     * }
     */
    public static MethodHandle glFogCoorddvEXT$handle() {
        return glFogCoorddvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoorddvEXT(const GLdouble *coord)
     * }
     */
    public static MemorySegment glFogCoorddvEXT$address() {
        return glFogCoorddvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoorddvEXT(const GLdouble *coord)
     * }
     */
    public static void glFogCoorddvEXT(MemorySegment coord) {
        var mh$ = glFogCoorddvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoorddvEXT", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordPointerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordPointerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glFogCoordPointerEXT$descriptor() {
        return glFogCoordPointerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glFogCoordPointerEXT$handle() {
        return glFogCoordPointerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glFogCoordPointerEXT$address() {
        return glFogCoordPointerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glFogCoordPointerEXT(int type, int stride, MemorySegment pointer) {
        var mh$ = glFogCoordPointerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordPointerEXT", type, stride, pointer);
            }
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlitFramebufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlitFramebufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static FunctionDescriptor glBlitFramebufferEXT$descriptor() {
        return glBlitFramebufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static MethodHandle glBlitFramebufferEXT$handle() {
        return glBlitFramebufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static MemorySegment glBlitFramebufferEXT$address() {
        return glBlitFramebufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
     * }
     */
    public static void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) {
        var mh$ = glBlitFramebufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlitFramebufferEXT", srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
            }
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderbufferStorageMultisampleEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRenderbufferStorageMultisampleEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glRenderbufferStorageMultisampleEXT$descriptor() {
        return glRenderbufferStorageMultisampleEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glRenderbufferStorageMultisampleEXT$handle() {
        return glRenderbufferStorageMultisampleEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glRenderbufferStorageMultisampleEXT$address() {
        return glRenderbufferStorageMultisampleEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height) {
        var mh$ = glRenderbufferStorageMultisampleEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderbufferStorageMultisampleEXT", target, samples, internalformat, width, height);
            }
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsRenderbufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsRenderbufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glIsRenderbufferEXT$descriptor() {
        return glIsRenderbufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
     * }
     */
    public static MethodHandle glIsRenderbufferEXT$handle() {
        return glIsRenderbufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
     * }
     */
    public static MemorySegment glIsRenderbufferEXT$address() {
        return glIsRenderbufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
     * }
     */
    public static byte glIsRenderbufferEXT(int renderbuffer) {
        var mh$ = glIsRenderbufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsRenderbufferEXT", renderbuffer);
            }
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindRenderbufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindRenderbufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glBindRenderbufferEXT$descriptor() {
        return glBindRenderbufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
     * }
     */
    public static MethodHandle glBindRenderbufferEXT$handle() {
        return glBindRenderbufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
     * }
     */
    public static MemorySegment glBindRenderbufferEXT$address() {
        return glBindRenderbufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
     * }
     */
    public static void glBindRenderbufferEXT(int target, int renderbuffer) {
        var mh$ = glBindRenderbufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindRenderbufferEXT", target, renderbuffer);
            }
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteRenderbuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteRenderbuffersEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static FunctionDescriptor glDeleteRenderbuffersEXT$descriptor() {
        return glDeleteRenderbuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static MethodHandle glDeleteRenderbuffersEXT$handle() {
        return glDeleteRenderbuffersEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static MemorySegment glDeleteRenderbuffersEXT$address() {
        return glDeleteRenderbuffersEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
     * }
     */
    public static void glDeleteRenderbuffersEXT(int n, MemorySegment renderbuffers) {
        var mh$ = glDeleteRenderbuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteRenderbuffersEXT", n, renderbuffers);
            }
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenRenderbuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenRenderbuffersEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static FunctionDescriptor glGenRenderbuffersEXT$descriptor() {
        return glGenRenderbuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static MethodHandle glGenRenderbuffersEXT$handle() {
        return glGenRenderbuffersEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static MemorySegment glGenRenderbuffersEXT$address() {
        return glGenRenderbuffersEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
     * }
     */
    public static void glGenRenderbuffersEXT(int n, MemorySegment renderbuffers) {
        var mh$ = glGenRenderbuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenRenderbuffersEXT", n, renderbuffers);
            }
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderbufferStorageEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRenderbufferStorageEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glRenderbufferStorageEXT$descriptor() {
        return glRenderbufferStorageEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glRenderbufferStorageEXT$handle() {
        return glRenderbufferStorageEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glRenderbufferStorageEXT$address() {
        return glRenderbufferStorageEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
     * }
     */
    public static void glRenderbufferStorageEXT(int target, int internalformat, int width, int height) {
        var mh$ = glRenderbufferStorageEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderbufferStorageEXT", target, internalformat, width, height);
            }
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetRenderbufferParameterivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetRenderbufferParameterivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetRenderbufferParameterivEXT$descriptor() {
        return glGetRenderbufferParameterivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetRenderbufferParameterivEXT$handle() {
        return glGetRenderbufferParameterivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetRenderbufferParameterivEXT$address() {
        return glGetRenderbufferParameterivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetRenderbufferParameterivEXT(int target, int pname, MemorySegment params) {
        var mh$ = glGetRenderbufferParameterivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetRenderbufferParameterivEXT", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsFramebufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsFramebufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebufferEXT(GLuint framebuffer)
     * }
     */
    public static FunctionDescriptor glIsFramebufferEXT$descriptor() {
        return glIsFramebufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebufferEXT(GLuint framebuffer)
     * }
     */
    public static MethodHandle glIsFramebufferEXT$handle() {
        return glIsFramebufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsFramebufferEXT(GLuint framebuffer)
     * }
     */
    public static MemorySegment glIsFramebufferEXT$address() {
        return glIsFramebufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsFramebufferEXT(GLuint framebuffer)
     * }
     */
    public static byte glIsFramebufferEXT(int framebuffer) {
        var mh$ = glIsFramebufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsFramebufferEXT", framebuffer);
            }
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindFramebufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindFramebufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
     * }
     */
    public static FunctionDescriptor glBindFramebufferEXT$descriptor() {
        return glBindFramebufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
     * }
     */
    public static MethodHandle glBindFramebufferEXT$handle() {
        return glBindFramebufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
     * }
     */
    public static MemorySegment glBindFramebufferEXT$address() {
        return glBindFramebufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
     * }
     */
    public static void glBindFramebufferEXT(int target, int framebuffer) {
        var mh$ = glBindFramebufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindFramebufferEXT", target, framebuffer);
            }
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteFramebuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteFramebuffersEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static FunctionDescriptor glDeleteFramebuffersEXT$descriptor() {
        return glDeleteFramebuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static MethodHandle glDeleteFramebuffersEXT$handle() {
        return glDeleteFramebuffersEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static MemorySegment glDeleteFramebuffersEXT$address() {
        return glDeleteFramebuffersEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
     * }
     */
    public static void glDeleteFramebuffersEXT(int n, MemorySegment framebuffers) {
        var mh$ = glDeleteFramebuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteFramebuffersEXT", n, framebuffers);
            }
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenFramebuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenFramebuffersEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static FunctionDescriptor glGenFramebuffersEXT$descriptor() {
        return glGenFramebuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static MethodHandle glGenFramebuffersEXT$handle() {
        return glGenFramebuffersEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static MemorySegment glGenFramebuffersEXT$address() {
        return glGenFramebuffersEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
     * }
     */
    public static void glGenFramebuffersEXT(int n, MemorySegment framebuffers) {
        var mh$ = glGenFramebuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenFramebuffersEXT", n, framebuffers);
            }
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCheckFramebufferStatusEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCheckFramebufferStatusEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatusEXT(GLenum target)
     * }
     */
    public static FunctionDescriptor glCheckFramebufferStatusEXT$descriptor() {
        return glCheckFramebufferStatusEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatusEXT(GLenum target)
     * }
     */
    public static MethodHandle glCheckFramebufferStatusEXT$handle() {
        return glCheckFramebufferStatusEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatusEXT(GLenum target)
     * }
     */
    public static MemorySegment glCheckFramebufferStatusEXT$address() {
        return glCheckFramebufferStatusEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glCheckFramebufferStatusEXT(GLenum target)
     * }
     */
    public static int glCheckFramebufferStatusEXT(int target) {
        var mh$ = glCheckFramebufferStatusEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCheckFramebufferStatusEXT", target);
            }
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture1DEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture1DEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture1DEXT$descriptor() {
        return glFramebufferTexture1DEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MethodHandle glFramebufferTexture1DEXT$handle() {
        return glFramebufferTexture1DEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MemorySegment glFramebufferTexture1DEXT$address() {
        return glFramebufferTexture1DEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static void glFramebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level) {
        var mh$ = glFramebufferTexture1DEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture1DEXT", target, attachment, textarget, texture, level);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture2DEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture2DEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture2DEXT$descriptor() {
        return glFramebufferTexture2DEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MethodHandle glFramebufferTexture2DEXT$handle() {
        return glFramebufferTexture2DEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static MemorySegment glFramebufferTexture2DEXT$address() {
        return glFramebufferTexture2DEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
     * }
     */
    public static void glFramebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level) {
        var mh$ = glFramebufferTexture2DEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture2DEXT", target, attachment, textarget, texture, level);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTexture3DEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTexture3DEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static FunctionDescriptor glFramebufferTexture3DEXT$descriptor() {
        return glFramebufferTexture3DEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static MethodHandle glFramebufferTexture3DEXT$handle() {
        return glFramebufferTexture3DEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static MemorySegment glFramebufferTexture3DEXT$address() {
        return glFramebufferTexture3DEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
     * }
     */
    public static void glFramebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset) {
        var mh$ = glFramebufferTexture3DEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTexture3DEXT", target, attachment, textarget, texture, level, zoffset);
            }
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferRenderbufferEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferRenderbufferEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static FunctionDescriptor glFramebufferRenderbufferEXT$descriptor() {
        return glFramebufferRenderbufferEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static MethodHandle glFramebufferRenderbufferEXT$handle() {
        return glFramebufferRenderbufferEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static MemorySegment glFramebufferRenderbufferEXT$address() {
        return glFramebufferRenderbufferEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
     * }
     */
    public static void glFramebufferRenderbufferEXT(int target, int attachment, int renderbuffertarget, int renderbuffer) {
        var mh$ = glFramebufferRenderbufferEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferRenderbufferEXT", target, attachment, renderbuffertarget, renderbuffer);
            }
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetFramebufferAttachmentParameterivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetFramebufferAttachmentParameterivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetFramebufferAttachmentParameterivEXT$descriptor() {
        return glGetFramebufferAttachmentParameterivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetFramebufferAttachmentParameterivEXT$handle() {
        return glGetFramebufferAttachmentParameterivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetFramebufferAttachmentParameterivEXT$address() {
        return glGetFramebufferAttachmentParameterivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
     * }
     */
    public static void glGetFramebufferAttachmentParameterivEXT(int target, int attachment, int pname, MemorySegment params) {
        var mh$ = glGetFramebufferAttachmentParameterivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetFramebufferAttachmentParameterivEXT", target, attachment, pname, params);
            }
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenerateMipmapEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenerateMipmapEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenerateMipmapEXT(GLenum target)
     * }
     */
    public static FunctionDescriptor glGenerateMipmapEXT$descriptor() {
        return glGenerateMipmapEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenerateMipmapEXT(GLenum target)
     * }
     */
    public static MethodHandle glGenerateMipmapEXT$handle() {
        return glGenerateMipmapEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenerateMipmapEXT(GLenum target)
     * }
     */
    public static MemorySegment glGenerateMipmapEXT$address() {
        return glGenerateMipmapEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenerateMipmapEXT(GLenum target)
     * }
     */
    public static void glGenerateMipmapEXT(int target) {
        var mh$ = glGenerateMipmapEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenerateMipmapEXT", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProgramParameteriEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProgramParameteriEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
     * }
     */
    public static FunctionDescriptor glProgramParameteriEXT$descriptor() {
        return glProgramParameteriEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
     * }
     */
    public static MethodHandle glProgramParameteriEXT$handle() {
        return glProgramParameteriEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
     * }
     */
    public static MemorySegment glProgramParameteriEXT$address() {
        return glProgramParameteriEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
     * }
     */
    public static void glProgramParameteriEXT(int program, int pname, int value) {
        var mh$ = glProgramParameteriEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProgramParameteriEXT", program, pname, value);
            }
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTextureEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTextureEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
     * }
     */
    public static FunctionDescriptor glFramebufferTextureEXT$descriptor() {
        return glFramebufferTextureEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
     * }
     */
    public static MethodHandle glFramebufferTextureEXT$handle() {
        return glFramebufferTextureEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
     * }
     */
    public static MemorySegment glFramebufferTextureEXT$address() {
        return glFramebufferTextureEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
     * }
     */
    public static void glFramebufferTextureEXT(int target, int attachment, int texture, int level) {
        var mh$ = glFramebufferTextureEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTextureEXT", target, attachment, texture, level);
            }
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTextureFaceEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTextureFaceEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
     * }
     */
    public static FunctionDescriptor glFramebufferTextureFaceEXT$descriptor() {
        return glFramebufferTextureFaceEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
     * }
     */
    public static MethodHandle glFramebufferTextureFaceEXT$handle() {
        return glFramebufferTextureFaceEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
     * }
     */
    public static MemorySegment glFramebufferTextureFaceEXT$address() {
        return glFramebufferTextureFaceEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
     * }
     */
    public static void glFramebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face) {
        var mh$ = glFramebufferTextureFaceEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTextureFaceEXT", target, attachment, texture, level, face);
            }
            mh$.invokeExact(target, attachment, texture, level, face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFramebufferTextureLayerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFramebufferTextureLayerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static FunctionDescriptor glFramebufferTextureLayerEXT$descriptor() {
        return glFramebufferTextureLayerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static MethodHandle glFramebufferTextureLayerEXT$handle() {
        return glFramebufferTextureLayerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static MemorySegment glFramebufferTextureLayerEXT$address() {
        return glFramebufferTextureLayerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
     * }
     */
    public static void glFramebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer) {
        var mh$ = glFramebufferTextureLayerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFramebufferTextureLayerEXT", target, attachment, texture, level, layer);
            }
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI1iEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI1iEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1iEXT(GLuint index, GLint x)
     * }
     */
    public static FunctionDescriptor glVertexAttribI1iEXT$descriptor() {
        return glVertexAttribI1iEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1iEXT(GLuint index, GLint x)
     * }
     */
    public static MethodHandle glVertexAttribI1iEXT$handle() {
        return glVertexAttribI1iEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1iEXT(GLuint index, GLint x)
     * }
     */
    public static MemorySegment glVertexAttribI1iEXT$address() {
        return glVertexAttribI1iEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI1iEXT(GLuint index, GLint x)
     * }
     */
    public static void glVertexAttribI1iEXT(int index, int x) {
        var mh$ = glVertexAttribI1iEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI1iEXT", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI2iEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI2iEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glVertexAttribI2iEXT$descriptor() {
        return glVertexAttribI2iEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
     * }
     */
    public static MethodHandle glVertexAttribI2iEXT$handle() {
        return glVertexAttribI2iEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
     * }
     */
    public static MemorySegment glVertexAttribI2iEXT$address() {
        return glVertexAttribI2iEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
     * }
     */
    public static void glVertexAttribI2iEXT(int index, int x, int y) {
        var mh$ = glVertexAttribI2iEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI2iEXT", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI3iEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI3iEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glVertexAttribI3iEXT$descriptor() {
        return glVertexAttribI3iEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glVertexAttribI3iEXT$handle() {
        return glVertexAttribI3iEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glVertexAttribI3iEXT$address() {
        return glVertexAttribI3iEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
     * }
     */
    public static void glVertexAttribI3iEXT(int index, int x, int y, int z) {
        var mh$ = glVertexAttribI3iEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI3iEXT", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4iEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4iEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4iEXT$descriptor() {
        return glVertexAttribI4iEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MethodHandle glVertexAttribI4iEXT$handle() {
        return glVertexAttribI4iEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MemorySegment glVertexAttribI4iEXT$address() {
        return glVertexAttribI4iEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static void glVertexAttribI4iEXT(int index, int x, int y, int z, int w) {
        var mh$ = glVertexAttribI4iEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4iEXT", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI1uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI1uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uiEXT(GLuint index, GLuint x)
     * }
     */
    public static FunctionDescriptor glVertexAttribI1uiEXT$descriptor() {
        return glVertexAttribI1uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uiEXT(GLuint index, GLuint x)
     * }
     */
    public static MethodHandle glVertexAttribI1uiEXT$handle() {
        return glVertexAttribI1uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uiEXT(GLuint index, GLuint x)
     * }
     */
    public static MemorySegment glVertexAttribI1uiEXT$address() {
        return glVertexAttribI1uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI1uiEXT(GLuint index, GLuint x)
     * }
     */
    public static void glVertexAttribI1uiEXT(int index, int x) {
        var mh$ = glVertexAttribI1uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI1uiEXT", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI2uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI2uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
     * }
     */
    public static FunctionDescriptor glVertexAttribI2uiEXT$descriptor() {
        return glVertexAttribI2uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
     * }
     */
    public static MethodHandle glVertexAttribI2uiEXT$handle() {
        return glVertexAttribI2uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
     * }
     */
    public static MemorySegment glVertexAttribI2uiEXT$address() {
        return glVertexAttribI2uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
     * }
     */
    public static void glVertexAttribI2uiEXT(int index, int x, int y) {
        var mh$ = glVertexAttribI2uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI2uiEXT", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI3uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI3uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
     * }
     */
    public static FunctionDescriptor glVertexAttribI3uiEXT$descriptor() {
        return glVertexAttribI3uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
     * }
     */
    public static MethodHandle glVertexAttribI3uiEXT$handle() {
        return glVertexAttribI3uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
     * }
     */
    public static MemorySegment glVertexAttribI3uiEXT$address() {
        return glVertexAttribI3uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
     * }
     */
    public static void glVertexAttribI3uiEXT(int index, int x, int y, int z) {
        var mh$ = glVertexAttribI3uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI3uiEXT", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4uiEXT$descriptor() {
        return glVertexAttribI4uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
     * }
     */
    public static MethodHandle glVertexAttribI4uiEXT$handle() {
        return glVertexAttribI4uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
     * }
     */
    public static MemorySegment glVertexAttribI4uiEXT$address() {
        return glVertexAttribI4uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
     * }
     */
    public static void glVertexAttribI4uiEXT(int index, int x, int y, int z, int w) {
        var mh$ = glVertexAttribI4uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4uiEXT", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI1ivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI1ivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI1ivEXT$descriptor() {
        return glVertexAttribI1ivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttribI1ivEXT$handle() {
        return glVertexAttribI1ivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttribI1ivEXT$address() {
        return glVertexAttribI1ivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI1ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttribI1ivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI1ivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI1ivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI2ivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI2ivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI2ivEXT$descriptor() {
        return glVertexAttribI2ivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttribI2ivEXT$handle() {
        return glVertexAttribI2ivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttribI2ivEXT$address() {
        return glVertexAttribI2ivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI2ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttribI2ivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI2ivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI2ivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI3ivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI3ivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI3ivEXT$descriptor() {
        return glVertexAttribI3ivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttribI3ivEXT$handle() {
        return glVertexAttribI3ivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttribI3ivEXT$address() {
        return glVertexAttribI3ivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI3ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttribI3ivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI3ivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI3ivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4ivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4ivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4ivEXT$descriptor() {
        return glVertexAttribI4ivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttribI4ivEXT$handle() {
        return glVertexAttribI4ivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttribI4ivEXT$address() {
        return glVertexAttribI4ivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4ivEXT(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttribI4ivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4ivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4ivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI1uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI1uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI1uivEXT$descriptor() {
        return glVertexAttribI1uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttribI1uivEXT$handle() {
        return glVertexAttribI1uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttribI1uivEXT$address() {
        return glVertexAttribI1uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttribI1uivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI1uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI1uivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI2uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI2uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI2uivEXT$descriptor() {
        return glVertexAttribI2uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttribI2uivEXT$handle() {
        return glVertexAttribI2uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttribI2uivEXT$address() {
        return glVertexAttribI2uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttribI2uivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI2uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI2uivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI3uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI3uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI3uivEXT$descriptor() {
        return glVertexAttribI3uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttribI3uivEXT$handle() {
        return glVertexAttribI3uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttribI3uivEXT$address() {
        return glVertexAttribI3uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttribI3uivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI3uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI3uivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4uivEXT$descriptor() {
        return glVertexAttribI4uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttribI4uivEXT$handle() {
        return glVertexAttribI4uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttribI4uivEXT$address() {
        return glVertexAttribI4uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttribI4uivEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4uivEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4bvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4bvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4bvEXT$descriptor() {
        return glVertexAttribI4bvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
     * }
     */
    public static MethodHandle glVertexAttribI4bvEXT$handle() {
        return glVertexAttribI4bvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
     * }
     */
    public static MemorySegment glVertexAttribI4bvEXT$address() {
        return glVertexAttribI4bvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
     * }
     */
    public static void glVertexAttribI4bvEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4bvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4bvEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4svEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4svEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4svEXT(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4svEXT$descriptor() {
        return glVertexAttribI4svEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4svEXT(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttribI4svEXT$handle() {
        return glVertexAttribI4svEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4svEXT(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttribI4svEXT$address() {
        return glVertexAttribI4svEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4svEXT(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttribI4svEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4svEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4svEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4ubvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4ubvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4ubvEXT$descriptor() {
        return glVertexAttribI4ubvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
     * }
     */
    public static MethodHandle glVertexAttribI4ubvEXT$handle() {
        return glVertexAttribI4ubvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
     * }
     */
    public static MemorySegment glVertexAttribI4ubvEXT$address() {
        return glVertexAttribI4ubvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
     * }
     */
    public static void glVertexAttribI4ubvEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4ubvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4ubvEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribI4usvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribI4usvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttribI4usvEXT$descriptor() {
        return glVertexAttribI4usvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
     * }
     */
    public static MethodHandle glVertexAttribI4usvEXT$handle() {
        return glVertexAttribI4usvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
     * }
     */
    public static MemorySegment glVertexAttribI4usvEXT$address() {
        return glVertexAttribI4usvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
     * }
     */
    public static void glVertexAttribI4usvEXT(int index, MemorySegment v) {
        var mh$ = glVertexAttribI4usvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribI4usvEXT", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribIPointerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribIPointerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glVertexAttribIPointerEXT$descriptor() {
        return glVertexAttribIPointerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glVertexAttribIPointerEXT$handle() {
        return glVertexAttribIPointerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glVertexAttribIPointerEXT$address() {
        return glVertexAttribIPointerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glVertexAttribIPointerEXT(int index, int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glVertexAttribIPointerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribIPointerEXT", index, size, type, stride, pointer);
            }
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribIivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribIivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribIivEXT$descriptor() {
        return glGetVertexAttribIivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetVertexAttribIivEXT$handle() {
        return glGetVertexAttribIivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetVertexAttribIivEXT$address() {
        return glGetVertexAttribIivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static void glGetVertexAttribIivEXT(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribIivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribIivEXT", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribIuivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribIuivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribIuivEXT$descriptor() {
        return glGetVertexAttribIuivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
     * }
     */
    public static MethodHandle glGetVertexAttribIuivEXT$handle() {
        return glGetVertexAttribIuivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
     * }
     */
    public static MemorySegment glGetVertexAttribIuivEXT$address() {
        return glGetVertexAttribIuivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
     * }
     */
    public static void glGetVertexAttribIuivEXT(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribIuivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribIuivEXT", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1uiEXT(GLint location, GLuint v0)
     * }
     */
    public static FunctionDescriptor glUniform1uiEXT$descriptor() {
        return glUniform1uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1uiEXT(GLint location, GLuint v0)
     * }
     */
    public static MethodHandle glUniform1uiEXT$handle() {
        return glUniform1uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1uiEXT(GLint location, GLuint v0)
     * }
     */
    public static MemorySegment glUniform1uiEXT$address() {
        return glUniform1uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1uiEXT(GLint location, GLuint v0)
     * }
     */
    public static void glUniform1uiEXT(int location, int v0) {
        var mh$ = glUniform1uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1uiEXT", location, v0);
            }
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
     * }
     */
    public static FunctionDescriptor glUniform2uiEXT$descriptor() {
        return glUniform2uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
     * }
     */
    public static MethodHandle glUniform2uiEXT$handle() {
        return glUniform2uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
     * }
     */
    public static MemorySegment glUniform2uiEXT$address() {
        return glUniform2uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
     * }
     */
    public static void glUniform2uiEXT(int location, int v0, int v1) {
        var mh$ = glUniform2uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2uiEXT", location, v0, v1);
            }
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
     * }
     */
    public static FunctionDescriptor glUniform3uiEXT$descriptor() {
        return glUniform3uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
     * }
     */
    public static MethodHandle glUniform3uiEXT$handle() {
        return glUniform3uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
     * }
     */
    public static MemorySegment glUniform3uiEXT$address() {
        return glUniform3uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
     * }
     */
    public static void glUniform3uiEXT(int location, int v0, int v1, int v2) {
        var mh$ = glUniform3uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3uiEXT", location, v0, v1, v2);
            }
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
     * }
     */
    public static FunctionDescriptor glUniform4uiEXT$descriptor() {
        return glUniform4uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
     * }
     */
    public static MethodHandle glUniform4uiEXT$handle() {
        return glUniform4uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
     * }
     */
    public static MemorySegment glUniform4uiEXT$address() {
        return glUniform4uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
     * }
     */
    public static void glUniform4uiEXT(int location, int v0, int v1, int v2, int v3) {
        var mh$ = glUniform4uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4uiEXT", location, v0, v1, v2, v3);
            }
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static FunctionDescriptor glUniform1uivEXT$descriptor() {
        return glUniform1uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MethodHandle glUniform1uivEXT$handle() {
        return glUniform1uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MemorySegment glUniform1uivEXT$address() {
        return glUniform1uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static void glUniform1uivEXT(int location, int count, MemorySegment value) {
        var mh$ = glUniform1uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1uivEXT", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static FunctionDescriptor glUniform2uivEXT$descriptor() {
        return glUniform2uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MethodHandle glUniform2uivEXT$handle() {
        return glUniform2uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MemorySegment glUniform2uivEXT$address() {
        return glUniform2uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static void glUniform2uivEXT(int location, int count, MemorySegment value) {
        var mh$ = glUniform2uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2uivEXT", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static FunctionDescriptor glUniform3uivEXT$descriptor() {
        return glUniform3uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MethodHandle glUniform3uivEXT$handle() {
        return glUniform3uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MemorySegment glUniform3uivEXT$address() {
        return glUniform3uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static void glUniform3uivEXT(int location, int count, MemorySegment value) {
        var mh$ = glUniform3uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3uivEXT", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static FunctionDescriptor glUniform4uivEXT$descriptor() {
        return glUniform4uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MethodHandle glUniform4uivEXT$handle() {
        return glUniform4uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static MemorySegment glUniform4uivEXT$address() {
        return glUniform4uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
     * }
     */
    public static void glUniform4uivEXT(int location, int count, MemorySegment value) {
        var mh$ = glUniform4uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4uivEXT", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformuivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformuivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
     * }
     */
    public static FunctionDescriptor glGetUniformuivEXT$descriptor() {
        return glGetUniformuivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
     * }
     */
    public static MethodHandle glGetUniformuivEXT$handle() {
        return glGetUniformuivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
     * }
     */
    public static MemorySegment glGetUniformuivEXT$address() {
        return glGetUniformuivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
     * }
     */
    public static void glGetUniformuivEXT(int program, int location, MemorySegment params) {
        var mh$ = glGetUniformuivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformuivEXT", program, location, params);
            }
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindFragDataLocationEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindFragDataLocationEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar *name)
     * }
     */
    public static FunctionDescriptor glBindFragDataLocationEXT$descriptor() {
        return glBindFragDataLocationEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar *name)
     * }
     */
    public static MethodHandle glBindFragDataLocationEXT$handle() {
        return glBindFragDataLocationEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar *name)
     * }
     */
    public static MemorySegment glBindFragDataLocationEXT$address() {
        return glBindFragDataLocationEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar *name)
     * }
     */
    public static void glBindFragDataLocationEXT(int program, int colorNumber, MemorySegment name) {
        var mh$ = glBindFragDataLocationEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindFragDataLocationEXT", program, colorNumber, name);
            }
            mh$.invokeExact(program, colorNumber, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetFragDataLocationEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetFragDataLocationEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetFragDataLocationEXT$descriptor() {
        return glGetFragDataLocationEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name)
     * }
     */
    public static MethodHandle glGetFragDataLocationEXT$handle() {
        return glGetFragDataLocationEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name)
     * }
     */
    public static MemorySegment glGetFragDataLocationEXT$address() {
        return glGetFragDataLocationEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name)
     * }
     */
    public static int glGetFragDataLocationEXT(int program, MemorySegment name) {
        var mh$ = glGetFragDataLocationEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetFragDataLocationEXT", program, name);
            }
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawArraysEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawArraysEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawArraysEXT$descriptor() {
        return glMultiDrawArraysEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawArraysEXT$handle() {
        return glMultiDrawArraysEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawArraysEXT$address() {
        return glMultiDrawArraysEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static void glMultiDrawArraysEXT(int mode, MemorySegment first, MemorySegment count, int primcount) {
        var mh$ = glMultiDrawArraysEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawArraysEXT", mode, first, count, primcount);
            }
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawElementsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawElementsEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawElementsEXT$descriptor() {
        return glMultiDrawElementsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawElementsEXT$handle() {
        return glMultiDrawElementsEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawElementsEXT$address() {
        return glMultiDrawElementsEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static void glMultiDrawElementsEXT(int mode, MemorySegment count, int type, MemorySegment indices, int primcount) {
        var mh$ = glMultiDrawElementsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawElementsEXT", mode, count, type, indices, primcount);
            }
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glProvokingVertexEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glProvokingVertexEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glProvokingVertexEXT(GLenum mode)
     * }
     */
    public static FunctionDescriptor glProvokingVertexEXT$descriptor() {
        return glProvokingVertexEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glProvokingVertexEXT(GLenum mode)
     * }
     */
    public static MethodHandle glProvokingVertexEXT$handle() {
        return glProvokingVertexEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glProvokingVertexEXT(GLenum mode)
     * }
     */
    public static MemorySegment glProvokingVertexEXT$address() {
        return glProvokingVertexEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glProvokingVertexEXT(GLenum mode)
     * }
     */
    public static void glProvokingVertexEXT(int mode) {
        var mh$ = glProvokingVertexEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glProvokingVertexEXT", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3bEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3bEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3bEXT$descriptor() {
        return glSecondaryColor3bEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MethodHandle glSecondaryColor3bEXT$handle() {
        return glSecondaryColor3bEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MemorySegment glSecondaryColor3bEXT$address() {
        return glSecondaryColor3bEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static void glSecondaryColor3bEXT(byte red, byte green, byte blue) {
        var mh$ = glSecondaryColor3bEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3bEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3bvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3bvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bvEXT(const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3bvEXT$descriptor() {
        return glSecondaryColor3bvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bvEXT(const GLbyte *v)
     * }
     */
    public static MethodHandle glSecondaryColor3bvEXT$handle() {
        return glSecondaryColor3bvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bvEXT(const GLbyte *v)
     * }
     */
    public static MemorySegment glSecondaryColor3bvEXT$address() {
        return glSecondaryColor3bvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3bvEXT(const GLbyte *v)
     * }
     */
    public static void glSecondaryColor3bvEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3bvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3bvEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3dEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3dEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3dEXT$descriptor() {
        return glSecondaryColor3dEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MethodHandle glSecondaryColor3dEXT$handle() {
        return glSecondaryColor3dEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MemorySegment glSecondaryColor3dEXT$address() {
        return glSecondaryColor3dEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static void glSecondaryColor3dEXT(double red, double green, double blue) {
        var mh$ = glSecondaryColor3dEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3dEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3dvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3dvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dvEXT(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3dvEXT$descriptor() {
        return glSecondaryColor3dvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dvEXT(const GLdouble *v)
     * }
     */
    public static MethodHandle glSecondaryColor3dvEXT$handle() {
        return glSecondaryColor3dvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dvEXT(const GLdouble *v)
     * }
     */
    public static MemorySegment glSecondaryColor3dvEXT$address() {
        return glSecondaryColor3dvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3dvEXT(const GLdouble *v)
     * }
     */
    public static void glSecondaryColor3dvEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3dvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3dvEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3fEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3fEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3fEXT$descriptor() {
        return glSecondaryColor3fEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MethodHandle glSecondaryColor3fEXT$handle() {
        return glSecondaryColor3fEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MemorySegment glSecondaryColor3fEXT$address() {
        return glSecondaryColor3fEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static void glSecondaryColor3fEXT(float red, float green, float blue) {
        var mh$ = glSecondaryColor3fEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3fEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3fvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3fvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fvEXT(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3fvEXT$descriptor() {
        return glSecondaryColor3fvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fvEXT(const GLfloat *v)
     * }
     */
    public static MethodHandle glSecondaryColor3fvEXT$handle() {
        return glSecondaryColor3fvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fvEXT(const GLfloat *v)
     * }
     */
    public static MemorySegment glSecondaryColor3fvEXT$address() {
        return glSecondaryColor3fvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3fvEXT(const GLfloat *v)
     * }
     */
    public static void glSecondaryColor3fvEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3fvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3fvEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3iEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3iEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3iEXT$descriptor() {
        return glSecondaryColor3iEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
     * }
     */
    public static MethodHandle glSecondaryColor3iEXT$handle() {
        return glSecondaryColor3iEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
     * }
     */
    public static MemorySegment glSecondaryColor3iEXT$address() {
        return glSecondaryColor3iEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
     * }
     */
    public static void glSecondaryColor3iEXT(int red, int green, int blue) {
        var mh$ = glSecondaryColor3iEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3iEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ivEXT(const GLint *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ivEXT$descriptor() {
        return glSecondaryColor3ivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ivEXT(const GLint *v)
     * }
     */
    public static MethodHandle glSecondaryColor3ivEXT$handle() {
        return glSecondaryColor3ivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ivEXT(const GLint *v)
     * }
     */
    public static MemorySegment glSecondaryColor3ivEXT$address() {
        return glSecondaryColor3ivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ivEXT(const GLint *v)
     * }
     */
    public static void glSecondaryColor3ivEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3ivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ivEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3sEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3sEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3sEXT$descriptor() {
        return glSecondaryColor3sEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MethodHandle glSecondaryColor3sEXT$handle() {
        return glSecondaryColor3sEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MemorySegment glSecondaryColor3sEXT$address() {
        return glSecondaryColor3sEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static void glSecondaryColor3sEXT(short red, short green, short blue) {
        var mh$ = glSecondaryColor3sEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3sEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3svEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3svEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3svEXT(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3svEXT$descriptor() {
        return glSecondaryColor3svEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3svEXT(const GLshort *v)
     * }
     */
    public static MethodHandle glSecondaryColor3svEXT$handle() {
        return glSecondaryColor3svEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3svEXT(const GLshort *v)
     * }
     */
    public static MemorySegment glSecondaryColor3svEXT$address() {
        return glSecondaryColor3svEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3svEXT(const GLshort *v)
     * }
     */
    public static void glSecondaryColor3svEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3svEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3svEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ubEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ubEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ubEXT$descriptor() {
        return glSecondaryColor3ubEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MethodHandle glSecondaryColor3ubEXT$handle() {
        return glSecondaryColor3ubEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MemorySegment glSecondaryColor3ubEXT$address() {
        return glSecondaryColor3ubEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static void glSecondaryColor3ubEXT(byte red, byte green, byte blue) {
        var mh$ = glSecondaryColor3ubEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ubEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ubvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ubvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubvEXT(const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ubvEXT$descriptor() {
        return glSecondaryColor3ubvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubvEXT(const GLubyte *v)
     * }
     */
    public static MethodHandle glSecondaryColor3ubvEXT$handle() {
        return glSecondaryColor3ubvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubvEXT(const GLubyte *v)
     * }
     */
    public static MemorySegment glSecondaryColor3ubvEXT$address() {
        return glSecondaryColor3ubvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubvEXT(const GLubyte *v)
     * }
     */
    public static void glSecondaryColor3ubvEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3ubvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ubvEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3uiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3uiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3uiEXT$descriptor() {
        return glSecondaryColor3uiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MethodHandle glSecondaryColor3uiEXT$handle() {
        return glSecondaryColor3uiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MemorySegment glSecondaryColor3uiEXT$address() {
        return glSecondaryColor3uiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static void glSecondaryColor3uiEXT(int red, int green, int blue) {
        var mh$ = glSecondaryColor3uiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3uiEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3uivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3uivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uivEXT(const GLuint *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3uivEXT$descriptor() {
        return glSecondaryColor3uivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uivEXT(const GLuint *v)
     * }
     */
    public static MethodHandle glSecondaryColor3uivEXT$handle() {
        return glSecondaryColor3uivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uivEXT(const GLuint *v)
     * }
     */
    public static MemorySegment glSecondaryColor3uivEXT$address() {
        return glSecondaryColor3uivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3uivEXT(const GLuint *v)
     * }
     */
    public static void glSecondaryColor3uivEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3uivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3uivEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3usEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3usEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3usEXT$descriptor() {
        return glSecondaryColor3usEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MethodHandle glSecondaryColor3usEXT$handle() {
        return glSecondaryColor3usEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MemorySegment glSecondaryColor3usEXT$address() {
        return glSecondaryColor3usEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static void glSecondaryColor3usEXT(short red, short green, short blue) {
        var mh$ = glSecondaryColor3usEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3usEXT", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3usvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3usvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usvEXT(const GLushort *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3usvEXT$descriptor() {
        return glSecondaryColor3usvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usvEXT(const GLushort *v)
     * }
     */
    public static MethodHandle glSecondaryColor3usvEXT$handle() {
        return glSecondaryColor3usvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usvEXT(const GLushort *v)
     * }
     */
    public static MemorySegment glSecondaryColor3usvEXT$address() {
        return glSecondaryColor3usvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3usvEXT(const GLushort *v)
     * }
     */
    public static void glSecondaryColor3usvEXT(MemorySegment v) {
        var mh$ = glSecondaryColor3usvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3usvEXT", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColorPointerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColorPointerEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glSecondaryColorPointerEXT$descriptor() {
        return glSecondaryColorPointerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glSecondaryColorPointerEXT$handle() {
        return glSecondaryColorPointerEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glSecondaryColorPointerEXT$address() {
        return glSecondaryColorPointerEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glSecondaryColorPointerEXT(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glSecondaryColorPointerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColorPointerEXT", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glActiveStencilFaceEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glActiveStencilFaceEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glActiveStencilFaceEXT(GLenum face)
     * }
     */
    public static FunctionDescriptor glActiveStencilFaceEXT$descriptor() {
        return glActiveStencilFaceEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glActiveStencilFaceEXT(GLenum face)
     * }
     */
    public static MethodHandle glActiveStencilFaceEXT$handle() {
        return glActiveStencilFaceEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glActiveStencilFaceEXT(GLenum face)
     * }
     */
    public static MemorySegment glActiveStencilFaceEXT$address() {
        return glActiveStencilFaceEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glActiveStencilFaceEXT(GLenum face)
     * }
     */
    public static void glActiveStencilFaceEXT(int face) {
        var mh$ = glActiveStencilFaceEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glActiveStencilFaceEXT", face);
            }
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearColorIiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearColorIiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
     * }
     */
    public static FunctionDescriptor glClearColorIiEXT$descriptor() {
        return glClearColorIiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
     * }
     */
    public static MethodHandle glClearColorIiEXT$handle() {
        return glClearColorIiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
     * }
     */
    public static MemorySegment glClearColorIiEXT$address() {
        return glClearColorIiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
     * }
     */
    public static void glClearColorIiEXT(int r, int g, int b, int a) {
        var mh$ = glClearColorIiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearColorIiEXT", r, g, b, a);
            }
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearColorIuiEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearColorIuiEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
     * }
     */
    public static FunctionDescriptor glClearColorIuiEXT$descriptor() {
        return glClearColorIuiEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
     * }
     */
    public static MethodHandle glClearColorIuiEXT$handle() {
        return glClearColorIuiEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
     * }
     */
    public static MemorySegment glClearColorIuiEXT$address() {
        return glClearColorIuiEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
     * }
     */
    public static void glClearColorIuiEXT(int r, int g, int b, int a) {
        var mh$ = glClearColorIuiEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearColorIuiEXT", r, g, b, a);
            }
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameterIivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameterIivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glTexParameterIivEXT$descriptor() {
        return glTexParameterIivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glTexParameterIivEXT$handle() {
        return glTexParameterIivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glTexParameterIivEXT$address() {
        return glTexParameterIivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glTexParameterIivEXT(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameterIivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameterIivEXT", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameterIuivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameterIuivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static FunctionDescriptor glTexParameterIuivEXT$descriptor() {
        return glTexParameterIuivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static MethodHandle glTexParameterIuivEXT$handle() {
        return glTexParameterIuivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static MemorySegment glTexParameterIuivEXT$address() {
        return glTexParameterIuivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static void glTexParameterIuivEXT(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameterIuivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameterIuivEXT", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexParameterIivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexParameterIivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetTexParameterIivEXT$descriptor() {
        return glGetTexParameterIivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetTexParameterIivEXT$handle() {
        return glGetTexParameterIivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetTexParameterIivEXT$address() {
        return glGetTexParameterIivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetTexParameterIivEXT(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameterIivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexParameterIivEXT", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexParameterIuivEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexParameterIuivEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static FunctionDescriptor glGetTexParameterIuivEXT$descriptor() {
        return glGetTexParameterIuivEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static MethodHandle glGetTexParameterIuivEXT$handle() {
        return glGetTexParameterIuivEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static MemorySegment glGetTexParameterIuivEXT$address() {
        return glGetTexParameterIuivEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
     * }
     */
    public static void glGetTexParameterIuivEXT(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameterIuivEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexParameterIuivEXT", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjecti64vEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjecti64vEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjecti64vEXT$descriptor() {
        return glGetQueryObjecti64vEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
     * }
     */
    public static MethodHandle glGetQueryObjecti64vEXT$handle() {
        return glGetQueryObjecti64vEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
     * }
     */
    public static MemorySegment glGetQueryObjecti64vEXT$address() {
        return glGetQueryObjecti64vEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
     * }
     */
    public static void glGetQueryObjecti64vEXT(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjecti64vEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjecti64vEXT", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjectui64vEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjectui64vEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjectui64vEXT$descriptor() {
        return glGetQueryObjectui64vEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
     * }
     */
    public static MethodHandle glGetQueryObjectui64vEXT$handle() {
        return glGetQueryObjectui64vEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
     * }
     */
    public static MemorySegment glGetQueryObjectui64vEXT$address() {
        return glGetQueryObjectui64vEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
     * }
     */
    public static void glGetQueryObjectui64vEXT(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjectui64vEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjectui64vEXT", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindBufferRangeEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindBufferRangeEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static FunctionDescriptor glBindBufferRangeEXT$descriptor() {
        return glBindBufferRangeEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static MethodHandle glBindBufferRangeEXT$handle() {
        return glBindBufferRangeEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static MemorySegment glBindBufferRangeEXT$address() {
        return glBindBufferRangeEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static void glBindBufferRangeEXT(int target, int index, int buffer, long offset, long size) {
        var mh$ = glBindBufferRangeEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindBufferRangeEXT", target, index, buffer, offset, size);
            }
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindBufferOffsetEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_LONG
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindBufferOffsetEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
     * }
     */
    public static FunctionDescriptor glBindBufferOffsetEXT$descriptor() {
        return glBindBufferOffsetEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
     * }
     */
    public static MethodHandle glBindBufferOffsetEXT$handle() {
        return glBindBufferOffsetEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
     * }
     */
    public static MemorySegment glBindBufferOffsetEXT$address() {
        return glBindBufferOffsetEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
     * }
     */
    public static void glBindBufferOffsetEXT(int target, int index, int buffer, long offset) {
        var mh$ = glBindBufferOffsetEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindBufferOffsetEXT", target, index, buffer, offset);
            }
            mh$.invokeExact(target, index, buffer, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindBufferBaseEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindBufferBaseEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
     * }
     */
    public static FunctionDescriptor glBindBufferBaseEXT$descriptor() {
        return glBindBufferBaseEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
     * }
     */
    public static MethodHandle glBindBufferBaseEXT$handle() {
        return glBindBufferBaseEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
     * }
     */
    public static MemorySegment glBindBufferBaseEXT$address() {
        return glBindBufferBaseEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
     * }
     */
    public static void glBindBufferBaseEXT(int target, int index, int buffer) {
        var mh$ = glBindBufferBaseEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindBufferBaseEXT", target, index, buffer);
            }
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBeginTransformFeedbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBeginTransformFeedbackEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBeginTransformFeedbackEXT(GLenum primitiveMode)
     * }
     */
    public static FunctionDescriptor glBeginTransformFeedbackEXT$descriptor() {
        return glBeginTransformFeedbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBeginTransformFeedbackEXT(GLenum primitiveMode)
     * }
     */
    public static MethodHandle glBeginTransformFeedbackEXT$handle() {
        return glBeginTransformFeedbackEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBeginTransformFeedbackEXT(GLenum primitiveMode)
     * }
     */
    public static MemorySegment glBeginTransformFeedbackEXT$address() {
        return glBeginTransformFeedbackEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBeginTransformFeedbackEXT(GLenum primitiveMode)
     * }
     */
    public static void glBeginTransformFeedbackEXT(int primitiveMode) {
        var mh$ = glBeginTransformFeedbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBeginTransformFeedbackEXT", primitiveMode);
            }
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndTransformFeedbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEndTransformFeedbackEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEndTransformFeedbackEXT()
     * }
     */
    public static FunctionDescriptor glEndTransformFeedbackEXT$descriptor() {
        return glEndTransformFeedbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEndTransformFeedbackEXT()
     * }
     */
    public static MethodHandle glEndTransformFeedbackEXT$handle() {
        return glEndTransformFeedbackEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEndTransformFeedbackEXT()
     * }
     */
    public static MemorySegment glEndTransformFeedbackEXT$address() {
        return glEndTransformFeedbackEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEndTransformFeedbackEXT()
     * }
     */
    public static void glEndTransformFeedbackEXT() {
        var mh$ = glEndTransformFeedbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndTransformFeedbackEXT");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTransformFeedbackVaryingsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTransformFeedbackVaryingsEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)
     * }
     */
    public static FunctionDescriptor glTransformFeedbackVaryingsEXT$descriptor() {
        return glTransformFeedbackVaryingsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)
     * }
     */
    public static MethodHandle glTransformFeedbackVaryingsEXT$handle() {
        return glTransformFeedbackVaryingsEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)
     * }
     */
    public static MemorySegment glTransformFeedbackVaryingsEXT$address() {
        return glTransformFeedbackVaryingsEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const *varyings, GLenum bufferMode)
     * }
     */
    public static void glTransformFeedbackVaryingsEXT(int program, int count, MemorySegment varyings, int bufferMode) {
        var mh$ = glTransformFeedbackVaryingsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTransformFeedbackVaryingsEXT", program, count, varyings, bufferMode);
            }
            mh$.invokeExact(program, count, varyings, bufferMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTransformFeedbackVaryingEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTransformFeedbackVaryingEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetTransformFeedbackVaryingEXT$descriptor() {
        return glGetTransformFeedbackVaryingEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
     * }
     */
    public static MethodHandle glGetTransformFeedbackVaryingEXT$handle() {
        return glGetTransformFeedbackVaryingEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
     * }
     */
    public static MemorySegment glGetTransformFeedbackVaryingEXT$address() {
        return glGetTransformFeedbackVaryingEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
     * }
     */
    public static void glGetTransformFeedbackVaryingEXT(int program, int index, int bufSize, MemorySegment length, MemorySegment size, MemorySegment type, MemorySegment name) {
        var mh$ = glGetTransformFeedbackVaryingEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTransformFeedbackVaryingEXT", program, index, bufSize, length, size, type, name);
            }
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetIntegerIndexedvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetIntegerIndexedvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint *values)
     * }
     */
    public static FunctionDescriptor glGetIntegerIndexedvEXT$descriptor() {
        return glGetIntegerIndexedvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint *values)
     * }
     */
    public static MethodHandle glGetIntegerIndexedvEXT$handle() {
        return glGetIntegerIndexedvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint *values)
     * }
     */
    public static MemorySegment glGetIntegerIndexedvEXT$address() {
        return glGetIntegerIndexedvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint *values)
     * }
     */
    public static void glGetIntegerIndexedvEXT(int param, int index, MemorySegment values) {
        var mh$ = glGetIntegerIndexedvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetIntegerIndexedvEXT", param, index, values);
            }
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBooleanIndexedvEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBooleanIndexedvEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean *values)
     * }
     */
    public static FunctionDescriptor glGetBooleanIndexedvEXT$descriptor() {
        return glGetBooleanIndexedvEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean *values)
     * }
     */
    public static MethodHandle glGetBooleanIndexedvEXT$handle() {
        return glGetBooleanIndexedvEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean *values)
     * }
     */
    public static MemorySegment glGetBooleanIndexedvEXT$address() {
        return glGetBooleanIndexedvEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean *values)
     * }
     */
    public static void glGetBooleanIndexedvEXT(int param, int index, MemorySegment values) {
        var mh$ = glGetBooleanIndexedvEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBooleanIndexedvEXT", param, index, values);
            }
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glElementPointerAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glElementPointerAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glElementPointerAPPLE$descriptor() {
        return glElementPointerAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glElementPointerAPPLE$handle() {
        return glElementPointerAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glElementPointerAPPLE$address() {
        return glElementPointerAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
     * }
     */
    public static void glElementPointerAPPLE(int type, MemorySegment pointer) {
        var mh$ = glElementPointerAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glElementPointerAPPLE", type, pointer);
            }
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawElementArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawElementArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static FunctionDescriptor glDrawElementArrayAPPLE$descriptor() {
        return glDrawElementArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static MethodHandle glDrawElementArrayAPPLE$handle() {
        return glDrawElementArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static MemorySegment glDrawElementArrayAPPLE$address() {
        return glDrawElementArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static void glDrawElementArrayAPPLE(int mode, int first, int count) {
        var mh$ = glDrawElementArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawElementArrayAPPLE", mode, first, count);
            }
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawRangeElementArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawRangeElementArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
     * }
     */
    public static FunctionDescriptor glDrawRangeElementArrayAPPLE$descriptor() {
        return glDrawRangeElementArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
     * }
     */
    public static MethodHandle glDrawRangeElementArrayAPPLE$handle() {
        return glDrawRangeElementArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
     * }
     */
    public static MemorySegment glDrawRangeElementArrayAPPLE$address() {
        return glDrawRangeElementArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
     * }
     */
    public static void glDrawRangeElementArrayAPPLE(int mode, int start, int end, int first, int count) {
        var mh$ = glDrawRangeElementArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawRangeElementArrayAPPLE", mode, start, end, first, count);
            }
            mh$.invokeExact(mode, start, end, first, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawElementArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawElementArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawElementArrayAPPLE$descriptor() {
        return glMultiDrawElementArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawElementArrayAPPLE$handle() {
        return glMultiDrawElementArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawElementArrayAPPLE$address() {
        return glMultiDrawElementArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static void glMultiDrawElementArrayAPPLE(int mode, MemorySegment first, MemorySegment count, int primcount) {
        var mh$ = glMultiDrawElementArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawElementArrayAPPLE", mode, first, count, primcount);
            }
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawRangeElementArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawRangeElementArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawRangeElementArrayAPPLE$descriptor() {
        return glMultiDrawRangeElementArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawRangeElementArrayAPPLE$handle() {
        return glMultiDrawRangeElementArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawRangeElementArrayAPPLE$address() {
        return glMultiDrawRangeElementArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, MemorySegment first, MemorySegment count, int primcount) {
        var mh$ = glMultiDrawRangeElementArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawRangeElementArrayAPPLE", mode, start, end, first, count, primcount);
            }
            mh$.invokeExact(mode, start, end, first, count, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenFencesAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenFencesAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenFencesAPPLE(GLsizei n, GLuint *fences)
     * }
     */
    public static FunctionDescriptor glGenFencesAPPLE$descriptor() {
        return glGenFencesAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenFencesAPPLE(GLsizei n, GLuint *fences)
     * }
     */
    public static MethodHandle glGenFencesAPPLE$handle() {
        return glGenFencesAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenFencesAPPLE(GLsizei n, GLuint *fences)
     * }
     */
    public static MemorySegment glGenFencesAPPLE$address() {
        return glGenFencesAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenFencesAPPLE(GLsizei n, GLuint *fences)
     * }
     */
    public static void glGenFencesAPPLE(int n, MemorySegment fences) {
        var mh$ = glGenFencesAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenFencesAPPLE", n, fences);
            }
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteFencesAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteFencesAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
     * }
     */
    public static FunctionDescriptor glDeleteFencesAPPLE$descriptor() {
        return glDeleteFencesAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
     * }
     */
    public static MethodHandle glDeleteFencesAPPLE$handle() {
        return glDeleteFencesAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
     * }
     */
    public static MemorySegment glDeleteFencesAPPLE$address() {
        return glDeleteFencesAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
     * }
     */
    public static void glDeleteFencesAPPLE(int n, MemorySegment fences) {
        var mh$ = glDeleteFencesAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteFencesAPPLE", n, fences);
            }
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSetFenceAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSetFenceAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSetFenceAPPLE(GLuint fence)
     * }
     */
    public static FunctionDescriptor glSetFenceAPPLE$descriptor() {
        return glSetFenceAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSetFenceAPPLE(GLuint fence)
     * }
     */
    public static MethodHandle glSetFenceAPPLE$handle() {
        return glSetFenceAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSetFenceAPPLE(GLuint fence)
     * }
     */
    public static MemorySegment glSetFenceAPPLE$address() {
        return glSetFenceAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSetFenceAPPLE(GLuint fence)
     * }
     */
    public static void glSetFenceAPPLE(int fence) {
        var mh$ = glSetFenceAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSetFenceAPPLE", fence);
            }
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsFenceAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsFenceAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsFenceAPPLE(GLuint fence)
     * }
     */
    public static FunctionDescriptor glIsFenceAPPLE$descriptor() {
        return glIsFenceAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsFenceAPPLE(GLuint fence)
     * }
     */
    public static MethodHandle glIsFenceAPPLE$handle() {
        return glIsFenceAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsFenceAPPLE(GLuint fence)
     * }
     */
    public static MemorySegment glIsFenceAPPLE$address() {
        return glIsFenceAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsFenceAPPLE(GLuint fence)
     * }
     */
    public static byte glIsFenceAPPLE(int fence) {
        var mh$ = glIsFenceAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsFenceAPPLE", fence);
            }
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTestFenceAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTestFenceAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glTestFenceAPPLE(GLuint fence)
     * }
     */
    public static FunctionDescriptor glTestFenceAPPLE$descriptor() {
        return glTestFenceAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glTestFenceAPPLE(GLuint fence)
     * }
     */
    public static MethodHandle glTestFenceAPPLE$handle() {
        return glTestFenceAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glTestFenceAPPLE(GLuint fence)
     * }
     */
    public static MemorySegment glTestFenceAPPLE$address() {
        return glTestFenceAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glTestFenceAPPLE(GLuint fence)
     * }
     */
    public static byte glTestFenceAPPLE(int fence) {
        var mh$ = glTestFenceAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTestFenceAPPLE", fence);
            }
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFinishFenceAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFinishFenceAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFinishFenceAPPLE(GLuint fence)
     * }
     */
    public static FunctionDescriptor glFinishFenceAPPLE$descriptor() {
        return glFinishFenceAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFinishFenceAPPLE(GLuint fence)
     * }
     */
    public static MethodHandle glFinishFenceAPPLE$handle() {
        return glFinishFenceAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFinishFenceAPPLE(GLuint fence)
     * }
     */
    public static MemorySegment glFinishFenceAPPLE$address() {
        return glFinishFenceAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFinishFenceAPPLE(GLuint fence)
     * }
     */
    public static void glFinishFenceAPPLE(int fence) {
        var mh$ = glFinishFenceAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFinishFenceAPPLE", fence);
            }
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTestObjectAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTestObjectAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glTestObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static FunctionDescriptor glTestObjectAPPLE$descriptor() {
        return glTestObjectAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glTestObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static MethodHandle glTestObjectAPPLE$handle() {
        return glTestObjectAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glTestObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static MemorySegment glTestObjectAPPLE$address() {
        return glTestObjectAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glTestObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static byte glTestObjectAPPLE(int object, int name) {
        var mh$ = glTestObjectAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTestObjectAPPLE", object, name);
            }
            return (byte)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFinishObjectAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFinishObjectAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFinishObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static FunctionDescriptor glFinishObjectAPPLE$descriptor() {
        return glFinishObjectAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFinishObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static MethodHandle glFinishObjectAPPLE$handle() {
        return glFinishObjectAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFinishObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static MemorySegment glFinishObjectAPPLE$address() {
        return glFinishObjectAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFinishObjectAPPLE(GLenum object, GLuint name)
     * }
     */
    public static void glFinishObjectAPPLE(int object, int name) {
        var mh$ = glFinishObjectAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFinishObjectAPPLE", object, name);
            }
            mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBufferParameteriAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBufferParameteriAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glBufferParameteriAPPLE$descriptor() {
        return glBufferParameteriAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glBufferParameteriAPPLE$handle() {
        return glBufferParameteriAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glBufferParameteriAPPLE$address() {
        return glBufferParameteriAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static void glBufferParameteriAPPLE(int target, int pname, int param) {
        var mh$ = glBufferParameteriAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBufferParameteriAPPLE", target, pname, param);
            }
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFlushMappedBufferRangeAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFlushMappedBufferRangeAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static FunctionDescriptor glFlushMappedBufferRangeAPPLE$descriptor() {
        return glFlushMappedBufferRangeAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static MethodHandle glFlushMappedBufferRangeAPPLE$handle() {
        return glFlushMappedBufferRangeAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static MemorySegment glFlushMappedBufferRangeAPPLE$address() {
        return glFlushMappedBufferRangeAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
     * }
     */
    public static void glFlushMappedBufferRangeAPPLE(int target, long offset, long size) {
        var mh$ = glFlushMappedBufferRangeAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFlushMappedBufferRangeAPPLE", target, offset, size);
            }
            mh$.invokeExact(target, offset, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFlushRenderAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFlushRenderAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFlushRenderAPPLE()
     * }
     */
    public static FunctionDescriptor glFlushRenderAPPLE$descriptor() {
        return glFlushRenderAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFlushRenderAPPLE()
     * }
     */
    public static MethodHandle glFlushRenderAPPLE$handle() {
        return glFlushRenderAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFlushRenderAPPLE()
     * }
     */
    public static MemorySegment glFlushRenderAPPLE$address() {
        return glFlushRenderAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFlushRenderAPPLE()
     * }
     */
    public static void glFlushRenderAPPLE() {
        var mh$ = glFlushRenderAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFlushRenderAPPLE");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFinishRenderAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFinishRenderAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFinishRenderAPPLE()
     * }
     */
    public static FunctionDescriptor glFinishRenderAPPLE$descriptor() {
        return glFinishRenderAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFinishRenderAPPLE()
     * }
     */
    public static MethodHandle glFinishRenderAPPLE$handle() {
        return glFinishRenderAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFinishRenderAPPLE()
     * }
     */
    public static MemorySegment glFinishRenderAPPLE$address() {
        return glFinishRenderAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFinishRenderAPPLE()
     * }
     */
    public static void glFinishRenderAPPLE() {
        var mh$ = glFinishRenderAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFinishRenderAPPLE");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSwapAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSwapAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSwapAPPLE()
     * }
     */
    public static FunctionDescriptor glSwapAPPLE$descriptor() {
        return glSwapAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSwapAPPLE()
     * }
     */
    public static MethodHandle glSwapAPPLE$handle() {
        return glSwapAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSwapAPPLE()
     * }
     */
    public static MemorySegment glSwapAPPLE$address() {
        return glSwapAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSwapAPPLE()
     * }
     */
    public static void glSwapAPPLE() {
        var mh$ = glSwapAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSwapAPPLE");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glObjectPurgeableAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glObjectPurgeableAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static FunctionDescriptor glObjectPurgeableAPPLE$descriptor() {
        return glObjectPurgeableAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static MethodHandle glObjectPurgeableAPPLE$handle() {
        return glObjectPurgeableAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static MemorySegment glObjectPurgeableAPPLE$address() {
        return glObjectPurgeableAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static int glObjectPurgeableAPPLE(int objectType, int name, int option) {
        var mh$ = glObjectPurgeableAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glObjectPurgeableAPPLE", objectType, name, option);
            }
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glObjectUnpurgeableAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glObjectUnpurgeableAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static FunctionDescriptor glObjectUnpurgeableAPPLE$descriptor() {
        return glObjectUnpurgeableAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static MethodHandle glObjectUnpurgeableAPPLE$handle() {
        return glObjectUnpurgeableAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static MemorySegment glObjectUnpurgeableAPPLE$address() {
        return glObjectUnpurgeableAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
     * }
     */
    public static int glObjectUnpurgeableAPPLE(int objectType, int name, int option) {
        var mh$ = glObjectUnpurgeableAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glObjectUnpurgeableAPPLE", objectType, name, option);
            }
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetObjectParameterivAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetObjectParameterivAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetObjectParameterivAPPLE$descriptor() {
        return glGetObjectParameterivAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetObjectParameterivAPPLE$handle() {
        return glGetObjectParameterivAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetObjectParameterivAPPLE$address() {
        return glGetObjectParameterivAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
     * }
     */
    public static void glGetObjectParameterivAPPLE(int objectType, int name, int pname, MemorySegment params) {
        var mh$ = glGetObjectParameterivAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetObjectParameterivAPPLE", objectType, name, pname, params);
            }
            mh$.invokeExact(objectType, name, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTextureRangeAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTextureRangeAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glTextureRangeAPPLE$descriptor() {
        return glTextureRangeAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glTextureRangeAPPLE$handle() {
        return glTextureRangeAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glTextureRangeAPPLE$address() {
        return glTextureRangeAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
     * }
     */
    public static void glTextureRangeAPPLE(int target, int length, MemorySegment pointer) {
        var mh$ = glTextureRangeAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTextureRangeAPPLE", target, length, pointer);
            }
            mh$.invokeExact(target, length, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexParameterPointervAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexParameterPointervAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static FunctionDescriptor glGetTexParameterPointervAPPLE$descriptor() {
        return glGetTexParameterPointervAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MethodHandle glGetTexParameterPointervAPPLE$handle() {
        return glGetTexParameterPointervAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MemorySegment glGetTexParameterPointervAPPLE$address() {
        return glGetTexParameterPointervAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static void glGetTexParameterPointervAPPLE(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameterPointervAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexParameterPointervAPPLE", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindVertexArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindVertexArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindVertexArrayAPPLE(GLuint id)
     * }
     */
    public static FunctionDescriptor glBindVertexArrayAPPLE$descriptor() {
        return glBindVertexArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindVertexArrayAPPLE(GLuint id)
     * }
     */
    public static MethodHandle glBindVertexArrayAPPLE$handle() {
        return glBindVertexArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindVertexArrayAPPLE(GLuint id)
     * }
     */
    public static MemorySegment glBindVertexArrayAPPLE$address() {
        return glBindVertexArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindVertexArrayAPPLE(GLuint id)
     * }
     */
    public static void glBindVertexArrayAPPLE(int id) {
        var mh$ = glBindVertexArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindVertexArrayAPPLE", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteVertexArraysAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteVertexArraysAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids)
     * }
     */
    public static FunctionDescriptor glDeleteVertexArraysAPPLE$descriptor() {
        return glDeleteVertexArraysAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids)
     * }
     */
    public static MethodHandle glDeleteVertexArraysAPPLE$handle() {
        return glDeleteVertexArraysAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids)
     * }
     */
    public static MemorySegment glDeleteVertexArraysAPPLE$address() {
        return glDeleteVertexArraysAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids)
     * }
     */
    public static void glDeleteVertexArraysAPPLE(int n, MemorySegment ids) {
        var mh$ = glDeleteVertexArraysAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteVertexArraysAPPLE", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenVertexArraysAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenVertexArraysAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenVertexArraysAPPLE(GLsizei n, GLuint *ids)
     * }
     */
    public static FunctionDescriptor glGenVertexArraysAPPLE$descriptor() {
        return glGenVertexArraysAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenVertexArraysAPPLE(GLsizei n, GLuint *ids)
     * }
     */
    public static MethodHandle glGenVertexArraysAPPLE$handle() {
        return glGenVertexArraysAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenVertexArraysAPPLE(GLsizei n, GLuint *ids)
     * }
     */
    public static MemorySegment glGenVertexArraysAPPLE$address() {
        return glGenVertexArraysAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenVertexArraysAPPLE(GLsizei n, GLuint *ids)
     * }
     */
    public static void glGenVertexArraysAPPLE(int n, MemorySegment ids) {
        var mh$ = glGenVertexArraysAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenVertexArraysAPPLE", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsVertexArrayAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsVertexArrayAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexArrayAPPLE(GLuint id)
     * }
     */
    public static FunctionDescriptor glIsVertexArrayAPPLE$descriptor() {
        return glIsVertexArrayAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexArrayAPPLE(GLuint id)
     * }
     */
    public static MethodHandle glIsVertexArrayAPPLE$handle() {
        return glIsVertexArrayAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexArrayAPPLE(GLuint id)
     * }
     */
    public static MemorySegment glIsVertexArrayAPPLE$address() {
        return glIsVertexArrayAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsVertexArrayAPPLE(GLuint id)
     * }
     */
    public static byte glIsVertexArrayAPPLE(int id) {
        var mh$ = glIsVertexArrayAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsVertexArrayAPPLE", id);
            }
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexArrayRangeAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexArrayRangeAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glVertexArrayRangeAPPLE$descriptor() {
        return glVertexArrayRangeAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glVertexArrayRangeAPPLE$handle() {
        return glVertexArrayRangeAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glVertexArrayRangeAPPLE$address() {
        return glVertexArrayRangeAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static void glVertexArrayRangeAPPLE(int length, MemorySegment pointer) {
        var mh$ = glVertexArrayRangeAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexArrayRangeAPPLE", length, pointer);
            }
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFlushVertexArrayRangeAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFlushVertexArrayRangeAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glFlushVertexArrayRangeAPPLE$descriptor() {
        return glFlushVertexArrayRangeAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glFlushVertexArrayRangeAPPLE$handle() {
        return glFlushVertexArrayRangeAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glFlushVertexArrayRangeAPPLE$address() {
        return glFlushVertexArrayRangeAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer)
     * }
     */
    public static void glFlushVertexArrayRangeAPPLE(int length, MemorySegment pointer) {
        var mh$ = glFlushVertexArrayRangeAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFlushVertexArrayRangeAPPLE", length, pointer);
            }
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexArrayParameteriAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexArrayParameteriAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glVertexArrayParameteriAPPLE$descriptor() {
        return glVertexArrayParameteriAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glVertexArrayParameteriAPPLE$handle() {
        return glVertexArrayParameteriAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glVertexArrayParameteriAPPLE$address() {
        return glVertexArrayParameteriAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
     * }
     */
    public static void glVertexArrayParameteriAPPLE(int pname, int param) {
        var mh$ = glVertexArrayParameteriAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexArrayParameteriAPPLE", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointSizePointerAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointSizePointerAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointSizePointerAPPLE(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glPointSizePointerAPPLE$descriptor() {
        return glPointSizePointerAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointSizePointerAPPLE(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glPointSizePointerAPPLE$handle() {
        return glPointSizePointerAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointSizePointerAPPLE(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glPointSizePointerAPPLE$address() {
        return glPointSizePointerAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointSizePointerAPPLE(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glPointSizePointerAPPLE(int type, int stride, MemorySegment pointer) {
        var mh$ = glPointSizePointerAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointSizePointerAPPLE", type, stride, pointer);
            }
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexPointSizefAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexPointSizefAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexPointSizefAPPLE(GLfloat size)
     * }
     */
    public static FunctionDescriptor glVertexPointSizefAPPLE$descriptor() {
        return glVertexPointSizefAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexPointSizefAPPLE(GLfloat size)
     * }
     */
    public static MethodHandle glVertexPointSizefAPPLE$handle() {
        return glVertexPointSizefAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexPointSizefAPPLE(GLfloat size)
     * }
     */
    public static MemorySegment glVertexPointSizefAPPLE$address() {
        return glVertexPointSizefAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexPointSizefAPPLE(GLfloat size)
     * }
     */
    public static void glVertexPointSizefAPPLE(float size) {
        var mh$ = glVertexPointSizefAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexPointSizefAPPLE", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableVertexAttribAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnableVertexAttribAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static FunctionDescriptor glEnableVertexAttribAPPLE$descriptor() {
        return glEnableVertexAttribAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MethodHandle glEnableVertexAttribAPPLE$handle() {
        return glEnableVertexAttribAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MemorySegment glEnableVertexAttribAPPLE$address() {
        return glEnableVertexAttribAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static void glEnableVertexAttribAPPLE(int index, int pname) {
        var mh$ = glEnableVertexAttribAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableVertexAttribAPPLE", index, pname);
            }
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableVertexAttribAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisableVertexAttribAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static FunctionDescriptor glDisableVertexAttribAPPLE$descriptor() {
        return glDisableVertexAttribAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MethodHandle glDisableVertexAttribAPPLE$handle() {
        return glDisableVertexAttribAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MemorySegment glDisableVertexAttribAPPLE$address() {
        return glDisableVertexAttribAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static void glDisableVertexAttribAPPLE(int index, int pname) {
        var mh$ = glDisableVertexAttribAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableVertexAttribAPPLE", index, pname);
            }
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsVertexAttribEnabledAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsVertexAttribEnabledAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static FunctionDescriptor glIsVertexAttribEnabledAPPLE$descriptor() {
        return glIsVertexAttribEnabledAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MethodHandle glIsVertexAttribEnabledAPPLE$handle() {
        return glIsVertexAttribEnabledAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static MemorySegment glIsVertexAttribEnabledAPPLE$address() {
        return glIsVertexAttribEnabledAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
     * }
     */
    public static byte glIsVertexAttribEnabledAPPLE(int index, int pname) {
        var mh$ = glIsVertexAttribEnabledAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsVertexAttribEnabledAPPLE", index, pname);
            }
            return (byte)mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapVertexAttrib1dAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapVertexAttrib1dAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static FunctionDescriptor glMapVertexAttrib1dAPPLE$descriptor() {
        return glMapVertexAttrib1dAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static MethodHandle glMapVertexAttrib1dAPPLE$handle() {
        return glMapVertexAttrib1dAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static MemorySegment glMapVertexAttrib1dAPPLE$address() {
        return glMapVertexAttrib1dAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, MemorySegment points) {
        var mh$ = glMapVertexAttrib1dAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapVertexAttrib1dAPPLE", index, size, u1, u2, stride, order, points);
            }
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapVertexAttrib1fAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapVertexAttrib1fAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static FunctionDescriptor glMapVertexAttrib1fAPPLE$descriptor() {
        return glMapVertexAttrib1fAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static MethodHandle glMapVertexAttrib1fAPPLE$handle() {
        return glMapVertexAttrib1fAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static MemorySegment glMapVertexAttrib1fAPPLE$address() {
        return glMapVertexAttrib1fAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, MemorySegment points) {
        var mh$ = glMapVertexAttrib1fAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapVertexAttrib1fAPPLE", index, size, u1, u2, stride, order, points);
            }
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapVertexAttrib2dAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapVertexAttrib2dAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static FunctionDescriptor glMapVertexAttrib2dAPPLE$descriptor() {
        return glMapVertexAttrib2dAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static MethodHandle glMapVertexAttrib2dAPPLE$handle() {
        return glMapVertexAttrib2dAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static MemorySegment glMapVertexAttrib2dAPPLE$address() {
        return glMapVertexAttrib2dAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMapVertexAttrib2dAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapVertexAttrib2dAPPLE", index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
            }
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapVertexAttrib2fAPPLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapVertexAttrib2fAPPLE");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static FunctionDescriptor glMapVertexAttrib2fAPPLE$descriptor() {
        return glMapVertexAttrib2fAPPLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static MethodHandle glMapVertexAttrib2fAPPLE$handle() {
        return glMapVertexAttrib2fAPPLE.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static MemorySegment glMapVertexAttrib2fAPPLE$address() {
        return glMapVertexAttrib2fAPPLE.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMapVertexAttrib2fAPPLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapVertexAttrib2fAPPLE", index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
            }
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendEquationSeparateATI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendEquationSeparateATI");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateATI(GLenum equationRGB, GLenum equationAlpha)
     * }
     */
    public static FunctionDescriptor glBlendEquationSeparateATI$descriptor() {
        return glBlendEquationSeparateATI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateATI(GLenum equationRGB, GLenum equationAlpha)
     * }
     */
    public static MethodHandle glBlendEquationSeparateATI$handle() {
        return glBlendEquationSeparateATI.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateATI(GLenum equationRGB, GLenum equationAlpha)
     * }
     */
    public static MemorySegment glBlendEquationSeparateATI$address() {
        return glBlendEquationSeparateATI.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendEquationSeparateATI(GLenum equationRGB, GLenum equationAlpha)
     * }
     */
    public static void glBlendEquationSeparateATI(int equationRGB, int equationAlpha) {
        var mh$ = glBlendEquationSeparateATI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendEquationSeparateATI", equationRGB, equationAlpha);
            }
            mh$.invokeExact(equationRGB, equationAlpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilOpSeparateATI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilOpSeparateATI");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
     * }
     */
    public static FunctionDescriptor glStencilOpSeparateATI$descriptor() {
        return glStencilOpSeparateATI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
     * }
     */
    public static MethodHandle glStencilOpSeparateATI$handle() {
        return glStencilOpSeparateATI.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
     * }
     */
    public static MemorySegment glStencilOpSeparateATI$address() {
        return glStencilOpSeparateATI.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
     * }
     */
    public static void glStencilOpSeparateATI(int face, int sfail, int dpfail, int dppass) {
        var mh$ = glStencilOpSeparateATI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilOpSeparateATI", face, sfail, dpfail, dppass);
            }
            mh$.invokeExact(face, sfail, dpfail, dppass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilFuncSeparateATI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilFuncSeparateATI");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
     * }
     */
    public static FunctionDescriptor glStencilFuncSeparateATI$descriptor() {
        return glStencilFuncSeparateATI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
     * }
     */
    public static MethodHandle glStencilFuncSeparateATI$handle() {
        return glStencilFuncSeparateATI.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
     * }
     */
    public static MemorySegment glStencilFuncSeparateATI$address() {
        return glStencilFuncSeparateATI.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
     * }
     */
    public static void glStencilFuncSeparateATI(int frontfunc, int backfunc, int ref, int mask) {
        var mh$ = glStencilFuncSeparateATI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilFuncSeparateATI", frontfunc, backfunc, ref, mask);
            }
            mh$.invokeExact(frontfunc, backfunc, ref, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBeginConditionalRenderNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBeginConditionalRenderNV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBeginConditionalRenderNV(GLuint id, GLenum mode)
     * }
     */
    public static FunctionDescriptor glBeginConditionalRenderNV$descriptor() {
        return glBeginConditionalRenderNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBeginConditionalRenderNV(GLuint id, GLenum mode)
     * }
     */
    public static MethodHandle glBeginConditionalRenderNV$handle() {
        return glBeginConditionalRenderNV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBeginConditionalRenderNV(GLuint id, GLenum mode)
     * }
     */
    public static MemorySegment glBeginConditionalRenderNV$address() {
        return glBeginConditionalRenderNV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBeginConditionalRenderNV(GLuint id, GLenum mode)
     * }
     */
    public static void glBeginConditionalRenderNV(int id, int mode) {
        var mh$ = glBeginConditionalRenderNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBeginConditionalRenderNV", id, mode);
            }
            mh$.invokeExact(id, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndConditionalRenderNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEndConditionalRenderNV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEndConditionalRenderNV()
     * }
     */
    public static FunctionDescriptor glEndConditionalRenderNV$descriptor() {
        return glEndConditionalRenderNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEndConditionalRenderNV()
     * }
     */
    public static MethodHandle glEndConditionalRenderNV$handle() {
        return glEndConditionalRenderNV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEndConditionalRenderNV()
     * }
     */
    public static MemorySegment glEndConditionalRenderNV$address() {
        return glEndConditionalRenderNV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEndConditionalRenderNV()
     * }
     */
    public static void glEndConditionalRenderNV() {
        var mh$ = glEndConditionalRenderNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndConditionalRenderNV");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameteriNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameteriNV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameteriNV(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glPointParameteriNV$descriptor() {
        return glPointParameteriNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameteriNV(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glPointParameteriNV$handle() {
        return glPointParameteriNV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameteriNV(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glPointParameteriNV$address() {
        return glPointParameteriNV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameteriNV(GLenum pname, GLint param)
     * }
     */
    public static void glPointParameteriNV(int pname, int param) {
        var mh$ = glPointParameteriNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameteriNV", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameterivNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameterivNV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameterivNV(GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glPointParameterivNV$descriptor() {
        return glPointParameterivNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameterivNV(GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glPointParameterivNV$handle() {
        return glPointParameterivNV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameterivNV(GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glPointParameterivNV$address() {
        return glPointParameterivNV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameterivNV(GLenum pname, const GLint *params)
     * }
     */
    public static void glPointParameterivNV(int pname, MemorySegment params) {
        var mh$ = glPointParameterivNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameterivNV", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTextureBarrierNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTextureBarrierNV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTextureBarrierNV()
     * }
     */
    public static FunctionDescriptor glTextureBarrierNV$descriptor() {
        return glTextureBarrierNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTextureBarrierNV()
     * }
     */
    public static MethodHandle glTextureBarrierNV$handle() {
        return glTextureBarrierNV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTextureBarrierNV()
     * }
     */
    public static MemorySegment glTextureBarrierNV$address() {
        return glTextureBarrierNV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTextureBarrierNV()
     * }
     */
    public static void glTextureBarrierNV() {
        var mh$ = glTextureBarrierNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTextureBarrierNV");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAccum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glAccum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static FunctionDescriptor glAccum$descriptor() {
        return glAccum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static MethodHandle glAccum$handle() {
        return glAccum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static MemorySegment glAccum$address() {
        return glAccum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glAccum(GLenum op, GLfloat value)
     * }
     */
    public static void glAccum(int op, float value) {
        var mh$ = glAccum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAccum", op, value);
            }
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAlphaFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glAlphaFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static FunctionDescriptor glAlphaFunc$descriptor() {
        return glAlphaFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static MethodHandle glAlphaFunc$handle() {
        return glAlphaFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static MemorySegment glAlphaFunc$address() {
        return glAlphaFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glAlphaFunc(GLenum func, GLclampf ref)
     * }
     */
    public static void glAlphaFunc(int func, float ref) {
        var mh$ = glAlphaFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAlphaFunc", func, ref);
            }
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAreTexturesResident {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glAreTexturesResident");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
     * }
     */
    public static FunctionDescriptor glAreTexturesResident$descriptor() {
        return glAreTexturesResident.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
     * }
     */
    public static MethodHandle glAreTexturesResident$handle() {
        return glAreTexturesResident.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
     * }
     */
    public static MemorySegment glAreTexturesResident$address() {
        return glAreTexturesResident.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
     * }
     */
    public static byte glAreTexturesResident(int n, MemorySegment textures, MemorySegment residences) {
        var mh$ = glAreTexturesResident.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAreTexturesResident", n, textures, residences);
            }
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glArrayElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glArrayElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glArrayElement(GLint i)
     * }
     */
    public static FunctionDescriptor glArrayElement$descriptor() {
        return glArrayElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glArrayElement(GLint i)
     * }
     */
    public static MethodHandle glArrayElement$handle() {
        return glArrayElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glArrayElement(GLint i)
     * }
     */
    public static MemorySegment glArrayElement$address() {
        return glArrayElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glArrayElement(GLint i)
     * }
     */
    public static void glArrayElement(int i) {
        var mh$ = glArrayElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glArrayElement", i);
            }
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBegin(GLenum mode)
     * }
     */
    public static FunctionDescriptor glBegin$descriptor() {
        return glBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBegin(GLenum mode)
     * }
     */
    public static MethodHandle glBegin$handle() {
        return glBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBegin(GLenum mode)
     * }
     */
    public static MemorySegment glBegin$address() {
        return glBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBegin(GLenum mode)
     * }
     */
    public static void glBegin(int mode) {
        var mh$ = glBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBegin", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindTexture(GLenum target, GLuint texture)
     * }
     */
    public static FunctionDescriptor glBindTexture$descriptor() {
        return glBindTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindTexture(GLenum target, GLuint texture)
     * }
     */
    public static MethodHandle glBindTexture$handle() {
        return glBindTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindTexture(GLenum target, GLuint texture)
     * }
     */
    public static MemorySegment glBindTexture$address() {
        return glBindTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindTexture(GLenum target, GLuint texture)
     * }
     */
    public static void glBindTexture(int target, int texture) {
        var mh$ = glBindTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindTexture", target, texture);
            }
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBitmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBitmap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
     * }
     */
    public static FunctionDescriptor glBitmap$descriptor() {
        return glBitmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
     * }
     */
    public static MethodHandle glBitmap$handle() {
        return glBitmap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
     * }
     */
    public static MemorySegment glBitmap$address() {
        return glBitmap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
     * }
     */
    public static void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, MemorySegment bitmap) {
        var mh$ = glBitmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBitmap", width, height, xorig, yorig, xmove, ymove, bitmap);
            }
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static FunctionDescriptor glBlendColor$descriptor() {
        return glBlendColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MethodHandle glBlendColor$handle() {
        return glBlendColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MemorySegment glBlendColor$address() {
        return glBlendColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static void glBlendColor(float red, float green, float blue, float alpha) {
        var mh$ = glBlendColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendColor", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendEquation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendEquation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendEquation(GLenum mode)
     * }
     */
    public static FunctionDescriptor glBlendEquation$descriptor() {
        return glBlendEquation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendEquation(GLenum mode)
     * }
     */
    public static MethodHandle glBlendEquation$handle() {
        return glBlendEquation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendEquation(GLenum mode)
     * }
     */
    public static MemorySegment glBlendEquation$address() {
        return glBlendEquation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendEquation(GLenum mode)
     * }
     */
    public static void glBlendEquation(int mode) {
        var mh$ = glBlendEquation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendEquation", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendEquationSeparate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendEquationSeparate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static FunctionDescriptor glBlendEquationSeparate$descriptor() {
        return glBlendEquationSeparate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static MethodHandle glBlendEquationSeparate$handle() {
        return glBlendEquationSeparate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static MemorySegment glBlendEquationSeparate$address() {
        return glBlendEquationSeparate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
     * }
     */
    public static void glBlendEquationSeparate(int modeRGB, int modeAlpha) {
        var mh$ = glBlendEquationSeparate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendEquationSeparate", modeRGB, modeAlpha);
            }
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static FunctionDescriptor glBlendFunc$descriptor() {
        return glBlendFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static MethodHandle glBlendFunc$handle() {
        return glBlendFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static MemorySegment glBlendFunc$address() {
        return glBlendFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendFunc(GLenum sfactor, GLenum dfactor)
     * }
     */
    public static void glBlendFunc(int sfactor, int dfactor) {
        var mh$ = glBlendFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendFunc", sfactor, dfactor);
            }
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCallList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCallList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCallList(GLuint list)
     * }
     */
    public static FunctionDescriptor glCallList$descriptor() {
        return glCallList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCallList(GLuint list)
     * }
     */
    public static MethodHandle glCallList$handle() {
        return glCallList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCallList(GLuint list)
     * }
     */
    public static MemorySegment glCallList$address() {
        return glCallList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCallList(GLuint list)
     * }
     */
    public static void glCallList(int list) {
        var mh$ = glCallList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCallList", list);
            }
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCallLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCallLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static FunctionDescriptor glCallLists$descriptor() {
        return glCallLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static MethodHandle glCallLists$handle() {
        return glCallLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static MemorySegment glCallLists$address() {
        return glCallLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
     * }
     */
    public static void glCallLists(int n, int type, MemorySegment lists) {
        var mh$ = glCallLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCallLists", n, type, lists);
            }
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClear(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glClear$descriptor() {
        return glClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClear(GLbitfield mask)
     * }
     */
    public static MethodHandle glClear$handle() {
        return glClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClear(GLbitfield mask)
     * }
     */
    public static MemorySegment glClear$address() {
        return glClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClear(GLbitfield mask)
     * }
     */
    public static void glClear(int mask) {
        var mh$ = glClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClear", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearAccum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearAccum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static FunctionDescriptor glClearAccum$descriptor() {
        return glClearAccum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MethodHandle glClearAccum$handle() {
        return glClearAccum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MemorySegment glClearAccum$address() {
        return glClearAccum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static void glClearAccum(float red, float green, float blue, float alpha) {
        var mh$ = glClearAccum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearAccum", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static FunctionDescriptor glClearColor$descriptor() {
        return glClearColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MethodHandle glClearColor$handle() {
        return glClearColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static MemorySegment glClearColor$address() {
        return glClearColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
     * }
     */
    public static void glClearColor(float red, float green, float blue, float alpha) {
        var mh$ = glClearColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearColor", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearDepth(GLclampd depth)
     * }
     */
    public static FunctionDescriptor glClearDepth$descriptor() {
        return glClearDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearDepth(GLclampd depth)
     * }
     */
    public static MethodHandle glClearDepth$handle() {
        return glClearDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearDepth(GLclampd depth)
     * }
     */
    public static MemorySegment glClearDepth$address() {
        return glClearDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearDepth(GLclampd depth)
     * }
     */
    public static void glClearDepth(double depth) {
        var mh$ = glClearDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearDepth", depth);
            }
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearIndex(GLfloat c)
     * }
     */
    public static FunctionDescriptor glClearIndex$descriptor() {
        return glClearIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearIndex(GLfloat c)
     * }
     */
    public static MethodHandle glClearIndex$handle() {
        return glClearIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearIndex(GLfloat c)
     * }
     */
    public static MemorySegment glClearIndex$address() {
        return glClearIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearIndex(GLfloat c)
     * }
     */
    public static void glClearIndex(float c) {
        var mh$ = glClearIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearIndex", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClearStencil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClearStencil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClearStencil(GLint s)
     * }
     */
    public static FunctionDescriptor glClearStencil$descriptor() {
        return glClearStencil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClearStencil(GLint s)
     * }
     */
    public static MethodHandle glClearStencil$handle() {
        return glClearStencil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClearStencil(GLint s)
     * }
     */
    public static MemorySegment glClearStencil$address() {
        return glClearStencil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClearStencil(GLint s)
     * }
     */
    public static void glClearStencil(int s) {
        var mh$ = glClearStencil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClearStencil", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClipPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClipPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static FunctionDescriptor glClipPlane$descriptor() {
        return glClipPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static MethodHandle glClipPlane$handle() {
        return glClipPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static MemorySegment glClipPlane$address() {
        return glClipPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClipPlane(GLenum plane, const GLdouble *equation)
     * }
     */
    public static void glClipPlane(int plane, MemorySegment equation) {
        var mh$ = glClipPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClipPlane", plane, equation);
            }
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3b {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3b");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static FunctionDescriptor glColor3b$descriptor() {
        return glColor3b.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MethodHandle glColor3b$handle() {
        return glColor3b.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MemorySegment glColor3b$address() {
        return glColor3b.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static void glColor3b(byte red, byte green, byte blue) {
        var mh$ = glColor3b.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3b", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3bv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3bv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3bv(const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glColor3bv$descriptor() {
        return glColor3bv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3bv(const GLbyte *v)
     * }
     */
    public static MethodHandle glColor3bv$handle() {
        return glColor3bv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3bv(const GLbyte *v)
     * }
     */
    public static MemorySegment glColor3bv$address() {
        return glColor3bv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3bv(const GLbyte *v)
     * }
     */
    public static void glColor3bv(MemorySegment v) {
        var mh$ = glColor3bv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3bv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static FunctionDescriptor glColor3d$descriptor() {
        return glColor3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MethodHandle glColor3d$handle() {
        return glColor3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MemorySegment glColor3d$address() {
        return glColor3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static void glColor3d(double red, double green, double blue) {
        var mh$ = glColor3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3d", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glColor3dv$descriptor() {
        return glColor3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glColor3dv$handle() {
        return glColor3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glColor3dv$address() {
        return glColor3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3dv(const GLdouble *v)
     * }
     */
    public static void glColor3dv(MemorySegment v) {
        var mh$ = glColor3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static FunctionDescriptor glColor3f$descriptor() {
        return glColor3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MethodHandle glColor3f$handle() {
        return glColor3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MemorySegment glColor3f$address() {
        return glColor3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static void glColor3f(float red, float green, float blue) {
        var mh$ = glColor3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3f", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glColor3fv$descriptor() {
        return glColor3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glColor3fv$handle() {
        return glColor3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glColor3fv$address() {
        return glColor3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3fv(const GLfloat *v)
     * }
     */
    public static void glColor3fv(MemorySegment v) {
        var mh$ = glColor3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static FunctionDescriptor glColor3i$descriptor() {
        return glColor3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static MethodHandle glColor3i$handle() {
        return glColor3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static MemorySegment glColor3i$address() {
        return glColor3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static void glColor3i(int red, int green, int blue) {
        var mh$ = glColor3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3i", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glColor3iv$descriptor() {
        return glColor3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3iv(const GLint *v)
     * }
     */
    public static MethodHandle glColor3iv$handle() {
        return glColor3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3iv(const GLint *v)
     * }
     */
    public static MemorySegment glColor3iv$address() {
        return glColor3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3iv(const GLint *v)
     * }
     */
    public static void glColor3iv(MemorySegment v) {
        var mh$ = glColor3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static FunctionDescriptor glColor3s$descriptor() {
        return glColor3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MethodHandle glColor3s$handle() {
        return glColor3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MemorySegment glColor3s$address() {
        return glColor3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static void glColor3s(short red, short green, short blue) {
        var mh$ = glColor3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3s", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glColor3sv$descriptor() {
        return glColor3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glColor3sv$handle() {
        return glColor3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glColor3sv$address() {
        return glColor3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3sv(const GLshort *v)
     * }
     */
    public static void glColor3sv(MemorySegment v) {
        var mh$ = glColor3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3ub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3ub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static FunctionDescriptor glColor3ub$descriptor() {
        return glColor3ub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MethodHandle glColor3ub$handle() {
        return glColor3ub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MemorySegment glColor3ub$address() {
        return glColor3ub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static void glColor3ub(byte red, byte green, byte blue) {
        var mh$ = glColor3ub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3ub", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3ubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3ubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3ubv(const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glColor3ubv$descriptor() {
        return glColor3ubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3ubv(const GLubyte *v)
     * }
     */
    public static MethodHandle glColor3ubv$handle() {
        return glColor3ubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3ubv(const GLubyte *v)
     * }
     */
    public static MemorySegment glColor3ubv$address() {
        return glColor3ubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3ubv(const GLubyte *v)
     * }
     */
    public static void glColor3ubv(MemorySegment v) {
        var mh$ = glColor3ubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3ubv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static FunctionDescriptor glColor3ui$descriptor() {
        return glColor3ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MethodHandle glColor3ui$handle() {
        return glColor3ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MemorySegment glColor3ui$address() {
        return glColor3ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static void glColor3ui(int red, int green, int blue) {
        var mh$ = glColor3ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3ui", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3uiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3uiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3uiv(const GLuint *v)
     * }
     */
    public static FunctionDescriptor glColor3uiv$descriptor() {
        return glColor3uiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3uiv(const GLuint *v)
     * }
     */
    public static MethodHandle glColor3uiv$handle() {
        return glColor3uiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3uiv(const GLuint *v)
     * }
     */
    public static MemorySegment glColor3uiv$address() {
        return glColor3uiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3uiv(const GLuint *v)
     * }
     */
    public static void glColor3uiv(MemorySegment v) {
        var mh$ = glColor3uiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3uiv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3us {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3us");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static FunctionDescriptor glColor3us$descriptor() {
        return glColor3us.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MethodHandle glColor3us$handle() {
        return glColor3us.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MemorySegment glColor3us$address() {
        return glColor3us.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static void glColor3us(short red, short green, short blue) {
        var mh$ = glColor3us.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3us", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor3usv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor3usv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor3usv(const GLushort *v)
     * }
     */
    public static FunctionDescriptor glColor3usv$descriptor() {
        return glColor3usv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor3usv(const GLushort *v)
     * }
     */
    public static MethodHandle glColor3usv$handle() {
        return glColor3usv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor3usv(const GLushort *v)
     * }
     */
    public static MemorySegment glColor3usv$address() {
        return glColor3usv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor3usv(const GLushort *v)
     * }
     */
    public static void glColor3usv(MemorySegment v) {
        var mh$ = glColor3usv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor3usv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4b {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4b");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
     * }
     */
    public static FunctionDescriptor glColor4b$descriptor() {
        return glColor4b.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
     * }
     */
    public static MethodHandle glColor4b$handle() {
        return glColor4b.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
     * }
     */
    public static MemorySegment glColor4b$address() {
        return glColor4b.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
     * }
     */
    public static void glColor4b(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColor4b.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4b", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4bv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4bv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4bv(const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glColor4bv$descriptor() {
        return glColor4bv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4bv(const GLbyte *v)
     * }
     */
    public static MethodHandle glColor4bv$handle() {
        return glColor4bv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4bv(const GLbyte *v)
     * }
     */
    public static MemorySegment glColor4bv$address() {
        return glColor4bv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4bv(const GLbyte *v)
     * }
     */
    public static void glColor4bv(MemorySegment v) {
        var mh$ = glColor4bv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4bv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
     * }
     */
    public static FunctionDescriptor glColor4d$descriptor() {
        return glColor4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
     * }
     */
    public static MethodHandle glColor4d$handle() {
        return glColor4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
     * }
     */
    public static MemorySegment glColor4d$address() {
        return glColor4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
     * }
     */
    public static void glColor4d(double red, double green, double blue, double alpha) {
        var mh$ = glColor4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4d", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glColor4dv$descriptor() {
        return glColor4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glColor4dv$handle() {
        return glColor4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glColor4dv$address() {
        return glColor4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4dv(const GLdouble *v)
     * }
     */
    public static void glColor4dv(MemorySegment v) {
        var mh$ = glColor4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static FunctionDescriptor glColor4f$descriptor() {
        return glColor4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MethodHandle glColor4f$handle() {
        return glColor4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static MemorySegment glColor4f$address() {
        return glColor4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
     * }
     */
    public static void glColor4f(float red, float green, float blue, float alpha) {
        var mh$ = glColor4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4f", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glColor4fv$descriptor() {
        return glColor4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glColor4fv$handle() {
        return glColor4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glColor4fv$address() {
        return glColor4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4fv(const GLfloat *v)
     * }
     */
    public static void glColor4fv(MemorySegment v) {
        var mh$ = glColor4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
     * }
     */
    public static FunctionDescriptor glColor4i$descriptor() {
        return glColor4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
     * }
     */
    public static MethodHandle glColor4i$handle() {
        return glColor4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
     * }
     */
    public static MemorySegment glColor4i$address() {
        return glColor4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
     * }
     */
    public static void glColor4i(int red, int green, int blue, int alpha) {
        var mh$ = glColor4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4i", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glColor4iv$descriptor() {
        return glColor4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4iv(const GLint *v)
     * }
     */
    public static MethodHandle glColor4iv$handle() {
        return glColor4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4iv(const GLint *v)
     * }
     */
    public static MemorySegment glColor4iv$address() {
        return glColor4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4iv(const GLint *v)
     * }
     */
    public static void glColor4iv(MemorySegment v) {
        var mh$ = glColor4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
     * }
     */
    public static FunctionDescriptor glColor4s$descriptor() {
        return glColor4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
     * }
     */
    public static MethodHandle glColor4s$handle() {
        return glColor4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
     * }
     */
    public static MemorySegment glColor4s$address() {
        return glColor4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
     * }
     */
    public static void glColor4s(short red, short green, short blue, short alpha) {
        var mh$ = glColor4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4s", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glColor4sv$descriptor() {
        return glColor4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4sv(const GLshort *v)
     * }
     */
    public static MethodHandle glColor4sv$handle() {
        return glColor4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4sv(const GLshort *v)
     * }
     */
    public static MemorySegment glColor4sv$address() {
        return glColor4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4sv(const GLshort *v)
     * }
     */
    public static void glColor4sv(MemorySegment v) {
        var mh$ = glColor4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4ub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4ub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
     * }
     */
    public static FunctionDescriptor glColor4ub$descriptor() {
        return glColor4ub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
     * }
     */
    public static MethodHandle glColor4ub$handle() {
        return glColor4ub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
     * }
     */
    public static MemorySegment glColor4ub$address() {
        return glColor4ub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
     * }
     */
    public static void glColor4ub(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColor4ub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4ub", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4ubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4ubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4ubv(const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glColor4ubv$descriptor() {
        return glColor4ubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4ubv(const GLubyte *v)
     * }
     */
    public static MethodHandle glColor4ubv$handle() {
        return glColor4ubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4ubv(const GLubyte *v)
     * }
     */
    public static MemorySegment glColor4ubv$address() {
        return glColor4ubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4ubv(const GLubyte *v)
     * }
     */
    public static void glColor4ubv(MemorySegment v) {
        var mh$ = glColor4ubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4ubv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
     * }
     */
    public static FunctionDescriptor glColor4ui$descriptor() {
        return glColor4ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
     * }
     */
    public static MethodHandle glColor4ui$handle() {
        return glColor4ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
     * }
     */
    public static MemorySegment glColor4ui$address() {
        return glColor4ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
     * }
     */
    public static void glColor4ui(int red, int green, int blue, int alpha) {
        var mh$ = glColor4ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4ui", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4uiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4uiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4uiv(const GLuint *v)
     * }
     */
    public static FunctionDescriptor glColor4uiv$descriptor() {
        return glColor4uiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4uiv(const GLuint *v)
     * }
     */
    public static MethodHandle glColor4uiv$handle() {
        return glColor4uiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4uiv(const GLuint *v)
     * }
     */
    public static MemorySegment glColor4uiv$address() {
        return glColor4uiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4uiv(const GLuint *v)
     * }
     */
    public static void glColor4uiv(MemorySegment v) {
        var mh$ = glColor4uiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4uiv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4us {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4us");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
     * }
     */
    public static FunctionDescriptor glColor4us$descriptor() {
        return glColor4us.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
     * }
     */
    public static MethodHandle glColor4us$handle() {
        return glColor4us.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
     * }
     */
    public static MemorySegment glColor4us$address() {
        return glColor4us.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
     * }
     */
    public static void glColor4us(short red, short green, short blue, short alpha) {
        var mh$ = glColor4us.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4us", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColor4usv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColor4usv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColor4usv(const GLushort *v)
     * }
     */
    public static FunctionDescriptor glColor4usv$descriptor() {
        return glColor4usv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColor4usv(const GLushort *v)
     * }
     */
    public static MethodHandle glColor4usv$handle() {
        return glColor4usv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColor4usv(const GLushort *v)
     * }
     */
    public static MemorySegment glColor4usv$address() {
        return glColor4usv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColor4usv(const GLushort *v)
     * }
     */
    public static void glColor4usv(MemorySegment v) {
        var mh$ = glColor4usv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColor4usv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static FunctionDescriptor glColorMask$descriptor() {
        return glColorMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static MethodHandle glColorMask$handle() {
        return glColorMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static MemorySegment glColorMask$address() {
        return glColorMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
     * }
     */
    public static void glColorMask(byte red, byte green, byte blue, byte alpha) {
        var mh$ = glColorMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorMask", red, green, blue, alpha);
            }
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorMaterial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorMaterial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorMaterial(GLenum face, GLenum mode)
     * }
     */
    public static FunctionDescriptor glColorMaterial$descriptor() {
        return glColorMaterial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorMaterial(GLenum face, GLenum mode)
     * }
     */
    public static MethodHandle glColorMaterial$handle() {
        return glColorMaterial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorMaterial(GLenum face, GLenum mode)
     * }
     */
    public static MemorySegment glColorMaterial$address() {
        return glColorMaterial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorMaterial(GLenum face, GLenum mode)
     * }
     */
    public static void glColorMaterial(int face, int mode) {
        var mh$ = glColorMaterial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorMaterial", face, mode);
            }
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glColorPointer$descriptor() {
        return glColorPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glColorPointer$handle() {
        return glColorPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glColorPointer$address() {
        return glColorPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glColorPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glColorPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorPointer", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorSubTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorSubTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glColorSubTable$descriptor() {
        return glColorSubTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
     * }
     */
    public static MethodHandle glColorSubTable$handle() {
        return glColorSubTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
     * }
     */
    public static MemorySegment glColorSubTable$address() {
        return glColorSubTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
     * }
     */
    public static void glColorSubTable(int target, int start, int count, int format, int type, MemorySegment data) {
        var mh$ = glColorSubTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorSubTable", target, start, count, format, type, data);
            }
            mh$.invokeExact(target, start, count, format, type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
     * }
     */
    public static FunctionDescriptor glColorTable$descriptor() {
        return glColorTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
     * }
     */
    public static MethodHandle glColorTable$handle() {
        return glColorTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
     * }
     */
    public static MemorySegment glColorTable$address() {
        return glColorTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
     * }
     */
    public static void glColorTable(int target, int internalformat, int width, int format, int type, MemorySegment table) {
        var mh$ = glColorTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorTable", target, internalformat, width, format, type, table);
            }
            mh$.invokeExact(target, internalformat, width, format, type, table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorTableParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorTableParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glColorTableParameterfv$descriptor() {
        return glColorTableParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glColorTableParameterfv$handle() {
        return glColorTableParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glColorTableParameterfv$address() {
        return glColorTableParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glColorTableParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glColorTableParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorTableParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glColorTableParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glColorTableParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glColorTableParameteriv$descriptor() {
        return glColorTableParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glColorTableParameteriv$handle() {
        return glColorTableParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glColorTableParameteriv$address() {
        return glColorTableParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static void glColorTableParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glColorTableParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glColorTableParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionFilter1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionFilter1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static FunctionDescriptor glConvolutionFilter1D$descriptor() {
        return glConvolutionFilter1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static MethodHandle glConvolutionFilter1D$handle() {
        return glConvolutionFilter1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static MemorySegment glConvolutionFilter1D$address() {
        return glConvolutionFilter1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, MemorySegment image) {
        var mh$ = glConvolutionFilter1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionFilter1D", target, internalformat, width, format, type, image);
            }
            mh$.invokeExact(target, internalformat, width, format, type, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionFilter2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionFilter2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static FunctionDescriptor glConvolutionFilter2D$descriptor() {
        return glConvolutionFilter2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static MethodHandle glConvolutionFilter2D$handle() {
        return glConvolutionFilter2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static MemorySegment glConvolutionFilter2D$address() {
        return glConvolutionFilter2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
     * }
     */
    public static void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, MemorySegment image) {
        var mh$ = glConvolutionFilter2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionFilter2D", target, internalformat, width, height, format, type, image);
            }
            mh$.invokeExact(target, internalformat, width, height, format, type, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionParameterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionParameterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
     * }
     */
    public static FunctionDescriptor glConvolutionParameterf$descriptor() {
        return glConvolutionParameterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
     * }
     */
    public static MethodHandle glConvolutionParameterf$handle() {
        return glConvolutionParameterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
     * }
     */
    public static MemorySegment glConvolutionParameterf$address() {
        return glConvolutionParameterf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
     * }
     */
    public static void glConvolutionParameterf(int target, int pname, float params) {
        var mh$ = glConvolutionParameterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionParameterf", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glConvolutionParameterfv$descriptor() {
        return glConvolutionParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glConvolutionParameterfv$handle() {
        return glConvolutionParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glConvolutionParameterfv$address() {
        return glConvolutionParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glConvolutionParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glConvolutionParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionParameteri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionParameteri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
     * }
     */
    public static FunctionDescriptor glConvolutionParameteri$descriptor() {
        return glConvolutionParameteri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
     * }
     */
    public static MethodHandle glConvolutionParameteri$handle() {
        return glConvolutionParameteri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
     * }
     */
    public static MemorySegment glConvolutionParameteri$address() {
        return glConvolutionParameteri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
     * }
     */
    public static void glConvolutionParameteri(int target, int pname, int params) {
        var mh$ = glConvolutionParameteri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionParameteri", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glConvolutionParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glConvolutionParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glConvolutionParameteriv$descriptor() {
        return glConvolutionParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glConvolutionParameteriv$handle() {
        return glConvolutionParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glConvolutionParameteriv$address() {
        return glConvolutionParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static void glConvolutionParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glConvolutionParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glConvolutionParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyColorSubTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyColorSubTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
     * }
     */
    public static FunctionDescriptor glCopyColorSubTable$descriptor() {
        return glCopyColorSubTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MethodHandle glCopyColorSubTable$handle() {
        return glCopyColorSubTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MemorySegment glCopyColorSubTable$address() {
        return glCopyColorSubTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
     * }
     */
    public static void glCopyColorSubTable(int target, int start, int x, int y, int width) {
        var mh$ = glCopyColorSubTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyColorSubTable", target, start, x, y, width);
            }
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyColorTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyColorTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static FunctionDescriptor glCopyColorTable$descriptor() {
        return glCopyColorTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MethodHandle glCopyColorTable$handle() {
        return glCopyColorTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MemorySegment glCopyColorTable$address() {
        return glCopyColorTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static void glCopyColorTable(int target, int internalformat, int x, int y, int width) {
        var mh$ = glCopyColorTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyColorTable", target, internalformat, x, y, width);
            }
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyConvolutionFilter1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyConvolutionFilter1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static FunctionDescriptor glCopyConvolutionFilter1D$descriptor() {
        return glCopyConvolutionFilter1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MethodHandle glCopyConvolutionFilter1D$handle() {
        return glCopyConvolutionFilter1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MemorySegment glCopyConvolutionFilter1D$address() {
        return glCopyConvolutionFilter1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
     * }
     */
    public static void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width) {
        var mh$ = glCopyConvolutionFilter1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyConvolutionFilter1D", target, internalformat, x, y, width);
            }
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyConvolutionFilter2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyConvolutionFilter2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glCopyConvolutionFilter2D$descriptor() {
        return glCopyConvolutionFilter2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glCopyConvolutionFilter2D$handle() {
        return glCopyConvolutionFilter2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glCopyConvolutionFilter2D$address() {
        return glCopyConvolutionFilter2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height) {
        var mh$ = glCopyConvolutionFilter2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyConvolutionFilter2D", target, internalformat, x, y, width, height);
            }
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyPixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyPixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
     * }
     */
    public static FunctionDescriptor glCopyPixels$descriptor() {
        return glCopyPixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
     * }
     */
    public static MethodHandle glCopyPixels$handle() {
        return glCopyPixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
     * }
     */
    public static MemorySegment glCopyPixels$address() {
        return glCopyPixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
     * }
     */
    public static void glCopyPixels(int x, int y, int width, int height, int type) {
        var mh$ = glCopyPixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyPixels", x, y, width, height, type);
            }
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyTexImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyTexImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
     * }
     */
    public static FunctionDescriptor glCopyTexImage1D$descriptor() {
        return glCopyTexImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
     * }
     */
    public static MethodHandle glCopyTexImage1D$handle() {
        return glCopyTexImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
     * }
     */
    public static MemorySegment glCopyTexImage1D$address() {
        return glCopyTexImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
     * }
     */
    public static void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border) {
        var mh$ = glCopyTexImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyTexImage1D", target, level, internalformat, x, y, width, border);
            }
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyTexImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyTexImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
     * }
     */
    public static FunctionDescriptor glCopyTexImage2D$descriptor() {
        return glCopyTexImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
     * }
     */
    public static MethodHandle glCopyTexImage2D$handle() {
        return glCopyTexImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
     * }
     */
    public static MemorySegment glCopyTexImage2D$address() {
        return glCopyTexImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
     * }
     */
    public static void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border) {
        var mh$ = glCopyTexImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyTexImage2D", target, level, internalformat, x, y, width, height, border);
            }
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyTexSubImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyTexSubImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
     * }
     */
    public static FunctionDescriptor glCopyTexSubImage1D$descriptor() {
        return glCopyTexSubImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MethodHandle glCopyTexSubImage1D$handle() {
        return glCopyTexSubImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
     * }
     */
    public static MemorySegment glCopyTexSubImage1D$address() {
        return glCopyTexSubImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
     * }
     */
    public static void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width) {
        var mh$ = glCopyTexSubImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyTexSubImage1D", target, level, xoffset, x, y, width);
            }
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyTexSubImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyTexSubImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glCopyTexSubImage2D$descriptor() {
        return glCopyTexSubImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glCopyTexSubImage2D$handle() {
        return glCopyTexSubImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glCopyTexSubImage2D$address() {
        return glCopyTexSubImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
        var mh$ = glCopyTexSubImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyTexSubImage2D", target, level, xoffset, yoffset, x, y, width, height);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCopyTexSubImage3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCopyTexSubImage3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glCopyTexSubImage3D$descriptor() {
        return glCopyTexSubImage3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glCopyTexSubImage3D$handle() {
        return glCopyTexSubImage3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glCopyTexSubImage3D$address() {
        return glCopyTexSubImage3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
        var mh$ = glCopyTexSubImage3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCopyTexSubImage3D", target, level, xoffset, yoffset, zoffset, x, y, width, height);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCullFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCullFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCullFace(GLenum mode)
     * }
     */
    public static FunctionDescriptor glCullFace$descriptor() {
        return glCullFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCullFace(GLenum mode)
     * }
     */
    public static MethodHandle glCullFace$handle() {
        return glCullFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCullFace(GLenum mode)
     * }
     */
    public static MemorySegment glCullFace$address() {
        return glCullFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCullFace(GLenum mode)
     * }
     */
    public static void glCullFace(int mode) {
        var mh$ = glCullFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCullFace", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static FunctionDescriptor glDeleteLists$descriptor() {
        return glDeleteLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static MethodHandle glDeleteLists$handle() {
        return glDeleteLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static MemorySegment glDeleteLists$address() {
        return glDeleteLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteLists(GLuint list, GLsizei range)
     * }
     */
    public static void glDeleteLists(int list, int range) {
        var mh$ = glDeleteLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteLists", list, range);
            }
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteTextures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteTextures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteTextures(GLsizei n, const GLuint *textures)
     * }
     */
    public static FunctionDescriptor glDeleteTextures$descriptor() {
        return glDeleteTextures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteTextures(GLsizei n, const GLuint *textures)
     * }
     */
    public static MethodHandle glDeleteTextures$handle() {
        return glDeleteTextures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteTextures(GLsizei n, const GLuint *textures)
     * }
     */
    public static MemorySegment glDeleteTextures$address() {
        return glDeleteTextures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteTextures(GLsizei n, const GLuint *textures)
     * }
     */
    public static void glDeleteTextures(int n, MemorySegment textures) {
        var mh$ = glDeleteTextures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteTextures", n, textures);
            }
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDepthFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDepthFunc(GLenum func)
     * }
     */
    public static FunctionDescriptor glDepthFunc$descriptor() {
        return glDepthFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDepthFunc(GLenum func)
     * }
     */
    public static MethodHandle glDepthFunc$handle() {
        return glDepthFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDepthFunc(GLenum func)
     * }
     */
    public static MemorySegment glDepthFunc$address() {
        return glDepthFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDepthFunc(GLenum func)
     * }
     */
    public static void glDepthFunc(int func) {
        var mh$ = glDepthFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDepthMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDepthMask(GLboolean flag)
     * }
     */
    public static FunctionDescriptor glDepthMask$descriptor() {
        return glDepthMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDepthMask(GLboolean flag)
     * }
     */
    public static MethodHandle glDepthMask$handle() {
        return glDepthMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDepthMask(GLboolean flag)
     * }
     */
    public static MemorySegment glDepthMask$address() {
        return glDepthMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDepthMask(GLboolean flag)
     * }
     */
    public static void glDepthMask(byte flag) {
        var mh$ = glDepthMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthMask", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDepthRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDepthRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDepthRange(GLclampd zNear, GLclampd zFar)
     * }
     */
    public static FunctionDescriptor glDepthRange$descriptor() {
        return glDepthRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDepthRange(GLclampd zNear, GLclampd zFar)
     * }
     */
    public static MethodHandle glDepthRange$handle() {
        return glDepthRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDepthRange(GLclampd zNear, GLclampd zFar)
     * }
     */
    public static MemorySegment glDepthRange$address() {
        return glDepthRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDepthRange(GLclampd zNear, GLclampd zFar)
     * }
     */
    public static void glDepthRange(double zNear, double zFar) {
        var mh$ = glDepthRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDepthRange", zNear, zFar);
            }
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisable(GLenum cap)
     * }
     */
    public static FunctionDescriptor glDisable$descriptor() {
        return glDisable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisable(GLenum cap)
     * }
     */
    public static MethodHandle glDisable$handle() {
        return glDisable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisable(GLenum cap)
     * }
     */
    public static MemorySegment glDisable$address() {
        return glDisable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisable(GLenum cap)
     * }
     */
    public static void glDisable(int cap) {
        var mh$ = glDisable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisable", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableClientState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisableClientState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisableClientState(GLenum array)
     * }
     */
    public static FunctionDescriptor glDisableClientState$descriptor() {
        return glDisableClientState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisableClientState(GLenum array)
     * }
     */
    public static MethodHandle glDisableClientState$handle() {
        return glDisableClientState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisableClientState(GLenum array)
     * }
     */
    public static MemorySegment glDisableClientState$address() {
        return glDisableClientState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisableClientState(GLenum array)
     * }
     */
    public static void glDisableClientState(int array) {
        var mh$ = glDisableClientState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableClientState", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawArrays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawArrays");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawArrays(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static FunctionDescriptor glDrawArrays$descriptor() {
        return glDrawArrays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawArrays(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static MethodHandle glDrawArrays$handle() {
        return glDrawArrays.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawArrays(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static MemorySegment glDrawArrays$address() {
        return glDrawArrays.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawArrays(GLenum mode, GLint first, GLsizei count)
     * }
     */
    public static void glDrawArrays(int mode, int first, int count) {
        var mh$ = glDrawArrays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawArrays", mode, first, count);
            }
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawBuffer(GLenum mode)
     * }
     */
    public static FunctionDescriptor glDrawBuffer$descriptor() {
        return glDrawBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawBuffer(GLenum mode)
     * }
     */
    public static MethodHandle glDrawBuffer$handle() {
        return glDrawBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawBuffer(GLenum mode)
     * }
     */
    public static MemorySegment glDrawBuffer$address() {
        return glDrawBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawBuffer(GLenum mode)
     * }
     */
    public static void glDrawBuffer(int mode) {
        var mh$ = glDrawBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawBuffer", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static FunctionDescriptor glDrawElements$descriptor() {
        return glDrawElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MethodHandle glDrawElements$handle() {
        return glDrawElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MemorySegment glDrawElements$address() {
        return glDrawElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static void glDrawElements(int mode, int count, int type, MemorySegment indices) {
        var mh$ = glDrawElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawElements", mode, count, type, indices);
            }
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawPixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawPixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glDrawPixels$descriptor() {
        return glDrawPixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glDrawPixels$handle() {
        return glDrawPixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glDrawPixels$address() {
        return glDrawPixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glDrawPixels(int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glDrawPixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawPixels", width, height, format, type, pixels);
            }
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawRangeElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawRangeElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static FunctionDescriptor glDrawRangeElements$descriptor() {
        return glDrawRangeElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MethodHandle glDrawRangeElements$handle() {
        return glDrawRangeElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static MemorySegment glDrawRangeElements$address() {
        return glDrawRangeElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
     * }
     */
    public static void glDrawRangeElements(int mode, int start, int end, int count, int type, MemorySegment indices) {
        var mh$ = glDrawRangeElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawRangeElements", mode, start, end, count, type, indices);
            }
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEdgeFlag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEdgeFlag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEdgeFlag(GLboolean flag)
     * }
     */
    public static FunctionDescriptor glEdgeFlag$descriptor() {
        return glEdgeFlag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEdgeFlag(GLboolean flag)
     * }
     */
    public static MethodHandle glEdgeFlag$handle() {
        return glEdgeFlag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEdgeFlag(GLboolean flag)
     * }
     */
    public static MemorySegment glEdgeFlag$address() {
        return glEdgeFlag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEdgeFlag(GLboolean flag)
     * }
     */
    public static void glEdgeFlag(byte flag) {
        var mh$ = glEdgeFlag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEdgeFlag", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEdgeFlagPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEdgeFlagPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glEdgeFlagPointer$descriptor() {
        return glEdgeFlagPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glEdgeFlagPointer$handle() {
        return glEdgeFlagPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glEdgeFlagPointer$address() {
        return glEdgeFlagPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glEdgeFlagPointer(int stride, MemorySegment pointer) {
        var mh$ = glEdgeFlagPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEdgeFlagPointer", stride, pointer);
            }
            mh$.invokeExact(stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEdgeFlagv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEdgeFlagv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static FunctionDescriptor glEdgeFlagv$descriptor() {
        return glEdgeFlagv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static MethodHandle glEdgeFlagv$handle() {
        return glEdgeFlagv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static MemorySegment glEdgeFlagv$address() {
        return glEdgeFlagv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEdgeFlagv(const GLboolean *flag)
     * }
     */
    public static void glEdgeFlagv(MemorySegment flag) {
        var mh$ = glEdgeFlagv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEdgeFlagv", flag);
            }
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnable(GLenum cap)
     * }
     */
    public static FunctionDescriptor glEnable$descriptor() {
        return glEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnable(GLenum cap)
     * }
     */
    public static MethodHandle glEnable$handle() {
        return glEnable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnable(GLenum cap)
     * }
     */
    public static MemorySegment glEnable$address() {
        return glEnable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnable(GLenum cap)
     * }
     */
    public static void glEnable(int cap) {
        var mh$ = glEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnable", cap);
            }
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableClientState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnableClientState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnableClientState(GLenum array)
     * }
     */
    public static FunctionDescriptor glEnableClientState$descriptor() {
        return glEnableClientState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnableClientState(GLenum array)
     * }
     */
    public static MethodHandle glEnableClientState$handle() {
        return glEnableClientState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnableClientState(GLenum array)
     * }
     */
    public static MemorySegment glEnableClientState$address() {
        return glEnableClientState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnableClientState(GLenum array)
     * }
     */
    public static void glEnableClientState(int array) {
        var mh$ = glEnableClientState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableClientState", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnd()
     * }
     */
    public static FunctionDescriptor glEnd$descriptor() {
        return glEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnd()
     * }
     */
    public static MethodHandle glEnd$handle() {
        return glEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnd()
     * }
     */
    public static MemorySegment glEnd$address() {
        return glEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnd()
     * }
     */
    public static void glEnd() {
        var mh$ = glEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnd");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEndList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEndList()
     * }
     */
    public static FunctionDescriptor glEndList$descriptor() {
        return glEndList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEndList()
     * }
     */
    public static MethodHandle glEndList$handle() {
        return glEndList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEndList()
     * }
     */
    public static MemorySegment glEndList$address() {
        return glEndList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEndList()
     * }
     */
    public static void glEndList() {
        var mh$ = glEndList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndList");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord1d(GLdouble u)
     * }
     */
    public static FunctionDescriptor glEvalCoord1d$descriptor() {
        return glEvalCoord1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord1d(GLdouble u)
     * }
     */
    public static MethodHandle glEvalCoord1d$handle() {
        return glEvalCoord1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord1d(GLdouble u)
     * }
     */
    public static MemorySegment glEvalCoord1d$address() {
        return glEvalCoord1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord1d(GLdouble u)
     * }
     */
    public static void glEvalCoord1d(double u) {
        var mh$ = glEvalCoord1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord1d", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord1dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord1dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord1dv(const GLdouble *u)
     * }
     */
    public static FunctionDescriptor glEvalCoord1dv$descriptor() {
        return glEvalCoord1dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord1dv(const GLdouble *u)
     * }
     */
    public static MethodHandle glEvalCoord1dv$handle() {
        return glEvalCoord1dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord1dv(const GLdouble *u)
     * }
     */
    public static MemorySegment glEvalCoord1dv$address() {
        return glEvalCoord1dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord1dv(const GLdouble *u)
     * }
     */
    public static void glEvalCoord1dv(MemorySegment u) {
        var mh$ = glEvalCoord1dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord1dv", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord1f(GLfloat u)
     * }
     */
    public static FunctionDescriptor glEvalCoord1f$descriptor() {
        return glEvalCoord1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord1f(GLfloat u)
     * }
     */
    public static MethodHandle glEvalCoord1f$handle() {
        return glEvalCoord1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord1f(GLfloat u)
     * }
     */
    public static MemorySegment glEvalCoord1f$address() {
        return glEvalCoord1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord1f(GLfloat u)
     * }
     */
    public static void glEvalCoord1f(float u) {
        var mh$ = glEvalCoord1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord1f", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord1fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord1fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord1fv(const GLfloat *u)
     * }
     */
    public static FunctionDescriptor glEvalCoord1fv$descriptor() {
        return glEvalCoord1fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord1fv(const GLfloat *u)
     * }
     */
    public static MethodHandle glEvalCoord1fv$handle() {
        return glEvalCoord1fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord1fv(const GLfloat *u)
     * }
     */
    public static MemorySegment glEvalCoord1fv$address() {
        return glEvalCoord1fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord1fv(const GLfloat *u)
     * }
     */
    public static void glEvalCoord1fv(MemorySegment u) {
        var mh$ = glEvalCoord1fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord1fv", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord2d(GLdouble u, GLdouble v)
     * }
     */
    public static FunctionDescriptor glEvalCoord2d$descriptor() {
        return glEvalCoord2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord2d(GLdouble u, GLdouble v)
     * }
     */
    public static MethodHandle glEvalCoord2d$handle() {
        return glEvalCoord2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord2d(GLdouble u, GLdouble v)
     * }
     */
    public static MemorySegment glEvalCoord2d$address() {
        return glEvalCoord2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord2d(GLdouble u, GLdouble v)
     * }
     */
    public static void glEvalCoord2d(double u, double v) {
        var mh$ = glEvalCoord2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord2d", u, v);
            }
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord2dv(const GLdouble *u)
     * }
     */
    public static FunctionDescriptor glEvalCoord2dv$descriptor() {
        return glEvalCoord2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord2dv(const GLdouble *u)
     * }
     */
    public static MethodHandle glEvalCoord2dv$handle() {
        return glEvalCoord2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord2dv(const GLdouble *u)
     * }
     */
    public static MemorySegment glEvalCoord2dv$address() {
        return glEvalCoord2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord2dv(const GLdouble *u)
     * }
     */
    public static void glEvalCoord2dv(MemorySegment u) {
        var mh$ = glEvalCoord2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord2dv", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord2f(GLfloat u, GLfloat v)
     * }
     */
    public static FunctionDescriptor glEvalCoord2f$descriptor() {
        return glEvalCoord2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord2f(GLfloat u, GLfloat v)
     * }
     */
    public static MethodHandle glEvalCoord2f$handle() {
        return glEvalCoord2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord2f(GLfloat u, GLfloat v)
     * }
     */
    public static MemorySegment glEvalCoord2f$address() {
        return glEvalCoord2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord2f(GLfloat u, GLfloat v)
     * }
     */
    public static void glEvalCoord2f(float u, float v) {
        var mh$ = glEvalCoord2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord2f", u, v);
            }
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalCoord2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalCoord2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalCoord2fv(const GLfloat *u)
     * }
     */
    public static FunctionDescriptor glEvalCoord2fv$descriptor() {
        return glEvalCoord2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalCoord2fv(const GLfloat *u)
     * }
     */
    public static MethodHandle glEvalCoord2fv$handle() {
        return glEvalCoord2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalCoord2fv(const GLfloat *u)
     * }
     */
    public static MemorySegment glEvalCoord2fv$address() {
        return glEvalCoord2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalCoord2fv(const GLfloat *u)
     * }
     */
    public static void glEvalCoord2fv(MemorySegment u) {
        var mh$ = glEvalCoord2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalCoord2fv", u);
            }
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalMesh1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalMesh1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
     * }
     */
    public static FunctionDescriptor glEvalMesh1$descriptor() {
        return glEvalMesh1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
     * }
     */
    public static MethodHandle glEvalMesh1$handle() {
        return glEvalMesh1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
     * }
     */
    public static MemorySegment glEvalMesh1$address() {
        return glEvalMesh1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
     * }
     */
    public static void glEvalMesh1(int mode, int i1, int i2) {
        var mh$ = glEvalMesh1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalMesh1", mode, i1, i2);
            }
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalMesh2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalMesh2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
     * }
     */
    public static FunctionDescriptor glEvalMesh2$descriptor() {
        return glEvalMesh2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
     * }
     */
    public static MethodHandle glEvalMesh2$handle() {
        return glEvalMesh2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
     * }
     */
    public static MemorySegment glEvalMesh2$address() {
        return glEvalMesh2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
     * }
     */
    public static void glEvalMesh2(int mode, int i1, int i2, int j1, int j2) {
        var mh$ = glEvalMesh2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalMesh2", mode, i1, i2, j1, j2);
            }
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalPoint1(GLint i)
     * }
     */
    public static FunctionDescriptor glEvalPoint1$descriptor() {
        return glEvalPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalPoint1(GLint i)
     * }
     */
    public static MethodHandle glEvalPoint1$handle() {
        return glEvalPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalPoint1(GLint i)
     * }
     */
    public static MemorySegment glEvalPoint1$address() {
        return glEvalPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalPoint1(GLint i)
     * }
     */
    public static void glEvalPoint1(int i) {
        var mh$ = glEvalPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalPoint1", i);
            }
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEvalPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEvalPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEvalPoint2(GLint i, GLint j)
     * }
     */
    public static FunctionDescriptor glEvalPoint2$descriptor() {
        return glEvalPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEvalPoint2(GLint i, GLint j)
     * }
     */
    public static MethodHandle glEvalPoint2$handle() {
        return glEvalPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEvalPoint2(GLint i, GLint j)
     * }
     */
    public static MemorySegment glEvalPoint2$address() {
        return glEvalPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEvalPoint2(GLint i, GLint j)
     * }
     */
    public static void glEvalPoint2(int i, int j) {
        var mh$ = glEvalPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEvalPoint2", i, j);
            }
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

