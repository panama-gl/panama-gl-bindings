// Generated by jextract

package opengl.macos.arm;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class glut_h extends glut_h_1 {

    glut_h() {
        // Should not be called directly
    }

    private static class glFeedbackBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFeedbackBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
     * }
     */
    public static FunctionDescriptor glFeedbackBuffer$descriptor() {
        return glFeedbackBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
     * }
     */
    public static MethodHandle glFeedbackBuffer$handle() {
        return glFeedbackBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
     * }
     */
    public static MemorySegment glFeedbackBuffer$address() {
        return glFeedbackBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
     * }
     */
    public static void glFeedbackBuffer(int size, int type, MemorySegment buffer) {
        var mh$ = glFeedbackBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFeedbackBuffer", size, type, buffer);
            }
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFinish()
     * }
     */
    public static FunctionDescriptor glFinish$descriptor() {
        return glFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFinish()
     * }
     */
    public static MethodHandle glFinish$handle() {
        return glFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFinish()
     * }
     */
    public static MemorySegment glFinish$address() {
        return glFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFinish()
     * }
     */
    public static void glFinish() {
        var mh$ = glFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFinish");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFlush()
     * }
     */
    public static FunctionDescriptor glFlush$descriptor() {
        return glFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFlush()
     * }
     */
    public static MethodHandle glFlush$handle() {
        return glFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFlush()
     * }
     */
    public static MemorySegment glFlush$address() {
        return glFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFlush()
     * }
     */
    public static void glFlush() {
        var mh$ = glFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFlush");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogf(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glFogf$descriptor() {
        return glFogf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogf(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glFogf$handle() {
        return glFogf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogf(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glFogf$address() {
        return glFogf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogf(GLenum pname, GLfloat param)
     * }
     */
    public static void glFogf(int pname, float param) {
        var mh$ = glFogf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogf", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glFogfv$descriptor() {
        return glFogfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glFogfv$handle() {
        return glFogfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glFogfv$address() {
        return glFogfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static void glFogfv(int pname, MemorySegment params) {
        var mh$ = glFogfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogfv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogi(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glFogi$descriptor() {
        return glFogi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogi(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glFogi$handle() {
        return glFogi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogi(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glFogi$address() {
        return glFogi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogi(GLenum pname, GLint param)
     * }
     */
    public static void glFogi(int pname, int param) {
        var mh$ = glFogi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogi", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogiv(GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glFogiv$descriptor() {
        return glFogiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogiv(GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glFogiv$handle() {
        return glFogiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogiv(GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glFogiv$address() {
        return glFogiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogiv(GLenum pname, const GLint *params)
     * }
     */
    public static void glFogiv(int pname, MemorySegment params) {
        var mh$ = glFogiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogiv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFrontFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFrontFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFrontFace(GLenum mode)
     * }
     */
    public static FunctionDescriptor glFrontFace$descriptor() {
        return glFrontFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFrontFace(GLenum mode)
     * }
     */
    public static MethodHandle glFrontFace$handle() {
        return glFrontFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFrontFace(GLenum mode)
     * }
     */
    public static MemorySegment glFrontFace$address() {
        return glFrontFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFrontFace(GLenum mode)
     * }
     */
    public static void glFrontFace(int mode) {
        var mh$ = glFrontFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFrontFace", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFrustum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFrustum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static FunctionDescriptor glFrustum$descriptor() {
        return glFrustum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MethodHandle glFrustum$handle() {
        return glFrustum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MemorySegment glFrustum$address() {
        return glFrustum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar) {
        var mh$ = glFrustum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFrustum", left, right, bottom, top, zNear, zFar);
            }
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenLists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenLists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint glGenLists(GLsizei range)
     * }
     */
    public static FunctionDescriptor glGenLists$descriptor() {
        return glGenLists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint glGenLists(GLsizei range)
     * }
     */
    public static MethodHandle glGenLists$handle() {
        return glGenLists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint glGenLists(GLsizei range)
     * }
     */
    public static MemorySegment glGenLists$address() {
        return glGenLists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint glGenLists(GLsizei range)
     * }
     */
    public static int glGenLists(int range) {
        var mh$ = glGenLists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenLists", range);
            }
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenTextures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenTextures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenTextures(GLsizei n, GLuint *textures)
     * }
     */
    public static FunctionDescriptor glGenTextures$descriptor() {
        return glGenTextures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenTextures(GLsizei n, GLuint *textures)
     * }
     */
    public static MethodHandle glGenTextures$handle() {
        return glGenTextures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenTextures(GLsizei n, GLuint *textures)
     * }
     */
    public static MemorySegment glGenTextures$address() {
        return glGenTextures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenTextures(GLsizei n, GLuint *textures)
     * }
     */
    public static void glGenTextures(int n, MemorySegment textures) {
        var mh$ = glGenTextures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenTextures", n, textures);
            }
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBooleanv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBooleanv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static FunctionDescriptor glGetBooleanv$descriptor() {
        return glGetBooleanv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static MethodHandle glGetBooleanv$handle() {
        return glGetBooleanv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static MemorySegment glGetBooleanv$address() {
        return glGetBooleanv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBooleanv(GLenum pname, GLboolean *params)
     * }
     */
    public static void glGetBooleanv(int pname, MemorySegment params) {
        var mh$ = glGetBooleanv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBooleanv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetClipPlane {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetClipPlane");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static FunctionDescriptor glGetClipPlane$descriptor() {
        return glGetClipPlane.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static MethodHandle glGetClipPlane$handle() {
        return glGetClipPlane.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static MemorySegment glGetClipPlane$address() {
        return glGetClipPlane.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetClipPlane(GLenum plane, GLdouble *equation)
     * }
     */
    public static void glGetClipPlane(int plane, MemorySegment equation) {
        var mh$ = glGetClipPlane.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetClipPlane", plane, equation);
            }
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetColorTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetColorTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
     * }
     */
    public static FunctionDescriptor glGetColorTable$descriptor() {
        return glGetColorTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
     * }
     */
    public static MethodHandle glGetColorTable$handle() {
        return glGetColorTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
     * }
     */
    public static MemorySegment glGetColorTable$address() {
        return glGetColorTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
     * }
     */
    public static void glGetColorTable(int target, int format, int type, MemorySegment table) {
        var mh$ = glGetColorTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetColorTable", target, format, type, table);
            }
            mh$.invokeExact(target, format, type, table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetColorTableParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetColorTableParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetColorTableParameterfv$descriptor() {
        return glGetColorTableParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetColorTableParameterfv$handle() {
        return glGetColorTableParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetColorTableParameterfv$address() {
        return glGetColorTableParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetColorTableParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetColorTableParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetColorTableParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetColorTableParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetColorTableParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetColorTableParameteriv$descriptor() {
        return glGetColorTableParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetColorTableParameteriv$handle() {
        return glGetColorTableParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetColorTableParameteriv$address() {
        return glGetColorTableParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetColorTableParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetColorTableParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetColorTableParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetConvolutionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetConvolutionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
     * }
     */
    public static FunctionDescriptor glGetConvolutionFilter$descriptor() {
        return glGetConvolutionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
     * }
     */
    public static MethodHandle glGetConvolutionFilter$handle() {
        return glGetConvolutionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
     * }
     */
    public static MemorySegment glGetConvolutionFilter$address() {
        return glGetConvolutionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
     * }
     */
    public static void glGetConvolutionFilter(int target, int format, int type, MemorySegment image) {
        var mh$ = glGetConvolutionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetConvolutionFilter", target, format, type, image);
            }
            mh$.invokeExact(target, format, type, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetConvolutionParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetConvolutionParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetConvolutionParameterfv$descriptor() {
        return glGetConvolutionParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetConvolutionParameterfv$handle() {
        return glGetConvolutionParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetConvolutionParameterfv$address() {
        return glGetConvolutionParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetConvolutionParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetConvolutionParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetConvolutionParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetConvolutionParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetConvolutionParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetConvolutionParameteriv$descriptor() {
        return glGetConvolutionParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetConvolutionParameteriv$handle() {
        return glGetConvolutionParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetConvolutionParameteriv$address() {
        return glGetConvolutionParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetConvolutionParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetConvolutionParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetConvolutionParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetDoublev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetDoublev");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetDoublev$descriptor() {
        return glGetDoublev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static MethodHandle glGetDoublev$handle() {
        return glGetDoublev.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static MemorySegment glGetDoublev$address() {
        return glGetDoublev.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetDoublev(GLenum pname, GLdouble *params)
     * }
     */
    public static void glGetDoublev(int pname, MemorySegment params) {
        var mh$ = glGetDoublev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetDoublev", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLenum glGetError()
     * }
     */
    public static FunctionDescriptor glGetError$descriptor() {
        return glGetError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLenum glGetError()
     * }
     */
    public static MethodHandle glGetError$handle() {
        return glGetError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLenum glGetError()
     * }
     */
    public static MemorySegment glGetError$address() {
        return glGetError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLenum glGetError()
     * }
     */
    public static int glGetError() {
        var mh$ = glGetError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetFloatv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetFloatv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetFloatv$descriptor() {
        return glGetFloatv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetFloatv$handle() {
        return glGetFloatv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetFloatv$address() {
        return glGetFloatv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetFloatv(GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetFloatv(int pname, MemorySegment params) {
        var mh$ = glGetFloatv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetFloatv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static FunctionDescriptor glGetHistogram$descriptor() {
        return glGetHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static MethodHandle glGetHistogram$handle() {
        return glGetHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static MemorySegment glGetHistogram$address() {
        return glGetHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static void glGetHistogram(int target, byte reset, int format, int type, MemorySegment values) {
        var mh$ = glGetHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetHistogram", target, reset, format, type, values);
            }
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetHistogramParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetHistogramParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetHistogramParameterfv$descriptor() {
        return glGetHistogramParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetHistogramParameterfv$handle() {
        return glGetHistogramParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetHistogramParameterfv$address() {
        return glGetHistogramParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetHistogramParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetHistogramParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetHistogramParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetHistogramParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetHistogramParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetHistogramParameteriv$descriptor() {
        return glGetHistogramParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetHistogramParameteriv$handle() {
        return glGetHistogramParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetHistogramParameteriv$address() {
        return glGetHistogramParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetHistogramParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetHistogramParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetHistogramParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetIntegerv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetIntegerv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetIntegerv$descriptor() {
        return glGetIntegerv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetIntegerv$handle() {
        return glGetIntegerv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetIntegerv$address() {
        return glGetIntegerv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetIntegerv(GLenum pname, GLint *params)
     * }
     */
    public static void glGetIntegerv(int pname, MemorySegment params) {
        var mh$ = glGetIntegerv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetIntegerv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetLightfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetLightfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetLightfv$descriptor() {
        return glGetLightfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetLightfv$handle() {
        return glGetLightfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetLightfv$address() {
        return glGetLightfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetLightfv(int light, int pname, MemorySegment params) {
        var mh$ = glGetLightfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetLightfv", light, pname, params);
            }
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetLightiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetLightiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetLightiv(GLenum light, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetLightiv$descriptor() {
        return glGetLightiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetLightiv(GLenum light, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetLightiv$handle() {
        return glGetLightiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetLightiv(GLenum light, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetLightiv$address() {
        return glGetLightiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetLightiv(GLenum light, GLenum pname, GLint *params)
     * }
     */
    public static void glGetLightiv(int light, int pname, MemorySegment params) {
        var mh$ = glGetLightiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetLightiv", light, pname, params);
            }
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMapdv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMapdv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMapdv(GLenum target, GLenum query, GLdouble *v)
     * }
     */
    public static FunctionDescriptor glGetMapdv$descriptor() {
        return glGetMapdv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMapdv(GLenum target, GLenum query, GLdouble *v)
     * }
     */
    public static MethodHandle glGetMapdv$handle() {
        return glGetMapdv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMapdv(GLenum target, GLenum query, GLdouble *v)
     * }
     */
    public static MemorySegment glGetMapdv$address() {
        return glGetMapdv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMapdv(GLenum target, GLenum query, GLdouble *v)
     * }
     */
    public static void glGetMapdv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapdv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMapdv", target, query, v);
            }
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMapfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMapfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMapfv(GLenum target, GLenum query, GLfloat *v)
     * }
     */
    public static FunctionDescriptor glGetMapfv$descriptor() {
        return glGetMapfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMapfv(GLenum target, GLenum query, GLfloat *v)
     * }
     */
    public static MethodHandle glGetMapfv$handle() {
        return glGetMapfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMapfv(GLenum target, GLenum query, GLfloat *v)
     * }
     */
    public static MemorySegment glGetMapfv$address() {
        return glGetMapfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMapfv(GLenum target, GLenum query, GLfloat *v)
     * }
     */
    public static void glGetMapfv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMapfv", target, query, v);
            }
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMapiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMapiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMapiv(GLenum target, GLenum query, GLint *v)
     * }
     */
    public static FunctionDescriptor glGetMapiv$descriptor() {
        return glGetMapiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMapiv(GLenum target, GLenum query, GLint *v)
     * }
     */
    public static MethodHandle glGetMapiv$handle() {
        return glGetMapiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMapiv(GLenum target, GLenum query, GLint *v)
     * }
     */
    public static MemorySegment glGetMapiv$address() {
        return glGetMapiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMapiv(GLenum target, GLenum query, GLint *v)
     * }
     */
    public static void glGetMapiv(int target, int query, MemorySegment v) {
        var mh$ = glGetMapiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMapiv", target, query, v);
            }
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMaterialfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMaterialfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetMaterialfv$descriptor() {
        return glGetMaterialfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetMaterialfv$handle() {
        return glGetMaterialfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetMaterialfv$address() {
        return glGetMaterialfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetMaterialfv(int face, int pname, MemorySegment params) {
        var mh$ = glGetMaterialfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMaterialfv", face, pname, params);
            }
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMaterialiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMaterialiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetMaterialiv$descriptor() {
        return glGetMaterialiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetMaterialiv$handle() {
        return glGetMaterialiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetMaterialiv$address() {
        return glGetMaterialiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
     * }
     */
    public static void glGetMaterialiv(int face, int pname, MemorySegment params) {
        var mh$ = glGetMaterialiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMaterialiv", face, pname, params);
            }
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMinmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMinmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static FunctionDescriptor glGetMinmax$descriptor() {
        return glGetMinmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static MethodHandle glGetMinmax$handle() {
        return glGetMinmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static MemorySegment glGetMinmax$address() {
        return glGetMinmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
     * }
     */
    public static void glGetMinmax(int target, byte reset, int format, int type, MemorySegment values) {
        var mh$ = glGetMinmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMinmax", target, reset, format, type, values);
            }
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMinmaxParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMinmaxParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetMinmaxParameterfv$descriptor() {
        return glGetMinmaxParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetMinmaxParameterfv$handle() {
        return glGetMinmaxParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetMinmaxParameterfv$address() {
        return glGetMinmaxParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetMinmaxParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetMinmaxParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMinmaxParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetMinmaxParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetMinmaxParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetMinmaxParameteriv$descriptor() {
        return glGetMinmaxParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetMinmaxParameteriv$handle() {
        return glGetMinmaxParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetMinmaxParameteriv$address() {
        return glGetMinmaxParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetMinmaxParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetMinmaxParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetMinmaxParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPixelMapfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetPixelMapfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetPixelMapfv(GLenum map, GLfloat *values)
     * }
     */
    public static FunctionDescriptor glGetPixelMapfv$descriptor() {
        return glGetPixelMapfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetPixelMapfv(GLenum map, GLfloat *values)
     * }
     */
    public static MethodHandle glGetPixelMapfv$handle() {
        return glGetPixelMapfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetPixelMapfv(GLenum map, GLfloat *values)
     * }
     */
    public static MemorySegment glGetPixelMapfv$address() {
        return glGetPixelMapfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetPixelMapfv(GLenum map, GLfloat *values)
     * }
     */
    public static void glGetPixelMapfv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPixelMapfv", map, values);
            }
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPixelMapuiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetPixelMapuiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetPixelMapuiv(GLenum map, GLuint *values)
     * }
     */
    public static FunctionDescriptor glGetPixelMapuiv$descriptor() {
        return glGetPixelMapuiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetPixelMapuiv(GLenum map, GLuint *values)
     * }
     */
    public static MethodHandle glGetPixelMapuiv$handle() {
        return glGetPixelMapuiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetPixelMapuiv(GLenum map, GLuint *values)
     * }
     */
    public static MemorySegment glGetPixelMapuiv$address() {
        return glGetPixelMapuiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetPixelMapuiv(GLenum map, GLuint *values)
     * }
     */
    public static void glGetPixelMapuiv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapuiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPixelMapuiv", map, values);
            }
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPixelMapusv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetPixelMapusv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetPixelMapusv(GLenum map, GLushort *values)
     * }
     */
    public static FunctionDescriptor glGetPixelMapusv$descriptor() {
        return glGetPixelMapusv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetPixelMapusv(GLenum map, GLushort *values)
     * }
     */
    public static MethodHandle glGetPixelMapusv$handle() {
        return glGetPixelMapusv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetPixelMapusv(GLenum map, GLushort *values)
     * }
     */
    public static MemorySegment glGetPixelMapusv$address() {
        return glGetPixelMapusv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetPixelMapusv(GLenum map, GLushort *values)
     * }
     */
    public static void glGetPixelMapusv(int map, MemorySegment values) {
        var mh$ = glGetPixelMapusv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPixelMapusv", map, values);
            }
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPointerv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetPointerv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetPointerv(GLenum pname, GLvoid **params)
     * }
     */
    public static FunctionDescriptor glGetPointerv$descriptor() {
        return glGetPointerv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetPointerv(GLenum pname, GLvoid **params)
     * }
     */
    public static MethodHandle glGetPointerv$handle() {
        return glGetPointerv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetPointerv(GLenum pname, GLvoid **params)
     * }
     */
    public static MemorySegment glGetPointerv$address() {
        return glGetPointerv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetPointerv(GLenum pname, GLvoid **params)
     * }
     */
    public static void glGetPointerv(int pname, MemorySegment params) {
        var mh$ = glGetPointerv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPointerv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetPolygonStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetPolygonStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static FunctionDescriptor glGetPolygonStipple$descriptor() {
        return glGetPolygonStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static MethodHandle glGetPolygonStipple$handle() {
        return glGetPolygonStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static MemorySegment glGetPolygonStipple$address() {
        return glGetPolygonStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetPolygonStipple(GLubyte *mask)
     * }
     */
    public static void glGetPolygonStipple(MemorySegment mask) {
        var mh$ = glGetPolygonStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetPolygonStipple", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetSeparableFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetSeparableFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
     * }
     */
    public static FunctionDescriptor glGetSeparableFilter$descriptor() {
        return glGetSeparableFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
     * }
     */
    public static MethodHandle glGetSeparableFilter$handle() {
        return glGetSeparableFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
     * }
     */
    public static MemorySegment glGetSeparableFilter$address() {
        return glGetSeparableFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
     * }
     */
    public static void glGetSeparableFilter(int target, int format, int type, MemorySegment row, MemorySegment column, MemorySegment span) {
        var mh$ = glGetSeparableFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetSeparableFilter", target, format, type, row, column, span);
            }
            mh$.invokeExact(target, format, type, row, column, span);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GLubyte *glGetString(GLenum name)
     * }
     */
    public static FunctionDescriptor glGetString$descriptor() {
        return glGetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MethodHandle glGetString$handle() {
        return glGetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MemorySegment glGetString$address() {
        return glGetString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const GLubyte *glGetString(GLenum name)
     * }
     */
    public static MemorySegment glGetString(int name) {
        var mh$ = glGetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetString", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexEnvfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexEnvfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetTexEnvfv$descriptor() {
        return glGetTexEnvfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetTexEnvfv$handle() {
        return glGetTexEnvfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetTexEnvfv$address() {
        return glGetTexEnvfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetTexEnvfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexEnvfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexEnvfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexEnviv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexEnviv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetTexEnviv$descriptor() {
        return glGetTexEnviv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetTexEnviv$handle() {
        return glGetTexEnviv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetTexEnviv$address() {
        return glGetTexEnviv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetTexEnviv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexEnviv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexEnviv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexGendv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexGendv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetTexGendv$descriptor() {
        return glGetTexGendv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
     * }
     */
    public static MethodHandle glGetTexGendv$handle() {
        return glGetTexGendv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
     * }
     */
    public static MemorySegment glGetTexGendv$address() {
        return glGetTexGendv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
     * }
     */
    public static void glGetTexGendv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGendv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexGendv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexGenfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexGenfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetTexGenfv$descriptor() {
        return glGetTexGenfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetTexGenfv$handle() {
        return glGetTexGenfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetTexGenfv$address() {
        return glGetTexGenfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetTexGenfv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGenfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexGenfv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexGeniv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexGeniv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetTexGeniv$descriptor() {
        return glGetTexGeniv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetTexGeniv$handle() {
        return glGetTexGeniv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetTexGeniv$address() {
        return glGetTexGeniv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
     * }
     */
    public static void glGetTexGeniv(int coord, int pname, MemorySegment params) {
        var mh$ = glGetTexGeniv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexGeniv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glGetTexImage$descriptor() {
        return glGetTexImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static MethodHandle glGetTexImage$handle() {
        return glGetTexImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static MemorySegment glGetTexImage$address() {
        return glGetTexImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static void glGetTexImage(int target, int level, int format, int type, MemorySegment pixels) {
        var mh$ = glGetTexImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexImage", target, level, format, type, pixels);
            }
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexLevelParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexLevelParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetTexLevelParameterfv$descriptor() {
        return glGetTexLevelParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetTexLevelParameterfv$handle() {
        return glGetTexLevelParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetTexLevelParameterfv$address() {
        return glGetTexLevelParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetTexLevelParameterfv(int target, int level, int pname, MemorySegment params) {
        var mh$ = glGetTexLevelParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexLevelParameterfv", target, level, pname, params);
            }
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexLevelParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexLevelParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetTexLevelParameteriv$descriptor() {
        return glGetTexLevelParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetTexLevelParameteriv$handle() {
        return glGetTexLevelParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetTexLevelParameteriv$address() {
        return glGetTexLevelParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
     * }
     */
    public static void glGetTexLevelParameteriv(int target, int level, int pname, MemorySegment params) {
        var mh$ = glGetTexLevelParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexLevelParameteriv", target, level, pname, params);
            }
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetTexParameterfv$descriptor() {
        return glGetTexParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetTexParameterfv$handle() {
        return glGetTexParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetTexParameterfv$address() {
        return glGetTexParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetTexParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetTexParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetTexParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetTexParameteriv$descriptor() {
        return glGetTexParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetTexParameteriv$handle() {
        return glGetTexParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetTexParameteriv$address() {
        return glGetTexParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetTexParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetTexParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetTexParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glHint(GLenum target, GLenum mode)
     * }
     */
    public static FunctionDescriptor glHint$descriptor() {
        return glHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glHint(GLenum target, GLenum mode)
     * }
     */
    public static MethodHandle glHint$handle() {
        return glHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glHint(GLenum target, GLenum mode)
     * }
     */
    public static MemorySegment glHint$address() {
        return glHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glHint(GLenum target, GLenum mode)
     * }
     */
    public static void glHint(int target, int mode) {
        var mh$ = glHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glHint", target, mode);
            }
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
     * }
     */
    public static FunctionDescriptor glHistogram$descriptor() {
        return glHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
     * }
     */
    public static MethodHandle glHistogram$handle() {
        return glHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
     * }
     */
    public static MemorySegment glHistogram$address() {
        return glHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
     * }
     */
    public static void glHistogram(int target, int width, int internalformat, byte sink) {
        var mh$ = glHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glHistogram", target, width, internalformat, sink);
            }
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexMask(GLuint mask)
     * }
     */
    public static FunctionDescriptor glIndexMask$descriptor() {
        return glIndexMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexMask(GLuint mask)
     * }
     */
    public static MethodHandle glIndexMask$handle() {
        return glIndexMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexMask(GLuint mask)
     * }
     */
    public static MemorySegment glIndexMask$address() {
        return glIndexMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexMask(GLuint mask)
     * }
     */
    public static void glIndexMask(int mask) {
        var mh$ = glIndexMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexMask", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glIndexPointer$descriptor() {
        return glIndexPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glIndexPointer$handle() {
        return glIndexPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glIndexPointer$address() {
        return glIndexPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glIndexPointer(int type, int stride, MemorySegment pointer) {
        var mh$ = glIndexPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexPointer", type, stride, pointer);
            }
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexd(GLdouble c)
     * }
     */
    public static FunctionDescriptor glIndexd$descriptor() {
        return glIndexd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexd(GLdouble c)
     * }
     */
    public static MethodHandle glIndexd$handle() {
        return glIndexd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexd(GLdouble c)
     * }
     */
    public static MemorySegment glIndexd$address() {
        return glIndexd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexd(GLdouble c)
     * }
     */
    public static void glIndexd(double c) {
        var mh$ = glIndexd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexd", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexdv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexdv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexdv(const GLdouble *c)
     * }
     */
    public static FunctionDescriptor glIndexdv$descriptor() {
        return glIndexdv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexdv(const GLdouble *c)
     * }
     */
    public static MethodHandle glIndexdv$handle() {
        return glIndexdv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexdv(const GLdouble *c)
     * }
     */
    public static MemorySegment glIndexdv$address() {
        return glIndexdv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexdv(const GLdouble *c)
     * }
     */
    public static void glIndexdv(MemorySegment c) {
        var mh$ = glIndexdv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexdv", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexf(GLfloat c)
     * }
     */
    public static FunctionDescriptor glIndexf$descriptor() {
        return glIndexf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexf(GLfloat c)
     * }
     */
    public static MethodHandle glIndexf$handle() {
        return glIndexf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexf(GLfloat c)
     * }
     */
    public static MemorySegment glIndexf$address() {
        return glIndexf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexf(GLfloat c)
     * }
     */
    public static void glIndexf(float c) {
        var mh$ = glIndexf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexf", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexfv(const GLfloat *c)
     * }
     */
    public static FunctionDescriptor glIndexfv$descriptor() {
        return glIndexfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexfv(const GLfloat *c)
     * }
     */
    public static MethodHandle glIndexfv$handle() {
        return glIndexfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexfv(const GLfloat *c)
     * }
     */
    public static MemorySegment glIndexfv$address() {
        return glIndexfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexfv(const GLfloat *c)
     * }
     */
    public static void glIndexfv(MemorySegment c) {
        var mh$ = glIndexfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexfv", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexi(GLint c)
     * }
     */
    public static FunctionDescriptor glIndexi$descriptor() {
        return glIndexi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexi(GLint c)
     * }
     */
    public static MethodHandle glIndexi$handle() {
        return glIndexi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexi(GLint c)
     * }
     */
    public static MemorySegment glIndexi$address() {
        return glIndexi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexi(GLint c)
     * }
     */
    public static void glIndexi(int c) {
        var mh$ = glIndexi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexi", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexiv(const GLint *c)
     * }
     */
    public static FunctionDescriptor glIndexiv$descriptor() {
        return glIndexiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexiv(const GLint *c)
     * }
     */
    public static MethodHandle glIndexiv$handle() {
        return glIndexiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexiv(const GLint *c)
     * }
     */
    public static MemorySegment glIndexiv$address() {
        return glIndexiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexiv(const GLint *c)
     * }
     */
    public static void glIndexiv(MemorySegment c) {
        var mh$ = glIndexiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexiv", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexs(GLshort c)
     * }
     */
    public static FunctionDescriptor glIndexs$descriptor() {
        return glIndexs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexs(GLshort c)
     * }
     */
    public static MethodHandle glIndexs$handle() {
        return glIndexs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexs(GLshort c)
     * }
     */
    public static MemorySegment glIndexs$address() {
        return glIndexs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexs(GLshort c)
     * }
     */
    public static void glIndexs(short c) {
        var mh$ = glIndexs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexs", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexsv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexsv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexsv(const GLshort *c)
     * }
     */
    public static FunctionDescriptor glIndexsv$descriptor() {
        return glIndexsv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexsv(const GLshort *c)
     * }
     */
    public static MethodHandle glIndexsv$handle() {
        return glIndexsv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexsv(const GLshort *c)
     * }
     */
    public static MemorySegment glIndexsv$address() {
        return glIndexsv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexsv(const GLshort *c)
     * }
     */
    public static void glIndexsv(MemorySegment c) {
        var mh$ = glIndexsv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexsv", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexub(GLubyte c)
     * }
     */
    public static FunctionDescriptor glIndexub$descriptor() {
        return glIndexub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexub(GLubyte c)
     * }
     */
    public static MethodHandle glIndexub$handle() {
        return glIndexub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexub(GLubyte c)
     * }
     */
    public static MemorySegment glIndexub$address() {
        return glIndexub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexub(GLubyte c)
     * }
     */
    public static void glIndexub(byte c) {
        var mh$ = glIndexub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexub", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIndexubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIndexubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glIndexubv(const GLubyte *c)
     * }
     */
    public static FunctionDescriptor glIndexubv$descriptor() {
        return glIndexubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glIndexubv(const GLubyte *c)
     * }
     */
    public static MethodHandle glIndexubv$handle() {
        return glIndexubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glIndexubv(const GLubyte *c)
     * }
     */
    public static MemorySegment glIndexubv$address() {
        return glIndexubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glIndexubv(const GLubyte *c)
     * }
     */
    public static void glIndexubv(MemorySegment c) {
        var mh$ = glIndexubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIndexubv", c);
            }
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glInitNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glInitNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glInitNames()
     * }
     */
    public static FunctionDescriptor glInitNames$descriptor() {
        return glInitNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glInitNames()
     * }
     */
    public static MethodHandle glInitNames$handle() {
        return glInitNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glInitNames()
     * }
     */
    public static MemorySegment glInitNames$address() {
        return glInitNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glInitNames()
     * }
     */
    public static void glInitNames() {
        var mh$ = glInitNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glInitNames");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glInterleavedArrays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glInterleavedArrays");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glInterleavedArrays$descriptor() {
        return glInterleavedArrays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glInterleavedArrays$handle() {
        return glInterleavedArrays.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glInterleavedArrays$address() {
        return glInterleavedArrays.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glInterleavedArrays(int format, int stride, MemorySegment pointer) {
        var mh$ = glInterleavedArrays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glInterleavedArrays", format, stride, pointer);
            }
            mh$.invokeExact(format, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static FunctionDescriptor glIsEnabled$descriptor() {
        return glIsEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static MethodHandle glIsEnabled$handle() {
        return glIsEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static MemorySegment glIsEnabled$address() {
        return glIsEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsEnabled(GLenum cap)
     * }
     */
    public static byte glIsEnabled(int cap) {
        var mh$ = glIsEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsEnabled", cap);
            }
            return (byte)mh$.invokeExact(cap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsList(GLuint list)
     * }
     */
    public static FunctionDescriptor glIsList$descriptor() {
        return glIsList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsList(GLuint list)
     * }
     */
    public static MethodHandle glIsList$handle() {
        return glIsList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsList(GLuint list)
     * }
     */
    public static MemorySegment glIsList$address() {
        return glIsList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsList(GLuint list)
     * }
     */
    public static byte glIsList(int list) {
        var mh$ = glIsList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsList", list);
            }
            return (byte)mh$.invokeExact(list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsTexture(GLuint texture)
     * }
     */
    public static FunctionDescriptor glIsTexture$descriptor() {
        return glIsTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsTexture(GLuint texture)
     * }
     */
    public static MethodHandle glIsTexture$handle() {
        return glIsTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsTexture(GLuint texture)
     * }
     */
    public static MemorySegment glIsTexture$address() {
        return glIsTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsTexture(GLuint texture)
     * }
     */
    public static byte glIsTexture(int texture) {
        var mh$ = glIsTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsTexture", texture);
            }
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightModelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightModelf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightModelf(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glLightModelf$descriptor() {
        return glLightModelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightModelf(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glLightModelf$handle() {
        return glLightModelf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightModelf(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glLightModelf$address() {
        return glLightModelf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightModelf(GLenum pname, GLfloat param)
     * }
     */
    public static void glLightModelf(int pname, float param) {
        var mh$ = glLightModelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightModelf", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightModelfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightModelfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightModelfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glLightModelfv$descriptor() {
        return glLightModelfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightModelfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glLightModelfv$handle() {
        return glLightModelfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightModelfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glLightModelfv$address() {
        return glLightModelfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightModelfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static void glLightModelfv(int pname, MemorySegment params) {
        var mh$ = glLightModelfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightModelfv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightModeli {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightModeli");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightModeli(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glLightModeli$descriptor() {
        return glLightModeli.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightModeli(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glLightModeli$handle() {
        return glLightModeli.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightModeli(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glLightModeli$address() {
        return glLightModeli.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightModeli(GLenum pname, GLint param)
     * }
     */
    public static void glLightModeli(int pname, int param) {
        var mh$ = glLightModeli.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightModeli", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightModeliv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightModeliv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightModeliv(GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glLightModeliv$descriptor() {
        return glLightModeliv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightModeliv(GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glLightModeliv$handle() {
        return glLightModeliv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightModeliv(GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glLightModeliv$address() {
        return glLightModeliv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightModeliv(GLenum pname, const GLint *params)
     * }
     */
    public static void glLightModeliv(int pname, MemorySegment params) {
        var mh$ = glLightModeliv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightModeliv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightf(GLenum light, GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glLightf$descriptor() {
        return glLightf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightf(GLenum light, GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glLightf$handle() {
        return glLightf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightf(GLenum light, GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glLightf$address() {
        return glLightf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightf(GLenum light, GLenum pname, GLfloat param)
     * }
     */
    public static void glLightf(int light, int pname, float param) {
        var mh$ = glLightf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightf", light, pname, param);
            }
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightfv(GLenum light, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glLightfv$descriptor() {
        return glLightfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightfv(GLenum light, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glLightfv$handle() {
        return glLightfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightfv(GLenum light, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glLightfv$address() {
        return glLightfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightfv(GLenum light, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glLightfv(int light, int pname, MemorySegment params) {
        var mh$ = glLightfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightfv", light, pname, params);
            }
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLighti {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLighti");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLighti(GLenum light, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glLighti$descriptor() {
        return glLighti.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLighti(GLenum light, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glLighti$handle() {
        return glLighti.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLighti(GLenum light, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glLighti$address() {
        return glLighti.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLighti(GLenum light, GLenum pname, GLint param)
     * }
     */
    public static void glLighti(int light, int pname, int param) {
        var mh$ = glLighti.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLighti", light, pname, param);
            }
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLightiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLightiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLightiv(GLenum light, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glLightiv$descriptor() {
        return glLightiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLightiv(GLenum light, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glLightiv$handle() {
        return glLightiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLightiv(GLenum light, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glLightiv$address() {
        return glLightiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLightiv(GLenum light, GLenum pname, const GLint *params)
     * }
     */
    public static void glLightiv(int light, int pname, MemorySegment params) {
        var mh$ = glLightiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLightiv", light, pname, params);
            }
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLineStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLineStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static FunctionDescriptor glLineStipple$descriptor() {
        return glLineStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static MethodHandle glLineStipple$handle() {
        return glLineStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static MemorySegment glLineStipple$address() {
        return glLineStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLineStipple(GLint factor, GLushort pattern)
     * }
     */
    public static void glLineStipple(int factor, short pattern) {
        var mh$ = glLineStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLineStipple", factor, pattern);
            }
            mh$.invokeExact(factor, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLineWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLineWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLineWidth(GLfloat width)
     * }
     */
    public static FunctionDescriptor glLineWidth$descriptor() {
        return glLineWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLineWidth(GLfloat width)
     * }
     */
    public static MethodHandle glLineWidth$handle() {
        return glLineWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLineWidth(GLfloat width)
     * }
     */
    public static MemorySegment glLineWidth$address() {
        return glLineWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLineWidth(GLfloat width)
     * }
     */
    public static void glLineWidth(float width) {
        var mh$ = glLineWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLineWidth", width);
            }
            mh$.invokeExact(width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glListBase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glListBase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glListBase(GLuint base)
     * }
     */
    public static FunctionDescriptor glListBase$descriptor() {
        return glListBase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glListBase(GLuint base)
     * }
     */
    public static MethodHandle glListBase$handle() {
        return glListBase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glListBase(GLuint base)
     * }
     */
    public static MemorySegment glListBase$address() {
        return glListBase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glListBase(GLuint base)
     * }
     */
    public static void glListBase(int base) {
        var mh$ = glListBase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glListBase", base);
            }
            mh$.invokeExact(base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadIdentity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadIdentity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadIdentity()
     * }
     */
    public static FunctionDescriptor glLoadIdentity$descriptor() {
        return glLoadIdentity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadIdentity()
     * }
     */
    public static MethodHandle glLoadIdentity$handle() {
        return glLoadIdentity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadIdentity()
     * }
     */
    public static MemorySegment glLoadIdentity$address() {
        return glLoadIdentity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadIdentity()
     * }
     */
    public static void glLoadIdentity() {
        var mh$ = glLoadIdentity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadIdentity");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glLoadMatrixd$descriptor() {
        return glLoadMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glLoadMatrixd$handle() {
        return glLoadMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glLoadMatrixd$address() {
        return glLoadMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadMatrixd(const GLdouble *m)
     * }
     */
    public static void glLoadMatrixd(MemorySegment m) {
        var mh$ = glLoadMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glLoadMatrixf$descriptor() {
        return glLoadMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glLoadMatrixf$handle() {
        return glLoadMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glLoadMatrixf$address() {
        return glLoadMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadMatrixf(const GLfloat *m)
     * }
     */
    public static void glLoadMatrixf(MemorySegment m) {
        var mh$ = glLoadMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadName(GLuint name)
     * }
     */
    public static FunctionDescriptor glLoadName$descriptor() {
        return glLoadName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadName(GLuint name)
     * }
     */
    public static MethodHandle glLoadName$handle() {
        return glLoadName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadName(GLuint name)
     * }
     */
    public static MemorySegment glLoadName$address() {
        return glLoadName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadName(GLuint name)
     * }
     */
    public static void glLoadName(int name) {
        var mh$ = glLoadName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadName", name);
            }
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLogicOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLogicOp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLogicOp(GLenum opcode)
     * }
     */
    public static FunctionDescriptor glLogicOp$descriptor() {
        return glLogicOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLogicOp(GLenum opcode)
     * }
     */
    public static MethodHandle glLogicOp$handle() {
        return glLogicOp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLogicOp(GLenum opcode)
     * }
     */
    public static MemorySegment glLogicOp$address() {
        return glLogicOp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLogicOp(GLenum opcode)
     * }
     */
    public static void glLogicOp(int opcode) {
        var mh$ = glLogicOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLogicOp", opcode);
            }
            mh$.invokeExact(opcode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMap1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMap1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static FunctionDescriptor glMap1d$descriptor() {
        return glMap1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static MethodHandle glMap1d$handle() {
        return glMap1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static MemorySegment glMap1d$address() {
        return glMap1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
     * }
     */
    public static void glMap1d(int target, double u1, double u2, int stride, int order, MemorySegment points) {
        var mh$ = glMap1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMap1d", target, u1, u2, stride, order, points);
            }
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMap1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMap1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static FunctionDescriptor glMap1f$descriptor() {
        return glMap1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static MethodHandle glMap1f$handle() {
        return glMap1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static MemorySegment glMap1f$address() {
        return glMap1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
     * }
     */
    public static void glMap1f(int target, float u1, float u2, int stride, int order, MemorySegment points) {
        var mh$ = glMap1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMap1f", target, u1, u2, stride, order, points);
            }
            mh$.invokeExact(target, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMap2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMap2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static FunctionDescriptor glMap2d$descriptor() {
        return glMap2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static MethodHandle glMap2d$handle() {
        return glMap2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static MemorySegment glMap2d$address() {
        return glMap2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
     * }
     */
    public static void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMap2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMap2d", target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
            }
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMap2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMap2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static FunctionDescriptor glMap2f$descriptor() {
        return glMap2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static MethodHandle glMap2f$handle() {
        return glMap2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static MemorySegment glMap2f$address() {
        return glMap2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
     * }
     */
    public static void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, MemorySegment points) {
        var mh$ = glMap2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMap2f", target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
            }
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapGrid1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapGrid1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
     * }
     */
    public static FunctionDescriptor glMapGrid1d$descriptor() {
        return glMapGrid1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
     * }
     */
    public static MethodHandle glMapGrid1d$handle() {
        return glMapGrid1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
     * }
     */
    public static MemorySegment glMapGrid1d$address() {
        return glMapGrid1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
     * }
     */
    public static void glMapGrid1d(int un, double u1, double u2) {
        var mh$ = glMapGrid1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapGrid1d", un, u1, u2);
            }
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapGrid1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapGrid1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
     * }
     */
    public static FunctionDescriptor glMapGrid1f$descriptor() {
        return glMapGrid1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
     * }
     */
    public static MethodHandle glMapGrid1f$handle() {
        return glMapGrid1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
     * }
     */
    public static MemorySegment glMapGrid1f$address() {
        return glMapGrid1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
     * }
     */
    public static void glMapGrid1f(int un, float u1, float u2) {
        var mh$ = glMapGrid1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapGrid1f", un, u1, u2);
            }
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapGrid2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapGrid2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
     * }
     */
    public static FunctionDescriptor glMapGrid2d$descriptor() {
        return glMapGrid2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
     * }
     */
    public static MethodHandle glMapGrid2d$handle() {
        return glMapGrid2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
     * }
     */
    public static MemorySegment glMapGrid2d$address() {
        return glMapGrid2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
     * }
     */
    public static void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) {
        var mh$ = glMapGrid2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapGrid2d", un, u1, u2, vn, v1, v2);
            }
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapGrid2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapGrid2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
     * }
     */
    public static FunctionDescriptor glMapGrid2f$descriptor() {
        return glMapGrid2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
     * }
     */
    public static MethodHandle glMapGrid2f$handle() {
        return glMapGrid2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
     * }
     */
    public static MemorySegment glMapGrid2f$address() {
        return glMapGrid2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
     * }
     */
    public static void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) {
        var mh$ = glMapGrid2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapGrid2f", un, u1, u2, vn, v1, v2);
            }
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMaterialf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMaterialf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMaterialf(GLenum face, GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glMaterialf$descriptor() {
        return glMaterialf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMaterialf(GLenum face, GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glMaterialf$handle() {
        return glMaterialf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMaterialf(GLenum face, GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glMaterialf$address() {
        return glMaterialf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMaterialf(GLenum face, GLenum pname, GLfloat param)
     * }
     */
    public static void glMaterialf(int face, int pname, float param) {
        var mh$ = glMaterialf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMaterialf", face, pname, param);
            }
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMaterialfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMaterialfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glMaterialfv$descriptor() {
        return glMaterialfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glMaterialfv$handle() {
        return glMaterialfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glMaterialfv$address() {
        return glMaterialfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glMaterialfv(int face, int pname, MemorySegment params) {
        var mh$ = glMaterialfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMaterialfv", face, pname, params);
            }
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMateriali {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMateriali");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMateriali(GLenum face, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glMateriali$descriptor() {
        return glMateriali.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMateriali(GLenum face, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glMateriali$handle() {
        return glMateriali.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMateriali(GLenum face, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glMateriali$address() {
        return glMateriali.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMateriali(GLenum face, GLenum pname, GLint param)
     * }
     */
    public static void glMateriali(int face, int pname, int param) {
        var mh$ = glMateriali.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMateriali", face, pname, param);
            }
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMaterialiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMaterialiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMaterialiv(GLenum face, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glMaterialiv$descriptor() {
        return glMaterialiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMaterialiv(GLenum face, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glMaterialiv$handle() {
        return glMaterialiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMaterialiv(GLenum face, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glMaterialiv$address() {
        return glMaterialiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMaterialiv(GLenum face, GLenum pname, const GLint *params)
     * }
     */
    public static void glMaterialiv(int face, int pname, MemorySegment params) {
        var mh$ = glMaterialiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMaterialiv", face, pname, params);
            }
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMatrixMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMatrixMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMatrixMode(GLenum mode)
     * }
     */
    public static FunctionDescriptor glMatrixMode$descriptor() {
        return glMatrixMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMatrixMode(GLenum mode)
     * }
     */
    public static MethodHandle glMatrixMode$handle() {
        return glMatrixMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMatrixMode(GLenum mode)
     * }
     */
    public static MemorySegment glMatrixMode$address() {
        return glMatrixMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMatrixMode(GLenum mode)
     * }
     */
    public static void glMatrixMode(int mode) {
        var mh$ = glMatrixMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMatrixMode", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMinmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMinmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
     * }
     */
    public static FunctionDescriptor glMinmax$descriptor() {
        return glMinmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
     * }
     */
    public static MethodHandle glMinmax$handle() {
        return glMinmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
     * }
     */
    public static MemorySegment glMinmax$address() {
        return glMinmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
     * }
     */
    public static void glMinmax(int target, int internalformat, byte sink) {
        var mh$ = glMinmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMinmax", target, internalformat, sink);
            }
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glMultMatrixd$descriptor() {
        return glMultMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glMultMatrixd$handle() {
        return glMultMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glMultMatrixd$address() {
        return glMultMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultMatrixd(const GLdouble *m)
     * }
     */
    public static void glMultMatrixd(MemorySegment m) {
        var mh$ = glMultMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glMultMatrixf$descriptor() {
        return glMultMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glMultMatrixf$handle() {
        return glMultMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glMultMatrixf$address() {
        return glMultMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultMatrixf(const GLfloat *m)
     * }
     */
    public static void glMultMatrixf(MemorySegment m) {
        var mh$ = glMultMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNewList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNewList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static FunctionDescriptor glNewList$descriptor() {
        return glNewList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static MethodHandle glNewList$handle() {
        return glNewList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static MemorySegment glNewList$address() {
        return glNewList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNewList(GLuint list, GLenum mode)
     * }
     */
    public static void glNewList(int list, int mode) {
        var mh$ = glNewList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNewList", list, mode);
            }
            mh$.invokeExact(list, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3b {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3b");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static FunctionDescriptor glNormal3b$descriptor() {
        return glNormal3b.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static MethodHandle glNormal3b$handle() {
        return glNormal3b.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static MemorySegment glNormal3b$address() {
        return glNormal3b.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
     * }
     */
    public static void glNormal3b(byte nx, byte ny, byte nz) {
        var mh$ = glNormal3b.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3b", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3bv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3bv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3bv(const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glNormal3bv$descriptor() {
        return glNormal3bv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3bv(const GLbyte *v)
     * }
     */
    public static MethodHandle glNormal3bv$handle() {
        return glNormal3bv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3bv(const GLbyte *v)
     * }
     */
    public static MemorySegment glNormal3bv$address() {
        return glNormal3bv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3bv(const GLbyte *v)
     * }
     */
    public static void glNormal3bv(MemorySegment v) {
        var mh$ = glNormal3bv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3bv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static FunctionDescriptor glNormal3d$descriptor() {
        return glNormal3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static MethodHandle glNormal3d$handle() {
        return glNormal3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static MemorySegment glNormal3d$address() {
        return glNormal3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
     * }
     */
    public static void glNormal3d(double nx, double ny, double nz) {
        var mh$ = glNormal3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3d", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glNormal3dv$descriptor() {
        return glNormal3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glNormal3dv$handle() {
        return glNormal3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glNormal3dv$address() {
        return glNormal3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3dv(const GLdouble *v)
     * }
     */
    public static void glNormal3dv(MemorySegment v) {
        var mh$ = glNormal3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static FunctionDescriptor glNormal3f$descriptor() {
        return glNormal3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static MethodHandle glNormal3f$handle() {
        return glNormal3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static MemorySegment glNormal3f$address() {
        return glNormal3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
     * }
     */
    public static void glNormal3f(float nx, float ny, float nz) {
        var mh$ = glNormal3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3f", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glNormal3fv$descriptor() {
        return glNormal3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glNormal3fv$handle() {
        return glNormal3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glNormal3fv$address() {
        return glNormal3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3fv(const GLfloat *v)
     * }
     */
    public static void glNormal3fv(MemorySegment v) {
        var mh$ = glNormal3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static FunctionDescriptor glNormal3i$descriptor() {
        return glNormal3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static MethodHandle glNormal3i$handle() {
        return glNormal3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static MemorySegment glNormal3i$address() {
        return glNormal3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3i(GLint nx, GLint ny, GLint nz)
     * }
     */
    public static void glNormal3i(int nx, int ny, int nz) {
        var mh$ = glNormal3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3i", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glNormal3iv$descriptor() {
        return glNormal3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3iv(const GLint *v)
     * }
     */
    public static MethodHandle glNormal3iv$handle() {
        return glNormal3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3iv(const GLint *v)
     * }
     */
    public static MemorySegment glNormal3iv$address() {
        return glNormal3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3iv(const GLint *v)
     * }
     */
    public static void glNormal3iv(MemorySegment v) {
        var mh$ = glNormal3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static FunctionDescriptor glNormal3s$descriptor() {
        return glNormal3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static MethodHandle glNormal3s$handle() {
        return glNormal3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static MemorySegment glNormal3s$address() {
        return glNormal3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
     * }
     */
    public static void glNormal3s(short nx, short ny, short nz) {
        var mh$ = glNormal3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3s", nx, ny, nz);
            }
            mh$.invokeExact(nx, ny, nz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormal3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormal3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormal3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glNormal3sv$descriptor() {
        return glNormal3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormal3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glNormal3sv$handle() {
        return glNormal3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormal3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glNormal3sv$address() {
        return glNormal3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormal3sv(const GLshort *v)
     * }
     */
    public static void glNormal3sv(MemorySegment v) {
        var mh$ = glNormal3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormal3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glNormalPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glNormalPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glNormalPointer$descriptor() {
        return glNormalPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glNormalPointer$handle() {
        return glNormalPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glNormalPointer$address() {
        return glNormalPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glNormalPointer(int type, int stride, MemorySegment pointer) {
        var mh$ = glNormalPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glNormalPointer", type, stride, pointer);
            }
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glOrtho {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glOrtho");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static FunctionDescriptor glOrtho$descriptor() {
        return glOrtho.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MethodHandle glOrtho$handle() {
        return glOrtho.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MemorySegment glOrtho$address() {
        return glOrtho.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar) {
        var mh$ = glOrtho.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glOrtho", left, right, bottom, top, zNear, zFar);
            }
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPassThrough {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPassThrough");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPassThrough(GLfloat token)
     * }
     */
    public static FunctionDescriptor glPassThrough$descriptor() {
        return glPassThrough.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPassThrough(GLfloat token)
     * }
     */
    public static MethodHandle glPassThrough$handle() {
        return glPassThrough.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPassThrough(GLfloat token)
     * }
     */
    public static MemorySegment glPassThrough$address() {
        return glPassThrough.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPassThrough(GLfloat token)
     * }
     */
    public static void glPassThrough(float token) {
        var mh$ = glPassThrough.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPassThrough", token);
            }
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelMapfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelMapfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values)
     * }
     */
    public static FunctionDescriptor glPixelMapfv$descriptor() {
        return glPixelMapfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values)
     * }
     */
    public static MethodHandle glPixelMapfv$handle() {
        return glPixelMapfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values)
     * }
     */
    public static MemorySegment glPixelMapfv$address() {
        return glPixelMapfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelMapfv(GLenum map, GLint mapsize, const GLfloat *values)
     * }
     */
    public static void glPixelMapfv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelMapfv", map, mapsize, values);
            }
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelMapuiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelMapuiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values)
     * }
     */
    public static FunctionDescriptor glPixelMapuiv$descriptor() {
        return glPixelMapuiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values)
     * }
     */
    public static MethodHandle glPixelMapuiv$handle() {
        return glPixelMapuiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values)
     * }
     */
    public static MemorySegment glPixelMapuiv$address() {
        return glPixelMapuiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelMapuiv(GLenum map, GLint mapsize, const GLuint *values)
     * }
     */
    public static void glPixelMapuiv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapuiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelMapuiv", map, mapsize, values);
            }
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelMapusv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelMapusv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values)
     * }
     */
    public static FunctionDescriptor glPixelMapusv$descriptor() {
        return glPixelMapusv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values)
     * }
     */
    public static MethodHandle glPixelMapusv$handle() {
        return glPixelMapusv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values)
     * }
     */
    public static MemorySegment glPixelMapusv$address() {
        return glPixelMapusv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelMapusv(GLenum map, GLint mapsize, const GLushort *values)
     * }
     */
    public static void glPixelMapusv(int map, int mapsize, MemorySegment values) {
        var mh$ = glPixelMapusv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelMapusv", map, mapsize, values);
            }
            mh$.invokeExact(map, mapsize, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelStoref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelStoref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelStoref(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glPixelStoref$descriptor() {
        return glPixelStoref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelStoref(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glPixelStoref$handle() {
        return glPixelStoref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelStoref(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glPixelStoref$address() {
        return glPixelStoref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelStoref(GLenum pname, GLfloat param)
     * }
     */
    public static void glPixelStoref(int pname, float param) {
        var mh$ = glPixelStoref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelStoref", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelStorei {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelStorei");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelStorei(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glPixelStorei$descriptor() {
        return glPixelStorei.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelStorei(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glPixelStorei$handle() {
        return glPixelStorei.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelStorei(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glPixelStorei$address() {
        return glPixelStorei.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelStorei(GLenum pname, GLint param)
     * }
     */
    public static void glPixelStorei(int pname, int param) {
        var mh$ = glPixelStorei.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelStorei", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelTransferf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelTransferf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelTransferf(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glPixelTransferf$descriptor() {
        return glPixelTransferf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelTransferf(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glPixelTransferf$handle() {
        return glPixelTransferf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelTransferf(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glPixelTransferf$address() {
        return glPixelTransferf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelTransferf(GLenum pname, GLfloat param)
     * }
     */
    public static void glPixelTransferf(int pname, float param) {
        var mh$ = glPixelTransferf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelTransferf", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelTransferi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelTransferi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelTransferi(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glPixelTransferi$descriptor() {
        return glPixelTransferi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelTransferi(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glPixelTransferi$handle() {
        return glPixelTransferi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelTransferi(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glPixelTransferi$address() {
        return glPixelTransferi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelTransferi(GLenum pname, GLint param)
     * }
     */
    public static void glPixelTransferi(int pname, int param) {
        var mh$ = glPixelTransferi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelTransferi", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPixelZoom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPixelZoom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
     * }
     */
    public static FunctionDescriptor glPixelZoom$descriptor() {
        return glPixelZoom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
     * }
     */
    public static MethodHandle glPixelZoom$handle() {
        return glPixelZoom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
     * }
     */
    public static MemorySegment glPixelZoom$address() {
        return glPixelZoom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
     * }
     */
    public static void glPixelZoom(float xfactor, float yfactor) {
        var mh$ = glPixelZoom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPixelZoom", xfactor, yfactor);
            }
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointSize(GLfloat size)
     * }
     */
    public static FunctionDescriptor glPointSize$descriptor() {
        return glPointSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointSize(GLfloat size)
     * }
     */
    public static MethodHandle glPointSize$handle() {
        return glPointSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointSize(GLfloat size)
     * }
     */
    public static MemorySegment glPointSize$address() {
        return glPointSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointSize(GLfloat size)
     * }
     */
    public static void glPointSize(float size) {
        var mh$ = glPointSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointSize", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPolygonMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static FunctionDescriptor glPolygonMode$descriptor() {
        return glPolygonMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static MethodHandle glPolygonMode$handle() {
        return glPolygonMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static MemorySegment glPolygonMode$address() {
        return glPolygonMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPolygonMode(GLenum face, GLenum mode)
     * }
     */
    public static void glPolygonMode(int face, int mode) {
        var mh$ = glPolygonMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonMode", face, mode);
            }
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPolygonOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static FunctionDescriptor glPolygonOffset$descriptor() {
        return glPolygonOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static MethodHandle glPolygonOffset$handle() {
        return glPolygonOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static MemorySegment glPolygonOffset$address() {
        return glPolygonOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPolygonOffset(GLfloat factor, GLfloat units)
     * }
     */
    public static void glPolygonOffset(float factor, float units) {
        var mh$ = glPolygonOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonOffset", factor, units);
            }
            mh$.invokeExact(factor, units);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPolygonStipple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPolygonStipple");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static FunctionDescriptor glPolygonStipple$descriptor() {
        return glPolygonStipple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static MethodHandle glPolygonStipple$handle() {
        return glPolygonStipple.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static MemorySegment glPolygonStipple$address() {
        return glPolygonStipple.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPolygonStipple(const GLubyte *mask)
     * }
     */
    public static void glPolygonStipple(MemorySegment mask) {
        var mh$ = glPolygonStipple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPolygonStipple", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPopAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPopAttrib()
     * }
     */
    public static FunctionDescriptor glPopAttrib$descriptor() {
        return glPopAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPopAttrib()
     * }
     */
    public static MethodHandle glPopAttrib$handle() {
        return glPopAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPopAttrib()
     * }
     */
    public static MemorySegment glPopAttrib$address() {
        return glPopAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPopAttrib()
     * }
     */
    public static void glPopAttrib() {
        var mh$ = glPopAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopAttrib");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopClientAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPopClientAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPopClientAttrib()
     * }
     */
    public static FunctionDescriptor glPopClientAttrib$descriptor() {
        return glPopClientAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPopClientAttrib()
     * }
     */
    public static MethodHandle glPopClientAttrib$handle() {
        return glPopClientAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPopClientAttrib()
     * }
     */
    public static MemorySegment glPopClientAttrib$address() {
        return glPopClientAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPopClientAttrib()
     * }
     */
    public static void glPopClientAttrib() {
        var mh$ = glPopClientAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopClientAttrib");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPopMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPopMatrix()
     * }
     */
    public static FunctionDescriptor glPopMatrix$descriptor() {
        return glPopMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPopMatrix()
     * }
     */
    public static MethodHandle glPopMatrix$handle() {
        return glPopMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPopMatrix()
     * }
     */
    public static MemorySegment glPopMatrix$address() {
        return glPopMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPopMatrix()
     * }
     */
    public static void glPopMatrix() {
        var mh$ = glPopMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopMatrix");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPopName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPopName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPopName()
     * }
     */
    public static FunctionDescriptor glPopName$descriptor() {
        return glPopName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPopName()
     * }
     */
    public static MethodHandle glPopName$handle() {
        return glPopName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPopName()
     * }
     */
    public static MemorySegment glPopName$address() {
        return glPopName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPopName()
     * }
     */
    public static void glPopName() {
        var mh$ = glPopName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPopName");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPrioritizeTextures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPrioritizeTextures");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
     * }
     */
    public static FunctionDescriptor glPrioritizeTextures$descriptor() {
        return glPrioritizeTextures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
     * }
     */
    public static MethodHandle glPrioritizeTextures$handle() {
        return glPrioritizeTextures.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
     * }
     */
    public static MemorySegment glPrioritizeTextures$address() {
        return glPrioritizeTextures.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
     * }
     */
    public static void glPrioritizeTextures(int n, MemorySegment textures, MemorySegment priorities) {
        var mh$ = glPrioritizeTextures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPrioritizeTextures", n, textures, priorities);
            }
            mh$.invokeExact(n, textures, priorities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPushAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPushAttrib(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glPushAttrib$descriptor() {
        return glPushAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPushAttrib(GLbitfield mask)
     * }
     */
    public static MethodHandle glPushAttrib$handle() {
        return glPushAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPushAttrib(GLbitfield mask)
     * }
     */
    public static MemorySegment glPushAttrib$address() {
        return glPushAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPushAttrib(GLbitfield mask)
     * }
     */
    public static void glPushAttrib(int mask) {
        var mh$ = glPushAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushAttrib", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushClientAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPushClientAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static FunctionDescriptor glPushClientAttrib$descriptor() {
        return glPushClientAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static MethodHandle glPushClientAttrib$handle() {
        return glPushClientAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static MemorySegment glPushClientAttrib$address() {
        return glPushClientAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPushClientAttrib(GLbitfield mask)
     * }
     */
    public static void glPushClientAttrib(int mask) {
        var mh$ = glPushClientAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushClientAttrib", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPushMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPushMatrix()
     * }
     */
    public static FunctionDescriptor glPushMatrix$descriptor() {
        return glPushMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPushMatrix()
     * }
     */
    public static MethodHandle glPushMatrix$handle() {
        return glPushMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPushMatrix()
     * }
     */
    public static MemorySegment glPushMatrix$address() {
        return glPushMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPushMatrix()
     * }
     */
    public static void glPushMatrix() {
        var mh$ = glPushMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushMatrix");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPushName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPushName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPushName(GLuint name)
     * }
     */
    public static FunctionDescriptor glPushName$descriptor() {
        return glPushName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPushName(GLuint name)
     * }
     */
    public static MethodHandle glPushName$handle() {
        return glPushName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPushName(GLuint name)
     * }
     */
    public static MemorySegment glPushName$address() {
        return glPushName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPushName(GLuint name)
     * }
     */
    public static void glPushName(int name) {
        var mh$ = glPushName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPushName", name);
            }
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glRasterPos2d$descriptor() {
        return glRasterPos2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glRasterPos2d$handle() {
        return glRasterPos2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glRasterPos2d$address() {
        return glRasterPos2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static void glRasterPos2d(double x, double y) {
        var mh$ = glRasterPos2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2d", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glRasterPos2dv$descriptor() {
        return glRasterPos2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glRasterPos2dv$handle() {
        return glRasterPos2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glRasterPos2dv$address() {
        return glRasterPos2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2dv(const GLdouble *v)
     * }
     */
    public static void glRasterPos2dv(MemorySegment v) {
        var mh$ = glRasterPos2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glRasterPos2f$descriptor() {
        return glRasterPos2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glRasterPos2f$handle() {
        return glRasterPos2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glRasterPos2f$address() {
        return glRasterPos2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static void glRasterPos2f(float x, float y) {
        var mh$ = glRasterPos2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2f", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glRasterPos2fv$descriptor() {
        return glRasterPos2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glRasterPos2fv$handle() {
        return glRasterPos2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glRasterPos2fv$address() {
        return glRasterPos2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2fv(const GLfloat *v)
     * }
     */
    public static void glRasterPos2fv(MemorySegment v) {
        var mh$ = glRasterPos2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2i(GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glRasterPos2i$descriptor() {
        return glRasterPos2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2i(GLint x, GLint y)
     * }
     */
    public static MethodHandle glRasterPos2i$handle() {
        return glRasterPos2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2i(GLint x, GLint y)
     * }
     */
    public static MemorySegment glRasterPos2i$address() {
        return glRasterPos2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2i(GLint x, GLint y)
     * }
     */
    public static void glRasterPos2i(int x, int y) {
        var mh$ = glRasterPos2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2i", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glRasterPos2iv$descriptor() {
        return glRasterPos2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2iv(const GLint *v)
     * }
     */
    public static MethodHandle glRasterPos2iv$handle() {
        return glRasterPos2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2iv(const GLint *v)
     * }
     */
    public static MemorySegment glRasterPos2iv$address() {
        return glRasterPos2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2iv(const GLint *v)
     * }
     */
    public static void glRasterPos2iv(MemorySegment v) {
        var mh$ = glRasterPos2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2s(GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glRasterPos2s$descriptor() {
        return glRasterPos2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2s(GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glRasterPos2s$handle() {
        return glRasterPos2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2s(GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glRasterPos2s$address() {
        return glRasterPos2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2s(GLshort x, GLshort y)
     * }
     */
    public static void glRasterPos2s(short x, short y) {
        var mh$ = glRasterPos2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2s", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos2sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glRasterPos2sv$descriptor() {
        return glRasterPos2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos2sv(const GLshort *v)
     * }
     */
    public static MethodHandle glRasterPos2sv$handle() {
        return glRasterPos2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos2sv(const GLshort *v)
     * }
     */
    public static MemorySegment glRasterPos2sv$address() {
        return glRasterPos2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos2sv(const GLshort *v)
     * }
     */
    public static void glRasterPos2sv(MemorySegment v) {
        var mh$ = glRasterPos2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos2sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glRasterPos3d$descriptor() {
        return glRasterPos3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glRasterPos3d$handle() {
        return glRasterPos3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glRasterPos3d$address() {
        return glRasterPos3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glRasterPos3d(double x, double y, double z) {
        var mh$ = glRasterPos3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3d", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glRasterPos3dv$descriptor() {
        return glRasterPos3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glRasterPos3dv$handle() {
        return glRasterPos3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glRasterPos3dv$address() {
        return glRasterPos3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3dv(const GLdouble *v)
     * }
     */
    public static void glRasterPos3dv(MemorySegment v) {
        var mh$ = glRasterPos3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glRasterPos3f$descriptor() {
        return glRasterPos3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glRasterPos3f$handle() {
        return glRasterPos3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glRasterPos3f$address() {
        return glRasterPos3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glRasterPos3f(float x, float y, float z) {
        var mh$ = glRasterPos3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3f", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glRasterPos3fv$descriptor() {
        return glRasterPos3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glRasterPos3fv$handle() {
        return glRasterPos3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glRasterPos3fv$address() {
        return glRasterPos3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3fv(const GLfloat *v)
     * }
     */
    public static void glRasterPos3fv(MemorySegment v) {
        var mh$ = glRasterPos3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glRasterPos3i$descriptor() {
        return glRasterPos3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glRasterPos3i$handle() {
        return glRasterPos3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glRasterPos3i$address() {
        return glRasterPos3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static void glRasterPos3i(int x, int y, int z) {
        var mh$ = glRasterPos3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3i", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glRasterPos3iv$descriptor() {
        return glRasterPos3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3iv(const GLint *v)
     * }
     */
    public static MethodHandle glRasterPos3iv$handle() {
        return glRasterPos3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3iv(const GLint *v)
     * }
     */
    public static MemorySegment glRasterPos3iv$address() {
        return glRasterPos3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3iv(const GLint *v)
     * }
     */
    public static void glRasterPos3iv(MemorySegment v) {
        var mh$ = glRasterPos3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glRasterPos3s$descriptor() {
        return glRasterPos3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glRasterPos3s$handle() {
        return glRasterPos3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glRasterPos3s$address() {
        return glRasterPos3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glRasterPos3s(short x, short y, short z) {
        var mh$ = glRasterPos3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3s", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glRasterPos3sv$descriptor() {
        return glRasterPos3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glRasterPos3sv$handle() {
        return glRasterPos3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glRasterPos3sv$address() {
        return glRasterPos3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos3sv(const GLshort *v)
     * }
     */
    public static void glRasterPos3sv(MemorySegment v) {
        var mh$ = glRasterPos3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glRasterPos4d$descriptor() {
        return glRasterPos4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glRasterPos4d$handle() {
        return glRasterPos4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glRasterPos4d$address() {
        return glRasterPos4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glRasterPos4d(double x, double y, double z, double w) {
        var mh$ = glRasterPos4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4d", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glRasterPos4dv$descriptor() {
        return glRasterPos4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glRasterPos4dv$handle() {
        return glRasterPos4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glRasterPos4dv$address() {
        return glRasterPos4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4dv(const GLdouble *v)
     * }
     */
    public static void glRasterPos4dv(MemorySegment v) {
        var mh$ = glRasterPos4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glRasterPos4f$descriptor() {
        return glRasterPos4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glRasterPos4f$handle() {
        return glRasterPos4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glRasterPos4f$address() {
        return glRasterPos4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glRasterPos4f(float x, float y, float z, float w) {
        var mh$ = glRasterPos4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4f", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glRasterPos4fv$descriptor() {
        return glRasterPos4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glRasterPos4fv$handle() {
        return glRasterPos4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glRasterPos4fv$address() {
        return glRasterPos4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4fv(const GLfloat *v)
     * }
     */
    public static void glRasterPos4fv(MemorySegment v) {
        var mh$ = glRasterPos4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static FunctionDescriptor glRasterPos4i$descriptor() {
        return glRasterPos4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MethodHandle glRasterPos4i$handle() {
        return glRasterPos4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MemorySegment glRasterPos4i$address() {
        return glRasterPos4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static void glRasterPos4i(int x, int y, int z, int w) {
        var mh$ = glRasterPos4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4i", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glRasterPos4iv$descriptor() {
        return glRasterPos4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4iv(const GLint *v)
     * }
     */
    public static MethodHandle glRasterPos4iv$handle() {
        return glRasterPos4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4iv(const GLint *v)
     * }
     */
    public static MemorySegment glRasterPos4iv$address() {
        return glRasterPos4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4iv(const GLint *v)
     * }
     */
    public static void glRasterPos4iv(MemorySegment v) {
        var mh$ = glRasterPos4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static FunctionDescriptor glRasterPos4s$descriptor() {
        return glRasterPos4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MethodHandle glRasterPos4s$handle() {
        return glRasterPos4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MemorySegment glRasterPos4s$address() {
        return glRasterPos4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static void glRasterPos4s(short x, short y, short z, short w) {
        var mh$ = glRasterPos4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4s", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRasterPos4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRasterPos4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRasterPos4sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glRasterPos4sv$descriptor() {
        return glRasterPos4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRasterPos4sv(const GLshort *v)
     * }
     */
    public static MethodHandle glRasterPos4sv$handle() {
        return glRasterPos4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRasterPos4sv(const GLshort *v)
     * }
     */
    public static MemorySegment glRasterPos4sv$address() {
        return glRasterPos4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRasterPos4sv(const GLshort *v)
     * }
     */
    public static void glRasterPos4sv(MemorySegment v) {
        var mh$ = glRasterPos4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRasterPos4sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glReadBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glReadBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glReadBuffer(GLenum mode)
     * }
     */
    public static FunctionDescriptor glReadBuffer$descriptor() {
        return glReadBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glReadBuffer(GLenum mode)
     * }
     */
    public static MethodHandle glReadBuffer$handle() {
        return glReadBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glReadBuffer(GLenum mode)
     * }
     */
    public static MemorySegment glReadBuffer$address() {
        return glReadBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glReadBuffer(GLenum mode)
     * }
     */
    public static void glReadBuffer(int mode) {
        var mh$ = glReadBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glReadBuffer", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glReadPixels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glReadPixels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glReadPixels$descriptor() {
        return glReadPixels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static MethodHandle glReadPixels$handle() {
        return glReadPixels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static MemorySegment glReadPixels$address() {
        return glReadPixels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
     * }
     */
    public static void glReadPixels(int x, int y, int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glReadPixels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glReadPixels", x, y, width, height, format, type, pixels);
            }
            mh$.invokeExact(x, y, width, height, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
     * }
     */
    public static FunctionDescriptor glRectd$descriptor() {
        return glRectd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
     * }
     */
    public static MethodHandle glRectd$handle() {
        return glRectd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
     * }
     */
    public static MemorySegment glRectd$address() {
        return glRectd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
     * }
     */
    public static void glRectd(double x1, double y1, double x2, double y2) {
        var mh$ = glRectd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectd", x1, y1, x2, y2);
            }
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectdv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectdv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectdv(const GLdouble *v1, const GLdouble *v2)
     * }
     */
    public static FunctionDescriptor glRectdv$descriptor() {
        return glRectdv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectdv(const GLdouble *v1, const GLdouble *v2)
     * }
     */
    public static MethodHandle glRectdv$handle() {
        return glRectdv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectdv(const GLdouble *v1, const GLdouble *v2)
     * }
     */
    public static MemorySegment glRectdv$address() {
        return glRectdv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectdv(const GLdouble *v1, const GLdouble *v2)
     * }
     */
    public static void glRectdv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectdv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectdv", v1, v2);
            }
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
     * }
     */
    public static FunctionDescriptor glRectf$descriptor() {
        return glRectf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
     * }
     */
    public static MethodHandle glRectf$handle() {
        return glRectf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
     * }
     */
    public static MemorySegment glRectf$address() {
        return glRectf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
     * }
     */
    public static void glRectf(float x1, float y1, float x2, float y2) {
        var mh$ = glRectf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectf", x1, y1, x2, y2);
            }
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectfv(const GLfloat *v1, const GLfloat *v2)
     * }
     */
    public static FunctionDescriptor glRectfv$descriptor() {
        return glRectfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectfv(const GLfloat *v1, const GLfloat *v2)
     * }
     */
    public static MethodHandle glRectfv$handle() {
        return glRectfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectfv(const GLfloat *v1, const GLfloat *v2)
     * }
     */
    public static MemorySegment glRectfv$address() {
        return glRectfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectfv(const GLfloat *v1, const GLfloat *v2)
     * }
     */
    public static void glRectfv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectfv", v1, v2);
            }
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRecti {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRecti");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
     * }
     */
    public static FunctionDescriptor glRecti$descriptor() {
        return glRecti.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
     * }
     */
    public static MethodHandle glRecti$handle() {
        return glRecti.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
     * }
     */
    public static MemorySegment glRecti$address() {
        return glRecti.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
     * }
     */
    public static void glRecti(int x1, int y1, int x2, int y2) {
        var mh$ = glRecti.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRecti", x1, y1, x2, y2);
            }
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectiv(const GLint *v1, const GLint *v2)
     * }
     */
    public static FunctionDescriptor glRectiv$descriptor() {
        return glRectiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectiv(const GLint *v1, const GLint *v2)
     * }
     */
    public static MethodHandle glRectiv$handle() {
        return glRectiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectiv(const GLint *v1, const GLint *v2)
     * }
     */
    public static MemorySegment glRectiv$address() {
        return glRectiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectiv(const GLint *v1, const GLint *v2)
     * }
     */
    public static void glRectiv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectiv", v1, v2);
            }
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
     * }
     */
    public static FunctionDescriptor glRects$descriptor() {
        return glRects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
     * }
     */
    public static MethodHandle glRects$handle() {
        return glRects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
     * }
     */
    public static MemorySegment glRects$address() {
        return glRects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
     * }
     */
    public static void glRects(short x1, short y1, short x2, short y2) {
        var mh$ = glRects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRects", x1, y1, x2, y2);
            }
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRectsv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRectsv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRectsv(const GLshort *v1, const GLshort *v2)
     * }
     */
    public static FunctionDescriptor glRectsv$descriptor() {
        return glRectsv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRectsv(const GLshort *v1, const GLshort *v2)
     * }
     */
    public static MethodHandle glRectsv$handle() {
        return glRectsv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRectsv(const GLshort *v1, const GLshort *v2)
     * }
     */
    public static MemorySegment glRectsv$address() {
        return glRectsv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRectsv(const GLshort *v1, const GLshort *v2)
     * }
     */
    public static void glRectsv(MemorySegment v1, MemorySegment v2) {
        var mh$ = glRectsv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRectsv", v1, v2);
            }
            mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRenderMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRenderMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glRenderMode(GLenum mode)
     * }
     */
    public static FunctionDescriptor glRenderMode$descriptor() {
        return glRenderMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glRenderMode(GLenum mode)
     * }
     */
    public static MethodHandle glRenderMode$handle() {
        return glRenderMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glRenderMode(GLenum mode)
     * }
     */
    public static MemorySegment glRenderMode$address() {
        return glRenderMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glRenderMode(GLenum mode)
     * }
     */
    public static int glRenderMode(int mode) {
        var mh$ = glRenderMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRenderMode", mode);
            }
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glResetHistogram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glResetHistogram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glResetHistogram(GLenum target)
     * }
     */
    public static FunctionDescriptor glResetHistogram$descriptor() {
        return glResetHistogram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glResetHistogram(GLenum target)
     * }
     */
    public static MethodHandle glResetHistogram$handle() {
        return glResetHistogram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glResetHistogram(GLenum target)
     * }
     */
    public static MemorySegment glResetHistogram$address() {
        return glResetHistogram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glResetHistogram(GLenum target)
     * }
     */
    public static void glResetHistogram(int target) {
        var mh$ = glResetHistogram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glResetHistogram", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glResetMinmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glResetMinmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glResetMinmax(GLenum target)
     * }
     */
    public static FunctionDescriptor glResetMinmax$descriptor() {
        return glResetMinmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glResetMinmax(GLenum target)
     * }
     */
    public static MethodHandle glResetMinmax$handle() {
        return glResetMinmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glResetMinmax(GLenum target)
     * }
     */
    public static MemorySegment glResetMinmax$address() {
        return glResetMinmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glResetMinmax(GLenum target)
     * }
     */
    public static void glResetMinmax(int target) {
        var mh$ = glResetMinmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glResetMinmax", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRotated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRotated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glRotated$descriptor() {
        return glRotated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glRotated$handle() {
        return glRotated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glRotated$address() {
        return glRotated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glRotated(double angle, double x, double y, double z) {
        var mh$ = glRotated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRotated", angle, x, y, z);
            }
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glRotatef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glRotatef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glRotatef$descriptor() {
        return glRotatef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glRotatef$handle() {
        return glRotatef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glRotatef$address() {
        return glRotatef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glRotatef(float angle, float x, float y, float z) {
        var mh$ = glRotatef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glRotatef", angle, x, y, z);
            }
            mh$.invokeExact(angle, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScaled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glScaled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glScaled$descriptor() {
        return glScaled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glScaled$handle() {
        return glScaled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glScaled$address() {
        return glScaled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glScaled(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glScaled(double x, double y, double z) {
        var mh$ = glScaled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScaled", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScalef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glScalef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glScalef$descriptor() {
        return glScalef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glScalef$handle() {
        return glScalef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glScalef$address() {
        return glScalef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glScalef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glScalef(float x, float y, float z) {
        var mh$ = glScalef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScalef", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glScissor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glScissor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glScissor$descriptor() {
        return glScissor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glScissor$handle() {
        return glScissor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glScissor$address() {
        return glScissor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glScissor(int x, int y, int width, int height) {
        var mh$ = glScissor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glScissor", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSelectBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSelectBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSelectBuffer(GLsizei size, GLuint *buffer)
     * }
     */
    public static FunctionDescriptor glSelectBuffer$descriptor() {
        return glSelectBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSelectBuffer(GLsizei size, GLuint *buffer)
     * }
     */
    public static MethodHandle glSelectBuffer$handle() {
        return glSelectBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSelectBuffer(GLsizei size, GLuint *buffer)
     * }
     */
    public static MemorySegment glSelectBuffer$address() {
        return glSelectBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSelectBuffer(GLsizei size, GLuint *buffer)
     * }
     */
    public static void glSelectBuffer(int size, MemorySegment buffer) {
        var mh$ = glSelectBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSelectBuffer", size, buffer);
            }
            mh$.invokeExact(size, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSeparableFilter2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSeparableFilter2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
     * }
     */
    public static FunctionDescriptor glSeparableFilter2D$descriptor() {
        return glSeparableFilter2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
     * }
     */
    public static MethodHandle glSeparableFilter2D$handle() {
        return glSeparableFilter2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
     * }
     */
    public static MemorySegment glSeparableFilter2D$address() {
        return glSeparableFilter2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
     * }
     */
    public static void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, MemorySegment row, MemorySegment column) {
        var mh$ = glSeparableFilter2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSeparableFilter2D", target, internalformat, width, height, format, type, row, column);
            }
            mh$.invokeExact(target, internalformat, width, height, format, type, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glShadeModel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glShadeModel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glShadeModel(GLenum mode)
     * }
     */
    public static FunctionDescriptor glShadeModel$descriptor() {
        return glShadeModel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glShadeModel(GLenum mode)
     * }
     */
    public static MethodHandle glShadeModel$handle() {
        return glShadeModel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glShadeModel(GLenum mode)
     * }
     */
    public static MemorySegment glShadeModel$address() {
        return glShadeModel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glShadeModel(GLenum mode)
     * }
     */
    public static void glShadeModel(int mode) {
        var mh$ = glShadeModel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glShadeModel", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilFunc(GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static FunctionDescriptor glStencilFunc$descriptor() {
        return glStencilFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilFunc(GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static MethodHandle glStencilFunc$handle() {
        return glStencilFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilFunc(GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static MemorySegment glStencilFunc$address() {
        return glStencilFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilFunc(GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static void glStencilFunc(int func, int ref, int mask) {
        var mh$ = glStencilFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilFunc", func, ref, mask);
            }
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilMask(GLuint mask)
     * }
     */
    public static FunctionDescriptor glStencilMask$descriptor() {
        return glStencilMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilMask(GLuint mask)
     * }
     */
    public static MethodHandle glStencilMask$handle() {
        return glStencilMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilMask(GLuint mask)
     * }
     */
    public static MemorySegment glStencilMask$address() {
        return glStencilMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilMask(GLuint mask)
     * }
     */
    public static void glStencilMask(int mask) {
        var mh$ = glStencilMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilMask", mask);
            }
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilOp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static FunctionDescriptor glStencilOp$descriptor() {
        return glStencilOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static MethodHandle glStencilOp$handle() {
        return glStencilOp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static MemorySegment glStencilOp$address() {
        return glStencilOp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static void glStencilOp(int fail, int zfail, int zpass) {
        var mh$ = glStencilOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilOp", fail, zfail, zpass);
            }
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1d(GLdouble s)
     * }
     */
    public static FunctionDescriptor glTexCoord1d$descriptor() {
        return glTexCoord1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1d(GLdouble s)
     * }
     */
    public static MethodHandle glTexCoord1d$handle() {
        return glTexCoord1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1d(GLdouble s)
     * }
     */
    public static MemorySegment glTexCoord1d$address() {
        return glTexCoord1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1d(GLdouble s)
     * }
     */
    public static void glTexCoord1d(double s) {
        var mh$ = glTexCoord1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1d", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glTexCoord1dv$descriptor() {
        return glTexCoord1dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glTexCoord1dv$handle() {
        return glTexCoord1dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glTexCoord1dv$address() {
        return glTexCoord1dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1dv(const GLdouble *v)
     * }
     */
    public static void glTexCoord1dv(MemorySegment v) {
        var mh$ = glTexCoord1dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1f(GLfloat s)
     * }
     */
    public static FunctionDescriptor glTexCoord1f$descriptor() {
        return glTexCoord1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1f(GLfloat s)
     * }
     */
    public static MethodHandle glTexCoord1f$handle() {
        return glTexCoord1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1f(GLfloat s)
     * }
     */
    public static MemorySegment glTexCoord1f$address() {
        return glTexCoord1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1f(GLfloat s)
     * }
     */
    public static void glTexCoord1f(float s) {
        var mh$ = glTexCoord1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1f", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glTexCoord1fv$descriptor() {
        return glTexCoord1fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glTexCoord1fv$handle() {
        return glTexCoord1fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glTexCoord1fv$address() {
        return glTexCoord1fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1fv(const GLfloat *v)
     * }
     */
    public static void glTexCoord1fv(MemorySegment v) {
        var mh$ = glTexCoord1fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1i(GLint s)
     * }
     */
    public static FunctionDescriptor glTexCoord1i$descriptor() {
        return glTexCoord1i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1i(GLint s)
     * }
     */
    public static MethodHandle glTexCoord1i$handle() {
        return glTexCoord1i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1i(GLint s)
     * }
     */
    public static MemorySegment glTexCoord1i$address() {
        return glTexCoord1i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1i(GLint s)
     * }
     */
    public static void glTexCoord1i(int s) {
        var mh$ = glTexCoord1i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1i", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glTexCoord1iv$descriptor() {
        return glTexCoord1iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1iv(const GLint *v)
     * }
     */
    public static MethodHandle glTexCoord1iv$handle() {
        return glTexCoord1iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1iv(const GLint *v)
     * }
     */
    public static MemorySegment glTexCoord1iv$address() {
        return glTexCoord1iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1iv(const GLint *v)
     * }
     */
    public static void glTexCoord1iv(MemorySegment v) {
        var mh$ = glTexCoord1iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1s(GLshort s)
     * }
     */
    public static FunctionDescriptor glTexCoord1s$descriptor() {
        return glTexCoord1s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1s(GLshort s)
     * }
     */
    public static MethodHandle glTexCoord1s$handle() {
        return glTexCoord1s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1s(GLshort s)
     * }
     */
    public static MemorySegment glTexCoord1s$address() {
        return glTexCoord1s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1s(GLshort s)
     * }
     */
    public static void glTexCoord1s(short s) {
        var mh$ = glTexCoord1s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1s", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord1sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord1sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord1sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glTexCoord1sv$descriptor() {
        return glTexCoord1sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord1sv(const GLshort *v)
     * }
     */
    public static MethodHandle glTexCoord1sv$handle() {
        return glTexCoord1sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord1sv(const GLshort *v)
     * }
     */
    public static MemorySegment glTexCoord1sv$address() {
        return glTexCoord1sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord1sv(const GLshort *v)
     * }
     */
    public static void glTexCoord1sv(MemorySegment v) {
        var mh$ = glTexCoord1sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord1sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2d(GLdouble s, GLdouble t)
     * }
     */
    public static FunctionDescriptor glTexCoord2d$descriptor() {
        return glTexCoord2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2d(GLdouble s, GLdouble t)
     * }
     */
    public static MethodHandle glTexCoord2d$handle() {
        return glTexCoord2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2d(GLdouble s, GLdouble t)
     * }
     */
    public static MemorySegment glTexCoord2d$address() {
        return glTexCoord2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2d(GLdouble s, GLdouble t)
     * }
     */
    public static void glTexCoord2d(double s, double t) {
        var mh$ = glTexCoord2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2d", s, t);
            }
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glTexCoord2dv$descriptor() {
        return glTexCoord2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glTexCoord2dv$handle() {
        return glTexCoord2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glTexCoord2dv$address() {
        return glTexCoord2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2dv(const GLdouble *v)
     * }
     */
    public static void glTexCoord2dv(MemorySegment v) {
        var mh$ = glTexCoord2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2f(GLfloat s, GLfloat t)
     * }
     */
    public static FunctionDescriptor glTexCoord2f$descriptor() {
        return glTexCoord2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2f(GLfloat s, GLfloat t)
     * }
     */
    public static MethodHandle glTexCoord2f$handle() {
        return glTexCoord2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2f(GLfloat s, GLfloat t)
     * }
     */
    public static MemorySegment glTexCoord2f$address() {
        return glTexCoord2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2f(GLfloat s, GLfloat t)
     * }
     */
    public static void glTexCoord2f(float s, float t) {
        var mh$ = glTexCoord2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2f", s, t);
            }
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glTexCoord2fv$descriptor() {
        return glTexCoord2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glTexCoord2fv$handle() {
        return glTexCoord2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glTexCoord2fv$address() {
        return glTexCoord2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2fv(const GLfloat *v)
     * }
     */
    public static void glTexCoord2fv(MemorySegment v) {
        var mh$ = glTexCoord2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2i(GLint s, GLint t)
     * }
     */
    public static FunctionDescriptor glTexCoord2i$descriptor() {
        return glTexCoord2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2i(GLint s, GLint t)
     * }
     */
    public static MethodHandle glTexCoord2i$handle() {
        return glTexCoord2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2i(GLint s, GLint t)
     * }
     */
    public static MemorySegment glTexCoord2i$address() {
        return glTexCoord2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2i(GLint s, GLint t)
     * }
     */
    public static void glTexCoord2i(int s, int t) {
        var mh$ = glTexCoord2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2i", s, t);
            }
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glTexCoord2iv$descriptor() {
        return glTexCoord2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2iv(const GLint *v)
     * }
     */
    public static MethodHandle glTexCoord2iv$handle() {
        return glTexCoord2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2iv(const GLint *v)
     * }
     */
    public static MemorySegment glTexCoord2iv$address() {
        return glTexCoord2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2iv(const GLint *v)
     * }
     */
    public static void glTexCoord2iv(MemorySegment v) {
        var mh$ = glTexCoord2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2s(GLshort s, GLshort t)
     * }
     */
    public static FunctionDescriptor glTexCoord2s$descriptor() {
        return glTexCoord2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2s(GLshort s, GLshort t)
     * }
     */
    public static MethodHandle glTexCoord2s$handle() {
        return glTexCoord2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2s(GLshort s, GLshort t)
     * }
     */
    public static MemorySegment glTexCoord2s$address() {
        return glTexCoord2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2s(GLshort s, GLshort t)
     * }
     */
    public static void glTexCoord2s(short s, short t) {
        var mh$ = glTexCoord2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2s", s, t);
            }
            mh$.invokeExact(s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord2sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glTexCoord2sv$descriptor() {
        return glTexCoord2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord2sv(const GLshort *v)
     * }
     */
    public static MethodHandle glTexCoord2sv$handle() {
        return glTexCoord2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord2sv(const GLshort *v)
     * }
     */
    public static MemorySegment glTexCoord2sv$address() {
        return glTexCoord2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord2sv(const GLshort *v)
     * }
     */
    public static void glTexCoord2sv(MemorySegment v) {
        var mh$ = glTexCoord2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord2sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static FunctionDescriptor glTexCoord3d$descriptor() {
        return glTexCoord3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MethodHandle glTexCoord3d$handle() {
        return glTexCoord3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MemorySegment glTexCoord3d$address() {
        return glTexCoord3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static void glTexCoord3d(double s, double t, double r) {
        var mh$ = glTexCoord3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3d", s, t, r);
            }
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glTexCoord3dv$descriptor() {
        return glTexCoord3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glTexCoord3dv$handle() {
        return glTexCoord3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glTexCoord3dv$address() {
        return glTexCoord3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3dv(const GLdouble *v)
     * }
     */
    public static void glTexCoord3dv(MemorySegment v) {
        var mh$ = glTexCoord3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static FunctionDescriptor glTexCoord3f$descriptor() {
        return glTexCoord3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MethodHandle glTexCoord3f$handle() {
        return glTexCoord3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MemorySegment glTexCoord3f$address() {
        return glTexCoord3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static void glTexCoord3f(float s, float t, float r) {
        var mh$ = glTexCoord3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3f", s, t, r);
            }
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glTexCoord3fv$descriptor() {
        return glTexCoord3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glTexCoord3fv$handle() {
        return glTexCoord3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glTexCoord3fv$address() {
        return glTexCoord3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3fv(const GLfloat *v)
     * }
     */
    public static void glTexCoord3fv(MemorySegment v) {
        var mh$ = glTexCoord3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3i(GLint s, GLint t, GLint r)
     * }
     */
    public static FunctionDescriptor glTexCoord3i$descriptor() {
        return glTexCoord3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3i(GLint s, GLint t, GLint r)
     * }
     */
    public static MethodHandle glTexCoord3i$handle() {
        return glTexCoord3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3i(GLint s, GLint t, GLint r)
     * }
     */
    public static MemorySegment glTexCoord3i$address() {
        return glTexCoord3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3i(GLint s, GLint t, GLint r)
     * }
     */
    public static void glTexCoord3i(int s, int t, int r) {
        var mh$ = glTexCoord3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3i", s, t, r);
            }
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glTexCoord3iv$descriptor() {
        return glTexCoord3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3iv(const GLint *v)
     * }
     */
    public static MethodHandle glTexCoord3iv$handle() {
        return glTexCoord3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3iv(const GLint *v)
     * }
     */
    public static MemorySegment glTexCoord3iv$address() {
        return glTexCoord3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3iv(const GLint *v)
     * }
     */
    public static void glTexCoord3iv(MemorySegment v) {
        var mh$ = glTexCoord3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3s(GLshort s, GLshort t, GLshort r)
     * }
     */
    public static FunctionDescriptor glTexCoord3s$descriptor() {
        return glTexCoord3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3s(GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MethodHandle glTexCoord3s$handle() {
        return glTexCoord3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3s(GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MemorySegment glTexCoord3s$address() {
        return glTexCoord3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3s(GLshort s, GLshort t, GLshort r)
     * }
     */
    public static void glTexCoord3s(short s, short t, short r) {
        var mh$ = glTexCoord3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3s", s, t, r);
            }
            mh$.invokeExact(s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glTexCoord3sv$descriptor() {
        return glTexCoord3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glTexCoord3sv$handle() {
        return glTexCoord3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glTexCoord3sv$address() {
        return glTexCoord3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord3sv(const GLshort *v)
     * }
     */
    public static void glTexCoord3sv(MemorySegment v) {
        var mh$ = glTexCoord3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static FunctionDescriptor glTexCoord4d$descriptor() {
        return glTexCoord4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MethodHandle glTexCoord4d$handle() {
        return glTexCoord4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MemorySegment glTexCoord4d$address() {
        return glTexCoord4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static void glTexCoord4d(double s, double t, double r, double q) {
        var mh$ = glTexCoord4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4d", s, t, r, q);
            }
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glTexCoord4dv$descriptor() {
        return glTexCoord4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glTexCoord4dv$handle() {
        return glTexCoord4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glTexCoord4dv$address() {
        return glTexCoord4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4dv(const GLdouble *v)
     * }
     */
    public static void glTexCoord4dv(MemorySegment v) {
        var mh$ = glTexCoord4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static FunctionDescriptor glTexCoord4f$descriptor() {
        return glTexCoord4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MethodHandle glTexCoord4f$handle() {
        return glTexCoord4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MemorySegment glTexCoord4f$address() {
        return glTexCoord4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static void glTexCoord4f(float s, float t, float r, float q) {
        var mh$ = glTexCoord4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4f", s, t, r, q);
            }
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glTexCoord4fv$descriptor() {
        return glTexCoord4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glTexCoord4fv$handle() {
        return glTexCoord4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glTexCoord4fv$address() {
        return glTexCoord4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4fv(const GLfloat *v)
     * }
     */
    public static void glTexCoord4fv(MemorySegment v) {
        var mh$ = glTexCoord4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static FunctionDescriptor glTexCoord4i$descriptor() {
        return glTexCoord4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MethodHandle glTexCoord4i$handle() {
        return glTexCoord4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MemorySegment glTexCoord4i$address() {
        return glTexCoord4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static void glTexCoord4i(int s, int t, int r, int q) {
        var mh$ = glTexCoord4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4i", s, t, r, q);
            }
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glTexCoord4iv$descriptor() {
        return glTexCoord4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4iv(const GLint *v)
     * }
     */
    public static MethodHandle glTexCoord4iv$handle() {
        return glTexCoord4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4iv(const GLint *v)
     * }
     */
    public static MemorySegment glTexCoord4iv$address() {
        return glTexCoord4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4iv(const GLint *v)
     * }
     */
    public static void glTexCoord4iv(MemorySegment v) {
        var mh$ = glTexCoord4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static FunctionDescriptor glTexCoord4s$descriptor() {
        return glTexCoord4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MethodHandle glTexCoord4s$handle() {
        return glTexCoord4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MemorySegment glTexCoord4s$address() {
        return glTexCoord4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static void glTexCoord4s(short s, short t, short r, short q) {
        var mh$ = glTexCoord4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4s", s, t, r, q);
            }
            mh$.invokeExact(s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoord4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoord4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoord4sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glTexCoord4sv$descriptor() {
        return glTexCoord4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoord4sv(const GLshort *v)
     * }
     */
    public static MethodHandle glTexCoord4sv$handle() {
        return glTexCoord4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoord4sv(const GLshort *v)
     * }
     */
    public static MemorySegment glTexCoord4sv$address() {
        return glTexCoord4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoord4sv(const GLshort *v)
     * }
     */
    public static void glTexCoord4sv(MemorySegment v) {
        var mh$ = glTexCoord4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoord4sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexCoordPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexCoordPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glTexCoordPointer$descriptor() {
        return glTexCoordPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glTexCoordPointer$handle() {
        return glTexCoordPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glTexCoordPointer$address() {
        return glTexCoordPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glTexCoordPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glTexCoordPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexCoordPointer", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexEnvf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexEnvf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glTexEnvf$descriptor() {
        return glTexEnvf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glTexEnvf$handle() {
        return glTexEnvf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glTexEnvf$address() {
        return glTexEnvf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static void glTexEnvf(int target, int pname, float param) {
        var mh$ = glTexEnvf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexEnvf", target, pname, param);
            }
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexEnvfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexEnvfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glTexEnvfv$descriptor() {
        return glTexEnvfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glTexEnvfv$handle() {
        return glTexEnvfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glTexEnvfv$address() {
        return glTexEnvfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glTexEnvfv(int target, int pname, MemorySegment params) {
        var mh$ = glTexEnvfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexEnvfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexEnvi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexEnvi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexEnvi(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glTexEnvi$descriptor() {
        return glTexEnvi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexEnvi(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glTexEnvi$handle() {
        return glTexEnvi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexEnvi(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glTexEnvi$address() {
        return glTexEnvi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexEnvi(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static void glTexEnvi(int target, int pname, int param) {
        var mh$ = glTexEnvi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexEnvi", target, pname, param);
            }
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexEnviv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexEnviv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexEnviv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glTexEnviv$descriptor() {
        return glTexEnviv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexEnviv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glTexEnviv$handle() {
        return glTexEnviv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexEnviv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glTexEnviv$address() {
        return glTexEnviv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexEnviv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static void glTexEnviv(int target, int pname, MemorySegment params) {
        var mh$ = glTexEnviv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexEnviv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGend(GLenum coord, GLenum pname, GLdouble param)
     * }
     */
    public static FunctionDescriptor glTexGend$descriptor() {
        return glTexGend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGend(GLenum coord, GLenum pname, GLdouble param)
     * }
     */
    public static MethodHandle glTexGend$handle() {
        return glTexGend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGend(GLenum coord, GLenum pname, GLdouble param)
     * }
     */
    public static MemorySegment glTexGend$address() {
        return glTexGend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGend(GLenum coord, GLenum pname, GLdouble param)
     * }
     */
    public static void glTexGend(int coord, int pname, double param) {
        var mh$ = glTexGend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGend", coord, pname, param);
            }
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGendv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGendv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
     * }
     */
    public static FunctionDescriptor glTexGendv$descriptor() {
        return glTexGendv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
     * }
     */
    public static MethodHandle glTexGendv$handle() {
        return glTexGendv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
     * }
     */
    public static MemorySegment glTexGendv$address() {
        return glTexGendv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
     * }
     */
    public static void glTexGendv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGendv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGendv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGenf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGenf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glTexGenf$descriptor() {
        return glTexGenf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glTexGenf$handle() {
        return glTexGenf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glTexGenf$address() {
        return glTexGenf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
     * }
     */
    public static void glTexGenf(int coord, int pname, float param) {
        var mh$ = glTexGenf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGenf", coord, pname, param);
            }
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGenfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGenfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glTexGenfv$descriptor() {
        return glTexGenfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glTexGenfv$handle() {
        return glTexGenfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glTexGenfv$address() {
        return glTexGenfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glTexGenfv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGenfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGenfv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGeni {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGeni");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGeni(GLenum coord, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glTexGeni$descriptor() {
        return glTexGeni.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGeni(GLenum coord, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glTexGeni$handle() {
        return glTexGeni.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGeni(GLenum coord, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glTexGeni$address() {
        return glTexGeni.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGeni(GLenum coord, GLenum pname, GLint param)
     * }
     */
    public static void glTexGeni(int coord, int pname, int param) {
        var mh$ = glTexGeni.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGeni", coord, pname, param);
            }
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexGeniv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexGeniv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glTexGeniv$descriptor() {
        return glTexGeniv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glTexGeniv$handle() {
        return glTexGeniv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glTexGeniv$address() {
        return glTexGeniv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
     * }
     */
    public static void glTexGeniv(int coord, int pname, MemorySegment params) {
        var mh$ = glTexGeniv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexGeniv", coord, pname, params);
            }
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexImage1D$descriptor() {
        return glTexImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexImage1D$handle() {
        return glTexImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexImage1D$address() {
        return glTexImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexImage1D(int target, int level, int internalformat, int width, int border, int format, int type, MemorySegment pixels) {
        var mh$ = glTexImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexImage1D", target, level, internalformat, width, border, format, type, pixels);
            }
            mh$.invokeExact(target, level, internalformat, width, border, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexImage2D$descriptor() {
        return glTexImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexImage2D$handle() {
        return glTexImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexImage2D$address() {
        return glTexImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexImage2D(int target, int level, int internalformat, int width, int height, int border, int format, int type, MemorySegment pixels) {
        var mh$ = glTexImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexImage2D", target, level, internalformat, width, height, border, format, type, pixels);
            }
            mh$.invokeExact(target, level, internalformat, width, height, border, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexImage3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexImage3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexImage3D$descriptor() {
        return glTexImage3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexImage3D$handle() {
        return glTexImage3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexImage3D$address() {
        return glTexImage3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, MemorySegment pixels) {
        var mh$ = glTexImage3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexImage3D", target, level, internalformat, width, height, depth, border, format, type, pixels);
            }
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glTexParameterf$descriptor() {
        return glTexParameterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glTexParameterf$handle() {
        return glTexParameterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glTexParameterf$address() {
        return glTexParameterf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
     * }
     */
    public static void glTexParameterf(int target, int pname, float param) {
        var mh$ = glTexParameterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameterf", target, pname, param);
            }
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glTexParameterfv$descriptor() {
        return glTexParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glTexParameterfv$handle() {
        return glTexParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glTexParameterfv$address() {
        return glTexParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
     * }
     */
    public static void glTexParameterfv(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameterfv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameteri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameteri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameteri(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glTexParameteri$descriptor() {
        return glTexParameteri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameteri(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glTexParameteri$handle() {
        return glTexParameteri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameteri(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glTexParameteri$address() {
        return glTexParameteri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameteri(GLenum target, GLenum pname, GLint param)
     * }
     */
    public static void glTexParameteri(int target, int pname, int param) {
        var mh$ = glTexParameteri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameteri", target, pname, param);
            }
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glTexParameteriv$descriptor() {
        return glTexParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glTexParameteriv$handle() {
        return glTexParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glTexParameteriv$address() {
        return glTexParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
     * }
     */
    public static void glTexParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glTexParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexSubImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexSubImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexSubImage1D$descriptor() {
        return glTexSubImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexSubImage1D$handle() {
        return glTexSubImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexSubImage1D$address() {
        return glTexSubImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, MemorySegment pixels) {
        var mh$ = glTexSubImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexSubImage1D", target, level, xoffset, width, format, type, pixels);
            }
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexSubImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexSubImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexSubImage2D$descriptor() {
        return glTexSubImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexSubImage2D$handle() {
        return glTexSubImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexSubImage2D$address() {
        return glTexSubImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, MemorySegment pixels) {
        var mh$ = glTexSubImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexSubImage2D", target, level, xoffset, yoffset, width, height, format, type, pixels);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTexSubImage3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTexSubImage3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static FunctionDescriptor glTexSubImage3D$descriptor() {
        return glTexSubImage3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MethodHandle glTexSubImage3D$handle() {
        return glTexSubImage3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static MemorySegment glTexSubImage3D$address() {
        return glTexSubImage3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
     * }
     */
    public static void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, MemorySegment pixels) {
        var mh$ = glTexSubImage3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTexSubImage3D", target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTranslated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTranslated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glTranslated$descriptor() {
        return glTranslated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glTranslated$handle() {
        return glTranslated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glTranslated$address() {
        return glTranslated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTranslated(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glTranslated(double x, double y, double z) {
        var mh$ = glTranslated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTranslated", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glTranslatef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glTranslatef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glTranslatef$descriptor() {
        return glTranslatef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glTranslatef$handle() {
        return glTranslatef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glTranslatef$address() {
        return glTranslatef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glTranslatef(float x, float y, float z) {
        var mh$ = glTranslatef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glTranslatef", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glVertex2d$descriptor() {
        return glVertex2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glVertex2d$handle() {
        return glVertex2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glVertex2d$address() {
        return glVertex2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2d(GLdouble x, GLdouble y)
     * }
     */
    public static void glVertex2d(double x, double y) {
        var mh$ = glVertex2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2d", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex2dv$descriptor() {
        return glVertex2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex2dv$handle() {
        return glVertex2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex2dv$address() {
        return glVertex2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2dv(const GLdouble *v)
     * }
     */
    public static void glVertex2dv(MemorySegment v) {
        var mh$ = glVertex2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glVertex2f$descriptor() {
        return glVertex2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glVertex2f$handle() {
        return glVertex2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glVertex2f$address() {
        return glVertex2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2f(GLfloat x, GLfloat y)
     * }
     */
    public static void glVertex2f(float x, float y) {
        var mh$ = glVertex2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2f", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex2fv$descriptor() {
        return glVertex2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex2fv$handle() {
        return glVertex2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex2fv$address() {
        return glVertex2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2fv(const GLfloat *v)
     * }
     */
    public static void glVertex2fv(MemorySegment v) {
        var mh$ = glVertex2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2i(GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glVertex2i$descriptor() {
        return glVertex2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2i(GLint x, GLint y)
     * }
     */
    public static MethodHandle glVertex2i$handle() {
        return glVertex2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2i(GLint x, GLint y)
     * }
     */
    public static MemorySegment glVertex2i$address() {
        return glVertex2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2i(GLint x, GLint y)
     * }
     */
    public static void glVertex2i(int x, int y) {
        var mh$ = glVertex2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2i", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex2iv$descriptor() {
        return glVertex2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex2iv$handle() {
        return glVertex2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex2iv$address() {
        return glVertex2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2iv(const GLint *v)
     * }
     */
    public static void glVertex2iv(MemorySegment v) {
        var mh$ = glVertex2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glVertex2s$descriptor() {
        return glVertex2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glVertex2s$handle() {
        return glVertex2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glVertex2s$address() {
        return glVertex2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2s(GLshort x, GLshort y)
     * }
     */
    public static void glVertex2s(short x, short y) {
        var mh$ = glVertex2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2s", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex2sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex2sv$descriptor() {
        return glVertex2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex2sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex2sv$handle() {
        return glVertex2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex2sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex2sv$address() {
        return glVertex2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex2sv(const GLshort *v)
     * }
     */
    public static void glVertex2sv(MemorySegment v) {
        var mh$ = glVertex2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex2sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glVertex3d$descriptor() {
        return glVertex3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glVertex3d$handle() {
        return glVertex3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glVertex3d$address() {
        return glVertex3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glVertex3d(double x, double y, double z) {
        var mh$ = glVertex3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3d", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex3dv$descriptor() {
        return glVertex3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex3dv$handle() {
        return glVertex3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex3dv$address() {
        return glVertex3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3dv(const GLdouble *v)
     * }
     */
    public static void glVertex3dv(MemorySegment v) {
        var mh$ = glVertex3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glVertex3f$descriptor() {
        return glVertex3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glVertex3f$handle() {
        return glVertex3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glVertex3f$address() {
        return glVertex3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glVertex3f(float x, float y, float z) {
        var mh$ = glVertex3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3f", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex3fv$descriptor() {
        return glVertex3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex3fv$handle() {
        return glVertex3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex3fv$address() {
        return glVertex3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3fv(const GLfloat *v)
     * }
     */
    public static void glVertex3fv(MemorySegment v) {
        var mh$ = glVertex3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glVertex3i$descriptor() {
        return glVertex3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glVertex3i$handle() {
        return glVertex3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glVertex3i$address() {
        return glVertex3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3i(GLint x, GLint y, GLint z)
     * }
     */
    public static void glVertex3i(int x, int y, int z) {
        var mh$ = glVertex3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3i", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex3iv$descriptor() {
        return glVertex3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex3iv$handle() {
        return glVertex3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex3iv$address() {
        return glVertex3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3iv(const GLint *v)
     * }
     */
    public static void glVertex3iv(MemorySegment v) {
        var mh$ = glVertex3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glVertex3s$descriptor() {
        return glVertex3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glVertex3s$handle() {
        return glVertex3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glVertex3s$address() {
        return glVertex3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glVertex3s(short x, short y, short z) {
        var mh$ = glVertex3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3s", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex3sv$descriptor() {
        return glVertex3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex3sv$handle() {
        return glVertex3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex3sv$address() {
        return glVertex3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex3sv(const GLshort *v)
     * }
     */
    public static void glVertex3sv(MemorySegment v) {
        var mh$ = glVertex3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glVertex4d$descriptor() {
        return glVertex4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glVertex4d$handle() {
        return glVertex4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glVertex4d$address() {
        return glVertex4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glVertex4d(double x, double y, double z, double w) {
        var mh$ = glVertex4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4d", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertex4dv$descriptor() {
        return glVertex4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glVertex4dv$handle() {
        return glVertex4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glVertex4dv$address() {
        return glVertex4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4dv(const GLdouble *v)
     * }
     */
    public static void glVertex4dv(MemorySegment v) {
        var mh$ = glVertex4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glVertex4f$descriptor() {
        return glVertex4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glVertex4f$handle() {
        return glVertex4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glVertex4f$address() {
        return glVertex4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glVertex4f(float x, float y, float z, float w) {
        var mh$ = glVertex4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4f", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertex4fv$descriptor() {
        return glVertex4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glVertex4fv$handle() {
        return glVertex4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glVertex4fv$address() {
        return glVertex4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4fv(const GLfloat *v)
     * }
     */
    public static void glVertex4fv(MemorySegment v) {
        var mh$ = glVertex4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static FunctionDescriptor glVertex4i$descriptor() {
        return glVertex4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MethodHandle glVertex4i$handle() {
        return glVertex4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static MemorySegment glVertex4i$address() {
        return glVertex4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4i(GLint x, GLint y, GLint z, GLint w)
     * }
     */
    public static void glVertex4i(int x, int y, int z, int w) {
        var mh$ = glVertex4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4i", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertex4iv$descriptor() {
        return glVertex4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4iv(const GLint *v)
     * }
     */
    public static MethodHandle glVertex4iv$handle() {
        return glVertex4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4iv(const GLint *v)
     * }
     */
    public static MemorySegment glVertex4iv$address() {
        return glVertex4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4iv(const GLint *v)
     * }
     */
    public static void glVertex4iv(MemorySegment v) {
        var mh$ = glVertex4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static FunctionDescriptor glVertex4s$descriptor() {
        return glVertex4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MethodHandle glVertex4s$handle() {
        return glVertex4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MemorySegment glVertex4s$address() {
        return glVertex4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static void glVertex4s(short x, short y, short z, short w) {
        var mh$ = glVertex4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4s", x, y, z, w);
            }
            mh$.invokeExact(x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertex4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertex4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertex4sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertex4sv$descriptor() {
        return glVertex4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertex4sv(const GLshort *v)
     * }
     */
    public static MethodHandle glVertex4sv$handle() {
        return glVertex4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertex4sv(const GLshort *v)
     * }
     */
    public static MemorySegment glVertex4sv$address() {
        return glVertex4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertex4sv(const GLshort *v)
     * }
     */
    public static void glVertex4sv(MemorySegment v) {
        var mh$ = glVertex4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertex4sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glVertexPointer$descriptor() {
        return glVertexPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glVertexPointer$handle() {
        return glVertexPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glVertexPointer$address() {
        return glVertexPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glVertexPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glVertexPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexPointer", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static FunctionDescriptor glViewport$descriptor() {
        return glViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MethodHandle glViewport$handle() {
        return glViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static MemorySegment glViewport$address() {
        return glViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
     * }
     */
    public static void glViewport(int x, int y, int width, int height) {
        var mh$ = glViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glViewport", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSampleCoverage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSampleCoverage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSampleCoverage(GLclampf value, GLboolean invert)
     * }
     */
    public static FunctionDescriptor glSampleCoverage$descriptor() {
        return glSampleCoverage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSampleCoverage(GLclampf value, GLboolean invert)
     * }
     */
    public static MethodHandle glSampleCoverage$handle() {
        return glSampleCoverage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSampleCoverage(GLclampf value, GLboolean invert)
     * }
     */
    public static MemorySegment glSampleCoverage$address() {
        return glSampleCoverage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSampleCoverage(GLclampf value, GLboolean invert)
     * }
     */
    public static void glSampleCoverage(float value, byte invert) {
        var mh$ = glSampleCoverage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSampleCoverage", value, invert);
            }
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadTransposeMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadTransposeMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glLoadTransposeMatrixf$descriptor() {
        return glLoadTransposeMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glLoadTransposeMatrixf$handle() {
        return glLoadTransposeMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glLoadTransposeMatrixf$address() {
        return glLoadTransposeMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static void glLoadTransposeMatrixf(MemorySegment m) {
        var mh$ = glLoadTransposeMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadTransposeMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLoadTransposeMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLoadTransposeMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glLoadTransposeMatrixd$descriptor() {
        return glLoadTransposeMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glLoadTransposeMatrixd$handle() {
        return glLoadTransposeMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glLoadTransposeMatrixd$address() {
        return glLoadTransposeMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLoadTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static void glLoadTransposeMatrixd(MemorySegment m) {
        var mh$ = glLoadTransposeMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLoadTransposeMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultTransposeMatrixf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultTransposeMatrixf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static FunctionDescriptor glMultTransposeMatrixf$descriptor() {
        return glMultTransposeMatrixf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static MethodHandle glMultTransposeMatrixf$handle() {
        return glMultTransposeMatrixf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static MemorySegment glMultTransposeMatrixf$address() {
        return glMultTransposeMatrixf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixf(const GLfloat *m)
     * }
     */
    public static void glMultTransposeMatrixf(MemorySegment m) {
        var mh$ = glMultTransposeMatrixf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultTransposeMatrixf", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultTransposeMatrixd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultTransposeMatrixd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static FunctionDescriptor glMultTransposeMatrixd$descriptor() {
        return glMultTransposeMatrixd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static MethodHandle glMultTransposeMatrixd$handle() {
        return glMultTransposeMatrixd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static MemorySegment glMultTransposeMatrixd$address() {
        return glMultTransposeMatrixd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultTransposeMatrixd(const GLdouble *m)
     * }
     */
    public static void glMultTransposeMatrixd(MemorySegment m) {
        var mh$ = glMultTransposeMatrixd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultTransposeMatrixd", m);
            }
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage3D$descriptor() {
        return glCompressedTexImage3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage3D$handle() {
        return glCompressedTexImage3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage3D$address() {
        return glCompressedTexImage3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage3D", target, level, internalformat, width, height, depth, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage2D$descriptor() {
        return glCompressedTexImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage2D$handle() {
        return glCompressedTexImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage2D$address() {
        return glCompressedTexImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage2D", target, level, internalformat, width, height, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexImage1D$descriptor() {
        return glCompressedTexImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexImage1D$handle() {
        return glCompressedTexImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexImage1D$address() {
        return glCompressedTexImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexImage1D", target, level, internalformat, width, border, imageSize, data);
            }
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage3D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage3D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage3D$descriptor() {
        return glCompressedTexSubImage3D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage3D$handle() {
        return glCompressedTexSubImage3D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage3D$address() {
        return glCompressedTexSubImage3D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage3D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage3D", target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage2D$descriptor() {
        return glCompressedTexSubImage2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage2D$handle() {
        return glCompressedTexSubImage2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage2D$address() {
        return glCompressedTexSubImage2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage2D", target, level, xoffset, yoffset, width, height, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompressedTexSubImage1D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompressedTexSubImage1D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glCompressedTexSubImage1D$descriptor() {
        return glCompressedTexSubImage1D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MethodHandle glCompressedTexSubImage1D$handle() {
        return glCompressedTexSubImage1D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static MemorySegment glCompressedTexSubImage1D$address() {
        return glCompressedTexSubImage1D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
     * }
     */
    public static void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, MemorySegment data) {
        var mh$ = glCompressedTexSubImage1D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompressedTexSubImage1D", target, level, xoffset, width, format, imageSize, data);
            }
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetCompressedTexImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetCompressedTexImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
     * }
     */
    public static FunctionDescriptor glGetCompressedTexImage$descriptor() {
        return glGetCompressedTexImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
     * }
     */
    public static MethodHandle glGetCompressedTexImage$handle() {
        return glGetCompressedTexImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
     * }
     */
    public static MemorySegment glGetCompressedTexImage$address() {
        return glGetCompressedTexImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
     * }
     */
    public static void glGetCompressedTexImage(int target, int lod, MemorySegment img) {
        var mh$ = glGetCompressedTexImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetCompressedTexImage", target, lod, img);
            }
            mh$.invokeExact(target, lod, img);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glActiveTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glActiveTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glActiveTexture(GLenum texture)
     * }
     */
    public static FunctionDescriptor glActiveTexture$descriptor() {
        return glActiveTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glActiveTexture(GLenum texture)
     * }
     */
    public static MethodHandle glActiveTexture$handle() {
        return glActiveTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glActiveTexture(GLenum texture)
     * }
     */
    public static MemorySegment glActiveTexture$address() {
        return glActiveTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glActiveTexture(GLenum texture)
     * }
     */
    public static void glActiveTexture(int texture) {
        var mh$ = glActiveTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glActiveTexture", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glClientActiveTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glClientActiveTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glClientActiveTexture(GLenum texture)
     * }
     */
    public static FunctionDescriptor glClientActiveTexture$descriptor() {
        return glClientActiveTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glClientActiveTexture(GLenum texture)
     * }
     */
    public static MethodHandle glClientActiveTexture$handle() {
        return glClientActiveTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glClientActiveTexture(GLenum texture)
     * }
     */
    public static MemorySegment glClientActiveTexture$address() {
        return glClientActiveTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glClientActiveTexture(GLenum texture)
     * }
     */
    public static void glClientActiveTexture(int texture) {
        var mh$ = glClientActiveTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glClientActiveTexture", texture);
            }
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1d(GLenum target, GLdouble s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1d$descriptor() {
        return glMultiTexCoord1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1d(GLenum target, GLdouble s)
     * }
     */
    public static MethodHandle glMultiTexCoord1d$handle() {
        return glMultiTexCoord1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1d(GLenum target, GLdouble s)
     * }
     */
    public static MemorySegment glMultiTexCoord1d$address() {
        return glMultiTexCoord1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1d(GLenum target, GLdouble s)
     * }
     */
    public static void glMultiTexCoord1d(int target, double s) {
        var mh$ = glMultiTexCoord1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1d", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dv(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1dv$descriptor() {
        return glMultiTexCoord1dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1dv$handle() {
        return glMultiTexCoord1dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1dv$address() {
        return glMultiTexCoord1dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1dv(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord1dv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1dv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1f(GLenum target, GLfloat s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1f$descriptor() {
        return glMultiTexCoord1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1f(GLenum target, GLfloat s)
     * }
     */
    public static MethodHandle glMultiTexCoord1f$handle() {
        return glMultiTexCoord1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1f(GLenum target, GLfloat s)
     * }
     */
    public static MemorySegment glMultiTexCoord1f$address() {
        return glMultiTexCoord1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1f(GLenum target, GLfloat s)
     * }
     */
    public static void glMultiTexCoord1f(int target, float s) {
        var mh$ = glMultiTexCoord1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1f", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fv(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1fv$descriptor() {
        return glMultiTexCoord1fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1fv$handle() {
        return glMultiTexCoord1fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1fv$address() {
        return glMultiTexCoord1fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1fv(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord1fv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1fv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1i(GLenum target, GLint s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1i$descriptor() {
        return glMultiTexCoord1i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1i(GLenum target, GLint s)
     * }
     */
    public static MethodHandle glMultiTexCoord1i$handle() {
        return glMultiTexCoord1i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1i(GLenum target, GLint s)
     * }
     */
    public static MemorySegment glMultiTexCoord1i$address() {
        return glMultiTexCoord1i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1i(GLenum target, GLint s)
     * }
     */
    public static void glMultiTexCoord1i(int target, int s) {
        var mh$ = glMultiTexCoord1i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1i", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iv(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1iv$descriptor() {
        return glMultiTexCoord1iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iv(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1iv$handle() {
        return glMultiTexCoord1iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iv(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1iv$address() {
        return glMultiTexCoord1iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1iv(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord1iv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1iv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1s(GLenum target, GLshort s)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1s$descriptor() {
        return glMultiTexCoord1s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1s(GLenum target, GLshort s)
     * }
     */
    public static MethodHandle glMultiTexCoord1s$handle() {
        return glMultiTexCoord1s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1s(GLenum target, GLshort s)
     * }
     */
    public static MemorySegment glMultiTexCoord1s$address() {
        return glMultiTexCoord1s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1s(GLenum target, GLshort s)
     * }
     */
    public static void glMultiTexCoord1s(int target, short s) {
        var mh$ = glMultiTexCoord1s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1s", target, s);
            }
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord1sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord1sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sv(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord1sv$descriptor() {
        return glMultiTexCoord1sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sv(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord1sv$handle() {
        return glMultiTexCoord1sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sv(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord1sv$address() {
        return glMultiTexCoord1sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord1sv(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord1sv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord1sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord1sv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2d$descriptor() {
        return glMultiTexCoord2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static MethodHandle glMultiTexCoord2d$handle() {
        return glMultiTexCoord2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static MemorySegment glMultiTexCoord2d$address() {
        return glMultiTexCoord2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
     * }
     */
    public static void glMultiTexCoord2d(int target, double s, double t) {
        var mh$ = glMultiTexCoord2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2d", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dv(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2dv$descriptor() {
        return glMultiTexCoord2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2dv$handle() {
        return glMultiTexCoord2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2dv$address() {
        return glMultiTexCoord2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2dv(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord2dv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2dv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2f$descriptor() {
        return glMultiTexCoord2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static MethodHandle glMultiTexCoord2f$handle() {
        return glMultiTexCoord2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static MemorySegment glMultiTexCoord2f$address() {
        return glMultiTexCoord2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
     * }
     */
    public static void glMultiTexCoord2f(int target, float s, float t) {
        var mh$ = glMultiTexCoord2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2f", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fv(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2fv$descriptor() {
        return glMultiTexCoord2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2fv$handle() {
        return glMultiTexCoord2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2fv$address() {
        return glMultiTexCoord2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2fv(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord2fv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2fv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2i$descriptor() {
        return glMultiTexCoord2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
     * }
     */
    public static MethodHandle glMultiTexCoord2i$handle() {
        return glMultiTexCoord2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
     * }
     */
    public static MemorySegment glMultiTexCoord2i$address() {
        return glMultiTexCoord2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
     * }
     */
    public static void glMultiTexCoord2i(int target, int s, int t) {
        var mh$ = glMultiTexCoord2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2i", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iv(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2iv$descriptor() {
        return glMultiTexCoord2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iv(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2iv$handle() {
        return glMultiTexCoord2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iv(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2iv$address() {
        return glMultiTexCoord2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2iv(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord2iv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2iv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2s$descriptor() {
        return glMultiTexCoord2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static MethodHandle glMultiTexCoord2s$handle() {
        return glMultiTexCoord2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static MemorySegment glMultiTexCoord2s$address() {
        return glMultiTexCoord2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
     * }
     */
    public static void glMultiTexCoord2s(int target, short s, short t) {
        var mh$ = glMultiTexCoord2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2s", target, s, t);
            }
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sv(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord2sv$descriptor() {
        return glMultiTexCoord2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sv(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord2sv$handle() {
        return glMultiTexCoord2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sv(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord2sv$address() {
        return glMultiTexCoord2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord2sv(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord2sv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord2sv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3d$descriptor() {
        return glMultiTexCoord3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MethodHandle glMultiTexCoord3d$handle() {
        return glMultiTexCoord3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static MemorySegment glMultiTexCoord3d$address() {
        return glMultiTexCoord3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
     * }
     */
    public static void glMultiTexCoord3d(int target, double s, double t, double r) {
        var mh$ = glMultiTexCoord3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3d", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dv(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3dv$descriptor() {
        return glMultiTexCoord3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3dv$handle() {
        return glMultiTexCoord3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3dv$address() {
        return glMultiTexCoord3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3dv(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord3dv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3dv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3f$descriptor() {
        return glMultiTexCoord3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MethodHandle glMultiTexCoord3f$handle() {
        return glMultiTexCoord3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static MemorySegment glMultiTexCoord3f$address() {
        return glMultiTexCoord3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
     * }
     */
    public static void glMultiTexCoord3f(int target, float s, float t, float r) {
        var mh$ = glMultiTexCoord3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3f", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fv(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3fv$descriptor() {
        return glMultiTexCoord3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3fv$handle() {
        return glMultiTexCoord3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3fv$address() {
        return glMultiTexCoord3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3fv(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord3fv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3fv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3i$descriptor() {
        return glMultiTexCoord3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static MethodHandle glMultiTexCoord3i$handle() {
        return glMultiTexCoord3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static MemorySegment glMultiTexCoord3i$address() {
        return glMultiTexCoord3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
     * }
     */
    public static void glMultiTexCoord3i(int target, int s, int t, int r) {
        var mh$ = glMultiTexCoord3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3i", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iv(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3iv$descriptor() {
        return glMultiTexCoord3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iv(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3iv$handle() {
        return glMultiTexCoord3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iv(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3iv$address() {
        return glMultiTexCoord3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3iv(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord3iv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3iv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3s$descriptor() {
        return glMultiTexCoord3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MethodHandle glMultiTexCoord3s$handle() {
        return glMultiTexCoord3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static MemorySegment glMultiTexCoord3s$address() {
        return glMultiTexCoord3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
     * }
     */
    public static void glMultiTexCoord3s(int target, short s, short t, short r) {
        var mh$ = glMultiTexCoord3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3s", target, s, t, r);
            }
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sv(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord3sv$descriptor() {
        return glMultiTexCoord3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sv(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord3sv$handle() {
        return glMultiTexCoord3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sv(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord3sv$address() {
        return glMultiTexCoord3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord3sv(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord3sv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord3sv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4d$descriptor() {
        return glMultiTexCoord4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MethodHandle glMultiTexCoord4d$handle() {
        return glMultiTexCoord4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static MemorySegment glMultiTexCoord4d$address() {
        return glMultiTexCoord4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
     * }
     */
    public static void glMultiTexCoord4d(int target, double s, double t, double r, double q) {
        var mh$ = glMultiTexCoord4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4d", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dv(GLenum target, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4dv$descriptor() {
        return glMultiTexCoord4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4dv$handle() {
        return glMultiTexCoord4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dv(GLenum target, const GLdouble *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4dv$address() {
        return glMultiTexCoord4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4dv(GLenum target, const GLdouble *v)
     * }
     */
    public static void glMultiTexCoord4dv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4dv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4f$descriptor() {
        return glMultiTexCoord4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MethodHandle glMultiTexCoord4f$handle() {
        return glMultiTexCoord4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static MemorySegment glMultiTexCoord4f$address() {
        return glMultiTexCoord4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
     * }
     */
    public static void glMultiTexCoord4f(int target, float s, float t, float r, float q) {
        var mh$ = glMultiTexCoord4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4f", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fv(GLenum target, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4fv$descriptor() {
        return glMultiTexCoord4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4fv$handle() {
        return glMultiTexCoord4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fv(GLenum target, const GLfloat *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4fv$address() {
        return glMultiTexCoord4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4fv(GLenum target, const GLfloat *v)
     * }
     */
    public static void glMultiTexCoord4fv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4fv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4i$descriptor() {
        return glMultiTexCoord4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MethodHandle glMultiTexCoord4i$handle() {
        return glMultiTexCoord4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static MemorySegment glMultiTexCoord4i$address() {
        return glMultiTexCoord4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
     * }
     */
    public static void glMultiTexCoord4i(int target, int s, int t, int r, int q) {
        var mh$ = glMultiTexCoord4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4i", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iv(GLenum target, const GLint *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4iv$descriptor() {
        return glMultiTexCoord4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iv(GLenum target, const GLint *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4iv$handle() {
        return glMultiTexCoord4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iv(GLenum target, const GLint *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4iv$address() {
        return glMultiTexCoord4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4iv(GLenum target, const GLint *v)
     * }
     */
    public static void glMultiTexCoord4iv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4iv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4s$descriptor() {
        return glMultiTexCoord4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MethodHandle glMultiTexCoord4s$handle() {
        return glMultiTexCoord4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static MemorySegment glMultiTexCoord4s$address() {
        return glMultiTexCoord4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
     * }
     */
    public static void glMultiTexCoord4s(int target, short s, short t, short r, short q) {
        var mh$ = glMultiTexCoord4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4s", target, s, t, r, q);
            }
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiTexCoord4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiTexCoord4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sv(GLenum target, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glMultiTexCoord4sv$descriptor() {
        return glMultiTexCoord4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sv(GLenum target, const GLshort *v)
     * }
     */
    public static MethodHandle glMultiTexCoord4sv$handle() {
        return glMultiTexCoord4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sv(GLenum target, const GLshort *v)
     * }
     */
    public static MemorySegment glMultiTexCoord4sv$address() {
        return glMultiTexCoord4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiTexCoord4sv(GLenum target, const GLshort *v)
     * }
     */
    public static void glMultiTexCoord4sv(int target, MemorySegment v) {
        var mh$ = glMultiTexCoord4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiTexCoord4sv", target, v);
            }
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordf(GLfloat coord)
     * }
     */
    public static FunctionDescriptor glFogCoordf$descriptor() {
        return glFogCoordf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordf(GLfloat coord)
     * }
     */
    public static MethodHandle glFogCoordf$handle() {
        return glFogCoordf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordf(GLfloat coord)
     * }
     */
    public static MemorySegment glFogCoordf$address() {
        return glFogCoordf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordf(GLfloat coord)
     * }
     */
    public static void glFogCoordf(float coord) {
        var mh$ = glFogCoordf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordf", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordfv(const GLfloat *coord)
     * }
     */
    public static FunctionDescriptor glFogCoordfv$descriptor() {
        return glFogCoordfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordfv(const GLfloat *coord)
     * }
     */
    public static MethodHandle glFogCoordfv$handle() {
        return glFogCoordfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordfv(const GLfloat *coord)
     * }
     */
    public static MemorySegment glFogCoordfv$address() {
        return glFogCoordfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordfv(const GLfloat *coord)
     * }
     */
    public static void glFogCoordfv(MemorySegment coord) {
        var mh$ = glFogCoordfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordfv", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordd(GLdouble coord)
     * }
     */
    public static FunctionDescriptor glFogCoordd$descriptor() {
        return glFogCoordd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordd(GLdouble coord)
     * }
     */
    public static MethodHandle glFogCoordd$handle() {
        return glFogCoordd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordd(GLdouble coord)
     * }
     */
    public static MemorySegment glFogCoordd$address() {
        return glFogCoordd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordd(GLdouble coord)
     * }
     */
    public static void glFogCoordd(double coord) {
        var mh$ = glFogCoordd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordd", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoorddv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoorddv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoorddv(const GLdouble *coord)
     * }
     */
    public static FunctionDescriptor glFogCoorddv$descriptor() {
        return glFogCoorddv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoorddv(const GLdouble *coord)
     * }
     */
    public static MethodHandle glFogCoorddv$handle() {
        return glFogCoorddv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoorddv(const GLdouble *coord)
     * }
     */
    public static MemorySegment glFogCoorddv$address() {
        return glFogCoorddv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoorddv(const GLdouble *coord)
     * }
     */
    public static void glFogCoorddv(MemorySegment coord) {
        var mh$ = glFogCoorddv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoorddv", coord);
            }
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glFogCoordPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glFogCoordPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glFogCoordPointer$descriptor() {
        return glFogCoordPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glFogCoordPointer$handle() {
        return glFogCoordPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glFogCoordPointer$address() {
        return glFogCoordPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glFogCoordPointer(int type, int stride, MemorySegment pointer) {
        var mh$ = glFogCoordPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glFogCoordPointer", type, stride, pointer);
            }
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3b {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3b");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3b$descriptor() {
        return glSecondaryColor3b.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MethodHandle glSecondaryColor3b$handle() {
        return glSecondaryColor3b.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static MemorySegment glSecondaryColor3b$address() {
        return glSecondaryColor3b.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
     * }
     */
    public static void glSecondaryColor3b(byte red, byte green, byte blue) {
        var mh$ = glSecondaryColor3b.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3b", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3bv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3bv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bv(const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3bv$descriptor() {
        return glSecondaryColor3bv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bv(const GLbyte *v)
     * }
     */
    public static MethodHandle glSecondaryColor3bv$handle() {
        return glSecondaryColor3bv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3bv(const GLbyte *v)
     * }
     */
    public static MemorySegment glSecondaryColor3bv$address() {
        return glSecondaryColor3bv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3bv(const GLbyte *v)
     * }
     */
    public static void glSecondaryColor3bv(MemorySegment v) {
        var mh$ = glSecondaryColor3bv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3bv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3d$descriptor() {
        return glSecondaryColor3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MethodHandle glSecondaryColor3d$handle() {
        return glSecondaryColor3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static MemorySegment glSecondaryColor3d$address() {
        return glSecondaryColor3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
     * }
     */
    public static void glSecondaryColor3d(double red, double green, double blue) {
        var mh$ = glSecondaryColor3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3d", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3dv$descriptor() {
        return glSecondaryColor3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glSecondaryColor3dv$handle() {
        return glSecondaryColor3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glSecondaryColor3dv$address() {
        return glSecondaryColor3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3dv(const GLdouble *v)
     * }
     */
    public static void glSecondaryColor3dv(MemorySegment v) {
        var mh$ = glSecondaryColor3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3f$descriptor() {
        return glSecondaryColor3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MethodHandle glSecondaryColor3f$handle() {
        return glSecondaryColor3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MemorySegment glSecondaryColor3f$address() {
        return glSecondaryColor3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static void glSecondaryColor3f(float red, float green, float blue) {
        var mh$ = glSecondaryColor3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3f", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3fv$descriptor() {
        return glSecondaryColor3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glSecondaryColor3fv$handle() {
        return glSecondaryColor3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glSecondaryColor3fv$address() {
        return glSecondaryColor3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3fv(const GLfloat *v)
     * }
     */
    public static void glSecondaryColor3fv(MemorySegment v) {
        var mh$ = glSecondaryColor3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3i$descriptor() {
        return glSecondaryColor3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static MethodHandle glSecondaryColor3i$handle() {
        return glSecondaryColor3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static MemorySegment glSecondaryColor3i$address() {
        return glSecondaryColor3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3i(GLint red, GLint green, GLint blue)
     * }
     */
    public static void glSecondaryColor3i(int red, int green, int blue) {
        var mh$ = glSecondaryColor3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3i", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3iv$descriptor() {
        return glSecondaryColor3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iv(const GLint *v)
     * }
     */
    public static MethodHandle glSecondaryColor3iv$handle() {
        return glSecondaryColor3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3iv(const GLint *v)
     * }
     */
    public static MemorySegment glSecondaryColor3iv$address() {
        return glSecondaryColor3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3iv(const GLint *v)
     * }
     */
    public static void glSecondaryColor3iv(MemorySegment v) {
        var mh$ = glSecondaryColor3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3s$descriptor() {
        return glSecondaryColor3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MethodHandle glSecondaryColor3s$handle() {
        return glSecondaryColor3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static MemorySegment glSecondaryColor3s$address() {
        return glSecondaryColor3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
     * }
     */
    public static void glSecondaryColor3s(short red, short green, short blue) {
        var mh$ = glSecondaryColor3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3s", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3sv$descriptor() {
        return glSecondaryColor3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glSecondaryColor3sv$handle() {
        return glSecondaryColor3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glSecondaryColor3sv$address() {
        return glSecondaryColor3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3sv(const GLshort *v)
     * }
     */
    public static void glSecondaryColor3sv(MemorySegment v) {
        var mh$ = glSecondaryColor3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ub$descriptor() {
        return glSecondaryColor3ub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MethodHandle glSecondaryColor3ub$handle() {
        return glSecondaryColor3ub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static MemorySegment glSecondaryColor3ub$address() {
        return glSecondaryColor3ub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
     * }
     */
    public static void glSecondaryColor3ub(byte red, byte green, byte blue) {
        var mh$ = glSecondaryColor3ub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ub", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubv(const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ubv$descriptor() {
        return glSecondaryColor3ubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubv(const GLubyte *v)
     * }
     */
    public static MethodHandle glSecondaryColor3ubv$handle() {
        return glSecondaryColor3ubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubv(const GLubyte *v)
     * }
     */
    public static MemorySegment glSecondaryColor3ubv$address() {
        return glSecondaryColor3ubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ubv(const GLubyte *v)
     * }
     */
    public static void glSecondaryColor3ubv(MemorySegment v) {
        var mh$ = glSecondaryColor3ubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ubv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3ui {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3ui");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3ui$descriptor() {
        return glSecondaryColor3ui.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MethodHandle glSecondaryColor3ui$handle() {
        return glSecondaryColor3ui.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static MemorySegment glSecondaryColor3ui$address() {
        return glSecondaryColor3ui.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
     * }
     */
    public static void glSecondaryColor3ui(int red, int green, int blue) {
        var mh$ = glSecondaryColor3ui.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3ui", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3uiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3uiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiv(const GLuint *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3uiv$descriptor() {
        return glSecondaryColor3uiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiv(const GLuint *v)
     * }
     */
    public static MethodHandle glSecondaryColor3uiv$handle() {
        return glSecondaryColor3uiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiv(const GLuint *v)
     * }
     */
    public static MemorySegment glSecondaryColor3uiv$address() {
        return glSecondaryColor3uiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3uiv(const GLuint *v)
     * }
     */
    public static void glSecondaryColor3uiv(MemorySegment v) {
        var mh$ = glSecondaryColor3uiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3uiv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3us {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3us");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3us$descriptor() {
        return glSecondaryColor3us.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MethodHandle glSecondaryColor3us$handle() {
        return glSecondaryColor3us.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static MemorySegment glSecondaryColor3us$address() {
        return glSecondaryColor3us.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
     * }
     */
    public static void glSecondaryColor3us(short red, short green, short blue) {
        var mh$ = glSecondaryColor3us.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3us", red, green, blue);
            }
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColor3usv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColor3usv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usv(const GLushort *v)
     * }
     */
    public static FunctionDescriptor glSecondaryColor3usv$descriptor() {
        return glSecondaryColor3usv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usv(const GLushort *v)
     * }
     */
    public static MethodHandle glSecondaryColor3usv$handle() {
        return glSecondaryColor3usv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColor3usv(const GLushort *v)
     * }
     */
    public static MemorySegment glSecondaryColor3usv$address() {
        return glSecondaryColor3usv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColor3usv(const GLushort *v)
     * }
     */
    public static void glSecondaryColor3usv(MemorySegment v) {
        var mh$ = glSecondaryColor3usv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColor3usv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glSecondaryColorPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glSecondaryColorPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glSecondaryColorPointer$descriptor() {
        return glSecondaryColorPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glSecondaryColorPointer$handle() {
        return glSecondaryColorPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glSecondaryColorPointer$address() {
        return glSecondaryColorPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glSecondaryColorPointer(int size, int type, int stride, MemorySegment pointer) {
        var mh$ = glSecondaryColorPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glSecondaryColorPointer", size, type, stride, pointer);
            }
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameterf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameterf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameterf(GLenum pname, GLfloat param)
     * }
     */
    public static FunctionDescriptor glPointParameterf$descriptor() {
        return glPointParameterf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameterf(GLenum pname, GLfloat param)
     * }
     */
    public static MethodHandle glPointParameterf$handle() {
        return glPointParameterf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameterf(GLenum pname, GLfloat param)
     * }
     */
    public static MemorySegment glPointParameterf$address() {
        return glPointParameterf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameterf(GLenum pname, GLfloat param)
     * }
     */
    public static void glPointParameterf(int pname, float param) {
        var mh$ = glPointParameterf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameterf", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameterfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameterfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameterfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static FunctionDescriptor glPointParameterfv$descriptor() {
        return glPointParameterfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameterfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MethodHandle glPointParameterfv$handle() {
        return glPointParameterfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameterfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static MemorySegment glPointParameterfv$address() {
        return glPointParameterfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameterfv(GLenum pname, const GLfloat *params)
     * }
     */
    public static void glPointParameterfv(int pname, MemorySegment params) {
        var mh$ = glPointParameterfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameterfv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameteri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameteri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameteri(GLenum pname, GLint param)
     * }
     */
    public static FunctionDescriptor glPointParameteri$descriptor() {
        return glPointParameteri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameteri(GLenum pname, GLint param)
     * }
     */
    public static MethodHandle glPointParameteri$handle() {
        return glPointParameteri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameteri(GLenum pname, GLint param)
     * }
     */
    public static MemorySegment glPointParameteri$address() {
        return glPointParameteri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameteri(GLenum pname, GLint param)
     * }
     */
    public static void glPointParameteri(int pname, int param) {
        var mh$ = glPointParameteri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameteri", pname, param);
            }
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glPointParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glPointParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glPointParameteriv(GLenum pname, const GLint *params)
     * }
     */
    public static FunctionDescriptor glPointParameteriv$descriptor() {
        return glPointParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glPointParameteriv(GLenum pname, const GLint *params)
     * }
     */
    public static MethodHandle glPointParameteriv$handle() {
        return glPointParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glPointParameteriv(GLenum pname, const GLint *params)
     * }
     */
    public static MemorySegment glPointParameteriv$address() {
        return glPointParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glPointParameteriv(GLenum pname, const GLint *params)
     * }
     */
    public static void glPointParameteriv(int pname, MemorySegment params) {
        var mh$ = glPointParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glPointParameteriv", pname, params);
            }
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBlendFuncSeparate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBlendFuncSeparate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
     * }
     */
    public static FunctionDescriptor glBlendFuncSeparate$descriptor() {
        return glBlendFuncSeparate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
     * }
     */
    public static MethodHandle glBlendFuncSeparate$handle() {
        return glBlendFuncSeparate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
     * }
     */
    public static MemorySegment glBlendFuncSeparate$address() {
        return glBlendFuncSeparate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
     * }
     */
    public static void glBlendFuncSeparate(int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) {
        var mh$ = glBlendFuncSeparate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBlendFuncSeparate", srcRGB, dstRGB, srcAlpha, dstAlpha);
            }
            mh$.invokeExact(srcRGB, dstRGB, srcAlpha, dstAlpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawArrays {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawArrays");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawArrays$descriptor() {
        return glMultiDrawArrays.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawArrays$handle() {
        return glMultiDrawArrays.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawArrays$address() {
        return glMultiDrawArrays.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
     * }
     */
    public static void glMultiDrawArrays(int mode, MemorySegment first, MemorySegment count, int primcount) {
        var mh$ = glMultiDrawArrays.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawArrays", mode, first, count, primcount);
            }
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMultiDrawElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMultiDrawElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static FunctionDescriptor glMultiDrawElements$descriptor() {
        return glMultiDrawElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static MethodHandle glMultiDrawElements$handle() {
        return glMultiDrawElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static MemorySegment glMultiDrawElements$address() {
        return glMultiDrawElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount)
     * }
     */
    public static void glMultiDrawElements(int mode, MemorySegment count, int type, MemorySegment indices, int primcount) {
        var mh$ = glMultiDrawElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMultiDrawElements", mode, count, type, indices, primcount);
            }
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glWindowPos2d$descriptor() {
        return glWindowPos2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glWindowPos2d$handle() {
        return glWindowPos2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glWindowPos2d$address() {
        return glWindowPos2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2d(GLdouble x, GLdouble y)
     * }
     */
    public static void glWindowPos2d(double x, double y) {
        var mh$ = glWindowPos2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2d", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glWindowPos2dv$descriptor() {
        return glWindowPos2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glWindowPos2dv$handle() {
        return glWindowPos2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glWindowPos2dv$address() {
        return glWindowPos2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2dv(const GLdouble *v)
     * }
     */
    public static void glWindowPos2dv(MemorySegment v) {
        var mh$ = glWindowPos2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glWindowPos2f$descriptor() {
        return glWindowPos2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glWindowPos2f$handle() {
        return glWindowPos2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glWindowPos2f$address() {
        return glWindowPos2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2f(GLfloat x, GLfloat y)
     * }
     */
    public static void glWindowPos2f(float x, float y) {
        var mh$ = glWindowPos2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2f", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glWindowPos2fv$descriptor() {
        return glWindowPos2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glWindowPos2fv$handle() {
        return glWindowPos2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glWindowPos2fv$address() {
        return glWindowPos2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2fv(const GLfloat *v)
     * }
     */
    public static void glWindowPos2fv(MemorySegment v) {
        var mh$ = glWindowPos2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2i(GLint x, GLint y)
     * }
     */
    public static FunctionDescriptor glWindowPos2i$descriptor() {
        return glWindowPos2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2i(GLint x, GLint y)
     * }
     */
    public static MethodHandle glWindowPos2i$handle() {
        return glWindowPos2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2i(GLint x, GLint y)
     * }
     */
    public static MemorySegment glWindowPos2i$address() {
        return glWindowPos2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2i(GLint x, GLint y)
     * }
     */
    public static void glWindowPos2i(int x, int y) {
        var mh$ = glWindowPos2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2i", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glWindowPos2iv$descriptor() {
        return glWindowPos2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2iv(const GLint *v)
     * }
     */
    public static MethodHandle glWindowPos2iv$handle() {
        return glWindowPos2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2iv(const GLint *v)
     * }
     */
    public static MemorySegment glWindowPos2iv$address() {
        return glWindowPos2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2iv(const GLint *v)
     * }
     */
    public static void glWindowPos2iv(MemorySegment v) {
        var mh$ = glWindowPos2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2s(GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glWindowPos2s$descriptor() {
        return glWindowPos2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2s(GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glWindowPos2s$handle() {
        return glWindowPos2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2s(GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glWindowPos2s$address() {
        return glWindowPos2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2s(GLshort x, GLshort y)
     * }
     */
    public static void glWindowPos2s(short x, short y) {
        var mh$ = glWindowPos2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2s", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos2sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glWindowPos2sv$descriptor() {
        return glWindowPos2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos2sv(const GLshort *v)
     * }
     */
    public static MethodHandle glWindowPos2sv$handle() {
        return glWindowPos2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos2sv(const GLshort *v)
     * }
     */
    public static MemorySegment glWindowPos2sv$address() {
        return glWindowPos2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos2sv(const GLshort *v)
     * }
     */
    public static void glWindowPos2sv(MemorySegment v) {
        var mh$ = glWindowPos2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos2sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glWindowPos3d$descriptor() {
        return glWindowPos3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glWindowPos3d$handle() {
        return glWindowPos3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glWindowPos3d$address() {
        return glWindowPos3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glWindowPos3d(double x, double y, double z) {
        var mh$ = glWindowPos3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3d", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3dv(const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glWindowPos3dv$descriptor() {
        return glWindowPos3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3dv(const GLdouble *v)
     * }
     */
    public static MethodHandle glWindowPos3dv$handle() {
        return glWindowPos3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3dv(const GLdouble *v)
     * }
     */
    public static MemorySegment glWindowPos3dv$address() {
        return glWindowPos3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3dv(const GLdouble *v)
     * }
     */
    public static void glWindowPos3dv(MemorySegment v) {
        var mh$ = glWindowPos3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3dv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glWindowPos3f$descriptor() {
        return glWindowPos3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glWindowPos3f$handle() {
        return glWindowPos3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glWindowPos3f$address() {
        return glWindowPos3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glWindowPos3f(float x, float y, float z) {
        var mh$ = glWindowPos3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3f", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3fv(const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glWindowPos3fv$descriptor() {
        return glWindowPos3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3fv(const GLfloat *v)
     * }
     */
    public static MethodHandle glWindowPos3fv$handle() {
        return glWindowPos3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3fv(const GLfloat *v)
     * }
     */
    public static MemorySegment glWindowPos3fv$address() {
        return glWindowPos3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3fv(const GLfloat *v)
     * }
     */
    public static void glWindowPos3fv(MemorySegment v) {
        var mh$ = glWindowPos3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3fv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static FunctionDescriptor glWindowPos3i$descriptor() {
        return glWindowPos3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MethodHandle glWindowPos3i$handle() {
        return glWindowPos3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static MemorySegment glWindowPos3i$address() {
        return glWindowPos3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3i(GLint x, GLint y, GLint z)
     * }
     */
    public static void glWindowPos3i(int x, int y, int z) {
        var mh$ = glWindowPos3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3i", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3iv(const GLint *v)
     * }
     */
    public static FunctionDescriptor glWindowPos3iv$descriptor() {
        return glWindowPos3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3iv(const GLint *v)
     * }
     */
    public static MethodHandle glWindowPos3iv$handle() {
        return glWindowPos3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3iv(const GLint *v)
     * }
     */
    public static MemorySegment glWindowPos3iv$address() {
        return glWindowPos3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3iv(const GLint *v)
     * }
     */
    public static void glWindowPos3iv(MemorySegment v) {
        var mh$ = glWindowPos3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3iv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glWindowPos3s$descriptor() {
        return glWindowPos3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glWindowPos3s$handle() {
        return glWindowPos3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glWindowPos3s$address() {
        return glWindowPos3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3s(GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glWindowPos3s(short x, short y, short z) {
        var mh$ = glWindowPos3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3s", x, y, z);
            }
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glWindowPos3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glWindowPos3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glWindowPos3sv(const GLshort *v)
     * }
     */
    public static FunctionDescriptor glWindowPos3sv$descriptor() {
        return glWindowPos3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glWindowPos3sv(const GLshort *v)
     * }
     */
    public static MethodHandle glWindowPos3sv$handle() {
        return glWindowPos3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glWindowPos3sv(const GLshort *v)
     * }
     */
    public static MemorySegment glWindowPos3sv$address() {
        return glWindowPos3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glWindowPos3sv(const GLshort *v)
     * }
     */
    public static void glWindowPos3sv(MemorySegment v) {
        var mh$ = glWindowPos3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glWindowPos3sv", v);
            }
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenQueries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenQueries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenQueries(GLsizei n, GLuint *ids)
     * }
     */
    public static FunctionDescriptor glGenQueries$descriptor() {
        return glGenQueries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenQueries(GLsizei n, GLuint *ids)
     * }
     */
    public static MethodHandle glGenQueries$handle() {
        return glGenQueries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenQueries(GLsizei n, GLuint *ids)
     * }
     */
    public static MemorySegment glGenQueries$address() {
        return glGenQueries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenQueries(GLsizei n, GLuint *ids)
     * }
     */
    public static void glGenQueries(int n, MemorySegment ids) {
        var mh$ = glGenQueries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenQueries", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteQueries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteQueries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteQueries(GLsizei n, const GLuint *ids)
     * }
     */
    public static FunctionDescriptor glDeleteQueries$descriptor() {
        return glDeleteQueries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteQueries(GLsizei n, const GLuint *ids)
     * }
     */
    public static MethodHandle glDeleteQueries$handle() {
        return glDeleteQueries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteQueries(GLsizei n, const GLuint *ids)
     * }
     */
    public static MemorySegment glDeleteQueries$address() {
        return glDeleteQueries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteQueries(GLsizei n, const GLuint *ids)
     * }
     */
    public static void glDeleteQueries(int n, MemorySegment ids) {
        var mh$ = glDeleteQueries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteQueries", n, ids);
            }
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsQuery(GLuint id)
     * }
     */
    public static FunctionDescriptor glIsQuery$descriptor() {
        return glIsQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsQuery(GLuint id)
     * }
     */
    public static MethodHandle glIsQuery$handle() {
        return glIsQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsQuery(GLuint id)
     * }
     */
    public static MemorySegment glIsQuery$address() {
        return glIsQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsQuery(GLuint id)
     * }
     */
    public static byte glIsQuery(int id) {
        var mh$ = glIsQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsQuery", id);
            }
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBeginQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBeginQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBeginQuery(GLenum target, GLuint id)
     * }
     */
    public static FunctionDescriptor glBeginQuery$descriptor() {
        return glBeginQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBeginQuery(GLenum target, GLuint id)
     * }
     */
    public static MethodHandle glBeginQuery$handle() {
        return glBeginQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBeginQuery(GLenum target, GLuint id)
     * }
     */
    public static MemorySegment glBeginQuery$address() {
        return glBeginQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBeginQuery(GLenum target, GLuint id)
     * }
     */
    public static void glBeginQuery(int target, int id) {
        var mh$ = glBeginQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBeginQuery", target, id);
            }
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEndQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEndQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEndQuery(GLenum target)
     * }
     */
    public static FunctionDescriptor glEndQuery$descriptor() {
        return glEndQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEndQuery(GLenum target)
     * }
     */
    public static MethodHandle glEndQuery$handle() {
        return glEndQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEndQuery(GLenum target)
     * }
     */
    public static MemorySegment glEndQuery$address() {
        return glEndQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEndQuery(GLenum target)
     * }
     */
    public static void glEndQuery(int target) {
        var mh$ = glEndQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEndQuery", target);
            }
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryiv$descriptor() {
        return glGetQueryiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetQueryiv$handle() {
        return glGetQueryiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetQueryiv$address() {
        return glGetQueryiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetQueryiv(int target, int pname, MemorySegment params) {
        var mh$ = glGetQueryiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryiv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjectiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjectiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjectiv$descriptor() {
        return glGetQueryObjectiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetQueryObjectiv$handle() {
        return glGetQueryObjectiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetQueryObjectiv$address() {
        return glGetQueryObjectiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
     * }
     */
    public static void glGetQueryObjectiv(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjectiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjectiv", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetQueryObjectuiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetQueryObjectuiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static FunctionDescriptor glGetQueryObjectuiv$descriptor() {
        return glGetQueryObjectuiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static MethodHandle glGetQueryObjectuiv$handle() {
        return glGetQueryObjectuiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static MemorySegment glGetQueryObjectuiv$address() {
        return glGetQueryObjectuiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
     * }
     */
    public static void glGetQueryObjectuiv(int id, int pname, MemorySegment params) {
        var mh$ = glGetQueryObjectuiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetQueryObjectuiv", id, pname, params);
            }
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindBuffer(GLenum target, GLuint buffer)
     * }
     */
    public static FunctionDescriptor glBindBuffer$descriptor() {
        return glBindBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindBuffer(GLenum target, GLuint buffer)
     * }
     */
    public static MethodHandle glBindBuffer$handle() {
        return glBindBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindBuffer(GLenum target, GLuint buffer)
     * }
     */
    public static MemorySegment glBindBuffer$address() {
        return glBindBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindBuffer(GLenum target, GLuint buffer)
     * }
     */
    public static void glBindBuffer(int target, int buffer) {
        var mh$ = glBindBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindBuffer", target, buffer);
            }
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteBuffers(GLsizei n, const GLuint *buffers)
     * }
     */
    public static FunctionDescriptor glDeleteBuffers$descriptor() {
        return glDeleteBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteBuffers(GLsizei n, const GLuint *buffers)
     * }
     */
    public static MethodHandle glDeleteBuffers$handle() {
        return glDeleteBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteBuffers(GLsizei n, const GLuint *buffers)
     * }
     */
    public static MemorySegment glDeleteBuffers$address() {
        return glDeleteBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteBuffers(GLsizei n, const GLuint *buffers)
     * }
     */
    public static void glDeleteBuffers(int n, MemorySegment buffers) {
        var mh$ = glDeleteBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteBuffers", n, buffers);
            }
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGenBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGenBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGenBuffers(GLsizei n, GLuint *buffers)
     * }
     */
    public static FunctionDescriptor glGenBuffers$descriptor() {
        return glGenBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGenBuffers(GLsizei n, GLuint *buffers)
     * }
     */
    public static MethodHandle glGenBuffers$handle() {
        return glGenBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGenBuffers(GLsizei n, GLuint *buffers)
     * }
     */
    public static MemorySegment glGenBuffers$address() {
        return glGenBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGenBuffers(GLsizei n, GLuint *buffers)
     * }
     */
    public static void glGenBuffers(int n, MemorySegment buffers) {
        var mh$ = glGenBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGenBuffers", n, buffers);
            }
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsBuffer(GLuint buffer)
     * }
     */
    public static FunctionDescriptor glIsBuffer$descriptor() {
        return glIsBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsBuffer(GLuint buffer)
     * }
     */
    public static MethodHandle glIsBuffer$handle() {
        return glIsBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsBuffer(GLuint buffer)
     * }
     */
    public static MemorySegment glIsBuffer$address() {
        return glIsBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsBuffer(GLuint buffer)
     * }
     */
    public static byte glIsBuffer(int buffer) {
        var mh$ = glIsBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsBuffer", buffer);
            }
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBufferData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBufferData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
     * }
     */
    public static FunctionDescriptor glBufferData$descriptor() {
        return glBufferData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
     * }
     */
    public static MethodHandle glBufferData$handle() {
        return glBufferData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
     * }
     */
    public static MemorySegment glBufferData$address() {
        return glBufferData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
     * }
     */
    public static void glBufferData(int target, long size, MemorySegment data, int usage) {
        var mh$ = glBufferData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBufferData", target, size, data, usage);
            }
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBufferSubData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBufferSubData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
     * }
     */
    public static FunctionDescriptor glBufferSubData$descriptor() {
        return glBufferSubData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
     * }
     */
    public static MethodHandle glBufferSubData$handle() {
        return glBufferSubData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
     * }
     */
    public static MemorySegment glBufferSubData$address() {
        return glBufferSubData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
     * }
     */
    public static void glBufferSubData(int target, long offset, long size, MemorySegment data) {
        var mh$ = glBufferSubData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBufferSubData", target, offset, size, data);
            }
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferSubData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_LONG,
            glut_h.C_LONG,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferSubData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
     * }
     */
    public static FunctionDescriptor glGetBufferSubData$descriptor() {
        return glGetBufferSubData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
     * }
     */
    public static MethodHandle glGetBufferSubData$handle() {
        return glGetBufferSubData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
     * }
     */
    public static MemorySegment glGetBufferSubData$address() {
        return glGetBufferSubData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
     * }
     */
    public static void glGetBufferSubData(int target, long offset, long size, MemorySegment data) {
        var mh$ = glGetBufferSubData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferSubData", target, offset, size, data);
            }
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glMapBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glMapBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBuffer(GLenum target, GLenum access)
     * }
     */
    public static FunctionDescriptor glMapBuffer$descriptor() {
        return glMapBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBuffer(GLenum target, GLenum access)
     * }
     */
    public static MethodHandle glMapBuffer$handle() {
        return glMapBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLvoid *glMapBuffer(GLenum target, GLenum access)
     * }
     */
    public static MemorySegment glMapBuffer$address() {
        return glMapBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLvoid *glMapBuffer(GLenum target, GLenum access)
     * }
     */
    public static MemorySegment glMapBuffer(int target, int access) {
        var mh$ = glMapBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glMapBuffer", target, access);
            }
            return (MemorySegment)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUnmapBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUnmapBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBuffer(GLenum target)
     * }
     */
    public static FunctionDescriptor glUnmapBuffer$descriptor() {
        return glUnmapBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBuffer(GLenum target)
     * }
     */
    public static MethodHandle glUnmapBuffer$handle() {
        return glUnmapBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glUnmapBuffer(GLenum target)
     * }
     */
    public static MemorySegment glUnmapBuffer$address() {
        return glUnmapBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glUnmapBuffer(GLenum target)
     * }
     */
    public static byte glUnmapBuffer(int target) {
        var mh$ = glUnmapBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUnmapBuffer", target);
            }
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferParameteriv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferParameteriv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetBufferParameteriv$descriptor() {
        return glGetBufferParameteriv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetBufferParameteriv$handle() {
        return glGetBufferParameteriv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetBufferParameteriv$address() {
        return glGetBufferParameteriv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
     * }
     */
    public static void glGetBufferParameteriv(int target, int pname, MemorySegment params) {
        var mh$ = glGetBufferParameteriv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferParameteriv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetBufferPointerv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetBufferPointerv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static FunctionDescriptor glGetBufferPointerv$descriptor() {
        return glGetBufferPointerv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MethodHandle glGetBufferPointerv$handle() {
        return glGetBufferPointerv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static MemorySegment glGetBufferPointerv$address() {
        return glGetBufferPointerv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
     * }
     */
    public static void glGetBufferPointerv(int target, int pname, MemorySegment params) {
        var mh$ = glGetBufferPointerv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetBufferPointerv", target, pname, params);
            }
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDrawBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDrawBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDrawBuffers(GLsizei n, const GLenum *bufs)
     * }
     */
    public static FunctionDescriptor glDrawBuffers$descriptor() {
        return glDrawBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDrawBuffers(GLsizei n, const GLenum *bufs)
     * }
     */
    public static MethodHandle glDrawBuffers$handle() {
        return glDrawBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDrawBuffers(GLsizei n, const GLenum *bufs)
     * }
     */
    public static MemorySegment glDrawBuffers$address() {
        return glDrawBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDrawBuffers(GLsizei n, const GLenum *bufs)
     * }
     */
    public static void glDrawBuffers(int n, MemorySegment bufs) {
        var mh$ = glDrawBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDrawBuffers", n, bufs);
            }
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1d(GLuint index, GLdouble x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1d$descriptor() {
        return glVertexAttrib1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1d(GLuint index, GLdouble x)
     * }
     */
    public static MethodHandle glVertexAttrib1d$handle() {
        return glVertexAttrib1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1d(GLuint index, GLdouble x)
     * }
     */
    public static MemorySegment glVertexAttrib1d$address() {
        return glVertexAttrib1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1d(GLuint index, GLdouble x)
     * }
     */
    public static void glVertexAttrib1d(int index, double x) {
        var mh$ = glVertexAttrib1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1d", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dv(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1dv$descriptor() {
        return glVertexAttrib1dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib1dv$handle() {
        return glVertexAttrib1dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib1dv$address() {
        return glVertexAttrib1dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1dv(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib1dv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1dv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1f(GLuint index, GLfloat x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1f$descriptor() {
        return glVertexAttrib1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1f(GLuint index, GLfloat x)
     * }
     */
    public static MethodHandle glVertexAttrib1f$handle() {
        return glVertexAttrib1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1f(GLuint index, GLfloat x)
     * }
     */
    public static MemorySegment glVertexAttrib1f$address() {
        return glVertexAttrib1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1f(GLuint index, GLfloat x)
     * }
     */
    public static void glVertexAttrib1f(int index, float x) {
        var mh$ = glVertexAttrib1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1f", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fv(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1fv$descriptor() {
        return glVertexAttrib1fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib1fv$handle() {
        return glVertexAttrib1fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib1fv$address() {
        return glVertexAttrib1fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1fv(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib1fv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1fv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1s(GLuint index, GLshort x)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1s$descriptor() {
        return glVertexAttrib1s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1s(GLuint index, GLshort x)
     * }
     */
    public static MethodHandle glVertexAttrib1s$handle() {
        return glVertexAttrib1s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1s(GLuint index, GLshort x)
     * }
     */
    public static MemorySegment glVertexAttrib1s$address() {
        return glVertexAttrib1s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1s(GLuint index, GLshort x)
     * }
     */
    public static void glVertexAttrib1s(int index, short x) {
        var mh$ = glVertexAttrib1s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1s", index, x);
            }
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib1sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib1sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sv(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib1sv$descriptor() {
        return glVertexAttrib1sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sv(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib1sv$handle() {
        return glVertexAttrib1sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib1sv(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib1sv$address() {
        return glVertexAttrib1sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib1sv(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib1sv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib1sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib1sv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2d$descriptor() {
        return glVertexAttrib2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static MethodHandle glVertexAttrib2d$handle() {
        return glVertexAttrib2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static MemorySegment glVertexAttrib2d$address() {
        return glVertexAttrib2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
     * }
     */
    public static void glVertexAttrib2d(int index, double x, double y) {
        var mh$ = glVertexAttrib2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2d", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dv(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2dv$descriptor() {
        return glVertexAttrib2dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib2dv$handle() {
        return glVertexAttrib2dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib2dv$address() {
        return glVertexAttrib2dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2dv(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib2dv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2dv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2f$descriptor() {
        return glVertexAttrib2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static MethodHandle glVertexAttrib2f$handle() {
        return glVertexAttrib2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static MemorySegment glVertexAttrib2f$address() {
        return glVertexAttrib2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
     * }
     */
    public static void glVertexAttrib2f(int index, float x, float y) {
        var mh$ = glVertexAttrib2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2f", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fv(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2fv$descriptor() {
        return glVertexAttrib2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib2fv$handle() {
        return glVertexAttrib2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib2fv$address() {
        return glVertexAttrib2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2fv(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib2fv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2fv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2s$descriptor() {
        return glVertexAttrib2s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static MethodHandle glVertexAttrib2s$handle() {
        return glVertexAttrib2s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static MemorySegment glVertexAttrib2s$address() {
        return glVertexAttrib2s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
     * }
     */
    public static void glVertexAttrib2s(int index, short x, short y) {
        var mh$ = glVertexAttrib2s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2s", index, x, y);
            }
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib2sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib2sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sv(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib2sv$descriptor() {
        return glVertexAttrib2sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sv(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib2sv$handle() {
        return glVertexAttrib2sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib2sv(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib2sv$address() {
        return glVertexAttrib2sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib2sv(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib2sv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib2sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib2sv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3d$descriptor() {
        return glVertexAttrib3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MethodHandle glVertexAttrib3d$handle() {
        return glVertexAttrib3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static MemorySegment glVertexAttrib3d$address() {
        return glVertexAttrib3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
     * }
     */
    public static void glVertexAttrib3d(int index, double x, double y, double z) {
        var mh$ = glVertexAttrib3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3d", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dv(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3dv$descriptor() {
        return glVertexAttrib3dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib3dv$handle() {
        return glVertexAttrib3dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib3dv$address() {
        return glVertexAttrib3dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3dv(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib3dv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3dv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3f$descriptor() {
        return glVertexAttrib3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MethodHandle glVertexAttrib3f$handle() {
        return glVertexAttrib3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static MemorySegment glVertexAttrib3f$address() {
        return glVertexAttrib3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
     * }
     */
    public static void glVertexAttrib3f(int index, float x, float y, float z) {
        var mh$ = glVertexAttrib3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3f", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fv(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3fv$descriptor() {
        return glVertexAttrib3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib3fv$handle() {
        return glVertexAttrib3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib3fv$address() {
        return glVertexAttrib3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3fv(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib3fv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3fv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3s$descriptor() {
        return glVertexAttrib3s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MethodHandle glVertexAttrib3s$handle() {
        return glVertexAttrib3s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static MemorySegment glVertexAttrib3s$address() {
        return glVertexAttrib3s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
     * }
     */
    public static void glVertexAttrib3s(int index, short x, short y, short z) {
        var mh$ = glVertexAttrib3s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3s", index, x, y, z);
            }
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib3sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib3sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sv(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib3sv$descriptor() {
        return glVertexAttrib3sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sv(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib3sv$handle() {
        return glVertexAttrib3sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib3sv(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib3sv$address() {
        return glVertexAttrib3sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib3sv(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib3sv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib3sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib3sv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nbv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nbv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nbv$descriptor() {
        return glVertexAttrib4Nbv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Nbv$handle() {
        return glVertexAttrib4Nbv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Nbv$address() {
        return glVertexAttrib4Nbv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
     * }
     */
    public static void glVertexAttrib4Nbv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Nbv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nbv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Niv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Niv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Niv(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Niv$descriptor() {
        return glVertexAttrib4Niv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Niv(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Niv$handle() {
        return glVertexAttrib4Niv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Niv(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Niv$address() {
        return glVertexAttrib4Niv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Niv(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttrib4Niv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Niv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Niv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nsv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nsv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nsv(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nsv$descriptor() {
        return glVertexAttrib4Nsv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nsv(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Nsv$handle() {
        return glVertexAttrib4Nsv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nsv(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Nsv$address() {
        return glVertexAttrib4Nsv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nsv(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib4Nsv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Nsv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nsv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nub$descriptor() {
        return glVertexAttrib4Nub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static MethodHandle glVertexAttrib4Nub$handle() {
        return glVertexAttrib4Nub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static MemorySegment glVertexAttrib4Nub$address() {
        return glVertexAttrib4Nub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
     * }
     */
    public static void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w) {
        var mh$ = glVertexAttrib4Nub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nub", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nubv$descriptor() {
        return glVertexAttrib4Nubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Nubv$handle() {
        return glVertexAttrib4Nubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Nubv$address() {
        return glVertexAttrib4Nubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
     * }
     */
    public static void glVertexAttrib4Nubv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Nubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nubv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nuiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nuiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nuiv$descriptor() {
        return glVertexAttrib4Nuiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Nuiv$handle() {
        return glVertexAttrib4Nuiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Nuiv$address() {
        return glVertexAttrib4Nuiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttrib4Nuiv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Nuiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nuiv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4Nusv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4Nusv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nusv(GLuint index, const GLushort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4Nusv$descriptor() {
        return glVertexAttrib4Nusv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nusv(GLuint index, const GLushort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4Nusv$handle() {
        return glVertexAttrib4Nusv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nusv(GLuint index, const GLushort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4Nusv$address() {
        return glVertexAttrib4Nusv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4Nusv(GLuint index, const GLushort *v)
     * }
     */
    public static void glVertexAttrib4Nusv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4Nusv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4Nusv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4bv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4bv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bv(GLuint index, const GLbyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4bv$descriptor() {
        return glVertexAttrib4bv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bv(GLuint index, const GLbyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4bv$handle() {
        return glVertexAttrib4bv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4bv(GLuint index, const GLbyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4bv$address() {
        return glVertexAttrib4bv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4bv(GLuint index, const GLbyte *v)
     * }
     */
    public static void glVertexAttrib4bv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4bv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4bv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4d$descriptor() {
        return glVertexAttrib4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MethodHandle glVertexAttrib4d$handle() {
        return glVertexAttrib4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static MemorySegment glVertexAttrib4d$address() {
        return glVertexAttrib4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
     * }
     */
    public static void glVertexAttrib4d(int index, double x, double y, double z, double w) {
        var mh$ = glVertexAttrib4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4d", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dv(GLuint index, const GLdouble *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4dv$descriptor() {
        return glVertexAttrib4dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MethodHandle glVertexAttrib4dv$handle() {
        return glVertexAttrib4dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4dv(GLuint index, const GLdouble *v)
     * }
     */
    public static MemorySegment glVertexAttrib4dv$address() {
        return glVertexAttrib4dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4dv(GLuint index, const GLdouble *v)
     * }
     */
    public static void glVertexAttrib4dv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4dv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4f$descriptor() {
        return glVertexAttrib4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MethodHandle glVertexAttrib4f$handle() {
        return glVertexAttrib4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static MemorySegment glVertexAttrib4f$address() {
        return glVertexAttrib4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
     * }
     */
    public static void glVertexAttrib4f(int index, float x, float y, float z, float w) {
        var mh$ = glVertexAttrib4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4f", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fv(GLuint index, const GLfloat *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4fv$descriptor() {
        return glVertexAttrib4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MethodHandle glVertexAttrib4fv$handle() {
        return glVertexAttrib4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4fv(GLuint index, const GLfloat *v)
     * }
     */
    public static MemorySegment glVertexAttrib4fv$address() {
        return glVertexAttrib4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4fv(GLuint index, const GLfloat *v)
     * }
     */
    public static void glVertexAttrib4fv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4fv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4iv(GLuint index, const GLint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4iv$descriptor() {
        return glVertexAttrib4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4iv(GLuint index, const GLint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4iv$handle() {
        return glVertexAttrib4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4iv(GLuint index, const GLint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4iv$address() {
        return glVertexAttrib4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4iv(GLuint index, const GLint *v)
     * }
     */
    public static void glVertexAttrib4iv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4iv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT,
            glut_h.C_SHORT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4s$descriptor() {
        return glVertexAttrib4s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MethodHandle glVertexAttrib4s$handle() {
        return glVertexAttrib4s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static MemorySegment glVertexAttrib4s$address() {
        return glVertexAttrib4s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
     * }
     */
    public static void glVertexAttrib4s(int index, short x, short y, short z, short w) {
        var mh$ = glVertexAttrib4s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4s", index, x, y, z, w);
            }
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4sv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4sv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sv(GLuint index, const GLshort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4sv$descriptor() {
        return glVertexAttrib4sv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sv(GLuint index, const GLshort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4sv$handle() {
        return glVertexAttrib4sv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4sv(GLuint index, const GLshort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4sv$address() {
        return glVertexAttrib4sv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4sv(GLuint index, const GLshort *v)
     * }
     */
    public static void glVertexAttrib4sv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4sv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4sv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4ubv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4ubv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubv(GLuint index, const GLubyte *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4ubv$descriptor() {
        return glVertexAttrib4ubv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubv(GLuint index, const GLubyte *v)
     * }
     */
    public static MethodHandle glVertexAttrib4ubv$handle() {
        return glVertexAttrib4ubv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubv(GLuint index, const GLubyte *v)
     * }
     */
    public static MemorySegment glVertexAttrib4ubv$address() {
        return glVertexAttrib4ubv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4ubv(GLuint index, const GLubyte *v)
     * }
     */
    public static void glVertexAttrib4ubv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4ubv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4ubv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4uiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4uiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uiv(GLuint index, const GLuint *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4uiv$descriptor() {
        return glVertexAttrib4uiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uiv(GLuint index, const GLuint *v)
     * }
     */
    public static MethodHandle glVertexAttrib4uiv$handle() {
        return glVertexAttrib4uiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4uiv(GLuint index, const GLuint *v)
     * }
     */
    public static MemorySegment glVertexAttrib4uiv$address() {
        return glVertexAttrib4uiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4uiv(GLuint index, const GLuint *v)
     * }
     */
    public static void glVertexAttrib4uiv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4uiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4uiv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttrib4usv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttrib4usv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usv(GLuint index, const GLushort *v)
     * }
     */
    public static FunctionDescriptor glVertexAttrib4usv$descriptor() {
        return glVertexAttrib4usv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usv(GLuint index, const GLushort *v)
     * }
     */
    public static MethodHandle glVertexAttrib4usv$handle() {
        return glVertexAttrib4usv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttrib4usv(GLuint index, const GLushort *v)
     * }
     */
    public static MemorySegment glVertexAttrib4usv$address() {
        return glVertexAttrib4usv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttrib4usv(GLuint index, const GLushort *v)
     * }
     */
    public static void glVertexAttrib4usv(int index, MemorySegment v) {
        var mh$ = glVertexAttrib4usv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttrib4usv", index, v);
            }
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glVertexAttribPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glVertexAttribPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static FunctionDescriptor glVertexAttribPointer$descriptor() {
        return glVertexAttribPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MethodHandle glVertexAttribPointer$handle() {
        return glVertexAttribPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static MemorySegment glVertexAttribPointer$address() {
        return glVertexAttribPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
     * }
     */
    public static void glVertexAttribPointer(int index, int size, int type, byte normalized, int stride, MemorySegment pointer) {
        var mh$ = glVertexAttribPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glVertexAttribPointer", index, size, type, normalized, stride, pointer);
            }
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glEnableVertexAttribArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glEnableVertexAttribArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArray(GLuint index)
     * }
     */
    public static FunctionDescriptor glEnableVertexAttribArray$descriptor() {
        return glEnableVertexAttribArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArray(GLuint index)
     * }
     */
    public static MethodHandle glEnableVertexAttribArray$handle() {
        return glEnableVertexAttribArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArray(GLuint index)
     * }
     */
    public static MemorySegment glEnableVertexAttribArray$address() {
        return glEnableVertexAttribArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glEnableVertexAttribArray(GLuint index)
     * }
     */
    public static void glEnableVertexAttribArray(int index) {
        var mh$ = glEnableVertexAttribArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glEnableVertexAttribArray", index);
            }
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDisableVertexAttribArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDisableVertexAttribArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArray(GLuint index)
     * }
     */
    public static FunctionDescriptor glDisableVertexAttribArray$descriptor() {
        return glDisableVertexAttribArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArray(GLuint index)
     * }
     */
    public static MethodHandle glDisableVertexAttribArray$handle() {
        return glDisableVertexAttribArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArray(GLuint index)
     * }
     */
    public static MemorySegment glDisableVertexAttribArray$address() {
        return glDisableVertexAttribArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDisableVertexAttribArray(GLuint index)
     * }
     */
    public static void glDisableVertexAttribArray(int index) {
        var mh$ = glDisableVertexAttribArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDisableVertexAttribArray", index);
            }
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribdv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribdv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribdv$descriptor() {
        return glGetVertexAttribdv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static MethodHandle glGetVertexAttribdv$handle() {
        return glGetVertexAttribdv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static MemorySegment glGetVertexAttribdv$address() {
        return glGetVertexAttribdv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
     * }
     */
    public static void glGetVertexAttribdv(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribdv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribdv", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribfv$descriptor() {
        return glGetVertexAttribfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static MethodHandle glGetVertexAttribfv$handle() {
        return glGetVertexAttribfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static MemorySegment glGetVertexAttribfv$address() {
        return glGetVertexAttribfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
     * }
     */
    public static void glGetVertexAttribfv(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribfv", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribiv$descriptor() {
        return glGetVertexAttribiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetVertexAttribiv$handle() {
        return glGetVertexAttribiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetVertexAttribiv$address() {
        return glGetVertexAttribiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
     * }
     */
    public static void glGetVertexAttribiv(int index, int pname, MemorySegment params) {
        var mh$ = glGetVertexAttribiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribiv", index, pname, params);
            }
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetVertexAttribPointerv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetVertexAttribPointerv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static FunctionDescriptor glGetVertexAttribPointerv$descriptor() {
        return glGetVertexAttribPointerv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static MethodHandle glGetVertexAttribPointerv$handle() {
        return glGetVertexAttribPointerv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static MemorySegment glGetVertexAttribPointerv$address() {
        return glGetVertexAttribPointerv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
     * }
     */
    public static void glGetVertexAttribPointerv(int index, int pname, MemorySegment pointer) {
        var mh$ = glGetVertexAttribPointerv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetVertexAttribPointerv", index, pname, pointer);
            }
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteShader(GLuint shader)
     * }
     */
    public static FunctionDescriptor glDeleteShader$descriptor() {
        return glDeleteShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteShader(GLuint shader)
     * }
     */
    public static MethodHandle glDeleteShader$handle() {
        return glDeleteShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteShader(GLuint shader)
     * }
     */
    public static MemorySegment glDeleteShader$address() {
        return glDeleteShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteShader(GLuint shader)
     * }
     */
    public static void glDeleteShader(int shader) {
        var mh$ = glDeleteShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteShader", shader);
            }
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDetachShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDetachShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDetachShader(GLuint program, GLuint shader)
     * }
     */
    public static FunctionDescriptor glDetachShader$descriptor() {
        return glDetachShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDetachShader(GLuint program, GLuint shader)
     * }
     */
    public static MethodHandle glDetachShader$handle() {
        return glDetachShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDetachShader(GLuint program, GLuint shader)
     * }
     */
    public static MemorySegment glDetachShader$address() {
        return glDetachShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDetachShader(GLuint program, GLuint shader)
     * }
     */
    public static void glDetachShader(int program, int shader) {
        var mh$ = glDetachShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDetachShader", program, shader);
            }
            mh$.invokeExact(program, shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCreateShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCreateShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint glCreateShader(GLenum type)
     * }
     */
    public static FunctionDescriptor glCreateShader$descriptor() {
        return glCreateShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint glCreateShader(GLenum type)
     * }
     */
    public static MethodHandle glCreateShader$handle() {
        return glCreateShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint glCreateShader(GLenum type)
     * }
     */
    public static MemorySegment glCreateShader$address() {
        return glCreateShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint glCreateShader(GLenum type)
     * }
     */
    public static int glCreateShader(int type) {
        var mh$ = glCreateShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCreateShader", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glShaderSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glShaderSource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
     * }
     */
    public static FunctionDescriptor glShaderSource$descriptor() {
        return glShaderSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
     * }
     */
    public static MethodHandle glShaderSource$handle() {
        return glShaderSource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
     * }
     */
    public static MemorySegment glShaderSource$address() {
        return glShaderSource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
     * }
     */
    public static void glShaderSource(int shader, int count, MemorySegment string, MemorySegment length) {
        var mh$ = glShaderSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glShaderSource", shader, count, string, length);
            }
            mh$.invokeExact(shader, count, string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCompileShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCompileShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glCompileShader(GLuint shader)
     * }
     */
    public static FunctionDescriptor glCompileShader$descriptor() {
        return glCompileShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glCompileShader(GLuint shader)
     * }
     */
    public static MethodHandle glCompileShader$handle() {
        return glCompileShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glCompileShader(GLuint shader)
     * }
     */
    public static MemorySegment glCompileShader$address() {
        return glCompileShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glCompileShader(GLuint shader)
     * }
     */
    public static void glCompileShader(int shader) {
        var mh$ = glCompileShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCompileShader", shader);
            }
            mh$.invokeExact(shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glCreateProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glCreateProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint glCreateProgram()
     * }
     */
    public static FunctionDescriptor glCreateProgram$descriptor() {
        return glCreateProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint glCreateProgram()
     * }
     */
    public static MethodHandle glCreateProgram$handle() {
        return glCreateProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint glCreateProgram()
     * }
     */
    public static MemorySegment glCreateProgram$address() {
        return glCreateProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint glCreateProgram()
     * }
     */
    public static int glCreateProgram() {
        var mh$ = glCreateProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glCreateProgram");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glAttachShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glAttachShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glAttachShader(GLuint program, GLuint shader)
     * }
     */
    public static FunctionDescriptor glAttachShader$descriptor() {
        return glAttachShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glAttachShader(GLuint program, GLuint shader)
     * }
     */
    public static MethodHandle glAttachShader$handle() {
        return glAttachShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glAttachShader(GLuint program, GLuint shader)
     * }
     */
    public static MemorySegment glAttachShader$address() {
        return glAttachShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glAttachShader(GLuint program, GLuint shader)
     * }
     */
    public static void glAttachShader(int program, int shader) {
        var mh$ = glAttachShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glAttachShader", program, shader);
            }
            mh$.invokeExact(program, shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glLinkProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glLinkProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glLinkProgram(GLuint program)
     * }
     */
    public static FunctionDescriptor glLinkProgram$descriptor() {
        return glLinkProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glLinkProgram(GLuint program)
     * }
     */
    public static MethodHandle glLinkProgram$handle() {
        return glLinkProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glLinkProgram(GLuint program)
     * }
     */
    public static MemorySegment glLinkProgram$address() {
        return glLinkProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glLinkProgram(GLuint program)
     * }
     */
    public static void glLinkProgram(int program) {
        var mh$ = glLinkProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glLinkProgram", program);
            }
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUseProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUseProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUseProgram(GLuint program)
     * }
     */
    public static FunctionDescriptor glUseProgram$descriptor() {
        return glUseProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUseProgram(GLuint program)
     * }
     */
    public static MethodHandle glUseProgram$handle() {
        return glUseProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUseProgram(GLuint program)
     * }
     */
    public static MemorySegment glUseProgram$address() {
        return glUseProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUseProgram(GLuint program)
     * }
     */
    public static void glUseProgram(int program) {
        var mh$ = glUseProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUseProgram", program);
            }
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glDeleteProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glDeleteProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glDeleteProgram(GLuint program)
     * }
     */
    public static FunctionDescriptor glDeleteProgram$descriptor() {
        return glDeleteProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glDeleteProgram(GLuint program)
     * }
     */
    public static MethodHandle glDeleteProgram$handle() {
        return glDeleteProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glDeleteProgram(GLuint program)
     * }
     */
    public static MemorySegment glDeleteProgram$address() {
        return glDeleteProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glDeleteProgram(GLuint program)
     * }
     */
    public static void glDeleteProgram(int program) {
        var mh$ = glDeleteProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glDeleteProgram", program);
            }
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glValidateProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glValidateProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glValidateProgram(GLuint program)
     * }
     */
    public static FunctionDescriptor glValidateProgram$descriptor() {
        return glValidateProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glValidateProgram(GLuint program)
     * }
     */
    public static MethodHandle glValidateProgram$handle() {
        return glValidateProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glValidateProgram(GLuint program)
     * }
     */
    public static MemorySegment glValidateProgram$address() {
        return glValidateProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glValidateProgram(GLuint program)
     * }
     */
    public static void glValidateProgram(int program) {
        var mh$ = glValidateProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glValidateProgram", program);
            }
            mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1f(GLint location, GLfloat v0)
     * }
     */
    public static FunctionDescriptor glUniform1f$descriptor() {
        return glUniform1f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1f(GLint location, GLfloat v0)
     * }
     */
    public static MethodHandle glUniform1f$handle() {
        return glUniform1f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1f(GLint location, GLfloat v0)
     * }
     */
    public static MemorySegment glUniform1f$address() {
        return glUniform1f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1f(GLint location, GLfloat v0)
     * }
     */
    public static void glUniform1f(int location, float v0) {
        var mh$ = glUniform1f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1f", location, v0);
            }
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static FunctionDescriptor glUniform2f$descriptor() {
        return glUniform2f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static MethodHandle glUniform2f$handle() {
        return glUniform2f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static MemorySegment glUniform2f$address() {
        return glUniform2f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
     * }
     */
    public static void glUniform2f(int location, float v0, float v1) {
        var mh$ = glUniform2f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2f", location, v0, v1);
            }
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static FunctionDescriptor glUniform3f$descriptor() {
        return glUniform3f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static MethodHandle glUniform3f$handle() {
        return glUniform3f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static MemorySegment glUniform3f$address() {
        return glUniform3f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
     * }
     */
    public static void glUniform3f(int location, float v0, float v1, float v2) {
        var mh$ = glUniform3f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3f", location, v0, v1, v2);
            }
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4f {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4f");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static FunctionDescriptor glUniform4f$descriptor() {
        return glUniform4f.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static MethodHandle glUniform4f$handle() {
        return glUniform4f.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static MemorySegment glUniform4f$address() {
        return glUniform4f.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
     * }
     */
    public static void glUniform4f(int location, float v0, float v1, float v2, float v3) {
        var mh$ = glUniform4f.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4f", location, v0, v1, v2, v3);
            }
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1i(GLint location, GLint v0)
     * }
     */
    public static FunctionDescriptor glUniform1i$descriptor() {
        return glUniform1i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1i(GLint location, GLint v0)
     * }
     */
    public static MethodHandle glUniform1i$handle() {
        return glUniform1i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1i(GLint location, GLint v0)
     * }
     */
    public static MemorySegment glUniform1i$address() {
        return glUniform1i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1i(GLint location, GLint v0)
     * }
     */
    public static void glUniform1i(int location, int v0) {
        var mh$ = glUniform1i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1i", location, v0);
            }
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2i(GLint location, GLint v0, GLint v1)
     * }
     */
    public static FunctionDescriptor glUniform2i$descriptor() {
        return glUniform2i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2i(GLint location, GLint v0, GLint v1)
     * }
     */
    public static MethodHandle glUniform2i$handle() {
        return glUniform2i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2i(GLint location, GLint v0, GLint v1)
     * }
     */
    public static MemorySegment glUniform2i$address() {
        return glUniform2i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2i(GLint location, GLint v0, GLint v1)
     * }
     */
    public static void glUniform2i(int location, int v0, int v1) {
        var mh$ = glUniform2i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2i", location, v0, v1);
            }
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static FunctionDescriptor glUniform3i$descriptor() {
        return glUniform3i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static MethodHandle glUniform3i$handle() {
        return glUniform3i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static MemorySegment glUniform3i$address() {
        return glUniform3i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
     * }
     */
    public static void glUniform3i(int location, int v0, int v1, int v2) {
        var mh$ = glUniform3i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3i", location, v0, v1, v2);
            }
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4i {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4i");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static FunctionDescriptor glUniform4i$descriptor() {
        return glUniform4i.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static MethodHandle glUniform4i$handle() {
        return glUniform4i.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static MemorySegment glUniform4i$address() {
        return glUniform4i.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
     * }
     */
    public static void glUniform4i(int location, int v0, int v1, int v2, int v3) {
        var mh$ = glUniform4i.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4i", location, v0, v1, v2, v3);
            }
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform1fv$descriptor() {
        return glUniform1fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform1fv$handle() {
        return glUniform1fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform1fv$address() {
        return glUniform1fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform1fv(int location, int count, MemorySegment value) {
        var mh$ = glUniform1fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1fv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform2fv$descriptor() {
        return glUniform2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform2fv$handle() {
        return glUniform2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform2fv$address() {
        return glUniform2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform2fv(int location, int count, MemorySegment value) {
        var mh$ = glUniform2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2fv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform3fv$descriptor() {
        return glUniform3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform3fv$handle() {
        return glUniform3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform3fv$address() {
        return glUniform3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform3fv(int location, int count, MemorySegment value) {
        var mh$ = glUniform3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3fv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniform4fv$descriptor() {
        return glUniform4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniform4fv$handle() {
        return glUniform4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniform4fv$address() {
        return glUniform4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
     * }
     */
    public static void glUniform4fv(int location, int count, MemorySegment value) {
        var mh$ = glUniform4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4fv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform1iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform1iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform1iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform1iv$descriptor() {
        return glUniform1iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform1iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform1iv$handle() {
        return glUniform1iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform1iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform1iv$address() {
        return glUniform1iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform1iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform1iv(int location, int count, MemorySegment value) {
        var mh$ = glUniform1iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform1iv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform2iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform2iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform2iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform2iv$descriptor() {
        return glUniform2iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform2iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform2iv$handle() {
        return glUniform2iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform2iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform2iv$address() {
        return glUniform2iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform2iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform2iv(int location, int count, MemorySegment value) {
        var mh$ = glUniform2iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform2iv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform3iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform3iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform3iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform3iv$descriptor() {
        return glUniform3iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform3iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform3iv$handle() {
        return glUniform3iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform3iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform3iv$address() {
        return glUniform3iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform3iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform3iv(int location, int count, MemorySegment value) {
        var mh$ = glUniform3iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform3iv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniform4iv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniform4iv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniform4iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static FunctionDescriptor glUniform4iv$descriptor() {
        return glUniform4iv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniform4iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MethodHandle glUniform4iv$handle() {
        return glUniform4iv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniform4iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static MemorySegment glUniform4iv$address() {
        return glUniform4iv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniform4iv(GLint location, GLsizei count, const GLint *value)
     * }
     */
    public static void glUniform4iv(int location, int count, MemorySegment value) {
        var mh$ = glUniform4iv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniform4iv", location, count, value);
            }
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix2fv$descriptor() {
        return glUniformMatrix2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix2fv$handle() {
        return glUniformMatrix2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix2fv$address() {
        return glUniformMatrix2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix2fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix2fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix3fv$descriptor() {
        return glUniformMatrix3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix3fv$handle() {
        return glUniformMatrix3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix3fv$address() {
        return glUniformMatrix3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix3fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix3fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix4fv$descriptor() {
        return glUniformMatrix4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix4fv$handle() {
        return glUniformMatrix4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix4fv$address() {
        return glUniformMatrix4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix4fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix4fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsShader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsShader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsShader(GLuint shader)
     * }
     */
    public static FunctionDescriptor glIsShader$descriptor() {
        return glIsShader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsShader(GLuint shader)
     * }
     */
    public static MethodHandle glIsShader$handle() {
        return glIsShader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsShader(GLuint shader)
     * }
     */
    public static MemorySegment glIsShader$address() {
        return glIsShader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsShader(GLuint shader)
     * }
     */
    public static byte glIsShader(int shader) {
        var mh$ = glIsShader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsShader", shader);
            }
            return (byte)mh$.invokeExact(shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glIsProgram {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glIsProgram");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgram(GLuint program)
     * }
     */
    public static FunctionDescriptor glIsProgram$descriptor() {
        return glIsProgram.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgram(GLuint program)
     * }
     */
    public static MethodHandle glIsProgram$handle() {
        return glIsProgram.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean glIsProgram(GLuint program)
     * }
     */
    public static MemorySegment glIsProgram$address() {
        return glIsProgram.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean glIsProgram(GLuint program)
     * }
     */
    public static byte glIsProgram(int program) {
        var mh$ = glIsProgram.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glIsProgram", program);
            }
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetShaderiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetShaderiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetShaderiv$descriptor() {
        return glGetShaderiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetShaderiv$handle() {
        return glGetShaderiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetShaderiv$address() {
        return glGetShaderiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
     * }
     */
    public static void glGetShaderiv(int shader, int pname, MemorySegment params) {
        var mh$ = glGetShaderiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetShaderiv", shader, pname, params);
            }
            mh$.invokeExact(shader, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetProgramiv$descriptor() {
        return glGetProgramiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
     * }
     */
    public static MethodHandle glGetProgramiv$handle() {
        return glGetProgramiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
     * }
     */
    public static MemorySegment glGetProgramiv$address() {
        return glGetProgramiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
     * }
     */
    public static void glGetProgramiv(int program, int pname, MemorySegment params) {
        var mh$ = glGetProgramiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramiv", program, pname, params);
            }
            mh$.invokeExact(program, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetAttachedShaders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetAttachedShaders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
     * }
     */
    public static FunctionDescriptor glGetAttachedShaders$descriptor() {
        return glGetAttachedShaders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
     * }
     */
    public static MethodHandle glGetAttachedShaders$handle() {
        return glGetAttachedShaders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
     * }
     */
    public static MemorySegment glGetAttachedShaders$address() {
        return glGetAttachedShaders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
     * }
     */
    public static void glGetAttachedShaders(int program, int maxCount, MemorySegment count, MemorySegment shaders) {
        var mh$ = glGetAttachedShaders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetAttachedShaders", program, maxCount, count, shaders);
            }
            mh$.invokeExact(program, maxCount, count, shaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetShaderInfoLog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetShaderInfoLog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static FunctionDescriptor glGetShaderInfoLog$descriptor() {
        return glGetShaderInfoLog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static MethodHandle glGetShaderInfoLog$handle() {
        return glGetShaderInfoLog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static MemorySegment glGetShaderInfoLog$address() {
        return glGetShaderInfoLog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static void glGetShaderInfoLog(int shader, int bufSize, MemorySegment length, MemorySegment infoLog) {
        var mh$ = glGetShaderInfoLog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetShaderInfoLog", shader, bufSize, length, infoLog);
            }
            mh$.invokeExact(shader, bufSize, length, infoLog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetProgramInfoLog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetProgramInfoLog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static FunctionDescriptor glGetProgramInfoLog$descriptor() {
        return glGetProgramInfoLog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static MethodHandle glGetProgramInfoLog$handle() {
        return glGetProgramInfoLog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static MemorySegment glGetProgramInfoLog$address() {
        return glGetProgramInfoLog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
     * }
     */
    public static void glGetProgramInfoLog(int program, int bufSize, MemorySegment length, MemorySegment infoLog) {
        var mh$ = glGetProgramInfoLog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetProgramInfoLog", program, bufSize, length, infoLog);
            }
            mh$.invokeExact(program, bufSize, length, infoLog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformLocation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocation(GLuint program, const GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetUniformLocation$descriptor() {
        return glGetUniformLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocation(GLuint program, const GLchar *name)
     * }
     */
    public static MethodHandle glGetUniformLocation$handle() {
        return glGetUniformLocation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetUniformLocation(GLuint program, const GLchar *name)
     * }
     */
    public static MemorySegment glGetUniformLocation$address() {
        return glGetUniformLocation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetUniformLocation(GLuint program, const GLchar *name)
     * }
     */
    public static int glGetUniformLocation(int program, MemorySegment name) {
        var mh$ = glGetUniformLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformLocation", program, name);
            }
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetActiveUniform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetActiveUniform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetActiveUniform$descriptor() {
        return glGetActiveUniform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static MethodHandle glGetActiveUniform$handle() {
        return glGetActiveUniform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static MemorySegment glGetActiveUniform$address() {
        return glGetActiveUniform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static void glGetActiveUniform(int program, int index, int bufSize, MemorySegment length, MemorySegment size, MemorySegment type, MemorySegment name) {
        var mh$ = glGetActiveUniform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetActiveUniform", program, index, bufSize, length, size, type, name);
            }
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
     * }
     */
    public static FunctionDescriptor glGetUniformfv$descriptor() {
        return glGetUniformfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
     * }
     */
    public static MethodHandle glGetUniformfv$handle() {
        return glGetUniformfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
     * }
     */
    public static MemorySegment glGetUniformfv$address() {
        return glGetUniformfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
     * }
     */
    public static void glGetUniformfv(int program, int location, MemorySegment params) {
        var mh$ = glGetUniformfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformfv", program, location, params);
            }
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetUniformiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetUniformiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetUniformiv(GLuint program, GLint location, GLint *params)
     * }
     */
    public static FunctionDescriptor glGetUniformiv$descriptor() {
        return glGetUniformiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetUniformiv(GLuint program, GLint location, GLint *params)
     * }
     */
    public static MethodHandle glGetUniformiv$handle() {
        return glGetUniformiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetUniformiv(GLuint program, GLint location, GLint *params)
     * }
     */
    public static MemorySegment glGetUniformiv$address() {
        return glGetUniformiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetUniformiv(GLuint program, GLint location, GLint *params)
     * }
     */
    public static void glGetUniformiv(int program, int location, MemorySegment params) {
        var mh$ = glGetUniformiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetUniformiv", program, location, params);
            }
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetShaderSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetShaderSource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
     * }
     */
    public static FunctionDescriptor glGetShaderSource$descriptor() {
        return glGetShaderSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
     * }
     */
    public static MethodHandle glGetShaderSource$handle() {
        return glGetShaderSource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
     * }
     */
    public static MemorySegment glGetShaderSource$address() {
        return glGetShaderSource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
     * }
     */
    public static void glGetShaderSource(int shader, int bufSize, MemorySegment length, MemorySegment source) {
        var mh$ = glGetShaderSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetShaderSource", shader, bufSize, length, source);
            }
            mh$.invokeExact(shader, bufSize, length, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glBindAttribLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glBindAttribLocation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
     * }
     */
    public static FunctionDescriptor glBindAttribLocation$descriptor() {
        return glBindAttribLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
     * }
     */
    public static MethodHandle glBindAttribLocation$handle() {
        return glBindAttribLocation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
     * }
     */
    public static MemorySegment glBindAttribLocation$address() {
        return glBindAttribLocation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
     * }
     */
    public static void glBindAttribLocation(int program, int index, MemorySegment name) {
        var mh$ = glBindAttribLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glBindAttribLocation", program, index, name);
            }
            mh$.invokeExact(program, index, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetActiveAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetActiveAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetActiveAttrib$descriptor() {
        return glGetActiveAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static MethodHandle glGetActiveAttrib$handle() {
        return glGetActiveAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static MemorySegment glGetActiveAttrib$address() {
        return glGetActiveAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
     * }
     */
    public static void glGetActiveAttrib(int program, int index, int bufSize, MemorySegment length, MemorySegment size, MemorySegment type, MemorySegment name) {
        var mh$ = glGetActiveAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetActiveAttrib", program, index, bufSize, length, size, type, name);
            }
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glGetAttribLocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glGetAttribLocation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocation(GLuint program, const GLchar *name)
     * }
     */
    public static FunctionDescriptor glGetAttribLocation$descriptor() {
        return glGetAttribLocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocation(GLuint program, const GLchar *name)
     * }
     */
    public static MethodHandle glGetAttribLocation$handle() {
        return glGetAttribLocation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint glGetAttribLocation(GLuint program, const GLchar *name)
     * }
     */
    public static MemorySegment glGetAttribLocation$address() {
        return glGetAttribLocation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint glGetAttribLocation(GLuint program, const GLchar *name)
     * }
     */
    public static int glGetAttribLocation(int program, MemorySegment name) {
        var mh$ = glGetAttribLocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glGetAttribLocation", program, name);
            }
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilFuncSeparate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilFuncSeparate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static FunctionDescriptor glStencilFuncSeparate$descriptor() {
        return glStencilFuncSeparate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static MethodHandle glStencilFuncSeparate$handle() {
        return glStencilFuncSeparate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static MemorySegment glStencilFuncSeparate$address() {
        return glStencilFuncSeparate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
     * }
     */
    public static void glStencilFuncSeparate(int face, int func, int ref, int mask) {
        var mh$ = glStencilFuncSeparate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilFuncSeparate", face, func, ref, mask);
            }
            mh$.invokeExact(face, func, ref, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilOpSeparate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilOpSeparate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static FunctionDescriptor glStencilOpSeparate$descriptor() {
        return glStencilOpSeparate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static MethodHandle glStencilOpSeparate$handle() {
        return glStencilOpSeparate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static MemorySegment glStencilOpSeparate$address() {
        return glStencilOpSeparate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
     * }
     */
    public static void glStencilOpSeparate(int face, int fail, int zfail, int zpass) {
        var mh$ = glStencilOpSeparate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilOpSeparate", face, fail, zfail, zpass);
            }
            mh$.invokeExact(face, fail, zfail, zpass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glStencilMaskSeparate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glStencilMaskSeparate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glStencilMaskSeparate(GLenum face, GLuint mask)
     * }
     */
    public static FunctionDescriptor glStencilMaskSeparate$descriptor() {
        return glStencilMaskSeparate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glStencilMaskSeparate(GLenum face, GLuint mask)
     * }
     */
    public static MethodHandle glStencilMaskSeparate$handle() {
        return glStencilMaskSeparate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glStencilMaskSeparate(GLenum face, GLuint mask)
     * }
     */
    public static MemorySegment glStencilMaskSeparate$address() {
        return glStencilMaskSeparate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glStencilMaskSeparate(GLenum face, GLuint mask)
     * }
     */
    public static void glStencilMaskSeparate(int face, int mask) {
        var mh$ = glStencilMaskSeparate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glStencilMaskSeparate", face, mask);
            }
            mh$.invokeExact(face, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix2x3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix2x3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix2x3fv$descriptor() {
        return glUniformMatrix2x3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix2x3fv$handle() {
        return glUniformMatrix2x3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix2x3fv$address() {
        return glUniformMatrix2x3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix2x3fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix2x3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix2x3fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix3x2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix3x2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix3x2fv$descriptor() {
        return glUniformMatrix3x2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix3x2fv$handle() {
        return glUniformMatrix3x2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix3x2fv$address() {
        return glUniformMatrix3x2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix3x2fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix3x2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix3x2fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix2x4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix2x4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix2x4fv$descriptor() {
        return glUniformMatrix2x4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix2x4fv$handle() {
        return glUniformMatrix2x4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix2x4fv$address() {
        return glUniformMatrix2x4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix2x4fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix2x4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix2x4fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix4x2fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix4x2fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix4x2fv$descriptor() {
        return glUniformMatrix4x2fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix4x2fv$handle() {
        return glUniformMatrix4x2fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix4x2fv$address() {
        return glUniformMatrix4x2fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix4x2fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix4x2fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix4x2fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix3x4fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix3x4fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix3x4fv$descriptor() {
        return glUniformMatrix3x4fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix3x4fv$handle() {
        return glUniformMatrix3x4fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix3x4fv$address() {
        return glUniformMatrix3x4fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix3x4fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix3x4fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix3x4fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glUniformMatrix4x3fv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_CHAR,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glUniformMatrix4x3fv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static FunctionDescriptor glUniformMatrix4x3fv$descriptor() {
        return glUniformMatrix4x3fv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MethodHandle glUniformMatrix4x3fv$handle() {
        return glUniformMatrix4x3fv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static MemorySegment glUniformMatrix4x3fv$address() {
        return glUniformMatrix4x3fv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
     * }
     */
    public static void glUniformMatrix4x3fv(int location, int count, byte transpose, MemorySegment value) {
        var mh$ = glUniformMatrix4x3fv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glUniformMatrix4x3fv", location, count, transpose, value);
            }
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBeginCurve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBeginCurve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluBeginCurve(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluBeginCurve$descriptor() {
        return gluBeginCurve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluBeginCurve(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluBeginCurve$handle() {
        return gluBeginCurve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluBeginCurve(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluBeginCurve$address() {
        return gluBeginCurve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluBeginCurve(GLUnurbs *nurb)
     * }
     */
    public static void gluBeginCurve(MemorySegment nurb) {
        var mh$ = gluBeginCurve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBeginCurve", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBeginPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBeginPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluBeginPolygon(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluBeginPolygon$descriptor() {
        return gluBeginPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluBeginPolygon(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluBeginPolygon$handle() {
        return gluBeginPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluBeginPolygon(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluBeginPolygon$address() {
        return gluBeginPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluBeginPolygon(GLUtesselator *tess)
     * }
     */
    public static void gluBeginPolygon(MemorySegment tess) {
        var mh$ = gluBeginPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBeginPolygon", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBeginSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBeginSurface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluBeginSurface(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluBeginSurface$descriptor() {
        return gluBeginSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluBeginSurface(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluBeginSurface$handle() {
        return gluBeginSurface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluBeginSurface(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluBeginSurface$address() {
        return gluBeginSurface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluBeginSurface(GLUnurbs *nurb)
     * }
     */
    public static void gluBeginSurface(MemorySegment nurb) {
        var mh$ = gluBeginSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBeginSurface", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBeginTrim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBeginTrim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluBeginTrim(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluBeginTrim$descriptor() {
        return gluBeginTrim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluBeginTrim(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluBeginTrim$handle() {
        return gluBeginTrim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluBeginTrim(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluBeginTrim$address() {
        return gluBeginTrim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluBeginTrim(GLUnurbs *nurb)
     * }
     */
    public static void gluBeginTrim(MemorySegment nurb) {
        var mh$ = gluBeginTrim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBeginTrim", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild1DMipmapLevels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild1DMipmapLevels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild1DMipmapLevels$descriptor() {
        return gluBuild1DMipmapLevels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MethodHandle gluBuild1DMipmapLevels$handle() {
        return gluBuild1DMipmapLevels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MemorySegment gluBuild1DMipmapLevels$address() {
        return gluBuild1DMipmapLevels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static int gluBuild1DMipmapLevels(int target, int internalFormat, int width, int format, int type, int level, int base, int max, MemorySegment data) {
        var mh$ = gluBuild1DMipmapLevels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild1DMipmapLevels", target, internalFormat, width, format, type, level, base, max, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, level, base, max, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild1DMipmaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild1DMipmaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild1DMipmaps$descriptor() {
        return gluBuild1DMipmaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MethodHandle gluBuild1DMipmaps$handle() {
        return gluBuild1DMipmaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MemorySegment gluBuild1DMipmaps$address() {
        return gluBuild1DMipmaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild1DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLenum format, GLenum type, const void *data)
     * }
     */
    public static int gluBuild1DMipmaps(int target, int internalFormat, int width, int format, int type, MemorySegment data) {
        var mh$ = gluBuild1DMipmaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild1DMipmaps", target, internalFormat, width, format, type, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, format, type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild2DMipmapLevels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild2DMipmapLevels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild2DMipmapLevels$descriptor() {
        return gluBuild2DMipmapLevels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MethodHandle gluBuild2DMipmapLevels$handle() {
        return gluBuild2DMipmapLevels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MemorySegment gluBuild2DMipmapLevels$address() {
        return gluBuild2DMipmapLevels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static int gluBuild2DMipmapLevels(int target, int internalFormat, int width, int height, int format, int type, int level, int base, int max, MemorySegment data) {
        var mh$ = gluBuild2DMipmapLevels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild2DMipmapLevels", target, internalFormat, width, height, format, type, level, base, max, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, level, base, max, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild2DMipmaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild2DMipmaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild2DMipmaps$descriptor() {
        return gluBuild2DMipmaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MethodHandle gluBuild2DMipmaps$handle() {
        return gluBuild2DMipmaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MemorySegment gluBuild2DMipmaps$address() {
        return gluBuild2DMipmaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data)
     * }
     */
    public static int gluBuild2DMipmaps(int target, int internalFormat, int width, int height, int format, int type, MemorySegment data) {
        var mh$ = gluBuild2DMipmaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild2DMipmaps", target, internalFormat, width, height, format, type, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, height, format, type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild3DMipmapLevels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild3DMipmapLevels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild3DMipmapLevels$descriptor() {
        return gluBuild3DMipmapLevels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MethodHandle gluBuild3DMipmapLevels$handle() {
        return gluBuild3DMipmapLevels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static MemorySegment gluBuild3DMipmapLevels$address() {
        return gluBuild3DMipmapLevels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmapLevels(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLint level, GLint base, GLint max, const void *data)
     * }
     */
    public static int gluBuild3DMipmapLevels(int target, int internalFormat, int width, int height, int depth, int format, int type, int level, int base, int max, MemorySegment data) {
        var mh$ = gluBuild3DMipmapLevels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild3DMipmapLevels", target, internalFormat, width, height, depth, format, type, level, base, max, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, level, base, max, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluBuild3DMipmaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluBuild3DMipmaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
     * }
     */
    public static FunctionDescriptor gluBuild3DMipmaps$descriptor() {
        return gluBuild3DMipmaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MethodHandle gluBuild3DMipmaps$handle() {
        return gluBuild3DMipmaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
     * }
     */
    public static MemorySegment gluBuild3DMipmaps$address() {
        return gluBuild3DMipmaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluBuild3DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)
     * }
     */
    public static int gluBuild3DMipmaps(int target, int internalFormat, int width, int height, int depth, int format, int type, MemorySegment data) {
        var mh$ = gluBuild3DMipmaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluBuild3DMipmaps", target, internalFormat, width, height, depth, format, type, data);
            }
            return (int)mh$.invokeExact(target, internalFormat, width, height, depth, format, type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluCheckExtension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_CHAR,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluCheckExtension");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLboolean gluCheckExtension(const GLubyte *extName, const GLubyte *extString)
     * }
     */
    public static FunctionDescriptor gluCheckExtension$descriptor() {
        return gluCheckExtension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLboolean gluCheckExtension(const GLubyte *extName, const GLubyte *extString)
     * }
     */
    public static MethodHandle gluCheckExtension$handle() {
        return gluCheckExtension.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLboolean gluCheckExtension(const GLubyte *extName, const GLubyte *extString)
     * }
     */
    public static MemorySegment gluCheckExtension$address() {
        return gluCheckExtension.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLboolean gluCheckExtension(const GLubyte *extName, const GLubyte *extString)
     * }
     */
    public static byte gluCheckExtension(MemorySegment extName, MemorySegment extString) {
        var mh$ = gluCheckExtension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluCheckExtension", extName, extString);
            }
            return (byte)mh$.invokeExact(extName, extString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluCylinder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluCylinder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluCylinder(GLUquadric *quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor gluCylinder$descriptor() {
        return gluCylinder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluCylinder(GLUquadric *quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle gluCylinder$handle() {
        return gluCylinder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluCylinder(GLUquadric *quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment gluCylinder$address() {
        return gluCylinder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluCylinder(GLUquadric *quad, GLdouble base, GLdouble top, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static void gluCylinder(MemorySegment quad, double base, double top, double height, int slices, int stacks) {
        var mh$ = gluCylinder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluCylinder", quad, base, top, height, slices, stacks);
            }
            mh$.invokeExact(quad, base, top, height, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluDeleteNurbsRenderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluDeleteNurbsRenderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluDeleteNurbsRenderer(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluDeleteNurbsRenderer$descriptor() {
        return gluDeleteNurbsRenderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluDeleteNurbsRenderer(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluDeleteNurbsRenderer$handle() {
        return gluDeleteNurbsRenderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluDeleteNurbsRenderer(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluDeleteNurbsRenderer$address() {
        return gluDeleteNurbsRenderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluDeleteNurbsRenderer(GLUnurbs *nurb)
     * }
     */
    public static void gluDeleteNurbsRenderer(MemorySegment nurb) {
        var mh$ = gluDeleteNurbsRenderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluDeleteNurbsRenderer", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluDeleteQuadric {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluDeleteQuadric");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluDeleteQuadric(GLUquadric *quad)
     * }
     */
    public static FunctionDescriptor gluDeleteQuadric$descriptor() {
        return gluDeleteQuadric.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluDeleteQuadric(GLUquadric *quad)
     * }
     */
    public static MethodHandle gluDeleteQuadric$handle() {
        return gluDeleteQuadric.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluDeleteQuadric(GLUquadric *quad)
     * }
     */
    public static MemorySegment gluDeleteQuadric$address() {
        return gluDeleteQuadric.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluDeleteQuadric(GLUquadric *quad)
     * }
     */
    public static void gluDeleteQuadric(MemorySegment quad) {
        var mh$ = gluDeleteQuadric.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluDeleteQuadric", quad);
            }
            mh$.invokeExact(quad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluDeleteTess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluDeleteTess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluDeleteTess(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluDeleteTess$descriptor() {
        return gluDeleteTess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluDeleteTess(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluDeleteTess$handle() {
        return gluDeleteTess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluDeleteTess(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluDeleteTess$address() {
        return gluDeleteTess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluDeleteTess(GLUtesselator *tess)
     * }
     */
    public static void gluDeleteTess(MemorySegment tess) {
        var mh$ = gluDeleteTess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluDeleteTess", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluDisk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluDisk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)
     * }
     */
    public static FunctionDescriptor gluDisk$descriptor() {
        return gluDisk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)
     * }
     */
    public static MethodHandle gluDisk$handle() {
        return gluDisk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)
     * }
     */
    public static MemorySegment gluDisk$address() {
        return gluDisk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops)
     * }
     */
    public static void gluDisk(MemorySegment quad, double inner, double outer, int slices, int loops) {
        var mh$ = gluDisk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluDisk", quad, inner, outer, slices, loops);
            }
            mh$.invokeExact(quad, inner, outer, slices, loops);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluEndCurve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluEndCurve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluEndCurve(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluEndCurve$descriptor() {
        return gluEndCurve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluEndCurve(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluEndCurve$handle() {
        return gluEndCurve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluEndCurve(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluEndCurve$address() {
        return gluEndCurve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluEndCurve(GLUnurbs *nurb)
     * }
     */
    public static void gluEndCurve(MemorySegment nurb) {
        var mh$ = gluEndCurve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluEndCurve", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluEndPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluEndPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluEndPolygon(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluEndPolygon$descriptor() {
        return gluEndPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluEndPolygon(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluEndPolygon$handle() {
        return gluEndPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluEndPolygon(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluEndPolygon$address() {
        return gluEndPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluEndPolygon(GLUtesselator *tess)
     * }
     */
    public static void gluEndPolygon(MemorySegment tess) {
        var mh$ = gluEndPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluEndPolygon", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluEndSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluEndSurface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluEndSurface(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluEndSurface$descriptor() {
        return gluEndSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluEndSurface(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluEndSurface$handle() {
        return gluEndSurface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluEndSurface(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluEndSurface$address() {
        return gluEndSurface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluEndSurface(GLUnurbs *nurb)
     * }
     */
    public static void gluEndSurface(MemorySegment nurb) {
        var mh$ = gluEndSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluEndSurface", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluEndTrim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluEndTrim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluEndTrim(GLUnurbs *nurb)
     * }
     */
    public static FunctionDescriptor gluEndTrim$descriptor() {
        return gluEndTrim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluEndTrim(GLUnurbs *nurb)
     * }
     */
    public static MethodHandle gluEndTrim$handle() {
        return gluEndTrim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluEndTrim(GLUnurbs *nurb)
     * }
     */
    public static MemorySegment gluEndTrim$address() {
        return gluEndTrim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluEndTrim(GLUnurbs *nurb)
     * }
     */
    public static void gluEndTrim(MemorySegment nurb) {
        var mh$ = gluEndTrim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluEndTrim", nurb);
            }
            mh$.invokeExact(nurb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluErrorString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluErrorString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GLubyte *gluErrorString(GLenum error)
     * }
     */
    public static FunctionDescriptor gluErrorString$descriptor() {
        return gluErrorString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GLubyte *gluErrorString(GLenum error)
     * }
     */
    public static MethodHandle gluErrorString$handle() {
        return gluErrorString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const GLubyte *gluErrorString(GLenum error)
     * }
     */
    public static MemorySegment gluErrorString$address() {
        return gluErrorString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const GLubyte *gluErrorString(GLenum error)
     * }
     */
    public static MemorySegment gluErrorString(int error) {
        var mh$ = gluErrorString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluErrorString", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluGetNurbsProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluGetNurbsProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluGetNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat *data)
     * }
     */
    public static FunctionDescriptor gluGetNurbsProperty$descriptor() {
        return gluGetNurbsProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluGetNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat *data)
     * }
     */
    public static MethodHandle gluGetNurbsProperty$handle() {
        return gluGetNurbsProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluGetNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat *data)
     * }
     */
    public static MemorySegment gluGetNurbsProperty$address() {
        return gluGetNurbsProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluGetNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat *data)
     * }
     */
    public static void gluGetNurbsProperty(MemorySegment nurb, int property, MemorySegment data) {
        var mh$ = gluGetNurbsProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluGetNurbsProperty", nurb, property, data);
            }
            mh$.invokeExact(nurb, property, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluGetString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluGetString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GLubyte *gluGetString(GLenum name)
     * }
     */
    public static FunctionDescriptor gluGetString$descriptor() {
        return gluGetString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GLubyte *gluGetString(GLenum name)
     * }
     */
    public static MethodHandle gluGetString$handle() {
        return gluGetString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const GLubyte *gluGetString(GLenum name)
     * }
     */
    public static MemorySegment gluGetString$address() {
        return gluGetString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const GLubyte *gluGetString(GLenum name)
     * }
     */
    public static MemorySegment gluGetString(int name) {
        var mh$ = gluGetString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluGetString", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluGetTessProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluGetTessProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluGetTessProperty(GLUtesselator *tess, GLenum which, GLdouble *data)
     * }
     */
    public static FunctionDescriptor gluGetTessProperty$descriptor() {
        return gluGetTessProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluGetTessProperty(GLUtesselator *tess, GLenum which, GLdouble *data)
     * }
     */
    public static MethodHandle gluGetTessProperty$handle() {
        return gluGetTessProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluGetTessProperty(GLUtesselator *tess, GLenum which, GLdouble *data)
     * }
     */
    public static MemorySegment gluGetTessProperty$address() {
        return gluGetTessProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluGetTessProperty(GLUtesselator *tess, GLenum which, GLdouble *data)
     * }
     */
    public static void gluGetTessProperty(MemorySegment tess, int which, MemorySegment data) {
        var mh$ = gluGetTessProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluGetTessProperty", tess, which, data);
            }
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluLoadSamplingMatrices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluLoadSamplingMatrices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluLoadSamplingMatrices(GLUnurbs *nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view)
     * }
     */
    public static FunctionDescriptor gluLoadSamplingMatrices$descriptor() {
        return gluLoadSamplingMatrices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluLoadSamplingMatrices(GLUnurbs *nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view)
     * }
     */
    public static MethodHandle gluLoadSamplingMatrices$handle() {
        return gluLoadSamplingMatrices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluLoadSamplingMatrices(GLUnurbs *nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view)
     * }
     */
    public static MemorySegment gluLoadSamplingMatrices$address() {
        return gluLoadSamplingMatrices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluLoadSamplingMatrices(GLUnurbs *nurb, const GLfloat *model, const GLfloat *perspective, const GLint *view)
     * }
     */
    public static void gluLoadSamplingMatrices(MemorySegment nurb, MemorySegment model, MemorySegment perspective, MemorySegment view) {
        var mh$ = gluLoadSamplingMatrices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluLoadSamplingMatrices", nurb, model, perspective, view);
            }
            mh$.invokeExact(nurb, model, perspective, view);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluLookAt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluLookAt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)
     * }
     */
    public static FunctionDescriptor gluLookAt$descriptor() {
        return gluLookAt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)
     * }
     */
    public static MethodHandle gluLookAt$handle() {
        return gluLookAt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)
     * }
     */
    public static MemorySegment gluLookAt$address() {
        return gluLookAt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)
     * }
     */
    public static void gluLookAt(double eyeX, double eyeY, double eyeZ, double centerX, double centerY, double centerZ, double upX, double upY, double upZ) {
        var mh$ = gluLookAt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluLookAt", eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
            }
            mh$.invokeExact(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNewNurbsRenderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNewNurbsRenderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLUnurbs *gluNewNurbsRenderer()
     * }
     */
    public static FunctionDescriptor gluNewNurbsRenderer$descriptor() {
        return gluNewNurbsRenderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLUnurbs *gluNewNurbsRenderer()
     * }
     */
    public static MethodHandle gluNewNurbsRenderer$handle() {
        return gluNewNurbsRenderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLUnurbs *gluNewNurbsRenderer()
     * }
     */
    public static MemorySegment gluNewNurbsRenderer$address() {
        return gluNewNurbsRenderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLUnurbs *gluNewNurbsRenderer()
     * }
     */
    public static MemorySegment gluNewNurbsRenderer() {
        var mh$ = gluNewNurbsRenderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNewNurbsRenderer");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNewQuadric {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNewQuadric");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLUquadric *gluNewQuadric()
     * }
     */
    public static FunctionDescriptor gluNewQuadric$descriptor() {
        return gluNewQuadric.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLUquadric *gluNewQuadric()
     * }
     */
    public static MethodHandle gluNewQuadric$handle() {
        return gluNewQuadric.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLUquadric *gluNewQuadric()
     * }
     */
    public static MemorySegment gluNewQuadric$address() {
        return gluNewQuadric.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLUquadric *gluNewQuadric()
     * }
     */
    public static MemorySegment gluNewQuadric() {
        var mh$ = gluNewQuadric.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNewQuadric");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNewTess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNewTess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLUtesselator *gluNewTess()
     * }
     */
    public static FunctionDescriptor gluNewTess$descriptor() {
        return gluNewTess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLUtesselator *gluNewTess()
     * }
     */
    public static MethodHandle gluNewTess$handle() {
        return gluNewTess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLUtesselator *gluNewTess()
     * }
     */
    public static MemorySegment gluNewTess$address() {
        return gluNewTess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLUtesselator *gluNewTess()
     * }
     */
    public static MemorySegment gluNewTess() {
        var mh$ = gluNewTess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNewTess");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNextContour {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNextContour");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNextContour(GLUtesselator *tess, GLenum type)
     * }
     */
    public static FunctionDescriptor gluNextContour$descriptor() {
        return gluNextContour.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNextContour(GLUtesselator *tess, GLenum type)
     * }
     */
    public static MethodHandle gluNextContour$handle() {
        return gluNextContour.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNextContour(GLUtesselator *tess, GLenum type)
     * }
     */
    public static MemorySegment gluNextContour$address() {
        return gluNextContour.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNextContour(GLUtesselator *tess, GLenum type)
     * }
     */
    public static void gluNextContour(MemorySegment tess, int type) {
        var mh$ = gluNextContour.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNextContour", tess, type);
            }
            mh$.invokeExact(tess, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsCallback(GLUnurbs *nurb, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static FunctionDescriptor gluNurbsCallback$descriptor() {
        return gluNurbsCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsCallback(GLUnurbs *nurb, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MethodHandle gluNurbsCallback$handle() {
        return gluNurbsCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsCallback(GLUnurbs *nurb, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MemorySegment gluNurbsCallback$address() {
        return gluNurbsCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsCallback(GLUnurbs *nurb, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static void gluNurbsCallback(MemorySegment nurb, int which, MemorySegment CallBackFunc) {
        var mh$ = gluNurbsCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsCallback", nurb, which, CallBackFunc);
            }
            mh$.invokeExact(nurb, which, CallBackFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsCallbackData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsCallbackData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackData(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static FunctionDescriptor gluNurbsCallbackData$descriptor() {
        return gluNurbsCallbackData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackData(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static MethodHandle gluNurbsCallbackData$handle() {
        return gluNurbsCallbackData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackData(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static MemorySegment gluNurbsCallbackData$address() {
        return gluNurbsCallbackData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsCallbackData(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static void gluNurbsCallbackData(MemorySegment nurb, MemorySegment userData) {
        var mh$ = gluNurbsCallbackData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsCallbackData", nurb, userData);
            }
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsCallbackDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsCallbackDataEXT");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackDataEXT(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static FunctionDescriptor gluNurbsCallbackDataEXT$descriptor() {
        return gluNurbsCallbackDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackDataEXT(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static MethodHandle gluNurbsCallbackDataEXT$handle() {
        return gluNurbsCallbackDataEXT.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsCallbackDataEXT(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static MemorySegment gluNurbsCallbackDataEXT$address() {
        return gluNurbsCallbackDataEXT.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsCallbackDataEXT(GLUnurbs *nurb, GLvoid *userData)
     * }
     */
    public static void gluNurbsCallbackDataEXT(MemorySegment nurb, MemorySegment userData) {
        var mh$ = gluNurbsCallbackDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsCallbackDataEXT", nurb, userData);
            }
            mh$.invokeExact(nurb, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsCurve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsCurve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsCurve(GLUnurbs *nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type)
     * }
     */
    public static FunctionDescriptor gluNurbsCurve$descriptor() {
        return gluNurbsCurve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsCurve(GLUnurbs *nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type)
     * }
     */
    public static MethodHandle gluNurbsCurve$handle() {
        return gluNurbsCurve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsCurve(GLUnurbs *nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type)
     * }
     */
    public static MemorySegment gluNurbsCurve$address() {
        return gluNurbsCurve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsCurve(GLUnurbs *nurb, GLint knotCount, GLfloat *knots, GLint stride, GLfloat *control, GLint order, GLenum type)
     * }
     */
    public static void gluNurbsCurve(MemorySegment nurb, int knotCount, MemorySegment knots, int stride, MemorySegment control, int order, int type) {
        var mh$ = gluNurbsCurve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsCurve", nurb, knotCount, knots, stride, control, order, type);
            }
            mh$.invokeExact(nurb, knotCount, knots, stride, control, order, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat value)
     * }
     */
    public static FunctionDescriptor gluNurbsProperty$descriptor() {
        return gluNurbsProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat value)
     * }
     */
    public static MethodHandle gluNurbsProperty$handle() {
        return gluNurbsProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat value)
     * }
     */
    public static MemorySegment gluNurbsProperty$address() {
        return gluNurbsProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsProperty(GLUnurbs *nurb, GLenum property, GLfloat value)
     * }
     */
    public static void gluNurbsProperty(MemorySegment nurb, int property, float value) {
        var mh$ = gluNurbsProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsProperty", nurb, property, value);
            }
            mh$.invokeExact(nurb, property, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluNurbsSurface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluNurbsSurface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluNurbsSurface(GLUnurbs *nurb, GLint sKnotCount, GLfloat *sKnots, GLint tKnotCount, GLfloat *tKnots, GLint sStride, GLint tStride, GLfloat *control, GLint sOrder, GLint tOrder, GLenum type)
     * }
     */
    public static FunctionDescriptor gluNurbsSurface$descriptor() {
        return gluNurbsSurface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluNurbsSurface(GLUnurbs *nurb, GLint sKnotCount, GLfloat *sKnots, GLint tKnotCount, GLfloat *tKnots, GLint sStride, GLint tStride, GLfloat *control, GLint sOrder, GLint tOrder, GLenum type)
     * }
     */
    public static MethodHandle gluNurbsSurface$handle() {
        return gluNurbsSurface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluNurbsSurface(GLUnurbs *nurb, GLint sKnotCount, GLfloat *sKnots, GLint tKnotCount, GLfloat *tKnots, GLint sStride, GLint tStride, GLfloat *control, GLint sOrder, GLint tOrder, GLenum type)
     * }
     */
    public static MemorySegment gluNurbsSurface$address() {
        return gluNurbsSurface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluNurbsSurface(GLUnurbs *nurb, GLint sKnotCount, GLfloat *sKnots, GLint tKnotCount, GLfloat *tKnots, GLint sStride, GLint tStride, GLfloat *control, GLint sOrder, GLint tOrder, GLenum type)
     * }
     */
    public static void gluNurbsSurface(MemorySegment nurb, int sKnotCount, MemorySegment sKnots, int tKnotCount, MemorySegment tKnots, int sStride, int tStride, MemorySegment control, int sOrder, int tOrder, int type) {
        var mh$ = gluNurbsSurface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluNurbsSurface", nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type);
            }
            mh$.invokeExact(nurb, sKnotCount, sKnots, tKnotCount, tKnots, sStride, tStride, control, sOrder, tOrder, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluOrtho2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluOrtho2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
     * }
     */
    public static FunctionDescriptor gluOrtho2D$descriptor() {
        return gluOrtho2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
     * }
     */
    public static MethodHandle gluOrtho2D$handle() {
        return gluOrtho2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
     * }
     */
    public static MemorySegment gluOrtho2D$address() {
        return gluOrtho2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluOrtho2D(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top)
     * }
     */
    public static void gluOrtho2D(double left, double right, double bottom, double top) {
        var mh$ = gluOrtho2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluOrtho2D", left, right, bottom, top);
            }
            mh$.invokeExact(left, right, bottom, top);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluPartialDisk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluPartialDisk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluPartialDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)
     * }
     */
    public static FunctionDescriptor gluPartialDisk$descriptor() {
        return gluPartialDisk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluPartialDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)
     * }
     */
    public static MethodHandle gluPartialDisk$handle() {
        return gluPartialDisk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluPartialDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)
     * }
     */
    public static MemorySegment gluPartialDisk$address() {
        return gluPartialDisk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluPartialDisk(GLUquadric *quad, GLdouble inner, GLdouble outer, GLint slices, GLint loops, GLdouble start, GLdouble sweep)
     * }
     */
    public static void gluPartialDisk(MemorySegment quad, double inner, double outer, int slices, int loops, double start, double sweep) {
        var mh$ = gluPartialDisk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluPartialDisk", quad, inner, outer, slices, loops, start, sweep);
            }
            mh$.invokeExact(quad, inner, outer, slices, loops, start, sweep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluPerspective {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluPerspective");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static FunctionDescriptor gluPerspective$descriptor() {
        return gluPerspective.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MethodHandle gluPerspective$handle() {
        return gluPerspective.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static MemorySegment gluPerspective$address() {
        return gluPerspective.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluPerspective(GLdouble fovy, GLdouble aspect, GLdouble zNear, GLdouble zFar)
     * }
     */
    public static void gluPerspective(double fovy, double aspect, double zNear, double zFar) {
        var mh$ = gluPerspective.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluPerspective", fovy, aspect, zNear, zFar);
            }
            mh$.invokeExact(fovy, aspect, zNear, zFar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluPickMatrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluPickMatrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport)
     * }
     */
    public static FunctionDescriptor gluPickMatrix$descriptor() {
        return gluPickMatrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport)
     * }
     */
    public static MethodHandle gluPickMatrix$handle() {
        return gluPickMatrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport)
     * }
     */
    public static MemorySegment gluPickMatrix$address() {
        return gluPickMatrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluPickMatrix(GLdouble x, GLdouble y, GLdouble delX, GLdouble delY, GLint *viewport)
     * }
     */
    public static void gluPickMatrix(double x, double y, double delX, double delY, MemorySegment viewport) {
        var mh$ = gluPickMatrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluPickMatrix", x, y, delX, delY, viewport);
            }
            mh$.invokeExact(x, y, delX, delY, viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluProject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluProject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *winX, GLdouble *winY, GLdouble *winZ)
     * }
     */
    public static FunctionDescriptor gluProject$descriptor() {
        return gluProject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *winX, GLdouble *winY, GLdouble *winZ)
     * }
     */
    public static MethodHandle gluProject$handle() {
        return gluProject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *winX, GLdouble *winY, GLdouble *winZ)
     * }
     */
    public static MemorySegment gluProject$address() {
        return gluProject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluProject(GLdouble objX, GLdouble objY, GLdouble objZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *winX, GLdouble *winY, GLdouble *winZ)
     * }
     */
    public static int gluProject(double objX, double objY, double objZ, MemorySegment model, MemorySegment proj, MemorySegment view, MemorySegment winX, MemorySegment winY, MemorySegment winZ) {
        var mh$ = gluProject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluProject", objX, objY, objZ, model, proj, view, winX, winY, winZ);
            }
            return (int)mh$.invokeExact(objX, objY, objZ, model, proj, view, winX, winY, winZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluPwlCurve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluPwlCurve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluPwlCurve(GLUnurbs *nurb, GLint count, GLfloat *data, GLint stride, GLenum type)
     * }
     */
    public static FunctionDescriptor gluPwlCurve$descriptor() {
        return gluPwlCurve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluPwlCurve(GLUnurbs *nurb, GLint count, GLfloat *data, GLint stride, GLenum type)
     * }
     */
    public static MethodHandle gluPwlCurve$handle() {
        return gluPwlCurve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluPwlCurve(GLUnurbs *nurb, GLint count, GLfloat *data, GLint stride, GLenum type)
     * }
     */
    public static MemorySegment gluPwlCurve$address() {
        return gluPwlCurve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluPwlCurve(GLUnurbs *nurb, GLint count, GLfloat *data, GLint stride, GLenum type)
     * }
     */
    public static void gluPwlCurve(MemorySegment nurb, int count, MemorySegment data, int stride, int type) {
        var mh$ = gluPwlCurve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluPwlCurve", nurb, count, data, stride, type);
            }
            mh$.invokeExact(nurb, count, data, stride, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluQuadricCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluQuadricCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluQuadricCallback(GLUquadric *quad, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static FunctionDescriptor gluQuadricCallback$descriptor() {
        return gluQuadricCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluQuadricCallback(GLUquadric *quad, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MethodHandle gluQuadricCallback$handle() {
        return gluQuadricCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluQuadricCallback(GLUquadric *quad, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MemorySegment gluQuadricCallback$address() {
        return gluQuadricCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluQuadricCallback(GLUquadric *quad, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static void gluQuadricCallback(MemorySegment quad, int which, MemorySegment CallBackFunc) {
        var mh$ = gluQuadricCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluQuadricCallback", quad, which, CallBackFunc);
            }
            mh$.invokeExact(quad, which, CallBackFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluQuadricDrawStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluQuadricDrawStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluQuadricDrawStyle(GLUquadric *quad, GLenum draw)
     * }
     */
    public static FunctionDescriptor gluQuadricDrawStyle$descriptor() {
        return gluQuadricDrawStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluQuadricDrawStyle(GLUquadric *quad, GLenum draw)
     * }
     */
    public static MethodHandle gluQuadricDrawStyle$handle() {
        return gluQuadricDrawStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluQuadricDrawStyle(GLUquadric *quad, GLenum draw)
     * }
     */
    public static MemorySegment gluQuadricDrawStyle$address() {
        return gluQuadricDrawStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluQuadricDrawStyle(GLUquadric *quad, GLenum draw)
     * }
     */
    public static void gluQuadricDrawStyle(MemorySegment quad, int draw) {
        var mh$ = gluQuadricDrawStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluQuadricDrawStyle", quad, draw);
            }
            mh$.invokeExact(quad, draw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluQuadricNormals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluQuadricNormals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluQuadricNormals(GLUquadric *quad, GLenum normal)
     * }
     */
    public static FunctionDescriptor gluQuadricNormals$descriptor() {
        return gluQuadricNormals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluQuadricNormals(GLUquadric *quad, GLenum normal)
     * }
     */
    public static MethodHandle gluQuadricNormals$handle() {
        return gluQuadricNormals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluQuadricNormals(GLUquadric *quad, GLenum normal)
     * }
     */
    public static MemorySegment gluQuadricNormals$address() {
        return gluQuadricNormals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluQuadricNormals(GLUquadric *quad, GLenum normal)
     * }
     */
    public static void gluQuadricNormals(MemorySegment quad, int normal) {
        var mh$ = gluQuadricNormals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluQuadricNormals", quad, normal);
            }
            mh$.invokeExact(quad, normal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluQuadricOrientation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluQuadricOrientation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluQuadricOrientation(GLUquadric *quad, GLenum orientation)
     * }
     */
    public static FunctionDescriptor gluQuadricOrientation$descriptor() {
        return gluQuadricOrientation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluQuadricOrientation(GLUquadric *quad, GLenum orientation)
     * }
     */
    public static MethodHandle gluQuadricOrientation$handle() {
        return gluQuadricOrientation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluQuadricOrientation(GLUquadric *quad, GLenum orientation)
     * }
     */
    public static MemorySegment gluQuadricOrientation$address() {
        return gluQuadricOrientation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluQuadricOrientation(GLUquadric *quad, GLenum orientation)
     * }
     */
    public static void gluQuadricOrientation(MemorySegment quad, int orientation) {
        var mh$ = gluQuadricOrientation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluQuadricOrientation", quad, orientation);
            }
            mh$.invokeExact(quad, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluQuadricTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_CHAR
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluQuadricTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluQuadricTexture(GLUquadric *quad, GLboolean texture)
     * }
     */
    public static FunctionDescriptor gluQuadricTexture$descriptor() {
        return gluQuadricTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluQuadricTexture(GLUquadric *quad, GLboolean texture)
     * }
     */
    public static MethodHandle gluQuadricTexture$handle() {
        return gluQuadricTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluQuadricTexture(GLUquadric *quad, GLboolean texture)
     * }
     */
    public static MemorySegment gluQuadricTexture$address() {
        return gluQuadricTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluQuadricTexture(GLUquadric *quad, GLboolean texture)
     * }
     */
    public static void gluQuadricTexture(MemorySegment quad, byte texture) {
        var mh$ = gluQuadricTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluQuadricTexture", quad, texture);
            }
            mh$.invokeExact(quad, texture);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluScaleImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluScaleImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid *dataOut)
     * }
     */
    public static FunctionDescriptor gluScaleImage$descriptor() {
        return gluScaleImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid *dataOut)
     * }
     */
    public static MethodHandle gluScaleImage$handle() {
        return gluScaleImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid *dataOut)
     * }
     */
    public static MemorySegment gluScaleImage$address() {
        return gluScaleImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluScaleImage(GLenum format, GLsizei wIn, GLsizei hIn, GLenum typeIn, const void *dataIn, GLsizei wOut, GLsizei hOut, GLenum typeOut, GLvoid *dataOut)
     * }
     */
    public static int gluScaleImage(int format, int wIn, int hIn, int typeIn, MemorySegment dataIn, int wOut, int hOut, int typeOut, MemorySegment dataOut) {
        var mh$ = gluScaleImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluScaleImage", format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut);
            }
            return (int)mh$.invokeExact(format, wIn, hIn, typeIn, dataIn, wOut, hOut, typeOut, dataOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluSphere {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluSphere");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluSphere(GLUquadric *quad, GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor gluSphere$descriptor() {
        return gluSphere.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluSphere(GLUquadric *quad, GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle gluSphere$handle() {
        return gluSphere.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluSphere(GLUquadric *quad, GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment gluSphere$address() {
        return gluSphere.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluSphere(GLUquadric *quad, GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static void gluSphere(MemorySegment quad, double radius, int slices, int stacks) {
        var mh$ = gluSphere.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluSphere", quad, radius, slices, stacks);
            }
            mh$.invokeExact(quad, radius, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessBeginContour {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessBeginContour");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessBeginContour(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluTessBeginContour$descriptor() {
        return gluTessBeginContour.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessBeginContour(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluTessBeginContour$handle() {
        return gluTessBeginContour.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessBeginContour(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluTessBeginContour$address() {
        return gluTessBeginContour.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessBeginContour(GLUtesselator *tess)
     * }
     */
    public static void gluTessBeginContour(MemorySegment tess) {
        var mh$ = gluTessBeginContour.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessBeginContour", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessBeginPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessBeginPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessBeginPolygon(GLUtesselator *tess, GLvoid *data)
     * }
     */
    public static FunctionDescriptor gluTessBeginPolygon$descriptor() {
        return gluTessBeginPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessBeginPolygon(GLUtesselator *tess, GLvoid *data)
     * }
     */
    public static MethodHandle gluTessBeginPolygon$handle() {
        return gluTessBeginPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessBeginPolygon(GLUtesselator *tess, GLvoid *data)
     * }
     */
    public static MemorySegment gluTessBeginPolygon$address() {
        return gluTessBeginPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessBeginPolygon(GLUtesselator *tess, GLvoid *data)
     * }
     */
    public static void gluTessBeginPolygon(MemorySegment tess, MemorySegment data) {
        var mh$ = gluTessBeginPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessBeginPolygon", tess, data);
            }
            mh$.invokeExact(tess, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessCallback(GLUtesselator *tess, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static FunctionDescriptor gluTessCallback$descriptor() {
        return gluTessCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessCallback(GLUtesselator *tess, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MethodHandle gluTessCallback$handle() {
        return gluTessCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessCallback(GLUtesselator *tess, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static MemorySegment gluTessCallback$address() {
        return gluTessCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessCallback(GLUtesselator *tess, GLenum which, GLvoid (*CallBackFunc)())
     * }
     */
    public static void gluTessCallback(MemorySegment tess, int which, MemorySegment CallBackFunc) {
        var mh$ = gluTessCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessCallback", tess, which, CallBackFunc);
            }
            mh$.invokeExact(tess, which, CallBackFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessEndContour {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessEndContour");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessEndContour(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluTessEndContour$descriptor() {
        return gluTessEndContour.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessEndContour(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluTessEndContour$handle() {
        return gluTessEndContour.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessEndContour(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluTessEndContour$address() {
        return gluTessEndContour.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessEndContour(GLUtesselator *tess)
     * }
     */
    public static void gluTessEndContour(MemorySegment tess) {
        var mh$ = gluTessEndContour.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessEndContour", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessEndPolygon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessEndPolygon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessEndPolygon(GLUtesselator *tess)
     * }
     */
    public static FunctionDescriptor gluTessEndPolygon$descriptor() {
        return gluTessEndPolygon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessEndPolygon(GLUtesselator *tess)
     * }
     */
    public static MethodHandle gluTessEndPolygon$handle() {
        return gluTessEndPolygon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessEndPolygon(GLUtesselator *tess)
     * }
     */
    public static MemorySegment gluTessEndPolygon$address() {
        return gluTessEndPolygon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessEndPolygon(GLUtesselator *tess)
     * }
     */
    public static void gluTessEndPolygon(MemorySegment tess) {
        var mh$ = gluTessEndPolygon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessEndPolygon", tess);
            }
            mh$.invokeExact(tess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessNormal(GLUtesselator *tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)
     * }
     */
    public static FunctionDescriptor gluTessNormal$descriptor() {
        return gluTessNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessNormal(GLUtesselator *tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)
     * }
     */
    public static MethodHandle gluTessNormal$handle() {
        return gluTessNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessNormal(GLUtesselator *tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)
     * }
     */
    public static MemorySegment gluTessNormal$address() {
        return gluTessNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessNormal(GLUtesselator *tess, GLdouble valueX, GLdouble valueY, GLdouble valueZ)
     * }
     */
    public static void gluTessNormal(MemorySegment tess, double valueX, double valueY, double valueZ) {
        var mh$ = gluTessNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessNormal", tess, valueX, valueY, valueZ);
            }
            mh$.invokeExact(tess, valueX, valueY, valueZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT,
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessProperty(GLUtesselator *tess, GLenum which, GLdouble data)
     * }
     */
    public static FunctionDescriptor gluTessProperty$descriptor() {
        return gluTessProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessProperty(GLUtesselator *tess, GLenum which, GLdouble data)
     * }
     */
    public static MethodHandle gluTessProperty$handle() {
        return gluTessProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessProperty(GLUtesselator *tess, GLenum which, GLdouble data)
     * }
     */
    public static MemorySegment gluTessProperty$address() {
        return gluTessProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessProperty(GLUtesselator *tess, GLenum which, GLdouble data)
     * }
     */
    public static void gluTessProperty(MemorySegment tess, int which, double data) {
        var mh$ = gluTessProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessProperty", tess, which, data);
            }
            mh$.invokeExact(tess, which, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluTessVertex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluTessVertex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gluTessVertex(GLUtesselator *tess, GLdouble *location, GLvoid *data)
     * }
     */
    public static FunctionDescriptor gluTessVertex$descriptor() {
        return gluTessVertex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gluTessVertex(GLUtesselator *tess, GLdouble *location, GLvoid *data)
     * }
     */
    public static MethodHandle gluTessVertex$handle() {
        return gluTessVertex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void gluTessVertex(GLUtesselator *tess, GLdouble *location, GLvoid *data)
     * }
     */
    public static MemorySegment gluTessVertex$address() {
        return gluTessVertex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void gluTessVertex(GLUtesselator *tess, GLdouble *location, GLvoid *data)
     * }
     */
    public static void gluTessVertex(MemorySegment tess, MemorySegment location, MemorySegment data) {
        var mh$ = gluTessVertex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluTessVertex", tess, location, data);
            }
            mh$.invokeExact(tess, location, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluUnProject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluUnProject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *objX, GLdouble *objY, GLdouble *objZ)
     * }
     */
    public static FunctionDescriptor gluUnProject$descriptor() {
        return gluUnProject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *objX, GLdouble *objY, GLdouble *objZ)
     * }
     */
    public static MethodHandle gluUnProject$handle() {
        return gluUnProject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *objX, GLdouble *objY, GLdouble *objZ)
     * }
     */
    public static MemorySegment gluUnProject$address() {
        return gluUnProject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluUnProject(GLdouble winX, GLdouble winY, GLdouble winZ, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble *objX, GLdouble *objY, GLdouble *objZ)
     * }
     */
    public static int gluUnProject(double winX, double winY, double winZ, MemorySegment model, MemorySegment proj, MemorySegment view, MemorySegment objX, MemorySegment objY, MemorySegment objZ) {
        var mh$ = gluUnProject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluUnProject", winX, winY, winZ, model, proj, view, objX, objY, objZ);
            }
            return (int)mh$.invokeExact(winX, winY, winZ, model, proj, view, objX, objY, objZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gluUnProject4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("gluUnProject4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearPlane, GLdouble farPlane, GLdouble *objX, GLdouble *objY, GLdouble *objZ, GLdouble *objW)
     * }
     */
    public static FunctionDescriptor gluUnProject4$descriptor() {
        return gluUnProject4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearPlane, GLdouble farPlane, GLdouble *objX, GLdouble *objY, GLdouble *objZ, GLdouble *objW)
     * }
     */
    public static MethodHandle gluUnProject4$handle() {
        return gluUnProject4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearPlane, GLdouble farPlane, GLdouble *objX, GLdouble *objY, GLdouble *objZ, GLdouble *objW)
     * }
     */
    public static MemorySegment gluUnProject4$address() {
        return gluUnProject4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLint gluUnProject4(GLdouble winX, GLdouble winY, GLdouble winZ, GLdouble clipW, const GLdouble *model, const GLdouble *proj, const GLint *view, GLdouble nearPlane, GLdouble farPlane, GLdouble *objX, GLdouble *objY, GLdouble *objZ, GLdouble *objW)
     * }
     */
    public static int gluUnProject4(double winX, double winY, double winZ, double clipW, MemorySegment model, MemorySegment proj, MemorySegment view, double nearPlane, double farPlane, MemorySegment objX, MemorySegment objY, MemorySegment objZ, MemorySegment objW) {
        var mh$ = gluUnProject4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gluUnProject4", winX, winY, winZ, clipW, model, proj, view, nearPlane, farPlane, objX, objY, objZ, objW);
            }
            return (int)mh$.invokeExact(winX, winY, winZ, clipW, model, proj, view, nearPlane, farPlane, objX, objY, objZ, objW);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutStrokeRoman$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutStrokeRoman").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeRoman
     * }
     */
    public static AddressLayout glutStrokeRoman$layout() {
        return glutStrokeRoman$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeRoman
     * }
     */
    public static MemorySegment glutStrokeRoman$segment() {
        return glutStrokeRoman$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeRoman
     * }
     */
    public static MemorySegment glutStrokeRoman() {
        return glutStrokeRoman$constants.SEGMENT.get(glutStrokeRoman$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeRoman
     * }
     */
    public static void glutStrokeRoman(MemorySegment varValue) {
        glutStrokeRoman$constants.SEGMENT.set(glutStrokeRoman$constants.LAYOUT, 0L, varValue);
    }

    private static class glutStrokeMonoRoman$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutStrokeMonoRoman").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeMonoRoman
     * }
     */
    public static AddressLayout glutStrokeMonoRoman$layout() {
        return glutStrokeMonoRoman$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeMonoRoman
     * }
     */
    public static MemorySegment glutStrokeMonoRoman$segment() {
        return glutStrokeMonoRoman$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeMonoRoman
     * }
     */
    public static MemorySegment glutStrokeMonoRoman() {
        return glutStrokeMonoRoman$constants.SEGMENT.get(glutStrokeMonoRoman$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutStrokeMonoRoman
     * }
     */
    public static void glutStrokeMonoRoman(MemorySegment varValue) {
        glutStrokeMonoRoman$constants.SEGMENT.set(glutStrokeMonoRoman$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmap9By15$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmap9By15").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap9By15
     * }
     */
    public static AddressLayout glutBitmap9By15$layout() {
        return glutBitmap9By15$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap9By15
     * }
     */
    public static MemorySegment glutBitmap9By15$segment() {
        return glutBitmap9By15$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap9By15
     * }
     */
    public static MemorySegment glutBitmap9By15() {
        return glutBitmap9By15$constants.SEGMENT.get(glutBitmap9By15$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap9By15
     * }
     */
    public static void glutBitmap9By15(MemorySegment varValue) {
        glutBitmap9By15$constants.SEGMENT.set(glutBitmap9By15$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmap8By13$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmap8By13").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap8By13
     * }
     */
    public static AddressLayout glutBitmap8By13$layout() {
        return glutBitmap8By13$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap8By13
     * }
     */
    public static MemorySegment glutBitmap8By13$segment() {
        return glutBitmap8By13$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap8By13
     * }
     */
    public static MemorySegment glutBitmap8By13() {
        return glutBitmap8By13$constants.SEGMENT.get(glutBitmap8By13$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmap8By13
     * }
     */
    public static void glutBitmap8By13(MemorySegment varValue) {
        glutBitmap8By13$constants.SEGMENT.set(glutBitmap8By13$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmapTimesRoman10$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmapTimesRoman10").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman10
     * }
     */
    public static AddressLayout glutBitmapTimesRoman10$layout() {
        return glutBitmapTimesRoman10$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman10
     * }
     */
    public static MemorySegment glutBitmapTimesRoman10$segment() {
        return glutBitmapTimesRoman10$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman10
     * }
     */
    public static MemorySegment glutBitmapTimesRoman10() {
        return glutBitmapTimesRoman10$constants.SEGMENT.get(glutBitmapTimesRoman10$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman10
     * }
     */
    public static void glutBitmapTimesRoman10(MemorySegment varValue) {
        glutBitmapTimesRoman10$constants.SEGMENT.set(glutBitmapTimesRoman10$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmapTimesRoman24$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmapTimesRoman24").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman24
     * }
     */
    public static AddressLayout glutBitmapTimesRoman24$layout() {
        return glutBitmapTimesRoman24$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman24
     * }
     */
    public static MemorySegment glutBitmapTimesRoman24$segment() {
        return glutBitmapTimesRoman24$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman24
     * }
     */
    public static MemorySegment glutBitmapTimesRoman24() {
        return glutBitmapTimesRoman24$constants.SEGMENT.get(glutBitmapTimesRoman24$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapTimesRoman24
     * }
     */
    public static void glutBitmapTimesRoman24(MemorySegment varValue) {
        glutBitmapTimesRoman24$constants.SEGMENT.set(glutBitmapTimesRoman24$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmapHelvetica10$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmapHelvetica10").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica10
     * }
     */
    public static AddressLayout glutBitmapHelvetica10$layout() {
        return glutBitmapHelvetica10$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica10
     * }
     */
    public static MemorySegment glutBitmapHelvetica10$segment() {
        return glutBitmapHelvetica10$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica10
     * }
     */
    public static MemorySegment glutBitmapHelvetica10() {
        return glutBitmapHelvetica10$constants.SEGMENT.get(glutBitmapHelvetica10$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica10
     * }
     */
    public static void glutBitmapHelvetica10(MemorySegment varValue) {
        glutBitmapHelvetica10$constants.SEGMENT.set(glutBitmapHelvetica10$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmapHelvetica12$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmapHelvetica12").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica12
     * }
     */
    public static AddressLayout glutBitmapHelvetica12$layout() {
        return glutBitmapHelvetica12$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica12
     * }
     */
    public static MemorySegment glutBitmapHelvetica12$segment() {
        return glutBitmapHelvetica12$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica12
     * }
     */
    public static MemorySegment glutBitmapHelvetica12() {
        return glutBitmapHelvetica12$constants.SEGMENT.get(glutBitmapHelvetica12$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica12
     * }
     */
    public static void glutBitmapHelvetica12(MemorySegment varValue) {
        glutBitmapHelvetica12$constants.SEGMENT.set(glutBitmapHelvetica12$constants.LAYOUT, 0L, varValue);
    }

    private static class glutBitmapHelvetica18$constants {
        public static final AddressLayout LAYOUT = glut_h.C_POINTER;
        public static final MemorySegment SEGMENT = glut_h.findOrThrow("glutBitmapHelvetica18").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica18
     * }
     */
    public static AddressLayout glutBitmapHelvetica18$layout() {
        return glutBitmapHelvetica18$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica18
     * }
     */
    public static MemorySegment glutBitmapHelvetica18$segment() {
        return glutBitmapHelvetica18$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica18
     * }
     */
    public static MemorySegment glutBitmapHelvetica18() {
        return glutBitmapHelvetica18$constants.SEGMENT.get(glutBitmapHelvetica18$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern void *glutBitmapHelvetica18
     * }
     */
    public static void glutBitmapHelvetica18(MemorySegment varValue) {
        glutBitmapHelvetica18$constants.SEGMENT.set(glutBitmapHelvetica18$constants.LAYOUT, 0L, varValue);
    }

    private static class glutInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutInit(int *argcp, char **argv)
     * }
     */
    public static FunctionDescriptor glutInit$descriptor() {
        return glutInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutInit(int *argcp, char **argv)
     * }
     */
    public static MethodHandle glutInit$handle() {
        return glutInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutInit(int *argcp, char **argv)
     * }
     */
    public static MemorySegment glutInit$address() {
        return glutInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutInit(int *argcp, char **argv)
     * }
     */
    public static void glutInit(MemorySegment argcp, MemorySegment argv) {
        var mh$ = glutInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutInit", argcp, argv);
            }
            mh$.invokeExact(argcp, argv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutInitDisplayMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutInitDisplayMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutInitDisplayMode(unsigned int mode)
     * }
     */
    public static FunctionDescriptor glutInitDisplayMode$descriptor() {
        return glutInitDisplayMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutInitDisplayMode(unsigned int mode)
     * }
     */
    public static MethodHandle glutInitDisplayMode$handle() {
        return glutInitDisplayMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutInitDisplayMode(unsigned int mode)
     * }
     */
    public static MemorySegment glutInitDisplayMode$address() {
        return glutInitDisplayMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutInitDisplayMode(unsigned int mode)
     * }
     */
    public static void glutInitDisplayMode(int mode) {
        var mh$ = glutInitDisplayMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutInitDisplayMode", mode);
            }
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutInitDisplayString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutInitDisplayString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutInitDisplayString(const char *string)
     * }
     */
    public static FunctionDescriptor glutInitDisplayString$descriptor() {
        return glutInitDisplayString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutInitDisplayString(const char *string)
     * }
     */
    public static MethodHandle glutInitDisplayString$handle() {
        return glutInitDisplayString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutInitDisplayString(const char *string)
     * }
     */
    public static MemorySegment glutInitDisplayString$address() {
        return glutInitDisplayString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutInitDisplayString(const char *string)
     * }
     */
    public static void glutInitDisplayString(MemorySegment string) {
        var mh$ = glutInitDisplayString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutInitDisplayString", string);
            }
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutInitWindowPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutInitWindowPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutInitWindowPosition(int x, int y)
     * }
     */
    public static FunctionDescriptor glutInitWindowPosition$descriptor() {
        return glutInitWindowPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutInitWindowPosition(int x, int y)
     * }
     */
    public static MethodHandle glutInitWindowPosition$handle() {
        return glutInitWindowPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutInitWindowPosition(int x, int y)
     * }
     */
    public static MemorySegment glutInitWindowPosition$address() {
        return glutInitWindowPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutInitWindowPosition(int x, int y)
     * }
     */
    public static void glutInitWindowPosition(int x, int y) {
        var mh$ = glutInitWindowPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutInitWindowPosition", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutInitWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutInitWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutInitWindowSize(int width, int height)
     * }
     */
    public static FunctionDescriptor glutInitWindowSize$descriptor() {
        return glutInitWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutInitWindowSize(int width, int height)
     * }
     */
    public static MethodHandle glutInitWindowSize$handle() {
        return glutInitWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutInitWindowSize(int width, int height)
     * }
     */
    public static MemorySegment glutInitWindowSize$address() {
        return glutInitWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutInitWindowSize(int width, int height)
     * }
     */
    public static void glutInitWindowSize(int width, int height) {
        var mh$ = glutInitWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutInitWindowSize", width, height);
            }
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutMainLoop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutMainLoop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutMainLoop()
     * }
     */
    public static FunctionDescriptor glutMainLoop$descriptor() {
        return glutMainLoop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutMainLoop()
     * }
     */
    public static MethodHandle glutMainLoop$handle() {
        return glutMainLoop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutMainLoop()
     * }
     */
    public static MemorySegment glutMainLoop$address() {
        return glutMainLoop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutMainLoop()
     * }
     */
    public static void glutMainLoop() {
        var mh$ = glutMainLoop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutMainLoop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutCreateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutCreateWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutCreateWindow(const char *title)
     * }
     */
    public static FunctionDescriptor glutCreateWindow$descriptor() {
        return glutCreateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutCreateWindow(const char *title)
     * }
     */
    public static MethodHandle glutCreateWindow$handle() {
        return glutCreateWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutCreateWindow(const char *title)
     * }
     */
    public static MemorySegment glutCreateWindow$address() {
        return glutCreateWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutCreateWindow(const char *title)
     * }
     */
    public static int glutCreateWindow(MemorySegment title) {
        var mh$ = glutCreateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutCreateWindow", title);
            }
            return (int)mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutCreateSubWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutCreateSubWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutCreateSubWindow(int win, int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor glutCreateSubWindow$descriptor() {
        return glutCreateSubWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutCreateSubWindow(int win, int x, int y, int width, int height)
     * }
     */
    public static MethodHandle glutCreateSubWindow$handle() {
        return glutCreateSubWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutCreateSubWindow(int win, int x, int y, int width, int height)
     * }
     */
    public static MemorySegment glutCreateSubWindow$address() {
        return glutCreateSubWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutCreateSubWindow(int win, int x, int y, int width, int height)
     * }
     */
    public static int glutCreateSubWindow(int win, int x, int y, int width, int height) {
        var mh$ = glutCreateSubWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutCreateSubWindow", win, x, y, width, height);
            }
            return (int)mh$.invokeExact(win, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDestroyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDestroyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutDestroyWindow(int win)
     * }
     */
    public static FunctionDescriptor glutDestroyWindow$descriptor() {
        return glutDestroyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutDestroyWindow(int win)
     * }
     */
    public static MethodHandle glutDestroyWindow$handle() {
        return glutDestroyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutDestroyWindow(int win)
     * }
     */
    public static MemorySegment glutDestroyWindow$address() {
        return glutDestroyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutDestroyWindow(int win)
     * }
     */
    public static void glutDestroyWindow(int win) {
        var mh$ = glutDestroyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDestroyWindow", win);
            }
            mh$.invokeExact(win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPostRedisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPostRedisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPostRedisplay()
     * }
     */
    public static FunctionDescriptor glutPostRedisplay$descriptor() {
        return glutPostRedisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPostRedisplay()
     * }
     */
    public static MethodHandle glutPostRedisplay$handle() {
        return glutPostRedisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPostRedisplay()
     * }
     */
    public static MemorySegment glutPostRedisplay$address() {
        return glutPostRedisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPostRedisplay()
     * }
     */
    public static void glutPostRedisplay() {
        var mh$ = glutPostRedisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPostRedisplay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPostWindowRedisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPostWindowRedisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPostWindowRedisplay(int win)
     * }
     */
    public static FunctionDescriptor glutPostWindowRedisplay$descriptor() {
        return glutPostWindowRedisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPostWindowRedisplay(int win)
     * }
     */
    public static MethodHandle glutPostWindowRedisplay$handle() {
        return glutPostWindowRedisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPostWindowRedisplay(int win)
     * }
     */
    public static MemorySegment glutPostWindowRedisplay$address() {
        return glutPostWindowRedisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPostWindowRedisplay(int win)
     * }
     */
    public static void glutPostWindowRedisplay(int win) {
        var mh$ = glutPostWindowRedisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPostWindowRedisplay", win);
            }
            mh$.invokeExact(win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSwapBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSwapBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSwapBuffers()
     * }
     */
    public static FunctionDescriptor glutSwapBuffers$descriptor() {
        return glutSwapBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSwapBuffers()
     * }
     */
    public static MethodHandle glutSwapBuffers$handle() {
        return glutSwapBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSwapBuffers()
     * }
     */
    public static MemorySegment glutSwapBuffers$address() {
        return glutSwapBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSwapBuffers()
     * }
     */
    public static void glutSwapBuffers() {
        var mh$ = glutSwapBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSwapBuffers");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGetWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGetWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutGetWindow()
     * }
     */
    public static FunctionDescriptor glutGetWindow$descriptor() {
        return glutGetWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutGetWindow()
     * }
     */
    public static MethodHandle glutGetWindow$handle() {
        return glutGetWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutGetWindow()
     * }
     */
    public static MemorySegment glutGetWindow$address() {
        return glutGetWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutGetWindow()
     * }
     */
    public static int glutGetWindow() {
        var mh$ = glutGetWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGetWindow");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetWindow(int win)
     * }
     */
    public static FunctionDescriptor glutSetWindow$descriptor() {
        return glutSetWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetWindow(int win)
     * }
     */
    public static MethodHandle glutSetWindow$handle() {
        return glutSetWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetWindow(int win)
     * }
     */
    public static MemorySegment glutSetWindow$address() {
        return glutSetWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetWindow(int win)
     * }
     */
    public static void glutSetWindow(int win) {
        var mh$ = glutSetWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetWindow", win);
            }
            mh$.invokeExact(win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetWindowTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetWindowTitle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetWindowTitle(const char *title)
     * }
     */
    public static FunctionDescriptor glutSetWindowTitle$descriptor() {
        return glutSetWindowTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetWindowTitle(const char *title)
     * }
     */
    public static MethodHandle glutSetWindowTitle$handle() {
        return glutSetWindowTitle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetWindowTitle(const char *title)
     * }
     */
    public static MemorySegment glutSetWindowTitle$address() {
        return glutSetWindowTitle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetWindowTitle(const char *title)
     * }
     */
    public static void glutSetWindowTitle(MemorySegment title) {
        var mh$ = glutSetWindowTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetWindowTitle", title);
            }
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetIconTitle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetIconTitle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetIconTitle(const char *title)
     * }
     */
    public static FunctionDescriptor glutSetIconTitle$descriptor() {
        return glutSetIconTitle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetIconTitle(const char *title)
     * }
     */
    public static MethodHandle glutSetIconTitle$handle() {
        return glutSetIconTitle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetIconTitle(const char *title)
     * }
     */
    public static MemorySegment glutSetIconTitle$address() {
        return glutSetIconTitle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetIconTitle(const char *title)
     * }
     */
    public static void glutSetIconTitle(MemorySegment title) {
        var mh$ = glutSetIconTitle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetIconTitle", title);
            }
            mh$.invokeExact(title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPositionWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPositionWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPositionWindow(int x, int y)
     * }
     */
    public static FunctionDescriptor glutPositionWindow$descriptor() {
        return glutPositionWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPositionWindow(int x, int y)
     * }
     */
    public static MethodHandle glutPositionWindow$handle() {
        return glutPositionWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPositionWindow(int x, int y)
     * }
     */
    public static MemorySegment glutPositionWindow$address() {
        return glutPositionWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPositionWindow(int x, int y)
     * }
     */
    public static void glutPositionWindow(int x, int y) {
        var mh$ = glutPositionWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPositionWindow", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutReshapeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutReshapeWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutReshapeWindow(int width, int height)
     * }
     */
    public static FunctionDescriptor glutReshapeWindow$descriptor() {
        return glutReshapeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutReshapeWindow(int width, int height)
     * }
     */
    public static MethodHandle glutReshapeWindow$handle() {
        return glutReshapeWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutReshapeWindow(int width, int height)
     * }
     */
    public static MemorySegment glutReshapeWindow$address() {
        return glutReshapeWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutReshapeWindow(int width, int height)
     * }
     */
    public static void glutReshapeWindow(int width, int height) {
        var mh$ = glutReshapeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutReshapeWindow", width, height);
            }
            mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPopWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPopWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPopWindow()
     * }
     */
    public static FunctionDescriptor glutPopWindow$descriptor() {
        return glutPopWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPopWindow()
     * }
     */
    public static MethodHandle glutPopWindow$handle() {
        return glutPopWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPopWindow()
     * }
     */
    public static MemorySegment glutPopWindow$address() {
        return glutPopWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPopWindow()
     * }
     */
    public static void glutPopWindow() {
        var mh$ = glutPopWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPopWindow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPushWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPushWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPushWindow()
     * }
     */
    public static FunctionDescriptor glutPushWindow$descriptor() {
        return glutPushWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPushWindow()
     * }
     */
    public static MethodHandle glutPushWindow$handle() {
        return glutPushWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPushWindow()
     * }
     */
    public static MemorySegment glutPushWindow$address() {
        return glutPushWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPushWindow()
     * }
     */
    public static void glutPushWindow() {
        var mh$ = glutPushWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPushWindow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutIconifyWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutIconifyWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutIconifyWindow()
     * }
     */
    public static FunctionDescriptor glutIconifyWindow$descriptor() {
        return glutIconifyWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutIconifyWindow()
     * }
     */
    public static MethodHandle glutIconifyWindow$handle() {
        return glutIconifyWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutIconifyWindow()
     * }
     */
    public static MemorySegment glutIconifyWindow$address() {
        return glutIconifyWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutIconifyWindow()
     * }
     */
    public static void glutIconifyWindow() {
        var mh$ = glutIconifyWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutIconifyWindow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutShowWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutShowWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutShowWindow()
     * }
     */
    public static FunctionDescriptor glutShowWindow$descriptor() {
        return glutShowWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutShowWindow()
     * }
     */
    public static MethodHandle glutShowWindow$handle() {
        return glutShowWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutShowWindow()
     * }
     */
    public static MemorySegment glutShowWindow$address() {
        return glutShowWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutShowWindow()
     * }
     */
    public static void glutShowWindow() {
        var mh$ = glutShowWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutShowWindow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutHideWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutHideWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutHideWindow()
     * }
     */
    public static FunctionDescriptor glutHideWindow$descriptor() {
        return glutHideWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutHideWindow()
     * }
     */
    public static MethodHandle glutHideWindow$handle() {
        return glutHideWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutHideWindow()
     * }
     */
    public static MemorySegment glutHideWindow$address() {
        return glutHideWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutHideWindow()
     * }
     */
    public static void glutHideWindow() {
        var mh$ = glutHideWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutHideWindow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutFullScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutFullScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutFullScreen()
     * }
     */
    public static FunctionDescriptor glutFullScreen$descriptor() {
        return glutFullScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutFullScreen()
     * }
     */
    public static MethodHandle glutFullScreen$handle() {
        return glutFullScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutFullScreen()
     * }
     */
    public static MemorySegment glutFullScreen$address() {
        return glutFullScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutFullScreen()
     * }
     */
    public static void glutFullScreen() {
        var mh$ = glutFullScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutFullScreen");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetCursor(int cursor)
     * }
     */
    public static FunctionDescriptor glutSetCursor$descriptor() {
        return glutSetCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetCursor(int cursor)
     * }
     */
    public static MethodHandle glutSetCursor$handle() {
        return glutSetCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetCursor(int cursor)
     * }
     */
    public static MemorySegment glutSetCursor$address() {
        return glutSetCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetCursor(int cursor)
     * }
     */
    public static void glutSetCursor(int cursor) {
        var mh$ = glutSetCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetCursor", cursor);
            }
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWarpPointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWarpPointer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWarpPointer(int x, int y)
     * }
     */
    public static FunctionDescriptor glutWarpPointer$descriptor() {
        return glutWarpPointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWarpPointer(int x, int y)
     * }
     */
    public static MethodHandle glutWarpPointer$handle() {
        return glutWarpPointer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWarpPointer(int x, int y)
     * }
     */
    public static MemorySegment glutWarpPointer$address() {
        return glutWarpPointer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWarpPointer(int x, int y)
     * }
     */
    public static void glutWarpPointer(int x, int y) {
        var mh$ = glutWarpPointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWarpPointer", x, y);
            }
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSurfaceTexture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSurfaceTexture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSurfaceTexture(GLenum target, GLenum internalformat, int surfacewin)
     * }
     */
    public static FunctionDescriptor glutSurfaceTexture$descriptor() {
        return glutSurfaceTexture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSurfaceTexture(GLenum target, GLenum internalformat, int surfacewin)
     * }
     */
    public static MethodHandle glutSurfaceTexture$handle() {
        return glutSurfaceTexture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSurfaceTexture(GLenum target, GLenum internalformat, int surfacewin)
     * }
     */
    public static MemorySegment glutSurfaceTexture$address() {
        return glutSurfaceTexture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSurfaceTexture(GLenum target, GLenum internalformat, int surfacewin)
     * }
     */
    public static void glutSurfaceTexture(int target, int internalformat, int surfacewin) {
        var mh$ = glutSurfaceTexture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSurfaceTexture", target, internalformat, surfacewin);
            }
            mh$.invokeExact(target, internalformat, surfacewin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWMCloseFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWMCloseFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWMCloseFunc(void (*func)(void))
     * }
     */
    public static FunctionDescriptor glutWMCloseFunc$descriptor() {
        return glutWMCloseFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWMCloseFunc(void (*func)(void))
     * }
     */
    public static MethodHandle glutWMCloseFunc$handle() {
        return glutWMCloseFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWMCloseFunc(void (*func)(void))
     * }
     */
    public static MemorySegment glutWMCloseFunc$address() {
        return glutWMCloseFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWMCloseFunc(void (*func)(void))
     * }
     */
    public static void glutWMCloseFunc(MemorySegment func) {
        var mh$ = glutWMCloseFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWMCloseFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutCheckLoop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutCheckLoop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutCheckLoop()
     * }
     */
    public static FunctionDescriptor glutCheckLoop$descriptor() {
        return glutCheckLoop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutCheckLoop()
     * }
     */
    public static MethodHandle glutCheckLoop$handle() {
        return glutCheckLoop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutCheckLoop()
     * }
     */
    public static MemorySegment glutCheckLoop$address() {
        return glutCheckLoop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutCheckLoop()
     * }
     */
    public static void glutCheckLoop() {
        var mh$ = glutCheckLoop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutCheckLoop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutEstablishOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutEstablishOverlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutEstablishOverlay()
     * }
     */
    public static FunctionDescriptor glutEstablishOverlay$descriptor() {
        return glutEstablishOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutEstablishOverlay()
     * }
     */
    public static MethodHandle glutEstablishOverlay$handle() {
        return glutEstablishOverlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutEstablishOverlay()
     * }
     */
    public static MemorySegment glutEstablishOverlay$address() {
        return glutEstablishOverlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutEstablishOverlay()
     * }
     */
    public static void glutEstablishOverlay() {
        var mh$ = glutEstablishOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutEstablishOverlay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutRemoveOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutRemoveOverlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutRemoveOverlay()
     * }
     */
    public static FunctionDescriptor glutRemoveOverlay$descriptor() {
        return glutRemoveOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutRemoveOverlay()
     * }
     */
    public static MethodHandle glutRemoveOverlay$handle() {
        return glutRemoveOverlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutRemoveOverlay()
     * }
     */
    public static MemorySegment glutRemoveOverlay$address() {
        return glutRemoveOverlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutRemoveOverlay()
     * }
     */
    public static void glutRemoveOverlay() {
        var mh$ = glutRemoveOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutRemoveOverlay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutUseLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutUseLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutUseLayer(GLenum layer)
     * }
     */
    public static FunctionDescriptor glutUseLayer$descriptor() {
        return glutUseLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutUseLayer(GLenum layer)
     * }
     */
    public static MethodHandle glutUseLayer$handle() {
        return glutUseLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutUseLayer(GLenum layer)
     * }
     */
    public static MemorySegment glutUseLayer$address() {
        return glutUseLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutUseLayer(GLenum layer)
     * }
     */
    public static void glutUseLayer(int layer) {
        var mh$ = glutUseLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutUseLayer", layer);
            }
            mh$.invokeExact(layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPostOverlayRedisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPostOverlayRedisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPostOverlayRedisplay()
     * }
     */
    public static FunctionDescriptor glutPostOverlayRedisplay$descriptor() {
        return glutPostOverlayRedisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPostOverlayRedisplay()
     * }
     */
    public static MethodHandle glutPostOverlayRedisplay$handle() {
        return glutPostOverlayRedisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPostOverlayRedisplay()
     * }
     */
    public static MemorySegment glutPostOverlayRedisplay$address() {
        return glutPostOverlayRedisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPostOverlayRedisplay()
     * }
     */
    public static void glutPostOverlayRedisplay() {
        var mh$ = glutPostOverlayRedisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPostOverlayRedisplay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPostWindowOverlayRedisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPostWindowOverlayRedisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPostWindowOverlayRedisplay(int win)
     * }
     */
    public static FunctionDescriptor glutPostWindowOverlayRedisplay$descriptor() {
        return glutPostWindowOverlayRedisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPostWindowOverlayRedisplay(int win)
     * }
     */
    public static MethodHandle glutPostWindowOverlayRedisplay$handle() {
        return glutPostWindowOverlayRedisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPostWindowOverlayRedisplay(int win)
     * }
     */
    public static MemorySegment glutPostWindowOverlayRedisplay$address() {
        return glutPostWindowOverlayRedisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPostWindowOverlayRedisplay(int win)
     * }
     */
    public static void glutPostWindowOverlayRedisplay(int win) {
        var mh$ = glutPostWindowOverlayRedisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPostWindowOverlayRedisplay", win);
            }
            mh$.invokeExact(win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutShowOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutShowOverlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutShowOverlay()
     * }
     */
    public static FunctionDescriptor glutShowOverlay$descriptor() {
        return glutShowOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutShowOverlay()
     * }
     */
    public static MethodHandle glutShowOverlay$handle() {
        return glutShowOverlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutShowOverlay()
     * }
     */
    public static MemorySegment glutShowOverlay$address() {
        return glutShowOverlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutShowOverlay()
     * }
     */
    public static void glutShowOverlay() {
        var mh$ = glutShowOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutShowOverlay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutHideOverlay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutHideOverlay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutHideOverlay()
     * }
     */
    public static FunctionDescriptor glutHideOverlay$descriptor() {
        return glutHideOverlay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutHideOverlay()
     * }
     */
    public static MethodHandle glutHideOverlay$handle() {
        return glutHideOverlay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutHideOverlay()
     * }
     */
    public static MemorySegment glutHideOverlay$address() {
        return glutHideOverlay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutHideOverlay()
     * }
     */
    public static void glutHideOverlay() {
        var mh$ = glutHideOverlay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutHideOverlay");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutCreateMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutCreateMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutCreateMenu(void (*)(int))
     * }
     */
    public static FunctionDescriptor glutCreateMenu$descriptor() {
        return glutCreateMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutCreateMenu(void (*)(int))
     * }
     */
    public static MethodHandle glutCreateMenu$handle() {
        return glutCreateMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutCreateMenu(void (*)(int))
     * }
     */
    public static MemorySegment glutCreateMenu$address() {
        return glutCreateMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutCreateMenu(void (*)(int))
     * }
     */
    public static int glutCreateMenu(MemorySegment x0) {
        var mh$ = glutCreateMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutCreateMenu", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDestroyMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDestroyMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutDestroyMenu(int menu)
     * }
     */
    public static FunctionDescriptor glutDestroyMenu$descriptor() {
        return glutDestroyMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutDestroyMenu(int menu)
     * }
     */
    public static MethodHandle glutDestroyMenu$handle() {
        return glutDestroyMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutDestroyMenu(int menu)
     * }
     */
    public static MemorySegment glutDestroyMenu$address() {
        return glutDestroyMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutDestroyMenu(int menu)
     * }
     */
    public static void glutDestroyMenu(int menu) {
        var mh$ = glutDestroyMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDestroyMenu", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGetMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGetMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutGetMenu()
     * }
     */
    public static FunctionDescriptor glutGetMenu$descriptor() {
        return glutGetMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutGetMenu()
     * }
     */
    public static MethodHandle glutGetMenu$handle() {
        return glutGetMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutGetMenu()
     * }
     */
    public static MemorySegment glutGetMenu$address() {
        return glutGetMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutGetMenu()
     * }
     */
    public static int glutGetMenu() {
        var mh$ = glutGetMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGetMenu");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetMenu(int menu)
     * }
     */
    public static FunctionDescriptor glutSetMenu$descriptor() {
        return glutSetMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetMenu(int menu)
     * }
     */
    public static MethodHandle glutSetMenu$handle() {
        return glutSetMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetMenu(int menu)
     * }
     */
    public static MemorySegment glutSetMenu$address() {
        return glutSetMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetMenu(int menu)
     * }
     */
    public static void glutSetMenu(int menu) {
        var mh$ = glutSetMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetMenu", menu);
            }
            mh$.invokeExact(menu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutAddMenuEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutAddMenuEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutAddMenuEntry(const char *label, int value)
     * }
     */
    public static FunctionDescriptor glutAddMenuEntry$descriptor() {
        return glutAddMenuEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutAddMenuEntry(const char *label, int value)
     * }
     */
    public static MethodHandle glutAddMenuEntry$handle() {
        return glutAddMenuEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutAddMenuEntry(const char *label, int value)
     * }
     */
    public static MemorySegment glutAddMenuEntry$address() {
        return glutAddMenuEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutAddMenuEntry(const char *label, int value)
     * }
     */
    public static void glutAddMenuEntry(MemorySegment label, int value) {
        var mh$ = glutAddMenuEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutAddMenuEntry", label, value);
            }
            mh$.invokeExact(label, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutAddSubMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutAddSubMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutAddSubMenu(const char *label, int submenu)
     * }
     */
    public static FunctionDescriptor glutAddSubMenu$descriptor() {
        return glutAddSubMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutAddSubMenu(const char *label, int submenu)
     * }
     */
    public static MethodHandle glutAddSubMenu$handle() {
        return glutAddSubMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutAddSubMenu(const char *label, int submenu)
     * }
     */
    public static MemorySegment glutAddSubMenu$address() {
        return glutAddSubMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutAddSubMenu(const char *label, int submenu)
     * }
     */
    public static void glutAddSubMenu(MemorySegment label, int submenu) {
        var mh$ = glutAddSubMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutAddSubMenu", label, submenu);
            }
            mh$.invokeExact(label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutChangeToMenuEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutChangeToMenuEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutChangeToMenuEntry(int item, const char *label, int value)
     * }
     */
    public static FunctionDescriptor glutChangeToMenuEntry$descriptor() {
        return glutChangeToMenuEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutChangeToMenuEntry(int item, const char *label, int value)
     * }
     */
    public static MethodHandle glutChangeToMenuEntry$handle() {
        return glutChangeToMenuEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutChangeToMenuEntry(int item, const char *label, int value)
     * }
     */
    public static MemorySegment glutChangeToMenuEntry$address() {
        return glutChangeToMenuEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutChangeToMenuEntry(int item, const char *label, int value)
     * }
     */
    public static void glutChangeToMenuEntry(int item, MemorySegment label, int value) {
        var mh$ = glutChangeToMenuEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutChangeToMenuEntry", item, label, value);
            }
            mh$.invokeExact(item, label, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutChangeToSubMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutChangeToSubMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutChangeToSubMenu(int item, const char *label, int submenu)
     * }
     */
    public static FunctionDescriptor glutChangeToSubMenu$descriptor() {
        return glutChangeToSubMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutChangeToSubMenu(int item, const char *label, int submenu)
     * }
     */
    public static MethodHandle glutChangeToSubMenu$handle() {
        return glutChangeToSubMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutChangeToSubMenu(int item, const char *label, int submenu)
     * }
     */
    public static MemorySegment glutChangeToSubMenu$address() {
        return glutChangeToSubMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutChangeToSubMenu(int item, const char *label, int submenu)
     * }
     */
    public static void glutChangeToSubMenu(int item, MemorySegment label, int submenu) {
        var mh$ = glutChangeToSubMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutChangeToSubMenu", item, label, submenu);
            }
            mh$.invokeExact(item, label, submenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutRemoveMenuItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutRemoveMenuItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutRemoveMenuItem(int item)
     * }
     */
    public static FunctionDescriptor glutRemoveMenuItem$descriptor() {
        return glutRemoveMenuItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutRemoveMenuItem(int item)
     * }
     */
    public static MethodHandle glutRemoveMenuItem$handle() {
        return glutRemoveMenuItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutRemoveMenuItem(int item)
     * }
     */
    public static MemorySegment glutRemoveMenuItem$address() {
        return glutRemoveMenuItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutRemoveMenuItem(int item)
     * }
     */
    public static void glutRemoveMenuItem(int item) {
        var mh$ = glutRemoveMenuItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutRemoveMenuItem", item);
            }
            mh$.invokeExact(item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutAttachMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutAttachMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutAttachMenu(int button)
     * }
     */
    public static FunctionDescriptor glutAttachMenu$descriptor() {
        return glutAttachMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutAttachMenu(int button)
     * }
     */
    public static MethodHandle glutAttachMenu$handle() {
        return glutAttachMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutAttachMenu(int button)
     * }
     */
    public static MemorySegment glutAttachMenu$address() {
        return glutAttachMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutAttachMenu(int button)
     * }
     */
    public static void glutAttachMenu(int button) {
        var mh$ = glutAttachMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutAttachMenu", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDetachMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDetachMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutDetachMenu(int button)
     * }
     */
    public static FunctionDescriptor glutDetachMenu$descriptor() {
        return glutDetachMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutDetachMenu(int button)
     * }
     */
    public static MethodHandle glutDetachMenu$handle() {
        return glutDetachMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutDetachMenu(int button)
     * }
     */
    public static MemorySegment glutDetachMenu$address() {
        return glutDetachMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutDetachMenu(int button)
     * }
     */
    public static void glutDetachMenu(int button) {
        var mh$ = glutDetachMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDetachMenu", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDisplayFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDisplayFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutDisplayFunc(void (*func)(void))
     * }
     */
    public static FunctionDescriptor glutDisplayFunc$descriptor() {
        return glutDisplayFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutDisplayFunc(void (*func)(void))
     * }
     */
    public static MethodHandle glutDisplayFunc$handle() {
        return glutDisplayFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutDisplayFunc(void (*func)(void))
     * }
     */
    public static MemorySegment glutDisplayFunc$address() {
        return glutDisplayFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutDisplayFunc(void (*func)(void))
     * }
     */
    public static void glutDisplayFunc(MemorySegment func) {
        var mh$ = glutDisplayFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDisplayFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutReshapeFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutReshapeFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutReshapeFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutReshapeFunc$descriptor() {
        return glutReshapeFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutReshapeFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutReshapeFunc$handle() {
        return glutReshapeFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutReshapeFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutReshapeFunc$address() {
        return glutReshapeFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutReshapeFunc(void (*func)(int, int))
     * }
     */
    public static void glutReshapeFunc(MemorySegment func) {
        var mh$ = glutReshapeFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutReshapeFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutKeyboardFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutKeyboardFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutKeyboardFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static FunctionDescriptor glutKeyboardFunc$descriptor() {
        return glutKeyboardFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutKeyboardFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static MethodHandle glutKeyboardFunc$handle() {
        return glutKeyboardFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutKeyboardFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static MemorySegment glutKeyboardFunc$address() {
        return glutKeyboardFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutKeyboardFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static void glutKeyboardFunc(MemorySegment func) {
        var mh$ = glutKeyboardFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutKeyboardFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutMouseFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutMouseFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutMouseFunc(void (*func)(int, int, int, int))
     * }
     */
    public static FunctionDescriptor glutMouseFunc$descriptor() {
        return glutMouseFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutMouseFunc(void (*func)(int, int, int, int))
     * }
     */
    public static MethodHandle glutMouseFunc$handle() {
        return glutMouseFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutMouseFunc(void (*func)(int, int, int, int))
     * }
     */
    public static MemorySegment glutMouseFunc$address() {
        return glutMouseFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutMouseFunc(void (*func)(int, int, int, int))
     * }
     */
    public static void glutMouseFunc(MemorySegment func) {
        var mh$ = glutMouseFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutMouseFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutMotionFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutMotionFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutMotionFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutMotionFunc$descriptor() {
        return glutMotionFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutMotionFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutMotionFunc$handle() {
        return glutMotionFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutMotionFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutMotionFunc$address() {
        return glutMotionFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutMotionFunc(void (*func)(int, int))
     * }
     */
    public static void glutMotionFunc(MemorySegment func) {
        var mh$ = glutMotionFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutMotionFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutPassiveMotionFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutPassiveMotionFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutPassiveMotionFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutPassiveMotionFunc$descriptor() {
        return glutPassiveMotionFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutPassiveMotionFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutPassiveMotionFunc$handle() {
        return glutPassiveMotionFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutPassiveMotionFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutPassiveMotionFunc$address() {
        return glutPassiveMotionFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutPassiveMotionFunc(void (*func)(int, int))
     * }
     */
    public static void glutPassiveMotionFunc(MemorySegment func) {
        var mh$ = glutPassiveMotionFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutPassiveMotionFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutEntryFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutEntryFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutEntryFunc(void (*func)(int))
     * }
     */
    public static FunctionDescriptor glutEntryFunc$descriptor() {
        return glutEntryFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutEntryFunc(void (*func)(int))
     * }
     */
    public static MethodHandle glutEntryFunc$handle() {
        return glutEntryFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutEntryFunc(void (*func)(int))
     * }
     */
    public static MemorySegment glutEntryFunc$address() {
        return glutEntryFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutEntryFunc(void (*func)(int))
     * }
     */
    public static void glutEntryFunc(MemorySegment func) {
        var mh$ = glutEntryFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutEntryFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutVisibilityFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutVisibilityFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutVisibilityFunc(void (*func)(int))
     * }
     */
    public static FunctionDescriptor glutVisibilityFunc$descriptor() {
        return glutVisibilityFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutVisibilityFunc(void (*func)(int))
     * }
     */
    public static MethodHandle glutVisibilityFunc$handle() {
        return glutVisibilityFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutVisibilityFunc(void (*func)(int))
     * }
     */
    public static MemorySegment glutVisibilityFunc$address() {
        return glutVisibilityFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutVisibilityFunc(void (*func)(int))
     * }
     */
    public static void glutVisibilityFunc(MemorySegment func) {
        var mh$ = glutVisibilityFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutVisibilityFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutIdleFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutIdleFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutIdleFunc(void (*func)(void))
     * }
     */
    public static FunctionDescriptor glutIdleFunc$descriptor() {
        return glutIdleFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutIdleFunc(void (*func)(void))
     * }
     */
    public static MethodHandle glutIdleFunc$handle() {
        return glutIdleFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutIdleFunc(void (*func)(void))
     * }
     */
    public static MemorySegment glutIdleFunc$address() {
        return glutIdleFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutIdleFunc(void (*func)(void))
     * }
     */
    public static void glutIdleFunc(MemorySegment func) {
        var mh$ = glutIdleFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutIdleFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutTimerFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutTimerFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutTimerFunc(unsigned int millis, void (*func)(int), int value)
     * }
     */
    public static FunctionDescriptor glutTimerFunc$descriptor() {
        return glutTimerFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutTimerFunc(unsigned int millis, void (*func)(int), int value)
     * }
     */
    public static MethodHandle glutTimerFunc$handle() {
        return glutTimerFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutTimerFunc(unsigned int millis, void (*func)(int), int value)
     * }
     */
    public static MemorySegment glutTimerFunc$address() {
        return glutTimerFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutTimerFunc(unsigned int millis, void (*func)(int), int value)
     * }
     */
    public static void glutTimerFunc(int millis, MemorySegment func, int value) {
        var mh$ = glutTimerFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutTimerFunc", millis, func, value);
            }
            mh$.invokeExact(millis, func, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutMenuStateFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutMenuStateFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutMenuStateFunc(void (*func)(int))
     * }
     */
    public static FunctionDescriptor glutMenuStateFunc$descriptor() {
        return glutMenuStateFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutMenuStateFunc(void (*func)(int))
     * }
     */
    public static MethodHandle glutMenuStateFunc$handle() {
        return glutMenuStateFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutMenuStateFunc(void (*func)(int))
     * }
     */
    public static MemorySegment glutMenuStateFunc$address() {
        return glutMenuStateFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutMenuStateFunc(void (*func)(int))
     * }
     */
    public static void glutMenuStateFunc(MemorySegment func) {
        var mh$ = glutMenuStateFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutMenuStateFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSpecialFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSpecialFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSpecialFunc(void (*func)(int, int, int))
     * }
     */
    public static FunctionDescriptor glutSpecialFunc$descriptor() {
        return glutSpecialFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSpecialFunc(void (*func)(int, int, int))
     * }
     */
    public static MethodHandle glutSpecialFunc$handle() {
        return glutSpecialFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSpecialFunc(void (*func)(int, int, int))
     * }
     */
    public static MemorySegment glutSpecialFunc$address() {
        return glutSpecialFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSpecialFunc(void (*func)(int, int, int))
     * }
     */
    public static void glutSpecialFunc(MemorySegment func) {
        var mh$ = glutSpecialFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSpecialFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSpaceballMotionFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSpaceballMotionFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSpaceballMotionFunc(void (*func)(int, int, int))
     * }
     */
    public static FunctionDescriptor glutSpaceballMotionFunc$descriptor() {
        return glutSpaceballMotionFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSpaceballMotionFunc(void (*func)(int, int, int))
     * }
     */
    public static MethodHandle glutSpaceballMotionFunc$handle() {
        return glutSpaceballMotionFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSpaceballMotionFunc(void (*func)(int, int, int))
     * }
     */
    public static MemorySegment glutSpaceballMotionFunc$address() {
        return glutSpaceballMotionFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSpaceballMotionFunc(void (*func)(int, int, int))
     * }
     */
    public static void glutSpaceballMotionFunc(MemorySegment func) {
        var mh$ = glutSpaceballMotionFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSpaceballMotionFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSpaceballRotateFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSpaceballRotateFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSpaceballRotateFunc(void (*func)(int, int, int))
     * }
     */
    public static FunctionDescriptor glutSpaceballRotateFunc$descriptor() {
        return glutSpaceballRotateFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSpaceballRotateFunc(void (*func)(int, int, int))
     * }
     */
    public static MethodHandle glutSpaceballRotateFunc$handle() {
        return glutSpaceballRotateFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSpaceballRotateFunc(void (*func)(int, int, int))
     * }
     */
    public static MemorySegment glutSpaceballRotateFunc$address() {
        return glutSpaceballRotateFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSpaceballRotateFunc(void (*func)(int, int, int))
     * }
     */
    public static void glutSpaceballRotateFunc(MemorySegment func) {
        var mh$ = glutSpaceballRotateFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSpaceballRotateFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSpaceballButtonFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSpaceballButtonFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSpaceballButtonFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutSpaceballButtonFunc$descriptor() {
        return glutSpaceballButtonFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSpaceballButtonFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutSpaceballButtonFunc$handle() {
        return glutSpaceballButtonFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSpaceballButtonFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutSpaceballButtonFunc$address() {
        return glutSpaceballButtonFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSpaceballButtonFunc(void (*func)(int, int))
     * }
     */
    public static void glutSpaceballButtonFunc(MemorySegment func) {
        var mh$ = glutSpaceballButtonFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSpaceballButtonFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutButtonBoxFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutButtonBoxFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutButtonBoxFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutButtonBoxFunc$descriptor() {
        return glutButtonBoxFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutButtonBoxFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutButtonBoxFunc$handle() {
        return glutButtonBoxFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutButtonBoxFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutButtonBoxFunc$address() {
        return glutButtonBoxFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutButtonBoxFunc(void (*func)(int, int))
     * }
     */
    public static void glutButtonBoxFunc(MemorySegment func) {
        var mh$ = glutButtonBoxFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutButtonBoxFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDialsFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDialsFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutDialsFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutDialsFunc$descriptor() {
        return glutDialsFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutDialsFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutDialsFunc$handle() {
        return glutDialsFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutDialsFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutDialsFunc$address() {
        return glutDialsFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutDialsFunc(void (*func)(int, int))
     * }
     */
    public static void glutDialsFunc(MemorySegment func) {
        var mh$ = glutDialsFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDialsFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutTabletMotionFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutTabletMotionFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutTabletMotionFunc(void (*func)(int, int))
     * }
     */
    public static FunctionDescriptor glutTabletMotionFunc$descriptor() {
        return glutTabletMotionFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutTabletMotionFunc(void (*func)(int, int))
     * }
     */
    public static MethodHandle glutTabletMotionFunc$handle() {
        return glutTabletMotionFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutTabletMotionFunc(void (*func)(int, int))
     * }
     */
    public static MemorySegment glutTabletMotionFunc$address() {
        return glutTabletMotionFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutTabletMotionFunc(void (*func)(int, int))
     * }
     */
    public static void glutTabletMotionFunc(MemorySegment func) {
        var mh$ = glutTabletMotionFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutTabletMotionFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutTabletButtonFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutTabletButtonFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutTabletButtonFunc(void (*func)(int, int, int, int))
     * }
     */
    public static FunctionDescriptor glutTabletButtonFunc$descriptor() {
        return glutTabletButtonFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutTabletButtonFunc(void (*func)(int, int, int, int))
     * }
     */
    public static MethodHandle glutTabletButtonFunc$handle() {
        return glutTabletButtonFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutTabletButtonFunc(void (*func)(int, int, int, int))
     * }
     */
    public static MemorySegment glutTabletButtonFunc$address() {
        return glutTabletButtonFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutTabletButtonFunc(void (*func)(int, int, int, int))
     * }
     */
    public static void glutTabletButtonFunc(MemorySegment func) {
        var mh$ = glutTabletButtonFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutTabletButtonFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutMenuStatusFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutMenuStatusFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutMenuStatusFunc(void (*func)(int, int, int))
     * }
     */
    public static FunctionDescriptor glutMenuStatusFunc$descriptor() {
        return glutMenuStatusFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutMenuStatusFunc(void (*func)(int, int, int))
     * }
     */
    public static MethodHandle glutMenuStatusFunc$handle() {
        return glutMenuStatusFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutMenuStatusFunc(void (*func)(int, int, int))
     * }
     */
    public static MemorySegment glutMenuStatusFunc$address() {
        return glutMenuStatusFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutMenuStatusFunc(void (*func)(int, int, int))
     * }
     */
    public static void glutMenuStatusFunc(MemorySegment func) {
        var mh$ = glutMenuStatusFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutMenuStatusFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutOverlayDisplayFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutOverlayDisplayFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutOverlayDisplayFunc(void (*func)(void))
     * }
     */
    public static FunctionDescriptor glutOverlayDisplayFunc$descriptor() {
        return glutOverlayDisplayFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutOverlayDisplayFunc(void (*func)(void))
     * }
     */
    public static MethodHandle glutOverlayDisplayFunc$handle() {
        return glutOverlayDisplayFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutOverlayDisplayFunc(void (*func)(void))
     * }
     */
    public static MemorySegment glutOverlayDisplayFunc$address() {
        return glutOverlayDisplayFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutOverlayDisplayFunc(void (*func)(void))
     * }
     */
    public static void glutOverlayDisplayFunc(MemorySegment func) {
        var mh$ = glutOverlayDisplayFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutOverlayDisplayFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWindowStatusFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWindowStatusFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWindowStatusFunc(void (*func)(int))
     * }
     */
    public static FunctionDescriptor glutWindowStatusFunc$descriptor() {
        return glutWindowStatusFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWindowStatusFunc(void (*func)(int))
     * }
     */
    public static MethodHandle glutWindowStatusFunc$handle() {
        return glutWindowStatusFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWindowStatusFunc(void (*func)(int))
     * }
     */
    public static MemorySegment glutWindowStatusFunc$address() {
        return glutWindowStatusFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWindowStatusFunc(void (*func)(int))
     * }
     */
    public static void glutWindowStatusFunc(MemorySegment func) {
        var mh$ = glutWindowStatusFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWindowStatusFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutKeyboardUpFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutKeyboardUpFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutKeyboardUpFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static FunctionDescriptor glutKeyboardUpFunc$descriptor() {
        return glutKeyboardUpFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutKeyboardUpFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static MethodHandle glutKeyboardUpFunc$handle() {
        return glutKeyboardUpFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutKeyboardUpFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static MemorySegment glutKeyboardUpFunc$address() {
        return glutKeyboardUpFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutKeyboardUpFunc(void (*func)(unsigned char, int, int))
     * }
     */
    public static void glutKeyboardUpFunc(MemorySegment func) {
        var mh$ = glutKeyboardUpFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutKeyboardUpFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSpecialUpFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSpecialUpFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSpecialUpFunc(void (*func)(int, int, int))
     * }
     */
    public static FunctionDescriptor glutSpecialUpFunc$descriptor() {
        return glutSpecialUpFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSpecialUpFunc(void (*func)(int, int, int))
     * }
     */
    public static MethodHandle glutSpecialUpFunc$handle() {
        return glutSpecialUpFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSpecialUpFunc(void (*func)(int, int, int))
     * }
     */
    public static MemorySegment glutSpecialUpFunc$address() {
        return glutSpecialUpFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSpecialUpFunc(void (*func)(int, int, int))
     * }
     */
    public static void glutSpecialUpFunc(MemorySegment func) {
        var mh$ = glutSpecialUpFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSpecialUpFunc", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutJoystickFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutJoystickFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutJoystickFunc(void (*func)(unsigned int, int, int, int), int pollInterval)
     * }
     */
    public static FunctionDescriptor glutJoystickFunc$descriptor() {
        return glutJoystickFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutJoystickFunc(void (*func)(unsigned int, int, int, int), int pollInterval)
     * }
     */
    public static MethodHandle glutJoystickFunc$handle() {
        return glutJoystickFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutJoystickFunc(void (*func)(unsigned int, int, int, int), int pollInterval)
     * }
     */
    public static MemorySegment glutJoystickFunc$address() {
        return glutJoystickFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutJoystickFunc(void (*func)(unsigned int, int, int, int), int pollInterval)
     * }
     */
    public static void glutJoystickFunc(MemorySegment func, int pollInterval) {
        var mh$ = glutJoystickFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutJoystickFunc", func, pollInterval);
            }
            mh$.invokeExact(func, pollInterval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT,
            glut_h.C_FLOAT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static FunctionDescriptor glutSetColor$descriptor() {
        return glutSetColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MethodHandle glutSetColor$handle() {
        return glutSetColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static MemorySegment glutSetColor$address() {
        return glutSetColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetColor(int, GLfloat red, GLfloat green, GLfloat blue)
     * }
     */
    public static void glutSetColor(int x0, float red, float green, float blue) {
        var mh$ = glutSetColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetColor", x0, red, green, blue);
            }
            mh$.invokeExact(x0, red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGetColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_FLOAT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGetColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLfloat glutGetColor(int ndx, int component)
     * }
     */
    public static FunctionDescriptor glutGetColor$descriptor() {
        return glutGetColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLfloat glutGetColor(int ndx, int component)
     * }
     */
    public static MethodHandle glutGetColor$handle() {
        return glutGetColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLfloat glutGetColor(int ndx, int component)
     * }
     */
    public static MemorySegment glutGetColor$address() {
        return glutGetColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLfloat glutGetColor(int ndx, int component)
     * }
     */
    public static float glutGetColor(int ndx, int component) {
        var mh$ = glutGetColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGetColor", ndx, component);
            }
            return (float)mh$.invokeExact(ndx, component);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutCopyColormap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutCopyColormap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutCopyColormap(int win)
     * }
     */
    public static FunctionDescriptor glutCopyColormap$descriptor() {
        return glutCopyColormap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutCopyColormap(int win)
     * }
     */
    public static MethodHandle glutCopyColormap$handle() {
        return glutCopyColormap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutCopyColormap(int win)
     * }
     */
    public static MemorySegment glutCopyColormap$address() {
        return glutCopyColormap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutCopyColormap(int win)
     * }
     */
    public static void glutCopyColormap(int win) {
        var mh$ = glutCopyColormap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutCopyColormap", win);
            }
            mh$.invokeExact(win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutGet(GLenum type)
     * }
     */
    public static FunctionDescriptor glutGet$descriptor() {
        return glutGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutGet(GLenum type)
     * }
     */
    public static MethodHandle glutGet$handle() {
        return glutGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutGet(GLenum type)
     * }
     */
    public static MemorySegment glutGet$address() {
        return glutGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutGet(GLenum type)
     * }
     */
    public static int glutGet(int type) {
        var mh$ = glutGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGet", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutDeviceGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutDeviceGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutDeviceGet(GLenum type)
     * }
     */
    public static FunctionDescriptor glutDeviceGet$descriptor() {
        return glutDeviceGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutDeviceGet(GLenum type)
     * }
     */
    public static MethodHandle glutDeviceGet$handle() {
        return glutDeviceGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutDeviceGet(GLenum type)
     * }
     */
    public static MemorySegment glutDeviceGet$address() {
        return glutDeviceGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutDeviceGet(GLenum type)
     * }
     */
    public static int glutDeviceGet(int type) {
        var mh$ = glutDeviceGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutDeviceGet", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutExtensionSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutExtensionSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutExtensionSupported(const char *name)
     * }
     */
    public static FunctionDescriptor glutExtensionSupported$descriptor() {
        return glutExtensionSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutExtensionSupported(const char *name)
     * }
     */
    public static MethodHandle glutExtensionSupported$handle() {
        return glutExtensionSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutExtensionSupported(const char *name)
     * }
     */
    public static MemorySegment glutExtensionSupported$address() {
        return glutExtensionSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutExtensionSupported(const char *name)
     * }
     */
    public static int glutExtensionSupported(MemorySegment name) {
        var mh$ = glutExtensionSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutExtensionSupported", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGetModifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGetModifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutGetModifiers()
     * }
     */
    public static FunctionDescriptor glutGetModifiers$descriptor() {
        return glutGetModifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutGetModifiers()
     * }
     */
    public static MethodHandle glutGetModifiers$handle() {
        return glutGetModifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutGetModifiers()
     * }
     */
    public static MemorySegment glutGetModifiers$address() {
        return glutGetModifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutGetModifiers()
     * }
     */
    public static int glutGetModifiers() {
        var mh$ = glutGetModifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGetModifiers");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutLayerGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutLayerGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutLayerGet(GLenum type)
     * }
     */
    public static FunctionDescriptor glutLayerGet$descriptor() {
        return glutLayerGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutLayerGet(GLenum type)
     * }
     */
    public static MethodHandle glutLayerGet$handle() {
        return glutLayerGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutLayerGet(GLenum type)
     * }
     */
    public static MemorySegment glutLayerGet$address() {
        return glutLayerGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutLayerGet(GLenum type)
     * }
     */
    public static int glutLayerGet(int type) {
        var mh$ = glutLayerGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutLayerGet", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGetProcAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGetProcAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *glutGetProcAddress(const char *procName)
     * }
     */
    public static FunctionDescriptor glutGetProcAddress$descriptor() {
        return glutGetProcAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *glutGetProcAddress(const char *procName)
     * }
     */
    public static MethodHandle glutGetProcAddress$handle() {
        return glutGetProcAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *glutGetProcAddress(const char *procName)
     * }
     */
    public static MemorySegment glutGetProcAddress$address() {
        return glutGetProcAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *glutGetProcAddress(const char *procName)
     * }
     */
    public static MemorySegment glutGetProcAddress(MemorySegment procName) {
        var mh$ = glutGetProcAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGetProcAddress", procName);
            }
            return (MemorySegment)mh$.invokeExact(procName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutBitmapCharacter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutBitmapCharacter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutBitmapCharacter(void *font, int character)
     * }
     */
    public static FunctionDescriptor glutBitmapCharacter$descriptor() {
        return glutBitmapCharacter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutBitmapCharacter(void *font, int character)
     * }
     */
    public static MethodHandle glutBitmapCharacter$handle() {
        return glutBitmapCharacter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutBitmapCharacter(void *font, int character)
     * }
     */
    public static MemorySegment glutBitmapCharacter$address() {
        return glutBitmapCharacter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutBitmapCharacter(void *font, int character)
     * }
     */
    public static void glutBitmapCharacter(MemorySegment font, int character) {
        var mh$ = glutBitmapCharacter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutBitmapCharacter", font, character);
            }
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutBitmapWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutBitmapWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutBitmapWidth(void *font, int character)
     * }
     */
    public static FunctionDescriptor glutBitmapWidth$descriptor() {
        return glutBitmapWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutBitmapWidth(void *font, int character)
     * }
     */
    public static MethodHandle glutBitmapWidth$handle() {
        return glutBitmapWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutBitmapWidth(void *font, int character)
     * }
     */
    public static MemorySegment glutBitmapWidth$address() {
        return glutBitmapWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutBitmapWidth(void *font, int character)
     * }
     */
    public static int glutBitmapWidth(MemorySegment font, int character) {
        var mh$ = glutBitmapWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutBitmapWidth", font, character);
            }
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutStrokeCharacter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutStrokeCharacter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutStrokeCharacter(void *font, int character)
     * }
     */
    public static FunctionDescriptor glutStrokeCharacter$descriptor() {
        return glutStrokeCharacter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutStrokeCharacter(void *font, int character)
     * }
     */
    public static MethodHandle glutStrokeCharacter$handle() {
        return glutStrokeCharacter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutStrokeCharacter(void *font, int character)
     * }
     */
    public static MemorySegment glutStrokeCharacter$address() {
        return glutStrokeCharacter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutStrokeCharacter(void *font, int character)
     * }
     */
    public static void glutStrokeCharacter(MemorySegment font, int character) {
        var mh$ = glutStrokeCharacter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutStrokeCharacter", font, character);
            }
            mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutStrokeWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutStrokeWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutStrokeWidth(void *font, int character)
     * }
     */
    public static FunctionDescriptor glutStrokeWidth$descriptor() {
        return glutStrokeWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutStrokeWidth(void *font, int character)
     * }
     */
    public static MethodHandle glutStrokeWidth$handle() {
        return glutStrokeWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutStrokeWidth(void *font, int character)
     * }
     */
    public static MemorySegment glutStrokeWidth$address() {
        return glutStrokeWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutStrokeWidth(void *font, int character)
     * }
     */
    public static int glutStrokeWidth(MemorySegment font, int character) {
        var mh$ = glutStrokeWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutStrokeWidth", font, character);
            }
            return (int)mh$.invokeExact(font, character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutBitmapLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutBitmapLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutBitmapLength(void *font, const unsigned char *string)
     * }
     */
    public static FunctionDescriptor glutBitmapLength$descriptor() {
        return glutBitmapLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutBitmapLength(void *font, const unsigned char *string)
     * }
     */
    public static MethodHandle glutBitmapLength$handle() {
        return glutBitmapLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutBitmapLength(void *font, const unsigned char *string)
     * }
     */
    public static MemorySegment glutBitmapLength$address() {
        return glutBitmapLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutBitmapLength(void *font, const unsigned char *string)
     * }
     */
    public static int glutBitmapLength(MemorySegment font, MemorySegment string) {
        var mh$ = glutBitmapLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutBitmapLength", font, string);
            }
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutStrokeLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_POINTER,
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutStrokeLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutStrokeLength(void *font, const unsigned char *string)
     * }
     */
    public static FunctionDescriptor glutStrokeLength$descriptor() {
        return glutStrokeLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutStrokeLength(void *font, const unsigned char *string)
     * }
     */
    public static MethodHandle glutStrokeLength$handle() {
        return glutStrokeLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutStrokeLength(void *font, const unsigned char *string)
     * }
     */
    public static MemorySegment glutStrokeLength$address() {
        return glutStrokeLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutStrokeLength(void *font, const unsigned char *string)
     * }
     */
    public static int glutStrokeLength(MemorySegment font, MemorySegment string) {
        var mh$ = glutStrokeLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutStrokeLength", font, string);
            }
            return (int)mh$.invokeExact(font, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireSphere {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireSphere");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor glutWireSphere$descriptor() {
        return glutWireSphere.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle glutWireSphere$handle() {
        return glutWireSphere.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment glutWireSphere$address() {
        return glutWireSphere.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static void glutWireSphere(double radius, int slices, int stacks) {
        var mh$ = glutWireSphere.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireSphere", radius, slices, stacks);
            }
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidSphere {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidSphere");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor glutSolidSphere$descriptor() {
        return glutSolidSphere.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle glutSolidSphere$handle() {
        return glutSolidSphere.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment glutSolidSphere$address() {
        return glutSolidSphere.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidSphere(GLdouble radius, GLint slices, GLint stacks)
     * }
     */
    public static void glutSolidSphere(double radius, int slices, int stacks) {
        var mh$ = glutSolidSphere.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidSphere", radius, slices, stacks);
            }
            mh$.invokeExact(radius, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireCone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireCone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor glutWireCone$descriptor() {
        return glutWireCone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle glutWireCone$handle() {
        return glutWireCone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment glutWireCone$address() {
        return glutWireCone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static void glutWireCone(double base, double height, int slices, int stacks) {
        var mh$ = glutWireCone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireCone", base, height, slices, stacks);
            }
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidCone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidCone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static FunctionDescriptor glutSolidCone$descriptor() {
        return glutSolidCone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MethodHandle glutSolidCone$handle() {
        return glutSolidCone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static MemorySegment glutSolidCone$address() {
        return glutSolidCone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks)
     * }
     */
    public static void glutSolidCone(double base, double height, int slices, int stacks) {
        var mh$ = glutSolidCone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidCone", base, height, slices, stacks);
            }
            mh$.invokeExact(base, height, slices, stacks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireCube {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireCube");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireCube(GLdouble size)
     * }
     */
    public static FunctionDescriptor glutWireCube$descriptor() {
        return glutWireCube.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireCube(GLdouble size)
     * }
     */
    public static MethodHandle glutWireCube$handle() {
        return glutWireCube.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireCube(GLdouble size)
     * }
     */
    public static MemorySegment glutWireCube$address() {
        return glutWireCube.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireCube(GLdouble size)
     * }
     */
    public static void glutWireCube(double size) {
        var mh$ = glutWireCube.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireCube", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidCube {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidCube");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidCube(GLdouble size)
     * }
     */
    public static FunctionDescriptor glutSolidCube$descriptor() {
        return glutSolidCube.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidCube(GLdouble size)
     * }
     */
    public static MethodHandle glutSolidCube$handle() {
        return glutSolidCube.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidCube(GLdouble size)
     * }
     */
    public static MemorySegment glutSolidCube$address() {
        return glutSolidCube.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidCube(GLdouble size)
     * }
     */
    public static void glutSolidCube(double size) {
        var mh$ = glutSolidCube.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidCube", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireTorus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireTorus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static FunctionDescriptor glutWireTorus$descriptor() {
        return glutWireTorus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static MethodHandle glutWireTorus$handle() {
        return glutWireTorus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static MemorySegment glutWireTorus$address() {
        return glutWireTorus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static void glutWireTorus(double innerRadius, double outerRadius, int sides, int rings) {
        var mh$ = glutWireTorus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireTorus", innerRadius, outerRadius, sides, rings);
            }
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidTorus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE,
            glut_h.C_DOUBLE,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidTorus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static FunctionDescriptor glutSolidTorus$descriptor() {
        return glutSolidTorus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static MethodHandle glutSolidTorus$handle() {
        return glutSolidTorus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static MemorySegment glutSolidTorus$address() {
        return glutSolidTorus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings)
     * }
     */
    public static void glutSolidTorus(double innerRadius, double outerRadius, int sides, int rings) {
        var mh$ = glutSolidTorus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidTorus", innerRadius, outerRadius, sides, rings);
            }
            mh$.invokeExact(innerRadius, outerRadius, sides, rings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireDodecahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireDodecahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireDodecahedron()
     * }
     */
    public static FunctionDescriptor glutWireDodecahedron$descriptor() {
        return glutWireDodecahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireDodecahedron()
     * }
     */
    public static MethodHandle glutWireDodecahedron$handle() {
        return glutWireDodecahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireDodecahedron()
     * }
     */
    public static MemorySegment glutWireDodecahedron$address() {
        return glutWireDodecahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireDodecahedron()
     * }
     */
    public static void glutWireDodecahedron() {
        var mh$ = glutWireDodecahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireDodecahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidDodecahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidDodecahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidDodecahedron()
     * }
     */
    public static FunctionDescriptor glutSolidDodecahedron$descriptor() {
        return glutSolidDodecahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidDodecahedron()
     * }
     */
    public static MethodHandle glutSolidDodecahedron$handle() {
        return glutSolidDodecahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidDodecahedron()
     * }
     */
    public static MemorySegment glutSolidDodecahedron$address() {
        return glutSolidDodecahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidDodecahedron()
     * }
     */
    public static void glutSolidDodecahedron() {
        var mh$ = glutSolidDodecahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidDodecahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireTeapot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireTeapot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireTeapot(GLdouble size)
     * }
     */
    public static FunctionDescriptor glutWireTeapot$descriptor() {
        return glutWireTeapot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireTeapot(GLdouble size)
     * }
     */
    public static MethodHandle glutWireTeapot$handle() {
        return glutWireTeapot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireTeapot(GLdouble size)
     * }
     */
    public static MemorySegment glutWireTeapot$address() {
        return glutWireTeapot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireTeapot(GLdouble size)
     * }
     */
    public static void glutWireTeapot(double size) {
        var mh$ = glutWireTeapot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireTeapot", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidTeapot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidTeapot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidTeapot(GLdouble size)
     * }
     */
    public static FunctionDescriptor glutSolidTeapot$descriptor() {
        return glutSolidTeapot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidTeapot(GLdouble size)
     * }
     */
    public static MethodHandle glutSolidTeapot$handle() {
        return glutSolidTeapot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidTeapot(GLdouble size)
     * }
     */
    public static MemorySegment glutSolidTeapot$address() {
        return glutSolidTeapot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidTeapot(GLdouble size)
     * }
     */
    public static void glutSolidTeapot(double size) {
        var mh$ = glutSolidTeapot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidTeapot", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireOctahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireOctahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireOctahedron()
     * }
     */
    public static FunctionDescriptor glutWireOctahedron$descriptor() {
        return glutWireOctahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireOctahedron()
     * }
     */
    public static MethodHandle glutWireOctahedron$handle() {
        return glutWireOctahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireOctahedron()
     * }
     */
    public static MemorySegment glutWireOctahedron$address() {
        return glutWireOctahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireOctahedron()
     * }
     */
    public static void glutWireOctahedron() {
        var mh$ = glutWireOctahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireOctahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidOctahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidOctahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidOctahedron()
     * }
     */
    public static FunctionDescriptor glutSolidOctahedron$descriptor() {
        return glutSolidOctahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidOctahedron()
     * }
     */
    public static MethodHandle glutSolidOctahedron$handle() {
        return glutSolidOctahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidOctahedron()
     * }
     */
    public static MemorySegment glutSolidOctahedron$address() {
        return glutSolidOctahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidOctahedron()
     * }
     */
    public static void glutSolidOctahedron() {
        var mh$ = glutSolidOctahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidOctahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireTetrahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireTetrahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireTetrahedron()
     * }
     */
    public static FunctionDescriptor glutWireTetrahedron$descriptor() {
        return glutWireTetrahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireTetrahedron()
     * }
     */
    public static MethodHandle glutWireTetrahedron$handle() {
        return glutWireTetrahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireTetrahedron()
     * }
     */
    public static MemorySegment glutWireTetrahedron$address() {
        return glutWireTetrahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireTetrahedron()
     * }
     */
    public static void glutWireTetrahedron() {
        var mh$ = glutWireTetrahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireTetrahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidTetrahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidTetrahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidTetrahedron()
     * }
     */
    public static FunctionDescriptor glutSolidTetrahedron$descriptor() {
        return glutSolidTetrahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidTetrahedron()
     * }
     */
    public static MethodHandle glutSolidTetrahedron$handle() {
        return glutSolidTetrahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidTetrahedron()
     * }
     */
    public static MemorySegment glutSolidTetrahedron$address() {
        return glutSolidTetrahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidTetrahedron()
     * }
     */
    public static void glutSolidTetrahedron() {
        var mh$ = glutSolidTetrahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidTetrahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutWireIcosahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutWireIcosahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutWireIcosahedron()
     * }
     */
    public static FunctionDescriptor glutWireIcosahedron$descriptor() {
        return glutWireIcosahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutWireIcosahedron()
     * }
     */
    public static MethodHandle glutWireIcosahedron$handle() {
        return glutWireIcosahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutWireIcosahedron()
     * }
     */
    public static MemorySegment glutWireIcosahedron$address() {
        return glutWireIcosahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutWireIcosahedron()
     * }
     */
    public static void glutWireIcosahedron() {
        var mh$ = glutWireIcosahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutWireIcosahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSolidIcosahedron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSolidIcosahedron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSolidIcosahedron()
     * }
     */
    public static FunctionDescriptor glutSolidIcosahedron$descriptor() {
        return glutSolidIcosahedron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSolidIcosahedron()
     * }
     */
    public static MethodHandle glutSolidIcosahedron$handle() {
        return glutSolidIcosahedron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSolidIcosahedron()
     * }
     */
    public static MemorySegment glutSolidIcosahedron$address() {
        return glutSolidIcosahedron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSolidIcosahedron()
     * }
     */
    public static void glutSolidIcosahedron() {
        var mh$ = glutSolidIcosahedron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSolidIcosahedron");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutVideoResizeGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutVideoResizeGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutVideoResizeGet(GLenum param)
     * }
     */
    public static FunctionDescriptor glutVideoResizeGet$descriptor() {
        return glutVideoResizeGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutVideoResizeGet(GLenum param)
     * }
     */
    public static MethodHandle glutVideoResizeGet$handle() {
        return glutVideoResizeGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutVideoResizeGet(GLenum param)
     * }
     */
    public static MemorySegment glutVideoResizeGet$address() {
        return glutVideoResizeGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutVideoResizeGet(GLenum param)
     * }
     */
    public static int glutVideoResizeGet(int param) {
        var mh$ = glutVideoResizeGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutVideoResizeGet", param);
            }
            return (int)mh$.invokeExact(param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetupVideoResizing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetupVideoResizing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetupVideoResizing()
     * }
     */
    public static FunctionDescriptor glutSetupVideoResizing$descriptor() {
        return glutSetupVideoResizing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetupVideoResizing()
     * }
     */
    public static MethodHandle glutSetupVideoResizing$handle() {
        return glutSetupVideoResizing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetupVideoResizing()
     * }
     */
    public static MemorySegment glutSetupVideoResizing$address() {
        return glutSetupVideoResizing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetupVideoResizing()
     * }
     */
    public static void glutSetupVideoResizing() {
        var mh$ = glutSetupVideoResizing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetupVideoResizing");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutStopVideoResizing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutStopVideoResizing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutStopVideoResizing()
     * }
     */
    public static FunctionDescriptor glutStopVideoResizing$descriptor() {
        return glutStopVideoResizing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutStopVideoResizing()
     * }
     */
    public static MethodHandle glutStopVideoResizing$handle() {
        return glutStopVideoResizing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutStopVideoResizing()
     * }
     */
    public static MemorySegment glutStopVideoResizing$address() {
        return glutStopVideoResizing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutStopVideoResizing()
     * }
     */
    public static void glutStopVideoResizing() {
        var mh$ = glutStopVideoResizing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutStopVideoResizing");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutVideoResize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutVideoResize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutVideoResize(int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor glutVideoResize$descriptor() {
        return glutVideoResize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutVideoResize(int x, int y, int width, int height)
     * }
     */
    public static MethodHandle glutVideoResize$handle() {
        return glutVideoResize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutVideoResize(int x, int y, int width, int height)
     * }
     */
    public static MemorySegment glutVideoResize$address() {
        return glutVideoResize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutVideoResize(int x, int y, int width, int height)
     * }
     */
    public static void glutVideoResize(int x, int y, int width, int height) {
        var mh$ = glutVideoResize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutVideoResize", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutVideoPan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutVideoPan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutVideoPan(int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor glutVideoPan$descriptor() {
        return glutVideoPan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutVideoPan(int x, int y, int width, int height)
     * }
     */
    public static MethodHandle glutVideoPan$handle() {
        return glutVideoPan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutVideoPan(int x, int y, int width, int height)
     * }
     */
    public static MemorySegment glutVideoPan$address() {
        return glutVideoPan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutVideoPan(int x, int y, int width, int height)
     * }
     */
    public static void glutVideoPan(int x, int y, int width, int height) {
        var mh$ = glutVideoPan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutVideoPan", x, y, width, height);
            }
            mh$.invokeExact(x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutReportErrors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutReportErrors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutReportErrors()
     * }
     */
    public static FunctionDescriptor glutReportErrors$descriptor() {
        return glutReportErrors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutReportErrors()
     * }
     */
    public static MethodHandle glutReportErrors$handle() {
        return glutReportErrors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutReportErrors()
     * }
     */
    public static MemorySegment glutReportErrors$address() {
        return glutReportErrors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutReportErrors()
     * }
     */
    public static void glutReportErrors() {
        var mh$ = glutReportErrors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutReportErrors");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutIgnoreKeyRepeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutIgnoreKeyRepeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutIgnoreKeyRepeat(int ignore)
     * }
     */
    public static FunctionDescriptor glutIgnoreKeyRepeat$descriptor() {
        return glutIgnoreKeyRepeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutIgnoreKeyRepeat(int ignore)
     * }
     */
    public static MethodHandle glutIgnoreKeyRepeat$handle() {
        return glutIgnoreKeyRepeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutIgnoreKeyRepeat(int ignore)
     * }
     */
    public static MemorySegment glutIgnoreKeyRepeat$address() {
        return glutIgnoreKeyRepeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutIgnoreKeyRepeat(int ignore)
     * }
     */
    public static void glutIgnoreKeyRepeat(int ignore) {
        var mh$ = glutIgnoreKeyRepeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutIgnoreKeyRepeat", ignore);
            }
            mh$.invokeExact(ignore);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutSetKeyRepeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutSetKeyRepeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutSetKeyRepeat(int repeatMode)
     * }
     */
    public static FunctionDescriptor glutSetKeyRepeat$descriptor() {
        return glutSetKeyRepeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutSetKeyRepeat(int repeatMode)
     * }
     */
    public static MethodHandle glutSetKeyRepeat$handle() {
        return glutSetKeyRepeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutSetKeyRepeat(int repeatMode)
     * }
     */
    public static MemorySegment glutSetKeyRepeat$address() {
        return glutSetKeyRepeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutSetKeyRepeat(int repeatMode)
     * }
     */
    public static void glutSetKeyRepeat(int repeatMode) {
        var mh$ = glutSetKeyRepeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutSetKeyRepeat", repeatMode);
            }
            mh$.invokeExact(repeatMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutForceJoystickFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutForceJoystickFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutForceJoystickFunc()
     * }
     */
    public static FunctionDescriptor glutForceJoystickFunc$descriptor() {
        return glutForceJoystickFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutForceJoystickFunc()
     * }
     */
    public static MethodHandle glutForceJoystickFunc$handle() {
        return glutForceJoystickFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutForceJoystickFunc()
     * }
     */
    public static MemorySegment glutForceJoystickFunc$address() {
        return glutForceJoystickFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutForceJoystickFunc()
     * }
     */
    public static void glutForceJoystickFunc() {
        var mh$ = glutForceJoystickFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutForceJoystickFunc");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGameModeString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            glut_h.C_POINTER
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGameModeString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutGameModeString(const char *string)
     * }
     */
    public static FunctionDescriptor glutGameModeString$descriptor() {
        return glutGameModeString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutGameModeString(const char *string)
     * }
     */
    public static MethodHandle glutGameModeString$handle() {
        return glutGameModeString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutGameModeString(const char *string)
     * }
     */
    public static MemorySegment glutGameModeString$address() {
        return glutGameModeString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutGameModeString(const char *string)
     * }
     */
    public static void glutGameModeString(MemorySegment string) {
        var mh$ = glutGameModeString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGameModeString", string);
            }
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutEnterGameMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutEnterGameMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutEnterGameMode()
     * }
     */
    public static FunctionDescriptor glutEnterGameMode$descriptor() {
        return glutEnterGameMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutEnterGameMode()
     * }
     */
    public static MethodHandle glutEnterGameMode$handle() {
        return glutEnterGameMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutEnterGameMode()
     * }
     */
    public static MemorySegment glutEnterGameMode$address() {
        return glutEnterGameMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutEnterGameMode()
     * }
     */
    public static int glutEnterGameMode() {
        var mh$ = glutEnterGameMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutEnterGameMode");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutLeaveGameMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutLeaveGameMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void glutLeaveGameMode()
     * }
     */
    public static FunctionDescriptor glutLeaveGameMode$descriptor() {
        return glutLeaveGameMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void glutLeaveGameMode()
     * }
     */
    public static MethodHandle glutLeaveGameMode$handle() {
        return glutLeaveGameMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void glutLeaveGameMode()
     * }
     */
    public static MemorySegment glutLeaveGameMode$address() {
        return glutLeaveGameMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void glutLeaveGameMode()
     * }
     */
    public static void glutLeaveGameMode() {
        var mh$ = glutLeaveGameMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutLeaveGameMode");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glutGameModeGet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            glut_h.C_INT,
            glut_h.C_INT
        );

        public static final MemorySegment ADDR = glut_h.findOrThrow("glutGameModeGet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int glutGameModeGet(GLenum mode)
     * }
     */
    public static FunctionDescriptor glutGameModeGet$descriptor() {
        return glutGameModeGet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int glutGameModeGet(GLenum mode)
     * }
     */
    public static MethodHandle glutGameModeGet$handle() {
        return glutGameModeGet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int glutGameModeGet(GLenum mode)
     * }
     */
    public static MemorySegment glutGameModeGet$address() {
        return glutGameModeGet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int glutGameModeGet(GLenum mode)
     * }
     */
    public static int glutGameModeGet(int mode) {
        var mh$ = glutGameModeGet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glutGameModeGet", mode);
            }
            return (int)mh$.invokeExact(mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int __MAC_OS_X_VERSION_MIN_REQUIRED = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MIN_REQUIRED 130000
     * }
     */
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return __MAC_OS_X_VERSION_MIN_REQUIRED;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = glut_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int GL_DRAW_FRAMEBUFFER_BINDING = (int)36006L;
    /**
     * {@snippet lang=c :
     * #define GL_DRAW_FRAMEBUFFER_BINDING 36006
     * }
     */
    public static int GL_DRAW_FRAMEBUFFER_BINDING() {
        return GL_DRAW_FRAMEBUFFER_BINDING;
    }
    private static final long GL_TIMEOUT_IGNORED = -1L;
    /**
     * {@snippet lang=c :
     * #define GL_TIMEOUT_IGNORED -1
     * }
     */
    public static long GL_TIMEOUT_IGNORED() {
        return GL_TIMEOUT_IGNORED;
    }
    private static final int GL_LOGIC_OP = (int)3057L;
    /**
     * {@snippet lang=c :
     * #define GL_LOGIC_OP 3057
     * }
     */
    public static int GL_LOGIC_OP() {
        return GL_LOGIC_OP;
    }
    private static final int GL_TEXTURE_COMPONENTS = (int)4099L;
    /**
     * {@snippet lang=c :
     * #define GL_TEXTURE_COMPONENTS 4099
     * }
     */
    public static int GL_TEXTURE_COMPONENTS() {
        return GL_TEXTURE_COMPONENTS;
    }
    private static final int GL_CLIENT_ALL_ATTRIB_BITS = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define GL_CLIENT_ALL_ATTRIB_BITS 4294967295
     * }
     */
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return GL_CLIENT_ALL_ATTRIB_BITS;
    }
    private static final double GLU_TESS_MAX_COORD = 1.0E150d;
    /**
     * {@snippet lang=c :
     * #define GLU_TESS_MAX_COORD 1.0E150
     * }
     */
    public static double GLU_TESS_MAX_COORD() {
        return GLU_TESS_MAX_COORD;
    }
    private static final int GLUT_RGBA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GLUT_RGBA 0
     * }
     */
    public static int GLUT_RGBA() {
        return GLUT_RGBA;
    }
}

