// Generated by jextract

package opengl.macos.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glut_h_2 extends glut_h_1 {

    public static int GL_MAX_DRAW_BUFFERS() {
        return (int)34852L;
    }
    public static int GL_DRAW_BUFFER0() {
        return (int)34853L;
    }
    public static int GL_DRAW_BUFFER1() {
        return (int)34854L;
    }
    public static int GL_DRAW_BUFFER2() {
        return (int)34855L;
    }
    public static int GL_DRAW_BUFFER3() {
        return (int)34856L;
    }
    public static int GL_DRAW_BUFFER4() {
        return (int)34857L;
    }
    public static int GL_DRAW_BUFFER5() {
        return (int)34858L;
    }
    public static int GL_DRAW_BUFFER6() {
        return (int)34859L;
    }
    public static int GL_DRAW_BUFFER7() {
        return (int)34860L;
    }
    public static int GL_DRAW_BUFFER8() {
        return (int)34861L;
    }
    public static int GL_DRAW_BUFFER9() {
        return (int)34862L;
    }
    public static int GL_DRAW_BUFFER10() {
        return (int)34863L;
    }
    public static int GL_DRAW_BUFFER11() {
        return (int)34864L;
    }
    public static int GL_DRAW_BUFFER12() {
        return (int)34865L;
    }
    public static int GL_DRAW_BUFFER13() {
        return (int)34866L;
    }
    public static int GL_DRAW_BUFFER14() {
        return (int)34867L;
    }
    public static int GL_DRAW_BUFFER15() {
        return (int)34868L;
    }
    public static int GL_POINT_SPRITE() {
        return (int)34913L;
    }
    public static int GL_COORD_REPLACE() {
        return (int)34914L;
    }
    public static int GL_POINT_SPRITE_COORD_ORIGIN() {
        return (int)36000L;
    }
    public static int GL_LOWER_LEFT() {
        return (int)36001L;
    }
    public static int GL_UPPER_LEFT() {
        return (int)36002L;
    }
    public static int GL_STENCIL_BACK_FUNC() {
        return (int)34816L;
    }
    public static int GL_STENCIL_BACK_VALUE_MASK() {
        return (int)36004L;
    }
    public static int GL_STENCIL_BACK_REF() {
        return (int)36003L;
    }
    public static int GL_STENCIL_BACK_FAIL() {
        return (int)34817L;
    }
    public static int GL_STENCIL_BACK_PASS_DEPTH_FAIL() {
        return (int)34818L;
    }
    public static int GL_STENCIL_BACK_PASS_DEPTH_PASS() {
        return (int)34819L;
    }
    public static int GL_STENCIL_BACK_WRITEMASK() {
        return (int)36005L;
    }
    public static int GL_CURRENT_RASTER_SECONDARY_COLOR() {
        return (int)33887L;
    }
    public static int GL_PIXEL_PACK_BUFFER() {
        return (int)35051L;
    }
    public static int GL_PIXEL_UNPACK_BUFFER() {
        return (int)35052L;
    }
    public static int GL_PIXEL_PACK_BUFFER_BINDING() {
        return (int)35053L;
    }
    public static int GL_PIXEL_UNPACK_BUFFER_BINDING() {
        return (int)35055L;
    }
    public static int GL_FLOAT_MAT2x3() {
        return (int)35685L;
    }
    public static int GL_FLOAT_MAT2x4() {
        return (int)35686L;
    }
    public static int GL_FLOAT_MAT3x2() {
        return (int)35687L;
    }
    public static int GL_FLOAT_MAT3x4() {
        return (int)35688L;
    }
    public static int GL_FLOAT_MAT4x2() {
        return (int)35689L;
    }
    public static int GL_FLOAT_MAT4x3() {
        return (int)35690L;
    }
    public static int GL_SRGB() {
        return (int)35904L;
    }
    public static int GL_SRGB8() {
        return (int)35905L;
    }
    public static int GL_SRGB_ALPHA() {
        return (int)35906L;
    }
    public static int GL_SRGB8_ALPHA8() {
        return (int)35907L;
    }
    public static int GL_SLUMINANCE_ALPHA() {
        return (int)35908L;
    }
    public static int GL_SLUMINANCE8_ALPHA8() {
        return (int)35909L;
    }
    public static int GL_SLUMINANCE() {
        return (int)35910L;
    }
    public static int GL_SLUMINANCE8() {
        return (int)35911L;
    }
    public static int GL_COMPRESSED_SRGB() {
        return (int)35912L;
    }
    public static int GL_COMPRESSED_SRGB_ALPHA() {
        return (int)35913L;
    }
    public static int GL_COMPRESSED_SLUMINANCE() {
        return (int)35914L;
    }
    public static int GL_COMPRESSED_SLUMINANCE_ALPHA() {
        return (int)35915L;
    }
    public static int GLU_EXT_object_space_tess() {
        return (int)1L;
    }
    public static int GLU_EXT_nurbs_tessellator() {
        return (int)1L;
    }
    public static int GLU_FALSE() {
        return (int)0L;
    }
    public static int GLU_TRUE() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_1() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_2() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_3() {
        return (int)1L;
    }
    public static int GLU_VERSION() {
        return (int)100800L;
    }
    public static int GLU_EXTENSIONS() {
        return (int)100801L;
    }
    public static int GLU_INVALID_ENUM() {
        return (int)100900L;
    }
    public static int GLU_INVALID_VALUE() {
        return (int)100901L;
    }
    public static int GLU_OUT_OF_MEMORY() {
        return (int)100902L;
    }
    public static int GLU_INCOMPATIBLE_GL_VERSION() {
        return (int)100903L;
    }
    public static int GLU_INVALID_OPERATION() {
        return (int)100904L;
    }
    public static int GLU_OUTLINE_POLYGON() {
        return (int)100240L;
    }
    public static int GLU_OUTLINE_PATCH() {
        return (int)100241L;
    }
    public static int GLU_NURBS_ERROR() {
        return (int)100103L;
    }
    public static int GLU_ERROR() {
        return (int)100103L;
    }
    public static int GLU_NURBS_BEGIN() {
        return (int)100164L;
    }
    public static int GLU_NURBS_BEGIN_EXT() {
        return (int)100164L;
    }
    public static int GLU_NURBS_VERTEX() {
        return (int)100165L;
    }
    public static int GLU_NURBS_VERTEX_EXT() {
        return (int)100165L;
    }
    public static int GLU_NURBS_NORMAL() {
        return (int)100166L;
    }
    public static int GLU_NURBS_NORMAL_EXT() {
        return (int)100166L;
    }
    public static int GLU_NURBS_COLOR() {
        return (int)100167L;
    }
    public static int GLU_NURBS_COLOR_EXT() {
        return (int)100167L;
    }
    public static int GLU_NURBS_TEXTURE_COORD() {
        return (int)100168L;
    }
    public static int GLU_NURBS_TEX_COORD_EXT() {
        return (int)100168L;
    }
    public static int GLU_NURBS_END() {
        return (int)100169L;
    }
    public static int GLU_NURBS_END_EXT() {
        return (int)100169L;
    }
    public static int GLU_NURBS_BEGIN_DATA() {
        return (int)100170L;
    }
    public static int GLU_NURBS_BEGIN_DATA_EXT() {
        return (int)100170L;
    }
    public static int GLU_NURBS_VERTEX_DATA() {
        return (int)100171L;
    }
    public static int GLU_NURBS_VERTEX_DATA_EXT() {
        return (int)100171L;
    }
    public static int GLU_NURBS_NORMAL_DATA() {
        return (int)100172L;
    }
    public static int GLU_NURBS_NORMAL_DATA_EXT() {
        return (int)100172L;
    }
    public static int GLU_NURBS_COLOR_DATA() {
        return (int)100173L;
    }
    public static int GLU_NURBS_COLOR_DATA_EXT() {
        return (int)100173L;
    }
    public static int GLU_NURBS_TEXTURE_COORD_DATA() {
        return (int)100174L;
    }
    public static int GLU_NURBS_TEX_COORD_DATA_EXT() {
        return (int)100174L;
    }
    public static int GLU_NURBS_END_DATA() {
        return (int)100175L;
    }
    public static int GLU_NURBS_END_DATA_EXT() {
        return (int)100175L;
    }
    public static int GLU_NURBS_ERROR1() {
        return (int)100251L;
    }
    public static int GLU_NURBS_ERROR2() {
        return (int)100252L;
    }
    public static int GLU_NURBS_ERROR3() {
        return (int)100253L;
    }
    public static int GLU_NURBS_ERROR4() {
        return (int)100254L;
    }
    public static int GLU_NURBS_ERROR5() {
        return (int)100255L;
    }
    public static int GLU_NURBS_ERROR6() {
        return (int)100256L;
    }
    public static int GLU_NURBS_ERROR7() {
        return (int)100257L;
    }
    public static int GLU_NURBS_ERROR8() {
        return (int)100258L;
    }
    public static int GLU_NURBS_ERROR9() {
        return (int)100259L;
    }
    public static int GLU_NURBS_ERROR10() {
        return (int)100260L;
    }
    public static int GLU_NURBS_ERROR11() {
        return (int)100261L;
    }
    public static int GLU_NURBS_ERROR12() {
        return (int)100262L;
    }
    public static int GLU_NURBS_ERROR13() {
        return (int)100263L;
    }
    public static int GLU_NURBS_ERROR14() {
        return (int)100264L;
    }
    public static int GLU_NURBS_ERROR15() {
        return (int)100265L;
    }
    public static int GLU_NURBS_ERROR16() {
        return (int)100266L;
    }
    public static int GLU_NURBS_ERROR17() {
        return (int)100267L;
    }
    public static int GLU_NURBS_ERROR18() {
        return (int)100268L;
    }
    public static int GLU_NURBS_ERROR19() {
        return (int)100269L;
    }
    public static int GLU_NURBS_ERROR20() {
        return (int)100270L;
    }
    public static int GLU_NURBS_ERROR21() {
        return (int)100271L;
    }
    public static int GLU_NURBS_ERROR22() {
        return (int)100272L;
    }
    public static int GLU_NURBS_ERROR23() {
        return (int)100273L;
    }
    public static int GLU_NURBS_ERROR24() {
        return (int)100274L;
    }
    public static int GLU_NURBS_ERROR25() {
        return (int)100275L;
    }
    public static int GLU_NURBS_ERROR26() {
        return (int)100276L;
    }
    public static int GLU_NURBS_ERROR27() {
        return (int)100277L;
    }
    public static int GLU_NURBS_ERROR28() {
        return (int)100278L;
    }
    public static int GLU_NURBS_ERROR29() {
        return (int)100279L;
    }
    public static int GLU_NURBS_ERROR30() {
        return (int)100280L;
    }
    public static int GLU_NURBS_ERROR31() {
        return (int)100281L;
    }
    public static int GLU_NURBS_ERROR32() {
        return (int)100282L;
    }
    public static int GLU_NURBS_ERROR33() {
        return (int)100283L;
    }
    public static int GLU_NURBS_ERROR34() {
        return (int)100284L;
    }
    public static int GLU_NURBS_ERROR35() {
        return (int)100285L;
    }
    public static int GLU_NURBS_ERROR36() {
        return (int)100286L;
    }
    public static int GLU_NURBS_ERROR37() {
        return (int)100287L;
    }
    public static int GLU_AUTO_LOAD_MATRIX() {
        return (int)100200L;
    }
    public static int GLU_CULLING() {
        return (int)100201L;
    }
    public static int GLU_SAMPLING_TOLERANCE() {
        return (int)100203L;
    }
    public static int GLU_DISPLAY_MODE() {
        return (int)100204L;
    }
    public static int GLU_PARAMETRIC_TOLERANCE() {
        return (int)100202L;
    }
    public static int GLU_SAMPLING_METHOD() {
        return (int)100205L;
    }
    public static int GLU_U_STEP() {
        return (int)100206L;
    }
    public static int GLU_V_STEP() {
        return (int)100207L;
    }
    public static int GLU_NURBS_MODE() {
        return (int)100160L;
    }
    public static int GLU_NURBS_MODE_EXT() {
        return (int)100160L;
    }
    public static int GLU_NURBS_TESSELLATOR() {
        return (int)100161L;
    }
    public static int GLU_NURBS_TESSELLATOR_EXT() {
        return (int)100161L;
    }
    public static int GLU_NURBS_RENDERER() {
        return (int)100162L;
    }
    public static int GLU_NURBS_RENDERER_EXT() {
        return (int)100162L;
    }
    public static int GLU_OBJECT_PARAMETRIC_ERROR() {
        return (int)100208L;
    }
    public static int GLU_OBJECT_PARAMETRIC_ERROR_EXT() {
        return (int)100208L;
    }
    public static int GLU_OBJECT_PATH_LENGTH() {
        return (int)100209L;
    }
    public static int GLU_OBJECT_PATH_LENGTH_EXT() {
        return (int)100209L;
    }
    public static int GLU_PATH_LENGTH() {
        return (int)100215L;
    }
    public static int GLU_PARAMETRIC_ERROR() {
        return (int)100216L;
    }
    public static int GLU_DOMAIN_DISTANCE() {
        return (int)100217L;
    }
    public static int GLU_MAP1_TRIM_2() {
        return (int)100210L;
    }
    public static int GLU_MAP1_TRIM_3() {
        return (int)100211L;
    }
    public static int GLU_POINT() {
        return (int)100010L;
    }
    public static int GLU_LINE() {
        return (int)100011L;
    }
    public static int GLU_FILL() {
        return (int)100012L;
    }
    public static int GLU_SILHOUETTE() {
        return (int)100013L;
    }
    public static int GLU_SMOOTH() {
        return (int)100000L;
    }
    public static int GLU_FLAT() {
        return (int)100001L;
    }
    public static int GLU_NONE() {
        return (int)100002L;
    }
    public static int GLU_OUTSIDE() {
        return (int)100020L;
    }
    public static int GLU_INSIDE() {
        return (int)100021L;
    }
    public static int GLU_TESS_BEGIN() {
        return (int)100100L;
    }
    public static int GLU_BEGIN() {
        return (int)100100L;
    }
    public static int GLU_TESS_VERTEX() {
        return (int)100101L;
    }
    public static int GLU_VERTEX() {
        return (int)100101L;
    }
    public static int GLU_TESS_END() {
        return (int)100102L;
    }
    public static int GLU_END() {
        return (int)100102L;
    }
    public static int GLU_TESS_ERROR() {
        return (int)100103L;
    }
    public static int GLU_TESS_EDGE_FLAG() {
        return (int)100104L;
    }
    public static int GLU_EDGE_FLAG() {
        return (int)100104L;
    }
    public static int GLU_TESS_COMBINE() {
        return (int)100105L;
    }
    public static int GLU_TESS_BEGIN_DATA() {
        return (int)100106L;
    }
    public static int GLU_TESS_VERTEX_DATA() {
        return (int)100107L;
    }
    public static int GLU_TESS_END_DATA() {
        return (int)100108L;
    }
    public static int GLU_TESS_ERROR_DATA() {
        return (int)100109L;
    }
    public static int GLU_TESS_EDGE_FLAG_DATA() {
        return (int)100110L;
    }
    public static int GLU_TESS_COMBINE_DATA() {
        return (int)100111L;
    }
    public static int GLU_CW() {
        return (int)100120L;
    }
    public static int GLU_CCW() {
        return (int)100121L;
    }
    public static int GLU_INTERIOR() {
        return (int)100122L;
    }
    public static int GLU_EXTERIOR() {
        return (int)100123L;
    }
    public static int GLU_UNKNOWN() {
        return (int)100124L;
    }
    public static int GLU_TESS_WINDING_RULE() {
        return (int)100140L;
    }
    public static int GLU_TESS_BOUNDARY_ONLY() {
        return (int)100141L;
    }
    public static int GLU_TESS_TOLERANCE() {
        return (int)100142L;
    }
    public static int GLU_TESS_ERROR1() {
        return (int)100151L;
    }
    public static int GLU_TESS_ERROR2() {
        return (int)100152L;
    }
    public static int GLU_TESS_ERROR3() {
        return (int)100153L;
    }
    public static int GLU_TESS_ERROR4() {
        return (int)100154L;
    }
    public static int GLU_TESS_ERROR5() {
        return (int)100155L;
    }
    public static int GLU_TESS_ERROR6() {
        return (int)100156L;
    }
    public static int GLU_TESS_ERROR7() {
        return (int)100157L;
    }
    public static int GLU_TESS_ERROR8() {
        return (int)100158L;
    }
    public static int GLU_TESS_MISSING_BEGIN_POLYGON() {
        return (int)100151L;
    }
    public static int GLU_TESS_MISSING_BEGIN_CONTOUR() {
        return (int)100152L;
    }
    public static int GLU_TESS_MISSING_END_POLYGON() {
        return (int)100153L;
    }
    public static int GLU_TESS_MISSING_END_CONTOUR() {
        return (int)100154L;
    }
    public static int GLU_TESS_COORD_TOO_LARGE() {
        return (int)100155L;
    }
    public static int GLU_TESS_NEED_COMBINE_CALLBACK() {
        return (int)100156L;
    }
    public static int GLU_TESS_WINDING_ODD() {
        return (int)100130L;
    }
    public static int GLU_TESS_WINDING_NONZERO() {
        return (int)100131L;
    }
    public static int GLU_TESS_WINDING_POSITIVE() {
        return (int)100132L;
    }
    public static int GLU_TESS_WINDING_NEGATIVE() {
        return (int)100133L;
    }
    public static int GLU_TESS_WINDING_ABS_GEQ_TWO() {
        return (int)100134L;
    }
    public static int GLUT_API_VERSION() {
        return (int)5L;
    }
    public static int GLUT_XLIB_IMPLEMENTATION() {
        return (int)15L;
    }
    public static int GLUT_MACOSX_IMPLEMENTATION() {
        return (int)4L;
    }
    public static int GLUT_RGB() {
        return (int)0L;
    }
    public static int GLUT_INDEX() {
        return (int)1L;
    }
    public static int GLUT_SINGLE() {
        return (int)0L;
    }
    public static int GLUT_DOUBLE() {
        return (int)2L;
    }
    public static int GLUT_ACCUM() {
        return (int)4L;
    }
    public static int GLUT_ALPHA() {
        return (int)8L;
    }
    public static int GLUT_DEPTH() {
        return (int)16L;
    }
    public static int GLUT_STENCIL() {
        return (int)32L;
    }
    public static int GLUT_MULTISAMPLE() {
        return (int)128L;
    }
    public static int GLUT_STEREO() {
        return (int)256L;
    }
    public static int GLUT_LUMINANCE() {
        return (int)512L;
    }
    public static int GLUT_NO_RECOVERY() {
        return (int)1024L;
    }
    public static int GLUT_3_2_CORE_PROFILE() {
        return (int)2048L;
    }
    public static int GLUT_LEFT_BUTTON() {
        return (int)0L;
    }
    public static int GLUT_MIDDLE_BUTTON() {
        return (int)1L;
    }
    public static int GLUT_RIGHT_BUTTON() {
        return (int)2L;
    }
    public static int GLUT_DOWN() {
        return (int)0L;
    }
    public static int GLUT_UP() {
        return (int)1L;
    }
    public static int GLUT_KEY_F1() {
        return (int)1L;
    }
    public static int GLUT_KEY_F2() {
        return (int)2L;
    }
    public static int GLUT_KEY_F3() {
        return (int)3L;
    }
    public static int GLUT_KEY_F4() {
        return (int)4L;
    }
    public static int GLUT_KEY_F5() {
        return (int)5L;
    }
    public static int GLUT_KEY_F6() {
        return (int)6L;
    }
    public static int GLUT_KEY_F7() {
        return (int)7L;
    }
    public static int GLUT_KEY_F8() {
        return (int)8L;
    }
    public static int GLUT_KEY_F9() {
        return (int)9L;
    }
    public static int GLUT_KEY_F10() {
        return (int)10L;
    }
    public static int GLUT_KEY_F11() {
        return (int)11L;
    }
    public static int GLUT_KEY_F12() {
        return (int)12L;
    }
    public static int GLUT_KEY_LEFT() {
        return (int)100L;
    }
    public static int GLUT_KEY_UP() {
        return (int)101L;
    }
    public static int GLUT_KEY_RIGHT() {
        return (int)102L;
    }
    public static int GLUT_KEY_DOWN() {
        return (int)103L;
    }
    public static int GLUT_KEY_PAGE_UP() {
        return (int)104L;
    }
    public static int GLUT_KEY_PAGE_DOWN() {
        return (int)105L;
    }
    public static int GLUT_KEY_HOME() {
        return (int)106L;
    }
    public static int GLUT_KEY_END() {
        return (int)107L;
    }
    public static int GLUT_KEY_INSERT() {
        return (int)108L;
    }
    public static int GLUT_LEFT() {
        return (int)0L;
    }
    public static int GLUT_ENTERED() {
        return (int)1L;
    }
    public static int GLUT_MENU_NOT_IN_USE() {
        return (int)0L;
    }
    public static int GLUT_MENU_IN_USE() {
        return (int)1L;
    }
    public static int GLUT_NOT_VISIBLE() {
        return (int)0L;
    }
    public static int GLUT_VISIBLE() {
        return (int)1L;
    }
    public static int GLUT_HIDDEN() {
        return (int)0L;
    }
    public static int GLUT_FULLY_RETAINED() {
        return (int)1L;
    }
    public static int GLUT_PARTIALLY_RETAINED() {
        return (int)2L;
    }
    public static int GLUT_FULLY_COVERED() {
        return (int)3L;
    }
    public static int GLUT_RED() {
        return (int)0L;
    }
    public static int GLUT_GREEN() {
        return (int)1L;
    }
    public static int GLUT_BLUE() {
        return (int)2L;
    }
    public static int GLUT_NORMAL() {
        return (int)0L;
    }
    public static int GLUT_OVERLAY() {
        return (int)1L;
    }
    public static int GLUT_WINDOW_X() {
        return (int)100L;
    }
    public static int GLUT_WINDOW_Y() {
        return (int)101L;
    }
    public static int GLUT_WINDOW_WIDTH() {
        return (int)102L;
    }
    public static int GLUT_WINDOW_HEIGHT() {
        return (int)103L;
    }
    public static int GLUT_WINDOW_BUFFER_SIZE() {
        return (int)104L;
    }
    public static int GLUT_WINDOW_STENCIL_SIZE() {
        return (int)105L;
    }
    public static int GLUT_WINDOW_DEPTH_SIZE() {
        return (int)106L;
    }
    public static int GLUT_WINDOW_RED_SIZE() {
        return (int)107L;
    }
    public static int GLUT_WINDOW_GREEN_SIZE() {
        return (int)108L;
    }
    public static int GLUT_WINDOW_BLUE_SIZE() {
        return (int)109L;
    }
    public static int GLUT_WINDOW_ALPHA_SIZE() {
        return (int)110L;
    }
    public static int GLUT_WINDOW_ACCUM_RED_SIZE() {
        return (int)111L;
    }
    public static int GLUT_WINDOW_ACCUM_GREEN_SIZE() {
        return (int)112L;
    }
    public static int GLUT_WINDOW_ACCUM_BLUE_SIZE() {
        return (int)113L;
    }
    public static int GLUT_WINDOW_ACCUM_ALPHA_SIZE() {
        return (int)114L;
    }
    public static int GLUT_WINDOW_DOUBLEBUFFER() {
        return (int)115L;
    }
    public static int GLUT_WINDOW_RGBA() {
        return (int)116L;
    }
    public static int GLUT_WINDOW_PARENT() {
        return (int)117L;
    }
    public static int GLUT_WINDOW_NUM_CHILDREN() {
        return (int)118L;
    }
    public static int GLUT_WINDOW_COLORMAP_SIZE() {
        return (int)119L;
    }
    public static int GLUT_WINDOW_NUM_SAMPLES() {
        return (int)120L;
    }
    public static int GLUT_WINDOW_STEREO() {
        return (int)121L;
    }
    public static int GLUT_WINDOW_CURSOR() {
        return (int)122L;
    }
    public static int GLUT_SCREEN_WIDTH() {
        return (int)200L;
    }
    public static int GLUT_SCREEN_HEIGHT() {
        return (int)201L;
    }
    public static int GLUT_SCREEN_WIDTH_MM() {
        return (int)202L;
    }
    public static int GLUT_SCREEN_HEIGHT_MM() {
        return (int)203L;
    }
    public static int GLUT_MENU_NUM_ITEMS() {
        return (int)300L;
    }
    public static int GLUT_DISPLAY_MODE_POSSIBLE() {
        return (int)400L;
    }
    public static int GLUT_INIT_WINDOW_X() {
        return (int)500L;
    }
    public static int GLUT_INIT_WINDOW_Y() {
        return (int)501L;
    }
    public static int GLUT_INIT_WINDOW_WIDTH() {
        return (int)502L;
    }
    public static int GLUT_INIT_WINDOW_HEIGHT() {
        return (int)503L;
    }
    public static int GLUT_INIT_DISPLAY_MODE() {
        return (int)504L;
    }
    public static int GLUT_ELAPSED_TIME() {
        return (int)700L;
    }
    public static int GLUT_WINDOW_FORMAT_ID() {
        return (int)123L;
    }
    public static int GLUT_HAS_KEYBOARD() {
        return (int)600L;
    }
    public static int GLUT_HAS_MOUSE() {
        return (int)601L;
    }
    public static int GLUT_HAS_SPACEBALL() {
        return (int)602L;
    }
    public static int GLUT_HAS_DIAL_AND_BUTTON_BOX() {
        return (int)603L;
    }
    public static int GLUT_HAS_TABLET() {
        return (int)604L;
    }
    public static int GLUT_NUM_MOUSE_BUTTONS() {
        return (int)605L;
    }
    public static int GLUT_NUM_SPACEBALL_BUTTONS() {
        return (int)606L;
    }
    public static int GLUT_NUM_BUTTON_BOX_BUTTONS() {
        return (int)607L;
    }
    public static int GLUT_NUM_DIALS() {
        return (int)608L;
    }
    public static int GLUT_NUM_TABLET_BUTTONS() {
        return (int)609L;
    }
    public static int GLUT_DEVICE_IGNORE_KEY_REPEAT() {
        return (int)610L;
    }
    public static int GLUT_DEVICE_KEY_REPEAT() {
        return (int)611L;
    }
    public static int GLUT_HAS_JOYSTICK() {
        return (int)612L;
    }
    public static int GLUT_OWNS_JOYSTICK() {
        return (int)613L;
    }
    public static int GLUT_JOYSTICK_BUTTONS() {
        return (int)614L;
    }
    public static int GLUT_JOYSTICK_AXES() {
        return (int)615L;
    }
    public static int GLUT_JOYSTICK_POLL_RATE() {
        return (int)616L;
    }
    public static int GLUT_OVERLAY_POSSIBLE() {
        return (int)800L;
    }
    public static int GLUT_LAYER_IN_USE() {
        return (int)801L;
    }
    public static int GLUT_HAS_OVERLAY() {
        return (int)802L;
    }
    public static int GLUT_TRANSPARENT_INDEX() {
        return (int)803L;
    }
    public static int GLUT_NORMAL_DAMAGED() {
        return (int)804L;
    }
    public static int GLUT_OVERLAY_DAMAGED() {
        return (int)805L;
    }
    public static int GLUT_VIDEO_RESIZE_POSSIBLE() {
        return (int)900L;
    }
    public static int GLUT_VIDEO_RESIZE_IN_USE() {
        return (int)901L;
    }
    public static int GLUT_VIDEO_RESIZE_X_DELTA() {
        return (int)902L;
    }
    public static int GLUT_VIDEO_RESIZE_Y_DELTA() {
        return (int)903L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH_DELTA() {
        return (int)904L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT_DELTA() {
        return (int)905L;
    }
    public static int GLUT_VIDEO_RESIZE_X() {
        return (int)906L;
    }
    public static int GLUT_VIDEO_RESIZE_Y() {
        return (int)907L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH() {
        return (int)908L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT() {
        return (int)909L;
    }
    public static int GLUT_ACTIVE_SHIFT() {
        return (int)1L;
    }
    public static int GLUT_ACTIVE_CTRL() {
        return (int)2L;
    }
    public static int GLUT_ACTIVE_ALT() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_RIGHT_ARROW() {
        return (int)0L;
    }
    public static int GLUT_CURSOR_LEFT_ARROW() {
        return (int)1L;
    }
    public static int GLUT_CURSOR_INFO() {
        return (int)2L;
    }
    public static int GLUT_CURSOR_DESTROY() {
        return (int)3L;
    }
    public static int GLUT_CURSOR_HELP() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_CYCLE() {
        return (int)5L;
    }
    public static int GLUT_CURSOR_SPRAY() {
        return (int)6L;
    }
    public static int GLUT_CURSOR_WAIT() {
        return (int)7L;
    }
    public static int GLUT_CURSOR_TEXT() {
        return (int)8L;
    }
    public static int GLUT_CURSOR_CROSSHAIR() {
        return (int)9L;
    }
    public static int GLUT_CURSOR_UP_DOWN() {
        return (int)10L;
    }
    public static int GLUT_CURSOR_LEFT_RIGHT() {
        return (int)11L;
    }
    public static int GLUT_CURSOR_TOP_SIDE() {
        return (int)12L;
    }
    public static int GLUT_CURSOR_BOTTOM_SIDE() {
        return (int)13L;
    }
    public static int GLUT_CURSOR_LEFT_SIDE() {
        return (int)14L;
    }
    public static int GLUT_CURSOR_RIGHT_SIDE() {
        return (int)15L;
    }
    public static int GLUT_CURSOR_TOP_LEFT_CORNER() {
        return (int)16L;
    }
    public static int GLUT_CURSOR_TOP_RIGHT_CORNER() {
        return (int)17L;
    }
    public static int GLUT_CURSOR_BOTTOM_RIGHT_CORNER() {
        return (int)18L;
    }
    public static int GLUT_CURSOR_BOTTOM_LEFT_CORNER() {
        return (int)19L;
    }
    public static int GLUT_CURSOR_INHERIT() {
        return (int)100L;
    }
    public static int GLUT_CURSOR_NONE() {
        return (int)101L;
    }
    public static int GLUT_CURSOR_FULL_CROSSHAIR() {
        return (int)102L;
    }
    public static int GLUT_KEY_REPEAT_OFF() {
        return (int)0L;
    }
    public static int GLUT_KEY_REPEAT_ON() {
        return (int)1L;
    }
    public static int GLUT_KEY_REPEAT_DEFAULT() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_A() {
        return (int)1L;
    }
    public static int GLUT_JOYSTICK_BUTTON_B() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_C() {
        return (int)4L;
    }
    public static int GLUT_JOYSTICK_BUTTON_D() {
        return (int)8L;
    }
    public static int GLUT_GAME_MODE_ACTIVE() {
        return (int)0L;
    }
    public static int GLUT_GAME_MODE_POSSIBLE() {
        return (int)1L;
    }
    public static int GLUT_GAME_MODE_WIDTH() {
        return (int)2L;
    }
    public static int GLUT_GAME_MODE_HEIGHT() {
        return (int)3L;
    }
    public static int GLUT_GAME_MODE_PIXEL_DEPTH() {
        return (int)4L;
    }
    public static int GLUT_GAME_MODE_REFRESH_RATE() {
        return (int)5L;
    }
    public static int GLUT_GAME_MODE_DISPLAY_CHANGED() {
        return (int)6L;
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfByte GLchar = Constants$root.C_CHAR$LAYOUT;
    public static OfByte GLcharARB = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress GLhandleARB = Constants$root.C_POINTER$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt GLfixed = Constants$root.C_INT$LAYOUT;
    public static OfLong GLint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress GLsync = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLint64EXT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glClampColorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClampColorARB$MH,"glClampColorARB");
    }
    public static void glClampColorARB ( int target,  int clamp) {
        var mh$ = glClampColorARB$MH();
        try {
            mh$.invokeExact(target, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawBuffersARB$MH,"glDrawBuffersARB");
    }
    public static void glDrawBuffersARB ( int n,  Addressable bufs) {
        var mh$ = glDrawBuffersARB$MH();
        try {
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawElementsBaseVertex$MH,"glDrawElementsBaseVertex");
    }
    public static void glDrawElementsBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int base_vertex) {
        var mh$ = glDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawRangeElementsBaseVertex$MH,"glDrawRangeElementsBaseVertex");
    }
    public static void glDrawRangeElementsBaseVertex ( int mode,  int start,  int end,  int count,  int type,  Addressable indices,  int base_vertex) {
        var mh$ = glDrawRangeElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawElementsInstancedBaseVertex$MH,"glDrawElementsInstancedBaseVertex");
    }
    public static void glDrawElementsInstancedBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int primcount,  int base_vertex) {
        var mh$ = glDrawElementsInstancedBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glMultiDrawElementsBaseVertex$MH,"glMultiDrawElementsBaseVertex");
    }
    public static void glMultiDrawElementsBaseVertex ( int mode,  Addressable count,  int type,  Addressable indices,  int primcount,  Addressable base_vertex) {
        var mh$ = glMultiDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDrawArraysInstancedARB$MH,"glDrawArraysInstancedARB");
    }
    public static void glDrawArraysInstancedARB ( int mode,  int first,  int count,  int primcount) {
        var mh$ = glDrawArraysInstancedARB$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDrawElementsInstancedARB$MH,"glDrawElementsInstancedARB");
    }
    public static void glDrawElementsInstancedARB ( int mode,  int count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glDrawElementsInstancedARB$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glIsRenderbuffer$MH,"glIsRenderbuffer");
    }
    public static byte glIsRenderbuffer ( int renderbuffer) {
        var mh$ = glIsRenderbuffer$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glBindRenderbuffer$MH,"glBindRenderbuffer");
    }
    public static void glBindRenderbuffer ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbuffer$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDeleteRenderbuffers$MH,"glDeleteRenderbuffers");
    }
    public static void glDeleteRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glGenRenderbuffers$MH,"glGenRenderbuffers");
    }
    public static void glGenRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glRenderbufferStorage$MH,"glRenderbufferStorage");
    }
    public static void glRenderbufferStorage ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorage$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGetRenderbufferParameteriv$MH,"glGetRenderbufferParameteriv");
    }
    public static void glGetRenderbufferParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glIsFramebuffer$MH,"glIsFramebuffer");
    }
    public static byte glIsFramebuffer ( int framebuffer) {
        var mh$ = glIsFramebuffer$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glBindFramebuffer$MH,"glBindFramebuffer");
    }
    public static void glBindFramebuffer ( int target,  int framebuffer) {
        var mh$ = glBindFramebuffer$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glDeleteFramebuffers$MH,"glDeleteFramebuffers");
    }
    public static void glDeleteFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGenFramebuffers$MH,"glGenFramebuffers");
    }
    public static void glGenFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glCheckFramebufferStatus$MH,"glCheckFramebufferStatus");
    }
    public static int glCheckFramebufferStatus ( int target) {
        var mh$ = glCheckFramebufferStatus$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture1D$MH,"glFramebufferTexture1D");
    }
    public static void glFramebufferTexture1D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture2D$MH,"glFramebufferTexture2D");
    }
    public static void glFramebufferTexture2D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture3D$MH,"glFramebufferTexture3D");
    }
    public static void glFramebufferTexture3D ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferRenderbuffer$MH,"glFramebufferRenderbuffer");
    }
    public static void glFramebufferRenderbuffer ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbuffer$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glGetFramebufferAttachmentParameteriv$MH,"glGetFramebufferAttachmentParameteriv");
    }
    public static void glGetFramebufferAttachmentParameteriv ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameteriv$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmap$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glGenerateMipmap$MH,"glGenerateMipmap");
    }
    public static void glGenerateMipmap ( int target) {
        var mh$ = glGenerateMipmap$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glBlitFramebuffer$MH,"glBlitFramebuffer");
    }
    public static void glBlitFramebuffer ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebuffer$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glRenderbufferStorageMultisample$MH,"glRenderbufferStorageMultisample");
    }
    public static void glRenderbufferStorageMultisample ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glFramebufferTextureLayer$MH,"glFramebufferTextureLayer");
    }
    public static void glFramebufferTextureLayer ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayer$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribDivisorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glVertexAttribDivisorARB$MH,"glVertexAttribDivisorARB");
    }
    public static void glVertexAttribDivisorARB ( int index,  int divisor) {
        var mh$ = glVertexAttribDivisorARB$MH();
        try {
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glSampleCoverageARB$MH,"glSampleCoverageARB");
    }
    public static void glSampleCoverageARB ( float value,  byte invert) {
        var mh$ = glSampleCoverageARB$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = glActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = glClientActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = glMultiTexCoord1dARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = glMultiTexCoord1fARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = glMultiTexCoord1iARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = glMultiTexCoord1sARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2dARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2fARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2iARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2sARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glGenQueriesARB$MH,"glGenQueriesARB");
    }
    public static void glGenQueriesARB ( int n,  Addressable ids) {
        var mh$ = glGenQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glDeleteQueriesARB$MH,"glDeleteQueriesARB");
    }
    public static void glDeleteQueriesARB ( int n,  Addressable ids) {
        var mh$ = glDeleteQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glIsQueryARB$MH,"glIsQueryARB");
    }
    public static byte glIsQueryARB ( int id) {
        var mh$ = glIsQueryARB$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glBeginQueryARB$MH,"glBeginQueryARB");
    }
    public static void glBeginQueryARB ( int target,  int id) {
        var mh$ = glBeginQueryARB$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glEndQueryARB$MH,"glEndQueryARB");
    }
    public static void glEndQueryARB ( int target) {
        var mh$ = glEndQueryARB$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryivARB$MH,"glGetQueryivARB");
    }
    public static void glGetQueryivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetQueryivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryObjectivARB$MH,"glGetQueryObjectivARB");
    }
    public static void glGetQueryObjectivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryObjectuivARB$MH,"glGetQueryObjectuivARB");
    }
    public static void glGetQueryObjectuivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectuivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glPointParameterfARB$MH,"glPointParameterfARB");
    }
    public static void glPointParameterfARB ( int pname,  float param) {
        var mh$ = glPointParameterfARB$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glPointParameterfvARB$MH,"glPointParameterfvARB");
    }
    public static void glPointParameterfvARB ( int pname,  Addressable params) {
        var mh$ = glPointParameterfvARB$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glProvokingVertex$MH,"glProvokingVertex");
    }
    public static void glProvokingVertex ( int mode) {
        var mh$ = glProvokingVertex$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glDeleteObjectARB$MH,"glDeleteObjectARB");
    }
    public static void glDeleteObjectARB ( Addressable obj) {
        var mh$ = glDeleteObjectARB$MH();
        try {
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glGetHandleARB$MH,"glGetHandleARB");
    }
    public static MemoryAddress glGetHandleARB ( int pname) {
        var mh$ = glGetHandleARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDetachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glDetachObjectARB$MH,"glDetachObjectARB");
    }
    public static void glDetachObjectARB ( Addressable containerObj,  Addressable attachedObj) {
        var mh$ = glDetachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, attachedObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShaderObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCreateShaderObjectARB$MH,"glCreateShaderObjectARB");
    }
    public static MemoryAddress glCreateShaderObjectARB ( int shaderType) {
        var mh$ = glCreateShaderObjectARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(shaderType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glShaderSourceARB$MH,"glShaderSourceARB");
    }
    public static void glShaderSourceARB ( Addressable shaderObj,  int count,  Addressable string,  Addressable length) {
        var mh$ = glShaderSourceARB$MH();
        try {
            mh$.invokeExact(shaderObj, count, string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileShaderARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCompileShaderARB$MH,"glCompileShaderARB");
    }
    public static void glCompileShaderARB ( Addressable shaderObj) {
        var mh$ = glCompileShaderARB$MH();
        try {
            mh$.invokeExact(shaderObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCreateProgramObjectARB$MH,"glCreateProgramObjectARB");
    }
    public static MemoryAddress glCreateProgramObjectARB () {
        var mh$ = glCreateProgramObjectARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAttachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glAttachObjectARB$MH,"glAttachObjectARB");
    }
    public static void glAttachObjectARB ( Addressable containerObj,  Addressable obj) {
        var mh$ = glAttachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLinkProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glLinkProgramARB$MH,"glLinkProgramARB");
    }
    public static void glLinkProgramARB ( Addressable programObj) {
        var mh$ = glLinkProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUseProgramObjectARB$MH,"glUseProgramObjectARB");
    }
    public static void glUseProgramObjectARB ( Addressable programObj) {
        var mh$ = glUseProgramObjectARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glValidateProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glValidateProgramARB$MH,"glValidateProgramARB");
    }
    public static void glValidateProgramARB ( Addressable programObj) {
        var mh$ = glValidateProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform1fARB$MH,"glUniform1fARB");
    }
    public static void glUniform1fARB ( int location,  float v0) {
        var mh$ = glUniform1fARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform2fARB$MH,"glUniform2fARB");
    }
    public static void glUniform2fARB ( int location,  float v0,  float v1) {
        var mh$ = glUniform2fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform3fARB$MH,"glUniform3fARB");
    }
    public static void glUniform3fARB ( int location,  float v0,  float v1,  float v2) {
        var mh$ = glUniform3fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform4fARB$MH,"glUniform4fARB");
    }
    public static void glUniform4fARB ( int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glUniform4fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform1iARB$MH,"glUniform1iARB");
    }
    public static void glUniform1iARB ( int location,  int v0) {
        var mh$ = glUniform1iARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform2iARB$MH,"glUniform2iARB");
    }
    public static void glUniform2iARB ( int location,  int v0,  int v1) {
        var mh$ = glUniform2iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform3iARB$MH,"glUniform3iARB");
    }
    public static void glUniform3iARB ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform4iARB$MH,"glUniform4iARB");
    }
    public static void glUniform4iARB ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform1fvARB$MH,"glUniform1fvARB");
    }
    public static void glUniform1fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform2fvARB$MH,"glUniform2fvARB");
    }
    public static void glUniform2fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform3fvARB$MH,"glUniform3fvARB");
    }
    public static void glUniform3fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform4fvARB$MH,"glUniform4fvARB");
    }
    public static void glUniform4fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform1ivARB$MH,"glUniform1ivARB");
    }
    public static void glUniform1ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform2ivARB$MH,"glUniform2ivARB");
    }
    public static void glUniform2ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform3ivARB$MH,"glUniform3ivARB");
    }
    public static void glUniform3ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform4ivARB$MH,"glUniform4ivARB");
    }
    public static void glUniform4ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix2fvARB$MH,"glUniformMatrix2fvARB");
    }
    public static void glUniformMatrix2fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix3fvARB$MH,"glUniformMatrix3fvARB");
    }
    public static void glUniformMatrix3fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix4fvARB$MH,"glUniformMatrix4fvARB");
    }
    public static void glUniformMatrix4fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetObjectParameterfvARB$MH,"glGetObjectParameterfvARB");
    }
    public static void glGetObjectParameterfvARB ( Addressable obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterfvARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetObjectParameterivARB$MH,"glGetObjectParameterivARB");
    }
    public static void glGetObjectParameterivARB ( Addressable obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInfoLogARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetInfoLogARB$MH,"glGetInfoLogARB");
    }
    public static void glGetInfoLogARB ( Addressable obj,  int maxLength,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetInfoLogARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttachedObjectsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetAttachedObjectsARB$MH,"glGetAttachedObjectsARB");
    }
    public static void glGetAttachedObjectsARB ( Addressable containerObj,  int maxCount,  Addressable count,  Addressable obj) {
        var mh$ = glGetAttachedObjectsARB$MH();
        try {
            mh$.invokeExact(containerObj, maxCount, count, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformLocationARB$MH,"glGetUniformLocationARB");
    }
    public static int glGetUniformLocationARB ( Addressable programObj,  Addressable name) {
        var mh$ = glGetUniformLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetActiveUniformARB$MH,"glGetActiveUniformARB");
    }
    public static void glGetActiveUniformARB ( Addressable programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveUniformARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformfvARB$MH,"glGetUniformfvARB");
    }
    public static void glGetUniformfvARB ( Addressable programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformfvARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformivARB$MH,"glGetUniformivARB");
    }
    public static void glGetUniformivARB ( Addressable programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformivARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetShaderSourceARB$MH,"glGetShaderSourceARB");
    }
    public static void glGetShaderSourceARB ( Addressable obj,  int maxLength,  Addressable length,  Addressable source) {
        var mh$ = glGetShaderSourceARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFenceSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glFenceSync$MH,"glFenceSync");
    }
    public static MemoryAddress glFenceSync ( int condition,  int flags) {
        var mh$ = glFenceSync$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(condition, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIsSync$MH,"glIsSync");
    }
    public static byte glIsSync ( Addressable sync) {
        var mh$ = glIsSync$MH();
        try {
            return (byte)mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glDeleteSync$MH,"glDeleteSync");
    }
    public static void glDeleteSync ( Addressable sync) {
        var mh$ = glDeleteSync$MH();
        try {
            mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glClientWaitSync$MH,"glClientWaitSync");
    }
    public static int glClientWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glClientWaitSync$MH();
        try {
            return (int)mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glWaitSync$MH,"glWaitSync");
    }
    public static void glWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glWaitSync$MH();
        try {
            mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInteger64v$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glGetInteger64v$MH,"glGetInteger64v");
    }
    public static void glGetInteger64v ( int pname,  Addressable params) {
        var mh$ = glGetInteger64v$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSynciv$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glGetSynciv$MH,"glGetSynciv");
    }
    public static void glGetSynciv ( Addressable sync,  int pname,  int bufSize,  Addressable length,  Addressable values) {
        var mh$ = glGetSynciv$MH();
        try {
            mh$.invokeExact(sync, pname, bufSize, length, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage3DARB$MH,"glCompressedTexImage3DARB");
    }
    public static void glCompressedTexImage3DARB ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage2DARB$MH,"glCompressedTexImage2DARB");
    }
    public static void glCompressedTexImage2DARB ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage1DARB$MH,"glCompressedTexImage1DARB");
    }
    public static void glCompressedTexImage1DARB ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexSubImage3DARB$MH,"glCompressedTexSubImage3DARB");
    }
    public static void glCompressedTexSubImage3DARB ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexSubImage2DARB$MH,"glCompressedTexSubImage2DARB");
    }
    public static void glCompressedTexSubImage2DARB ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glCompressedTexSubImage1DARB$MH,"glCompressedTexSubImage1DARB");
    }
    public static void glCompressedTexSubImage1DARB ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glGetCompressedTexImageARB$MH,"glGetCompressedTexImageARB");
    }
    public static void glGetCompressedTexImageARB ( int target,  int level,  Addressable data) {
        var mh$ = glGetCompressedTexImageARB$MH();
        try {
            mh$.invokeExact(target, level, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glLoadTransposeMatrixfARB$MH,"glLoadTransposeMatrixfARB");
    }
    public static void glLoadTransposeMatrixfARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glLoadTransposeMatrixdARB$MH,"glLoadTransposeMatrixdARB");
    }
    public static void glLoadTransposeMatrixdARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glMultTransposeMatrixfARB$MH,"glMultTransposeMatrixfARB");
    }
    public static void glMultTransposeMatrixfARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glMultTransposeMatrixdARB$MH,"glMultTransposeMatrixdARB");
    }
    public static void glMultTransposeMatrixdARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightbvARB$MH,"glWeightbvARB");
    }
    public static void glWeightbvARB ( int size,  Addressable weights) {
        var mh$ = glWeightbvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightsvARB$MH,"glWeightsvARB");
    }
    public static void glWeightsvARB ( int size,  Addressable weights) {
        var mh$ = glWeightsvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightivARB$MH,"glWeightivARB");
    }
    public static void glWeightivARB ( int size,  Addressable weights) {
        var mh$ = glWeightivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightfvARB$MH,"glWeightfvARB");
    }
    public static void glWeightfvARB ( int size,  Addressable weights) {
        var mh$ = glWeightfvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightdvARB$MH,"glWeightdvARB");
    }
    public static void glWeightdvARB ( int size,  Addressable weights) {
        var mh$ = glWeightdvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightubvARB$MH,"glWeightubvARB");
    }
    public static void glWeightubvARB ( int size,  Addressable weights) {
        var mh$ = glWeightubvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightusvARB$MH,"glWeightusvARB");
    }
    public static void glWeightusvARB ( int size,  Addressable weights) {
        var mh$ = glWeightusvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightuivARB$MH,"glWeightuivARB");
    }
    public static void glWeightuivARB ( int size,  Addressable weights) {
        var mh$ = glWeightuivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightPointerARB$MH,"glWeightPointerARB");
    }
    public static void glWeightPointerARB ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glWeightPointerARB$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBlendARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glVertexBlendARB$MH,"glVertexBlendARB");
    }
    public static void glVertexBlendARB ( int count) {
        var mh$ = glVertexBlendARB$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glBindBufferARB$MH,"glBindBufferARB");
    }
    public static void glBindBufferARB ( int target,  int buffer) {
        var mh$ = glBindBufferARB$MH();
        try {
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glDeleteBuffersARB$MH,"glDeleteBuffersARB");
    }
    public static void glDeleteBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glDeleteBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glGenBuffersARB$MH,"glGenBuffersARB");
    }
    public static void glGenBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glGenBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glIsBufferARB$MH,"glIsBufferARB");
    }
    public static byte glIsBufferARB ( int buffer) {
        var mh$ = glIsBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glBufferDataARB$MH,"glBufferDataARB");
    }
    public static void glBufferDataARB ( int target,  long size,  Addressable data,  int usage) {
        var mh$ = glBufferDataARB$MH();
        try {
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glBufferSubDataARB$MH,"glBufferSubDataARB");
    }
    public static void glBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glGetBufferSubDataARB$MH,"glGetBufferSubDataARB");
    }
    public static void glGetBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glGetBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glMapBufferARB$MH,"glMapBufferARB");
    }
    public static MemoryAddress glMapBufferARB ( int target,  int access) {
        var mh$ = glMapBufferARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glUnmapBufferARB$MH,"glUnmapBufferARB");
    }
    public static byte glUnmapBufferARB ( int target) {
        var mh$ = glUnmapBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGetBufferParameterivARB$MH,"glGetBufferParameterivARB");
    }
    public static void glGetBufferParameterivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameterivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGetBufferPointervARB$MH,"glGetBufferPointervARB");
    }
    public static void glGetBufferPointervARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferPointervARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glBindProgramARB$MH,"glBindProgramARB");
    }
    public static void glBindProgramARB ( int target,  int program) {
        var mh$ = glBindProgramARB$MH();
        try {
            mh$.invokeExact(target, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glDeleteProgramsARB$MH,"glDeleteProgramsARB");
    }
    public static void glDeleteProgramsARB ( int n,  Addressable programs) {
        var mh$ = glDeleteProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGenProgramsARB$MH,"glGenProgramsARB");
    }
    public static void glGenProgramsARB ( int n,  Addressable programs) {
        var mh$ = glGenProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glIsProgramARB$MH,"glIsProgramARB");
    }
    public static byte glIsProgramARB ( int program) {
        var mh$ = glIsProgramARB$MH();
        try {
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4dARB$MH,"glProgramEnvParameter4dARB");
    }
    public static void glProgramEnvParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramEnvParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4dvARB$MH,"glProgramEnvParameter4dvARB");
    }
    public static void glProgramEnvParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4fARB$MH,"glProgramEnvParameter4fARB");
    }
    public static void glProgramEnvParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramEnvParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4fvARB$MH,"glProgramEnvParameter4fvARB");
    }
    public static void glProgramEnvParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramLocalParameter4dARB$MH,"glProgramLocalParameter4dARB");
    }
    public static void glProgramLocalParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramLocalParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4dvARB$MH,"glProgramLocalParameter4dvARB");
    }
    public static void glProgramLocalParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4fARB$MH,"glProgramLocalParameter4fARB");
    }
    public static void glProgramLocalParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramLocalParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4fvARB$MH,"glProgramLocalParameter4fvARB");
    }
    public static void glProgramLocalParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glGetProgramEnvParameterdvARB$MH,"glGetProgramEnvParameterdvARB");
    }
    public static void glGetProgramEnvParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glGetProgramEnvParameterfvARB$MH,"glGetProgramEnvParameterfvARB");
    }
    public static void glGetProgramEnvParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramEnvParameters4fvEXT$MH,"glProgramEnvParameters4fvEXT");
    }
    public static void glProgramEnvParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramEnvParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glProgramLocalParameters4fvEXT$MH,"glProgramLocalParameters4fvEXT");
    }
    public static void glProgramLocalParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramLocalParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramLocalParameterdvARB$MH,"glGetProgramLocalParameterdvARB");
    }
    public static void glGetProgramLocalParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramLocalParameterfvARB$MH,"glGetProgramLocalParameterfvARB");
    }
    public static void glGetProgramLocalParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glProgramStringARB$MH,"glProgramStringARB");
    }
    public static void glProgramStringARB ( int target,  int format,  int len,  Addressable string) {
        var mh$ = glProgramStringARB$MH();
        try {
            mh$.invokeExact(target, format, len, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramStringARB$MH,"glGetProgramStringARB");
    }
    public static void glGetProgramStringARB ( int target,  int pname,  Addressable string) {
        var mh$ = glGetProgramStringARB$MH();
        try {
            mh$.invokeExact(target, pname, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramivARB$MH,"glGetProgramivARB");
    }
    public static void glGetProgramivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetProgramivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glBindAttribLocationARB$MH,"glBindAttribLocationARB");
    }
    public static void glBindAttribLocationARB ( Addressable programObj,  int index,  Addressable name) {
        var mh$ = glBindAttribLocationARB$MH();
        try {
            mh$.invokeExact(programObj, index, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveAttribARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glGetActiveAttribARB$MH,"glGetActiveAttribARB");
    }
    public static void glGetActiveAttribARB ( Addressable programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveAttribARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glGetAttribLocationARB$MH,"glGetAttribLocationARB");
    }
    public static int glGetAttribLocationARB ( Addressable programObj,  Addressable name) {
        var mh$ = glGetAttribLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1dARB$MH,"glVertexAttrib1dARB");
    }
    public static void glVertexAttrib1dARB ( int index,  double x) {
        var mh$ = glVertexAttrib1dARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1dvARB$MH,"glVertexAttrib1dvARB");
    }
    public static void glVertexAttrib1dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1fARB$MH,"glVertexAttrib1fARB");
    }
    public static void glVertexAttrib1fARB ( int index,  float x) {
        var mh$ = glVertexAttrib1fARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1fvARB$MH,"glVertexAttrib1fvARB");
    }
    public static void glVertexAttrib1fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1sARB$MH,"glVertexAttrib1sARB");
    }
    public static void glVertexAttrib1sARB ( int index,  short x) {
        var mh$ = glVertexAttrib1sARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1svARB$MH,"glVertexAttrib1svARB");
    }
    public static void glVertexAttrib1svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2dARB$MH,"glVertexAttrib2dARB");
    }
    public static void glVertexAttrib2dARB ( int index,  double x,  double y) {
        var mh$ = glVertexAttrib2dARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2dvARB$MH,"glVertexAttrib2dvARB");
    }
    public static void glVertexAttrib2dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2fARB$MH,"glVertexAttrib2fARB");
    }
    public static void glVertexAttrib2fARB ( int index,  float x,  float y) {
        var mh$ = glVertexAttrib2fARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2fvARB$MH,"glVertexAttrib2fvARB");
    }
    public static void glVertexAttrib2fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2sARB$MH,"glVertexAttrib2sARB");
    }
    public static void glVertexAttrib2sARB ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2sARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2svARB$MH,"glVertexAttrib2svARB");
    }
    public static void glVertexAttrib2svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3dARB$MH,"glVertexAttrib3dARB");
    }
    public static void glVertexAttrib3dARB ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttrib3dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3dvARB$MH,"glVertexAttrib3dvARB");
    }
    public static void glVertexAttrib3dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3fARB$MH,"glVertexAttrib3fARB");
    }
    public static void glVertexAttrib3fARB ( int index,  float x,  float y,  float z) {
        var mh$ = glVertexAttrib3fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3fvARB$MH,"glVertexAttrib3fvARB");
    }
    public static void glVertexAttrib3fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3sARB$MH,"glVertexAttrib3sARB");
    }
    public static void glVertexAttrib3sARB ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3svARB$MH,"glVertexAttrib3svARB");
    }
    public static void glVertexAttrib3svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NbvARB$MH,"glVertexAttrib4NbvARB");
    }
    public static void glVertexAttrib4NbvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NbvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NivARB$MH,"glVertexAttrib4NivARB");
    }
    public static void glVertexAttrib4NivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NsvARB$MH,"glVertexAttrib4NsvARB");
    }
    public static void glVertexAttrib4NsvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NsvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NubARB$MH,"glVertexAttrib4NubARB");
    }
    public static void glVertexAttrib4NubARB ( int index,  byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertexAttrib4NubARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NubvARB$MH,"glVertexAttrib4NubvARB");
    }
    public static void glVertexAttrib4NubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NuivARB$MH,"glVertexAttrib4NuivARB");
    }
    public static void glVertexAttrib4NuivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NuivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NusvARB$MH,"glVertexAttrib4NusvARB");
    }
    public static void glVertexAttrib4NusvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NusvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4bvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4bvARB$MH,"glVertexAttrib4bvARB");
    }
    public static void glVertexAttrib4bvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4bvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4dARB$MH,"glVertexAttrib4dARB");
    }
    public static void glVertexAttrib4dARB ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttrib4dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4dvARB$MH,"glVertexAttrib4dvARB");
    }
    public static void glVertexAttrib4dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4fARB$MH,"glVertexAttrib4fARB");
    }
    public static void glVertexAttrib4fARB ( int index,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexAttrib4fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4fvARB$MH,"glVertexAttrib4fvARB");
    }
    public static void glVertexAttrib4fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4ivARB$MH,"glVertexAttrib4ivARB");
    }
    public static void glVertexAttrib4ivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4sARB$MH,"glVertexAttrib4sARB");
    }
    public static void glVertexAttrib4sARB ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4svARB$MH,"glVertexAttrib4svARB");
    }
    public static void glVertexAttrib4svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4ubvARB$MH,"glVertexAttrib4ubvARB");
    }
    public static void glVertexAttrib4ubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4uivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4uivARB$MH,"glVertexAttrib4uivARB");
    }
    public static void glVertexAttrib4uivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4uivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4usvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4usvARB$MH,"glVertexAttrib4usvARB");
    }
    public static void glVertexAttrib4usvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4usvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttribPointerARB$MH,"glVertexAttribPointerARB");
    }
    public static void glVertexAttribPointerARB ( int index,  int size,  int type,  byte normalized,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribPointerARB$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glDisableVertexAttribArrayARB$MH,"glDisableVertexAttribArrayARB");
    }
    public static void glDisableVertexAttribArrayARB ( int index) {
        var mh$ = glDisableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glEnableVertexAttribArrayARB$MH,"glEnableVertexAttribArrayARB");
    }
    public static void glEnableVertexAttribArrayARB ( int index) {
        var mh$ = glEnableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribPointervARB$MH,"glGetVertexAttribPointervARB");
    }
    public static void glGetVertexAttribPointervARB ( int index,  int pname,  Addressable pointer) {
        var mh$ = glGetVertexAttribPointervARB$MH();
        try {
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribdvARB$MH,"glGetVertexAttribdvARB");
    }
    public static void glGetVertexAttribdvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribdvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribfvARB$MH,"glGetVertexAttribfvARB");
    }
    public static void glGetVertexAttribfvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribfvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribivARB$MH,"glGetVertexAttribivARB");
    }
    public static void glGetVertexAttribivARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribivARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glWindowPos2dARB$MH,"glWindowPos2dARB");
    }
    public static void glWindowPos2dARB ( double x,  double y) {
        var mh$ = glWindowPos2dARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glWindowPos2dvARB$MH,"glWindowPos2dvARB");
    }
    public static void glWindowPos2dvARB ( Addressable p) {
        var mh$ = glWindowPos2dvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2fARB$MH,"glWindowPos2fARB");
    }
    public static void glWindowPos2fARB ( float x,  float y) {
        var mh$ = glWindowPos2fARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2fvARB$MH,"glWindowPos2fvARB");
    }
    public static void glWindowPos2fvARB ( Addressable p) {
        var mh$ = glWindowPos2fvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2iARB$MH,"glWindowPos2iARB");
    }
    public static void glWindowPos2iARB ( int x,  int y) {
        var mh$ = glWindowPos2iARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2ivARB$MH,"glWindowPos2ivARB");
    }
    public static void glWindowPos2ivARB ( Addressable p) {
        var mh$ = glWindowPos2ivARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2sARB$MH,"glWindowPos2sARB");
    }
    public static void glWindowPos2sARB ( short x,  short y) {
        var mh$ = glWindowPos2sARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2svARB$MH,"glWindowPos2svARB");
    }
    public static void glWindowPos2svARB ( Addressable p) {
        var mh$ = glWindowPos2svARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3dARB$MH,"glWindowPos3dARB");
    }
    public static void glWindowPos3dARB ( double x,  double y,  double z) {
        var mh$ = glWindowPos3dARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3dvARB$MH,"glWindowPos3dvARB");
    }
    public static void glWindowPos3dvARB ( Addressable p) {
        var mh$ = glWindowPos3dvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3fARB$MH,"glWindowPos3fARB");
    }
    public static void glWindowPos3fARB ( float x,  float y,  float z) {
        var mh$ = glWindowPos3fARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3fvARB$MH,"glWindowPos3fvARB");
    }
    public static void glWindowPos3fvARB ( Addressable p) {
        var mh$ = glWindowPos3fvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3iARB$MH,"glWindowPos3iARB");
    }
    public static void glWindowPos3iARB ( int x,  int y,  int z) {
        var mh$ = glWindowPos3iARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3ivARB$MH,"glWindowPos3ivARB");
    }
    public static void glWindowPos3ivARB ( Addressable p) {
        var mh$ = glWindowPos3ivARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glWindowPos3sARB$MH,"glWindowPos3sARB");
    }
    public static void glWindowPos3sARB ( short x,  short y,  short z) {
        var mh$ = glWindowPos3sARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glWindowPos3svARB$MH,"glWindowPos3svARB");
    }
    public static void glWindowPos3svARB ( Addressable p) {
        var mh$ = glWindowPos3svARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glUniformBufferEXT$MH,"glUniformBufferEXT");
    }
    public static void glUniformBufferEXT ( int program,  int location,  int buffer) {
        var mh$ = glUniformBufferEXT$MH();
        try {
            mh$.invokeExact(program, location, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformBufferSizeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glGetUniformBufferSizeEXT$MH,"glGetUniformBufferSizeEXT");
    }
    public static int glGetUniformBufferSizeEXT ( int program,  int location) {
        var mh$ = glGetUniformBufferSizeEXT$MH();
        try {
            return (int)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glGetUniformOffsetEXT$MH,"glGetUniformOffsetEXT");
    }
    public static long glGetUniformOffsetEXT ( int program,  int location) {
        var mh$ = glGetUniformOffsetEXT$MH();
        try {
            return (long)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glBlendColorEXT$MH,"glBlendColorEXT");
    }
    public static void glBlendColorEXT ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColorEXT$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendEquationSeparateEXT$MH,"glBlendEquationSeparateEXT");
    }
    public static void glBlendEquationSeparateEXT ( int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparateEXT$MH();
        try {
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendFuncSeparateEXT$MH,"glBlendFuncSeparateEXT");
    }
    public static void glBlendFuncSeparateEXT ( int sfactorRGB,  int dfactorRGB,  int sfactorAlpha,  int dfactorAlpha) {
        var mh$ = glBlendFuncSeparateEXT$MH();
        try {
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendEquationEXT$MH,"glBlendEquationEXT");
    }
    public static void glBlendEquationEXT ( int mode) {
        var mh$ = glBlendEquationEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLabelObjectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glLabelObjectEXT$MH,"glLabelObjectEXT");
    }
    public static void glLabelObjectEXT ( int type,  int object,  int length,  Addressable label) {
        var mh$ = glLabelObjectEXT$MH();
        try {
            mh$.invokeExact(type, object, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetObjectLabelEXT$MH,"glGetObjectLabelEXT");
    }
    public static void glGetObjectLabelEXT ( int type,  int object,  int bufSize,  Addressable length,  Addressable label) {
        var mh$ = glGetObjectLabelEXT$MH();
        try {
            mh$.invokeExact(type, object, bufSize, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInsertEventMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glInsertEventMarkerEXT$MH,"glInsertEventMarkerEXT");
    }
    public static void glInsertEventMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glInsertEventMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPushGroupMarkerEXT$MH,"glPushGroupMarkerEXT");
    }
    public static void glPushGroupMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glPushGroupMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPopGroupMarkerEXT$MH,"glPopGroupMarkerEXT");
    }
    public static void glPopGroupMarkerEXT () {
        var mh$ = glPopGroupMarkerEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthBoundsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glDepthBoundsEXT$MH,"glDepthBoundsEXT");
    }
    public static void glDepthBoundsEXT ( double zmin,  double zmax) {
        var mh$ = glDepthBoundsEXT$MH();
        try {
            mh$.invokeExact(zmin, zmax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaskIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glColorMaskIndexedEXT$MH,"glColorMaskIndexedEXT");
    }
    public static void glColorMaskIndexedEXT ( int index,  byte r,  byte g,  byte b,  byte a) {
        var mh$ = glColorMaskIndexedEXT$MH();
        try {
            mh$.invokeExact(index, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glEnableIndexedEXT$MH,"glEnableIndexedEXT");
    }
    public static void glEnableIndexedEXT ( int target,  int index) {
        var mh$ = glEnableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glDisableIndexedEXT$MH,"glDisableIndexedEXT");
    }
    public static void glDisableIndexedEXT ( int target,  int index) {
        var mh$ = glDisableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabledIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glIsEnabledIndexedEXT$MH,"glIsEnabledIndexedEXT");
    }
    public static byte glIsEnabledIndexedEXT ( int target,  int index) {
        var mh$ = glIsEnabledIndexedEXT$MH();
        try {
            return (byte)mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glDrawRangeElementsEXT$MH,"glDrawRangeElementsEXT");
    }
    public static void glDrawRangeElementsEXT ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElementsEXT$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoordfEXT$MH,"glFogCoordfEXT");
    }
    public static void glFogCoordfEXT ( float coord) {
        var mh$ = glFogCoordfEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoordfvEXT$MH,"glFogCoordfvEXT");
    }
    public static void glFogCoordfvEXT ( Addressable coord) {
        var mh$ = glFogCoordfvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoorddEXT$MH,"glFogCoorddEXT");
    }
    public static void glFogCoorddEXT ( double coord) {
        var mh$ = glFogCoorddEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoorddvEXT$MH,"glFogCoorddvEXT");
    }
    public static void glFogCoorddvEXT ( Addressable coord) {
        var mh$ = glFogCoorddvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glFogCoordPointerEXT$MH,"glFogCoordPointerEXT");
    }
    public static void glFogCoordPointerEXT ( int type,  int stride,  Addressable pointer) {
        var mh$ = glFogCoordPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glBlitFramebufferEXT$MH,"glBlitFramebufferEXT");
    }
    public static void glBlitFramebufferEXT ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebufferEXT$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glRenderbufferStorageMultisampleEXT$MH,"glRenderbufferStorageMultisampleEXT");
    }
    public static void glRenderbufferStorageMultisampleEXT ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisampleEXT$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glIsRenderbufferEXT$MH,"glIsRenderbufferEXT");
    }
    public static byte glIsRenderbufferEXT ( int renderbuffer) {
        var mh$ = glIsRenderbufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glBindRenderbufferEXT$MH,"glBindRenderbufferEXT");
    }
    public static void glBindRenderbufferEXT ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glDeleteRenderbuffersEXT$MH,"glDeleteRenderbuffersEXT");
    }
    public static void glDeleteRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glGenRenderbuffersEXT$MH,"glGenRenderbuffersEXT");
    }
    public static void glGenRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glRenderbufferStorageEXT$MH,"glRenderbufferStorageEXT");
    }
    public static void glRenderbufferStorageEXT ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glGetRenderbufferParameterivEXT$MH,"glGetRenderbufferParameterivEXT");
    }
    public static void glGetRenderbufferParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glIsFramebufferEXT$MH,"glIsFramebufferEXT");
    }
    public static byte glIsFramebufferEXT ( int framebuffer) {
        var mh$ = glIsFramebufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glBindFramebufferEXT$MH,"glBindFramebufferEXT");
    }
    public static void glBindFramebufferEXT ( int target,  int framebuffer) {
        var mh$ = glBindFramebufferEXT$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glDeleteFramebuffersEXT$MH,"glDeleteFramebuffersEXT");
    }
    public static void glDeleteFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGenFramebuffersEXT$MH,"glGenFramebuffersEXT");
    }
    public static void glGenFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatusEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glCheckFramebufferStatusEXT$MH,"glCheckFramebufferStatusEXT");
    }
    public static int glCheckFramebufferStatusEXT ( int target) {
        var mh$ = glCheckFramebufferStatusEXT$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture1DEXT$MH,"glFramebufferTexture1DEXT");
    }
    public static void glFramebufferTexture1DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture2DEXT$MH,"glFramebufferTexture2DEXT");
    }
    public static void glFramebufferTexture2DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture3DEXT$MH,"glFramebufferTexture3DEXT");
    }
    public static void glFramebufferTexture3DEXT ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferRenderbufferEXT$MH,"glFramebufferRenderbufferEXT");
    }
    public static void glFramebufferRenderbufferEXT ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetFramebufferAttachmentParameterivEXT$MH,"glGetFramebufferAttachmentParameterivEXT");
    }
    public static void glGetFramebufferAttachmentParameterivEXT ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameterivEXT$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGenerateMipmapEXT$MH,"glGenerateMipmapEXT");
    }
    public static void glGenerateMipmapEXT ( int target) {
        var mh$ = glGenerateMipmapEXT$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glProgramParameteriEXT$MH,"glProgramParameteriEXT");
    }
    public static void glProgramParameteriEXT ( int program,  int pname,  int value) {
        var mh$ = glProgramParameteriEXT$MH();
        try {
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureEXT$MH,"glFramebufferTextureEXT");
    }
    public static void glFramebufferTextureEXT ( int target,  int attachment,  int texture,  int level) {
        var mh$ = glFramebufferTextureEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureFaceEXT$MH,"glFramebufferTextureFaceEXT");
    }
    public static void glFramebufferTextureFaceEXT ( int target,  int attachment,  int texture,  int level,  int face) {
        var mh$ = glFramebufferTextureFaceEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureLayerEXT$MH,"glFramebufferTextureLayerEXT");
    }
    public static void glFramebufferTextureLayerEXT ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayerEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI1iEXT$MH,"glVertexAttribI1iEXT");
    }
    public static void glVertexAttribI1iEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1iEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI2iEXT$MH,"glVertexAttribI2iEXT");
    }
    public static void glVertexAttribI2iEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2iEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI3iEXT$MH,"glVertexAttribI3iEXT");
    }
    public static void glVertexAttribI3iEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI4iEXT$MH,"glVertexAttribI4iEXT");
    }
    public static void glVertexAttribI4iEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI1uiEXT$MH,"glVertexAttribI1uiEXT");
    }
    public static void glVertexAttribI1uiEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1uiEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI2uiEXT$MH,"glVertexAttribI2uiEXT");
    }
    public static void glVertexAttribI2uiEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI3uiEXT$MH,"glVertexAttribI3uiEXT");
    }
    public static void glVertexAttribI3uiEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI4uiEXT$MH,"glVertexAttribI4uiEXT");
    }
    public static void glVertexAttribI4uiEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI1ivEXT$MH,"glVertexAttribI1ivEXT");
    }
    public static void glVertexAttribI1ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI2ivEXT$MH,"glVertexAttribI2ivEXT");
    }
    public static void glVertexAttribI2ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI3ivEXT$MH,"glVertexAttribI3ivEXT");
    }
    public static void glVertexAttribI3ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI4ivEXT$MH,"glVertexAttribI4ivEXT");
    }
    public static void glVertexAttribI4ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI1uivEXT$MH,"glVertexAttribI1uivEXT");
    }
    public static void glVertexAttribI1uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI2uivEXT$MH,"glVertexAttribI2uivEXT");
    }
    public static void glVertexAttribI2uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI3uivEXT$MH,"glVertexAttribI3uivEXT");
    }
    public static void glVertexAttribI3uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4uivEXT$MH,"glVertexAttribI4uivEXT");
    }
    public static void glVertexAttribI4uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4bvEXT$MH,"glVertexAttribI4bvEXT");
    }
    public static void glVertexAttribI4bvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4bvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4svEXT$MH,"glVertexAttribI4svEXT");
    }
    public static void glVertexAttribI4svEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4svEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribI4ubvEXT$MH,"glVertexAttribI4ubvEXT");
    }
    public static void glVertexAttribI4ubvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ubvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribI4usvEXT$MH,"glVertexAttribI4usvEXT");
    }
    public static void glVertexAttribI4usvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4usvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribIPointerEXT$MH,"glVertexAttribIPointerEXT");
    }
    public static void glVertexAttribIPointerEXT ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribIPointerEXT$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glGetVertexAttribIivEXT$MH,"glGetVertexAttribIivEXT");
    }
    public static void glGetVertexAttribIivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glGetVertexAttribIuivEXT$MH,"glGetVertexAttribIuivEXT");
    }
    public static void glGetVertexAttribIuivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIuivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glUniform1uiEXT$MH,"glUniform1uiEXT");
    }
    public static void glUniform1uiEXT ( int location,  int v0) {
        var mh$ = glUniform1uiEXT$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform2uiEXT$MH,"glUniform2uiEXT");
    }
    public static void glUniform2uiEXT ( int location,  int v0,  int v1) {
        var mh$ = glUniform2uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform3uiEXT$MH,"glUniform3uiEXT");
    }
    public static void glUniform3uiEXT ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform4uiEXT$MH,"glUniform4uiEXT");
    }
    public static void glUniform4uiEXT ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform1uivEXT$MH,"glUniform1uivEXT");
    }
    public static void glUniform1uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform2uivEXT$MH,"glUniform2uivEXT");
    }
    public static void glUniform2uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform3uivEXT$MH,"glUniform3uivEXT");
    }
    public static void glUniform3uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glUniform4uivEXT$MH,"glUniform4uivEXT");
    }
    public static void glUniform4uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glGetUniformuivEXT$MH,"glGetUniformuivEXT");
    }
    public static void glGetUniformuivEXT ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformuivEXT$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glBindFragDataLocationEXT$MH,"glBindFragDataLocationEXT");
    }
    public static void glBindFragDataLocationEXT ( int program,  int colorNumber,  Addressable name) {
        var mh$ = glBindFragDataLocationEXT$MH();
        try {
            mh$.invokeExact(program, colorNumber, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glGetFragDataLocationEXT$MH,"glGetFragDataLocationEXT");
    }
    public static int glGetFragDataLocationEXT ( int program,  Addressable name) {
        var mh$ = glGetFragDataLocationEXT$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMultiDrawArraysEXT$MH,"glMultiDrawArraysEXT");
    }
    public static void glMultiDrawArraysEXT ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawArraysEXT$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMultiDrawElementsEXT$MH,"glMultiDrawElementsEXT");
    }
    public static void glMultiDrawElementsEXT ( int mode,  Addressable count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glMultiDrawElementsEXT$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertexEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glProvokingVertexEXT$MH,"glProvokingVertexEXT");
    }
    public static void glProvokingVertexEXT ( int mode) {
        var mh$ = glProvokingVertexEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3bEXT$MH,"glSecondaryColor3bEXT");
    }
    public static void glSecondaryColor3bEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3bEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3bvEXT$MH,"glSecondaryColor3bvEXT");
    }
    public static void glSecondaryColor3bvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3bvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3dEXT$MH,"glSecondaryColor3dEXT");
    }
    public static void glSecondaryColor3dEXT ( double red,  double green,  double blue) {
        var mh$ = glSecondaryColor3dEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3dvEXT$MH,"glSecondaryColor3dvEXT");
    }
    public static void glSecondaryColor3dvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3dvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3fEXT$MH,"glSecondaryColor3fEXT");
    }
    public static void glSecondaryColor3fEXT ( float red,  float green,  float blue) {
        var mh$ = glSecondaryColor3fEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3fvEXT$MH,"glSecondaryColor3fvEXT");
    }
    public static void glSecondaryColor3fvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3fvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3iEXT$MH,"glSecondaryColor3iEXT");
    }
    public static void glSecondaryColor3iEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3iEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3ivEXT$MH,"glSecondaryColor3ivEXT");
    }
    public static void glSecondaryColor3ivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3sEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3sEXT$MH,"glSecondaryColor3sEXT");
    }
    public static void glSecondaryColor3sEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3sEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3svEXT$MH,"glSecondaryColor3svEXT");
    }
    public static void glSecondaryColor3svEXT ( Addressable v) {
        var mh$ = glSecondaryColor3svEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3ubEXT$MH,"glSecondaryColor3ubEXT");
    }
    public static void glSecondaryColor3ubEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3ubEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3ubvEXT$MH,"glSecondaryColor3ubvEXT");
    }
    public static void glSecondaryColor3ubvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ubvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3uiEXT$MH,"glSecondaryColor3uiEXT");
    }
    public static void glSecondaryColor3uiEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3uiEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3uivEXT$MH,"glSecondaryColor3uivEXT");
    }
    public static void glSecondaryColor3uivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3uivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3usEXT$MH,"glSecondaryColor3usEXT");
    }
    public static void glSecondaryColor3usEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3usEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3usvEXT$MH,"glSecondaryColor3usvEXT");
    }
    public static void glSecondaryColor3usvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3usvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColorPointerEXT$MH,"glSecondaryColorPointerEXT");
    }
    public static void glSecondaryColorPointerEXT ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glSecondaryColorPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveStencilFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glActiveStencilFaceEXT$MH,"glActiveStencilFaceEXT");
    }
    public static void glActiveStencilFaceEXT ( int face) {
        var mh$ = glActiveStencilFaceEXT$MH();
        try {
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glClearColorIiEXT$MH,"glClearColorIiEXT");
    }
    public static void glClearColorIiEXT ( int r,  int g,  int b,  int a) {
        var mh$ = glClearColorIiEXT$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIuiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glClearColorIuiEXT$MH,"glClearColorIuiEXT");
    }
    public static void glClearColorIuiEXT ( int r,  int g,  int b,  int a) {
        var mh$ = glClearColorIuiEXT$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexParameterIivEXT$MH,"glTexParameterIivEXT");
    }
    public static void glTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexParameterIuivEXT$MH,"glTexParameterIuivEXT");
    }
    public static void glTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glGetTexParameterIivEXT$MH,"glGetTexParameterIivEXT");
    }
    public static void glGetTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetTexParameterIuivEXT$MH,"glGetTexParameterIuivEXT");
    }
    public static void glGetTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjecti64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetQueryObjecti64vEXT$MH,"glGetQueryObjecti64vEXT");
    }
    public static void glGetQueryObjecti64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjecti64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectui64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetQueryObjectui64vEXT$MH,"glGetQueryObjectui64vEXT");
    }
    public static void glGetQueryObjectui64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectui64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferRangeEXT$MH,"glBindBufferRangeEXT");
    }
    public static void glBindBufferRangeEXT ( int target,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glBindBufferRangeEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferOffsetEXT$MH,"glBindBufferOffsetEXT");
    }
    public static void glBindBufferOffsetEXT ( int target,  int index,  int buffer,  long offset) {
        var mh$ = glBindBufferOffsetEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferBaseEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferBaseEXT$MH,"glBindBufferBaseEXT");
    }
    public static void glBindBufferBaseEXT ( int target,  int index,  int buffer) {
        var mh$ = glBindBufferBaseEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glBeginTransformFeedbackEXT$MH,"glBeginTransformFeedbackEXT");
    }
    public static void glBeginTransformFeedbackEXT ( int primitiveMode) {
        var mh$ = glBeginTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glEndTransformFeedbackEXT$MH,"glEndTransformFeedbackEXT");
    }
    public static void glEndTransformFeedbackEXT () {
        var mh$ = glEndTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackVaryingsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glTransformFeedbackVaryingsEXT$MH,"glTransformFeedbackVaryingsEXT");
    }
    public static void glTransformFeedbackVaryingsEXT ( int program,  int count,  Addressable varyings,  int bufferMode) {
        var mh$ = glTransformFeedbackVaryingsEXT$MH();
        try {
            mh$.invokeExact(program, count, varyings, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackVaryingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetTransformFeedbackVaryingEXT$MH,"glGetTransformFeedbackVaryingEXT");
    }
    public static void glGetTransformFeedbackVaryingEXT ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetTransformFeedbackVaryingEXT$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetIntegerIndexedvEXT$MH,"glGetIntegerIndexedvEXT");
    }
    public static void glGetIntegerIndexedvEXT ( int param,  int index,  Addressable values) {
        var mh$ = glGetIntegerIndexedvEXT$MH();
        try {
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetBooleanIndexedvEXT$MH,"glGetBooleanIndexedvEXT");
    }
    public static void glGetBooleanIndexedvEXT ( int param,  int index,  Addressable values) {
        var mh$ = glGetBooleanIndexedvEXT$MH();
        try {
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glElementPointerAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glElementPointerAPPLE$MH,"glElementPointerAPPLE");
    }
    public static void glElementPointerAPPLE ( int type,  Addressable pointer) {
        var mh$ = glElementPointerAPPLE$MH();
        try {
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glDrawElementArrayAPPLE$MH,"glDrawElementArrayAPPLE");
    }
    public static void glDrawElementArrayAPPLE ( int mode,  int first,  int count) {
        var mh$ = glDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glDrawRangeElementArrayAPPLE$MH,"glDrawRangeElementArrayAPPLE");
    }
    public static void glDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  int first,  int count) {
        var mh$ = glDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glMultiDrawElementArrayAPPLE$MH,"glMultiDrawElementArrayAPPLE");
    }
    public static void glMultiDrawElementArrayAPPLE ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glMultiDrawRangeElementArrayAPPLE$MH,"glMultiDrawRangeElementArrayAPPLE");
    }
    public static void glMultiDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGenFencesAPPLE$MH,"glGenFencesAPPLE");
    }
    public static void glGenFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glGenFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glDeleteFencesAPPLE$MH,"glDeleteFencesAPPLE");
    }
    public static void glDeleteFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glDeleteFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glSetFenceAPPLE$MH,"glSetFenceAPPLE");
    }
    public static void glSetFenceAPPLE ( int fence) {
        var mh$ = glSetFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glIsFenceAPPLE$MH,"glIsFenceAPPLE");
    }
    public static byte glIsFenceAPPLE ( int fence) {
        var mh$ = glIsFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glTestFenceAPPLE$MH,"glTestFenceAPPLE");
    }
    public static byte glTestFenceAPPLE ( int fence) {
        var mh$ = glTestFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glFinishFenceAPPLE$MH,"glFinishFenceAPPLE");
    }
    public static void glFinishFenceAPPLE ( int fence) {
        var mh$ = glFinishFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glTestObjectAPPLE$MH,"glTestObjectAPPLE");
    }
    public static byte glTestObjectAPPLE ( int object,  int name) {
        var mh$ = glTestObjectAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFinishObjectAPPLE$MH,"glFinishObjectAPPLE");
    }
    public static void glFinishObjectAPPLE ( int object,  int name) {
        var mh$ = glFinishObjectAPPLE$MH();
        try {
            mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glBufferParameteriAPPLE$MH,"glBufferParameteriAPPLE");
    }
    public static void glBufferParameteriAPPLE ( int target,  int pname,  int param) {
        var mh$ = glBufferParameteriAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedBufferRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFlushMappedBufferRangeAPPLE$MH,"glFlushMappedBufferRangeAPPLE");
    }
    public static void glFlushMappedBufferRangeAPPLE ( int target,  long offset,  long size) {
        var mh$ = glFlushMappedBufferRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushRenderAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFlushRenderAPPLE$MH,"glFlushRenderAPPLE");
    }
    public static void glFlushRenderAPPLE () {
        var mh$ = glFlushRenderAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishRenderAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFinishRenderAPPLE$MH,"glFinishRenderAPPLE");
    }
    public static void glFinishRenderAPPLE () {
        var mh$ = glFinishRenderAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSwapAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glSwapAPPLE$MH,"glSwapAPPLE");
    }
    public static void glSwapAPPLE () {
        var mh$ = glSwapAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectPurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glObjectPurgeableAPPLE$MH,"glObjectPurgeableAPPLE");
    }
    public static int glObjectPurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectPurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectUnpurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glObjectUnpurgeableAPPLE$MH,"glObjectUnpurgeableAPPLE");
    }
    public static int glObjectUnpurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectUnpurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetObjectParameterivAPPLE$MH,"glGetObjectParameterivAPPLE");
    }
    public static void glGetObjectParameterivAPPLE ( int objectType,  int name,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivAPPLE$MH();
        try {
            mh$.invokeExact(objectType, name, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glTextureRangeAPPLE$MH,"glTextureRangeAPPLE");
    }
    public static void glTextureRangeAPPLE ( int target,  int length,  Addressable pointer) {
        var mh$ = glTextureRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterPointervAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetTexParameterPointervAPPLE$MH,"glGetTexParameterPointervAPPLE");
    }
    public static void glGetTexParameterPointervAPPLE ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterPointervAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glBindVertexArrayAPPLE$MH,"glBindVertexArrayAPPLE");
    }
    public static void glBindVertexArrayAPPLE ( int id) {
        var mh$ = glBindVertexArrayAPPLE$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glDeleteVertexArraysAPPLE$MH,"glDeleteVertexArraysAPPLE");
    }
    public static void glDeleteVertexArraysAPPLE ( int n,  Addressable ids) {
        var mh$ = glDeleteVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGenVertexArraysAPPLE$MH,"glGenVertexArraysAPPLE");
    }
    public static void glGenVertexArraysAPPLE ( int n,  Addressable ids) {
        var mh$ = glGenVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glIsVertexArrayAPPLE$MH,"glIsVertexArrayAPPLE");
    }
    public static byte glIsVertexArrayAPPLE ( int id) {
        var mh$ = glIsVertexArrayAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glVertexArrayRangeAPPLE$MH,"glVertexArrayRangeAPPLE");
    }
    public static void glVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glFlushVertexArrayRangeAPPLE$MH,"glFlushVertexArrayRangeAPPLE");
    }
    public static void glFlushVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glFlushVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glVertexArrayParameteriAPPLE$MH,"glVertexArrayParameteriAPPLE");
    }
    public static void glVertexArrayParameteriAPPLE ( int pname,  int param) {
        var mh$ = glVertexArrayParameteriAPPLE$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSizePointerAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glPointSizePointerAPPLE$MH,"glPointSizePointerAPPLE");
    }
    public static void glPointSizePointerAPPLE ( int type,  int stride,  Addressable pointer) {
        var mh$ = glPointSizePointerAPPLE$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointSizefAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glVertexPointSizefAPPLE$MH,"glVertexPointSizefAPPLE");
    }
    public static void glVertexPointSizefAPPLE ( float size) {
        var mh$ = glVertexPointSizefAPPLE$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glEnableVertexAttribAPPLE$MH,"glEnableVertexAttribAPPLE");
    }
    public static void glEnableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glEnableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glDisableVertexAttribAPPLE$MH,"glDisableVertexAttribAPPLE");
    }
    public static void glDisableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glDisableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexAttribEnabledAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glIsVertexAttribEnabledAPPLE$MH,"glIsVertexAttribEnabledAPPLE");
    }
    public static byte glIsVertexAttribEnabledAPPLE ( int index,  int pname) {
        var mh$ = glIsVertexAttribEnabledAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glMapVertexAttrib1dAPPLE$MH,"glMapVertexAttrib1dAPPLE");
    }
    public static void glMapVertexAttrib1dAPPLE ( int index,  int size,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib1fAPPLE$MH,"glMapVertexAttrib1fAPPLE");
    }
    public static void glMapVertexAttrib1fAPPLE ( int index,  int size,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib2dAPPLE$MH,"glMapVertexAttrib2dAPPLE");
    }
    public static void glMapVertexAttrib2dAPPLE ( int index,  int size,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib2fAPPLE$MH,"glMapVertexAttrib2fAPPLE");
    }
    public static void glMapVertexAttrib2fAPPLE ( int index,  int size,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int equationRGB,  int equationAlpha) {
        var mh$ = glBlendEquationSeparateATI$MH();
        try {
            mh$.invokeExact(equationRGB, equationAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOpSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glStencilOpSeparateATI$MH,"glStencilOpSeparateATI");
    }
    public static void glStencilOpSeparateATI ( int face,  int sfail,  int dpfail,  int dppass) {
        var mh$ = glStencilOpSeparateATI$MH();
        try {
            mh$.invokeExact(face, sfail, dpfail, dppass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFuncSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glStencilFuncSeparateATI$MH,"glStencilFuncSeparateATI");
    }
    public static void glStencilFuncSeparateATI ( int frontfunc,  int backfunc,  int ref,  int mask) {
        var mh$ = glStencilFuncSeparateATI$MH();
        try {
            mh$.invokeExact(frontfunc, backfunc, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glBeginConditionalRenderNV$MH,"glBeginConditionalRenderNV");
    }
    public static void glBeginConditionalRenderNV ( int id,  int mode) {
        var mh$ = glBeginConditionalRenderNV$MH();
        try {
            mh$.invokeExact(id, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glEndConditionalRenderNV$MH,"glEndConditionalRenderNV");
    }
    public static void glEndConditionalRenderNV () {
        var mh$ = glEndConditionalRenderNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glPointParameteriNV$MH,"glPointParameteriNV");
    }
    public static void glPointParameteriNV ( int pname,  int param) {
        var mh$ = glPointParameteriNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glPointParameterivNV$MH,"glPointParameterivNV");
    }
    public static void glPointParameterivNV ( int pname,  Addressable params) {
        var mh$ = glPointParameterivNV$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glTextureBarrierNV$MH,"glTextureBarrierNV");
    }
    public static void glTextureBarrierNV () {
        var mh$ = glTextureBarrierNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = glAccum$MH();
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = glAlphaFunc$MH();
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = glAreTexturesResident$MH();
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = glArrayElement$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = glBegin$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = glBindTexture$MH();
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$67.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = glBitmap$MH();
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColor$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glBlendColor$MH,"glBlendColor");
    }
    public static void glBlendColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquation$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glBlendEquation$MH,"glBlendEquation");
    }
    public static void glBlendEquation ( int mode) {
        var mh$ = glBlendEquation$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparate$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glBlendEquationSeparate$MH,"glBlendEquationSeparate");
    }
    public static void glBlendEquationSeparate ( int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparate$MH();
        try {
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = glBlendFunc$MH();
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = glCallList$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$68.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = glCallLists$MH();
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = glClear$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearAccum$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glClearColor$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = glClearDepth$MH();
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = glClearIndex$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$69.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = glClearStencil$MH();
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = glClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3b$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = glColor3bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = glColor3d$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = glColor3dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$70.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = glColor3f$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = glColor3fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = glColor3i$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = glColor3iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = glColor3s$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = glColor3sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$71.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = glColor3ub$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = glColor3ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = glColor3ui$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = glColor3uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = glColor3us$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = glColor3usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$72.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4b$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = glColor4bv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = glColor4d$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = glColor4dv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glColor4f$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = glColor4fv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$73.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4i$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = glColor4iv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4s$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = glColor4sv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ub$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4ub$MH,"glColor4ub");
    }
    public static void glColor4ub ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColor4ub$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4ubv$MH,"glColor4ubv");
    }
    public static void glColor4ubv ( Addressable v) {
        var mh$ = glColor4ubv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4ui$MH() {
        return RuntimeHelper.requireNonNull(constants$74.glColor4ui$MH,"glColor4ui");
    }
    public static void glColor4ui ( int red,  int green,  int blue,  int alpha) {
        var mh$ = glColor4ui$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColor4uiv$MH,"glColor4uiv");
    }
    public static void glColor4uiv ( Addressable v) {
        var mh$ = glColor4uiv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4us$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColor4us$MH,"glColor4us");
    }
    public static void glColor4us ( short red,  short green,  short blue,  short alpha) {
        var mh$ = glColor4us$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4usv$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColor4usv$MH,"glColor4usv");
    }
    public static void glColor4usv ( Addressable v) {
        var mh$ = glColor4usv$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColorMask$MH,"glColorMask");
    }
    public static void glColorMask ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = glColorMask$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = glColorMaterial$MH();
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$75.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glColorPointer$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glColorSubTable$MH,"glColorSubTable");
    }
    public static void glColorSubTable ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = glColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, count, format, type, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glColorTable$MH,"glColorTable");
    }
    public static void glColorTable ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = glColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glColorTableParameterfv$MH,"glColorTableParameterfv");
    }
    public static void glColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glColorTableParameteriv$MH,"glColorTableParameteriv");
    }
    public static void glColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glConvolutionFilter1D$MH,"glConvolutionFilter1D");
    }
    public static void glConvolutionFilter1D ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$76.glConvolutionFilter2D$MH,"glConvolutionFilter2D");
    }
    public static void glConvolutionFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = glConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glConvolutionParameterf$MH,"glConvolutionParameterf");
    }
    public static void glConvolutionParameterf ( int target,  int pname,  float params) {
        var mh$ = glConvolutionParameterf$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glConvolutionParameterfv$MH,"glConvolutionParameterfv");
    }
    public static void glConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glConvolutionParameteri$MH,"glConvolutionParameteri");
    }
    public static void glConvolutionParameteri ( int target,  int pname,  int params) {
        var mh$ = glConvolutionParameteri$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glConvolutionParameteriv$MH,"glConvolutionParameteriv");
    }
    public static void glConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glCopyColorSubTable$MH,"glCopyColorSubTable");
    }
    public static void glCopyColorSubTable ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = glCopyColorSubTable$MH();
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$77.glCopyColorTable$MH,"glCopyColorTable");
    }
    public static void glCopyColorTable ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyColorTable$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyConvolutionFilter1D$MH,"glCopyConvolutionFilter1D");
    }
    public static void glCopyConvolutionFilter1D ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = glCopyConvolutionFilter1D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyConvolutionFilter2D$MH,"glCopyConvolutionFilter2D");
    }
    public static void glCopyConvolutionFilter2D ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyConvolutionFilter2D$MH();
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = glCopyPixels$MH();
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = glCopyTexImage1D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = glCopyTexImage2D$MH();
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$78.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = glCopyTexSubImage1D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage2D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glCopyTexSubImage3D$MH,"glCopyTexSubImage3D");
    }
    public static void glCopyTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = glCopyTexSubImage3D$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCullFace$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glCullFace$MH,"glCullFace");
    }
    public static void glCullFace ( int mode) {
        var mh$ = glCullFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteLists$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glDeleteLists$MH,"glDeleteLists");
    }
    public static void glDeleteLists ( int list,  int range) {
        var mh$ = glDeleteLists$MH();
        try {
            mh$.invokeExact(list, range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = glDeleteTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$79.glDepthFunc$MH,"glDepthFunc");
    }
    public static void glDepthFunc ( int func) {
        var mh$ = glDepthFunc$MH();
        try {
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthMask$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDepthMask$MH,"glDepthMask");
    }
    public static void glDepthMask ( byte flag) {
        var mh$ = glDepthMask$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthRange$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDepthRange$MH,"glDepthRange");
    }
    public static void glDepthRange ( double zNear,  double zFar) {
        var mh$ = glDepthRange$MH();
        try {
            mh$.invokeExact(zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDisable$MH,"glDisable");
    }
    public static void glDisable ( int cap) {
        var mh$ = glDisable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDisableClientState$MH,"glDisableClientState");
    }
    public static void glDisableClientState ( int array) {
        var mh$ = glDisableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = glDrawArrays$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$80.glDrawBuffer$MH,"glDrawBuffer");
    }
    public static void glDrawBuffer ( int mode) {
        var mh$ = glDrawBuffer$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawElements$MH();
        try {
            mh$.invokeExact(mode, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = glDrawPixels$MH();
        try {
            mh$.invokeExact(width, height, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElements$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glDrawRangeElements$MH,"glDrawRangeElements");
    }
    public static void glDrawRangeElements ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElements$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlag$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glEdgeFlag$MH,"glEdgeFlag");
    }
    public static void glEdgeFlag ( byte flag) {
        var mh$ = glEdgeFlag$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable pointer) {
        var mh$ = glEdgeFlagPointer$MH();
        try {
            mh$.invokeExact(stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagv$MH() {
        return RuntimeHelper.requireNonNull(constants$81.glEdgeFlagv$MH,"glEdgeFlagv");
    }
    public static void glEdgeFlagv ( Addressable flag) {
        var mh$ = glEdgeFlagv$MH();
        try {
            mh$.invokeExact(flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEnable$MH,"glEnable");
    }
    public static void glEnable ( int cap) {
        var mh$ = glEnable$MH();
        try {
            mh$.invokeExact(cap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableClientState$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEnableClientState$MH,"glEnableClientState");
    }
    public static void glEnableClientState ( int array) {
        var mh$ = glEnableClientState$MH();
        try {
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEnd$MH,"glEnd");
    }
    public static void glEnd () {
        var mh$ = glEnd$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndList$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEndList$MH,"glEndList");
    }
    public static void glEndList () {
        var mh$ = glEndList$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = glEvalCoord1d$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$82.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = glEvalCoord1dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = glEvalCoord1f$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = glEvalCoord1fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = glEvalCoord2d$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = glEvalCoord2dv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = glEvalCoord2f$MH();
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$83.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = glEvalCoord2fv$MH();
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = glEvalMesh1$MH();
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = glEvalMesh2$MH();
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = glEvalPoint1$MH();
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = glEvalPoint2$MH();
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = glFeedbackBuffer$MH();
        try {
            mh$.invokeExact(size, type, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$84.glFinish$MH,"glFinish");
    }
    public static void glFinish () {
        var mh$ = glFinish$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFlush$MH,"glFlush");
    }
    public static void glFlush () {
        var mh$ = glFlush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = glFogf$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = glFogfv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = glFogi$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = glFogiv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrontFace$MH() {
        return RuntimeHelper.requireNonNull(constants$85.glFrontFace$MH,"glFrontFace");
    }
    public static void glFrontFace ( int mode) {
        var mh$ = glFrontFace$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFrustum$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glFrustum$MH,"glFrustum");
    }
    public static void glFrustum ( double left,  double right,  double bottom,  double top,  double zNear,  double zFar) {
        var mh$ = glFrustum$MH();
        try {
            mh$.invokeExact(left, right, bottom, top, zNear, zFar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenLists$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glGenLists$MH,"glGenLists");
    }
    public static int glGenLists ( int range) {
        var mh$ = glGenLists$MH();
        try {
            return (int)mh$.invokeExact(range);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = glGenTextures$MH();
        try {
            mh$.invokeExact(n, textures);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanv$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glGetBooleanv$MH,"glGetBooleanv");
    }
    public static void glGetBooleanv ( int pname,  Addressable params) {
        var mh$ = glGetBooleanv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glGetClipPlane$MH,"glGetClipPlane");
    }
    public static void glGetClipPlane ( int plane,  Addressable equation) {
        var mh$ = glGetClipPlane$MH();
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$86.glGetColorTable$MH,"glGetColorTable");
    }
    public static void glGetColorTable ( int target,  int format,  int type,  Addressable table) {
        var mh$ = glGetColorTable$MH();
        try {
            mh$.invokeExact(target, format, type, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetColorTableParameterfv$MH,"glGetColorTableParameterfv");
    }
    public static void glGetColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetColorTableParameteriv$MH,"glGetColorTableParameteriv");
    }
    public static void glGetColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetColorTableParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetConvolutionFilter$MH,"glGetConvolutionFilter");
    }
    public static void glGetConvolutionFilter ( int target,  int format,  int type,  Addressable image) {
        var mh$ = glGetConvolutionFilter$MH();
        try {
            mh$.invokeExact(target, format, type, image);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetConvolutionParameterfv$MH,"glGetConvolutionParameterfv");
    }
    public static void glGetConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetConvolutionParameteriv$MH,"glGetConvolutionParameteriv");
    }
    public static void glGetConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetConvolutionParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetDoublev$MH() {
        return RuntimeHelper.requireNonNull(constants$87.glGetDoublev$MH,"glGetDoublev");
    }
    public static void glGetDoublev ( int pname,  Addressable params) {
        var mh$ = glGetDoublev$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetError$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetError$MH,"glGetError");
    }
    public static int glGetError () {
        var mh$ = glGetError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFloatv$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetFloatv$MH,"glGetFloatv");
    }
    public static void glGetFloatv ( int pname,  Addressable params) {
        var mh$ = glGetFloatv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetHistogram$MH,"glGetHistogram");
    }
    public static void glGetHistogram ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetHistogram$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetHistogramParameterfv$MH,"glGetHistogramParameterfv");
    }
    public static void glGetHistogramParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetHistogramParameteriv$MH,"glGetHistogramParameteriv");
    }
    public static void glGetHistogramParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetHistogramParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerv$MH() {
        return RuntimeHelper.requireNonNull(constants$88.glGetIntegerv$MH,"glGetIntegerv");
    }
    public static void glGetIntegerv ( int pname,  Addressable params) {
        var mh$ = glGetIntegerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightfv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = glGetLightiv$MH();
        try {
            mh$.invokeExact(light, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapdv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapfv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = glGetMapiv$MH();
        try {
            mh$.invokeExact(target, query, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$89.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialfv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = glGetMaterialiv$MH();
        try {
            mh$.invokeExact(face, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetMinmax$MH,"glGetMinmax");
    }
    public static void glGetMinmax ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = glGetMinmax$MH();
        try {
            mh$.invokeExact(target, reset, format, type, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetMinmaxParameterfv$MH,"glGetMinmaxParameterfv");
    }
    public static void glGetMinmaxParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetMinmaxParameteriv$MH,"glGetMinmaxParameteriv");
    }
    public static void glGetMinmaxParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetMinmaxParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapfv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$90.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapuiv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = glGetPixelMapusv$MH();
        try {
            mh$.invokeExact(map, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = glGetPointerv$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPolygonStipple$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetPolygonStipple$MH,"glGetPolygonStipple");
    }
    public static void glGetPolygonStipple ( Addressable mask) {
        var mh$ = glGetPolygonStipple$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetSeparableFilter$MH,"glGetSeparableFilter");
    }
    public static void glGetSeparableFilter ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = glGetSeparableFilter$MH();
        try {
            mh$.invokeExact(target, format, type, row, column, span);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetString$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetString$MH,"glGetString");
    }
    public static MemoryAddress glGetString ( int name) {
        var mh$ = glGetString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$91.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnvfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexEnviv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGendv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGenfv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = glGetTexGeniv$MH();
        try {
            mh$.invokeExact(coord, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = glGetTexImage$MH();
        try {
            mh$.invokeExact(target, level, format, type, pixels);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$92.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameterfv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = glGetTexLevelParameteriv$MH();
        try {
            mh$.invokeExact(target, level, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterfv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHint$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glHint$MH,"glHint");
    }
    public static void glHint ( int target,  int mode) {
        var mh$ = glHint$MH();
        try {
            mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glHistogram$MH,"glHistogram");
    }
    public static void glHistogram ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = glHistogram$MH();
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexMask$MH() {
        return RuntimeHelper.requireNonNull(constants$93.glIndexMask$MH,"glIndexMask");
    }
    public static void glIndexMask ( int mask) {
        var mh$ = glIndexMask$MH();
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable pointer) {
        var mh$ = glIndexPointer$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexd$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexd$MH,"glIndexd");
    }
    public static void glIndexd ( double c) {
        var mh$ = glIndexd$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexdv$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexdv$MH,"glIndexdv");
    }
    public static void glIndexdv ( Addressable c) {
        var mh$ = glIndexdv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexf$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexf$MH,"glIndexf");
    }
    public static void glIndexf ( float c) {
        var mh$ = glIndexf$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexfv$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexfv$MH,"glIndexfv");
    }
    public static void glIndexfv ( Addressable c) {
        var mh$ = glIndexfv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexi$MH() {
        return RuntimeHelper.requireNonNull(constants$94.glIndexi$MH,"glIndexi");
    }
    public static void glIndexi ( int c) {
        var mh$ = glIndexi$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexiv$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glIndexiv$MH,"glIndexiv");
    }
    public static void glIndexiv ( Addressable c) {
        var mh$ = glIndexiv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexs$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glIndexs$MH,"glIndexs");
    }
    public static void glIndexs ( short c) {
        var mh$ = glIndexs$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexsv$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glIndexsv$MH,"glIndexsv");
    }
    public static void glIndexsv ( Addressable c) {
        var mh$ = glIndexsv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexub$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glIndexub$MH,"glIndexub");
    }
    public static void glIndexub ( byte c) {
        var mh$ = glIndexub$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexubv$MH() {
        return RuntimeHelper.requireNonNull(constants$95.glIndexubv$MH,"glIndexubv");
    }
    public static void glIndexubv ( Addressable c) {
        var mh$ = glIndexubv$MH();
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


