// Generated by jextract

package cgl.macos.arm;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class cgl_h {

    cgl_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("OpenGL.framework"), LIBRARY_ARENA)
            .or(SymbolLookup.libraryLookup(System.mapLibraryName("GLUT.framework"), LIBRARY_ARENA))
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int API_TO_BE_DEPRECATED = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED() {
        return API_TO_BE_DEPRECATED;
    }
    private static final int API_TO_BE_DEPRECATED_MACOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED_MACOS() {
        return API_TO_BE_DEPRECATED_MACOS;
    }
    private static final int API_TO_BE_DEPRECATED_IOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED_IOS() {
        return API_TO_BE_DEPRECATED_IOS;
    }
    private static final int API_TO_BE_DEPRECATED_TVOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED_TVOS() {
        return API_TO_BE_DEPRECATED_TVOS;
    }
    private static final int API_TO_BE_DEPRECATED_WATCHOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED_WATCHOS() {
        return API_TO_BE_DEPRECATED_WATCHOS;
    }
    private static final int __API_TO_BE_DEPRECATED_MACCATALYST = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return __API_TO_BE_DEPRECATED_MACCATALYST;
    }
    private static final int API_TO_BE_DEPRECATED_DRIVERKIT = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int API_TO_BE_DEPRECATED_DRIVERKIT() {
        return API_TO_BE_DEPRECATED_DRIVERKIT;
    }
    private static final int __ENABLE_LEGACY_MAC_AVAILABILITY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return __ENABLE_LEGACY_MAC_AVAILABILITY;
    }
    private static final int kCGLMonoscopicBit = (int)1L;
    /**
     * {@snippet lang=c :
     * #define kCGLMonoscopicBit 1
     * }
     */
    public static int kCGLMonoscopicBit() {
        return kCGLMonoscopicBit;
    }
    private static final int kCGLStereoscopicBit = (int)2L;
    /**
     * {@snippet lang=c :
     * #define kCGLStereoscopicBit 2
     * }
     */
    public static int kCGLStereoscopicBit() {
        return kCGLStereoscopicBit;
    }
    private static final int kCGLSingleBufferBit = (int)4L;
    /**
     * {@snippet lang=c :
     * #define kCGLSingleBufferBit 4
     * }
     */
    public static int kCGLSingleBufferBit() {
        return kCGLSingleBufferBit;
    }
    private static final int kCGLDoubleBufferBit = (int)8L;
    /**
     * {@snippet lang=c :
     * #define kCGLDoubleBufferBit 8
     * }
     */
    public static int kCGLDoubleBufferBit() {
        return kCGLDoubleBufferBit;
    }
    private static final int kCGLTripleBufferBit = (int)16L;
    /**
     * {@snippet lang=c :
     * #define kCGLTripleBufferBit 16
     * }
     */
    public static int kCGLTripleBufferBit() {
        return kCGLTripleBufferBit;
    }
    private static final int kCGL0Bit = (int)1L;
    /**
     * {@snippet lang=c :
     * #define kCGL0Bit 1
     * }
     */
    public static int kCGL0Bit() {
        return kCGL0Bit;
    }
    private static final int kCGL1Bit = (int)2L;
    /**
     * {@snippet lang=c :
     * #define kCGL1Bit 2
     * }
     */
    public static int kCGL1Bit() {
        return kCGL1Bit;
    }
    private static final int kCGL2Bit = (int)4L;
    /**
     * {@snippet lang=c :
     * #define kCGL2Bit 4
     * }
     */
    public static int kCGL2Bit() {
        return kCGL2Bit;
    }
    private static final int kCGL3Bit = (int)8L;
    /**
     * {@snippet lang=c :
     * #define kCGL3Bit 8
     * }
     */
    public static int kCGL3Bit() {
        return kCGL3Bit;
    }
    private static final int kCGL4Bit = (int)16L;
    /**
     * {@snippet lang=c :
     * #define kCGL4Bit 16
     * }
     */
    public static int kCGL4Bit() {
        return kCGL4Bit;
    }
    private static final int kCGL5Bit = (int)32L;
    /**
     * {@snippet lang=c :
     * #define kCGL5Bit 32
     * }
     */
    public static int kCGL5Bit() {
        return kCGL5Bit;
    }
    private static final int kCGL6Bit = (int)64L;
    /**
     * {@snippet lang=c :
     * #define kCGL6Bit 64
     * }
     */
    public static int kCGL6Bit() {
        return kCGL6Bit;
    }
    private static final int kCGL8Bit = (int)128L;
    /**
     * {@snippet lang=c :
     * #define kCGL8Bit 128
     * }
     */
    public static int kCGL8Bit() {
        return kCGL8Bit;
    }
    private static final int kCGL10Bit = (int)256L;
    /**
     * {@snippet lang=c :
     * #define kCGL10Bit 256
     * }
     */
    public static int kCGL10Bit() {
        return kCGL10Bit;
    }
    private static final int kCGL12Bit = (int)512L;
    /**
     * {@snippet lang=c :
     * #define kCGL12Bit 512
     * }
     */
    public static int kCGL12Bit() {
        return kCGL12Bit;
    }
    private static final int kCGL16Bit = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define kCGL16Bit 1024
     * }
     */
    public static int kCGL16Bit() {
        return kCGL16Bit;
    }
    private static final int kCGL24Bit = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define kCGL24Bit 2048
     * }
     */
    public static int kCGL24Bit() {
        return kCGL24Bit;
    }
    private static final int kCGL32Bit = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define kCGL32Bit 4096
     * }
     */
    public static int kCGL32Bit() {
        return kCGL32Bit;
    }
    private static final int kCGL48Bit = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define kCGL48Bit 8192
     * }
     */
    public static int kCGL48Bit() {
        return kCGL48Bit;
    }
    private static final int kCGL64Bit = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define kCGL64Bit 16384
     * }
     */
    public static int kCGL64Bit() {
        return kCGL64Bit;
    }
    private static final int kCGL96Bit = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define kCGL96Bit 32768
     * }
     */
    public static int kCGL96Bit() {
        return kCGL96Bit;
    }
    private static final int kCGL128Bit = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define kCGL128Bit 65536
     * }
     */
    public static int kCGL128Bit() {
        return kCGL128Bit;
    }
    private static final int kCGLRGB444Bit = (int)64L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB444Bit 64
     * }
     */
    public static int kCGLRGB444Bit() {
        return kCGLRGB444Bit;
    }
    private static final int kCGLARGB4444Bit = (int)128L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB4444Bit 128
     * }
     */
    public static int kCGLARGB4444Bit() {
        return kCGLARGB4444Bit;
    }
    private static final int kCGLRGB444A8Bit = (int)256L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB444A8Bit 256
     * }
     */
    public static int kCGLRGB444A8Bit() {
        return kCGLRGB444A8Bit;
    }
    private static final int kCGLRGB555Bit = (int)512L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB555Bit 512
     * }
     */
    public static int kCGLRGB555Bit() {
        return kCGLRGB555Bit;
    }
    private static final int kCGLARGB1555Bit = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB1555Bit 1024
     * }
     */
    public static int kCGLARGB1555Bit() {
        return kCGLARGB1555Bit;
    }
    private static final int kCGLRGB555A8Bit = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB555A8Bit 2048
     * }
     */
    public static int kCGLRGB555A8Bit() {
        return kCGLRGB555A8Bit;
    }
    private static final int kCGLRGB565Bit = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB565Bit 4096
     * }
     */
    public static int kCGLRGB565Bit() {
        return kCGLRGB565Bit;
    }
    private static final int kCGLRGB565A8Bit = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB565A8Bit 8192
     * }
     */
    public static int kCGLRGB565A8Bit() {
        return kCGLRGB565A8Bit;
    }
    private static final int kCGLRGB888Bit = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB888Bit 16384
     * }
     */
    public static int kCGLRGB888Bit() {
        return kCGLRGB888Bit;
    }
    private static final int kCGLARGB8888Bit = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB8888Bit 32768
     * }
     */
    public static int kCGLARGB8888Bit() {
        return kCGLARGB8888Bit;
    }
    private static final int kCGLRGB888A8Bit = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB888A8Bit 65536
     * }
     */
    public static int kCGLRGB888A8Bit() {
        return kCGLRGB888A8Bit;
    }
    private static final int kCGLRGB101010Bit = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB101010Bit 131072
     * }
     */
    public static int kCGLRGB101010Bit() {
        return kCGLRGB101010Bit;
    }
    private static final int kCGLARGB2101010Bit = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB2101010Bit 262144
     * }
     */
    public static int kCGLARGB2101010Bit() {
        return kCGLARGB2101010Bit;
    }
    private static final int kCGLRGB101010_A8Bit = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB101010_A8Bit 524288
     * }
     */
    public static int kCGLRGB101010_A8Bit() {
        return kCGLRGB101010_A8Bit;
    }
    private static final int kCGLRGB121212Bit = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB121212Bit 1048576
     * }
     */
    public static int kCGLRGB121212Bit() {
        return kCGLRGB121212Bit;
    }
    private static final int kCGLARGB12121212Bit = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB12121212Bit 2097152
     * }
     */
    public static int kCGLARGB12121212Bit() {
        return kCGLARGB12121212Bit;
    }
    private static final int kCGLRGB161616Bit = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGB161616Bit 4194304
     * }
     */
    public static int kCGLRGB161616Bit() {
        return kCGLRGB161616Bit;
    }
    private static final int kCGLRGBA16161616Bit = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBA16161616Bit 8388608
     * }
     */
    public static int kCGLRGBA16161616Bit() {
        return kCGLRGBA16161616Bit;
    }
    private static final int kCGLRGBFloat64Bit = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBFloat64Bit 16777216
     * }
     */
    public static int kCGLRGBFloat64Bit() {
        return kCGLRGBFloat64Bit;
    }
    private static final int kCGLRGBAFloat64Bit = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBAFloat64Bit 33554432
     * }
     */
    public static int kCGLRGBAFloat64Bit() {
        return kCGLRGBAFloat64Bit;
    }
    private static final int kCGLRGBFloat128Bit = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBFloat128Bit 67108864
     * }
     */
    public static int kCGLRGBFloat128Bit() {
        return kCGLRGBFloat128Bit;
    }
    private static final int kCGLRGBAFloat128Bit = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBAFloat128Bit 134217728
     * }
     */
    public static int kCGLRGBAFloat128Bit() {
        return kCGLRGBAFloat128Bit;
    }
    private static final int kCGLRGBFloat256Bit = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBFloat256Bit 268435456
     * }
     */
    public static int kCGLRGBFloat256Bit() {
        return kCGLRGBFloat256Bit;
    }
    private static final int kCGLRGBAFloat256Bit = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define kCGLRGBAFloat256Bit 536870912
     * }
     */
    public static int kCGLRGBAFloat256Bit() {
        return kCGLRGBAFloat256Bit;
    }
    private static final int kCGLSupersampleBit = (int)1L;
    /**
     * {@snippet lang=c :
     * #define kCGLSupersampleBit 1
     * }
     */
    public static int kCGLSupersampleBit() {
        return kCGLSupersampleBit;
    }
    private static final int kCGLMultisampleBit = (int)2L;
    /**
     * {@snippet lang=c :
     * #define kCGLMultisampleBit 2
     * }
     */
    public static int kCGLMultisampleBit() {
        return kCGLMultisampleBit;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int kCGLRendererIDMatchingMask = (int)16678656L;
    /**
     * {@snippet lang=c :
     * #define kCGLRendererIDMatchingMask 16678656
     * }
     */
    public static int kCGLRendererIDMatchingMask() {
        return kCGLRendererIDMatchingMask;
    }
    private static final int MAC_OS_X_VERSION_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }
    private static final int MAC_OS_X_VERSION_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }
    private static final int MAC_OS_X_VERSION_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }
    private static final int MAC_OS_X_VERSION_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }
    private static final int MAC_OS_X_VERSION_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }
    private static final int MAC_OS_X_VERSION_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }
    private static final int MAC_OS_X_VERSION_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }
    private static final int MAC_OS_X_VERSION_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }
    private static final int MAC_OS_X_VERSION_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }
    private static final int MAC_OS_X_VERSION_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }
    private static final int MAC_OS_X_VERSION_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }
    private static final int MAC_OS_X_VERSION_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }
    private static final int MAC_OS_X_VERSION_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }
    private static final int MAC_OS_X_VERSION_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }
    private static final int MAC_OS_X_VERSION_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }
    private static final int MAC_OS_X_VERSION_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }
    private static final int MAC_OS_X_VERSION_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }
    private static final int MAC_OS_X_VERSION_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }
    private static final int MAC_OS_X_VERSION_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }
    private static final int MAC_OS_X_VERSION_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }
    private static final int MAC_OS_X_VERSION_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }
    private static final int MAC_OS_X_VERSION_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }
    private static final int MAC_OS_X_VERSION_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }
    private static final int MAC_OS_X_VERSION_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }
    private static final int MAC_OS_X_VERSION_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }
    private static final int MAC_OS_VERSION_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }
    private static final int MAC_OS_VERSION_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }
    private static final int MAC_OS_VERSION_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }
    private static final int MAC_OS_VERSION_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }
    private static final int MAC_OS_VERSION_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }
    private static final int MAC_OS_VERSION_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }
    private static final int MAC_OS_VERSION_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }
    private static final int __API_TO_BE_DEPRECATED = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return __API_TO_BE_DEPRECATED;
    }
    private static final int __API_TO_BE_DEPRECATED_MACOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return __API_TO_BE_DEPRECATED_MACOS;
    }
    private static final int __API_TO_BE_DEPRECATED_IOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return __API_TO_BE_DEPRECATED_IOS;
    }
    private static final int __API_TO_BE_DEPRECATED_TVOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return __API_TO_BE_DEPRECATED_TVOS;
    }
    private static final int __API_TO_BE_DEPRECATED_WATCHOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return __API_TO_BE_DEPRECATED_WATCHOS;
    }
    private static final int __API_TO_BE_DEPRECATED_DRIVERKIT = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return __API_TO_BE_DEPRECATED_DRIVERKIT;
    }
    private static final int __MAC_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return __MAC_10_0;
    }
    private static final int __MAC_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return __MAC_10_1;
    }
    private static final int __MAC_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return __MAC_10_2;
    }
    private static final int __MAC_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return __MAC_10_3;
    }
    private static final int __MAC_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return __MAC_10_4;
    }
    private static final int __MAC_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return __MAC_10_5;
    }
    private static final int __MAC_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return __MAC_10_6;
    }
    private static final int __MAC_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return __MAC_10_7;
    }
    private static final int __MAC_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return __MAC_10_8;
    }
    private static final int __MAC_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return __MAC_10_9;
    }
    private static final int __MAC_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return __MAC_10_10;
    }
    private static final int __MAC_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return __MAC_10_10_2;
    }
    private static final int __MAC_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return __MAC_10_10_3;
    }
    private static final int __MAC_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return __MAC_10_11;
    }
    private static final int __MAC_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return __MAC_10_11_2;
    }
    private static final int __MAC_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return __MAC_10_11_3;
    }
    private static final int __MAC_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return __MAC_10_11_4;
    }
    private static final int __MAC_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return __MAC_10_12;
    }
    private static final int __MAC_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return __MAC_10_12_1;
    }
    private static final int __MAC_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return __MAC_10_12_2;
    }
    private static final int __MAC_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return __MAC_10_12_4;
    }
    private static final int __MAC_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return __MAC_10_13;
    }
    private static final int __MAC_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return __MAC_10_13_1;
    }
    private static final int __MAC_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return __MAC_10_13_2;
    }
    private static final int __MAC_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return __MAC_10_13_4;
    }
    private static final int __MAC_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return __MAC_10_14;
    }
    private static final int __MAC_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return __MAC_10_14_1;
    }
    private static final int __MAC_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return __MAC_10_14_4;
    }
    private static final int __MAC_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return __MAC_10_14_6;
    }
    private static final int __MAC_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return __MAC_10_15;
    }
    private static final int __MAC_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return __MAC_10_15_1;
    }
    private static final int __MAC_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return __MAC_10_15_4;
    }
    private static final int __MAC_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return __MAC_10_16;
    }
    private static final int __MAC_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return __MAC_11_0;
    }
    private static final int __MAC_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return __MAC_11_1;
    }
    private static final int __MAC_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return __MAC_11_3;
    }
    private static final int __MAC_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return __MAC_11_4;
    }
    private static final int __MAC_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return __MAC_11_5;
    }
    private static final int __MAC_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return __MAC_11_6;
    }
    private static final int __MAC_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return __MAC_12_0;
    }
    private static final int __MAC_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return __MAC_12_1;
    }
    private static final int __MAC_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return __MAC_12_2;
    }
    private static final int __MAC_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return __MAC_12_3;
    }
    private static final int __MAC_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return __MAC_13_0;
    }
    private static final int __MAC_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return __MAC_13_1;
    }
    private static final int __MAC_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return __MAC_13_2;
    }
    private static final int __MAC_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return __MAC_13_3;
    }
    private static final int __IPHONE_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return __IPHONE_2_0;
    }
    private static final int __IPHONE_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return __IPHONE_2_1;
    }
    private static final int __IPHONE_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return __IPHONE_2_2;
    }
    private static final int __IPHONE_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return __IPHONE_3_0;
    }
    private static final int __IPHONE_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return __IPHONE_3_1;
    }
    private static final int __IPHONE_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return __IPHONE_3_2;
    }
    private static final int __IPHONE_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return __IPHONE_4_0;
    }
    private static final int __IPHONE_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return __IPHONE_4_1;
    }
    private static final int __IPHONE_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return __IPHONE_4_2;
    }
    private static final int __IPHONE_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return __IPHONE_4_3;
    }
    private static final int __IPHONE_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return __IPHONE_5_0;
    }
    private static final int __IPHONE_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return __IPHONE_5_1;
    }
    private static final int __IPHONE_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return __IPHONE_6_0;
    }
    private static final int __IPHONE_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return __IPHONE_6_1;
    }
    private static final int __IPHONE_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return __IPHONE_7_0;
    }
    private static final int __IPHONE_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return __IPHONE_7_1;
    }
    private static final int __IPHONE_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return __IPHONE_8_0;
    }
    private static final int __IPHONE_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return __IPHONE_8_1;
    }
    private static final int __IPHONE_8_2 = (int)80200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return __IPHONE_8_2;
    }
    private static final int __IPHONE_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return __IPHONE_8_3;
    }
    private static final int __IPHONE_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return __IPHONE_8_4;
    }
    private static final int __IPHONE_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return __IPHONE_9_0;
    }
    private static final int __IPHONE_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return __IPHONE_9_1;
    }
    private static final int __IPHONE_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return __IPHONE_9_2;
    }
    private static final int __IPHONE_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return __IPHONE_9_3;
    }
    private static final int __IPHONE_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return __IPHONE_10_0;
    }
    private static final int __IPHONE_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return __IPHONE_10_1;
    }
    private static final int __IPHONE_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return __IPHONE_10_2;
    }
    private static final int __IPHONE_10_3 = (int)100300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return __IPHONE_10_3;
    }
    private static final int __IPHONE_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return __IPHONE_11_0;
    }
    private static final int __IPHONE_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return __IPHONE_11_1;
    }
    private static final int __IPHONE_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return __IPHONE_11_2;
    }
    private static final int __IPHONE_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return __IPHONE_11_3;
    }
    private static final int __IPHONE_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return __IPHONE_11_4;
    }
    private static final int __IPHONE_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return __IPHONE_12_0;
    }
    private static final int __IPHONE_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return __IPHONE_12_1;
    }
    private static final int __IPHONE_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return __IPHONE_12_2;
    }
    private static final int __IPHONE_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return __IPHONE_12_3;
    }
    private static final int __IPHONE_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return __IPHONE_12_4;
    }
    private static final int __IPHONE_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return __IPHONE_13_0;
    }
    private static final int __IPHONE_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return __IPHONE_13_1;
    }
    private static final int __IPHONE_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return __IPHONE_13_2;
    }
    private static final int __IPHONE_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return __IPHONE_13_3;
    }
    private static final int __IPHONE_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return __IPHONE_13_4;
    }
    private static final int __IPHONE_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return __IPHONE_13_5;
    }
    private static final int __IPHONE_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return __IPHONE_13_6;
    }
    private static final int __IPHONE_13_7 = (int)130700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return __IPHONE_13_7;
    }
    private static final int __IPHONE_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return __IPHONE_14_0;
    }
    private static final int __IPHONE_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return __IPHONE_14_1;
    }
    private static final int __IPHONE_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return __IPHONE_14_2;
    }
    private static final int __IPHONE_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return __IPHONE_14_3;
    }
    private static final int __IPHONE_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return __IPHONE_14_5;
    }
    private static final int __IPHONE_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return __IPHONE_14_6;
    }
    private static final int __IPHONE_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return __IPHONE_14_7;
    }
    private static final int __IPHONE_14_8 = (int)140800L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return __IPHONE_14_8;
    }
    private static final int __IPHONE_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return __IPHONE_15_0;
    }
    private static final int __IPHONE_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return __IPHONE_15_1;
    }
    private static final int __IPHONE_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return __IPHONE_15_2;
    }
    private static final int __IPHONE_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return __IPHONE_15_3;
    }
    private static final int __IPHONE_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return __IPHONE_15_4;
    }
    private static final int __IPHONE_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return __IPHONE_16_0;
    }
    private static final int __IPHONE_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return __IPHONE_16_1;
    }
    private static final int __IPHONE_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return __IPHONE_16_2;
    }
    private static final int __IPHONE_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return __IPHONE_16_3;
    }
    private static final int __IPHONE_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return __IPHONE_16_4;
    }
    private static final int __TVOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return __TVOS_9_0;
    }
    private static final int __TVOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return __TVOS_9_1;
    }
    private static final int __TVOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return __TVOS_9_2;
    }
    private static final int __TVOS_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return __TVOS_10_0;
    }
    private static final int __TVOS_10_0_1 = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return __TVOS_10_0_1;
    }
    private static final int __TVOS_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return __TVOS_10_1;
    }
    private static final int __TVOS_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return __TVOS_10_2;
    }
    private static final int __TVOS_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return __TVOS_11_0;
    }
    private static final int __TVOS_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return __TVOS_11_1;
    }
    private static final int __TVOS_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return __TVOS_11_2;
    }
    private static final int __TVOS_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return __TVOS_11_3;
    }
    private static final int __TVOS_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return __TVOS_11_4;
    }
    private static final int __TVOS_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return __TVOS_12_0;
    }
    private static final int __TVOS_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return __TVOS_12_1;
    }
    private static final int __TVOS_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return __TVOS_12_2;
    }
    private static final int __TVOS_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return __TVOS_12_3;
    }
    private static final int __TVOS_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return __TVOS_12_4;
    }
    private static final int __TVOS_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return __TVOS_13_0;
    }
    private static final int __TVOS_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return __TVOS_13_2;
    }
    private static final int __TVOS_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return __TVOS_13_3;
    }
    private static final int __TVOS_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return __TVOS_13_4;
    }
    private static final int __TVOS_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return __TVOS_14_0;
    }
    private static final int __TVOS_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return __TVOS_14_1;
    }
    private static final int __TVOS_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return __TVOS_14_2;
    }
    private static final int __TVOS_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return __TVOS_14_3;
    }
    private static final int __TVOS_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return __TVOS_14_5;
    }
    private static final int __TVOS_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return __TVOS_14_6;
    }
    private static final int __TVOS_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return __TVOS_14_7;
    }
    private static final int __TVOS_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return __TVOS_15_0;
    }
    private static final int __TVOS_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return __TVOS_15_1;
    }
    private static final int __TVOS_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return __TVOS_15_2;
    }
    private static final int __TVOS_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return __TVOS_15_3;
    }
    private static final int __TVOS_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return __TVOS_15_4;
    }
    private static final int __TVOS_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return __TVOS_16_0;
    }
    private static final int __TVOS_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return __TVOS_16_1;
    }
    private static final int __TVOS_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return __TVOS_16_2;
    }
    private static final int __TVOS_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return __TVOS_16_3;
    }
    private static final int __TVOS_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return __TVOS_16_4;
    }
    private static final int __WATCHOS_1_0 = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return __WATCHOS_1_0;
    }
    private static final int __WATCHOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return __WATCHOS_2_0;
    }
    private static final int __WATCHOS_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return __WATCHOS_2_1;
    }
    private static final int __WATCHOS_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return __WATCHOS_2_2;
    }
    private static final int __WATCHOS_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return __WATCHOS_3_0;
    }
    private static final int __WATCHOS_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return __WATCHOS_3_1;
    }
    private static final int __WATCHOS_3_1_1 = (int)30101L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return __WATCHOS_3_1_1;
    }
    private static final int __WATCHOS_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return __WATCHOS_3_2;
    }
    private static final int __WATCHOS_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return __WATCHOS_4_0;
    }
    private static final int __WATCHOS_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return __WATCHOS_4_1;
    }
    private static final int __WATCHOS_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return __WATCHOS_4_2;
    }
    private static final int __WATCHOS_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return __WATCHOS_4_3;
    }
    private static final int __WATCHOS_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return __WATCHOS_5_0;
    }
    private static final int __WATCHOS_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return __WATCHOS_5_1;
    }
    private static final int __WATCHOS_5_2 = (int)50200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return __WATCHOS_5_2;
    }
    private static final int __WATCHOS_5_3 = (int)50300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return __WATCHOS_5_3;
    }
    private static final int __WATCHOS_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return __WATCHOS_6_0;
    }
    private static final int __WATCHOS_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return __WATCHOS_6_1;
    }
    private static final int __WATCHOS_6_2 = (int)60200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return __WATCHOS_6_2;
    }
    private static final int __WATCHOS_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return __WATCHOS_7_0;
    }
    private static final int __WATCHOS_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return __WATCHOS_7_1;
    }
    private static final int __WATCHOS_7_2 = (int)70200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return __WATCHOS_7_2;
    }
    private static final int __WATCHOS_7_3 = (int)70300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return __WATCHOS_7_3;
    }
    private static final int __WATCHOS_7_4 = (int)70400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return __WATCHOS_7_4;
    }
    private static final int __WATCHOS_7_5 = (int)70500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return __WATCHOS_7_5;
    }
    private static final int __WATCHOS_7_6 = (int)70600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return __WATCHOS_7_6;
    }
    private static final int __WATCHOS_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return __WATCHOS_8_0;
    }
    private static final int __WATCHOS_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return __WATCHOS_8_1;
    }
    private static final int __WATCHOS_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return __WATCHOS_8_3;
    }
    private static final int __WATCHOS_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return __WATCHOS_8_4;
    }
    private static final int __WATCHOS_8_5 = (int)80500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return __WATCHOS_8_5;
    }
    private static final int __WATCHOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return __WATCHOS_9_0;
    }
    private static final int __WATCHOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return __WATCHOS_9_1;
    }
    private static final int __WATCHOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return __WATCHOS_9_2;
    }
    private static final int __WATCHOS_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return __WATCHOS_9_3;
    }
    private static final int __WATCHOS_9_4 = (int)90400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return __WATCHOS_9_4;
    }
    private static final int MAC_OS_X_VERSION_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }
    private static final int MAC_OS_X_VERSION_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }
    private static final int MAC_OS_X_VERSION_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }
    private static final int __DRIVERKIT_19_0 = (int)190000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return __DRIVERKIT_19_0;
    }
    private static final int __DRIVERKIT_20_0 = (int)200000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return __DRIVERKIT_20_0;
    }
    private static final int __DRIVERKIT_21_0 = (int)210000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return __DRIVERKIT_21_0;
    }
    private static final int __AVAILABILITY_MACROS_USES_AVAILABILITY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __AVAILABILITY_MACROS_USES_AVAILABILITY 1
     * }
     */
    public static int __AVAILABILITY_MACROS_USES_AVAILABILITY() {
        return __AVAILABILITY_MACROS_USES_AVAILABILITY;
    }
    private static final int CGL_VERSION_1_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CGL_VERSION_1_0 1
     * }
     */
    public static int CGL_VERSION_1_0() {
        return CGL_VERSION_1_0;
    }
    private static final int CGL_VERSION_1_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CGL_VERSION_1_1 1
     * }
     */
    public static int CGL_VERSION_1_1() {
        return CGL_VERSION_1_1;
    }
    private static final int CGL_VERSION_1_2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CGL_VERSION_1_2 1
     * }
     */
    public static int CGL_VERSION_1_2() {
        return CGL_VERSION_1_2;
    }
    private static final int CGL_VERSION_1_3 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CGL_VERSION_1_3 1
     * }
     */
    public static int CGL_VERSION_1_3() {
        return CGL_VERSION_1_3;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CGLContextObject *CGLContextObj
     * }
     */
    public static final AddressLayout CGLContextObj = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CGLPixelFormatObject *CGLPixelFormatObj
     * }
     */
    public static final AddressLayout CGLPixelFormatObj = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CGLRendererInfoObject *CGLRendererInfoObj
     * }
     */
    public static final AddressLayout CGLRendererInfoObj = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CGLPBufferObject *CGLPBufferObj
     * }
     */
    public static final AddressLayout CGLPBufferObj = cgl_h.C_POINTER;
    private static final int kCGLPFAAllRenderers = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAllRenderers = 1
     * }
     */
    public static int kCGLPFAAllRenderers() {
        return kCGLPFAAllRenderers;
    }
    private static final int kCGLPFATripleBuffer = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFATripleBuffer = 3
     * }
     */
    public static int kCGLPFATripleBuffer() {
        return kCGLPFATripleBuffer;
    }
    private static final int kCGLPFADoubleBuffer = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFADoubleBuffer = 5
     * }
     */
    public static int kCGLPFADoubleBuffer() {
        return kCGLPFADoubleBuffer;
    }
    private static final int kCGLPFAColorSize = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAColorSize = 8
     * }
     */
    public static int kCGLPFAColorSize() {
        return kCGLPFAColorSize;
    }
    private static final int kCGLPFAAlphaSize = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAlphaSize = 11
     * }
     */
    public static int kCGLPFAAlphaSize() {
        return kCGLPFAAlphaSize;
    }
    private static final int kCGLPFADepthSize = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFADepthSize = 12
     * }
     */
    public static int kCGLPFADepthSize() {
        return kCGLPFADepthSize;
    }
    private static final int kCGLPFAStencilSize = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAStencilSize = 13
     * }
     */
    public static int kCGLPFAStencilSize() {
        return kCGLPFAStencilSize;
    }
    private static final int kCGLPFAMinimumPolicy = (int)51L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAMinimumPolicy = 51
     * }
     */
    public static int kCGLPFAMinimumPolicy() {
        return kCGLPFAMinimumPolicy;
    }
    private static final int kCGLPFAMaximumPolicy = (int)52L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAMaximumPolicy = 52
     * }
     */
    public static int kCGLPFAMaximumPolicy() {
        return kCGLPFAMaximumPolicy;
    }
    private static final int kCGLPFASampleBuffers = (int)55L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASampleBuffers = 55
     * }
     */
    public static int kCGLPFASampleBuffers() {
        return kCGLPFASampleBuffers;
    }
    private static final int kCGLPFASamples = (int)56L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASamples = 56
     * }
     */
    public static int kCGLPFASamples() {
        return kCGLPFASamples;
    }
    private static final int kCGLPFAColorFloat = (int)58L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAColorFloat = 58
     * }
     */
    public static int kCGLPFAColorFloat() {
        return kCGLPFAColorFloat;
    }
    private static final int kCGLPFAMultisample = (int)59L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAMultisample = 59
     * }
     */
    public static int kCGLPFAMultisample() {
        return kCGLPFAMultisample;
    }
    private static final int kCGLPFASupersample = (int)60L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASupersample = 60
     * }
     */
    public static int kCGLPFASupersample() {
        return kCGLPFASupersample;
    }
    private static final int kCGLPFASampleAlpha = (int)61L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASampleAlpha = 61
     * }
     */
    public static int kCGLPFASampleAlpha() {
        return kCGLPFASampleAlpha;
    }
    private static final int kCGLPFARendererID = (int)70L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFARendererID = 70
     * }
     */
    public static int kCGLPFARendererID() {
        return kCGLPFARendererID;
    }
    private static final int kCGLPFANoRecovery = (int)72L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFANoRecovery = 72
     * }
     */
    public static int kCGLPFANoRecovery() {
        return kCGLPFANoRecovery;
    }
    private static final int kCGLPFAAccelerated = (int)73L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAccelerated = 73
     * }
     */
    public static int kCGLPFAAccelerated() {
        return kCGLPFAAccelerated;
    }
    private static final int kCGLPFAClosestPolicy = (int)74L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAClosestPolicy = 74
     * }
     */
    public static int kCGLPFAClosestPolicy() {
        return kCGLPFAClosestPolicy;
    }
    private static final int kCGLPFABackingStore = (int)76L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFABackingStore = 76
     * }
     */
    public static int kCGLPFABackingStore() {
        return kCGLPFABackingStore;
    }
    private static final int kCGLPFABackingVolatile = (int)77L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFABackingVolatile = 77
     * }
     */
    public static int kCGLPFABackingVolatile() {
        return kCGLPFABackingVolatile;
    }
    private static final int kCGLPFADisplayMask = (int)84L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFADisplayMask = 84
     * }
     */
    public static int kCGLPFADisplayMask() {
        return kCGLPFADisplayMask;
    }
    private static final int kCGLPFAAllowOfflineRenderers = (int)96L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAllowOfflineRenderers = 96
     * }
     */
    public static int kCGLPFAAllowOfflineRenderers() {
        return kCGLPFAAllowOfflineRenderers;
    }
    private static final int kCGLPFAAcceleratedCompute = (int)97L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAcceleratedCompute = 97
     * }
     */
    public static int kCGLPFAAcceleratedCompute() {
        return kCGLPFAAcceleratedCompute;
    }
    private static final int kCGLPFAOpenGLProfile = (int)99L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAOpenGLProfile = 99
     * }
     */
    public static int kCGLPFAOpenGLProfile() {
        return kCGLPFAOpenGLProfile;
    }
    private static final int kCGLPFASupportsAutomaticGraphicsSwitching = (int)101L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASupportsAutomaticGraphicsSwitching = 101
     * }
     */
    public static int kCGLPFASupportsAutomaticGraphicsSwitching() {
        return kCGLPFASupportsAutomaticGraphicsSwitching;
    }
    private static final int kCGLPFAVirtualScreenCount = (int)128L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAVirtualScreenCount = 128
     * }
     */
    public static int kCGLPFAVirtualScreenCount() {
        return kCGLPFAVirtualScreenCount;
    }
    private static final int kCGLPFAAuxBuffers = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAuxBuffers = 7
     * }
     */
    public static int kCGLPFAAuxBuffers() {
        return kCGLPFAAuxBuffers;
    }
    private static final int kCGLPFAAccumSize = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAccumSize = 14
     * }
     */
    public static int kCGLPFAAccumSize() {
        return kCGLPFAAccumSize;
    }
    private static final int kCGLPFAAuxDepthStencil = (int)57L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAAuxDepthStencil = 57
     * }
     */
    public static int kCGLPFAAuxDepthStencil() {
        return kCGLPFAAuxDepthStencil;
    }
    private static final int kCGLPFAStereo = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAStereo = 6
     * }
     */
    public static int kCGLPFAStereo() {
        return kCGLPFAStereo;
    }
    private static final int kCGLPFAOffScreen = (int)53L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAOffScreen = 53
     * }
     */
    public static int kCGLPFAOffScreen() {
        return kCGLPFAOffScreen;
    }
    private static final int kCGLPFAWindow = (int)80L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAWindow = 80
     * }
     */
    public static int kCGLPFAWindow() {
        return kCGLPFAWindow;
    }
    private static final int kCGLPFACompliant = (int)83L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFACompliant = 83
     * }
     */
    public static int kCGLPFACompliant() {
        return kCGLPFACompliant;
    }
    private static final int kCGLPFAPBuffer = (int)90L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAPBuffer = 90
     * }
     */
    public static int kCGLPFAPBuffer() {
        return kCGLPFAPBuffer;
    }
    private static final int kCGLPFARemotePBuffer = (int)91L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFARemotePBuffer = 91
     * }
     */
    public static int kCGLPFARemotePBuffer() {
        return kCGLPFARemotePBuffer;
    }
    private static final int kCGLPFASingleRenderer = (int)71L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFASingleRenderer = 71
     * }
     */
    public static int kCGLPFASingleRenderer() {
        return kCGLPFASingleRenderer;
    }
    private static final int kCGLPFARobust = (int)75L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFARobust = 75
     * }
     */
    public static int kCGLPFARobust() {
        return kCGLPFARobust;
    }
    private static final int kCGLPFAMPSafe = (int)78L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAMPSafe = 78
     * }
     */
    public static int kCGLPFAMPSafe() {
        return kCGLPFAMPSafe;
    }
    private static final int kCGLPFAMultiScreen = (int)81L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAMultiScreen = 81
     * }
     */
    public static int kCGLPFAMultiScreen() {
        return kCGLPFAMultiScreen;
    }
    private static final int kCGLPFAFullScreen = (int)54L;
    /**
     * {@snippet lang=c :
     * enum _CGLPixelFormatAttribute.kCGLPFAFullScreen = 54
     * }
     */
    public static int kCGLPFAFullScreen() {
        return kCGLPFAFullScreen;
    }
    private static final int kCGLRPOffScreen = (int)53L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPOffScreen = 53
     * }
     */
    public static int kCGLRPOffScreen() {
        return kCGLRPOffScreen;
    }
    private static final int kCGLRPRendererID = (int)70L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRendererID = 70
     * }
     */
    public static int kCGLRPRendererID() {
        return kCGLRPRendererID;
    }
    private static final int kCGLRPAccelerated = (int)73L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPAccelerated = 73
     * }
     */
    public static int kCGLRPAccelerated() {
        return kCGLRPAccelerated;
    }
    private static final int kCGLRPBackingStore = (int)76L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPBackingStore = 76
     * }
     */
    public static int kCGLRPBackingStore() {
        return kCGLRPBackingStore;
    }
    private static final int kCGLRPWindow = (int)80L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPWindow = 80
     * }
     */
    public static int kCGLRPWindow() {
        return kCGLRPWindow;
    }
    private static final int kCGLRPCompliant = (int)83L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPCompliant = 83
     * }
     */
    public static int kCGLRPCompliant() {
        return kCGLRPCompliant;
    }
    private static final int kCGLRPDisplayMask = (int)84L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPDisplayMask = 84
     * }
     */
    public static int kCGLRPDisplayMask() {
        return kCGLRPDisplayMask;
    }
    private static final int kCGLRPBufferModes = (int)100L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPBufferModes = 100
     * }
     */
    public static int kCGLRPBufferModes() {
        return kCGLRPBufferModes;
    }
    private static final int kCGLRPColorModes = (int)103L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPColorModes = 103
     * }
     */
    public static int kCGLRPColorModes() {
        return kCGLRPColorModes;
    }
    private static final int kCGLRPAccumModes = (int)104L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPAccumModes = 104
     * }
     */
    public static int kCGLRPAccumModes() {
        return kCGLRPAccumModes;
    }
    private static final int kCGLRPDepthModes = (int)105L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPDepthModes = 105
     * }
     */
    public static int kCGLRPDepthModes() {
        return kCGLRPDepthModes;
    }
    private static final int kCGLRPStencilModes = (int)106L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPStencilModes = 106
     * }
     */
    public static int kCGLRPStencilModes() {
        return kCGLRPStencilModes;
    }
    private static final int kCGLRPMaxAuxBuffers = (int)107L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMaxAuxBuffers = 107
     * }
     */
    public static int kCGLRPMaxAuxBuffers() {
        return kCGLRPMaxAuxBuffers;
    }
    private static final int kCGLRPMaxSampleBuffers = (int)108L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMaxSampleBuffers = 108
     * }
     */
    public static int kCGLRPMaxSampleBuffers() {
        return kCGLRPMaxSampleBuffers;
    }
    private static final int kCGLRPMaxSamples = (int)109L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMaxSamples = 109
     * }
     */
    public static int kCGLRPMaxSamples() {
        return kCGLRPMaxSamples;
    }
    private static final int kCGLRPSampleModes = (int)110L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPSampleModes = 110
     * }
     */
    public static int kCGLRPSampleModes() {
        return kCGLRPSampleModes;
    }
    private static final int kCGLRPSampleAlpha = (int)111L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPSampleAlpha = 111
     * }
     */
    public static int kCGLRPSampleAlpha() {
        return kCGLRPSampleAlpha;
    }
    private static final int kCGLRPGPUVertProcCapable = (int)122L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPGPUVertProcCapable = 122
     * }
     */
    public static int kCGLRPGPUVertProcCapable() {
        return kCGLRPGPUVertProcCapable;
    }
    private static final int kCGLRPGPUFragProcCapable = (int)123L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPGPUFragProcCapable = 123
     * }
     */
    public static int kCGLRPGPUFragProcCapable() {
        return kCGLRPGPUFragProcCapable;
    }
    private static final int kCGLRPRendererCount = (int)128L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRendererCount = 128
     * }
     */
    public static int kCGLRPRendererCount() {
        return kCGLRPRendererCount;
    }
    private static final int kCGLRPOnline = (int)129L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPOnline = 129
     * }
     */
    public static int kCGLRPOnline() {
        return kCGLRPOnline;
    }
    private static final int kCGLRPAcceleratedCompute = (int)130L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPAcceleratedCompute = 130
     * }
     */
    public static int kCGLRPAcceleratedCompute() {
        return kCGLRPAcceleratedCompute;
    }
    private static final int kCGLRPVideoMemoryMegabytes = (int)131L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPVideoMemoryMegabytes = 131
     * }
     */
    public static int kCGLRPVideoMemoryMegabytes() {
        return kCGLRPVideoMemoryMegabytes;
    }
    private static final int kCGLRPTextureMemoryMegabytes = (int)132L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPTextureMemoryMegabytes = 132
     * }
     */
    public static int kCGLRPTextureMemoryMegabytes() {
        return kCGLRPTextureMemoryMegabytes;
    }
    private static final int kCGLRPMajorGLVersion = (int)133L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMajorGLVersion = 133
     * }
     */
    public static int kCGLRPMajorGLVersion() {
        return kCGLRPMajorGLVersion;
    }
    private static final int kCGLRPRegistryIDLow = (int)140L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRegistryIDLow = 140
     * }
     */
    public static int kCGLRPRegistryIDLow() {
        return kCGLRPRegistryIDLow;
    }
    private static final int kCGLRPRegistryIDHigh = (int)141L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRegistryIDHigh = 141
     * }
     */
    public static int kCGLRPRegistryIDHigh() {
        return kCGLRPRegistryIDHigh;
    }
    private static final int kCGLRPRemovable = (int)142L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRemovable = 142
     * }
     */
    public static int kCGLRPRemovable() {
        return kCGLRPRemovable;
    }
    private static final int kCGLRPRobust = (int)75L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPRobust = 75
     * }
     */
    public static int kCGLRPRobust() {
        return kCGLRPRobust;
    }
    private static final int kCGLRPMPSafe = (int)78L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMPSafe = 78
     * }
     */
    public static int kCGLRPMPSafe() {
        return kCGLRPMPSafe;
    }
    private static final int kCGLRPMultiScreen = (int)81L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPMultiScreen = 81
     * }
     */
    public static int kCGLRPMultiScreen() {
        return kCGLRPMultiScreen;
    }
    private static final int kCGLRPFullScreen = (int)54L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPFullScreen = 54
     * }
     */
    public static int kCGLRPFullScreen() {
        return kCGLRPFullScreen;
    }
    private static final int kCGLRPVideoMemory = (int)120L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPVideoMemory = 120
     * }
     */
    public static int kCGLRPVideoMemory() {
        return kCGLRPVideoMemory;
    }
    private static final int kCGLRPTextureMemory = (int)121L;
    /**
     * {@snippet lang=c :
     * enum _CGLRendererProperty.kCGLRPTextureMemory = 121
     * }
     */
    public static int kCGLRPTextureMemory() {
        return kCGLRPTextureMemory;
    }
    private static final int kCGLCESwapRectangle = (int)201L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCESwapRectangle = 201
     * }
     */
    public static int kCGLCESwapRectangle() {
        return kCGLCESwapRectangle;
    }
    private static final int kCGLCESwapLimit = (int)203L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCESwapLimit = 203
     * }
     */
    public static int kCGLCESwapLimit() {
        return kCGLCESwapLimit;
    }
    private static final int kCGLCERasterization = (int)221L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCERasterization = 221
     * }
     */
    public static int kCGLCERasterization() {
        return kCGLCERasterization;
    }
    private static final int kCGLCEStateValidation = (int)301L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCEStateValidation = 301
     * }
     */
    public static int kCGLCEStateValidation() {
        return kCGLCEStateValidation;
    }
    private static final int kCGLCESurfaceBackingSize = (int)305L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCESurfaceBackingSize = 305
     * }
     */
    public static int kCGLCESurfaceBackingSize() {
        return kCGLCESurfaceBackingSize;
    }
    private static final int kCGLCEDisplayListOptimization = (int)307L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCEDisplayListOptimization = 307
     * }
     */
    public static int kCGLCEDisplayListOptimization() {
        return kCGLCEDisplayListOptimization;
    }
    private static final int kCGLCEMPEngine = (int)313L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCEMPEngine = 313
     * }
     */
    public static int kCGLCEMPEngine() {
        return kCGLCEMPEngine;
    }
    private static final int kCGLCECrashOnRemovedFunctions = (int)316L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextEnable.kCGLCECrashOnRemovedFunctions = 316
     * }
     */
    public static int kCGLCECrashOnRemovedFunctions() {
        return kCGLCECrashOnRemovedFunctions;
    }
    private static final int kCGLCPGPURestartStatusNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CGLGPURestartStatus.kCGLCPGPURestartStatusNone = 0
     * }
     */
    public static int kCGLCPGPURestartStatusNone() {
        return kCGLCPGPURestartStatusNone;
    }
    private static final int kCGLCPGPURestartStatusCaused = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CGLGPURestartStatus.kCGLCPGPURestartStatusCaused = 1
     * }
     */
    public static int kCGLCPGPURestartStatusCaused() {
        return kCGLCPGPURestartStatusCaused;
    }
    private static final int kCGLCPGPURestartStatusBlacklisted = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CGLGPURestartStatus.kCGLCPGPURestartStatusBlacklisted = 2
     * }
     */
    public static int kCGLCPGPURestartStatusBlacklisted() {
        return kCGLCPGPURestartStatusBlacklisted;
    }
    private static final int kCGLCPGPURestartStatusDenied = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CGLGPURestartStatus.kCGLCPGPURestartStatusDenied = 2
     * }
     */
    public static int kCGLCPGPURestartStatusDenied() {
        return kCGLCPGPURestartStatusDenied;
    }
    private static final int kCGLCPSwapRectangle = (int)200L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSwapRectangle = 200
     * }
     */
    public static int kCGLCPSwapRectangle() {
        return kCGLCPSwapRectangle;
    }
    private static final int kCGLCPSwapInterval = (int)222L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSwapInterval = 222
     * }
     */
    public static int kCGLCPSwapInterval() {
        return kCGLCPSwapInterval;
    }
    private static final int kCGLCPDispatchTableSize = (int)224L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPDispatchTableSize = 224
     * }
     */
    public static int kCGLCPDispatchTableSize() {
        return kCGLCPDispatchTableSize;
    }
    private static final int kCGLCPClientStorage = (int)226L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPClientStorage = 226
     * }
     */
    public static int kCGLCPClientStorage() {
        return kCGLCPClientStorage;
    }
    private static final int kCGLCPSurfaceTexture = (int)228L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSurfaceTexture = 228
     * }
     */
    public static int kCGLCPSurfaceTexture() {
        return kCGLCPSurfaceTexture;
    }
    private static final int kCGLCPSurfaceOrder = (int)235L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSurfaceOrder = 235
     * }
     */
    public static int kCGLCPSurfaceOrder() {
        return kCGLCPSurfaceOrder;
    }
    private static final int kCGLCPSurfaceOpacity = (int)236L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSurfaceOpacity = 236
     * }
     */
    public static int kCGLCPSurfaceOpacity() {
        return kCGLCPSurfaceOpacity;
    }
    private static final int kCGLCPSurfaceBackingSize = (int)304L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSurfaceBackingSize = 304
     * }
     */
    public static int kCGLCPSurfaceBackingSize() {
        return kCGLCPSurfaceBackingSize;
    }
    private static final int kCGLCPSurfaceSurfaceVolatile = (int)306L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSurfaceSurfaceVolatile = 306
     * }
     */
    public static int kCGLCPSurfaceSurfaceVolatile() {
        return kCGLCPSurfaceSurfaceVolatile;
    }
    private static final int kCGLCPReclaimResources = (int)308L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPReclaimResources = 308
     * }
     */
    public static int kCGLCPReclaimResources() {
        return kCGLCPReclaimResources;
    }
    private static final int kCGLCPCurrentRendererID = (int)309L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPCurrentRendererID = 309
     * }
     */
    public static int kCGLCPCurrentRendererID() {
        return kCGLCPCurrentRendererID;
    }
    private static final int kCGLCPGPUVertexProcessing = (int)310L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPGPUVertexProcessing = 310
     * }
     */
    public static int kCGLCPGPUVertexProcessing() {
        return kCGLCPGPUVertexProcessing;
    }
    private static final int kCGLCPGPUFragmentProcessing = (int)311L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPGPUFragmentProcessing = 311
     * }
     */
    public static int kCGLCPGPUFragmentProcessing() {
        return kCGLCPGPUFragmentProcessing;
    }
    private static final int kCGLCPHasDrawable = (int)314L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPHasDrawable = 314
     * }
     */
    public static int kCGLCPHasDrawable() {
        return kCGLCPHasDrawable;
    }
    private static final int kCGLCPMPSwapsInFlight = (int)315L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPMPSwapsInFlight = 315
     * }
     */
    public static int kCGLCPMPSwapsInFlight() {
        return kCGLCPMPSwapsInFlight;
    }
    private static final int kCGLCPGPURestartStatus = (int)317L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPGPURestartStatus = 317
     * }
     */
    public static int kCGLCPGPURestartStatus() {
        return kCGLCPGPURestartStatus;
    }
    private static final int kCGLCPAbortOnGPURestartStatusBlacklisted = (int)318L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPAbortOnGPURestartStatusBlacklisted = 318
     * }
     */
    public static int kCGLCPAbortOnGPURestartStatusBlacklisted() {
        return kCGLCPAbortOnGPURestartStatusBlacklisted;
    }
    private static final int kCGLCPAbortOnGPURestartStatusDenied = (int)318L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPAbortOnGPURestartStatusDenied = 318
     * }
     */
    public static int kCGLCPAbortOnGPURestartStatusDenied() {
        return kCGLCPAbortOnGPURestartStatusDenied;
    }
    private static final int kCGLCPSupportGPURestart = (int)319L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSupportGPURestart = 319
     * }
     */
    public static int kCGLCPSupportGPURestart() {
        return kCGLCPSupportGPURestart;
    }
    private static final int kCGLCPSupportSeparateAddressSpace = (int)320L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPSupportSeparateAddressSpace = 320
     * }
     */
    public static int kCGLCPSupportSeparateAddressSpace() {
        return kCGLCPSupportSeparateAddressSpace;
    }
    private static final int kCGLCPContextPriorityRequest = (int)608L;
    /**
     * {@snippet lang=c :
     * enum _CGLContextParameter.kCGLCPContextPriorityRequest = 608
     * }
     */
    public static int kCGLCPContextPriorityRequest() {
        return kCGLCPContextPriorityRequest;
    }
    private static final int kCGLCPContextPriorityRequestHigh = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLCPContextPriorityRequestHigh = 0
     * }
     */
    public static int kCGLCPContextPriorityRequestHigh() {
        return kCGLCPContextPriorityRequestHigh;
    }
    private static final int kCGLCPContextPriorityRequestNormal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLCPContextPriorityRequestNormal = 1
     * }
     */
    public static int kCGLCPContextPriorityRequestNormal() {
        return kCGLCPContextPriorityRequestNormal;
    }
    private static final int kCGLCPContextPriorityRequestLow = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLCPContextPriorityRequestLow = 2
     * }
     */
    public static int kCGLCPContextPriorityRequestLow() {
        return kCGLCPContextPriorityRequestLow;
    }
    private static final int kCGLGOFormatCacheSize = (int)501L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGOFormatCacheSize = 501
     * }
     */
    public static int kCGLGOFormatCacheSize() {
        return kCGLGOFormatCacheSize;
    }
    private static final int kCGLGOClearFormatCache = (int)502L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGOClearFormatCache = 502
     * }
     */
    public static int kCGLGOClearFormatCache() {
        return kCGLGOClearFormatCache;
    }
    private static final int kCGLGORetainRenderers = (int)503L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGORetainRenderers = 503
     * }
     */
    public static int kCGLGORetainRenderers() {
        return kCGLGORetainRenderers;
    }
    private static final int kCGLGOUseBuildCache = (int)506L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGOUseBuildCache = 506
     * }
     */
    public static int kCGLGOUseBuildCache() {
        return kCGLGOUseBuildCache;
    }
    private static final int kCGLGOResetLibrary = (int)504L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGOResetLibrary = 504
     * }
     */
    public static int kCGLGOResetLibrary() {
        return kCGLGOResetLibrary;
    }
    private static final int kCGLGOUseErrorHandler = (int)505L;
    /**
     * {@snippet lang=c :
     * enum _CGLGlobalOption.kCGLGOUseErrorHandler = 505
     * }
     */
    public static int kCGLGOUseErrorHandler() {
        return kCGLGOUseErrorHandler;
    }
    private static final int kCGLOGLPVersion_Legacy = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum _CGLOpenGLProfile.kCGLOGLPVersion_Legacy = 4096
     * }
     */
    public static int kCGLOGLPVersion_Legacy() {
        return kCGLOGLPVersion_Legacy;
    }
    private static final int kCGLOGLPVersion_3_2_Core = (int)12800L;
    /**
     * {@snippet lang=c :
     * enum _CGLOpenGLProfile.kCGLOGLPVersion_3_2_Core = 12800
     * }
     */
    public static int kCGLOGLPVersion_3_2_Core() {
        return kCGLOGLPVersion_3_2_Core;
    }
    private static final int kCGLOGLPVersion_GL3_Core = (int)12800L;
    /**
     * {@snippet lang=c :
     * enum _CGLOpenGLProfile.kCGLOGLPVersion_GL3_Core = 12800
     * }
     */
    public static int kCGLOGLPVersion_GL3_Core() {
        return kCGLOGLPVersion_GL3_Core;
    }
    private static final int kCGLOGLPVersion_GL4_Core = (int)16640L;
    /**
     * {@snippet lang=c :
     * enum _CGLOpenGLProfile.kCGLOGLPVersion_GL4_Core = 16640
     * }
     */
    public static int kCGLOGLPVersion_GL4_Core() {
        return kCGLOGLPVersion_GL4_Core;
    }
    private static final int kCGLNoError = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLNoError = 0
     * }
     */
    public static int kCGLNoError() {
        return kCGLNoError;
    }
    private static final int kCGLBadAttribute = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadAttribute = 10000
     * }
     */
    public static int kCGLBadAttribute() {
        return kCGLBadAttribute;
    }
    private static final int kCGLBadProperty = (int)10001L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadProperty = 10001
     * }
     */
    public static int kCGLBadProperty() {
        return kCGLBadProperty;
    }
    private static final int kCGLBadPixelFormat = (int)10002L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadPixelFormat = 10002
     * }
     */
    public static int kCGLBadPixelFormat() {
        return kCGLBadPixelFormat;
    }
    private static final int kCGLBadRendererInfo = (int)10003L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadRendererInfo = 10003
     * }
     */
    public static int kCGLBadRendererInfo() {
        return kCGLBadRendererInfo;
    }
    private static final int kCGLBadContext = (int)10004L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadContext = 10004
     * }
     */
    public static int kCGLBadContext() {
        return kCGLBadContext;
    }
    private static final int kCGLBadDrawable = (int)10005L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadDrawable = 10005
     * }
     */
    public static int kCGLBadDrawable() {
        return kCGLBadDrawable;
    }
    private static final int kCGLBadDisplay = (int)10006L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadDisplay = 10006
     * }
     */
    public static int kCGLBadDisplay() {
        return kCGLBadDisplay;
    }
    private static final int kCGLBadState = (int)10007L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadState = 10007
     * }
     */
    public static int kCGLBadState() {
        return kCGLBadState;
    }
    private static final int kCGLBadValue = (int)10008L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadValue = 10008
     * }
     */
    public static int kCGLBadValue() {
        return kCGLBadValue;
    }
    private static final int kCGLBadMatch = (int)10009L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadMatch = 10009
     * }
     */
    public static int kCGLBadMatch() {
        return kCGLBadMatch;
    }
    private static final int kCGLBadEnumeration = (int)10010L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadEnumeration = 10010
     * }
     */
    public static int kCGLBadEnumeration() {
        return kCGLBadEnumeration;
    }
    private static final int kCGLBadOffScreen = (int)10011L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadOffScreen = 10011
     * }
     */
    public static int kCGLBadOffScreen() {
        return kCGLBadOffScreen;
    }
    private static final int kCGLBadFullScreen = (int)10012L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadFullScreen = 10012
     * }
     */
    public static int kCGLBadFullScreen() {
        return kCGLBadFullScreen;
    }
    private static final int kCGLBadWindow = (int)10013L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadWindow = 10013
     * }
     */
    public static int kCGLBadWindow() {
        return kCGLBadWindow;
    }
    private static final int kCGLBadAddress = (int)10014L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadAddress = 10014
     * }
     */
    public static int kCGLBadAddress() {
        return kCGLBadAddress;
    }
    private static final int kCGLBadCodeModule = (int)10015L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadCodeModule = 10015
     * }
     */
    public static int kCGLBadCodeModule() {
        return kCGLBadCodeModule;
    }
    private static final int kCGLBadAlloc = (int)10016L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadAlloc = 10016
     * }
     */
    public static int kCGLBadAlloc() {
        return kCGLBadAlloc;
    }
    private static final int kCGLBadConnection = (int)10017L;
    /**
     * {@snippet lang=c :
     * enum _CGLError.kCGLBadConnection = 10017
     * }
     */
    public static int kCGLBadConnection() {
        return kCGLBadConnection;
    }

    private static class CGLSetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetCurrentContext(CGLContextObj  _Nullable ctx)
     * }
     */
    public static FunctionDescriptor CGLSetCurrentContext$descriptor() {
        return CGLSetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetCurrentContext(CGLContextObj  _Nullable ctx)
     * }
     */
    public static MethodHandle CGLSetCurrentContext$handle() {
        return CGLSetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetCurrentContext(CGLContextObj  _Nullable ctx)
     * }
     */
    public static MemorySegment CGLSetCurrentContext$address() {
        return CGLSetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetCurrentContext(CGLContextObj  _Nullable ctx)
     * }
     */
    public static int CGLSetCurrentContext(MemorySegment ctx) {
        var mh$ = CGLSetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetCurrentContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER    );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nullable CGLGetCurrentContext()
     * }
     */
    public static FunctionDescriptor CGLGetCurrentContext$descriptor() {
        return CGLGetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nullable CGLGetCurrentContext()
     * }
     */
    public static MethodHandle CGLGetCurrentContext$handle() {
        return CGLGetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nullable CGLGetCurrentContext()
     * }
     */
    public static MemorySegment CGLGetCurrentContext$address() {
        return CGLGetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLContextObj  _Nullable CGLGetCurrentContext()
     * }
     */
    public static MemorySegment CGLGetCurrentContext() {
        var mh$ = CGLGetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetCurrentContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLbitfield
     * }
     */
    public static final OfInt GLbitfield = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint8_t GLboolean
     * }
     */
    public static final OfByte GLboolean = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int8_t GLbyte
     * }
     */
    public static final OfByte GLbyte = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef float GLclampf
     * }
     */
    public static final OfFloat GLclampf = cgl_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLenum
     * }
     */
    public static final OfInt GLenum = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef float GLfloat
     * }
     */
    public static final OfFloat GLfloat = cgl_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLint
     * }
     */
    public static final OfInt GLint = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int16_t GLshort
     * }
     */
    public static final OfShort GLshort = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLsizei
     * }
     */
    public static final OfInt GLsizei = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint8_t GLubyte
     * }
     */
    public static final OfByte GLubyte = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint32_t GLuint
     * }
     */
    public static final OfInt GLuint = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLushort
     * }
     */
    public static final OfShort GLushort = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef char GLchar
     * }
     */
    public static final OfByte GLchar = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef char GLcharARB
     * }
     */
    public static final OfByte GLcharARB = cgl_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef void *GLhandleARB
     * }
     */
    public static final AddressLayout GLhandleARB = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef double GLdouble
     * }
     */
    public static final OfDouble GLdouble = cgl_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double GLclampd
     * }
     */
    public static final OfDouble GLclampd = cgl_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef int32_t GLfixed
     * }
     */
    public static final OfInt GLfixed = cgl_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLhalf
     * }
     */
    public static final OfShort GLhalf = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t GLhalfARB
     * }
     */
    public static final OfShort GLhalfARB = cgl_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int64_t GLint64
     * }
     */
    public static final OfLong GLint64 = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct __GLsync *GLsync
     * }
     */
    public static final AddressLayout GLsync = cgl_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef uint64_t GLuint64
     * }
     */
    public static final OfLong GLuint64 = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t GLint64EXT
     * }
     */
    public static final OfLong GLint64EXT = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint64_t GLuint64EXT
     * }
     */
    public static final OfLong GLuint64EXT = cgl_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLintptr
     * }
     */
    public static final OfLong GLintptr = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLsizeiptr
     * }
     */
    public static final OfLong GLsizeiptr = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLintptrARB
     * }
     */
    public static final OfLong GLintptrARB = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef intptr_t GLsizeiptrARB
     * }
     */
    public static final OfLong GLsizeiptrARB = cgl_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct CGLShareGroupRec *CGLShareGroupObj
     * }
     */
    public static final AddressLayout CGLShareGroupObj = cgl_h.C_POINTER;

    private static class CGLGetShareGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetShareGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * CGLShareGroupObj  _Nullable CGLGetShareGroup(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLGetShareGroup$descriptor() {
        return CGLGetShareGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * CGLShareGroupObj  _Nullable CGLGetShareGroup(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLGetShareGroup$handle() {
        return CGLGetShareGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * CGLShareGroupObj  _Nullable CGLGetShareGroup(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLGetShareGroup$address() {
        return CGLGetShareGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * CGLShareGroupObj  _Nullable CGLGetShareGroup(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLGetShareGroup(MemorySegment ctx) {
        var mh$ = CGLGetShareGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetShareGroup", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _cl_device_id *cl_device_id
     * }
     */
    public static final AddressLayout cl_device_id = cgl_h.C_POINTER;

    private static class CGLGetDeviceFromGLRenderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetDeviceFromGLRenderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * cl_device_id  _Nonnull CGLGetDeviceFromGLRenderer(GLint rendererID)
     * }
     */
    public static FunctionDescriptor CGLGetDeviceFromGLRenderer$descriptor() {
        return CGLGetDeviceFromGLRenderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * cl_device_id  _Nonnull CGLGetDeviceFromGLRenderer(GLint rendererID)
     * }
     */
    public static MethodHandle CGLGetDeviceFromGLRenderer$handle() {
        return CGLGetDeviceFromGLRenderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * cl_device_id  _Nonnull CGLGetDeviceFromGLRenderer(GLint rendererID)
     * }
     */
    public static MemorySegment CGLGetDeviceFromGLRenderer$address() {
        return CGLGetDeviceFromGLRenderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * cl_device_id  _Nonnull CGLGetDeviceFromGLRenderer(GLint rendererID)
     * }
     */
    public static MemorySegment CGLGetDeviceFromGLRenderer(int rendererID) {
        var mh$ = CGLGetDeviceFromGLRenderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetDeviceFromGLRenderer", rendererID);
            }
            return (MemorySegment)mh$.invokeExact(rendererID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int kCGLRendererGenericID = (int)131584L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGenericID = 131584
     * }
     */
    public static int kCGLRendererGenericID() {
        return kCGLRendererGenericID;
    }
    private static final int kCGLRendererGenericFloatID = (int)132096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGenericFloatID = 132096
     * }
     */
    public static int kCGLRendererGenericFloatID() {
        return kCGLRendererGenericFloatID;
    }
    private static final int kCGLRendererAppleSWID = (int)132608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererAppleSWID = 132608
     * }
     */
    public static int kCGLRendererAppleSWID() {
        return kCGLRendererAppleSWID;
    }
    private static final int kCGLRendererATIRage128ID = (int)135168L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRage128ID = 135168
     * }
     */
    public static int kCGLRendererATIRage128ID() {
        return kCGLRendererATIRage128ID;
    }
    private static final int kCGLRendererATIRadeonID = (int)135680L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeonID = 135680
     * }
     */
    public static int kCGLRendererATIRadeonID() {
        return kCGLRendererATIRadeonID;
    }
    private static final int kCGLRendererATIRageProID = (int)136192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRageProID = 136192
     * }
     */
    public static int kCGLRendererATIRageProID() {
        return kCGLRendererATIRageProID;
    }
    private static final int kCGLRendererATIRadeon8500ID = (int)136704L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeon8500ID = 136704
     * }
     */
    public static int kCGLRendererATIRadeon8500ID() {
        return kCGLRendererATIRadeon8500ID;
    }
    private static final int kCGLRendererATIRadeon9700ID = (int)137216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeon9700ID = 137216
     * }
     */
    public static int kCGLRendererATIRadeon9700ID() {
        return kCGLRendererATIRadeon9700ID;
    }
    private static final int kCGLRendererATIRadeonX1000ID = (int)137472L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeonX1000ID = 137472
     * }
     */
    public static int kCGLRendererATIRadeonX1000ID() {
        return kCGLRendererATIRadeonX1000ID;
    }
    private static final int kCGLRendererATIRadeonX2000ID = (int)137728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeonX2000ID = 137728
     * }
     */
    public static int kCGLRendererATIRadeonX2000ID() {
        return kCGLRendererATIRadeonX2000ID;
    }
    private static final int kCGLRendererATIRadeonX3000ID = (int)137984L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeonX3000ID = 137984
     * }
     */
    public static int kCGLRendererATIRadeonX3000ID() {
        return kCGLRendererATIRadeonX3000ID;
    }
    private static final int kCGLRendererATIRadeonX4000ID = (int)138240L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererATIRadeonX4000ID = 138240
     * }
     */
    public static int kCGLRendererATIRadeonX4000ID() {
        return kCGLRendererATIRadeonX4000ID;
    }
    private static final int kCGLRendererGeForce2MXID = (int)139264L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGeForce2MXID = 139264
     * }
     */
    public static int kCGLRendererGeForce2MXID() {
        return kCGLRendererGeForce2MXID;
    }
    private static final int kCGLRendererGeForce3ID = (int)139776L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGeForce3ID = 139776
     * }
     */
    public static int kCGLRendererGeForce3ID() {
        return kCGLRendererGeForce3ID;
    }
    private static final int kCGLRendererGeForceFXID = (int)140288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGeForceFXID = 140288
     * }
     */
    public static int kCGLRendererGeForceFXID() {
        return kCGLRendererGeForceFXID;
    }
    private static final int kCGLRendererGeForce8xxxID = (int)140800L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGeForce8xxxID = 140800
     * }
     */
    public static int kCGLRendererGeForce8xxxID() {
        return kCGLRendererGeForce8xxxID;
    }
    private static final int kCGLRendererGeForceID = (int)141056L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererGeForceID = 141056
     * }
     */
    public static int kCGLRendererGeForceID() {
        return kCGLRendererGeForceID;
    }
    private static final int kCGLRendererVTBladeXP2ID = (int)143360L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererVTBladeXP2ID = 143360
     * }
     */
    public static int kCGLRendererVTBladeXP2ID() {
        return kCGLRendererVTBladeXP2ID;
    }
    private static final int kCGLRendererIntel900ID = (int)147456L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererIntel900ID = 147456
     * }
     */
    public static int kCGLRendererIntel900ID() {
        return kCGLRendererIntel900ID;
    }
    private static final int kCGLRendererIntelX3100ID = (int)147968L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererIntelX3100ID = 147968
     * }
     */
    public static int kCGLRendererIntelX3100ID() {
        return kCGLRendererIntelX3100ID;
    }
    private static final int kCGLRendererIntelHDID = (int)148224L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererIntelHDID = 148224
     * }
     */
    public static int kCGLRendererIntelHDID() {
        return kCGLRendererIntelHDID;
    }
    private static final int kCGLRendererIntelHD4000ID = (int)148480L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererIntelHD4000ID = 148480
     * }
     */
    public static int kCGLRendererIntelHD4000ID() {
        return kCGLRendererIntelHD4000ID;
    }
    private static final int kCGLRendererIntelHD5000ID = (int)148736L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererIntelHD5000ID = 148736
     * }
     */
    public static int kCGLRendererIntelHD5000ID() {
        return kCGLRendererIntelHD5000ID;
    }
    private static final int kCGLRendererMesa3DFXID = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kCGLRendererMesa3DFXID = 262144
     * }
     */
    public static int kCGLRendererMesa3DFXID() {
        return kCGLRendererMesa3DFXID;
    }
    /**
     * {@snippet lang=c :
     * typedef struct __IOSurface *IOSurfaceRef
     * }
     */
    public static final AddressLayout IOSurfaceRef = cgl_h.C_POINTER;

    private static class CGLTexImageIOSurface2D {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLTexImageIOSurface2D");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImageIOSurface2D(CGLContextObj  _Nonnull ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef  _Nonnull ioSurface, GLuint plane)
     * }
     */
    public static FunctionDescriptor CGLTexImageIOSurface2D$descriptor() {
        return CGLTexImageIOSurface2D.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImageIOSurface2D(CGLContextObj  _Nonnull ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef  _Nonnull ioSurface, GLuint plane)
     * }
     */
    public static MethodHandle CGLTexImageIOSurface2D$handle() {
        return CGLTexImageIOSurface2D.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImageIOSurface2D(CGLContextObj  _Nonnull ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef  _Nonnull ioSurface, GLuint plane)
     * }
     */
    public static MemorySegment CGLTexImageIOSurface2D$address() {
        return CGLTexImageIOSurface2D.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLTexImageIOSurface2D(CGLContextObj  _Nonnull ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef  _Nonnull ioSurface, GLuint plane)
     * }
     */
    public static int CGLTexImageIOSurface2D(MemorySegment ctx, int target, int internal_format, int width, int height, int format, int type, MemorySegment ioSurface, int plane) {
        var mh$ = CGLTexImageIOSurface2D.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLTexImageIOSurface2D", ctx, target, internal_format, width, height, format, type, ioSurface, plane);
            }
            return (int)mh$.invokeExact(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLChoosePixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLChoosePixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLChoosePixelFormat(const CGLPixelFormatAttribute * _Nonnull attribs, CGLPixelFormatObj  _Nullable * _Nonnull pix, GLint * _Nonnull npix)
     * }
     */
    public static FunctionDescriptor CGLChoosePixelFormat$descriptor() {
        return CGLChoosePixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLChoosePixelFormat(const CGLPixelFormatAttribute * _Nonnull attribs, CGLPixelFormatObj  _Nullable * _Nonnull pix, GLint * _Nonnull npix)
     * }
     */
    public static MethodHandle CGLChoosePixelFormat$handle() {
        return CGLChoosePixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLChoosePixelFormat(const CGLPixelFormatAttribute * _Nonnull attribs, CGLPixelFormatObj  _Nullable * _Nonnull pix, GLint * _Nonnull npix)
     * }
     */
    public static MemorySegment CGLChoosePixelFormat$address() {
        return CGLChoosePixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLChoosePixelFormat(const CGLPixelFormatAttribute * _Nonnull attribs, CGLPixelFormatObj  _Nullable * _Nonnull pix, GLint * _Nonnull npix)
     * }
     */
    public static int CGLChoosePixelFormat(MemorySegment attribs, MemorySegment pix, MemorySegment npix) {
        var mh$ = CGLChoosePixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLChoosePixelFormat", attribs, pix, npix);
            }
            return (int)mh$.invokeExact(attribs, pix, npix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDestroyPixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDestroyPixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static FunctionDescriptor CGLDestroyPixelFormat$descriptor() {
        return CGLDestroyPixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MethodHandle CGLDestroyPixelFormat$handle() {
        return CGLDestroyPixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MemorySegment CGLDestroyPixelFormat$address() {
        return CGLDestroyPixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static int CGLDestroyPixelFormat(MemorySegment pix) {
        var mh$ = CGLDestroyPixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDestroyPixelFormat", pix);
            }
            return (int)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDescribePixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDescribePixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePixelFormat(CGLPixelFormatObj  _Nonnull pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint * _Nonnull value)
     * }
     */
    public static FunctionDescriptor CGLDescribePixelFormat$descriptor() {
        return CGLDescribePixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePixelFormat(CGLPixelFormatObj  _Nonnull pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint * _Nonnull value)
     * }
     */
    public static MethodHandle CGLDescribePixelFormat$handle() {
        return CGLDescribePixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePixelFormat(CGLPixelFormatObj  _Nonnull pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint * _Nonnull value)
     * }
     */
    public static MemorySegment CGLDescribePixelFormat$address() {
        return CGLDescribePixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDescribePixelFormat(CGLPixelFormatObj  _Nonnull pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint * _Nonnull value)
     * }
     */
    public static int CGLDescribePixelFormat(MemorySegment pix, int pix_num, int attrib, MemorySegment value) {
        var mh$ = CGLDescribePixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDescribePixelFormat", pix, pix_num, attrib, value);
            }
            return (int)mh$.invokeExact(pix, pix_num, attrib, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLReleasePixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLReleasePixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CGLReleasePixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static FunctionDescriptor CGLReleasePixelFormat$descriptor() {
        return CGLReleasePixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CGLReleasePixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MethodHandle CGLReleasePixelFormat$handle() {
        return CGLReleasePixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CGLReleasePixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MemorySegment CGLReleasePixelFormat$address() {
        return CGLReleasePixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CGLReleasePixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static void CGLReleasePixelFormat(MemorySegment pix) {
        var mh$ = CGLReleasePixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLReleasePixelFormat", pix);
            }
            mh$.invokeExact(pix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLRetainPixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLRetainPixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nonnull CGLRetainPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static FunctionDescriptor CGLRetainPixelFormat$descriptor() {
        return CGLRetainPixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nonnull CGLRetainPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MethodHandle CGLRetainPixelFormat$handle() {
        return CGLRetainPixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nonnull CGLRetainPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MemorySegment CGLRetainPixelFormat$address() {
        return CGLRetainPixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nonnull CGLRetainPixelFormat(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MemorySegment CGLRetainPixelFormat(MemorySegment pix) {
        var mh$ = CGLRetainPixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLRetainPixelFormat", pix);
            }
            return (MemorySegment)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetPixelFormatRetainCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetPixelFormatRetainCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPixelFormatRetainCount(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static FunctionDescriptor CGLGetPixelFormatRetainCount$descriptor() {
        return CGLGetPixelFormatRetainCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPixelFormatRetainCount(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MethodHandle CGLGetPixelFormatRetainCount$handle() {
        return CGLGetPixelFormatRetainCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPixelFormatRetainCount(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static MemorySegment CGLGetPixelFormatRetainCount$address() {
        return CGLGetPixelFormatRetainCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint CGLGetPixelFormatRetainCount(CGLPixelFormatObj  _Nonnull pix)
     * }
     */
    public static int CGLGetPixelFormatRetainCount(MemorySegment pix) {
        var mh$ = CGLGetPixelFormatRetainCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetPixelFormatRetainCount", pix);
            }
            return (int)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLQueryRendererInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLQueryRendererInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj  _Nullable * _Nonnull rend, GLint * _Nonnull nrend)
     * }
     */
    public static FunctionDescriptor CGLQueryRendererInfo$descriptor() {
        return CGLQueryRendererInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj  _Nullable * _Nonnull rend, GLint * _Nonnull nrend)
     * }
     */
    public static MethodHandle CGLQueryRendererInfo$handle() {
        return CGLQueryRendererInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj  _Nullable * _Nonnull rend, GLint * _Nonnull nrend)
     * }
     */
    public static MemorySegment CGLQueryRendererInfo$address() {
        return CGLQueryRendererInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj  _Nullable * _Nonnull rend, GLint * _Nonnull nrend)
     * }
     */
    public static int CGLQueryRendererInfo(int display_mask, MemorySegment rend, MemorySegment nrend) {
        var mh$ = CGLQueryRendererInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLQueryRendererInfo", display_mask, rend, nrend);
            }
            return (int)mh$.invokeExact(display_mask, rend, nrend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDestroyRendererInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDestroyRendererInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyRendererInfo(CGLRendererInfoObj  _Nonnull rend)
     * }
     */
    public static FunctionDescriptor CGLDestroyRendererInfo$descriptor() {
        return CGLDestroyRendererInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyRendererInfo(CGLRendererInfoObj  _Nonnull rend)
     * }
     */
    public static MethodHandle CGLDestroyRendererInfo$handle() {
        return CGLDestroyRendererInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyRendererInfo(CGLRendererInfoObj  _Nonnull rend)
     * }
     */
    public static MemorySegment CGLDestroyRendererInfo$address() {
        return CGLDestroyRendererInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDestroyRendererInfo(CGLRendererInfoObj  _Nonnull rend)
     * }
     */
    public static int CGLDestroyRendererInfo(MemorySegment rend) {
        var mh$ = CGLDestroyRendererInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDestroyRendererInfo", rend);
            }
            return (int)mh$.invokeExact(rend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDescribeRenderer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDescribeRenderer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribeRenderer(CGLRendererInfoObj  _Nonnull rend, GLint rend_num, CGLRendererProperty prop, GLint * _Nullable value)
     * }
     */
    public static FunctionDescriptor CGLDescribeRenderer$descriptor() {
        return CGLDescribeRenderer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribeRenderer(CGLRendererInfoObj  _Nonnull rend, GLint rend_num, CGLRendererProperty prop, GLint * _Nullable value)
     * }
     */
    public static MethodHandle CGLDescribeRenderer$handle() {
        return CGLDescribeRenderer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribeRenderer(CGLRendererInfoObj  _Nonnull rend, GLint rend_num, CGLRendererProperty prop, GLint * _Nullable value)
     * }
     */
    public static MemorySegment CGLDescribeRenderer$address() {
        return CGLDescribeRenderer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDescribeRenderer(CGLRendererInfoObj  _Nonnull rend, GLint rend_num, CGLRendererProperty prop, GLint * _Nullable value)
     * }
     */
    public static int CGLDescribeRenderer(MemorySegment rend, int rend_num, int prop, MemorySegment value) {
        var mh$ = CGLDescribeRenderer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDescribeRenderer", rend, rend_num, prop, value);
            }
            return (int)mh$.invokeExact(rend, rend_num, prop, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLCreateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLCreateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLCreateContext(CGLPixelFormatObj  _Nonnull pix, CGLContextObj  _Nullable share, CGLContextObj  _Nullable * _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLCreateContext$descriptor() {
        return CGLCreateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLCreateContext(CGLPixelFormatObj  _Nonnull pix, CGLContextObj  _Nullable share, CGLContextObj  _Nullable * _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLCreateContext$handle() {
        return CGLCreateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLCreateContext(CGLPixelFormatObj  _Nonnull pix, CGLContextObj  _Nullable share, CGLContextObj  _Nullable * _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLCreateContext$address() {
        return CGLCreateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLCreateContext(CGLPixelFormatObj  _Nonnull pix, CGLContextObj  _Nullable share, CGLContextObj  _Nullable * _Nonnull ctx)
     * }
     */
    public static int CGLCreateContext(MemorySegment pix, MemorySegment share, MemorySegment ctx) {
        var mh$ = CGLCreateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLCreateContext", pix, share, ctx);
            }
            return (int)mh$.invokeExact(pix, share, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDestroyContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDestroyContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLDestroyContext$descriptor() {
        return CGLDestroyContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLDestroyContext$handle() {
        return CGLDestroyContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLDestroyContext$address() {
        return CGLDestroyContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDestroyContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLDestroyContext(MemorySegment ctx) {
        var mh$ = CGLDestroyContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDestroyContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLCopyContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLCopyContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLCopyContext(CGLContextObj  _Nonnull src, CGLContextObj  _Nonnull dst, GLbitfield mask)
     * }
     */
    public static FunctionDescriptor CGLCopyContext$descriptor() {
        return CGLCopyContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLCopyContext(CGLContextObj  _Nonnull src, CGLContextObj  _Nonnull dst, GLbitfield mask)
     * }
     */
    public static MethodHandle CGLCopyContext$handle() {
        return CGLCopyContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLCopyContext(CGLContextObj  _Nonnull src, CGLContextObj  _Nonnull dst, GLbitfield mask)
     * }
     */
    public static MemorySegment CGLCopyContext$address() {
        return CGLCopyContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLCopyContext(CGLContextObj  _Nonnull src, CGLContextObj  _Nonnull dst, GLbitfield mask)
     * }
     */
    public static int CGLCopyContext(MemorySegment src, MemorySegment dst, int mask) {
        var mh$ = CGLCopyContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLCopyContext", src, dst, mask);
            }
            return (int)mh$.invokeExact(src, dst, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLRetainContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLRetainContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nonnull CGLRetainContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLRetainContext$descriptor() {
        return CGLRetainContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nonnull CGLRetainContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLRetainContext$handle() {
        return CGLRetainContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLContextObj  _Nonnull CGLRetainContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLRetainContext$address() {
        return CGLRetainContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLContextObj  _Nonnull CGLRetainContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLRetainContext(MemorySegment ctx) {
        var mh$ = CGLRetainContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLRetainContext", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLReleaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CGLReleaseContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLReleaseContext$descriptor() {
        return CGLReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CGLReleaseContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLReleaseContext$handle() {
        return CGLReleaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CGLReleaseContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLReleaseContext$address() {
        return CGLReleaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CGLReleaseContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static void CGLReleaseContext(MemorySegment ctx) {
        var mh$ = CGLReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLReleaseContext", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetContextRetainCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetContextRetainCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint CGLGetContextRetainCount(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLGetContextRetainCount$descriptor() {
        return CGLGetContextRetainCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint CGLGetContextRetainCount(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLGetContextRetainCount$handle() {
        return CGLGetContextRetainCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint CGLGetContextRetainCount(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLGetContextRetainCount$address() {
        return CGLGetContextRetainCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint CGLGetContextRetainCount(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLGetContextRetainCount(MemorySegment ctx) {
        var mh$ = CGLGetContextRetainCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetContextRetainCount", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetPixelFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetPixelFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nullable CGLGetPixelFormat(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLGetPixelFormat$descriptor() {
        return CGLGetPixelFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nullable CGLGetPixelFormat(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLGetPixelFormat$handle() {
        return CGLGetPixelFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nullable CGLGetPixelFormat(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLGetPixelFormat$address() {
        return CGLGetPixelFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLPixelFormatObj  _Nullable CGLGetPixelFormat(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLGetPixelFormat(MemorySegment ctx) {
        var mh$ = CGLGetPixelFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetPixelFormat", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLCreatePBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLCreatePBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj  _Nullable * _Nonnull pbuffer)
     * }
     */
    public static FunctionDescriptor CGLCreatePBuffer$descriptor() {
        return CGLCreatePBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj  _Nullable * _Nonnull pbuffer)
     * }
     */
    public static MethodHandle CGLCreatePBuffer$handle() {
        return CGLCreatePBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj  _Nullable * _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLCreatePBuffer$address() {
        return CGLCreatePBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj  _Nullable * _Nonnull pbuffer)
     * }
     */
    public static int CGLCreatePBuffer(int width, int height, int target, int internalFormat, int max_level, MemorySegment pbuffer) {
        var mh$ = CGLCreatePBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLCreatePBuffer", width, height, target, internalFormat, max_level, pbuffer);
            }
            return (int)mh$.invokeExact(width, height, target, internalFormat, max_level, pbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDestroyPBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDestroyPBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static FunctionDescriptor CGLDestroyPBuffer$descriptor() {
        return CGLDestroyPBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MethodHandle CGLDestroyPBuffer$handle() {
        return CGLDestroyPBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLDestroyPBuffer$address() {
        return CGLDestroyPBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDestroyPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static int CGLDestroyPBuffer(MemorySegment pbuffer) {
        var mh$ = CGLDestroyPBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDestroyPBuffer", pbuffer);
            }
            return (int)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDescribePBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDescribePBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePBuffer(CGLPBufferObj  _Nonnull obj, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLenum * _Nonnull target, GLenum * _Nonnull internalFormat, GLint * _Nonnull mipmap)
     * }
     */
    public static FunctionDescriptor CGLDescribePBuffer$descriptor() {
        return CGLDescribePBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePBuffer(CGLPBufferObj  _Nonnull obj, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLenum * _Nonnull target, GLenum * _Nonnull internalFormat, GLint * _Nonnull mipmap)
     * }
     */
    public static MethodHandle CGLDescribePBuffer$handle() {
        return CGLDescribePBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDescribePBuffer(CGLPBufferObj  _Nonnull obj, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLenum * _Nonnull target, GLenum * _Nonnull internalFormat, GLint * _Nonnull mipmap)
     * }
     */
    public static MemorySegment CGLDescribePBuffer$address() {
        return CGLDescribePBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDescribePBuffer(CGLPBufferObj  _Nonnull obj, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLenum * _Nonnull target, GLenum * _Nonnull internalFormat, GLint * _Nonnull mipmap)
     * }
     */
    public static int CGLDescribePBuffer(MemorySegment obj, MemorySegment width, MemorySegment height, MemorySegment target, MemorySegment internalFormat, MemorySegment mipmap) {
        var mh$ = CGLDescribePBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDescribePBuffer", obj, width, height, target, internalFormat, mipmap);
            }
            return (int)mh$.invokeExact(obj, width, height, target, internalFormat, mipmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLTexImagePBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLTexImagePBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImagePBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum source)
     * }
     */
    public static FunctionDescriptor CGLTexImagePBuffer$descriptor() {
        return CGLTexImagePBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImagePBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum source)
     * }
     */
    public static MethodHandle CGLTexImagePBuffer$handle() {
        return CGLTexImagePBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLTexImagePBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum source)
     * }
     */
    public static MemorySegment CGLTexImagePBuffer$address() {
        return CGLTexImagePBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLTexImagePBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum source)
     * }
     */
    public static int CGLTexImagePBuffer(MemorySegment ctx, MemorySegment pbuffer, int source) {
        var mh$ = CGLTexImagePBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLTexImagePBuffer", ctx, pbuffer, source);
            }
            return (int)mh$.invokeExact(ctx, pbuffer, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLRetainPBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLRetainPBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLPBufferObj  _Nonnull CGLRetainPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static FunctionDescriptor CGLRetainPBuffer$descriptor() {
        return CGLRetainPBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLPBufferObj  _Nonnull CGLRetainPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MethodHandle CGLRetainPBuffer$handle() {
        return CGLRetainPBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLPBufferObj  _Nonnull CGLRetainPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLRetainPBuffer$address() {
        return CGLRetainPBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLPBufferObj  _Nonnull CGLRetainPBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLRetainPBuffer(MemorySegment pbuffer) {
        var mh$ = CGLRetainPBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLRetainPBuffer", pbuffer);
            }
            return (MemorySegment)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLReleasePBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLReleasePBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CGLReleasePBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static FunctionDescriptor CGLReleasePBuffer$descriptor() {
        return CGLReleasePBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CGLReleasePBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MethodHandle CGLReleasePBuffer$handle() {
        return CGLReleasePBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CGLReleasePBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLReleasePBuffer$address() {
        return CGLReleasePBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CGLReleasePBuffer(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static void CGLReleasePBuffer(MemorySegment pbuffer) {
        var mh$ = CGLReleasePBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLReleasePBuffer", pbuffer);
            }
            mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetPBufferRetainCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetPBufferRetainCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPBufferRetainCount(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static FunctionDescriptor CGLGetPBufferRetainCount$descriptor() {
        return CGLGetPBufferRetainCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPBufferRetainCount(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MethodHandle CGLGetPBufferRetainCount$handle() {
        return CGLGetPBufferRetainCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern GLuint CGLGetPBufferRetainCount(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static MemorySegment CGLGetPBufferRetainCount$address() {
        return CGLGetPBufferRetainCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern GLuint CGLGetPBufferRetainCount(CGLPBufferObj  _Nonnull pbuffer)
     * }
     */
    public static int CGLGetPBufferRetainCount(MemorySegment pbuffer) {
        var mh$ = CGLGetPBufferRetainCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetPBufferRetainCount", pbuffer);
            }
            return (int)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetOffScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetOffScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei width, GLsizei height, GLint rowbytes, void * _Nonnull baseaddr)
     * }
     */
    public static FunctionDescriptor CGLSetOffScreen$descriptor() {
        return CGLSetOffScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei width, GLsizei height, GLint rowbytes, void * _Nonnull baseaddr)
     * }
     */
    public static MethodHandle CGLSetOffScreen$handle() {
        return CGLSetOffScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei width, GLsizei height, GLint rowbytes, void * _Nonnull baseaddr)
     * }
     */
    public static MemorySegment CGLSetOffScreen$address() {
        return CGLSetOffScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei width, GLsizei height, GLint rowbytes, void * _Nonnull baseaddr)
     * }
     */
    public static int CGLSetOffScreen(MemorySegment ctx, int width, int height, int rowbytes, MemorySegment baseaddr) {
        var mh$ = CGLSetOffScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetOffScreen", ctx, width, height, rowbytes, baseaddr);
            }
            return (int)mh$.invokeExact(ctx, width, height, rowbytes, baseaddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetOffScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetOffScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLint * _Nonnull rowbytes, void * _Nullable * _Nonnull baseaddr)
     * }
     */
    public static FunctionDescriptor CGLGetOffScreen$descriptor() {
        return CGLGetOffScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLint * _Nonnull rowbytes, void * _Nullable * _Nonnull baseaddr)
     * }
     */
    public static MethodHandle CGLGetOffScreen$handle() {
        return CGLGetOffScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLint * _Nonnull rowbytes, void * _Nullable * _Nonnull baseaddr)
     * }
     */
    public static MemorySegment CGLGetOffScreen$address() {
        return CGLGetOffScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetOffScreen(CGLContextObj  _Nonnull ctx, GLsizei * _Nonnull width, GLsizei * _Nonnull height, GLint * _Nonnull rowbytes, void * _Nullable * _Nonnull baseaddr)
     * }
     */
    public static int CGLGetOffScreen(MemorySegment ctx, MemorySegment width, MemorySegment height, MemorySegment rowbytes, MemorySegment baseaddr) {
        var mh$ = CGLGetOffScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetOffScreen", ctx, width, height, rowbytes, baseaddr);
            }
            return (int)mh$.invokeExact(ctx, width, height, rowbytes, baseaddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetFullScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetFullScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreen(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLSetFullScreen$descriptor() {
        return CGLSetFullScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreen(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLSetFullScreen$handle() {
        return CGLSetFullScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreen(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLSetFullScreen$address() {
        return CGLSetFullScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreen(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLSetFullScreen(MemorySegment ctx) {
        var mh$ = CGLSetFullScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetFullScreen", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetFullScreenOnDisplay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetFullScreenOnDisplay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreenOnDisplay(CGLContextObj  _Nonnull ctx, GLuint display_mask)
     * }
     */
    public static FunctionDescriptor CGLSetFullScreenOnDisplay$descriptor() {
        return CGLSetFullScreenOnDisplay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreenOnDisplay(CGLContextObj  _Nonnull ctx, GLuint display_mask)
     * }
     */
    public static MethodHandle CGLSetFullScreenOnDisplay$handle() {
        return CGLSetFullScreenOnDisplay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreenOnDisplay(CGLContextObj  _Nonnull ctx, GLuint display_mask)
     * }
     */
    public static MemorySegment CGLSetFullScreenOnDisplay$address() {
        return CGLSetFullScreenOnDisplay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetFullScreenOnDisplay(CGLContextObj  _Nonnull ctx, GLuint display_mask)
     * }
     */
    public static int CGLSetFullScreenOnDisplay(MemorySegment ctx, int display_mask) {
        var mh$ = CGLSetFullScreenOnDisplay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetFullScreenOnDisplay", ctx, display_mask);
            }
            return (int)mh$.invokeExact(ctx, display_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetPBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetPBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum face, GLint level, GLint screen)
     * }
     */
    public static FunctionDescriptor CGLSetPBuffer$descriptor() {
        return CGLSetPBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum face, GLint level, GLint screen)
     * }
     */
    public static MethodHandle CGLSetPBuffer$handle() {
        return CGLSetPBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum face, GLint level, GLint screen)
     * }
     */
    public static MemorySegment CGLSetPBuffer$address() {
        return CGLSetPBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nonnull pbuffer, GLenum face, GLint level, GLint screen)
     * }
     */
    public static int CGLSetPBuffer(MemorySegment ctx, MemorySegment pbuffer, int face, int level, int screen) {
        var mh$ = CGLSetPBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetPBuffer", ctx, pbuffer, face, level, screen);
            }
            return (int)mh$.invokeExact(ctx, pbuffer, face, level, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetPBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetPBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nullable * _Nonnull pbuffer, GLenum * _Nonnull face, GLint * _Nonnull level, GLint * _Nonnull screen)
     * }
     */
    public static FunctionDescriptor CGLGetPBuffer$descriptor() {
        return CGLGetPBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nullable * _Nonnull pbuffer, GLenum * _Nonnull face, GLint * _Nonnull level, GLint * _Nonnull screen)
     * }
     */
    public static MethodHandle CGLGetPBuffer$handle() {
        return CGLGetPBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nullable * _Nonnull pbuffer, GLenum * _Nonnull face, GLint * _Nonnull level, GLint * _Nonnull screen)
     * }
     */
    public static MemorySegment CGLGetPBuffer$address() {
        return CGLGetPBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetPBuffer(CGLContextObj  _Nonnull ctx, CGLPBufferObj  _Nullable * _Nonnull pbuffer, GLenum * _Nonnull face, GLint * _Nonnull level, GLint * _Nonnull screen)
     * }
     */
    public static int CGLGetPBuffer(MemorySegment ctx, MemorySegment pbuffer, MemorySegment face, MemorySegment level, MemorySegment screen) {
        var mh$ = CGLGetPBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetPBuffer", ctx, pbuffer, face, level, screen);
            }
            return (int)mh$.invokeExact(ctx, pbuffer, face, level, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLClearDrawable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLClearDrawable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLClearDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLClearDrawable$descriptor() {
        return CGLClearDrawable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLClearDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLClearDrawable$handle() {
        return CGLClearDrawable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLClearDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLClearDrawable$address() {
        return CGLClearDrawable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLClearDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLClearDrawable(MemorySegment ctx) {
        var mh$ = CGLClearDrawable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLClearDrawable", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLFlushDrawable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLFlushDrawable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLFlushDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLFlushDrawable$descriptor() {
        return CGLFlushDrawable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLFlushDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLFlushDrawable$handle() {
        return CGLFlushDrawable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLFlushDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLFlushDrawable$address() {
        return CGLFlushDrawable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLFlushDrawable(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLFlushDrawable(MemorySegment ctx) {
        var mh$ = CGLFlushDrawable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLFlushDrawable", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLEnable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLEnable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static FunctionDescriptor CGLEnable$descriptor() {
        return CGLEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLEnable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static MethodHandle CGLEnable$handle() {
        return CGLEnable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLEnable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static MemorySegment CGLEnable$address() {
        return CGLEnable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLEnable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static int CGLEnable(MemorySegment ctx, int pname) {
        var mh$ = CGLEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLEnable", ctx, pname);
            }
            return (int)mh$.invokeExact(ctx, pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLDisable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLDisable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLDisable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static FunctionDescriptor CGLDisable$descriptor() {
        return CGLDisable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLDisable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static MethodHandle CGLDisable$handle() {
        return CGLDisable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLDisable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static MemorySegment CGLDisable$address() {
        return CGLDisable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLDisable(CGLContextObj  _Nonnull ctx, CGLContextEnable pname)
     * }
     */
    public static int CGLDisable(MemorySegment ctx, int pname) {
        var mh$ = CGLDisable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLDisable", ctx, pname);
            }
            return (int)mh$.invokeExact(ctx, pname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLIsEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLIsEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLIsEnabled(CGLContextObj  _Nonnull ctx, CGLContextEnable pname, GLint * _Nonnull enable)
     * }
     */
    public static FunctionDescriptor CGLIsEnabled$descriptor() {
        return CGLIsEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLIsEnabled(CGLContextObj  _Nonnull ctx, CGLContextEnable pname, GLint * _Nonnull enable)
     * }
     */
    public static MethodHandle CGLIsEnabled$handle() {
        return CGLIsEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLIsEnabled(CGLContextObj  _Nonnull ctx, CGLContextEnable pname, GLint * _Nonnull enable)
     * }
     */
    public static MemorySegment CGLIsEnabled$address() {
        return CGLIsEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLIsEnabled(CGLContextObj  _Nonnull ctx, CGLContextEnable pname, GLint * _Nonnull enable)
     * }
     */
    public static int CGLIsEnabled(MemorySegment ctx, int pname, MemorySegment enable) {
        var mh$ = CGLIsEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLIsEnabled", ctx, pname, enable);
            }
            return (int)mh$.invokeExact(ctx, pname, enable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetParameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetParameter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, const GLint * _Nonnull params)
     * }
     */
    public static FunctionDescriptor CGLSetParameter$descriptor() {
        return CGLSetParameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, const GLint * _Nonnull params)
     * }
     */
    public static MethodHandle CGLSetParameter$handle() {
        return CGLSetParameter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, const GLint * _Nonnull params)
     * }
     */
    public static MemorySegment CGLSetParameter$address() {
        return CGLSetParameter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, const GLint * _Nonnull params)
     * }
     */
    public static int CGLSetParameter(MemorySegment ctx, int pname, MemorySegment params) {
        var mh$ = CGLSetParameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetParameter", ctx, pname, params);
            }
            return (int)mh$.invokeExact(ctx, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetParameter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetParameter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, GLint * _Nonnull params)
     * }
     */
    public static FunctionDescriptor CGLGetParameter$descriptor() {
        return CGLGetParameter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, GLint * _Nonnull params)
     * }
     */
    public static MethodHandle CGLGetParameter$handle() {
        return CGLGetParameter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, GLint * _Nonnull params)
     * }
     */
    public static MemorySegment CGLGetParameter$address() {
        return CGLGetParameter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetParameter(CGLContextObj  _Nonnull ctx, CGLContextParameter pname, GLint * _Nonnull params)
     * }
     */
    public static int CGLGetParameter(MemorySegment ctx, int pname, MemorySegment params) {
        var mh$ = CGLGetParameter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetParameter", ctx, pname, params);
            }
            return (int)mh$.invokeExact(ctx, pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetVirtualScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetVirtualScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint screen)
     * }
     */
    public static FunctionDescriptor CGLSetVirtualScreen$descriptor() {
        return CGLSetVirtualScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint screen)
     * }
     */
    public static MethodHandle CGLSetVirtualScreen$handle() {
        return CGLSetVirtualScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint screen)
     * }
     */
    public static MemorySegment CGLSetVirtualScreen$address() {
        return CGLSetVirtualScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint screen)
     * }
     */
    public static int CGLSetVirtualScreen(MemorySegment ctx, int screen) {
        var mh$ = CGLSetVirtualScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetVirtualScreen", ctx, screen);
            }
            return (int)mh$.invokeExact(ctx, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetVirtualScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetVirtualScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint * _Nonnull screen)
     * }
     */
    public static FunctionDescriptor CGLGetVirtualScreen$descriptor() {
        return CGLGetVirtualScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint * _Nonnull screen)
     * }
     */
    public static MethodHandle CGLGetVirtualScreen$handle() {
        return CGLGetVirtualScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint * _Nonnull screen)
     * }
     */
    public static MemorySegment CGLGetVirtualScreen$address() {
        return CGLGetVirtualScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetVirtualScreen(CGLContextObj  _Nonnull ctx, GLint * _Nonnull screen)
     * }
     */
    public static int CGLGetVirtualScreen(MemorySegment ctx, MemorySegment screen) {
        var mh$ = CGLGetVirtualScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetVirtualScreen", ctx, screen);
            }
            return (int)mh$.invokeExact(ctx, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLUpdateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLUpdateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLUpdateContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLUpdateContext$descriptor() {
        return CGLUpdateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLUpdateContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLUpdateContext$handle() {
        return CGLUpdateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLUpdateContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLUpdateContext$address() {
        return CGLUpdateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLUpdateContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLUpdateContext(MemorySegment ctx) {
        var mh$ = CGLUpdateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLUpdateContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetGlobalOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetGlobalOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetGlobalOption(CGLGlobalOption pname, const GLint * _Nullable params)
     * }
     */
    public static FunctionDescriptor CGLSetGlobalOption$descriptor() {
        return CGLSetGlobalOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetGlobalOption(CGLGlobalOption pname, const GLint * _Nullable params)
     * }
     */
    public static MethodHandle CGLSetGlobalOption$handle() {
        return CGLSetGlobalOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetGlobalOption(CGLGlobalOption pname, const GLint * _Nullable params)
     * }
     */
    public static MemorySegment CGLSetGlobalOption$address() {
        return CGLSetGlobalOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetGlobalOption(CGLGlobalOption pname, const GLint * _Nullable params)
     * }
     */
    public static int CGLSetGlobalOption(int pname, MemorySegment params) {
        var mh$ = CGLSetGlobalOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetGlobalOption", pname, params);
            }
            return (int)mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetGlobalOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetGlobalOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetGlobalOption(CGLGlobalOption pname, GLint * _Nonnull params)
     * }
     */
    public static FunctionDescriptor CGLGetGlobalOption$descriptor() {
        return CGLGetGlobalOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetGlobalOption(CGLGlobalOption pname, GLint * _Nonnull params)
     * }
     */
    public static MethodHandle CGLGetGlobalOption$handle() {
        return CGLGetGlobalOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetGlobalOption(CGLGlobalOption pname, GLint * _Nonnull params)
     * }
     */
    public static MemorySegment CGLGetGlobalOption$address() {
        return CGLGetGlobalOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetGlobalOption(CGLGlobalOption pname, GLint * _Nonnull params)
     * }
     */
    public static int CGLGetGlobalOption(int pname, MemorySegment params) {
        var mh$ = CGLGetGlobalOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetGlobalOption", pname, params);
            }
            return (int)mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLSetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLSetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOption(CGLGlobalOption pname, GLint param)
     * }
     */
    public static FunctionDescriptor CGLSetOption$descriptor() {
        return CGLSetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOption(CGLGlobalOption pname, GLint param)
     * }
     */
    public static MethodHandle CGLSetOption$handle() {
        return CGLSetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLSetOption(CGLGlobalOption pname, GLint param)
     * }
     */
    public static MemorySegment CGLSetOption$address() {
        return CGLSetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLSetOption(CGLGlobalOption pname, GLint param)
     * }
     */
    public static int CGLSetOption(int pname, int param) {
        var mh$ = CGLSetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLSetOption", pname, param);
            }
            return (int)mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOption(CGLGlobalOption pname, GLint * _Nonnull param)
     * }
     */
    public static FunctionDescriptor CGLGetOption$descriptor() {
        return CGLGetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOption(CGLGlobalOption pname, GLint * _Nonnull param)
     * }
     */
    public static MethodHandle CGLGetOption$handle() {
        return CGLGetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLGetOption(CGLGlobalOption pname, GLint * _Nonnull param)
     * }
     */
    public static MemorySegment CGLGetOption$address() {
        return CGLGetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLGetOption(CGLGlobalOption pname, GLint * _Nonnull param)
     * }
     */
    public static int CGLGetOption(int pname, MemorySegment param) {
        var mh$ = CGLGetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetOption", pname, param);
            }
            return (int)mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLLockContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLLockContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLLockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLLockContext$descriptor() {
        return CGLLockContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLLockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLLockContext$handle() {
        return CGLLockContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLLockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLLockContext$address() {
        return CGLLockContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLLockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLLockContext(MemorySegment ctx) {
        var mh$ = CGLLockContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLLockContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLUnlockContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_INT,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLUnlockContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern CGLError CGLUnlockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static FunctionDescriptor CGLUnlockContext$descriptor() {
        return CGLUnlockContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern CGLError CGLUnlockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MethodHandle CGLUnlockContext$handle() {
        return CGLUnlockContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern CGLError CGLUnlockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static MemorySegment CGLUnlockContext$address() {
        return CGLUnlockContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern CGLError CGLUnlockContext(CGLContextObj  _Nonnull ctx)
     * }
     */
    public static int CGLUnlockContext(MemorySegment ctx) {
        var mh$ = CGLUnlockContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLUnlockContext", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            cgl_h.C_POINTER,
            cgl_h.C_POINTER
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CGLGetVersion(GLint * _Nullable majorvers, GLint * _Nullable minorvers)
     * }
     */
    public static FunctionDescriptor CGLGetVersion$descriptor() {
        return CGLGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CGLGetVersion(GLint * _Nullable majorvers, GLint * _Nullable minorvers)
     * }
     */
    public static MethodHandle CGLGetVersion$handle() {
        return CGLGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CGLGetVersion(GLint * _Nullable majorvers, GLint * _Nullable minorvers)
     * }
     */
    public static MemorySegment CGLGetVersion$address() {
        return CGLGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CGLGetVersion(GLint * _Nullable majorvers, GLint * _Nullable minorvers)
     * }
     */
    public static void CGLGetVersion(MemorySegment majorvers, MemorySegment minorvers) {
        var mh$ = CGLGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLGetVersion", majorvers, minorvers);
            }
            mh$.invokeExact(majorvers, minorvers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CGLErrorString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            cgl_h.C_POINTER,
            cgl_h.C_INT
        );

        public static final MemorySegment ADDR = cgl_h.findOrThrow("CGLErrorString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char * _Nonnull CGLErrorString(CGLError error)
     * }
     */
    public static FunctionDescriptor CGLErrorString$descriptor() {
        return CGLErrorString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char * _Nonnull CGLErrorString(CGLError error)
     * }
     */
    public static MethodHandle CGLErrorString$handle() {
        return CGLErrorString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char * _Nonnull CGLErrorString(CGLError error)
     * }
     */
    public static MemorySegment CGLErrorString$address() {
        return CGLErrorString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char * _Nonnull CGLErrorString(CGLError error)
     * }
     */
    public static MemorySegment CGLErrorString(int error) {
        var mh$ = CGLErrorString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CGLErrorString", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int __MAC_OS_X_VERSION_MIN_REQUIRED = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MIN_REQUIRED 130000
     * }
     */
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return __MAC_OS_X_VERSION_MIN_REQUIRED;
    }
    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 130300
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    private static final int kCGLARGB16161616Bit = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define kCGLARGB16161616Bit 8388608
     * }
     */
    public static int kCGLARGB16161616Bit() {
        return kCGLARGB16161616Bit;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = cgl_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int MAC_OS_X_VERSION_MIN_REQUIRED = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_MIN_REQUIRED 130000
     * }
     */
    public static int MAC_OS_X_VERSION_MIN_REQUIRED() {
        return MAC_OS_X_VERSION_MIN_REQUIRED;
    }
    private static final int MAC_OS_X_VERSION_MAX_ALLOWED = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_MAX_ALLOWED 130300
     * }
     */
    public static int MAC_OS_X_VERSION_MAX_ALLOWED() {
        return MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    private static final int __IPHONE_COMPAT_VERSION = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_COMPAT_VERSION 40000
     * }
     */
    public static int __IPHONE_COMPAT_VERSION() {
        return __IPHONE_COMPAT_VERSION;
    }
}

