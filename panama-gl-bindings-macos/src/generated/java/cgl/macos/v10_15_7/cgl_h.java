// Generated by jextract

package cgl.macos.v10_15_7;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class cgl_h  {

    /* package-private */ cgl_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    public static int kCGLMonoscopicBit() {
        return (int)1L;
    }
    public static int kCGLStereoscopicBit() {
        return (int)2L;
    }
    public static int kCGLSingleBufferBit() {
        return (int)4L;
    }
    public static int kCGLDoubleBufferBit() {
        return (int)8L;
    }
    public static int kCGLTripleBufferBit() {
        return (int)16L;
    }
    public static int kCGL0Bit() {
        return (int)1L;
    }
    public static int kCGL1Bit() {
        return (int)2L;
    }
    public static int kCGL2Bit() {
        return (int)4L;
    }
    public static int kCGL3Bit() {
        return (int)8L;
    }
    public static int kCGL4Bit() {
        return (int)16L;
    }
    public static int kCGL5Bit() {
        return (int)32L;
    }
    public static int kCGL6Bit() {
        return (int)64L;
    }
    public static int kCGL8Bit() {
        return (int)128L;
    }
    public static int kCGL10Bit() {
        return (int)256L;
    }
    public static int kCGL12Bit() {
        return (int)512L;
    }
    public static int kCGL16Bit() {
        return (int)1024L;
    }
    public static int kCGL24Bit() {
        return (int)2048L;
    }
    public static int kCGL32Bit() {
        return (int)4096L;
    }
    public static int kCGL48Bit() {
        return (int)8192L;
    }
    public static int kCGL64Bit() {
        return (int)16384L;
    }
    public static int kCGL96Bit() {
        return (int)32768L;
    }
    public static int kCGL128Bit() {
        return (int)65536L;
    }
    public static int kCGLRGB444Bit() {
        return (int)64L;
    }
    public static int kCGLARGB4444Bit() {
        return (int)128L;
    }
    public static int kCGLRGB444A8Bit() {
        return (int)256L;
    }
    public static int kCGLRGB555Bit() {
        return (int)512L;
    }
    public static int kCGLARGB1555Bit() {
        return (int)1024L;
    }
    public static int kCGLRGB555A8Bit() {
        return (int)2048L;
    }
    public static int kCGLRGB565Bit() {
        return (int)4096L;
    }
    public static int kCGLRGB565A8Bit() {
        return (int)8192L;
    }
    public static int kCGLRGB888Bit() {
        return (int)16384L;
    }
    public static int kCGLARGB8888Bit() {
        return (int)32768L;
    }
    public static int kCGLRGB888A8Bit() {
        return (int)65536L;
    }
    public static int kCGLRGB101010Bit() {
        return (int)131072L;
    }
    public static int kCGLARGB2101010Bit() {
        return (int)262144L;
    }
    public static int kCGLRGB101010_A8Bit() {
        return (int)524288L;
    }
    public static int kCGLRGB121212Bit() {
        return (int)1048576L;
    }
    public static int kCGLARGB12121212Bit() {
        return (int)2097152L;
    }
    public static int kCGLRGB161616Bit() {
        return (int)4194304L;
    }
    public static int kCGLRGBA16161616Bit() {
        return (int)8388608L;
    }
    public static int kCGLRGBFloat64Bit() {
        return (int)16777216L;
    }
    public static int kCGLRGBAFloat64Bit() {
        return (int)33554432L;
    }
    public static int kCGLRGBFloat128Bit() {
        return (int)67108864L;
    }
    public static int kCGLRGBAFloat128Bit() {
        return (int)134217728L;
    }
    public static int kCGLRGBFloat256Bit() {
        return (int)268435456L;
    }
    public static int kCGLRGBAFloat256Bit() {
        return (int)536870912L;
    }
    public static int kCGLSupersampleBit() {
        return (int)1L;
    }
    public static int kCGLMultisampleBit() {
        return (int)2L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int kCGLRendererIDMatchingMask() {
        return (int)16678656L;
    }
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    public static int __TVOS_13_1() {
        return (int)130100L;
    }
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    public static int __WATCHOS_6_0_1() {
        return (int)60001L;
    }
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    public static int __AVAILABILITY_MACROS_USES_AVAILABILITY() {
        return (int)1L;
    }
    public static int CGL_VERSION_1_0() {
        return (int)1L;
    }
    public static int CGL_VERSION_1_1() {
        return (int)1L;
    }
    public static int CGL_VERSION_1_2() {
        return (int)1L;
    }
    public static int CGL_VERSION_1_3() {
        return (int)1L;
    }
    public static OfAddress CGLContextObj = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress CGLPixelFormatObj = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress CGLRendererInfoObj = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress CGLPBufferObj = Constants$root.C_POINTER$LAYOUT;
    public static int kCGLPFAAllRenderers() {
        return (int)1L;
    }
    public static int kCGLPFATripleBuffer() {
        return (int)3L;
    }
    public static int kCGLPFADoubleBuffer() {
        return (int)5L;
    }
    public static int kCGLPFAColorSize() {
        return (int)8L;
    }
    public static int kCGLPFAAlphaSize() {
        return (int)11L;
    }
    public static int kCGLPFADepthSize() {
        return (int)12L;
    }
    public static int kCGLPFAStencilSize() {
        return (int)13L;
    }
    public static int kCGLPFAMinimumPolicy() {
        return (int)51L;
    }
    public static int kCGLPFAMaximumPolicy() {
        return (int)52L;
    }
    public static int kCGLPFASampleBuffers() {
        return (int)55L;
    }
    public static int kCGLPFASamples() {
        return (int)56L;
    }
    public static int kCGLPFAColorFloat() {
        return (int)58L;
    }
    public static int kCGLPFAMultisample() {
        return (int)59L;
    }
    public static int kCGLPFASupersample() {
        return (int)60L;
    }
    public static int kCGLPFASampleAlpha() {
        return (int)61L;
    }
    public static int kCGLPFARendererID() {
        return (int)70L;
    }
    public static int kCGLPFANoRecovery() {
        return (int)72L;
    }
    public static int kCGLPFAAccelerated() {
        return (int)73L;
    }
    public static int kCGLPFAClosestPolicy() {
        return (int)74L;
    }
    public static int kCGLPFABackingStore() {
        return (int)76L;
    }
    public static int kCGLPFABackingVolatile() {
        return (int)77L;
    }
    public static int kCGLPFADisplayMask() {
        return (int)84L;
    }
    public static int kCGLPFAAllowOfflineRenderers() {
        return (int)96L;
    }
    public static int kCGLPFAAcceleratedCompute() {
        return (int)97L;
    }
    public static int kCGLPFAOpenGLProfile() {
        return (int)99L;
    }
    public static int kCGLPFASupportsAutomaticGraphicsSwitching() {
        return (int)101L;
    }
    public static int kCGLPFAVirtualScreenCount() {
        return (int)128L;
    }
    public static int kCGLPFAAuxBuffers() {
        return (int)7L;
    }
    public static int kCGLPFAAccumSize() {
        return (int)14L;
    }
    public static int kCGLPFAAuxDepthStencil() {
        return (int)57L;
    }
    public static int kCGLPFAStereo() {
        return (int)6L;
    }
    public static int kCGLPFAOffScreen() {
        return (int)53L;
    }
    public static int kCGLPFAWindow() {
        return (int)80L;
    }
    public static int kCGLPFACompliant() {
        return (int)83L;
    }
    public static int kCGLPFAPBuffer() {
        return (int)90L;
    }
    public static int kCGLPFARemotePBuffer() {
        return (int)91L;
    }
    public static int kCGLPFASingleRenderer() {
        return (int)71L;
    }
    public static int kCGLPFARobust() {
        return (int)75L;
    }
    public static int kCGLPFAMPSafe() {
        return (int)78L;
    }
    public static int kCGLPFAMultiScreen() {
        return (int)81L;
    }
    public static int kCGLPFAFullScreen() {
        return (int)54L;
    }
    public static int kCGLRPOffScreen() {
        return (int)53L;
    }
    public static int kCGLRPRendererID() {
        return (int)70L;
    }
    public static int kCGLRPAccelerated() {
        return (int)73L;
    }
    public static int kCGLRPBackingStore() {
        return (int)76L;
    }
    public static int kCGLRPWindow() {
        return (int)80L;
    }
    public static int kCGLRPCompliant() {
        return (int)83L;
    }
    public static int kCGLRPDisplayMask() {
        return (int)84L;
    }
    public static int kCGLRPBufferModes() {
        return (int)100L;
    }
    public static int kCGLRPColorModes() {
        return (int)103L;
    }
    public static int kCGLRPAccumModes() {
        return (int)104L;
    }
    public static int kCGLRPDepthModes() {
        return (int)105L;
    }
    public static int kCGLRPStencilModes() {
        return (int)106L;
    }
    public static int kCGLRPMaxAuxBuffers() {
        return (int)107L;
    }
    public static int kCGLRPMaxSampleBuffers() {
        return (int)108L;
    }
    public static int kCGLRPMaxSamples() {
        return (int)109L;
    }
    public static int kCGLRPSampleModes() {
        return (int)110L;
    }
    public static int kCGLRPSampleAlpha() {
        return (int)111L;
    }
    public static int kCGLRPGPUVertProcCapable() {
        return (int)122L;
    }
    public static int kCGLRPGPUFragProcCapable() {
        return (int)123L;
    }
    public static int kCGLRPRendererCount() {
        return (int)128L;
    }
    public static int kCGLRPOnline() {
        return (int)129L;
    }
    public static int kCGLRPAcceleratedCompute() {
        return (int)130L;
    }
    public static int kCGLRPVideoMemoryMegabytes() {
        return (int)131L;
    }
    public static int kCGLRPTextureMemoryMegabytes() {
        return (int)132L;
    }
    public static int kCGLRPMajorGLVersion() {
        return (int)133L;
    }
    public static int kCGLRPRegistryIDLow() {
        return (int)140L;
    }
    public static int kCGLRPRegistryIDHigh() {
        return (int)141L;
    }
    public static int kCGLRPRemovable() {
        return (int)142L;
    }
    public static int kCGLRPRobust() {
        return (int)75L;
    }
    public static int kCGLRPMPSafe() {
        return (int)78L;
    }
    public static int kCGLRPMultiScreen() {
        return (int)81L;
    }
    public static int kCGLRPFullScreen() {
        return (int)54L;
    }
    public static int kCGLRPVideoMemory() {
        return (int)120L;
    }
    public static int kCGLRPTextureMemory() {
        return (int)121L;
    }
    public static int kCGLCESwapRectangle() {
        return (int)201L;
    }
    public static int kCGLCESwapLimit() {
        return (int)203L;
    }
    public static int kCGLCERasterization() {
        return (int)221L;
    }
    public static int kCGLCEStateValidation() {
        return (int)301L;
    }
    public static int kCGLCESurfaceBackingSize() {
        return (int)305L;
    }
    public static int kCGLCEDisplayListOptimization() {
        return (int)307L;
    }
    public static int kCGLCEMPEngine() {
        return (int)313L;
    }
    public static int kCGLCECrashOnRemovedFunctions() {
        return (int)316L;
    }
    public static int kCGLCPGPURestartStatusNone() {
        return (int)0L;
    }
    public static int kCGLCPGPURestartStatusCaused() {
        return (int)1L;
    }
    public static int kCGLCPGPURestartStatusBlacklisted() {
        return (int)2L;
    }
    public static int kCGLCPSwapRectangle() {
        return (int)200L;
    }
    public static int kCGLCPSwapInterval() {
        return (int)222L;
    }
    public static int kCGLCPDispatchTableSize() {
        return (int)224L;
    }
    public static int kCGLCPClientStorage() {
        return (int)226L;
    }
    public static int kCGLCPSurfaceTexture() {
        return (int)228L;
    }
    public static int kCGLCPSurfaceOrder() {
        return (int)235L;
    }
    public static int kCGLCPSurfaceOpacity() {
        return (int)236L;
    }
    public static int kCGLCPSurfaceBackingSize() {
        return (int)304L;
    }
    public static int kCGLCPSurfaceSurfaceVolatile() {
        return (int)306L;
    }
    public static int kCGLCPReclaimResources() {
        return (int)308L;
    }
    public static int kCGLCPCurrentRendererID() {
        return (int)309L;
    }
    public static int kCGLCPGPUVertexProcessing() {
        return (int)310L;
    }
    public static int kCGLCPGPUFragmentProcessing() {
        return (int)311L;
    }
    public static int kCGLCPHasDrawable() {
        return (int)314L;
    }
    public static int kCGLCPMPSwapsInFlight() {
        return (int)315L;
    }
    public static int kCGLCPGPURestartStatus() {
        return (int)317L;
    }
    public static int kCGLCPAbortOnGPURestartStatusBlacklisted() {
        return (int)318L;
    }
    public static int kCGLCPSupportGPURestart() {
        return (int)319L;
    }
    public static int kCGLCPSupportSeparateAddressSpace() {
        return (int)320L;
    }
    public static int kCGLCPContextPriorityRequest() {
        return (int)608L;
    }
    public static int kCGLCPContextPriorityRequestHigh() {
        return (int)0L;
    }
    public static int kCGLCPContextPriorityRequestNormal() {
        return (int)1L;
    }
    public static int kCGLCPContextPriorityRequestLow() {
        return (int)2L;
    }
    public static int kCGLGOFormatCacheSize() {
        return (int)501L;
    }
    public static int kCGLGOClearFormatCache() {
        return (int)502L;
    }
    public static int kCGLGORetainRenderers() {
        return (int)503L;
    }
    public static int kCGLGOUseBuildCache() {
        return (int)506L;
    }
    public static int kCGLGOResetLibrary() {
        return (int)504L;
    }
    public static int kCGLGOUseErrorHandler() {
        return (int)505L;
    }
    public static int kCGLOGLPVersion_Legacy() {
        return (int)4096L;
    }
    public static int kCGLOGLPVersion_3_2_Core() {
        return (int)12800L;
    }
    public static int kCGLOGLPVersion_GL3_Core() {
        return (int)12800L;
    }
    public static int kCGLOGLPVersion_GL4_Core() {
        return (int)16640L;
    }
    public static int kCGLNoError() {
        return (int)0L;
    }
    public static int kCGLBadAttribute() {
        return (int)10000L;
    }
    public static int kCGLBadProperty() {
        return (int)10001L;
    }
    public static int kCGLBadPixelFormat() {
        return (int)10002L;
    }
    public static int kCGLBadRendererInfo() {
        return (int)10003L;
    }
    public static int kCGLBadContext() {
        return (int)10004L;
    }
    public static int kCGLBadDrawable() {
        return (int)10005L;
    }
    public static int kCGLBadDisplay() {
        return (int)10006L;
    }
    public static int kCGLBadState() {
        return (int)10007L;
    }
    public static int kCGLBadValue() {
        return (int)10008L;
    }
    public static int kCGLBadMatch() {
        return (int)10009L;
    }
    public static int kCGLBadEnumeration() {
        return (int)10010L;
    }
    public static int kCGLBadOffScreen() {
        return (int)10011L;
    }
    public static int kCGLBadFullScreen() {
        return (int)10012L;
    }
    public static int kCGLBadWindow() {
        return (int)10013L;
    }
    public static int kCGLBadAddress() {
        return (int)10014L;
    }
    public static int kCGLBadCodeModule() {
        return (int)10015L;
    }
    public static int kCGLBadAlloc() {
        return (int)10016L;
    }
    public static int kCGLBadConnection() {
        return (int)10017L;
    }
    public static MethodHandle CGLSetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLSetCurrentContext$MH,"CGLSetCurrentContext");
    }
    public static int CGLSetCurrentContext ( Addressable ctx) {
        var mh$ = CGLSetCurrentContext$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLGetCurrentContext$MH,"CGLGetCurrentContext");
    }
    public static MemoryAddress CGLGetCurrentContext () {
        var mh$ = CGLGetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfByte GLchar = Constants$root.C_CHAR$LAYOUT;
    public static OfByte GLcharARB = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress GLhandleARB = Constants$root.C_POINTER$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt GLfixed = Constants$root.C_INT$LAYOUT;
    public static OfLong GLint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress GLsync = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLint64EXT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress CGLShareGroupObj = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CGLGetShareGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLGetShareGroup$MH,"CGLGetShareGroup");
    }
    public static MemoryAddress CGLGetShareGroup ( Addressable ctx) {
        var mh$ = CGLGetShareGroup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress cl_device_id = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CGLGetDeviceFromGLRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLGetDeviceFromGLRenderer$MH,"CGLGetDeviceFromGLRenderer");
    }
    public static MemoryAddress CGLGetDeviceFromGLRenderer ( int rendererID) {
        var mh$ = CGLGetDeviceFromGLRenderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rendererID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int kCGLRendererGenericID() {
        return (int)131584L;
    }
    public static int kCGLRendererGenericFloatID() {
        return (int)132096L;
    }
    public static int kCGLRendererAppleSWID() {
        return (int)132608L;
    }
    public static int kCGLRendererATIRage128ID() {
        return (int)135168L;
    }
    public static int kCGLRendererATIRadeonID() {
        return (int)135680L;
    }
    public static int kCGLRendererATIRageProID() {
        return (int)136192L;
    }
    public static int kCGLRendererATIRadeon8500ID() {
        return (int)136704L;
    }
    public static int kCGLRendererATIRadeon9700ID() {
        return (int)137216L;
    }
    public static int kCGLRendererATIRadeonX1000ID() {
        return (int)137472L;
    }
    public static int kCGLRendererATIRadeonX2000ID() {
        return (int)137728L;
    }
    public static int kCGLRendererATIRadeonX3000ID() {
        return (int)137984L;
    }
    public static int kCGLRendererATIRadeonX4000ID() {
        return (int)138240L;
    }
    public static int kCGLRendererGeForce2MXID() {
        return (int)139264L;
    }
    public static int kCGLRendererGeForce3ID() {
        return (int)139776L;
    }
    public static int kCGLRendererGeForceFXID() {
        return (int)140288L;
    }
    public static int kCGLRendererGeForce8xxxID() {
        return (int)140800L;
    }
    public static int kCGLRendererGeForceID() {
        return (int)141056L;
    }
    public static int kCGLRendererVTBladeXP2ID() {
        return (int)143360L;
    }
    public static int kCGLRendererIntel900ID() {
        return (int)147456L;
    }
    public static int kCGLRendererIntelX3100ID() {
        return (int)147968L;
    }
    public static int kCGLRendererIntelHDID() {
        return (int)148224L;
    }
    public static int kCGLRendererIntelHD4000ID() {
        return (int)148480L;
    }
    public static int kCGLRendererIntelHD5000ID() {
        return (int)148736L;
    }
    public static int kCGLRendererMesa3DFXID() {
        return (int)262144L;
    }
    public static OfAddress IOSurfaceRef = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CGLTexImageIOSurface2D$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLTexImageIOSurface2D$MH,"CGLTexImageIOSurface2D");
    }
    public static int CGLTexImageIOSurface2D ( Addressable ctx,  int target,  int internal_format,  int width,  int height,  int format,  int type,  Addressable ioSurface,  int plane) {
        var mh$ = CGLTexImageIOSurface2D$MH();
        try {
            return (int)mh$.invokeExact(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLChoosePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.CGLChoosePixelFormat$MH,"CGLChoosePixelFormat");
    }
    public static int CGLChoosePixelFormat ( Addressable attribs,  Addressable pix,  Addressable npix) {
        var mh$ = CGLChoosePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(attribs, pix, npix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDestroyPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLDestroyPixelFormat$MH,"CGLDestroyPixelFormat");
    }
    public static int CGLDestroyPixelFormat ( Addressable pix) {
        var mh$ = CGLDestroyPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDescribePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLDescribePixelFormat$MH,"CGLDescribePixelFormat");
    }
    public static int CGLDescribePixelFormat ( Addressable pix,  int pix_num,  int attrib,  Addressable value) {
        var mh$ = CGLDescribePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(pix, pix_num, attrib, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLReleasePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLReleasePixelFormat$MH,"CGLReleasePixelFormat");
    }
    public static void CGLReleasePixelFormat ( Addressable pix) {
        var mh$ = CGLReleasePixelFormat$MH();
        try {
            mh$.invokeExact(pix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLRetainPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLRetainPixelFormat$MH,"CGLRetainPixelFormat");
    }
    public static MemoryAddress CGLRetainPixelFormat ( Addressable pix) {
        var mh$ = CGLRetainPixelFormat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetPixelFormatRetainCount$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLGetPixelFormatRetainCount$MH,"CGLGetPixelFormatRetainCount");
    }
    public static int CGLGetPixelFormatRetainCount ( Addressable pix) {
        var mh$ = CGLGetPixelFormatRetainCount$MH();
        try {
            return (int)mh$.invokeExact(pix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLQueryRendererInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1.CGLQueryRendererInfo$MH,"CGLQueryRendererInfo");
    }
    public static int CGLQueryRendererInfo ( int display_mask,  Addressable rend,  Addressable nrend) {
        var mh$ = CGLQueryRendererInfo$MH();
        try {
            return (int)mh$.invokeExact(display_mask, rend, nrend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDestroyRendererInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLDestroyRendererInfo$MH,"CGLDestroyRendererInfo");
    }
    public static int CGLDestroyRendererInfo ( Addressable rend) {
        var mh$ = CGLDestroyRendererInfo$MH();
        try {
            return (int)mh$.invokeExact(rend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDescribeRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLDescribeRenderer$MH,"CGLDescribeRenderer");
    }
    public static int CGLDescribeRenderer ( Addressable rend,  int rend_num,  int prop,  Addressable value) {
        var mh$ = CGLDescribeRenderer$MH();
        try {
            return (int)mh$.invokeExact(rend, rend_num, prop, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLCreateContext$MH,"CGLCreateContext");
    }
    public static int CGLCreateContext ( Addressable pix,  Addressable share,  Addressable ctx) {
        var mh$ = CGLCreateContext$MH();
        try {
            return (int)mh$.invokeExact(pix, share, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLDestroyContext$MH,"CGLDestroyContext");
    }
    public static int CGLDestroyContext ( Addressable ctx) {
        var mh$ = CGLDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLCopyContext$MH,"CGLCopyContext");
    }
    public static int CGLCopyContext ( Addressable src,  Addressable dst,  int mask) {
        var mh$ = CGLCopyContext$MH();
        try {
            return (int)mh$.invokeExact(src, dst, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLRetainContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2.CGLRetainContext$MH,"CGLRetainContext");
    }
    public static MemoryAddress CGLRetainContext ( Addressable ctx) {
        var mh$ = CGLRetainContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLReleaseContext$MH,"CGLReleaseContext");
    }
    public static void CGLReleaseContext ( Addressable ctx) {
        var mh$ = CGLReleaseContext$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetContextRetainCount$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLGetContextRetainCount$MH,"CGLGetContextRetainCount");
    }
    public static int CGLGetContextRetainCount ( Addressable ctx) {
        var mh$ = CGLGetContextRetainCount$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLGetPixelFormat$MH,"CGLGetPixelFormat");
    }
    public static MemoryAddress CGLGetPixelFormat ( Addressable ctx) {
        var mh$ = CGLGetPixelFormat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLCreatePBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLCreatePBuffer$MH,"CGLCreatePBuffer");
    }
    public static int CGLCreatePBuffer ( int width,  int height,  int target,  int internalFormat,  int max_level,  Addressable pbuffer) {
        var mh$ = CGLCreatePBuffer$MH();
        try {
            return (int)mh$.invokeExact(width, height, target, internalFormat, max_level, pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDestroyPBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLDestroyPBuffer$MH,"CGLDestroyPBuffer");
    }
    public static int CGLDestroyPBuffer ( Addressable pbuffer) {
        var mh$ = CGLDestroyPBuffer$MH();
        try {
            return (int)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDescribePBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.CGLDescribePBuffer$MH,"CGLDescribePBuffer");
    }
    public static int CGLDescribePBuffer ( Addressable obj,  Addressable width,  Addressable height,  Addressable target,  Addressable internalFormat,  Addressable mipmap) {
        var mh$ = CGLDescribePBuffer$MH();
        try {
            return (int)mh$.invokeExact(obj, width, height, target, internalFormat, mipmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLTexImagePBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLTexImagePBuffer$MH,"CGLTexImagePBuffer");
    }
    public static int CGLTexImagePBuffer ( Addressable ctx,  Addressable pbuffer,  int source) {
        var mh$ = CGLTexImagePBuffer$MH();
        try {
            return (int)mh$.invokeExact(ctx, pbuffer, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLRetainPBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLRetainPBuffer$MH,"CGLRetainPBuffer");
    }
    public static MemoryAddress CGLRetainPBuffer ( Addressable pbuffer) {
        var mh$ = CGLRetainPBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLReleasePBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLReleasePBuffer$MH,"CGLReleasePBuffer");
    }
    public static void CGLReleasePBuffer ( Addressable pbuffer) {
        var mh$ = CGLReleasePBuffer$MH();
        try {
            mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetPBufferRetainCount$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLGetPBufferRetainCount$MH,"CGLGetPBufferRetainCount");
    }
    public static int CGLGetPBufferRetainCount ( Addressable pbuffer) {
        var mh$ = CGLGetPBufferRetainCount$MH();
        try {
            return (int)mh$.invokeExact(pbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetOffScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLSetOffScreen$MH,"CGLSetOffScreen");
    }
    public static int CGLSetOffScreen ( Addressable ctx,  int width,  int height,  int rowbytes,  Addressable baseaddr) {
        var mh$ = CGLSetOffScreen$MH();
        try {
            return (int)mh$.invokeExact(ctx, width, height, rowbytes, baseaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetOffScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.CGLGetOffScreen$MH,"CGLGetOffScreen");
    }
    public static int CGLGetOffScreen ( Addressable ctx,  Addressable width,  Addressable height,  Addressable rowbytes,  Addressable baseaddr) {
        var mh$ = CGLGetOffScreen$MH();
        try {
            return (int)mh$.invokeExact(ctx, width, height, rowbytes, baseaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetFullScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLSetFullScreen$MH,"CGLSetFullScreen");
    }
    public static int CGLSetFullScreen ( Addressable ctx) {
        var mh$ = CGLSetFullScreen$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetFullScreenOnDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLSetFullScreenOnDisplay$MH,"CGLSetFullScreenOnDisplay");
    }
    public static int CGLSetFullScreenOnDisplay ( Addressable ctx,  int display_mask) {
        var mh$ = CGLSetFullScreenOnDisplay$MH();
        try {
            return (int)mh$.invokeExact(ctx, display_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetPBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLSetPBuffer$MH,"CGLSetPBuffer");
    }
    public static int CGLSetPBuffer ( Addressable ctx,  Addressable pbuffer,  int face,  int level,  int screen) {
        var mh$ = CGLSetPBuffer$MH();
        try {
            return (int)mh$.invokeExact(ctx, pbuffer, face, level, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetPBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLGetPBuffer$MH,"CGLGetPBuffer");
    }
    public static int CGLGetPBuffer ( Addressable ctx,  Addressable pbuffer,  Addressable face,  Addressable level,  Addressable screen) {
        var mh$ = CGLGetPBuffer$MH();
        try {
            return (int)mh$.invokeExact(ctx, pbuffer, face, level, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLClearDrawable$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLClearDrawable$MH,"CGLClearDrawable");
    }
    public static int CGLClearDrawable ( Addressable ctx) {
        var mh$ = CGLClearDrawable$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLFlushDrawable$MH() {
        return RuntimeHelper.requireNonNull(constants$5.CGLFlushDrawable$MH,"CGLFlushDrawable");
    }
    public static int CGLFlushDrawable ( Addressable ctx) {
        var mh$ = CGLFlushDrawable$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLEnable$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLEnable$MH,"CGLEnable");
    }
    public static int CGLEnable ( Addressable ctx,  int pname) {
        var mh$ = CGLEnable$MH();
        try {
            return (int)mh$.invokeExact(ctx, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLDisable$MH,"CGLDisable");
    }
    public static int CGLDisable ( Addressable ctx,  int pname) {
        var mh$ = CGLDisable$MH();
        try {
            return (int)mh$.invokeExact(ctx, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLIsEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLIsEnabled$MH,"CGLIsEnabled");
    }
    public static int CGLIsEnabled ( Addressable ctx,  int pname,  Addressable enable) {
        var mh$ = CGLIsEnabled$MH();
        try {
            return (int)mh$.invokeExact(ctx, pname, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetParameter$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLSetParameter$MH,"CGLSetParameter");
    }
    public static int CGLSetParameter ( Addressable ctx,  int pname,  Addressable params) {
        var mh$ = CGLSetParameter$MH();
        try {
            return (int)mh$.invokeExact(ctx, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetParameter$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLGetParameter$MH,"CGLGetParameter");
    }
    public static int CGLGetParameter ( Addressable ctx,  int pname,  Addressable params) {
        var mh$ = CGLGetParameter$MH();
        try {
            return (int)mh$.invokeExact(ctx, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetVirtualScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$6.CGLSetVirtualScreen$MH,"CGLSetVirtualScreen");
    }
    public static int CGLSetVirtualScreen ( Addressable ctx,  int screen) {
        var mh$ = CGLSetVirtualScreen$MH();
        try {
            return (int)mh$.invokeExact(ctx, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetVirtualScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLGetVirtualScreen$MH,"CGLGetVirtualScreen");
    }
    public static int CGLGetVirtualScreen ( Addressable ctx,  Addressable screen) {
        var mh$ = CGLGetVirtualScreen$MH();
        try {
            return (int)mh$.invokeExact(ctx, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLUpdateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLUpdateContext$MH,"CGLUpdateContext");
    }
    public static int CGLUpdateContext ( Addressable ctx) {
        var mh$ = CGLUpdateContext$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetGlobalOption$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLSetGlobalOption$MH,"CGLSetGlobalOption");
    }
    public static int CGLSetGlobalOption ( int pname,  Addressable params) {
        var mh$ = CGLSetGlobalOption$MH();
        try {
            return (int)mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetGlobalOption$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLGetGlobalOption$MH,"CGLGetGlobalOption");
    }
    public static int CGLGetGlobalOption ( int pname,  Addressable params) {
        var mh$ = CGLGetGlobalOption$MH();
        try {
            return (int)mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLSetOption$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLSetOption$MH,"CGLSetOption");
    }
    public static int CGLSetOption ( int pname,  int param) {
        var mh$ = CGLSetOption$MH();
        try {
            return (int)mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetOption$MH() {
        return RuntimeHelper.requireNonNull(constants$7.CGLGetOption$MH,"CGLGetOption");
    }
    public static int CGLGetOption ( int pname,  Addressable param) {
        var mh$ = CGLGetOption$MH();
        try {
            return (int)mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLLockContext$MH() {
        return RuntimeHelper.requireNonNull(constants$8.CGLLockContext$MH,"CGLLockContext");
    }
    public static int CGLLockContext ( Addressable ctx) {
        var mh$ = CGLLockContext$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLUnlockContext$MH() {
        return RuntimeHelper.requireNonNull(constants$8.CGLUnlockContext$MH,"CGLUnlockContext");
    }
    public static int CGLUnlockContext ( Addressable ctx) {
        var mh$ = CGLUnlockContext$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$8.CGLGetVersion$MH,"CGLGetVersion");
    }
    public static void CGLGetVersion ( Addressable majorvers,  Addressable minorvers) {
        var mh$ = CGLGetVersion$MH();
        try {
            mh$.invokeExact(majorvers, minorvers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CGLErrorString$MH() {
        return RuntimeHelper.requireNonNull(constants$8.CGLErrorString$MH,"CGLErrorString");
    }
    public static MemoryAddress CGLErrorString ( int error) {
        var mh$ = CGLErrorString$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)101500L;
    }
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)101500L;
    }
    public static int kCGLARGB16161616Bit() {
        return (int)8388608L;
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$8.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$8.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$9.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$9.__DARWIN_NULL$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static int MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)101500L;
    }
    public static int MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)101500L;
    }
    public static int __IPHONE_COMPAT_VERSION() {
        return (int)40000L;
    }
}


