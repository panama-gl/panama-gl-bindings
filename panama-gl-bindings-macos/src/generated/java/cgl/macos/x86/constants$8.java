// Generated by jextract

package cgl.macos.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$8 {

    static final FunctionDescriptor CGLLockContext$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CGLLockContext$MH = RuntimeHelper.downcallHandle(
        "CGLLockContext",
        constants$8.CGLLockContext$FUNC
    );
    static final FunctionDescriptor CGLUnlockContext$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CGLUnlockContext$MH = RuntimeHelper.downcallHandle(
        "CGLUnlockContext",
        constants$8.CGLUnlockContext$FUNC
    );
    static final FunctionDescriptor CGLGetVersion$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CGLGetVersion$MH = RuntimeHelper.downcallHandle(
        "CGLGetVersion",
        constants$8.CGLGetVersion$FUNC
    );
    static final FunctionDescriptor CGLErrorString$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle CGLErrorString$MH = RuntimeHelper.downcallHandle(
        "CGLErrorString",
        constants$8.CGLErrorString$FUNC
    );
    static final MemorySegment __DARWIN_SUF_64_BIT_INO_T$SEGMENT = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String("$INODE64");
    static final MemorySegment __DARWIN_SUF_1050$SEGMENT = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String("$1050");
}


