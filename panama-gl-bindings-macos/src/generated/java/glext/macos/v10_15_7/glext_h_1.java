// Generated by jextract

package glext.macos.v10_15_7;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class glext_h_1 {

    public static int GL_RETAINED_APPLE() {
        return (int)35355L;
    }
    public static int GL_UNDEFINED_APPLE() {
        return (int)35356L;
    }
    public static int GL_PURGEABLE_APPLE() {
        return (int)35357L;
    }
    public static int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE() {
        return (int)35344L;
    }
    public static int GL_RGB_422_APPLE() {
        return (int)35359L;
    }
    public static int GL_PACK_ROW_BYTES_APPLE() {
        return (int)35349L;
    }
    public static int GL_UNPACK_ROW_BYTES_APPLE() {
        return (int)35350L;
    }
    public static int GL_PACK_IMAGE_BYTES_APPLE() {
        return (int)35351L;
    }
    public static int GL_UNPACK_IMAGE_BYTES_APPLE() {
        return (int)35352L;
    }
    public static int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE() {
        return (int)34224L;
    }
    public static int GL_TEXTURE_RANGE_LENGTH_APPLE() {
        return (int)34231L;
    }
    public static int GL_TEXTURE_RANGE_POINTER_APPLE() {
        return (int)34232L;
    }
    public static int GL_TEXTURE_STORAGE_HINT_APPLE() {
        return (int)34236L;
    }
    public static int GL_TEXTURE_MINIMIZE_STORAGE_APPLE() {
        return (int)34230L;
    }
    public static int GL_STORAGE_PRIVATE_APPLE() {
        return (int)34237L;
    }
    public static int GL_STORAGE_CACHED_APPLE() {
        return (int)34238L;
    }
    public static int GL_STORAGE_SHARED_APPLE() {
        return (int)34239L;
    }
    public static int GL_TRANSFORM_HINT_APPLE() {
        return (int)34225L;
    }
    public static int GL_VERTEX_ARRAY_BINDING_APPLE() {
        return (int)34229L;
    }
    public static int GL_VERTEX_ARRAY_RANGE_APPLE() {
        return (int)34077L;
    }
    public static int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE() {
        return (int)34078L;
    }
    public static int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE() {
        return (int)34080L;
    }
    public static int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE() {
        return (int)34081L;
    }
    public static int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE() {
        return (int)34079L;
    }
    public static int GL_STORAGE_CLIENT_APPLE() {
        return (int)34228L;
    }
    public static int GL_VERTEX_POINT_SIZE_APPLE() {
        return (int)35366L;
    }
    public static int GL_CURRENT_POINT_SIZE_APPLE() {
        return (int)35367L;
    }
    public static int GL_POINT_SIZE_ARRAY_APPLE() {
        return (int)35740L;
    }
    public static int GL_POINT_SIZE_ARRAY_TYPE_APPLE() {
        return (int)35210L;
    }
    public static int GL_POINT_SIZE_ARRAY_STRIDE_APPLE() {
        return (int)35211L;
    }
    public static int GL_POINT_SIZE_ARRAY_POINTER_APPLE() {
        return (int)35212L;
    }
    public static int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_APPLE() {
        return (int)35743L;
    }
    public static int GL_VERTEX_ATTRIB_MAP1_APPLE() {
        return (int)35328L;
    }
    public static int GL_VERTEX_ATTRIB_MAP2_APPLE() {
        return (int)35329L;
    }
    public static int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE() {
        return (int)35330L;
    }
    public static int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE() {
        return (int)35331L;
    }
    public static int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE() {
        return (int)35332L;
    }
    public static int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE() {
        return (int)35333L;
    }
    public static int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE() {
        return (int)35334L;
    }
    public static int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE() {
        return (int)35335L;
    }
    public static int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE() {
        return (int)35336L;
    }
    public static int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE() {
        return (int)35337L;
    }
    public static int GL_YCBCR_422_APPLE() {
        return (int)34233L;
    }
    public static int GL_UNSIGNED_SHORT_8_8_APPLE() {
        return (int)34234L;
    }
    public static int GL_UNSIGNED_SHORT_8_8_REV_APPLE() {
        return (int)34235L;
    }
    public static int GL_ALPHA_BLEND_EQUATION_ATI() {
        return (int)34877L;
    }
    public static int GL_MIN_WEIGHTED_ATI() {
        return (int)34685L;
    }
    public static int GL_MAX_WEIGHTED_ATI() {
        return (int)34686L;
    }
    public static int GL_STENCIL_BACK_FUNC_ATI() {
        return (int)34816L;
    }
    public static int GL_STENCIL_BACK_FAIL_ATI() {
        return (int)34817L;
    }
    public static int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI() {
        return (int)34818L;
    }
    public static int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI() {
        return (int)34819L;
    }
    public static int GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI() {
        return (int)34871L;
    }
    public static int GL_MODULATE_ADD_ATI() {
        return (int)34628L;
    }
    public static int GL_MODULATE_SIGNED_ADD_ATI() {
        return (int)34629L;
    }
    public static int GL_MODULATE_SUBTRACT_ATI() {
        return (int)34630L;
    }
    public static int GL_RGBA_FLOAT32_ATI() {
        return (int)34836L;
    }
    public static int GL_RGB_FLOAT32_ATI() {
        return (int)34837L;
    }
    public static int GL_ALPHA_FLOAT32_ATI() {
        return (int)34838L;
    }
    public static int GL_INTENSITY_FLOAT32_ATI() {
        return (int)34839L;
    }
    public static int GL_LUMINANCE_FLOAT32_ATI() {
        return (int)34840L;
    }
    public static int GL_LUMINANCE_ALPHA_FLOAT32_ATI() {
        return (int)34841L;
    }
    public static int GL_RGBA_FLOAT16_ATI() {
        return (int)34842L;
    }
    public static int GL_RGB_FLOAT16_ATI() {
        return (int)34843L;
    }
    public static int GL_ALPHA_FLOAT16_ATI() {
        return (int)34844L;
    }
    public static int GL_INTENSITY_FLOAT16_ATI() {
        return (int)34845L;
    }
    public static int GL_LUMINANCE_FLOAT16_ATI() {
        return (int)34846L;
    }
    public static int GL_LUMINANCE_ALPHA_FLOAT16_ATI() {
        return (int)34847L;
    }
    public static int GL_MIRROR_CLAMP_ATI() {
        return (int)34626L;
    }
    public static int GL_MIRROR_CLAMP_TO_EDGE_ATI() {
        return (int)34627L;
    }
    public static int GL_RASTER_POSITION_UNCLIPPED_IBM() {
        return (int)103010L;
    }
    public static int GL_QUERY_WAIT_NV() {
        return (int)36371L;
    }
    public static int GL_QUERY_NO_WAIT_NV() {
        return (int)36372L;
    }
    public static int GL_QUERY_BY_REGION_WAIT_NV() {
        return (int)36373L;
    }
    public static int GL_QUERY_BY_REGION_NO_WAIT_NV() {
        return (int)36374L;
    }
    public static int GL_DEPTH_CLAMP_NV() {
        return (int)34383L;
    }
    public static int GL_FOG_DISTANCE_MODE_NV() {
        return (int)34138L;
    }
    public static int GL_EYE_RADIAL_NV() {
        return (int)34139L;
    }
    public static int GL_EYE_PLANE_ABSOLUTE_NV() {
        return (int)34140L;
    }
    public static int GL_MAX_PROGRAM_IF_DEPTH_NV() {
        return (int)35062L;
    }
    public static int GL_MAX_PROGRAM_LOOP_DEPTH_NV() {
        return (int)35063L;
    }
    public static int GL_MAX_PROGRAM_LOOP_COUNT_NV() {
        return (int)35064L;
    }
    public static int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV() {
        return (int)35060L;
    }
    public static int GL_MAX_PROGRAM_CALL_DEPTH_NV() {
        return (int)35061L;
    }
    public static int GL_MAX_SHININESS_NV() {
        return (int)34052L;
    }
    public static int GL_MAX_SPOT_EXPONENT_NV() {
        return (int)34053L;
    }
    public static int GL_MULTISAMPLE_FILTER_HINT_NV() {
        return (int)34100L;
    }
    public static int GL_POINT_SPRITE_NV() {
        return (int)34913L;
    }
    public static int GL_COORD_REPLACE_NV() {
        return (int)34914L;
    }
    public static int GL_POINT_SPRITE_R_MODE_NV() {
        return (int)34915L;
    }
    public static int GL_NORMAL_MAP_NV() {
        return (int)34065L;
    }
    public static int GL_REFLECTION_MAP_NV() {
        return (int)34066L;
    }
    public static int GL_COLOR_MATRIX_SGI() {
        return (int)32945L;
    }
    public static int GL_COLOR_MATRIX_STACK_DEPTH_SGI() {
        return (int)32946L;
    }
    public static int GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI() {
        return (int)32947L;
    }
    public static int GL_POST_COLOR_MATRIX_RED_SCALE_SGI() {
        return (int)32948L;
    }
    public static int GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI() {
        return (int)32949L;
    }
    public static int GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI() {
        return (int)32950L;
    }
    public static int GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI() {
        return (int)32951L;
    }
    public static int GL_POST_COLOR_MATRIX_RED_BIAS_SGI() {
        return (int)32952L;
    }
    public static int GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI() {
        return (int)32953L;
    }
    public static int GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI() {
        return (int)32954L;
    }
    public static int GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI() {
        return (int)32955L;
    }
    public static int GL_GENERATE_MIPMAP_SGIS() {
        return (int)33169L;
    }
    public static int GL_GENERATE_MIPMAP_HINT_SGIS() {
        return (int)33170L;
    }
    public static int GL_CLAMP_TO_EDGE_SGIS() {
        return (int)33071L;
    }
    public static int GL_TEXTURE_MIN_LOD_SGIS() {
        return (int)33082L;
    }
    public static int GL_TEXTURE_MAX_LOD_SGIS() {
        return (int)33083L;
    }
    public static int GL_TEXTURE_BASE_LEVEL_SGIS() {
        return (int)33084L;
    }
    public static int GL_TEXTURE_MAX_LEVEL_SGIS() {
        return (int)33085L;
    }
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_fast16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_fast32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_ct_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_rune_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_wint_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __darwin_blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_blksize_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_dev_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __darwin_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __darwin_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __darwin_suseconds_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __darwin_pthread_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong user_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfInt GLint = Constants$root.C_INT$LAYOUT;
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_INT$LAYOUT;
    public static OfByte GLchar = Constants$root.C_CHAR$LAYOUT;
    public static OfByte GLcharARB = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress GLhandleARB = Constants$root.C_POINTER$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt GLfixed = Constants$root.C_INT$LAYOUT;
    public static OfLong GLint64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress GLsync = Constants$root.C_POINTER$LAYOUT;
    public static OfLong GLint64EXT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptr = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLintptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong GLsizeiptrARB = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle glClampColorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glClampColorARB$MH,"glClampColorARB");
    }
    public static void glClampColorARB ( int target,  int clamp) {
        var mh$ = glClampColorARB$MH();
        try {
            mh$.invokeExact(target, clamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawBuffersARB$MH,"glDrawBuffersARB");
    }
    public static void glDrawBuffersARB ( int n,  Addressable bufs) {
        var mh$ = glDrawBuffersARB$MH();
        try {
            mh$.invokeExact(n, bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawElementsBaseVertex$MH,"glDrawElementsBaseVertex");
    }
    public static void glDrawElementsBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int base_vertex) {
        var mh$ = glDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawRangeElementsBaseVertex$MH,"glDrawRangeElementsBaseVertex");
    }
    public static void glDrawRangeElementsBaseVertex ( int mode,  int start,  int end,  int count,  int type,  Addressable indices,  int base_vertex) {
        var mh$ = glDrawRangeElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glDrawElementsInstancedBaseVertex$MH,"glDrawElementsInstancedBaseVertex");
    }
    public static void glDrawElementsInstancedBaseVertex ( int mode,  int count,  int type,  Addressable indices,  int primcount,  int base_vertex) {
        var mh$ = glDrawElementsInstancedBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsBaseVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$0.glMultiDrawElementsBaseVertex$MH,"glMultiDrawElementsBaseVertex");
    }
    public static void glMultiDrawElementsBaseVertex ( int mode,  Addressable count,  int type,  Addressable indices,  int primcount,  Addressable base_vertex) {
        var mh$ = glMultiDrawElementsBaseVertex$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount, base_vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArraysInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDrawArraysInstancedARB$MH,"glDrawArraysInstancedARB");
    }
    public static void glDrawArraysInstancedARB ( int mode,  int first,  int count,  int primcount) {
        var mh$ = glDrawArraysInstancedARB$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementsInstancedARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDrawElementsInstancedARB$MH,"glDrawElementsInstancedARB");
    }
    public static void glDrawElementsInstancedARB ( int mode,  int count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glDrawElementsInstancedARB$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glIsRenderbuffer$MH,"glIsRenderbuffer");
    }
    public static byte glIsRenderbuffer ( int renderbuffer) {
        var mh$ = glIsRenderbuffer$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glBindRenderbuffer$MH,"glBindRenderbuffer");
    }
    public static void glBindRenderbuffer ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbuffer$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glDeleteRenderbuffers$MH,"glDeleteRenderbuffers");
    }
    public static void glDeleteRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1.glGenRenderbuffers$MH,"glGenRenderbuffers");
    }
    public static void glGenRenderbuffers ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffers$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorage$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glRenderbufferStorage$MH,"glRenderbufferStorage");
    }
    public static void glRenderbufferStorage ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorage$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGetRenderbufferParameteriv$MH,"glGetRenderbufferParameteriv");
    }
    public static void glGetRenderbufferParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameteriv$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glIsFramebuffer$MH,"glIsFramebuffer");
    }
    public static byte glIsFramebuffer ( int framebuffer) {
        var mh$ = glIsFramebuffer$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glBindFramebuffer$MH,"glBindFramebuffer");
    }
    public static void glBindFramebuffer ( int target,  int framebuffer) {
        var mh$ = glBindFramebuffer$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glDeleteFramebuffers$MH,"glDeleteFramebuffers");
    }
    public static void glDeleteFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$2.glGenFramebuffers$MH,"glGenFramebuffers");
    }
    public static void glGenFramebuffers ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffers$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glCheckFramebufferStatus$MH,"glCheckFramebufferStatus");
    }
    public static int glCheckFramebufferStatus ( int target) {
        var mh$ = glCheckFramebufferStatus$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture1D$MH,"glFramebufferTexture1D");
    }
    public static void glFramebufferTexture1D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture2D$MH,"glFramebufferTexture2D");
    }
    public static void glFramebufferTexture2D ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3D$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferTexture3D$MH,"glFramebufferTexture3D");
    }
    public static void glFramebufferTexture3D ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3D$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glFramebufferRenderbuffer$MH,"glFramebufferRenderbuffer");
    }
    public static void glFramebufferRenderbuffer ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbuffer$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.glGetFramebufferAttachmentParameteriv$MH,"glGetFramebufferAttachmentParameteriv");
    }
    public static void glGetFramebufferAttachmentParameteriv ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameteriv$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmap$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glGenerateMipmap$MH,"glGenerateMipmap");
    }
    public static void glGenerateMipmap ( int target) {
        var mh$ = glGenerateMipmap$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glBlitFramebuffer$MH,"glBlitFramebuffer");
    }
    public static void glBlitFramebuffer ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebuffer$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisample$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glRenderbufferStorageMultisample$MH,"glRenderbufferStorageMultisample");
    }
    public static void glRenderbufferStorageMultisample ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisample$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glFramebufferTextureLayer$MH,"glFramebufferTextureLayer");
    }
    public static void glFramebufferTextureLayer ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayer$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribDivisorARB$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glVertexAttribDivisorARB$MH,"glVertexAttribDivisorARB");
    }
    public static void glVertexAttribDivisorARB ( int index,  int divisor) {
        var mh$ = glVertexAttribDivisorARB$MH();
        try {
            mh$.invokeExact(index, divisor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$4.glSampleCoverageARB$MH,"glSampleCoverageARB");
    }
    public static void glSampleCoverageARB ( float value,  byte invert) {
        var mh$ = glSampleCoverageARB$MH();
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = glActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = glClientActiveTextureARB$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = glMultiTexCoord1dARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = glMultiTexCoord1fARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$5.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = glMultiTexCoord1iARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = glMultiTexCoord1sARB$MH();
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord1svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = glMultiTexCoord2dARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$6.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = glMultiTexCoord2fARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = glMultiTexCoord2iARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = glMultiTexCoord2sARB$MH();
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$7.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord2svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = glMultiTexCoord3dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = glMultiTexCoord3fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = glMultiTexCoord3iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$8.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = glMultiTexCoord3sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord3svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = glMultiTexCoord4dARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4dvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = glMultiTexCoord4fARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$9.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4fvARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = glMultiTexCoord4iARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4ivARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = glMultiTexCoord4sARB$MH();
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = glMultiTexCoord4svARB$MH();
        try {
            mh$.invokeExact(target, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glGenQueriesARB$MH,"glGenQueriesARB");
    }
    public static void glGenQueriesARB ( int n,  Addressable ids) {
        var mh$ = glGenQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteQueriesARB$MH() {
        return RuntimeHelper.requireNonNull(constants$10.glDeleteQueriesARB$MH,"glDeleteQueriesARB");
    }
    public static void glDeleteQueriesARB ( int n,  Addressable ids) {
        var mh$ = glDeleteQueriesARB$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glIsQueryARB$MH,"glIsQueryARB");
    }
    public static byte glIsQueryARB ( int id) {
        var mh$ = glIsQueryARB$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glBeginQueryARB$MH,"glBeginQueryARB");
    }
    public static void glBeginQueryARB ( int target,  int id) {
        var mh$ = glBeginQueryARB$MH();
        try {
            mh$.invokeExact(target, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndQueryARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glEndQueryARB$MH,"glEndQueryARB");
    }
    public static void glEndQueryARB ( int target) {
        var mh$ = glEndQueryARB$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryivARB$MH,"glGetQueryivARB");
    }
    public static void glGetQueryivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetQueryivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryObjectivARB$MH,"glGetQueryObjectivARB");
    }
    public static void glGetQueryObjectivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$11.glGetQueryObjectuivARB$MH,"glGetQueryObjectuivARB");
    }
    public static void glGetQueryObjectuivARB ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectuivARB$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glPointParameterfARB$MH,"glPointParameterfARB");
    }
    public static void glPointParameterfARB ( int pname,  float param) {
        var mh$ = glPointParameterfARB$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glPointParameterfvARB$MH,"glPointParameterfvARB");
    }
    public static void glPointParameterfvARB ( int pname,  Addressable params) {
        var mh$ = glPointParameterfvARB$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glProvokingVertex$MH,"glProvokingVertex");
    }
    public static void glProvokingVertex ( int mode) {
        var mh$ = glProvokingVertex$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glDeleteObjectARB$MH,"glDeleteObjectARB");
    }
    public static void glDeleteObjectARB ( Addressable obj) {
        var mh$ = glDeleteObjectARB$MH();
        try {
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHandleARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glGetHandleARB$MH,"glGetHandleARB");
    }
    public static MemoryAddress glGetHandleARB ( int pname) {
        var mh$ = glGetHandleARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDetachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$12.glDetachObjectARB$MH,"glDetachObjectARB");
    }
    public static void glDetachObjectARB ( Addressable containerObj,  Addressable attachedObj) {
        var mh$ = glDetachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, attachedObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateShaderObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCreateShaderObjectARB$MH,"glCreateShaderObjectARB");
    }
    public static MemoryAddress glCreateShaderObjectARB ( int shaderType) {
        var mh$ = glCreateShaderObjectARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(shaderType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glShaderSourceARB$MH,"glShaderSourceARB");
    }
    public static void glShaderSourceARB ( Addressable shaderObj,  int count,  Addressable string,  Addressable length) {
        var mh$ = glShaderSourceARB$MH();
        try {
            mh$.invokeExact(shaderObj, count, string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompileShaderARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCompileShaderARB$MH,"glCompileShaderARB");
    }
    public static void glCompileShaderARB ( Addressable shaderObj) {
        var mh$ = glCompileShaderARB$MH();
        try {
            mh$.invokeExact(shaderObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCreateProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glCreateProgramObjectARB$MH,"glCreateProgramObjectARB");
    }
    public static MemoryAddress glCreateProgramObjectARB () {
        var mh$ = glCreateProgramObjectARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAttachObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glAttachObjectARB$MH,"glAttachObjectARB");
    }
    public static void glAttachObjectARB ( Addressable containerObj,  Addressable obj) {
        var mh$ = glAttachObjectARB$MH();
        try {
            mh$.invokeExact(containerObj, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLinkProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$13.glLinkProgramARB$MH,"glLinkProgramARB");
    }
    public static void glLinkProgramARB ( Addressable programObj) {
        var mh$ = glLinkProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUseProgramObjectARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUseProgramObjectARB$MH,"glUseProgramObjectARB");
    }
    public static void glUseProgramObjectARB ( Addressable programObj) {
        var mh$ = glUseProgramObjectARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glValidateProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glValidateProgramARB$MH,"glValidateProgramARB");
    }
    public static void glValidateProgramARB ( Addressable programObj) {
        var mh$ = glValidateProgramARB$MH();
        try {
            mh$.invokeExact(programObj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform1fARB$MH,"glUniform1fARB");
    }
    public static void glUniform1fARB ( int location,  float v0) {
        var mh$ = glUniform1fARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform2fARB$MH,"glUniform2fARB");
    }
    public static void glUniform2fARB ( int location,  float v0,  float v1) {
        var mh$ = glUniform2fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform3fARB$MH,"glUniform3fARB");
    }
    public static void glUniform3fARB ( int location,  float v0,  float v1,  float v2) {
        var mh$ = glUniform3fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$14.glUniform4fARB$MH,"glUniform4fARB");
    }
    public static void glUniform4fARB ( int location,  float v0,  float v1,  float v2,  float v3) {
        var mh$ = glUniform4fARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform1iARB$MH,"glUniform1iARB");
    }
    public static void glUniform1iARB ( int location,  int v0) {
        var mh$ = glUniform1iARB$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform2iARB$MH,"glUniform2iARB");
    }
    public static void glUniform2iARB ( int location,  int v0,  int v1) {
        var mh$ = glUniform2iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform3iARB$MH,"glUniform3iARB");
    }
    public static void glUniform3iARB ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform4iARB$MH,"glUniform4iARB");
    }
    public static void glUniform4iARB ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4iARB$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform1fvARB$MH,"glUniform1fvARB");
    }
    public static void glUniform1fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$15.glUniform2fvARB$MH,"glUniform2fvARB");
    }
    public static void glUniform2fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform3fvARB$MH,"glUniform3fvARB");
    }
    public static void glUniform3fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform4fvARB$MH,"glUniform4fvARB");
    }
    public static void glUniform4fvARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4fvARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform1ivARB$MH,"glUniform1ivARB");
    }
    public static void glUniform1ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform2ivARB$MH,"glUniform2ivARB");
    }
    public static void glUniform2ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform3ivARB$MH,"glUniform3ivARB");
    }
    public static void glUniform3ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$16.glUniform4ivARB$MH,"glUniform4ivARB");
    }
    public static void glUniform4ivARB ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4ivARB$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix2fvARB$MH,"glUniformMatrix2fvARB");
    }
    public static void glUniformMatrix2fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix2fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix3fvARB$MH,"glUniformMatrix3fvARB");
    }
    public static void glUniformMatrix3fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix3fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformMatrix4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glUniformMatrix4fvARB$MH,"glUniformMatrix4fvARB");
    }
    public static void glUniformMatrix4fvARB ( int location,  int count,  byte transpose,  Addressable value) {
        var mh$ = glUniformMatrix4fvARB$MH();
        try {
            mh$.invokeExact(location, count, transpose, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetObjectParameterfvARB$MH,"glGetObjectParameterfvARB");
    }
    public static void glGetObjectParameterfvARB ( Addressable obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterfvARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetObjectParameterivARB$MH,"glGetObjectParameterivARB");
    }
    public static void glGetObjectParameterivARB ( Addressable obj,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivARB$MH();
        try {
            mh$.invokeExact(obj, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInfoLogARB$MH() {
        return RuntimeHelper.requireNonNull(constants$17.glGetInfoLogARB$MH,"glGetInfoLogARB");
    }
    public static void glGetInfoLogARB ( Addressable obj,  int maxLength,  Addressable length,  Addressable infoLog) {
        var mh$ = glGetInfoLogARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, infoLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttachedObjectsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetAttachedObjectsARB$MH,"glGetAttachedObjectsARB");
    }
    public static void glGetAttachedObjectsARB ( Addressable containerObj,  int maxCount,  Addressable count,  Addressable obj) {
        var mh$ = glGetAttachedObjectsARB$MH();
        try {
            mh$.invokeExact(containerObj, maxCount, count, obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformLocationARB$MH,"glGetUniformLocationARB");
    }
    public static int glGetUniformLocationARB ( Addressable programObj,  Addressable name) {
        var mh$ = glGetUniformLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveUniformARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetActiveUniformARB$MH,"glGetActiveUniformARB");
    }
    public static void glGetActiveUniformARB ( Addressable programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveUniformARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformfvARB$MH,"glGetUniformfvARB");
    }
    public static void glGetUniformfvARB ( Addressable programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformfvARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetUniformivARB$MH,"glGetUniformivARB");
    }
    public static void glGetUniformivARB ( Addressable programObj,  int location,  Addressable params) {
        var mh$ = glGetUniformivARB$MH();
        try {
            mh$.invokeExact(programObj, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetShaderSourceARB$MH() {
        return RuntimeHelper.requireNonNull(constants$18.glGetShaderSourceARB$MH,"glGetShaderSourceARB");
    }
    public static void glGetShaderSourceARB ( Addressable obj,  int maxLength,  Addressable length,  Addressable source) {
        var mh$ = glGetShaderSourceARB$MH();
        try {
            mh$.invokeExact(obj, maxLength, length, source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFenceSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glFenceSync$MH,"glFenceSync");
    }
    public static MemoryAddress glFenceSync ( int condition,  int flags) {
        var mh$ = glFenceSync$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(condition, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glIsSync$MH,"glIsSync");
    }
    public static byte glIsSync ( Addressable sync) {
        var mh$ = glIsSync$MH();
        try {
            return (byte)mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glDeleteSync$MH,"glDeleteSync");
    }
    public static void glDeleteSync ( Addressable sync) {
        var mh$ = glDeleteSync$MH();
        try {
            mh$.invokeExact(sync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glClientWaitSync$MH,"glClientWaitSync");
    }
    public static int glClientWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glClientWaitSync$MH();
        try {
            return (int)mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWaitSync$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glWaitSync$MH,"glWaitSync");
    }
    public static void glWaitSync ( Addressable sync,  int flags,  long timeout) {
        var mh$ = glWaitSync$MH();
        try {
            mh$.invokeExact(sync, flags, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetInteger64v$MH() {
        return RuntimeHelper.requireNonNull(constants$19.glGetInteger64v$MH,"glGetInteger64v");
    }
    public static void glGetInteger64v ( int pname,  Addressable params) {
        var mh$ = glGetInteger64v$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSynciv$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glGetSynciv$MH,"glGetSynciv");
    }
    public static void glGetSynciv ( Addressable sync,  int pname,  int bufSize,  Addressable length,  Addressable values) {
        var mh$ = glGetSynciv$MH();
        try {
            mh$.invokeExact(sync, pname, bufSize, length, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage3DARB$MH,"glCompressedTexImage3DARB");
    }
    public static void glCompressedTexImage3DARB ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage2DARB$MH,"glCompressedTexImage2DARB");
    }
    public static void glCompressedTexImage2DARB ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexImage1DARB$MH,"glCompressedTexImage1DARB");
    }
    public static void glCompressedTexImage1DARB ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexSubImage3DARB$MH,"glCompressedTexSubImage3DARB");
    }
    public static void glCompressedTexSubImage3DARB ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage3DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$20.glCompressedTexSubImage2DARB$MH,"glCompressedTexSubImage2DARB");
    }
    public static void glCompressedTexSubImage2DARB ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage2DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1DARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glCompressedTexSubImage1DARB$MH,"glCompressedTexSubImage1DARB");
    }
    public static void glCompressedTexSubImage1DARB ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = glCompressedTexSubImage1DARB$MH();
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glGetCompressedTexImageARB$MH,"glGetCompressedTexImageARB");
    }
    public static void glGetCompressedTexImageARB ( int target,  int level,  Addressable data) {
        var mh$ = glGetCompressedTexImageARB$MH();
        try {
            mh$.invokeExact(target, level, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glLoadTransposeMatrixfARB$MH,"glLoadTransposeMatrixfARB");
    }
    public static void glLoadTransposeMatrixfARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glLoadTransposeMatrixdARB$MH,"glLoadTransposeMatrixdARB");
    }
    public static void glLoadTransposeMatrixdARB ( Addressable m) {
        var mh$ = glLoadTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixfARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glMultTransposeMatrixfARB$MH,"glMultTransposeMatrixfARB");
    }
    public static void glMultTransposeMatrixfARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixfARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixdARB$MH() {
        return RuntimeHelper.requireNonNull(constants$21.glMultTransposeMatrixdARB$MH,"glMultTransposeMatrixdARB");
    }
    public static void glMultTransposeMatrixdARB ( Addressable m) {
        var mh$ = glMultTransposeMatrixdARB$MH();
        try {
            mh$.invokeExact(m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightbvARB$MH,"glWeightbvARB");
    }
    public static void glWeightbvARB ( int size,  Addressable weights) {
        var mh$ = glWeightbvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightsvARB$MH,"glWeightsvARB");
    }
    public static void glWeightsvARB ( int size,  Addressable weights) {
        var mh$ = glWeightsvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightivARB$MH,"glWeightivARB");
    }
    public static void glWeightivARB ( int size,  Addressable weights) {
        var mh$ = glWeightivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightfvARB$MH,"glWeightfvARB");
    }
    public static void glWeightfvARB ( int size,  Addressable weights) {
        var mh$ = glWeightfvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightdvARB$MH,"glWeightdvARB");
    }
    public static void glWeightdvARB ( int size,  Addressable weights) {
        var mh$ = glWeightdvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$22.glWeightubvARB$MH,"glWeightubvARB");
    }
    public static void glWeightubvARB ( int size,  Addressable weights) {
        var mh$ = glWeightubvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightusvARB$MH,"glWeightusvARB");
    }
    public static void glWeightusvARB ( int size,  Addressable weights) {
        var mh$ = glWeightusvARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightuivARB$MH,"glWeightuivARB");
    }
    public static void glWeightuivARB ( int size,  Addressable weights) {
        var mh$ = glWeightuivARB$MH();
        try {
            mh$.invokeExact(size, weights);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWeightPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glWeightPointerARB$MH,"glWeightPointerARB");
    }
    public static void glWeightPointerARB ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glWeightPointerARB$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexBlendARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glVertexBlendARB$MH,"glVertexBlendARB");
    }
    public static void glVertexBlendARB ( int count) {
        var mh$ = glVertexBlendARB$MH();
        try {
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glBindBufferARB$MH,"glBindBufferARB");
    }
    public static void glBindBufferARB ( int target,  int buffer) {
        var mh$ = glBindBufferARB$MH();
        try {
            mh$.invokeExact(target, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$23.glDeleteBuffersARB$MH,"glDeleteBuffersARB");
    }
    public static void glDeleteBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glDeleteBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenBuffersARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glGenBuffersARB$MH,"glGenBuffersARB");
    }
    public static void glGenBuffersARB ( int n,  Addressable buffers) {
        var mh$ = glGenBuffersARB$MH();
        try {
            mh$.invokeExact(n, buffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glIsBufferARB$MH,"glIsBufferARB");
    }
    public static byte glIsBufferARB ( int buffer) {
        var mh$ = glIsBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glBufferDataARB$MH,"glBufferDataARB");
    }
    public static void glBufferDataARB ( int target,  long size,  Addressable data,  int usage) {
        var mh$ = glBufferDataARB$MH();
        try {
            mh$.invokeExact(target, size, data, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glBufferSubDataARB$MH,"glBufferSubDataARB");
    }
    public static void glBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferSubDataARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glGetBufferSubDataARB$MH,"glGetBufferSubDataARB");
    }
    public static void glGetBufferSubDataARB ( int target,  long offset,  long size,  Addressable data) {
        var mh$ = glGetBufferSubDataARB$MH();
        try {
            mh$.invokeExact(target, offset, size, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$24.glMapBufferARB$MH,"glMapBufferARB");
    }
    public static MemoryAddress glMapBufferARB ( int target,  int access) {
        var mh$ = glMapBufferARB$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(target, access);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUnmapBufferARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glUnmapBufferARB$MH,"glUnmapBufferARB");
    }
    public static byte glUnmapBufferARB ( int target) {
        var mh$ = glUnmapBufferARB$MH();
        try {
            return (byte)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferParameterivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGetBufferParameterivARB$MH,"glGetBufferParameterivARB");
    }
    public static void glGetBufferParameterivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferParameterivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBufferPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGetBufferPointervARB$MH,"glGetBufferPointervARB");
    }
    public static void glGetBufferPointervARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetBufferPointervARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glBindProgramARB$MH,"glBindProgramARB");
    }
    public static void glBindProgramARB ( int target,  int program) {
        var mh$ = glBindProgramARB$MH();
        try {
            mh$.invokeExact(target, program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glDeleteProgramsARB$MH,"glDeleteProgramsARB");
    }
    public static void glDeleteProgramsARB ( int n,  Addressable programs) {
        var mh$ = glDeleteProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenProgramsARB$MH() {
        return RuntimeHelper.requireNonNull(constants$25.glGenProgramsARB$MH,"glGenProgramsARB");
    }
    public static void glGenProgramsARB ( int n,  Addressable programs) {
        var mh$ = glGenProgramsARB$MH();
        try {
            mh$.invokeExact(n, programs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsProgramARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glIsProgramARB$MH,"glIsProgramARB");
    }
    public static byte glIsProgramARB ( int program) {
        var mh$ = glIsProgramARB$MH();
        try {
            return (byte)mh$.invokeExact(program);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4dARB$MH,"glProgramEnvParameter4dARB");
    }
    public static void glProgramEnvParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramEnvParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4dvARB$MH,"glProgramEnvParameter4dvARB");
    }
    public static void glProgramEnvParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4fARB$MH,"glProgramEnvParameter4fARB");
    }
    public static void glProgramEnvParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramEnvParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramEnvParameter4fvARB$MH,"glProgramEnvParameter4fvARB");
    }
    public static void glProgramEnvParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramEnvParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$26.glProgramLocalParameter4dARB$MH,"glProgramLocalParameter4dARB");
    }
    public static void glProgramLocalParameter4dARB ( int target,  int index,  double x,  double y,  double z,  double w) {
        var mh$ = glProgramLocalParameter4dARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4dvARB$MH,"glProgramLocalParameter4dvARB");
    }
    public static void glProgramLocalParameter4dvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4dvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4fARB$MH,"glProgramLocalParameter4fARB");
    }
    public static void glProgramLocalParameter4fARB ( int target,  int index,  float x,  float y,  float z,  float w) {
        var mh$ = glProgramLocalParameter4fARB$MH();
        try {
            mh$.invokeExact(target, index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameter4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramLocalParameter4fvARB$MH,"glProgramLocalParameter4fvARB");
    }
    public static void glProgramLocalParameter4fvARB ( int target,  int index,  Addressable params) {
        var mh$ = glProgramLocalParameter4fvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glGetProgramEnvParameterdvARB$MH,"glGetProgramEnvParameterdvARB");
    }
    public static void glGetProgramEnvParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramEnvParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glGetProgramEnvParameterfvARB$MH,"glGetProgramEnvParameterfvARB");
    }
    public static void glGetProgramEnvParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramEnvParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramEnvParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$27.glProgramEnvParameters4fvEXT$MH,"glProgramEnvParameters4fvEXT");
    }
    public static void glProgramEnvParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramEnvParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramLocalParameters4fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glProgramLocalParameters4fvEXT$MH,"glProgramLocalParameters4fvEXT");
    }
    public static void glProgramLocalParameters4fvEXT ( int target,  int index,  int count,  Addressable params) {
        var mh$ = glProgramLocalParameters4fvEXT$MH();
        try {
            mh$.invokeExact(target, index, count, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramLocalParameterdvARB$MH,"glGetProgramLocalParameterdvARB");
    }
    public static void glGetProgramLocalParameterdvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterdvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramLocalParameterfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramLocalParameterfvARB$MH,"glGetProgramLocalParameterfvARB");
    }
    public static void glGetProgramLocalParameterfvARB ( int target,  int index,  Addressable params) {
        var mh$ = glGetProgramLocalParameterfvARB$MH();
        try {
            mh$.invokeExact(target, index, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glProgramStringARB$MH,"glProgramStringARB");
    }
    public static void glProgramStringARB ( int target,  int format,  int len,  Addressable string) {
        var mh$ = glProgramStringARB$MH();
        try {
            mh$.invokeExact(target, format, len, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramStringARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramStringARB$MH,"glGetProgramStringARB");
    }
    public static void glGetProgramStringARB ( int target,  int pname,  Addressable string) {
        var mh$ = glGetProgramStringARB$MH();
        try {
            mh$.invokeExact(target, pname, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetProgramivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$28.glGetProgramivARB$MH,"glGetProgramivARB");
    }
    public static void glGetProgramivARB ( int target,  int pname,  Addressable params) {
        var mh$ = glGetProgramivARB$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glBindAttribLocationARB$MH,"glBindAttribLocationARB");
    }
    public static void glBindAttribLocationARB ( Addressable programObj,  int index,  Addressable name) {
        var mh$ = glBindAttribLocationARB$MH();
        try {
            mh$.invokeExact(programObj, index, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetActiveAttribARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glGetActiveAttribARB$MH,"glGetActiveAttribARB");
    }
    public static void glGetActiveAttribARB ( Addressable programObj,  int index,  int maxLength,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetActiveAttribARB$MH();
        try {
            mh$.invokeExact(programObj, index, maxLength, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetAttribLocationARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glGetAttribLocationARB$MH,"glGetAttribLocationARB");
    }
    public static int glGetAttribLocationARB ( Addressable programObj,  Addressable name) {
        var mh$ = glGetAttribLocationARB$MH();
        try {
            return (int)mh$.invokeExact(programObj, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1dARB$MH,"glVertexAttrib1dARB");
    }
    public static void glVertexAttrib1dARB ( int index,  double x) {
        var mh$ = glVertexAttrib1dARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1dvARB$MH,"glVertexAttrib1dvARB");
    }
    public static void glVertexAttrib1dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$29.glVertexAttrib1fARB$MH,"glVertexAttrib1fARB");
    }
    public static void glVertexAttrib1fARB ( int index,  float x) {
        var mh$ = glVertexAttrib1fARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1fvARB$MH,"glVertexAttrib1fvARB");
    }
    public static void glVertexAttrib1fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1sARB$MH,"glVertexAttrib1sARB");
    }
    public static void glVertexAttrib1sARB ( int index,  short x) {
        var mh$ = glVertexAttrib1sARB$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib1svARB$MH,"glVertexAttrib1svARB");
    }
    public static void glVertexAttrib1svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib1svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2dARB$MH,"glVertexAttrib2dARB");
    }
    public static void glVertexAttrib2dARB ( int index,  double x,  double y) {
        var mh$ = glVertexAttrib2dARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2dvARB$MH,"glVertexAttrib2dvARB");
    }
    public static void glVertexAttrib2dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$30.glVertexAttrib2fARB$MH,"glVertexAttrib2fARB");
    }
    public static void glVertexAttrib2fARB ( int index,  float x,  float y) {
        var mh$ = glVertexAttrib2fARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2fvARB$MH,"glVertexAttrib2fvARB");
    }
    public static void glVertexAttrib2fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2sARB$MH,"glVertexAttrib2sARB");
    }
    public static void glVertexAttrib2sARB ( int index,  short x,  short y) {
        var mh$ = glVertexAttrib2sARB$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib2svARB$MH,"glVertexAttrib2svARB");
    }
    public static void glVertexAttrib2svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib2svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3dARB$MH,"glVertexAttrib3dARB");
    }
    public static void glVertexAttrib3dARB ( int index,  double x,  double y,  double z) {
        var mh$ = glVertexAttrib3dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3dvARB$MH,"glVertexAttrib3dvARB");
    }
    public static void glVertexAttrib3dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.glVertexAttrib3fARB$MH,"glVertexAttrib3fARB");
    }
    public static void glVertexAttrib3fARB ( int index,  float x,  float y,  float z) {
        var mh$ = glVertexAttrib3fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3fvARB$MH,"glVertexAttrib3fvARB");
    }
    public static void glVertexAttrib3fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3sARB$MH,"glVertexAttrib3sARB");
    }
    public static void glVertexAttrib3sARB ( int index,  short x,  short y,  short z) {
        var mh$ = glVertexAttrib3sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib3svARB$MH,"glVertexAttrib3svARB");
    }
    public static void glVertexAttrib3svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib3svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NbvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NbvARB$MH,"glVertexAttrib4NbvARB");
    }
    public static void glVertexAttrib4NbvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NbvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NivARB$MH,"glVertexAttrib4NivARB");
    }
    public static void glVertexAttrib4NivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NsvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$32.glVertexAttrib4NsvARB$MH,"glVertexAttrib4NsvARB");
    }
    public static void glVertexAttrib4NsvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NsvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NubARB$MH,"glVertexAttrib4NubARB");
    }
    public static void glVertexAttrib4NubARB ( int index,  byte x,  byte y,  byte z,  byte w) {
        var mh$ = glVertexAttrib4NubARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NubvARB$MH,"glVertexAttrib4NubvARB");
    }
    public static void glVertexAttrib4NubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NuivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NuivARB$MH,"glVertexAttrib4NuivARB");
    }
    public static void glVertexAttrib4NuivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NuivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4NusvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4NusvARB$MH,"glVertexAttrib4NusvARB");
    }
    public static void glVertexAttrib4NusvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4NusvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4bvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4bvARB$MH,"glVertexAttrib4bvARB");
    }
    public static void glVertexAttrib4bvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4bvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$33.glVertexAttrib4dARB$MH,"glVertexAttrib4dARB");
    }
    public static void glVertexAttrib4dARB ( int index,  double x,  double y,  double z,  double w) {
        var mh$ = glVertexAttrib4dARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4dvARB$MH,"glVertexAttrib4dvARB");
    }
    public static void glVertexAttrib4dvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4dvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4fARB$MH,"glVertexAttrib4fARB");
    }
    public static void glVertexAttrib4fARB ( int index,  float x,  float y,  float z,  float w) {
        var mh$ = glVertexAttrib4fARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4fvARB$MH,"glVertexAttrib4fvARB");
    }
    public static void glVertexAttrib4fvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4fvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4ivARB$MH,"glVertexAttrib4ivARB");
    }
    public static void glVertexAttrib4ivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4sARB$MH,"glVertexAttrib4sARB");
    }
    public static void glVertexAttrib4sARB ( int index,  short x,  short y,  short z,  short w) {
        var mh$ = glVertexAttrib4sARB$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$34.glVertexAttrib4svARB$MH,"glVertexAttrib4svARB");
    }
    public static void glVertexAttrib4svARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4svARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4ubvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4ubvARB$MH,"glVertexAttrib4ubvARB");
    }
    public static void glVertexAttrib4ubvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4ubvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4uivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4uivARB$MH,"glVertexAttrib4uivARB");
    }
    public static void glVertexAttrib4uivARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4uivARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttrib4usvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttrib4usvARB$MH,"glVertexAttrib4usvARB");
    }
    public static void glVertexAttrib4usvARB ( int index,  Addressable v) {
        var mh$ = glVertexAttrib4usvARB$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribPointerARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glVertexAttribPointerARB$MH,"glVertexAttribPointerARB");
    }
    public static void glVertexAttribPointerARB ( int index,  int size,  int type,  byte normalized,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribPointerARB$MH();
        try {
            mh$.invokeExact(index, size, type, normalized, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glDisableVertexAttribArrayARB$MH,"glDisableVertexAttribArrayARB");
    }
    public static void glDisableVertexAttribArrayARB ( int index) {
        var mh$ = glDisableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribArrayARB$MH() {
        return RuntimeHelper.requireNonNull(constants$35.glEnableVertexAttribArrayARB$MH,"glEnableVertexAttribArrayARB");
    }
    public static void glEnableVertexAttribArrayARB ( int index) {
        var mh$ = glEnableVertexAttribArrayARB$MH();
        try {
            mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribPointervARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribPointervARB$MH,"glGetVertexAttribPointervARB");
    }
    public static void glGetVertexAttribPointervARB ( int index,  int pname,  Addressable pointer) {
        var mh$ = glGetVertexAttribPointervARB$MH();
        try {
            mh$.invokeExact(index, pname, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribdvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribdvARB$MH,"glGetVertexAttribdvARB");
    }
    public static void glGetVertexAttribdvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribdvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribfvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribfvARB$MH,"glGetVertexAttribfvARB");
    }
    public static void glGetVertexAttribfvARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribfvARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glGetVertexAttribivARB$MH,"glGetVertexAttribivARB");
    }
    public static void glGetVertexAttribivARB ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribivARB$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glWindowPos2dARB$MH,"glWindowPos2dARB");
    }
    public static void glWindowPos2dARB ( double x,  double y) {
        var mh$ = glWindowPos2dARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$36.glWindowPos2dvARB$MH,"glWindowPos2dvARB");
    }
    public static void glWindowPos2dvARB ( Addressable p) {
        var mh$ = glWindowPos2dvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2fARB$MH,"glWindowPos2fARB");
    }
    public static void glWindowPos2fARB ( float x,  float y) {
        var mh$ = glWindowPos2fARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2fvARB$MH,"glWindowPos2fvARB");
    }
    public static void glWindowPos2fvARB ( Addressable p) {
        var mh$ = glWindowPos2fvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2iARB$MH,"glWindowPos2iARB");
    }
    public static void glWindowPos2iARB ( int x,  int y) {
        var mh$ = glWindowPos2iARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2ivARB$MH,"glWindowPos2ivARB");
    }
    public static void glWindowPos2ivARB ( Addressable p) {
        var mh$ = glWindowPos2ivARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2sARB$MH,"glWindowPos2sARB");
    }
    public static void glWindowPos2sARB ( short x,  short y) {
        var mh$ = glWindowPos2sARB$MH();
        try {
            mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$37.glWindowPos2svARB$MH,"glWindowPos2svARB");
    }
    public static void glWindowPos2svARB ( Addressable p) {
        var mh$ = glWindowPos2svARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3dARB$MH,"glWindowPos3dARB");
    }
    public static void glWindowPos3dARB ( double x,  double y,  double z) {
        var mh$ = glWindowPos3dARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3dvARB$MH,"glWindowPos3dvARB");
    }
    public static void glWindowPos3dvARB ( Addressable p) {
        var mh$ = glWindowPos3dvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3fARB$MH,"glWindowPos3fARB");
    }
    public static void glWindowPos3fARB ( float x,  float y,  float z) {
        var mh$ = glWindowPos3fARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3fvARB$MH,"glWindowPos3fvARB");
    }
    public static void glWindowPos3fvARB ( Addressable p) {
        var mh$ = glWindowPos3fvARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3iARB$MH,"glWindowPos3iARB");
    }
    public static void glWindowPos3iARB ( int x,  int y,  int z) {
        var mh$ = glWindowPos3iARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$38.glWindowPos3ivARB$MH,"glWindowPos3ivARB");
    }
    public static void glWindowPos3ivARB ( Addressable p) {
        var mh$ = glWindowPos3ivARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glWindowPos3sARB$MH,"glWindowPos3sARB");
    }
    public static void glWindowPos3sARB ( short x,  short y,  short z) {
        var mh$ = glWindowPos3sARB$MH();
        try {
            mh$.invokeExact(x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glWindowPos3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glWindowPos3svARB$MH,"glWindowPos3svARB");
    }
    public static void glWindowPos3svARB ( Addressable p) {
        var mh$ = glWindowPos3svARB$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniformBufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glUniformBufferEXT$MH,"glUniformBufferEXT");
    }
    public static void glUniformBufferEXT ( int program,  int location,  int buffer) {
        var mh$ = glUniformBufferEXT$MH();
        try {
            mh$.invokeExact(program, location, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformBufferSizeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glGetUniformBufferSizeEXT$MH,"glGetUniformBufferSizeEXT");
    }
    public static int glGetUniformBufferSizeEXT ( int program,  int location) {
        var mh$ = glGetUniformBufferSizeEXT$MH();
        try {
            return (int)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glGetUniformOffsetEXT$MH,"glGetUniformOffsetEXT");
    }
    public static long glGetUniformOffsetEXT ( int program,  int location) {
        var mh$ = glGetUniformOffsetEXT$MH();
        try {
            return (long)mh$.invokeExact(program, location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColorEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$39.glBlendColorEXT$MH,"glBlendColorEXT");
    }
    public static void glBlendColorEXT ( float red,  float green,  float blue,  float alpha) {
        var mh$ = glBlendColorEXT$MH();
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendEquationSeparateEXT$MH,"glBlendEquationSeparateEXT");
    }
    public static void glBlendEquationSeparateEXT ( int modeRGB,  int modeAlpha) {
        var mh$ = glBlendEquationSeparateEXT$MH();
        try {
            mh$.invokeExact(modeRGB, modeAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFuncSeparateEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendFuncSeparateEXT$MH,"glBlendFuncSeparateEXT");
    }
    public static void glBlendFuncSeparateEXT ( int sfactorRGB,  int dfactorRGB,  int sfactorAlpha,  int dfactorAlpha) {
        var mh$ = glBlendFuncSeparateEXT$MH();
        try {
            mh$.invokeExact(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glBlendEquationEXT$MH,"glBlendEquationEXT");
    }
    public static void glBlendEquationEXT ( int mode) {
        var mh$ = glBlendEquationEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLabelObjectEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glLabelObjectEXT$MH,"glLabelObjectEXT");
    }
    public static void glLabelObjectEXT ( int type,  int object,  int length,  Addressable label) {
        var mh$ = glLabelObjectEXT$MH();
        try {
            mh$.invokeExact(type, object, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectLabelEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glGetObjectLabelEXT$MH,"glGetObjectLabelEXT");
    }
    public static void glGetObjectLabelEXT ( int type,  int object,  int bufSize,  Addressable length,  Addressable label) {
        var mh$ = glGetObjectLabelEXT$MH();
        try {
            mh$.invokeExact(type, object, bufSize, length, label);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInsertEventMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$40.glInsertEventMarkerEXT$MH,"glInsertEventMarkerEXT");
    }
    public static void glInsertEventMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glInsertEventMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPushGroupMarkerEXT$MH,"glPushGroupMarkerEXT");
    }
    public static void glPushGroupMarkerEXT ( int length,  Addressable marker) {
        var mh$ = glPushGroupMarkerEXT$MH();
        try {
            mh$.invokeExact(length, marker);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopGroupMarkerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glPopGroupMarkerEXT$MH,"glPopGroupMarkerEXT");
    }
    public static void glPopGroupMarkerEXT () {
        var mh$ = glPopGroupMarkerEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDepthBoundsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glDepthBoundsEXT$MH,"glDepthBoundsEXT");
    }
    public static void glDepthBoundsEXT ( double zmin,  double zmax) {
        var mh$ = glDepthBoundsEXT$MH();
        try {
            mh$.invokeExact(zmin, zmax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaskIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glColorMaskIndexedEXT$MH,"glColorMaskIndexedEXT");
    }
    public static void glColorMaskIndexedEXT ( int index,  byte r,  byte g,  byte b,  byte a) {
        var mh$ = glColorMaskIndexedEXT$MH();
        try {
            mh$.invokeExact(index, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glEnableIndexedEXT$MH,"glEnableIndexedEXT");
    }
    public static void glEnableIndexedEXT ( int target,  int index) {
        var mh$ = glEnableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$41.glDisableIndexedEXT$MH,"glDisableIndexedEXT");
    }
    public static void glDisableIndexedEXT ( int target,  int index) {
        var mh$ = glDisableIndexedEXT$MH();
        try {
            mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsEnabledIndexedEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glIsEnabledIndexedEXT$MH,"glIsEnabledIndexedEXT");
    }
    public static byte glIsEnabledIndexedEXT ( int target,  int index) {
        var mh$ = glIsEnabledIndexedEXT$MH();
        try {
            return (byte)mh$.invokeExact(target, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glDrawRangeElementsEXT$MH,"glDrawRangeElementsEXT");
    }
    public static void glDrawRangeElementsEXT ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = glDrawRangeElementsEXT$MH();
        try {
            mh$.invokeExact(mode, start, end, count, type, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoordfEXT$MH,"glFogCoordfEXT");
    }
    public static void glFogCoordfEXT ( float coord) {
        var mh$ = glFogCoordfEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordfvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoordfvEXT$MH,"glFogCoordfvEXT");
    }
    public static void glFogCoordfvEXT ( Addressable coord) {
        var mh$ = glFogCoordfvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoorddEXT$MH,"glFogCoorddEXT");
    }
    public static void glFogCoorddEXT ( double coord) {
        var mh$ = glFogCoorddEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoorddvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$42.glFogCoorddvEXT$MH,"glFogCoorddvEXT");
    }
    public static void glFogCoorddvEXT ( Addressable coord) {
        var mh$ = glFogCoorddvEXT$MH();
        try {
            mh$.invokeExact(coord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogCoordPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glFogCoordPointerEXT$MH,"glFogCoordPointerEXT");
    }
    public static void glFogCoordPointerEXT ( int type,  int stride,  Addressable pointer) {
        var mh$ = glFogCoordPointerEXT$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlitFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glBlitFramebufferEXT$MH,"glBlitFramebufferEXT");
    }
    public static void glBlitFramebufferEXT ( int srcX0,  int srcY0,  int srcX1,  int srcY1,  int dstX0,  int dstY0,  int dstX1,  int dstY1,  int mask,  int filter) {
        var mh$ = glBlitFramebufferEXT$MH();
        try {
            mh$.invokeExact(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageMultisampleEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glRenderbufferStorageMultisampleEXT$MH,"glRenderbufferStorageMultisampleEXT");
    }
    public static void glRenderbufferStorageMultisampleEXT ( int target,  int samples,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageMultisampleEXT$MH();
        try {
            mh$.invokeExact(target, samples, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glIsRenderbufferEXT$MH,"glIsRenderbufferEXT");
    }
    public static byte glIsRenderbufferEXT ( int renderbuffer) {
        var mh$ = glIsRenderbufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glBindRenderbufferEXT$MH,"glBindRenderbufferEXT");
    }
    public static void glBindRenderbufferEXT ( int target,  int renderbuffer) {
        var mh$ = glBindRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$43.glDeleteRenderbuffersEXT$MH,"glDeleteRenderbuffersEXT");
    }
    public static void glDeleteRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glDeleteRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenRenderbuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glGenRenderbuffersEXT$MH,"glGenRenderbuffersEXT");
    }
    public static void glGenRenderbuffersEXT ( int n,  Addressable renderbuffers) {
        var mh$ = glGenRenderbuffersEXT$MH();
        try {
            mh$.invokeExact(n, renderbuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRenderbufferStorageEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glRenderbufferStorageEXT$MH,"glRenderbufferStorageEXT");
    }
    public static void glRenderbufferStorageEXT ( int target,  int internalformat,  int width,  int height) {
        var mh$ = glRenderbufferStorageEXT$MH();
        try {
            mh$.invokeExact(target, internalformat, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetRenderbufferParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glGetRenderbufferParameterivEXT$MH,"glGetRenderbufferParameterivEXT");
    }
    public static void glGetRenderbufferParameterivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetRenderbufferParameterivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glIsFramebufferEXT$MH,"glIsFramebufferEXT");
    }
    public static byte glIsFramebufferEXT ( int framebuffer) {
        var mh$ = glIsFramebufferEXT$MH();
        try {
            return (byte)mh$.invokeExact(framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFramebufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glBindFramebufferEXT$MH,"glBindFramebufferEXT");
    }
    public static void glBindFramebufferEXT ( int target,  int framebuffer) {
        var mh$ = glBindFramebufferEXT$MH();
        try {
            mh$.invokeExact(target, framebuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$44.glDeleteFramebuffersEXT$MH,"glDeleteFramebuffersEXT");
    }
    public static void glDeleteFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glDeleteFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFramebuffersEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glGenFramebuffersEXT$MH,"glGenFramebuffersEXT");
    }
    public static void glGenFramebuffersEXT ( int n,  Addressable framebuffers) {
        var mh$ = glGenFramebuffersEXT$MH();
        try {
            mh$.invokeExact(n, framebuffers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCheckFramebufferStatusEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glCheckFramebufferStatusEXT$MH,"glCheckFramebufferStatusEXT");
    }
    public static int glCheckFramebufferStatusEXT ( int target) {
        var mh$ = glCheckFramebufferStatusEXT$MH();
        try {
            return (int)mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture1DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture1DEXT$MH,"glFramebufferTexture1DEXT");
    }
    public static void glFramebufferTexture1DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture1DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture2DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture2DEXT$MH,"glFramebufferTexture2DEXT");
    }
    public static void glFramebufferTexture2DEXT ( int target,  int attachment,  int textarget,  int texture,  int level) {
        var mh$ = glFramebufferTexture2DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTexture3DEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferTexture3DEXT$MH,"glFramebufferTexture3DEXT");
    }
    public static void glFramebufferTexture3DEXT ( int target,  int attachment,  int textarget,  int texture,  int level,  int zoffset) {
        var mh$ = glFramebufferTexture3DEXT$MH();
        try {
            mh$.invokeExact(target, attachment, textarget, texture, level, zoffset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferRenderbufferEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$45.glFramebufferRenderbufferEXT$MH,"glFramebufferRenderbufferEXT");
    }
    public static void glFramebufferRenderbufferEXT ( int target,  int attachment,  int renderbuffertarget,  int renderbuffer) {
        var mh$ = glFramebufferRenderbufferEXT$MH();
        try {
            mh$.invokeExact(target, attachment, renderbuffertarget, renderbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFramebufferAttachmentParameterivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGetFramebufferAttachmentParameterivEXT$MH,"glGetFramebufferAttachmentParameterivEXT");
    }
    public static void glGetFramebufferAttachmentParameterivEXT ( int target,  int attachment,  int pname,  Addressable params) {
        var mh$ = glGetFramebufferAttachmentParameterivEXT$MH();
        try {
            mh$.invokeExact(target, attachment, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenerateMipmapEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glGenerateMipmapEXT$MH,"glGenerateMipmapEXT");
    }
    public static void glGenerateMipmapEXT ( int target) {
        var mh$ = glGenerateMipmapEXT$MH();
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProgramParameteriEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glProgramParameteriEXT$MH,"glProgramParameteriEXT");
    }
    public static void glProgramParameteriEXT ( int program,  int pname,  int value) {
        var mh$ = glProgramParameteriEXT$MH();
        try {
            mh$.invokeExact(program, pname, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureEXT$MH,"glFramebufferTextureEXT");
    }
    public static void glFramebufferTextureEXT ( int target,  int attachment,  int texture,  int level) {
        var mh$ = glFramebufferTextureEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureFaceEXT$MH,"glFramebufferTextureFaceEXT");
    }
    public static void glFramebufferTextureFaceEXT ( int target,  int attachment,  int texture,  int level,  int face) {
        var mh$ = glFramebufferTextureFaceEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFramebufferTextureLayerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$46.glFramebufferTextureLayerEXT$MH,"glFramebufferTextureLayerEXT");
    }
    public static void glFramebufferTextureLayerEXT ( int target,  int attachment,  int texture,  int level,  int layer) {
        var mh$ = glFramebufferTextureLayerEXT$MH();
        try {
            mh$.invokeExact(target, attachment, texture, level, layer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI1iEXT$MH,"glVertexAttribI1iEXT");
    }
    public static void glVertexAttribI1iEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1iEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI2iEXT$MH,"glVertexAttribI2iEXT");
    }
    public static void glVertexAttribI2iEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2iEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI3iEXT$MH,"glVertexAttribI3iEXT");
    }
    public static void glVertexAttribI3iEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI4iEXT$MH,"glVertexAttribI4iEXT");
    }
    public static void glVertexAttribI4iEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4iEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI1uiEXT$MH,"glVertexAttribI1uiEXT");
    }
    public static void glVertexAttribI1uiEXT ( int index,  int x) {
        var mh$ = glVertexAttribI1uiEXT$MH();
        try {
            mh$.invokeExact(index, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$47.glVertexAttribI2uiEXT$MH,"glVertexAttribI2uiEXT");
    }
    public static void glVertexAttribI2uiEXT ( int index,  int x,  int y) {
        var mh$ = glVertexAttribI2uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI3uiEXT$MH,"glVertexAttribI3uiEXT");
    }
    public static void glVertexAttribI3uiEXT ( int index,  int x,  int y,  int z) {
        var mh$ = glVertexAttribI3uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI4uiEXT$MH,"glVertexAttribI4uiEXT");
    }
    public static void glVertexAttribI4uiEXT ( int index,  int x,  int y,  int z,  int w) {
        var mh$ = glVertexAttribI4uiEXT$MH();
        try {
            mh$.invokeExact(index, x, y, z, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI1ivEXT$MH,"glVertexAttribI1ivEXT");
    }
    public static void glVertexAttribI1ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI2ivEXT$MH,"glVertexAttribI2ivEXT");
    }
    public static void glVertexAttribI2ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI3ivEXT$MH,"glVertexAttribI3ivEXT");
    }
    public static void glVertexAttribI3ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$48.glVertexAttribI4ivEXT$MH,"glVertexAttribI4ivEXT");
    }
    public static void glVertexAttribI4ivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI1uivEXT$MH,"glVertexAttribI1uivEXT");
    }
    public static void glVertexAttribI1uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI1uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI2uivEXT$MH,"glVertexAttribI2uivEXT");
    }
    public static void glVertexAttribI2uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI2uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI3uivEXT$MH,"glVertexAttribI3uivEXT");
    }
    public static void glVertexAttribI3uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI3uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4uivEXT$MH,"glVertexAttribI4uivEXT");
    }
    public static void glVertexAttribI4uivEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4uivEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4bvEXT$MH,"glVertexAttribI4bvEXT");
    }
    public static void glVertexAttribI4bvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4bvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$49.glVertexAttribI4svEXT$MH,"glVertexAttribI4svEXT");
    }
    public static void glVertexAttribI4svEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4svEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribI4ubvEXT$MH,"glVertexAttribI4ubvEXT");
    }
    public static void glVertexAttribI4ubvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4ubvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribI4usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribI4usvEXT$MH,"glVertexAttribI4usvEXT");
    }
    public static void glVertexAttribI4usvEXT ( int index,  Addressable v) {
        var mh$ = glVertexAttribI4usvEXT$MH();
        try {
            mh$.invokeExact(index, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexAttribIPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glVertexAttribIPointerEXT$MH,"glVertexAttribIPointerEXT");
    }
    public static void glVertexAttribIPointerEXT ( int index,  int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glVertexAttribIPointerEXT$MH();
        try {
            mh$.invokeExact(index, size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glGetVertexAttribIivEXT$MH,"glGetVertexAttribIivEXT");
    }
    public static void glGetVertexAttribIivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetVertexAttribIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glGetVertexAttribIuivEXT$MH,"glGetVertexAttribIuivEXT");
    }
    public static void glGetVertexAttribIuivEXT ( int index,  int pname,  Addressable params) {
        var mh$ = glGetVertexAttribIuivEXT$MH();
        try {
            mh$.invokeExact(index, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$50.glUniform1uiEXT$MH,"glUniform1uiEXT");
    }
    public static void glUniform1uiEXT ( int location,  int v0) {
        var mh$ = glUniform1uiEXT$MH();
        try {
            mh$.invokeExact(location, v0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform2uiEXT$MH,"glUniform2uiEXT");
    }
    public static void glUniform2uiEXT ( int location,  int v0,  int v1) {
        var mh$ = glUniform2uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform3uiEXT$MH,"glUniform3uiEXT");
    }
    public static void glUniform3uiEXT ( int location,  int v0,  int v1,  int v2) {
        var mh$ = glUniform3uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform4uiEXT$MH,"glUniform4uiEXT");
    }
    public static void glUniform4uiEXT ( int location,  int v0,  int v1,  int v2,  int v3) {
        var mh$ = glUniform4uiEXT$MH();
        try {
            mh$.invokeExact(location, v0, v1, v2, v3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform1uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform1uivEXT$MH,"glUniform1uivEXT");
    }
    public static void glUniform1uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform1uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform2uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform2uivEXT$MH,"glUniform2uivEXT");
    }
    public static void glUniform2uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform2uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$51.glUniform3uivEXT$MH,"glUniform3uivEXT");
    }
    public static void glUniform3uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform3uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glUniform4uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glUniform4uivEXT$MH,"glUniform4uivEXT");
    }
    public static void glUniform4uivEXT ( int location,  int count,  Addressable value) {
        var mh$ = glUniform4uivEXT$MH();
        try {
            mh$.invokeExact(location, count, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetUniformuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glGetUniformuivEXT$MH,"glGetUniformuivEXT");
    }
    public static void glGetUniformuivEXT ( int program,  int location,  Addressable params) {
        var mh$ = glGetUniformuivEXT$MH();
        try {
            mh$.invokeExact(program, location, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glBindFragDataLocationEXT$MH,"glBindFragDataLocationEXT");
    }
    public static void glBindFragDataLocationEXT ( int program,  int colorNumber,  Addressable name) {
        var mh$ = glBindFragDataLocationEXT$MH();
        try {
            mh$.invokeExact(program, colorNumber, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetFragDataLocationEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glGetFragDataLocationEXT$MH,"glGetFragDataLocationEXT");
    }
    public static int glGetFragDataLocationEXT ( int program,  Addressable name) {
        var mh$ = glGetFragDataLocationEXT$MH();
        try {
            return (int)mh$.invokeExact(program, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawArraysEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMultiDrawArraysEXT$MH,"glMultiDrawArraysEXT");
    }
    public static void glMultiDrawArraysEXT ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawArraysEXT$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$52.glMultiDrawElementsEXT$MH,"glMultiDrawElementsEXT");
    }
    public static void glMultiDrawElementsEXT ( int mode,  Addressable count,  int type,  Addressable indices,  int primcount) {
        var mh$ = glMultiDrawElementsEXT$MH();
        try {
            mh$.invokeExact(mode, count, type, indices, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glProvokingVertexEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glProvokingVertexEXT$MH,"glProvokingVertexEXT");
    }
    public static void glProvokingVertexEXT ( int mode) {
        var mh$ = glProvokingVertexEXT$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3bEXT$MH,"glSecondaryColor3bEXT");
    }
    public static void glSecondaryColor3bEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3bEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3bvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3bvEXT$MH,"glSecondaryColor3bvEXT");
    }
    public static void glSecondaryColor3bvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3bvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3dEXT$MH,"glSecondaryColor3dEXT");
    }
    public static void glSecondaryColor3dEXT ( double red,  double green,  double blue) {
        var mh$ = glSecondaryColor3dEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3dvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3dvEXT$MH,"glSecondaryColor3dvEXT");
    }
    public static void glSecondaryColor3dvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3dvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$53.glSecondaryColor3fEXT$MH,"glSecondaryColor3fEXT");
    }
    public static void glSecondaryColor3fEXT ( float red,  float green,  float blue) {
        var mh$ = glSecondaryColor3fEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3fvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3fvEXT$MH,"glSecondaryColor3fvEXT");
    }
    public static void glSecondaryColor3fvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3fvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3iEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3iEXT$MH,"glSecondaryColor3iEXT");
    }
    public static void glSecondaryColor3iEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3iEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3ivEXT$MH,"glSecondaryColor3ivEXT");
    }
    public static void glSecondaryColor3ivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3sEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3sEXT$MH,"glSecondaryColor3sEXT");
    }
    public static void glSecondaryColor3sEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3sEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3svEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3svEXT$MH,"glSecondaryColor3svEXT");
    }
    public static void glSecondaryColor3svEXT ( Addressable v) {
        var mh$ = glSecondaryColor3svEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$54.glSecondaryColor3ubEXT$MH,"glSecondaryColor3ubEXT");
    }
    public static void glSecondaryColor3ubEXT ( byte red,  byte green,  byte blue) {
        var mh$ = glSecondaryColor3ubEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3ubvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3ubvEXT$MH,"glSecondaryColor3ubvEXT");
    }
    public static void glSecondaryColor3ubvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3ubvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3uiEXT$MH,"glSecondaryColor3uiEXT");
    }
    public static void glSecondaryColor3uiEXT ( int red,  int green,  int blue) {
        var mh$ = glSecondaryColor3uiEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3uivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3uivEXT$MH,"glSecondaryColor3uivEXT");
    }
    public static void glSecondaryColor3uivEXT ( Addressable v) {
        var mh$ = glSecondaryColor3uivEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3usEXT$MH,"glSecondaryColor3usEXT");
    }
    public static void glSecondaryColor3usEXT ( short red,  short green,  short blue) {
        var mh$ = glSecondaryColor3usEXT$MH();
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColor3usvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColor3usvEXT$MH,"glSecondaryColor3usvEXT");
    }
    public static void glSecondaryColor3usvEXT ( Addressable v) {
        var mh$ = glSecondaryColor3usvEXT$MH();
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSecondaryColorPointerEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$55.glSecondaryColorPointerEXT$MH,"glSecondaryColorPointerEXT");
    }
    public static void glSecondaryColorPointerEXT ( int size,  int type,  int stride,  Addressable pointer) {
        var mh$ = glSecondaryColorPointerEXT$MH();
        try {
            mh$.invokeExact(size, type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveStencilFaceEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glActiveStencilFaceEXT$MH,"glActiveStencilFaceEXT");
    }
    public static void glActiveStencilFaceEXT ( int face) {
        var mh$ = glActiveStencilFaceEXT$MH();
        try {
            mh$.invokeExact(face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glClearColorIiEXT$MH,"glClearColorIiEXT");
    }
    public static void glClearColorIiEXT ( int r,  int g,  int b,  int a) {
        var mh$ = glClearColorIiEXT$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColorIuiEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glClearColorIuiEXT$MH,"glClearColorIuiEXT");
    }
    public static void glClearColorIuiEXT ( int r,  int g,  int b,  int a) {
        var mh$ = glClearColorIuiEXT$MH();
        try {
            mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexParameterIivEXT$MH,"glTexParameterIivEXT");
    }
    public static void glTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glTexParameterIuivEXT$MH,"glTexParameterIuivEXT");
    }
    public static void glTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$56.glGetTexParameterIivEXT$MH,"glGetTexParameterIivEXT");
    }
    public static void glGetTexParameterIivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterIuivEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetTexParameterIuivEXT$MH,"glGetTexParameterIuivEXT");
    }
    public static void glGetTexParameterIuivEXT ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterIuivEXT$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjecti64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetQueryObjecti64vEXT$MH,"glGetQueryObjecti64vEXT");
    }
    public static void glGetQueryObjecti64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjecti64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetQueryObjectui64vEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glGetQueryObjectui64vEXT$MH,"glGetQueryObjectui64vEXT");
    }
    public static void glGetQueryObjectui64vEXT ( int id,  int pname,  Addressable params) {
        var mh$ = glGetQueryObjectui64vEXT$MH();
        try {
            mh$.invokeExact(id, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferRangeEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferRangeEXT$MH,"glBindBufferRangeEXT");
    }
    public static void glBindBufferRangeEXT ( int target,  int index,  int buffer,  long offset,  long size) {
        var mh$ = glBindBufferRangeEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferOffsetEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferOffsetEXT$MH,"glBindBufferOffsetEXT");
    }
    public static void glBindBufferOffsetEXT ( int target,  int index,  int buffer,  long offset) {
        var mh$ = glBindBufferOffsetEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindBufferBaseEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$57.glBindBufferBaseEXT$MH,"glBindBufferBaseEXT");
    }
    public static void glBindBufferBaseEXT ( int target,  int index,  int buffer) {
        var mh$ = glBindBufferBaseEXT$MH();
        try {
            mh$.invokeExact(target, index, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glBeginTransformFeedbackEXT$MH,"glBeginTransformFeedbackEXT");
    }
    public static void glBeginTransformFeedbackEXT ( int primitiveMode) {
        var mh$ = glBeginTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact(primitiveMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndTransformFeedbackEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glEndTransformFeedbackEXT$MH,"glEndTransformFeedbackEXT");
    }
    public static void glEndTransformFeedbackEXT () {
        var mh$ = glEndTransformFeedbackEXT$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTransformFeedbackVaryingsEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glTransformFeedbackVaryingsEXT$MH,"glTransformFeedbackVaryingsEXT");
    }
    public static void glTransformFeedbackVaryingsEXT ( int program,  int count,  Addressable varyings,  int bufferMode) {
        var mh$ = glTransformFeedbackVaryingsEXT$MH();
        try {
            mh$.invokeExact(program, count, varyings, bufferMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTransformFeedbackVaryingEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetTransformFeedbackVaryingEXT$MH,"glGetTransformFeedbackVaryingEXT");
    }
    public static void glGetTransformFeedbackVaryingEXT ( int program,  int index,  int bufSize,  Addressable length,  Addressable size,  Addressable type,  Addressable name) {
        var mh$ = glGetTransformFeedbackVaryingEXT$MH();
        try {
            mh$.invokeExact(program, index, bufSize, length, size, type, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetIntegerIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetIntegerIndexedvEXT$MH,"glGetIntegerIndexedvEXT");
    }
    public static void glGetIntegerIndexedvEXT ( int param,  int index,  Addressable values) {
        var mh$ = glGetIntegerIndexedvEXT$MH();
        try {
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetBooleanIndexedvEXT$MH() {
        return RuntimeHelper.requireNonNull(constants$58.glGetBooleanIndexedvEXT$MH,"glGetBooleanIndexedvEXT");
    }
    public static void glGetBooleanIndexedvEXT ( int param,  int index,  Addressable values) {
        var mh$ = glGetBooleanIndexedvEXT$MH();
        try {
            mh$.invokeExact(param, index, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glElementPointerAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glElementPointerAPPLE$MH,"glElementPointerAPPLE");
    }
    public static void glElementPointerAPPLE ( int type,  Addressable pointer) {
        var mh$ = glElementPointerAPPLE$MH();
        try {
            mh$.invokeExact(type, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glDrawElementArrayAPPLE$MH,"glDrawElementArrayAPPLE");
    }
    public static void glDrawElementArrayAPPLE ( int mode,  int first,  int count) {
        var mh$ = glDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glDrawRangeElementArrayAPPLE$MH,"glDrawRangeElementArrayAPPLE");
    }
    public static void glDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  int first,  int count) {
        var mh$ = glDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glMultiDrawElementArrayAPPLE$MH,"glMultiDrawElementArrayAPPLE");
    }
    public static void glMultiDrawElementArrayAPPLE ( int mode,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiDrawRangeElementArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glMultiDrawRangeElementArrayAPPLE$MH,"glMultiDrawRangeElementArrayAPPLE");
    }
    public static void glMultiDrawRangeElementArrayAPPLE ( int mode,  int start,  int end,  Addressable first,  Addressable count,  int primcount) {
        var mh$ = glMultiDrawRangeElementArrayAPPLE$MH();
        try {
            mh$.invokeExact(mode, start, end, first, count, primcount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$59.glGenFencesAPPLE$MH,"glGenFencesAPPLE");
    }
    public static void glGenFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glGenFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteFencesAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glDeleteFencesAPPLE$MH,"glDeleteFencesAPPLE");
    }
    public static void glDeleteFencesAPPLE ( int n,  Addressable fences) {
        var mh$ = glDeleteFencesAPPLE$MH();
        try {
            mh$.invokeExact(n, fences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSetFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glSetFenceAPPLE$MH,"glSetFenceAPPLE");
    }
    public static void glSetFenceAPPLE ( int fence) {
        var mh$ = glSetFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glIsFenceAPPLE$MH,"glIsFenceAPPLE");
    }
    public static byte glIsFenceAPPLE ( int fence) {
        var mh$ = glIsFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glTestFenceAPPLE$MH,"glTestFenceAPPLE");
    }
    public static byte glTestFenceAPPLE ( int fence) {
        var mh$ = glTestFenceAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishFenceAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glFinishFenceAPPLE$MH,"glFinishFenceAPPLE");
    }
    public static void glFinishFenceAPPLE ( int fence) {
        var mh$ = glFinishFenceAPPLE$MH();
        try {
            mh$.invokeExact(fence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTestObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$60.glTestObjectAPPLE$MH,"glTestObjectAPPLE");
    }
    public static byte glTestObjectAPPLE ( int object,  int name) {
        var mh$ = glTestObjectAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishObjectAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFinishObjectAPPLE$MH,"glFinishObjectAPPLE");
    }
    public static void glFinishObjectAPPLE ( int object,  int name) {
        var mh$ = glFinishObjectAPPLE$MH();
        try {
            mh$.invokeExact(object, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBufferParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glBufferParameteriAPPLE$MH,"glBufferParameteriAPPLE");
    }
    public static void glBufferParameteriAPPLE ( int target,  int pname,  int param) {
        var mh$ = glBufferParameteriAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushMappedBufferRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFlushMappedBufferRangeAPPLE$MH,"glFlushMappedBufferRangeAPPLE");
    }
    public static void glFlushMappedBufferRangeAPPLE ( int target,  long offset,  long size) {
        var mh$ = glFlushMappedBufferRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushRenderAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFlushRenderAPPLE$MH,"glFlushRenderAPPLE");
    }
    public static void glFlushRenderAPPLE () {
        var mh$ = glFlushRenderAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFinishRenderAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glFinishRenderAPPLE$MH,"glFinishRenderAPPLE");
    }
    public static void glFinishRenderAPPLE () {
        var mh$ = glFinishRenderAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSwapAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$61.glSwapAPPLE$MH,"glSwapAPPLE");
    }
    public static void glSwapAPPLE () {
        var mh$ = glSwapAPPLE$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectPurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glObjectPurgeableAPPLE$MH,"glObjectPurgeableAPPLE");
    }
    public static int glObjectPurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectPurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glObjectUnpurgeableAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glObjectUnpurgeableAPPLE$MH,"glObjectUnpurgeableAPPLE");
    }
    public static int glObjectUnpurgeableAPPLE ( int objectType,  int name,  int option) {
        var mh$ = glObjectUnpurgeableAPPLE$MH();
        try {
            return (int)mh$.invokeExact(objectType, name, option);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetObjectParameterivAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetObjectParameterivAPPLE$MH,"glGetObjectParameterivAPPLE");
    }
    public static void glGetObjectParameterivAPPLE ( int objectType,  int name,  int pname,  Addressable params) {
        var mh$ = glGetObjectParameterivAPPLE$MH();
        try {
            mh$.invokeExact(objectType, name, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glTextureRangeAPPLE$MH,"glTextureRangeAPPLE");
    }
    public static void glTextureRangeAPPLE ( int target,  int length,  Addressable pointer) {
        var mh$ = glTextureRangeAPPLE$MH();
        try {
            mh$.invokeExact(target, length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterPointervAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glGetTexParameterPointervAPPLE$MH,"glGetTexParameterPointervAPPLE");
    }
    public static void glGetTexParameterPointervAPPLE ( int target,  int pname,  Addressable params) {
        var mh$ = glGetTexParameterPointervAPPLE$MH();
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$62.glBindVertexArrayAPPLE$MH,"glBindVertexArrayAPPLE");
    }
    public static void glBindVertexArrayAPPLE ( int id) {
        var mh$ = glBindVertexArrayAPPLE$MH();
        try {
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glDeleteVertexArraysAPPLE$MH,"glDeleteVertexArraysAPPLE");
    }
    public static void glDeleteVertexArraysAPPLE ( int n,  Addressable ids) {
        var mh$ = glDeleteVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenVertexArraysAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glGenVertexArraysAPPLE$MH,"glGenVertexArraysAPPLE");
    }
    public static void glGenVertexArraysAPPLE ( int n,  Addressable ids) {
        var mh$ = glGenVertexArraysAPPLE$MH();
        try {
            mh$.invokeExact(n, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexArrayAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glIsVertexArrayAPPLE$MH,"glIsVertexArrayAPPLE");
    }
    public static byte glIsVertexArrayAPPLE ( int id) {
        var mh$ = glIsVertexArrayAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glVertexArrayRangeAPPLE$MH,"glVertexArrayRangeAPPLE");
    }
    public static void glVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFlushVertexArrayRangeAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glFlushVertexArrayRangeAPPLE$MH,"glFlushVertexArrayRangeAPPLE");
    }
    public static void glFlushVertexArrayRangeAPPLE ( int length,  Addressable pointer) {
        var mh$ = glFlushVertexArrayRangeAPPLE$MH();
        try {
            mh$.invokeExact(length, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexArrayParameteriAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$63.glVertexArrayParameteriAPPLE$MH,"glVertexArrayParameteriAPPLE");
    }
    public static void glVertexArrayParameteriAPPLE ( int pname,  int param) {
        var mh$ = glVertexArrayParameteriAPPLE$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointSizePointerAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glPointSizePointerAPPLE$MH,"glPointSizePointerAPPLE");
    }
    public static void glPointSizePointerAPPLE ( int type,  int stride,  Addressable pointer) {
        var mh$ = glPointSizePointerAPPLE$MH();
        try {
            mh$.invokeExact(type, stride, pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointSizefAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glVertexPointSizefAPPLE$MH,"glVertexPointSizefAPPLE");
    }
    public static void glVertexPointSizefAPPLE ( float size) {
        var mh$ = glVertexPointSizefAPPLE$MH();
        try {
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEnableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glEnableVertexAttribAPPLE$MH,"glEnableVertexAttribAPPLE");
    }
    public static void glEnableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glEnableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDisableVertexAttribAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glDisableVertexAttribAPPLE$MH,"glDisableVertexAttribAPPLE");
    }
    public static void glDisableVertexAttribAPPLE ( int index,  int pname) {
        var mh$ = glDisableVertexAttribAPPLE$MH();
        try {
            mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsVertexAttribEnabledAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glIsVertexAttribEnabledAPPLE$MH,"glIsVertexAttribEnabledAPPLE");
    }
    public static byte glIsVertexAttribEnabledAPPLE ( int index,  int pname) {
        var mh$ = glIsVertexAttribEnabledAPPLE$MH();
        try {
            return (byte)mh$.invokeExact(index, pname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$64.glMapVertexAttrib1dAPPLE$MH,"glMapVertexAttrib1dAPPLE");
    }
    public static void glMapVertexAttrib1dAPPLE ( int index,  int size,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib1fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib1fAPPLE$MH,"glMapVertexAttrib1fAPPLE");
    }
    public static void glMapVertexAttrib1fAPPLE ( int index,  int size,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = glMapVertexAttrib1fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, stride, order, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2dAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib2dAPPLE$MH,"glMapVertexAttrib2dAPPLE");
    }
    public static void glMapVertexAttrib2dAPPLE ( int index,  int size,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2dAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapVertexAttrib2fAPPLE$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glMapVertexAttrib2fAPPLE$MH,"glMapVertexAttrib2fAPPLE");
    }
    public static void glMapVertexAttrib2fAPPLE ( int index,  int size,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = glMapVertexAttrib2fAPPLE$MH();
        try {
            mh$.invokeExact(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int equationRGB,  int equationAlpha) {
        var mh$ = glBlendEquationSeparateATI$MH();
        try {
            mh$.invokeExact(equationRGB, equationAlpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOpSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glStencilOpSeparateATI$MH,"glStencilOpSeparateATI");
    }
    public static void glStencilOpSeparateATI ( int face,  int sfail,  int dpfail,  int dppass) {
        var mh$ = glStencilOpSeparateATI$MH();
        try {
            mh$.invokeExact(face, sfail, dpfail, dppass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFuncSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$65.glStencilFuncSeparateATI$MH,"glStencilFuncSeparateATI");
    }
    public static void glStencilFuncSeparateATI ( int frontfunc,  int backfunc,  int ref,  int mask) {
        var mh$ = glStencilFuncSeparateATI$MH();
        try {
            mh$.invokeExact(frontfunc, backfunc, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBeginConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glBeginConditionalRenderNV$MH,"glBeginConditionalRenderNV");
    }
    public static void glBeginConditionalRenderNV ( int id,  int mode) {
        var mh$ = glBeginConditionalRenderNV$MH();
        try {
            mh$.invokeExact(id, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEndConditionalRenderNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glEndConditionalRenderNV$MH,"glEndConditionalRenderNV");
    }
    public static void glEndConditionalRenderNV () {
        var mh$ = glEndConditionalRenderNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameteriNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glPointParameteriNV$MH,"glPointParameteriNV");
    }
    public static void glPointParameteriNV ( int pname,  int param) {
        var mh$ = glPointParameteriNV$MH();
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPointParameterivNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glPointParameterivNV$MH,"glPointParameterivNV");
    }
    public static void glPointParameterivNV ( int pname,  Addressable params) {
        var mh$ = glPointParameterivNV$MH();
        try {
            mh$.invokeExact(pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTextureBarrierNV$MH() {
        return RuntimeHelper.requireNonNull(constants$66.glTextureBarrierNV$MH,"glTextureBarrierNV");
    }
    public static void glTextureBarrierNV () {
        var mh$ = glTextureBarrierNV$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {
        return constants$66.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_1050() {
        return constants$67.__DARWIN_SUF_1050$SEGMENT;
    }
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$67.__DARWIN_SUF_EXTSN$SEGMENT;
    }
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    public static MemoryAddress __DARWIN_NULL() {
        return constants$67.__DARWIN_NULL$ADDR;
    }
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static int GL_DRAW_FRAMEBUFFER_BINDING() {
        return (int)36006L;
    }
    public static long GL_TIMEOUT_IGNORED() {
        return -1L;
    }
}


