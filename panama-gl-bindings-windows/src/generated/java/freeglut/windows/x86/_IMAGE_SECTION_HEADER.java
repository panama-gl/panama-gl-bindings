// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_SECTION_HEADER {
 *     BYTE Name[8];
 *     union {
 *         DWORD PhysicalAddress;
 *         DWORD VirtualSize;
 *     } Misc;
 *     DWORD VirtualAddress;
 *     DWORD SizeOfRawData;
 *     DWORD PointerToRawData;
 *     DWORD PointerToRelocations;
 *     DWORD PointerToLinenumbers;
 *     WORD NumberOfRelocations;
 *     WORD NumberOfLinenumbers;
 *     DWORD Characteristics;
 * }
 * }
 */
public class _IMAGE_SECTION_HEADER {

    _IMAGE_SECTION_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, freeglut_h.C_CHAR).withName("Name"),
        _IMAGE_SECTION_HEADER.Misc.layout().withName("Misc"),
        freeglut_h.C_LONG.withName("VirtualAddress"),
        freeglut_h.C_LONG.withName("SizeOfRawData"),
        freeglut_h.C_LONG.withName("PointerToRawData"),
        freeglut_h.C_LONG.withName("PointerToRelocations"),
        freeglut_h.C_LONG.withName("PointerToLinenumbers"),
        freeglut_h.C_SHORT.withName("NumberOfRelocations"),
        freeglut_h.C_SHORT.withName("NumberOfLinenumbers"),
        freeglut_h.C_LONG.withName("Characteristics")
    ).withName("_IMAGE_SECTION_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static final SequenceLayout Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static MemorySegment Name(MemorySegment struct) {
        return struct.asSlice(Name$OFFSET, Name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static void Name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Name$OFFSET, Name$LAYOUT.byteSize());
    }

    private static long[] Name$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static long[] Name$dimensions() {
        return Name$DIMS;
    }
    private static final VarHandle Name$ELEM_HANDLE = Name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static byte Name(MemorySegment struct, long index0) {
        return (byte)Name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Name[8]
     * }
     */
    public static void Name(MemorySegment struct, long index0, byte fieldValue) {
        Name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     DWORD PhysicalAddress;
     *     DWORD VirtualSize;
     * }
     * }
     */
    public static class Misc {

        Misc() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            freeglut_h.C_LONG.withName("PhysicalAddress"),
            freeglut_h.C_LONG.withName("VirtualSize")
        ).withName("$anon$17315:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt PhysicalAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PhysicalAddress"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD PhysicalAddress
         * }
         */
        public static final OfInt PhysicalAddress$layout() {
            return PhysicalAddress$LAYOUT;
        }

        private static final long PhysicalAddress$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD PhysicalAddress
         * }
         */
        public static final long PhysicalAddress$offset() {
            return PhysicalAddress$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD PhysicalAddress
         * }
         */
        public static int PhysicalAddress(MemorySegment union) {
            return union.get(PhysicalAddress$LAYOUT, PhysicalAddress$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD PhysicalAddress
         * }
         */
        public static void PhysicalAddress(MemorySegment union, int fieldValue) {
            union.set(PhysicalAddress$LAYOUT, PhysicalAddress$OFFSET, fieldValue);
        }

        private static final OfInt VirtualSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VirtualSize"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD VirtualSize
         * }
         */
        public static final OfInt VirtualSize$layout() {
            return VirtualSize$LAYOUT;
        }

        private static final long VirtualSize$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD VirtualSize
         * }
         */
        public static final long VirtualSize$offset() {
            return VirtualSize$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD VirtualSize
         * }
         */
        public static int VirtualSize(MemorySegment union) {
            return union.get(VirtualSize$LAYOUT, VirtualSize$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD VirtualSize
         * }
         */
        public static void VirtualSize(MemorySegment union, int fieldValue) {
            union.set(VirtualSize$LAYOUT, VirtualSize$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Misc$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Misc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     DWORD PhysicalAddress;
     *     DWORD VirtualSize;
     * } Misc
     * }
     */
    public static final GroupLayout Misc$layout() {
        return Misc$LAYOUT;
    }

    private static final long Misc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     DWORD PhysicalAddress;
     *     DWORD VirtualSize;
     * } Misc
     * }
     */
    public static final long Misc$offset() {
        return Misc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD PhysicalAddress;
     *     DWORD VirtualSize;
     * } Misc
     * }
     */
    public static MemorySegment Misc(MemorySegment struct) {
        return struct.asSlice(Misc$OFFSET, Misc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD PhysicalAddress;
     *     DWORD VirtualSize;
     * } Misc
     * }
     */
    public static void Misc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Misc$OFFSET, Misc$LAYOUT.byteSize());
    }

    private static final OfInt VirtualAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VirtualAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD VirtualAddress
     * }
     */
    public static final OfInt VirtualAddress$layout() {
        return VirtualAddress$LAYOUT;
    }

    private static final long VirtualAddress$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD VirtualAddress
     * }
     */
    public static final long VirtualAddress$offset() {
        return VirtualAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD VirtualAddress
     * }
     */
    public static int VirtualAddress(MemorySegment struct) {
        return struct.get(VirtualAddress$LAYOUT, VirtualAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD VirtualAddress
     * }
     */
    public static void VirtualAddress(MemorySegment struct, int fieldValue) {
        struct.set(VirtualAddress$LAYOUT, VirtualAddress$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfRawData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfRawData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfRawData
     * }
     */
    public static final OfInt SizeOfRawData$layout() {
        return SizeOfRawData$LAYOUT;
    }

    private static final long SizeOfRawData$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfRawData
     * }
     */
    public static final long SizeOfRawData$offset() {
        return SizeOfRawData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfRawData
     * }
     */
    public static int SizeOfRawData(MemorySegment struct) {
        return struct.get(SizeOfRawData$LAYOUT, SizeOfRawData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfRawData
     * }
     */
    public static void SizeOfRawData(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfRawData$LAYOUT, SizeOfRawData$OFFSET, fieldValue);
    }

    private static final OfInt PointerToRawData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PointerToRawData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PointerToRawData
     * }
     */
    public static final OfInt PointerToRawData$layout() {
        return PointerToRawData$LAYOUT;
    }

    private static final long PointerToRawData$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PointerToRawData
     * }
     */
    public static final long PointerToRawData$offset() {
        return PointerToRawData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PointerToRawData
     * }
     */
    public static int PointerToRawData(MemorySegment struct) {
        return struct.get(PointerToRawData$LAYOUT, PointerToRawData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PointerToRawData
     * }
     */
    public static void PointerToRawData(MemorySegment struct, int fieldValue) {
        struct.set(PointerToRawData$LAYOUT, PointerToRawData$OFFSET, fieldValue);
    }

    private static final OfInt PointerToRelocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PointerToRelocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PointerToRelocations
     * }
     */
    public static final OfInt PointerToRelocations$layout() {
        return PointerToRelocations$LAYOUT;
    }

    private static final long PointerToRelocations$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PointerToRelocations
     * }
     */
    public static final long PointerToRelocations$offset() {
        return PointerToRelocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PointerToRelocations
     * }
     */
    public static int PointerToRelocations(MemorySegment struct) {
        return struct.get(PointerToRelocations$LAYOUT, PointerToRelocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PointerToRelocations
     * }
     */
    public static void PointerToRelocations(MemorySegment struct, int fieldValue) {
        struct.set(PointerToRelocations$LAYOUT, PointerToRelocations$OFFSET, fieldValue);
    }

    private static final OfInt PointerToLinenumbers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PointerToLinenumbers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PointerToLinenumbers
     * }
     */
    public static final OfInt PointerToLinenumbers$layout() {
        return PointerToLinenumbers$LAYOUT;
    }

    private static final long PointerToLinenumbers$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PointerToLinenumbers
     * }
     */
    public static final long PointerToLinenumbers$offset() {
        return PointerToLinenumbers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PointerToLinenumbers
     * }
     */
    public static int PointerToLinenumbers(MemorySegment struct) {
        return struct.get(PointerToLinenumbers$LAYOUT, PointerToLinenumbers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PointerToLinenumbers
     * }
     */
    public static void PointerToLinenumbers(MemorySegment struct, int fieldValue) {
        struct.set(PointerToLinenumbers$LAYOUT, PointerToLinenumbers$OFFSET, fieldValue);
    }

    private static final OfShort NumberOfRelocations$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NumberOfRelocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD NumberOfRelocations
     * }
     */
    public static final OfShort NumberOfRelocations$layout() {
        return NumberOfRelocations$LAYOUT;
    }

    private static final long NumberOfRelocations$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD NumberOfRelocations
     * }
     */
    public static final long NumberOfRelocations$offset() {
        return NumberOfRelocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD NumberOfRelocations
     * }
     */
    public static short NumberOfRelocations(MemorySegment struct) {
        return struct.get(NumberOfRelocations$LAYOUT, NumberOfRelocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD NumberOfRelocations
     * }
     */
    public static void NumberOfRelocations(MemorySegment struct, short fieldValue) {
        struct.set(NumberOfRelocations$LAYOUT, NumberOfRelocations$OFFSET, fieldValue);
    }

    private static final OfShort NumberOfLinenumbers$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NumberOfLinenumbers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD NumberOfLinenumbers
     * }
     */
    public static final OfShort NumberOfLinenumbers$layout() {
        return NumberOfLinenumbers$LAYOUT;
    }

    private static final long NumberOfLinenumbers$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD NumberOfLinenumbers
     * }
     */
    public static final long NumberOfLinenumbers$offset() {
        return NumberOfLinenumbers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD NumberOfLinenumbers
     * }
     */
    public static short NumberOfLinenumbers(MemorySegment struct) {
        return struct.get(NumberOfLinenumbers$LAYOUT, NumberOfLinenumbers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD NumberOfLinenumbers
     * }
     */
    public static void NumberOfLinenumbers(MemorySegment struct, short fieldValue) {
        struct.set(NumberOfLinenumbers$LAYOUT, NumberOfLinenumbers$OFFSET, fieldValue);
    }

    private static final OfInt Characteristics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final OfInt Characteristics$layout() {
        return Characteristics$LAYOUT;
    }

    private static final long Characteristics$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final long Characteristics$offset() {
        return Characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static int Characteristics(MemorySegment struct) {
        return struct.get(Characteristics$LAYOUT, Characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static void Characteristics(MemorySegment struct, int fieldValue) {
        struct.set(Characteristics$LAYOUT, Characteristics$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

