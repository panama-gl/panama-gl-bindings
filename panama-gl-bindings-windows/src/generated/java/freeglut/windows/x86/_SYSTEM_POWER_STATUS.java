// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SYSTEM_POWER_STATUS {
 *     BYTE ACLineStatus;
 *     BYTE BatteryFlag;
 *     BYTE BatteryLifePercent;
 *     BYTE SystemStatusFlag;
 *     DWORD BatteryLifeTime;
 *     DWORD BatteryFullLifeTime;
 * }
 * }
 */
public class _SYSTEM_POWER_STATUS {

    _SYSTEM_POWER_STATUS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_CHAR.withName("ACLineStatus"),
        freeglut_h.C_CHAR.withName("BatteryFlag"),
        freeglut_h.C_CHAR.withName("BatteryLifePercent"),
        freeglut_h.C_CHAR.withName("SystemStatusFlag"),
        freeglut_h.C_LONG.withName("BatteryLifeTime"),
        freeglut_h.C_LONG.withName("BatteryFullLifeTime")
    ).withName("_SYSTEM_POWER_STATUS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte ACLineStatus$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ACLineStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE ACLineStatus
     * }
     */
    public static final OfByte ACLineStatus$layout() {
        return ACLineStatus$LAYOUT;
    }

    private static final long ACLineStatus$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE ACLineStatus
     * }
     */
    public static final long ACLineStatus$offset() {
        return ACLineStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE ACLineStatus
     * }
     */
    public static byte ACLineStatus(MemorySegment struct) {
        return struct.get(ACLineStatus$LAYOUT, ACLineStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE ACLineStatus
     * }
     */
    public static void ACLineStatus(MemorySegment struct, byte fieldValue) {
        struct.set(ACLineStatus$LAYOUT, ACLineStatus$OFFSET, fieldValue);
    }

    private static final OfByte BatteryFlag$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BatteryFlag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE BatteryFlag
     * }
     */
    public static final OfByte BatteryFlag$layout() {
        return BatteryFlag$LAYOUT;
    }

    private static final long BatteryFlag$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE BatteryFlag
     * }
     */
    public static final long BatteryFlag$offset() {
        return BatteryFlag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE BatteryFlag
     * }
     */
    public static byte BatteryFlag(MemorySegment struct) {
        return struct.get(BatteryFlag$LAYOUT, BatteryFlag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE BatteryFlag
     * }
     */
    public static void BatteryFlag(MemorySegment struct, byte fieldValue) {
        struct.set(BatteryFlag$LAYOUT, BatteryFlag$OFFSET, fieldValue);
    }

    private static final OfByte BatteryLifePercent$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BatteryLifePercent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE BatteryLifePercent
     * }
     */
    public static final OfByte BatteryLifePercent$layout() {
        return BatteryLifePercent$LAYOUT;
    }

    private static final long BatteryLifePercent$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE BatteryLifePercent
     * }
     */
    public static final long BatteryLifePercent$offset() {
        return BatteryLifePercent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE BatteryLifePercent
     * }
     */
    public static byte BatteryLifePercent(MemorySegment struct) {
        return struct.get(BatteryLifePercent$LAYOUT, BatteryLifePercent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE BatteryLifePercent
     * }
     */
    public static void BatteryLifePercent(MemorySegment struct, byte fieldValue) {
        struct.set(BatteryLifePercent$LAYOUT, BatteryLifePercent$OFFSET, fieldValue);
    }

    private static final OfByte SystemStatusFlag$LAYOUT = (OfByte)$LAYOUT.select(groupElement("SystemStatusFlag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE SystemStatusFlag
     * }
     */
    public static final OfByte SystemStatusFlag$layout() {
        return SystemStatusFlag$LAYOUT;
    }

    private static final long SystemStatusFlag$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE SystemStatusFlag
     * }
     */
    public static final long SystemStatusFlag$offset() {
        return SystemStatusFlag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE SystemStatusFlag
     * }
     */
    public static byte SystemStatusFlag(MemorySegment struct) {
        return struct.get(SystemStatusFlag$LAYOUT, SystemStatusFlag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE SystemStatusFlag
     * }
     */
    public static void SystemStatusFlag(MemorySegment struct, byte fieldValue) {
        struct.set(SystemStatusFlag$LAYOUT, SystemStatusFlag$OFFSET, fieldValue);
    }

    private static final OfInt BatteryLifeTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BatteryLifeTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BatteryLifeTime
     * }
     */
    public static final OfInt BatteryLifeTime$layout() {
        return BatteryLifeTime$LAYOUT;
    }

    private static final long BatteryLifeTime$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BatteryLifeTime
     * }
     */
    public static final long BatteryLifeTime$offset() {
        return BatteryLifeTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BatteryLifeTime
     * }
     */
    public static int BatteryLifeTime(MemorySegment struct) {
        return struct.get(BatteryLifeTime$LAYOUT, BatteryLifeTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BatteryLifeTime
     * }
     */
    public static void BatteryLifeTime(MemorySegment struct, int fieldValue) {
        struct.set(BatteryLifeTime$LAYOUT, BatteryLifeTime$OFFSET, fieldValue);
    }

    private static final OfInt BatteryFullLifeTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BatteryFullLifeTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BatteryFullLifeTime
     * }
     */
    public static final OfInt BatteryFullLifeTime$layout() {
        return BatteryFullLifeTime$LAYOUT;
    }

    private static final long BatteryFullLifeTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BatteryFullLifeTime
     * }
     */
    public static final long BatteryFullLifeTime$offset() {
        return BatteryFullLifeTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BatteryFullLifeTime
     * }
     */
    public static int BatteryFullLifeTime(MemorySegment struct) {
        return struct.get(BatteryFullLifeTime$LAYOUT, BatteryFullLifeTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BatteryFullLifeTime
     * }
     */
    public static void BatteryFullLifeTime(MemorySegment struct, int fieldValue) {
        struct.set(BatteryFullLifeTime$LAYOUT, BatteryFullLifeTime$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

