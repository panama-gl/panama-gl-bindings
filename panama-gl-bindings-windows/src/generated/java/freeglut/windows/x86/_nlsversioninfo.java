// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _nlsversioninfo {
 *     DWORD dwNLSVersionInfoSize;
 *     DWORD dwNLSVersion;
 *     DWORD dwDefinedVersion;
 *     DWORD dwEffectiveId;
 *     GUID guidCustomVersion;
 * }
 * }
 */
public class _nlsversioninfo {

    _nlsversioninfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("dwNLSVersionInfoSize"),
        freeglut_h.C_LONG.withName("dwNLSVersion"),
        freeglut_h.C_LONG.withName("dwDefinedVersion"),
        freeglut_h.C_LONG.withName("dwEffectiveId"),
        _GUID.layout().withName("guidCustomVersion")
    ).withName("_nlsversioninfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwNLSVersionInfoSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwNLSVersionInfoSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersionInfoSize
     * }
     */
    public static final OfInt dwNLSVersionInfoSize$layout() {
        return dwNLSVersionInfoSize$LAYOUT;
    }

    private static final long dwNLSVersionInfoSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersionInfoSize
     * }
     */
    public static final long dwNLSVersionInfoSize$offset() {
        return dwNLSVersionInfoSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersionInfoSize
     * }
     */
    public static int dwNLSVersionInfoSize(MemorySegment struct) {
        return struct.get(dwNLSVersionInfoSize$LAYOUT, dwNLSVersionInfoSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersionInfoSize
     * }
     */
    public static void dwNLSVersionInfoSize(MemorySegment struct, int fieldValue) {
        struct.set(dwNLSVersionInfoSize$LAYOUT, dwNLSVersionInfoSize$OFFSET, fieldValue);
    }

    private static final OfInt dwNLSVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwNLSVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersion
     * }
     */
    public static final OfInt dwNLSVersion$layout() {
        return dwNLSVersion$LAYOUT;
    }

    private static final long dwNLSVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersion
     * }
     */
    public static final long dwNLSVersion$offset() {
        return dwNLSVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersion
     * }
     */
    public static int dwNLSVersion(MemorySegment struct) {
        return struct.get(dwNLSVersion$LAYOUT, dwNLSVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwNLSVersion
     * }
     */
    public static void dwNLSVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwNLSVersion$LAYOUT, dwNLSVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwDefinedVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDefinedVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwDefinedVersion
     * }
     */
    public static final OfInt dwDefinedVersion$layout() {
        return dwDefinedVersion$LAYOUT;
    }

    private static final long dwDefinedVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwDefinedVersion
     * }
     */
    public static final long dwDefinedVersion$offset() {
        return dwDefinedVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwDefinedVersion
     * }
     */
    public static int dwDefinedVersion(MemorySegment struct) {
        return struct.get(dwDefinedVersion$LAYOUT, dwDefinedVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwDefinedVersion
     * }
     */
    public static void dwDefinedVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwDefinedVersion$LAYOUT, dwDefinedVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwEffectiveId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwEffectiveId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwEffectiveId
     * }
     */
    public static final OfInt dwEffectiveId$layout() {
        return dwEffectiveId$LAYOUT;
    }

    private static final long dwEffectiveId$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwEffectiveId
     * }
     */
    public static final long dwEffectiveId$offset() {
        return dwEffectiveId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwEffectiveId
     * }
     */
    public static int dwEffectiveId(MemorySegment struct) {
        return struct.get(dwEffectiveId$LAYOUT, dwEffectiveId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwEffectiveId
     * }
     */
    public static void dwEffectiveId(MemorySegment struct, int fieldValue) {
        struct.set(dwEffectiveId$LAYOUT, dwEffectiveId$OFFSET, fieldValue);
    }

    private static final GroupLayout guidCustomVersion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("guidCustomVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID guidCustomVersion
     * }
     */
    public static final GroupLayout guidCustomVersion$layout() {
        return guidCustomVersion$LAYOUT;
    }

    private static final long guidCustomVersion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID guidCustomVersion
     * }
     */
    public static final long guidCustomVersion$offset() {
        return guidCustomVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID guidCustomVersion
     * }
     */
    public static MemorySegment guidCustomVersion(MemorySegment struct) {
        return struct.asSlice(guidCustomVersion$OFFSET, guidCustomVersion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID guidCustomVersion
     * }
     */
    public static void guidCustomVersion(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, guidCustomVersion$OFFSET, guidCustomVersion$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

