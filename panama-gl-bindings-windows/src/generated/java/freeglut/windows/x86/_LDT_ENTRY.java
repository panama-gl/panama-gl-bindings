// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _LDT_ENTRY {
 *     WORD LimitLow;
 *     WORD BaseLow;
 *     union {
 *         struct {
 *             BYTE BaseMid;
 *             BYTE Flags1;
 *             BYTE Flags2;
 *             BYTE BaseHi;
 *         } Bytes;
 *         struct {
 *             DWORD BaseMid : 8;
 *             DWORD Type : 5;
 *             DWORD Dpl : 2;
 *             DWORD Pres : 1;
 *             DWORD LimitHi : 4;
 *             DWORD Sys : 1;
 *             DWORD Reserved_0 : 1;
 *             DWORD Default_Big : 1;
 *             DWORD Granularity : 1;
 *             DWORD BaseHi : 8;
 *         } Bits;
 *     } HighWord;
 * }
 * }
 */
public class _LDT_ENTRY {

    _LDT_ENTRY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_SHORT.withName("LimitLow"),
        freeglut_h.C_SHORT.withName("BaseLow"),
        _LDT_ENTRY.HighWord.layout().withName("HighWord")
    ).withName("_LDT_ENTRY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort LimitLow$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LimitLow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD LimitLow
     * }
     */
    public static final OfShort LimitLow$layout() {
        return LimitLow$LAYOUT;
    }

    private static final long LimitLow$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD LimitLow
     * }
     */
    public static final long LimitLow$offset() {
        return LimitLow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD LimitLow
     * }
     */
    public static short LimitLow(MemorySegment struct) {
        return struct.get(LimitLow$LAYOUT, LimitLow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD LimitLow
     * }
     */
    public static void LimitLow(MemorySegment struct, short fieldValue) {
        struct.set(LimitLow$LAYOUT, LimitLow$OFFSET, fieldValue);
    }

    private static final OfShort BaseLow$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BaseLow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD BaseLow
     * }
     */
    public static final OfShort BaseLow$layout() {
        return BaseLow$LAYOUT;
    }

    private static final long BaseLow$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD BaseLow
     * }
     */
    public static final long BaseLow$offset() {
        return BaseLow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD BaseLow
     * }
     */
    public static short BaseLow(MemorySegment struct) {
        return struct.get(BaseLow$LAYOUT, BaseLow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD BaseLow
     * }
     */
    public static void BaseLow(MemorySegment struct, short fieldValue) {
        struct.set(BaseLow$LAYOUT, BaseLow$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE BaseMid;
     *         BYTE Flags1;
     *         BYTE Flags2;
     *         BYTE BaseHi;
     *     } Bytes;
     *     struct {
     *         DWORD BaseMid : 8;
     *         DWORD Type : 5;
     *         DWORD Dpl : 2;
     *         DWORD Pres : 1;
     *         DWORD LimitHi : 4;
     *         DWORD Sys : 1;
     *         DWORD Reserved_0 : 1;
     *         DWORD Default_Big : 1;
     *         DWORD Granularity : 1;
     *         DWORD BaseHi : 8;
     *     } Bits;
     * }
     * }
     */
    public static class HighWord {

        HighWord() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            _LDT_ENTRY.HighWord.Bytes.layout().withName("Bytes"),
            _LDT_ENTRY.HighWord.Bits.layout().withName("Bits")
        ).withName("$anon$7724:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * }
         * }
         */
        public static class Bytes {

            Bytes() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                freeglut_h.C_CHAR.withName("BaseMid"),
                freeglut_h.C_CHAR.withName("Flags1"),
                freeglut_h.C_CHAR.withName("Flags2"),
                freeglut_h.C_CHAR.withName("BaseHi")
            ).withName("$anon$7725:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfByte BaseMid$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BaseMid"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE BaseMid
             * }
             */
            public static final OfByte BaseMid$layout() {
                return BaseMid$LAYOUT;
            }

            private static final long BaseMid$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE BaseMid
             * }
             */
            public static final long BaseMid$offset() {
                return BaseMid$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE BaseMid
             * }
             */
            public static byte BaseMid(MemorySegment struct) {
                return struct.get(BaseMid$LAYOUT, BaseMid$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE BaseMid
             * }
             */
            public static void BaseMid(MemorySegment struct, byte fieldValue) {
                struct.set(BaseMid$LAYOUT, BaseMid$OFFSET, fieldValue);
            }

            private static final OfByte Flags1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Flags1"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE Flags1
             * }
             */
            public static final OfByte Flags1$layout() {
                return Flags1$LAYOUT;
            }

            private static final long Flags1$OFFSET = 1;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE Flags1
             * }
             */
            public static final long Flags1$offset() {
                return Flags1$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE Flags1
             * }
             */
            public static byte Flags1(MemorySegment struct) {
                return struct.get(Flags1$LAYOUT, Flags1$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE Flags1
             * }
             */
            public static void Flags1(MemorySegment struct, byte fieldValue) {
                struct.set(Flags1$LAYOUT, Flags1$OFFSET, fieldValue);
            }

            private static final OfByte Flags2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Flags2"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE Flags2
             * }
             */
            public static final OfByte Flags2$layout() {
                return Flags2$LAYOUT;
            }

            private static final long Flags2$OFFSET = 2;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE Flags2
             * }
             */
            public static final long Flags2$offset() {
                return Flags2$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE Flags2
             * }
             */
            public static byte Flags2(MemorySegment struct) {
                return struct.get(Flags2$LAYOUT, Flags2$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE Flags2
             * }
             */
            public static void Flags2(MemorySegment struct, byte fieldValue) {
                struct.set(Flags2$LAYOUT, Flags2$OFFSET, fieldValue);
            }

            private static final OfByte BaseHi$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BaseHi"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * BYTE BaseHi
             * }
             */
            public static final OfByte BaseHi$layout() {
                return BaseHi$LAYOUT;
            }

            private static final long BaseHi$OFFSET = 3;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * BYTE BaseHi
             * }
             */
            public static final long BaseHi$offset() {
                return BaseHi$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * BYTE BaseHi
             * }
             */
            public static byte BaseHi(MemorySegment struct) {
                return struct.get(BaseHi$LAYOUT, BaseHi$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * BYTE BaseHi
             * }
             */
            public static void BaseHi(MemorySegment struct, byte fieldValue) {
                struct.set(BaseHi$LAYOUT, BaseHi$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout Bytes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Bytes"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * } Bytes
         * }
         */
        public static final GroupLayout Bytes$layout() {
            return Bytes$LAYOUT;
        }

        private static final long Bytes$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * } Bytes
         * }
         */
        public static final long Bytes$offset() {
            return Bytes$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * } Bytes
         * }
         */
        public static MemorySegment Bytes(MemorySegment union) {
            return union.asSlice(Bytes$OFFSET, Bytes$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     BYTE BaseMid;
         *     BYTE Flags1;
         *     BYTE Flags2;
         *     BYTE BaseHi;
         * } Bytes
         * }
         */
        public static void Bytes(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, Bytes$OFFSET, Bytes$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     DWORD BaseMid : 8;
         *     DWORD Type : 5;
         *     DWORD Dpl : 2;
         *     DWORD Pres : 1;
         *     DWORD LimitHi : 4;
         *     DWORD Sys : 1;
         *     DWORD Reserved_0 : 1;
         *     DWORD Default_Big : 1;
         *     DWORD Granularity : 1;
         *     DWORD BaseHi : 8;
         * }
         * }
         */
        public static class Bits {

            Bits() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$7731:9");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout Bits$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Bits"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     DWORD BaseMid : 8;
         *     DWORD Type : 5;
         *     DWORD Dpl : 2;
         *     DWORD Pres : 1;
         *     DWORD LimitHi : 4;
         *     DWORD Sys : 1;
         *     DWORD Reserved_0 : 1;
         *     DWORD Default_Big : 1;
         *     DWORD Granularity : 1;
         *     DWORD BaseHi : 8;
         * } Bits
         * }
         */
        public static final GroupLayout Bits$layout() {
            return Bits$LAYOUT;
        }

        private static final long Bits$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     DWORD BaseMid : 8;
         *     DWORD Type : 5;
         *     DWORD Dpl : 2;
         *     DWORD Pres : 1;
         *     DWORD LimitHi : 4;
         *     DWORD Sys : 1;
         *     DWORD Reserved_0 : 1;
         *     DWORD Default_Big : 1;
         *     DWORD Granularity : 1;
         *     DWORD BaseHi : 8;
         * } Bits
         * }
         */
        public static final long Bits$offset() {
            return Bits$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     DWORD BaseMid : 8;
         *     DWORD Type : 5;
         *     DWORD Dpl : 2;
         *     DWORD Pres : 1;
         *     DWORD LimitHi : 4;
         *     DWORD Sys : 1;
         *     DWORD Reserved_0 : 1;
         *     DWORD Default_Big : 1;
         *     DWORD Granularity : 1;
         *     DWORD BaseHi : 8;
         * } Bits
         * }
         */
        public static MemorySegment Bits(MemorySegment union) {
            return union.asSlice(Bits$OFFSET, Bits$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     DWORD BaseMid : 8;
         *     DWORD Type : 5;
         *     DWORD Dpl : 2;
         *     DWORD Pres : 1;
         *     DWORD LimitHi : 4;
         *     DWORD Sys : 1;
         *     DWORD Reserved_0 : 1;
         *     DWORD Default_Big : 1;
         *     DWORD Granularity : 1;
         *     DWORD BaseHi : 8;
         * } Bits
         * }
         */
        public static void Bits(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, Bits$OFFSET, Bits$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout HighWord$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HighWord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE BaseMid;
     *         BYTE Flags1;
     *         BYTE Flags2;
     *         BYTE BaseHi;
     *     } Bytes;
     *     struct {
     *         DWORD BaseMid : 8;
     *         DWORD Type : 5;
     *         DWORD Dpl : 2;
     *         DWORD Pres : 1;
     *         DWORD LimitHi : 4;
     *         DWORD Sys : 1;
     *         DWORD Reserved_0 : 1;
     *         DWORD Default_Big : 1;
     *         DWORD Granularity : 1;
     *         DWORD BaseHi : 8;
     *     } Bits;
     * } HighWord
     * }
     */
    public static final GroupLayout HighWord$layout() {
        return HighWord$LAYOUT;
    }

    private static final long HighWord$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE BaseMid;
     *         BYTE Flags1;
     *         BYTE Flags2;
     *         BYTE BaseHi;
     *     } Bytes;
     *     struct {
     *         DWORD BaseMid : 8;
     *         DWORD Type : 5;
     *         DWORD Dpl : 2;
     *         DWORD Pres : 1;
     *         DWORD LimitHi : 4;
     *         DWORD Sys : 1;
     *         DWORD Reserved_0 : 1;
     *         DWORD Default_Big : 1;
     *         DWORD Granularity : 1;
     *         DWORD BaseHi : 8;
     *     } Bits;
     * } HighWord
     * }
     */
    public static final long HighWord$offset() {
        return HighWord$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE BaseMid;
     *         BYTE Flags1;
     *         BYTE Flags2;
     *         BYTE BaseHi;
     *     } Bytes;
     *     struct {
     *         DWORD BaseMid : 8;
     *         DWORD Type : 5;
     *         DWORD Dpl : 2;
     *         DWORD Pres : 1;
     *         DWORD LimitHi : 4;
     *         DWORD Sys : 1;
     *         DWORD Reserved_0 : 1;
     *         DWORD Default_Big : 1;
     *         DWORD Granularity : 1;
     *         DWORD BaseHi : 8;
     *     } Bits;
     * } HighWord
     * }
     */
    public static MemorySegment HighWord(MemorySegment struct) {
        return struct.asSlice(HighWord$OFFSET, HighWord$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         BYTE BaseMid;
     *         BYTE Flags1;
     *         BYTE Flags2;
     *         BYTE BaseHi;
     *     } Bytes;
     *     struct {
     *         DWORD BaseMid : 8;
     *         DWORD Type : 5;
     *         DWORD Dpl : 2;
     *         DWORD Pres : 1;
     *         DWORD LimitHi : 4;
     *         DWORD Sys : 1;
     *         DWORD Reserved_0 : 1;
     *         DWORD Default_Big : 1;
     *         DWORD Granularity : 1;
     *         DWORD BaseHi : 8;
     *     } Bits;
     * } HighWord
     * }
     */
    public static void HighWord(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HighWord$OFFSET, HighWord$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

