// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _HEAP_SUMMARY {
 *     DWORD cb;
 *     SIZE_T cbAllocated;
 *     SIZE_T cbCommitted;
 *     SIZE_T cbReserved;
 *     SIZE_T cbMaxReserve;
 * }
 * }
 */
public class _HEAP_SUMMARY {

    _HEAP_SUMMARY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("cb"),
        MemoryLayout.paddingLayout(4),
        freeglut_h.C_LONG_LONG.withName("cbAllocated"),
        freeglut_h.C_LONG_LONG.withName("cbCommitted"),
        freeglut_h.C_LONG_LONG.withName("cbReserved"),
        freeglut_h.C_LONG_LONG.withName("cbMaxReserve")
    ).withName("_HEAP_SUMMARY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static final OfInt cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static int cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static void cb(MemorySegment struct, int fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final OfLong cbAllocated$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cbAllocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T cbAllocated
     * }
     */
    public static final OfLong cbAllocated$layout() {
        return cbAllocated$LAYOUT;
    }

    private static final long cbAllocated$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T cbAllocated
     * }
     */
    public static final long cbAllocated$offset() {
        return cbAllocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T cbAllocated
     * }
     */
    public static long cbAllocated(MemorySegment struct) {
        return struct.get(cbAllocated$LAYOUT, cbAllocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T cbAllocated
     * }
     */
    public static void cbAllocated(MemorySegment struct, long fieldValue) {
        struct.set(cbAllocated$LAYOUT, cbAllocated$OFFSET, fieldValue);
    }

    private static final OfLong cbCommitted$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cbCommitted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T cbCommitted
     * }
     */
    public static final OfLong cbCommitted$layout() {
        return cbCommitted$LAYOUT;
    }

    private static final long cbCommitted$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T cbCommitted
     * }
     */
    public static final long cbCommitted$offset() {
        return cbCommitted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T cbCommitted
     * }
     */
    public static long cbCommitted(MemorySegment struct) {
        return struct.get(cbCommitted$LAYOUT, cbCommitted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T cbCommitted
     * }
     */
    public static void cbCommitted(MemorySegment struct, long fieldValue) {
        struct.set(cbCommitted$LAYOUT, cbCommitted$OFFSET, fieldValue);
    }

    private static final OfLong cbReserved$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cbReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T cbReserved
     * }
     */
    public static final OfLong cbReserved$layout() {
        return cbReserved$LAYOUT;
    }

    private static final long cbReserved$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T cbReserved
     * }
     */
    public static final long cbReserved$offset() {
        return cbReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T cbReserved
     * }
     */
    public static long cbReserved(MemorySegment struct) {
        return struct.get(cbReserved$LAYOUT, cbReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T cbReserved
     * }
     */
    public static void cbReserved(MemorySegment struct, long fieldValue) {
        struct.set(cbReserved$LAYOUT, cbReserved$OFFSET, fieldValue);
    }

    private static final OfLong cbMaxReserve$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cbMaxReserve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZE_T cbMaxReserve
     * }
     */
    public static final OfLong cbMaxReserve$layout() {
        return cbMaxReserve$LAYOUT;
    }

    private static final long cbMaxReserve$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZE_T cbMaxReserve
     * }
     */
    public static final long cbMaxReserve$offset() {
        return cbMaxReserve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZE_T cbMaxReserve
     * }
     */
    public static long cbMaxReserve(MemorySegment struct) {
        return struct.get(cbMaxReserve$LAYOUT, cbMaxReserve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZE_T cbMaxReserve
     * }
     */
    public static void cbMaxReserve(MemorySegment struct, long fieldValue) {
        struct.set(cbMaxReserve$LAYOUT, cbMaxReserve$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

