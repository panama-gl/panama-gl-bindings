// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagPAINTSTRUCT {
 *     HDC hdc;
 *     BOOL fErase;
 *     RECT rcPaint;
 *     BOOL fRestore;
 *     BOOL fIncUpdate;
 *     BYTE rgbReserved[32];
 * }
 * }
 */
public class tagPAINTSTRUCT {

    tagPAINTSTRUCT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_POINTER.withName("hdc"),
        freeglut_h.C_INT.withName("fErase"),
        tagRECT.layout().withName("rcPaint"),
        freeglut_h.C_INT.withName("fRestore"),
        freeglut_h.C_INT.withName("fIncUpdate"),
        MemoryLayout.sequenceLayout(32, freeglut_h.C_CHAR).withName("rgbReserved"),
        MemoryLayout.paddingLayout(4)
    ).withName("tagPAINTSTRUCT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout hdc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hdc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HDC hdc
     * }
     */
    public static final AddressLayout hdc$layout() {
        return hdc$LAYOUT;
    }

    private static final long hdc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HDC hdc
     * }
     */
    public static final long hdc$offset() {
        return hdc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HDC hdc
     * }
     */
    public static MemorySegment hdc(MemorySegment struct) {
        return struct.get(hdc$LAYOUT, hdc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HDC hdc
     * }
     */
    public static void hdc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hdc$LAYOUT, hdc$OFFSET, fieldValue);
    }

    private static final OfInt fErase$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fErase"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL fErase
     * }
     */
    public static final OfInt fErase$layout() {
        return fErase$LAYOUT;
    }

    private static final long fErase$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL fErase
     * }
     */
    public static final long fErase$offset() {
        return fErase$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL fErase
     * }
     */
    public static int fErase(MemorySegment struct) {
        return struct.get(fErase$LAYOUT, fErase$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL fErase
     * }
     */
    public static void fErase(MemorySegment struct, int fieldValue) {
        struct.set(fErase$LAYOUT, fErase$OFFSET, fieldValue);
    }

    private static final GroupLayout rcPaint$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcPaint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcPaint
     * }
     */
    public static final GroupLayout rcPaint$layout() {
        return rcPaint$LAYOUT;
    }

    private static final long rcPaint$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcPaint
     * }
     */
    public static final long rcPaint$offset() {
        return rcPaint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcPaint
     * }
     */
    public static MemorySegment rcPaint(MemorySegment struct) {
        return struct.asSlice(rcPaint$OFFSET, rcPaint$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcPaint
     * }
     */
    public static void rcPaint(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcPaint$OFFSET, rcPaint$LAYOUT.byteSize());
    }

    private static final OfInt fRestore$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fRestore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL fRestore
     * }
     */
    public static final OfInt fRestore$layout() {
        return fRestore$LAYOUT;
    }

    private static final long fRestore$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL fRestore
     * }
     */
    public static final long fRestore$offset() {
        return fRestore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL fRestore
     * }
     */
    public static int fRestore(MemorySegment struct) {
        return struct.get(fRestore$LAYOUT, fRestore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL fRestore
     * }
     */
    public static void fRestore(MemorySegment struct, int fieldValue) {
        struct.set(fRestore$LAYOUT, fRestore$OFFSET, fieldValue);
    }

    private static final OfInt fIncUpdate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fIncUpdate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL fIncUpdate
     * }
     */
    public static final OfInt fIncUpdate$layout() {
        return fIncUpdate$LAYOUT;
    }

    private static final long fIncUpdate$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL fIncUpdate
     * }
     */
    public static final long fIncUpdate$offset() {
        return fIncUpdate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL fIncUpdate
     * }
     */
    public static int fIncUpdate(MemorySegment struct) {
        return struct.get(fIncUpdate$LAYOUT, fIncUpdate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL fIncUpdate
     * }
     */
    public static void fIncUpdate(MemorySegment struct, int fieldValue) {
        struct.set(fIncUpdate$LAYOUT, fIncUpdate$OFFSET, fieldValue);
    }

    private static final SequenceLayout rgbReserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgbReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static final SequenceLayout rgbReserved$layout() {
        return rgbReserved$LAYOUT;
    }

    private static final long rgbReserved$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static final long rgbReserved$offset() {
        return rgbReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static MemorySegment rgbReserved(MemorySegment struct) {
        return struct.asSlice(rgbReserved$OFFSET, rgbReserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static void rgbReserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgbReserved$OFFSET, rgbReserved$LAYOUT.byteSize());
    }

    private static long[] rgbReserved$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static long[] rgbReserved$dimensions() {
        return rgbReserved$DIMS;
    }
    private static final VarHandle rgbReserved$ELEM_HANDLE = rgbReserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static byte rgbReserved(MemorySegment struct, long index0) {
        return (byte)rgbReserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE rgbReserved[32]
     * }
     */
    public static void rgbReserved(MemorySegment struct, long index0, byte fieldValue) {
        rgbReserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

