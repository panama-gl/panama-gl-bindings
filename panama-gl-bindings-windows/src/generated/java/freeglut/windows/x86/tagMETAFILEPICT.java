// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMETAFILEPICT {
 *     LONG mm;
 *     LONG xExt;
 *     LONG yExt;
 *     HMETAFILE hMF;
 * }
 * }
 */
public class tagMETAFILEPICT {

    tagMETAFILEPICT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("mm"),
        freeglut_h.C_LONG.withName("xExt"),
        freeglut_h.C_LONG.withName("yExt"),
        MemoryLayout.paddingLayout(4),
        freeglut_h.C_POINTER.withName("hMF")
    ).withName("tagMETAFILEPICT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt mm$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG mm
     * }
     */
    public static final OfInt mm$layout() {
        return mm$LAYOUT;
    }

    private static final long mm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG mm
     * }
     */
    public static final long mm$offset() {
        return mm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG mm
     * }
     */
    public static int mm(MemorySegment struct) {
        return struct.get(mm$LAYOUT, mm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG mm
     * }
     */
    public static void mm(MemorySegment struct, int fieldValue) {
        struct.set(mm$LAYOUT, mm$OFFSET, fieldValue);
    }

    private static final OfInt xExt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xExt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG xExt
     * }
     */
    public static final OfInt xExt$layout() {
        return xExt$LAYOUT;
    }

    private static final long xExt$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG xExt
     * }
     */
    public static final long xExt$offset() {
        return xExt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG xExt
     * }
     */
    public static int xExt(MemorySegment struct) {
        return struct.get(xExt$LAYOUT, xExt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG xExt
     * }
     */
    public static void xExt(MemorySegment struct, int fieldValue) {
        struct.set(xExt$LAYOUT, xExt$OFFSET, fieldValue);
    }

    private static final OfInt yExt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("yExt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG yExt
     * }
     */
    public static final OfInt yExt$layout() {
        return yExt$LAYOUT;
    }

    private static final long yExt$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG yExt
     * }
     */
    public static final long yExt$offset() {
        return yExt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG yExt
     * }
     */
    public static int yExt(MemorySegment struct) {
        return struct.get(yExt$LAYOUT, yExt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG yExt
     * }
     */
    public static void yExt(MemorySegment struct, int fieldValue) {
        struct.set(yExt$LAYOUT, yExt$OFFSET, fieldValue);
    }

    private static final AddressLayout hMF$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hMF"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HMETAFILE hMF
     * }
     */
    public static final AddressLayout hMF$layout() {
        return hMF$LAYOUT;
    }

    private static final long hMF$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HMETAFILE hMF
     * }
     */
    public static final long hMF$offset() {
        return hMF$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HMETAFILE hMF
     * }
     */
    public static MemorySegment hMF(MemorySegment struct) {
        return struct.get(hMF$LAYOUT, hMF$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HMETAFILE hMF
     * }
     */
    public static void hMF(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hMF$LAYOUT, hMF$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

