// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagLOGFONTA {
 *     LONG lfHeight;
 *     LONG lfWidth;
 *     LONG lfEscapement;
 *     LONG lfOrientation;
 *     LONG lfWeight;
 *     BYTE lfItalic;
 *     BYTE lfUnderline;
 *     BYTE lfStrikeOut;
 *     BYTE lfCharSet;
 *     BYTE lfOutPrecision;
 *     BYTE lfClipPrecision;
 *     BYTE lfQuality;
 *     BYTE lfPitchAndFamily;
 *     CHAR lfFaceName[32];
 * }
 * }
 */
public class tagLOGFONTA {

    tagLOGFONTA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("lfHeight"),
        freeglut_h.C_LONG.withName("lfWidth"),
        freeglut_h.C_LONG.withName("lfEscapement"),
        freeglut_h.C_LONG.withName("lfOrientation"),
        freeglut_h.C_LONG.withName("lfWeight"),
        freeglut_h.C_CHAR.withName("lfItalic"),
        freeglut_h.C_CHAR.withName("lfUnderline"),
        freeglut_h.C_CHAR.withName("lfStrikeOut"),
        freeglut_h.C_CHAR.withName("lfCharSet"),
        freeglut_h.C_CHAR.withName("lfOutPrecision"),
        freeglut_h.C_CHAR.withName("lfClipPrecision"),
        freeglut_h.C_CHAR.withName("lfQuality"),
        freeglut_h.C_CHAR.withName("lfPitchAndFamily"),
        MemoryLayout.sequenceLayout(32, freeglut_h.C_CHAR).withName("lfFaceName")
    ).withName("tagLOGFONTA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt lfHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lfHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lfHeight
     * }
     */
    public static final OfInt lfHeight$layout() {
        return lfHeight$LAYOUT;
    }

    private static final long lfHeight$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lfHeight
     * }
     */
    public static final long lfHeight$offset() {
        return lfHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lfHeight
     * }
     */
    public static int lfHeight(MemorySegment struct) {
        return struct.get(lfHeight$LAYOUT, lfHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lfHeight
     * }
     */
    public static void lfHeight(MemorySegment struct, int fieldValue) {
        struct.set(lfHeight$LAYOUT, lfHeight$OFFSET, fieldValue);
    }

    private static final OfInt lfWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lfWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lfWidth
     * }
     */
    public static final OfInt lfWidth$layout() {
        return lfWidth$LAYOUT;
    }

    private static final long lfWidth$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lfWidth
     * }
     */
    public static final long lfWidth$offset() {
        return lfWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lfWidth
     * }
     */
    public static int lfWidth(MemorySegment struct) {
        return struct.get(lfWidth$LAYOUT, lfWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lfWidth
     * }
     */
    public static void lfWidth(MemorySegment struct, int fieldValue) {
        struct.set(lfWidth$LAYOUT, lfWidth$OFFSET, fieldValue);
    }

    private static final OfInt lfEscapement$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lfEscapement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lfEscapement
     * }
     */
    public static final OfInt lfEscapement$layout() {
        return lfEscapement$LAYOUT;
    }

    private static final long lfEscapement$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lfEscapement
     * }
     */
    public static final long lfEscapement$offset() {
        return lfEscapement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lfEscapement
     * }
     */
    public static int lfEscapement(MemorySegment struct) {
        return struct.get(lfEscapement$LAYOUT, lfEscapement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lfEscapement
     * }
     */
    public static void lfEscapement(MemorySegment struct, int fieldValue) {
        struct.set(lfEscapement$LAYOUT, lfEscapement$OFFSET, fieldValue);
    }

    private static final OfInt lfOrientation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lfOrientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lfOrientation
     * }
     */
    public static final OfInt lfOrientation$layout() {
        return lfOrientation$LAYOUT;
    }

    private static final long lfOrientation$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lfOrientation
     * }
     */
    public static final long lfOrientation$offset() {
        return lfOrientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lfOrientation
     * }
     */
    public static int lfOrientation(MemorySegment struct) {
        return struct.get(lfOrientation$LAYOUT, lfOrientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lfOrientation
     * }
     */
    public static void lfOrientation(MemorySegment struct, int fieldValue) {
        struct.set(lfOrientation$LAYOUT, lfOrientation$OFFSET, fieldValue);
    }

    private static final OfInt lfWeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lfWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lfWeight
     * }
     */
    public static final OfInt lfWeight$layout() {
        return lfWeight$LAYOUT;
    }

    private static final long lfWeight$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lfWeight
     * }
     */
    public static final long lfWeight$offset() {
        return lfWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lfWeight
     * }
     */
    public static int lfWeight(MemorySegment struct) {
        return struct.get(lfWeight$LAYOUT, lfWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lfWeight
     * }
     */
    public static void lfWeight(MemorySegment struct, int fieldValue) {
        struct.set(lfWeight$LAYOUT, lfWeight$OFFSET, fieldValue);
    }

    private static final OfByte lfItalic$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfItalic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfItalic
     * }
     */
    public static final OfByte lfItalic$layout() {
        return lfItalic$LAYOUT;
    }

    private static final long lfItalic$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfItalic
     * }
     */
    public static final long lfItalic$offset() {
        return lfItalic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfItalic
     * }
     */
    public static byte lfItalic(MemorySegment struct) {
        return struct.get(lfItalic$LAYOUT, lfItalic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfItalic
     * }
     */
    public static void lfItalic(MemorySegment struct, byte fieldValue) {
        struct.set(lfItalic$LAYOUT, lfItalic$OFFSET, fieldValue);
    }

    private static final OfByte lfUnderline$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfUnderline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfUnderline
     * }
     */
    public static final OfByte lfUnderline$layout() {
        return lfUnderline$LAYOUT;
    }

    private static final long lfUnderline$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfUnderline
     * }
     */
    public static final long lfUnderline$offset() {
        return lfUnderline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfUnderline
     * }
     */
    public static byte lfUnderline(MemorySegment struct) {
        return struct.get(lfUnderline$LAYOUT, lfUnderline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfUnderline
     * }
     */
    public static void lfUnderline(MemorySegment struct, byte fieldValue) {
        struct.set(lfUnderline$LAYOUT, lfUnderline$OFFSET, fieldValue);
    }

    private static final OfByte lfStrikeOut$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfStrikeOut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfStrikeOut
     * }
     */
    public static final OfByte lfStrikeOut$layout() {
        return lfStrikeOut$LAYOUT;
    }

    private static final long lfStrikeOut$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfStrikeOut
     * }
     */
    public static final long lfStrikeOut$offset() {
        return lfStrikeOut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfStrikeOut
     * }
     */
    public static byte lfStrikeOut(MemorySegment struct) {
        return struct.get(lfStrikeOut$LAYOUT, lfStrikeOut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfStrikeOut
     * }
     */
    public static void lfStrikeOut(MemorySegment struct, byte fieldValue) {
        struct.set(lfStrikeOut$LAYOUT, lfStrikeOut$OFFSET, fieldValue);
    }

    private static final OfByte lfCharSet$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfCharSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfCharSet
     * }
     */
    public static final OfByte lfCharSet$layout() {
        return lfCharSet$LAYOUT;
    }

    private static final long lfCharSet$OFFSET = 23;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfCharSet
     * }
     */
    public static final long lfCharSet$offset() {
        return lfCharSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfCharSet
     * }
     */
    public static byte lfCharSet(MemorySegment struct) {
        return struct.get(lfCharSet$LAYOUT, lfCharSet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfCharSet
     * }
     */
    public static void lfCharSet(MemorySegment struct, byte fieldValue) {
        struct.set(lfCharSet$LAYOUT, lfCharSet$OFFSET, fieldValue);
    }

    private static final OfByte lfOutPrecision$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfOutPrecision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfOutPrecision
     * }
     */
    public static final OfByte lfOutPrecision$layout() {
        return lfOutPrecision$LAYOUT;
    }

    private static final long lfOutPrecision$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfOutPrecision
     * }
     */
    public static final long lfOutPrecision$offset() {
        return lfOutPrecision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfOutPrecision
     * }
     */
    public static byte lfOutPrecision(MemorySegment struct) {
        return struct.get(lfOutPrecision$LAYOUT, lfOutPrecision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfOutPrecision
     * }
     */
    public static void lfOutPrecision(MemorySegment struct, byte fieldValue) {
        struct.set(lfOutPrecision$LAYOUT, lfOutPrecision$OFFSET, fieldValue);
    }

    private static final OfByte lfClipPrecision$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfClipPrecision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfClipPrecision
     * }
     */
    public static final OfByte lfClipPrecision$layout() {
        return lfClipPrecision$LAYOUT;
    }

    private static final long lfClipPrecision$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfClipPrecision
     * }
     */
    public static final long lfClipPrecision$offset() {
        return lfClipPrecision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfClipPrecision
     * }
     */
    public static byte lfClipPrecision(MemorySegment struct) {
        return struct.get(lfClipPrecision$LAYOUT, lfClipPrecision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfClipPrecision
     * }
     */
    public static void lfClipPrecision(MemorySegment struct, byte fieldValue) {
        struct.set(lfClipPrecision$LAYOUT, lfClipPrecision$OFFSET, fieldValue);
    }

    private static final OfByte lfQuality$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfQuality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfQuality
     * }
     */
    public static final OfByte lfQuality$layout() {
        return lfQuality$LAYOUT;
    }

    private static final long lfQuality$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfQuality
     * }
     */
    public static final long lfQuality$offset() {
        return lfQuality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfQuality
     * }
     */
    public static byte lfQuality(MemorySegment struct) {
        return struct.get(lfQuality$LAYOUT, lfQuality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfQuality
     * }
     */
    public static void lfQuality(MemorySegment struct, byte fieldValue) {
        struct.set(lfQuality$LAYOUT, lfQuality$OFFSET, fieldValue);
    }

    private static final OfByte lfPitchAndFamily$LAYOUT = (OfByte)$LAYOUT.select(groupElement("lfPitchAndFamily"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE lfPitchAndFamily
     * }
     */
    public static final OfByte lfPitchAndFamily$layout() {
        return lfPitchAndFamily$LAYOUT;
    }

    private static final long lfPitchAndFamily$OFFSET = 27;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE lfPitchAndFamily
     * }
     */
    public static final long lfPitchAndFamily$offset() {
        return lfPitchAndFamily$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE lfPitchAndFamily
     * }
     */
    public static byte lfPitchAndFamily(MemorySegment struct) {
        return struct.get(lfPitchAndFamily$LAYOUT, lfPitchAndFamily$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE lfPitchAndFamily
     * }
     */
    public static void lfPitchAndFamily(MemorySegment struct, byte fieldValue) {
        struct.set(lfPitchAndFamily$LAYOUT, lfPitchAndFamily$OFFSET, fieldValue);
    }

    private static final SequenceLayout lfFaceName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lfFaceName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static final SequenceLayout lfFaceName$layout() {
        return lfFaceName$LAYOUT;
    }

    private static final long lfFaceName$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static final long lfFaceName$offset() {
        return lfFaceName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static MemorySegment lfFaceName(MemorySegment struct) {
        return struct.asSlice(lfFaceName$OFFSET, lfFaceName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static void lfFaceName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lfFaceName$OFFSET, lfFaceName$LAYOUT.byteSize());
    }

    private static long[] lfFaceName$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static long[] lfFaceName$dimensions() {
        return lfFaceName$DIMS;
    }
    private static final VarHandle lfFaceName$ELEM_HANDLE = lfFaceName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static byte lfFaceName(MemorySegment struct, long index0) {
        return (byte)lfFaceName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR lfFaceName[32]
     * }
     */
    public static void lfFaceName(MemorySegment struct, long index0, byte fieldValue) {
        lfFaceName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

