// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagENHMETAHEADER {
 *     DWORD iType;
 *     DWORD nSize;
 *     RECTL rclBounds;
 *     RECTL rclFrame;
 *     DWORD dSignature;
 *     DWORD nVersion;
 *     DWORD nBytes;
 *     DWORD nRecords;
 *     WORD nHandles;
 *     WORD sReserved;
 *     DWORD nDescription;
 *     DWORD offDescription;
 *     DWORD nPalEntries;
 *     SIZEL szlDevice;
 *     SIZEL szlMillimeters;
 *     DWORD cbPixelFormat;
 *     DWORD offPixelFormat;
 *     DWORD bOpenGL;
 *     SIZEL szlMicrometers;
 * }
 * }
 */
public class tagENHMETAHEADER {

    tagENHMETAHEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("iType"),
        freeglut_h.C_LONG.withName("nSize"),
        _RECTL.layout().withName("rclBounds"),
        _RECTL.layout().withName("rclFrame"),
        freeglut_h.C_LONG.withName("dSignature"),
        freeglut_h.C_LONG.withName("nVersion"),
        freeglut_h.C_LONG.withName("nBytes"),
        freeglut_h.C_LONG.withName("nRecords"),
        freeglut_h.C_SHORT.withName("nHandles"),
        freeglut_h.C_SHORT.withName("sReserved"),
        freeglut_h.C_LONG.withName("nDescription"),
        freeglut_h.C_LONG.withName("offDescription"),
        freeglut_h.C_LONG.withName("nPalEntries"),
        tagSIZE.layout().withName("szlDevice"),
        tagSIZE.layout().withName("szlMillimeters"),
        freeglut_h.C_LONG.withName("cbPixelFormat"),
        freeglut_h.C_LONG.withName("offPixelFormat"),
        freeglut_h.C_LONG.withName("bOpenGL"),
        tagSIZE.layout().withName("szlMicrometers")
    ).withName("tagENHMETAHEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt iType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD iType
     * }
     */
    public static final OfInt iType$layout() {
        return iType$LAYOUT;
    }

    private static final long iType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD iType
     * }
     */
    public static final long iType$offset() {
        return iType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD iType
     * }
     */
    public static int iType(MemorySegment struct) {
        return struct.get(iType$LAYOUT, iType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD iType
     * }
     */
    public static void iType(MemorySegment struct, int fieldValue) {
        struct.set(iType$LAYOUT, iType$OFFSET, fieldValue);
    }

    private static final OfInt nSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nSize
     * }
     */
    public static final OfInt nSize$layout() {
        return nSize$LAYOUT;
    }

    private static final long nSize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nSize
     * }
     */
    public static final long nSize$offset() {
        return nSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nSize
     * }
     */
    public static int nSize(MemorySegment struct) {
        return struct.get(nSize$LAYOUT, nSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nSize
     * }
     */
    public static void nSize(MemorySegment struct, int fieldValue) {
        struct.set(nSize$LAYOUT, nSize$OFFSET, fieldValue);
    }

    private static final GroupLayout rclBounds$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rclBounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECTL rclBounds
     * }
     */
    public static final GroupLayout rclBounds$layout() {
        return rclBounds$LAYOUT;
    }

    private static final long rclBounds$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECTL rclBounds
     * }
     */
    public static final long rclBounds$offset() {
        return rclBounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECTL rclBounds
     * }
     */
    public static MemorySegment rclBounds(MemorySegment struct) {
        return struct.asSlice(rclBounds$OFFSET, rclBounds$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECTL rclBounds
     * }
     */
    public static void rclBounds(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rclBounds$OFFSET, rclBounds$LAYOUT.byteSize());
    }

    private static final GroupLayout rclFrame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rclFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECTL rclFrame
     * }
     */
    public static final GroupLayout rclFrame$layout() {
        return rclFrame$LAYOUT;
    }

    private static final long rclFrame$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECTL rclFrame
     * }
     */
    public static final long rclFrame$offset() {
        return rclFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECTL rclFrame
     * }
     */
    public static MemorySegment rclFrame(MemorySegment struct) {
        return struct.asSlice(rclFrame$OFFSET, rclFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECTL rclFrame
     * }
     */
    public static void rclFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rclFrame$OFFSET, rclFrame$LAYOUT.byteSize());
    }

    private static final OfInt dSignature$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dSignature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dSignature
     * }
     */
    public static final OfInt dSignature$layout() {
        return dSignature$LAYOUT;
    }

    private static final long dSignature$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dSignature
     * }
     */
    public static final long dSignature$offset() {
        return dSignature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dSignature
     * }
     */
    public static int dSignature(MemorySegment struct) {
        return struct.get(dSignature$LAYOUT, dSignature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dSignature
     * }
     */
    public static void dSignature(MemorySegment struct, int fieldValue) {
        struct.set(dSignature$LAYOUT, dSignature$OFFSET, fieldValue);
    }

    private static final OfInt nVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nVersion
     * }
     */
    public static final OfInt nVersion$layout() {
        return nVersion$LAYOUT;
    }

    private static final long nVersion$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nVersion
     * }
     */
    public static final long nVersion$offset() {
        return nVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nVersion
     * }
     */
    public static int nVersion(MemorySegment struct) {
        return struct.get(nVersion$LAYOUT, nVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nVersion
     * }
     */
    public static void nVersion(MemorySegment struct, int fieldValue) {
        struct.set(nVersion$LAYOUT, nVersion$OFFSET, fieldValue);
    }

    private static final OfInt nBytes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nBytes
     * }
     */
    public static final OfInt nBytes$layout() {
        return nBytes$LAYOUT;
    }

    private static final long nBytes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nBytes
     * }
     */
    public static final long nBytes$offset() {
        return nBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nBytes
     * }
     */
    public static int nBytes(MemorySegment struct) {
        return struct.get(nBytes$LAYOUT, nBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nBytes
     * }
     */
    public static void nBytes(MemorySegment struct, int fieldValue) {
        struct.set(nBytes$LAYOUT, nBytes$OFFSET, fieldValue);
    }

    private static final OfInt nRecords$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nRecords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nRecords
     * }
     */
    public static final OfInt nRecords$layout() {
        return nRecords$LAYOUT;
    }

    private static final long nRecords$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nRecords
     * }
     */
    public static final long nRecords$offset() {
        return nRecords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nRecords
     * }
     */
    public static int nRecords(MemorySegment struct) {
        return struct.get(nRecords$LAYOUT, nRecords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nRecords
     * }
     */
    public static void nRecords(MemorySegment struct, int fieldValue) {
        struct.set(nRecords$LAYOUT, nRecords$OFFSET, fieldValue);
    }

    private static final OfShort nHandles$LAYOUT = (OfShort)$LAYOUT.select(groupElement("nHandles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD nHandles
     * }
     */
    public static final OfShort nHandles$layout() {
        return nHandles$LAYOUT;
    }

    private static final long nHandles$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD nHandles
     * }
     */
    public static final long nHandles$offset() {
        return nHandles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD nHandles
     * }
     */
    public static short nHandles(MemorySegment struct) {
        return struct.get(nHandles$LAYOUT, nHandles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD nHandles
     * }
     */
    public static void nHandles(MemorySegment struct, short fieldValue) {
        struct.set(nHandles$LAYOUT, nHandles$OFFSET, fieldValue);
    }

    private static final OfShort sReserved$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD sReserved
     * }
     */
    public static final OfShort sReserved$layout() {
        return sReserved$LAYOUT;
    }

    private static final long sReserved$OFFSET = 58;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD sReserved
     * }
     */
    public static final long sReserved$offset() {
        return sReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD sReserved
     * }
     */
    public static short sReserved(MemorySegment struct) {
        return struct.get(sReserved$LAYOUT, sReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD sReserved
     * }
     */
    public static void sReserved(MemorySegment struct, short fieldValue) {
        struct.set(sReserved$LAYOUT, sReserved$OFFSET, fieldValue);
    }

    private static final OfInt nDescription$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nDescription
     * }
     */
    public static final OfInt nDescription$layout() {
        return nDescription$LAYOUT;
    }

    private static final long nDescription$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nDescription
     * }
     */
    public static final long nDescription$offset() {
        return nDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nDescription
     * }
     */
    public static int nDescription(MemorySegment struct) {
        return struct.get(nDescription$LAYOUT, nDescription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nDescription
     * }
     */
    public static void nDescription(MemorySegment struct, int fieldValue) {
        struct.set(nDescription$LAYOUT, nDescription$OFFSET, fieldValue);
    }

    private static final OfInt offDescription$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offDescription"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD offDescription
     * }
     */
    public static final OfInt offDescription$layout() {
        return offDescription$LAYOUT;
    }

    private static final long offDescription$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD offDescription
     * }
     */
    public static final long offDescription$offset() {
        return offDescription$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD offDescription
     * }
     */
    public static int offDescription(MemorySegment struct) {
        return struct.get(offDescription$LAYOUT, offDescription$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD offDescription
     * }
     */
    public static void offDescription(MemorySegment struct, int fieldValue) {
        struct.set(offDescription$LAYOUT, offDescription$OFFSET, fieldValue);
    }

    private static final OfInt nPalEntries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nPalEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nPalEntries
     * }
     */
    public static final OfInt nPalEntries$layout() {
        return nPalEntries$LAYOUT;
    }

    private static final long nPalEntries$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nPalEntries
     * }
     */
    public static final long nPalEntries$offset() {
        return nPalEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nPalEntries
     * }
     */
    public static int nPalEntries(MemorySegment struct) {
        return struct.get(nPalEntries$LAYOUT, nPalEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nPalEntries
     * }
     */
    public static void nPalEntries(MemorySegment struct, int fieldValue) {
        struct.set(nPalEntries$LAYOUT, nPalEntries$OFFSET, fieldValue);
    }

    private static final GroupLayout szlDevice$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("szlDevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZEL szlDevice
     * }
     */
    public static final GroupLayout szlDevice$layout() {
        return szlDevice$LAYOUT;
    }

    private static final long szlDevice$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZEL szlDevice
     * }
     */
    public static final long szlDevice$offset() {
        return szlDevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZEL szlDevice
     * }
     */
    public static MemorySegment szlDevice(MemorySegment struct) {
        return struct.asSlice(szlDevice$OFFSET, szlDevice$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZEL szlDevice
     * }
     */
    public static void szlDevice(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szlDevice$OFFSET, szlDevice$LAYOUT.byteSize());
    }

    private static final GroupLayout szlMillimeters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("szlMillimeters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZEL szlMillimeters
     * }
     */
    public static final GroupLayout szlMillimeters$layout() {
        return szlMillimeters$LAYOUT;
    }

    private static final long szlMillimeters$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZEL szlMillimeters
     * }
     */
    public static final long szlMillimeters$offset() {
        return szlMillimeters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZEL szlMillimeters
     * }
     */
    public static MemorySegment szlMillimeters(MemorySegment struct) {
        return struct.asSlice(szlMillimeters$OFFSET, szlMillimeters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZEL szlMillimeters
     * }
     */
    public static void szlMillimeters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szlMillimeters$OFFSET, szlMillimeters$LAYOUT.byteSize());
    }

    private static final OfInt cbPixelFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbPixelFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbPixelFormat
     * }
     */
    public static final OfInt cbPixelFormat$layout() {
        return cbPixelFormat$LAYOUT;
    }

    private static final long cbPixelFormat$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbPixelFormat
     * }
     */
    public static final long cbPixelFormat$offset() {
        return cbPixelFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbPixelFormat
     * }
     */
    public static int cbPixelFormat(MemorySegment struct) {
        return struct.get(cbPixelFormat$LAYOUT, cbPixelFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbPixelFormat
     * }
     */
    public static void cbPixelFormat(MemorySegment struct, int fieldValue) {
        struct.set(cbPixelFormat$LAYOUT, cbPixelFormat$OFFSET, fieldValue);
    }

    private static final OfInt offPixelFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offPixelFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD offPixelFormat
     * }
     */
    public static final OfInt offPixelFormat$layout() {
        return offPixelFormat$LAYOUT;
    }

    private static final long offPixelFormat$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD offPixelFormat
     * }
     */
    public static final long offPixelFormat$offset() {
        return offPixelFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD offPixelFormat
     * }
     */
    public static int offPixelFormat(MemorySegment struct) {
        return struct.get(offPixelFormat$LAYOUT, offPixelFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD offPixelFormat
     * }
     */
    public static void offPixelFormat(MemorySegment struct, int fieldValue) {
        struct.set(offPixelFormat$LAYOUT, offPixelFormat$OFFSET, fieldValue);
    }

    private static final OfInt bOpenGL$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bOpenGL"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD bOpenGL
     * }
     */
    public static final OfInt bOpenGL$layout() {
        return bOpenGL$LAYOUT;
    }

    private static final long bOpenGL$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD bOpenGL
     * }
     */
    public static final long bOpenGL$offset() {
        return bOpenGL$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD bOpenGL
     * }
     */
    public static int bOpenGL(MemorySegment struct) {
        return struct.get(bOpenGL$LAYOUT, bOpenGL$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD bOpenGL
     * }
     */
    public static void bOpenGL(MemorySegment struct, int fieldValue) {
        struct.set(bOpenGL$LAYOUT, bOpenGL$OFFSET, fieldValue);
    }

    private static final GroupLayout szlMicrometers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("szlMicrometers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SIZEL szlMicrometers
     * }
     */
    public static final GroupLayout szlMicrometers$layout() {
        return szlMicrometers$LAYOUT;
    }

    private static final long szlMicrometers$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SIZEL szlMicrometers
     * }
     */
    public static final long szlMicrometers$offset() {
        return szlMicrometers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SIZEL szlMicrometers
     * }
     */
    public static MemorySegment szlMicrometers(MemorySegment struct) {
        return struct.asSlice(szlMicrometers$OFFSET, szlMicrometers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SIZEL szlMicrometers
     * }
     */
    public static void szlMicrometers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szlMicrometers$OFFSET, szlMicrometers$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

