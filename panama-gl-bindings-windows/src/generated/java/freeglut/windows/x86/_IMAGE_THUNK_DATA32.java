// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_THUNK_DATA32 {
 *     union {
 *         DWORD ForwarderString;
 *         DWORD Function;
 *         DWORD Ordinal;
 *         DWORD AddressOfData;
 *     } u1;
 * }
 * }
 */
public class _IMAGE_THUNK_DATA32 {

    _IMAGE_THUNK_DATA32() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _IMAGE_THUNK_DATA32.u1.layout().withName("u1")
    ).withName("_IMAGE_THUNK_DATA32");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     DWORD ForwarderString;
     *     DWORD Function;
     *     DWORD Ordinal;
     *     DWORD AddressOfData;
     * }
     * }
     */
    public static class u1 {

        u1() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            freeglut_h.C_LONG.withName("ForwarderString"),
            freeglut_h.C_LONG.withName("Function"),
            freeglut_h.C_LONG.withName("Ordinal"),
            freeglut_h.C_LONG.withName("AddressOfData")
        ).withName("$anon$18214:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt ForwarderString$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ForwarderString"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD ForwarderString
         * }
         */
        public static final OfInt ForwarderString$layout() {
            return ForwarderString$LAYOUT;
        }

        private static final long ForwarderString$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD ForwarderString
         * }
         */
        public static final long ForwarderString$offset() {
            return ForwarderString$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD ForwarderString
         * }
         */
        public static int ForwarderString(MemorySegment union) {
            return union.get(ForwarderString$LAYOUT, ForwarderString$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD ForwarderString
         * }
         */
        public static void ForwarderString(MemorySegment union, int fieldValue) {
            union.set(ForwarderString$LAYOUT, ForwarderString$OFFSET, fieldValue);
        }

        private static final OfInt Function$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Function"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Function
         * }
         */
        public static final OfInt Function$layout() {
            return Function$LAYOUT;
        }

        private static final long Function$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Function
         * }
         */
        public static final long Function$offset() {
            return Function$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Function
         * }
         */
        public static int Function(MemorySegment union) {
            return union.get(Function$LAYOUT, Function$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Function
         * }
         */
        public static void Function(MemorySegment union, int fieldValue) {
            union.set(Function$LAYOUT, Function$OFFSET, fieldValue);
        }

        private static final OfInt Ordinal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Ordinal"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD Ordinal
         * }
         */
        public static final OfInt Ordinal$layout() {
            return Ordinal$LAYOUT;
        }

        private static final long Ordinal$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD Ordinal
         * }
         */
        public static final long Ordinal$offset() {
            return Ordinal$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD Ordinal
         * }
         */
        public static int Ordinal(MemorySegment union) {
            return union.get(Ordinal$LAYOUT, Ordinal$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD Ordinal
         * }
         */
        public static void Ordinal(MemorySegment union, int fieldValue) {
            union.set(Ordinal$LAYOUT, Ordinal$OFFSET, fieldValue);
        }

        private static final OfInt AddressOfData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AddressOfData"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD AddressOfData
         * }
         */
        public static final OfInt AddressOfData$layout() {
            return AddressOfData$LAYOUT;
        }

        private static final long AddressOfData$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD AddressOfData
         * }
         */
        public static final long AddressOfData$offset() {
            return AddressOfData$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD AddressOfData
         * }
         */
        public static int AddressOfData(MemorySegment union) {
            return union.get(AddressOfData$LAYOUT, AddressOfData$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD AddressOfData
         * }
         */
        public static void AddressOfData(MemorySegment union, int fieldValue) {
            union.set(AddressOfData$LAYOUT, AddressOfData$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     DWORD ForwarderString;
     *     DWORD Function;
     *     DWORD Ordinal;
     *     DWORD AddressOfData;
     * } u1
     * }
     */
    public static final GroupLayout u1$layout() {
        return u1$LAYOUT;
    }

    private static final long u1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     DWORD ForwarderString;
     *     DWORD Function;
     *     DWORD Ordinal;
     *     DWORD AddressOfData;
     * } u1
     * }
     */
    public static final long u1$offset() {
        return u1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD ForwarderString;
     *     DWORD Function;
     *     DWORD Ordinal;
     *     DWORD AddressOfData;
     * } u1
     * }
     */
    public static MemorySegment u1(MemorySegment struct) {
        return struct.asSlice(u1$OFFSET, u1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     DWORD ForwarderString;
     *     DWORD Function;
     *     DWORD Ordinal;
     *     DWORD AddressOfData;
     * } u1
     * }
     */
    public static void u1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u1$OFFSET, u1$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

