// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SYSTEMTIME {
 *     WORD wYear;
 *     WORD wMonth;
 *     WORD wDayOfWeek;
 *     WORD wDay;
 *     WORD wHour;
 *     WORD wMinute;
 *     WORD wSecond;
 *     WORD wMilliseconds;
 * }
 * }
 */
public class _SYSTEMTIME {

    _SYSTEMTIME() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_SHORT.withName("wYear"),
        freeglut_h.C_SHORT.withName("wMonth"),
        freeglut_h.C_SHORT.withName("wDayOfWeek"),
        freeglut_h.C_SHORT.withName("wDay"),
        freeglut_h.C_SHORT.withName("wHour"),
        freeglut_h.C_SHORT.withName("wMinute"),
        freeglut_h.C_SHORT.withName("wSecond"),
        freeglut_h.C_SHORT.withName("wMilliseconds")
    ).withName("_SYSTEMTIME");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort wYear$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wYear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wYear
     * }
     */
    public static final OfShort wYear$layout() {
        return wYear$LAYOUT;
    }

    private static final long wYear$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wYear
     * }
     */
    public static final long wYear$offset() {
        return wYear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wYear
     * }
     */
    public static short wYear(MemorySegment struct) {
        return struct.get(wYear$LAYOUT, wYear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wYear
     * }
     */
    public static void wYear(MemorySegment struct, short fieldValue) {
        struct.set(wYear$LAYOUT, wYear$OFFSET, fieldValue);
    }

    private static final OfShort wMonth$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wMonth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wMonth
     * }
     */
    public static final OfShort wMonth$layout() {
        return wMonth$LAYOUT;
    }

    private static final long wMonth$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wMonth
     * }
     */
    public static final long wMonth$offset() {
        return wMonth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wMonth
     * }
     */
    public static short wMonth(MemorySegment struct) {
        return struct.get(wMonth$LAYOUT, wMonth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wMonth
     * }
     */
    public static void wMonth(MemorySegment struct, short fieldValue) {
        struct.set(wMonth$LAYOUT, wMonth$OFFSET, fieldValue);
    }

    private static final OfShort wDayOfWeek$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wDayOfWeek"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wDayOfWeek
     * }
     */
    public static final OfShort wDayOfWeek$layout() {
        return wDayOfWeek$LAYOUT;
    }

    private static final long wDayOfWeek$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wDayOfWeek
     * }
     */
    public static final long wDayOfWeek$offset() {
        return wDayOfWeek$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wDayOfWeek
     * }
     */
    public static short wDayOfWeek(MemorySegment struct) {
        return struct.get(wDayOfWeek$LAYOUT, wDayOfWeek$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wDayOfWeek
     * }
     */
    public static void wDayOfWeek(MemorySegment struct, short fieldValue) {
        struct.set(wDayOfWeek$LAYOUT, wDayOfWeek$OFFSET, fieldValue);
    }

    private static final OfShort wDay$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wDay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wDay
     * }
     */
    public static final OfShort wDay$layout() {
        return wDay$LAYOUT;
    }

    private static final long wDay$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wDay
     * }
     */
    public static final long wDay$offset() {
        return wDay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wDay
     * }
     */
    public static short wDay(MemorySegment struct) {
        return struct.get(wDay$LAYOUT, wDay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wDay
     * }
     */
    public static void wDay(MemorySegment struct, short fieldValue) {
        struct.set(wDay$LAYOUT, wDay$OFFSET, fieldValue);
    }

    private static final OfShort wHour$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wHour"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wHour
     * }
     */
    public static final OfShort wHour$layout() {
        return wHour$LAYOUT;
    }

    private static final long wHour$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wHour
     * }
     */
    public static final long wHour$offset() {
        return wHour$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wHour
     * }
     */
    public static short wHour(MemorySegment struct) {
        return struct.get(wHour$LAYOUT, wHour$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wHour
     * }
     */
    public static void wHour(MemorySegment struct, short fieldValue) {
        struct.set(wHour$LAYOUT, wHour$OFFSET, fieldValue);
    }

    private static final OfShort wMinute$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wMinute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wMinute
     * }
     */
    public static final OfShort wMinute$layout() {
        return wMinute$LAYOUT;
    }

    private static final long wMinute$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wMinute
     * }
     */
    public static final long wMinute$offset() {
        return wMinute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wMinute
     * }
     */
    public static short wMinute(MemorySegment struct) {
        return struct.get(wMinute$LAYOUT, wMinute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wMinute
     * }
     */
    public static void wMinute(MemorySegment struct, short fieldValue) {
        struct.set(wMinute$LAYOUT, wMinute$OFFSET, fieldValue);
    }

    private static final OfShort wSecond$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wSecond"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wSecond
     * }
     */
    public static final OfShort wSecond$layout() {
        return wSecond$LAYOUT;
    }

    private static final long wSecond$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wSecond
     * }
     */
    public static final long wSecond$offset() {
        return wSecond$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wSecond
     * }
     */
    public static short wSecond(MemorySegment struct) {
        return struct.get(wSecond$LAYOUT, wSecond$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wSecond
     * }
     */
    public static void wSecond(MemorySegment struct, short fieldValue) {
        struct.set(wSecond$LAYOUT, wSecond$OFFSET, fieldValue);
    }

    private static final OfShort wMilliseconds$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wMilliseconds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wMilliseconds
     * }
     */
    public static final OfShort wMilliseconds$layout() {
        return wMilliseconds$LAYOUT;
    }

    private static final long wMilliseconds$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wMilliseconds
     * }
     */
    public static final long wMilliseconds$offset() {
        return wMilliseconds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wMilliseconds
     * }
     */
    public static short wMilliseconds(MemorySegment struct) {
        return struct.get(wMilliseconds$LAYOUT, wMilliseconds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wMilliseconds
     * }
     */
    public static void wMilliseconds(MemorySegment struct, short fieldValue) {
        struct.set(wMilliseconds$LAYOUT, wMilliseconds$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

