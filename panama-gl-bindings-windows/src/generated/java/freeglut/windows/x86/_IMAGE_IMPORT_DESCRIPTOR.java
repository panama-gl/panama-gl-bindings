// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_IMPORT_DESCRIPTOR {
 *     union {
 *         DWORD Characteristics;
 *         DWORD OriginalFirstThunk;
 *     };
 *     DWORD TimeDateStamp;
 *     DWORD ForwarderChain;
 *     DWORD Name;
 *     DWORD FirstThunk;
 * }
 * }
 */
public class _IMAGE_IMPORT_DESCRIPTOR {

    _IMAGE_IMPORT_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            freeglut_h.C_LONG.withName("Characteristics"),
            freeglut_h.C_LONG.withName("OriginalFirstThunk")
        ).withName("$anon$18298:5"),
        freeglut_h.C_LONG.withName("TimeDateStamp"),
        freeglut_h.C_LONG.withName("ForwarderChain"),
        freeglut_h.C_LONG.withName("Name"),
        freeglut_h.C_LONG.withName("FirstThunk")
    ).withName("_IMAGE_IMPORT_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Characteristics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$18298:5"), groupElement("Characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final OfInt Characteristics$layout() {
        return Characteristics$LAYOUT;
    }

    private static final long Characteristics$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final long Characteristics$offset() {
        return Characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static int Characteristics(MemorySegment struct) {
        return struct.get(Characteristics$LAYOUT, Characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static void Characteristics(MemorySegment struct, int fieldValue) {
        struct.set(Characteristics$LAYOUT, Characteristics$OFFSET, fieldValue);
    }

    private static final OfInt OriginalFirstThunk$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$18298:5"), groupElement("OriginalFirstThunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OriginalFirstThunk
     * }
     */
    public static final OfInt OriginalFirstThunk$layout() {
        return OriginalFirstThunk$LAYOUT;
    }

    private static final long OriginalFirstThunk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OriginalFirstThunk
     * }
     */
    public static final long OriginalFirstThunk$offset() {
        return OriginalFirstThunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OriginalFirstThunk
     * }
     */
    public static int OriginalFirstThunk(MemorySegment struct) {
        return struct.get(OriginalFirstThunk$LAYOUT, OriginalFirstThunk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OriginalFirstThunk
     * }
     */
    public static void OriginalFirstThunk(MemorySegment struct, int fieldValue) {
        struct.set(OriginalFirstThunk$LAYOUT, OriginalFirstThunk$OFFSET, fieldValue);
    }

    private static final OfInt TimeDateStamp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TimeDateStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final OfInt TimeDateStamp$layout() {
        return TimeDateStamp$LAYOUT;
    }

    private static final long TimeDateStamp$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final long TimeDateStamp$offset() {
        return TimeDateStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static int TimeDateStamp(MemorySegment struct) {
        return struct.get(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static void TimeDateStamp(MemorySegment struct, int fieldValue) {
        struct.set(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET, fieldValue);
    }

    private static final OfInt ForwarderChain$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ForwarderChain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ForwarderChain
     * }
     */
    public static final OfInt ForwarderChain$layout() {
        return ForwarderChain$LAYOUT;
    }

    private static final long ForwarderChain$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ForwarderChain
     * }
     */
    public static final long ForwarderChain$offset() {
        return ForwarderChain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ForwarderChain
     * }
     */
    public static int ForwarderChain(MemorySegment struct) {
        return struct.get(ForwarderChain$LAYOUT, ForwarderChain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ForwarderChain
     * }
     */
    public static void ForwarderChain(MemorySegment struct, int fieldValue) {
        struct.set(ForwarderChain$LAYOUT, ForwarderChain$OFFSET, fieldValue);
    }

    private static final OfInt Name$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static final OfInt Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static int Name(MemorySegment struct) {
        return struct.get(Name$LAYOUT, Name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Name
     * }
     */
    public static void Name(MemorySegment struct, int fieldValue) {
        struct.set(Name$LAYOUT, Name$OFFSET, fieldValue);
    }

    private static final OfInt FirstThunk$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FirstThunk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD FirstThunk
     * }
     */
    public static final OfInt FirstThunk$layout() {
        return FirstThunk$LAYOUT;
    }

    private static final long FirstThunk$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD FirstThunk
     * }
     */
    public static final long FirstThunk$offset() {
        return FirstThunk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD FirstThunk
     * }
     */
    public static int FirstThunk(MemorySegment struct) {
        return struct.get(FirstThunk$LAYOUT, FirstThunk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD FirstThunk
     * }
     */
    public static void FirstThunk(MemorySegment struct, int fieldValue) {
        struct.set(FirstThunk$LAYOUT, FirstThunk$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

