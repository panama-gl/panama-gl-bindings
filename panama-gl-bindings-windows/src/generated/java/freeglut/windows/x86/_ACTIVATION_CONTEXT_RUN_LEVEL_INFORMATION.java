// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
 *     DWORD ulFlags;
 *     ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
 *     DWORD UiAccess;
 * }
 * }
 */
public class _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {

    _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("ulFlags"),
        freeglut_h.C_INT.withName("RunLevel"),
        freeglut_h.C_LONG.withName("UiAccess")
    ).withName("_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ulFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ulFlags
     * }
     */
    public static final OfInt ulFlags$layout() {
        return ulFlags$LAYOUT;
    }

    private static final long ulFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ulFlags
     * }
     */
    public static final long ulFlags$offset() {
        return ulFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ulFlags
     * }
     */
    public static int ulFlags(MemorySegment struct) {
        return struct.get(ulFlags$LAYOUT, ulFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ulFlags
     * }
     */
    public static void ulFlags(MemorySegment struct, int fieldValue) {
        struct.set(ulFlags$LAYOUT, ulFlags$OFFSET, fieldValue);
    }

    private static final OfInt RunLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RunLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ACTCTX_REQUESTED_RUN_LEVEL RunLevel
     * }
     */
    public static final OfInt RunLevel$layout() {
        return RunLevel$LAYOUT;
    }

    private static final long RunLevel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ACTCTX_REQUESTED_RUN_LEVEL RunLevel
     * }
     */
    public static final long RunLevel$offset() {
        return RunLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ACTCTX_REQUESTED_RUN_LEVEL RunLevel
     * }
     */
    public static int RunLevel(MemorySegment struct) {
        return struct.get(RunLevel$LAYOUT, RunLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ACTCTX_REQUESTED_RUN_LEVEL RunLevel
     * }
     */
    public static void RunLevel(MemorySegment struct, int fieldValue) {
        struct.set(RunLevel$LAYOUT, RunLevel$OFFSET, fieldValue);
    }

    private static final OfInt UiAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UiAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD UiAccess
     * }
     */
    public static final OfInt UiAccess$layout() {
        return UiAccess$LAYOUT;
    }

    private static final long UiAccess$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD UiAccess
     * }
     */
    public static final long UiAccess$offset() {
        return UiAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD UiAccess
     * }
     */
    public static int UiAccess(MemorySegment struct) {
        return struct.get(UiAccess$LAYOUT, UiAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD UiAccess
     * }
     */
    public static void UiAccess(MemorySegment struct, int fieldValue) {
        struct.set(UiAccess$LAYOUT, UiAccess$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

