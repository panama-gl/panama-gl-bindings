// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$100 {

    static final  GroupLayout GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_PERF_STATE_1", constants$100.GUID_PROCESSOR_PARKING_PERF_STATE_1$LAYOUT);
    static final  GroupLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD", constants$100.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$LAYOUT);
    static final  GroupLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD", constants$100.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$LAYOUT);
    static final  GroupLayout GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD", constants$100.GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$LAYOUT);
    static final  GroupLayout GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_SOFT_PARKING_LATENCY", constants$100.GUID_PROCESSOR_SOFT_PARKING_LATENCY$LAYOUT);
    static final  GroupLayout GUID_PROCESSOR_PERF_HISTORY$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Data1"),
        Constants$root.C_SHORT$LAYOUT.withName("Data2"),
        Constants$root.C_SHORT$LAYOUT.withName("Data3"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Data4")
    ).withName("_GUID");
    static final MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT = RuntimeHelper.lookupGlobalVariable("GUID_PROCESSOR_PERF_HISTORY", constants$100.GUID_PROCESSOR_PERF_HISTORY$LAYOUT);
}


