// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagWINDOWINFO {
 *     DWORD cbSize;
 *     RECT rcWindow;
 *     RECT rcClient;
 *     DWORD dwStyle;
 *     DWORD dwExStyle;
 *     DWORD dwWindowStatus;
 *     UINT cxWindowBorders;
 *     UINT cyWindowBorders;
 *     ATOM atomWindowType;
 *     WORD wCreatorVersion;
 * }
 * }
 */
public class tagWINDOWINFO {

    tagWINDOWINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("cbSize"),
        tagRECT.layout().withName("rcWindow"),
        tagRECT.layout().withName("rcClient"),
        freeglut_h.C_LONG.withName("dwStyle"),
        freeglut_h.C_LONG.withName("dwExStyle"),
        freeglut_h.C_LONG.withName("dwWindowStatus"),
        freeglut_h.C_INT.withName("cxWindowBorders"),
        freeglut_h.C_INT.withName("cyWindowBorders"),
        freeglut_h.C_SHORT.withName("atomWindowType"),
        freeglut_h.C_SHORT.withName("wCreatorVersion")
    ).withName("tagWINDOWINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout rcWindow$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcWindow
     * }
     */
    public static final GroupLayout rcWindow$layout() {
        return rcWindow$LAYOUT;
    }

    private static final long rcWindow$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcWindow
     * }
     */
    public static final long rcWindow$offset() {
        return rcWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcWindow
     * }
     */
    public static MemorySegment rcWindow(MemorySegment struct) {
        return struct.asSlice(rcWindow$OFFSET, rcWindow$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcWindow
     * }
     */
    public static void rcWindow(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcWindow$OFFSET, rcWindow$LAYOUT.byteSize());
    }

    private static final GroupLayout rcClient$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcClient"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcClient
     * }
     */
    public static final GroupLayout rcClient$layout() {
        return rcClient$LAYOUT;
    }

    private static final long rcClient$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcClient
     * }
     */
    public static final long rcClient$offset() {
        return rcClient$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcClient
     * }
     */
    public static MemorySegment rcClient(MemorySegment struct) {
        return struct.asSlice(rcClient$OFFSET, rcClient$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcClient
     * }
     */
    public static void rcClient(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcClient$OFFSET, rcClient$LAYOUT.byteSize());
    }

    private static final OfInt dwStyle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStyle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final OfInt dwStyle$layout() {
        return dwStyle$LAYOUT;
    }

    private static final long dwStyle$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static final long dwStyle$offset() {
        return dwStyle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static int dwStyle(MemorySegment struct) {
        return struct.get(dwStyle$LAYOUT, dwStyle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStyle
     * }
     */
    public static void dwStyle(MemorySegment struct, int fieldValue) {
        struct.set(dwStyle$LAYOUT, dwStyle$OFFSET, fieldValue);
    }

    private static final OfInt dwExStyle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwExStyle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwExStyle
     * }
     */
    public static final OfInt dwExStyle$layout() {
        return dwExStyle$LAYOUT;
    }

    private static final long dwExStyle$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwExStyle
     * }
     */
    public static final long dwExStyle$offset() {
        return dwExStyle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwExStyle
     * }
     */
    public static int dwExStyle(MemorySegment struct) {
        return struct.get(dwExStyle$LAYOUT, dwExStyle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwExStyle
     * }
     */
    public static void dwExStyle(MemorySegment struct, int fieldValue) {
        struct.set(dwExStyle$LAYOUT, dwExStyle$OFFSET, fieldValue);
    }

    private static final OfInt dwWindowStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwWindowStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwWindowStatus
     * }
     */
    public static final OfInt dwWindowStatus$layout() {
        return dwWindowStatus$LAYOUT;
    }

    private static final long dwWindowStatus$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwWindowStatus
     * }
     */
    public static final long dwWindowStatus$offset() {
        return dwWindowStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwWindowStatus
     * }
     */
    public static int dwWindowStatus(MemorySegment struct) {
        return struct.get(dwWindowStatus$LAYOUT, dwWindowStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwWindowStatus
     * }
     */
    public static void dwWindowStatus(MemorySegment struct, int fieldValue) {
        struct.set(dwWindowStatus$LAYOUT, dwWindowStatus$OFFSET, fieldValue);
    }

    private static final OfInt cxWindowBorders$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cxWindowBorders"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cxWindowBorders
     * }
     */
    public static final OfInt cxWindowBorders$layout() {
        return cxWindowBorders$LAYOUT;
    }

    private static final long cxWindowBorders$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cxWindowBorders
     * }
     */
    public static final long cxWindowBorders$offset() {
        return cxWindowBorders$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cxWindowBorders
     * }
     */
    public static int cxWindowBorders(MemorySegment struct) {
        return struct.get(cxWindowBorders$LAYOUT, cxWindowBorders$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cxWindowBorders
     * }
     */
    public static void cxWindowBorders(MemorySegment struct, int fieldValue) {
        struct.set(cxWindowBorders$LAYOUT, cxWindowBorders$OFFSET, fieldValue);
    }

    private static final OfInt cyWindowBorders$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cyWindowBorders"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cyWindowBorders
     * }
     */
    public static final OfInt cyWindowBorders$layout() {
        return cyWindowBorders$LAYOUT;
    }

    private static final long cyWindowBorders$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cyWindowBorders
     * }
     */
    public static final long cyWindowBorders$offset() {
        return cyWindowBorders$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cyWindowBorders
     * }
     */
    public static int cyWindowBorders(MemorySegment struct) {
        return struct.get(cyWindowBorders$LAYOUT, cyWindowBorders$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cyWindowBorders
     * }
     */
    public static void cyWindowBorders(MemorySegment struct, int fieldValue) {
        struct.set(cyWindowBorders$LAYOUT, cyWindowBorders$OFFSET, fieldValue);
    }

    private static final OfShort atomWindowType$LAYOUT = (OfShort)$LAYOUT.select(groupElement("atomWindowType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ATOM atomWindowType
     * }
     */
    public static final OfShort atomWindowType$layout() {
        return atomWindowType$LAYOUT;
    }

    private static final long atomWindowType$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ATOM atomWindowType
     * }
     */
    public static final long atomWindowType$offset() {
        return atomWindowType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ATOM atomWindowType
     * }
     */
    public static short atomWindowType(MemorySegment struct) {
        return struct.get(atomWindowType$LAYOUT, atomWindowType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ATOM atomWindowType
     * }
     */
    public static void atomWindowType(MemorySegment struct, short fieldValue) {
        struct.set(atomWindowType$LAYOUT, atomWindowType$OFFSET, fieldValue);
    }

    private static final OfShort wCreatorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("wCreatorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD wCreatorVersion
     * }
     */
    public static final OfShort wCreatorVersion$layout() {
        return wCreatorVersion$LAYOUT;
    }

    private static final long wCreatorVersion$OFFSET = 58;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD wCreatorVersion
     * }
     */
    public static final long wCreatorVersion$offset() {
        return wCreatorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD wCreatorVersion
     * }
     */
    public static short wCreatorVersion(MemorySegment struct) {
        return struct.get(wCreatorVersion$LAYOUT, wCreatorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD wCreatorVersion
     * }
     */
    public static void wCreatorVersion(MemorySegment struct, short fieldValue) {
        struct.set(wCreatorVersion$LAYOUT, wCreatorVersion$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

