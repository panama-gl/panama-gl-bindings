// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
 *     DWORD EpilogueCount;
 *     BYTE EpilogueByteCount;
 *     BYTE BranchDescriptorElementSize;
 *     WORD BranchDescriptorCount;
 * }
 * }
 */
public class _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {

    _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.align(freeglut_h.C_LONG, 1).withName("EpilogueCount"),
        freeglut_h.C_CHAR.withName("EpilogueByteCount"),
        freeglut_h.C_CHAR.withName("BranchDescriptorElementSize"),
        freeglut_h.align(freeglut_h.C_SHORT, 1).withName("BranchDescriptorCount")
    ).withName("_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt EpilogueCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EpilogueCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD EpilogueCount
     * }
     */
    public static final OfInt EpilogueCount$layout() {
        return EpilogueCount$LAYOUT;
    }

    private static final long EpilogueCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD EpilogueCount
     * }
     */
    public static final long EpilogueCount$offset() {
        return EpilogueCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD EpilogueCount
     * }
     */
    public static int EpilogueCount(MemorySegment struct) {
        return struct.get(EpilogueCount$LAYOUT, EpilogueCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD EpilogueCount
     * }
     */
    public static void EpilogueCount(MemorySegment struct, int fieldValue) {
        struct.set(EpilogueCount$LAYOUT, EpilogueCount$OFFSET, fieldValue);
    }

    private static final OfByte EpilogueByteCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("EpilogueByteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE EpilogueByteCount
     * }
     */
    public static final OfByte EpilogueByteCount$layout() {
        return EpilogueByteCount$LAYOUT;
    }

    private static final long EpilogueByteCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE EpilogueByteCount
     * }
     */
    public static final long EpilogueByteCount$offset() {
        return EpilogueByteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE EpilogueByteCount
     * }
     */
    public static byte EpilogueByteCount(MemorySegment struct) {
        return struct.get(EpilogueByteCount$LAYOUT, EpilogueByteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE EpilogueByteCount
     * }
     */
    public static void EpilogueByteCount(MemorySegment struct, byte fieldValue) {
        struct.set(EpilogueByteCount$LAYOUT, EpilogueByteCount$OFFSET, fieldValue);
    }

    private static final OfByte BranchDescriptorElementSize$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BranchDescriptorElementSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE BranchDescriptorElementSize
     * }
     */
    public static final OfByte BranchDescriptorElementSize$layout() {
        return BranchDescriptorElementSize$LAYOUT;
    }

    private static final long BranchDescriptorElementSize$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE BranchDescriptorElementSize
     * }
     */
    public static final long BranchDescriptorElementSize$offset() {
        return BranchDescriptorElementSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE BranchDescriptorElementSize
     * }
     */
    public static byte BranchDescriptorElementSize(MemorySegment struct) {
        return struct.get(BranchDescriptorElementSize$LAYOUT, BranchDescriptorElementSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE BranchDescriptorElementSize
     * }
     */
    public static void BranchDescriptorElementSize(MemorySegment struct, byte fieldValue) {
        struct.set(BranchDescriptorElementSize$LAYOUT, BranchDescriptorElementSize$OFFSET, fieldValue);
    }

    private static final OfShort BranchDescriptorCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BranchDescriptorCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD BranchDescriptorCount
     * }
     */
    public static final OfShort BranchDescriptorCount$layout() {
        return BranchDescriptorCount$LAYOUT;
    }

    private static final long BranchDescriptorCount$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD BranchDescriptorCount
     * }
     */
    public static final long BranchDescriptorCount$offset() {
        return BranchDescriptorCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD BranchDescriptorCount
     * }
     */
    public static short BranchDescriptorCount(MemorySegment struct) {
        return struct.get(BranchDescriptorCount$LAYOUT, BranchDescriptorCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD BranchDescriptorCount
     * }
     */
    public static void BranchDescriptorCount(MemorySegment struct, short fieldValue) {
        struct.set(BranchDescriptorCount$LAYOUT, BranchDescriptorCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

