// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagXFORM {
 *     FLOAT eM11;
 *     FLOAT eM12;
 *     FLOAT eM21;
 *     FLOAT eM22;
 *     FLOAT eDx;
 *     FLOAT eDy;
 * }
 * }
 */
public class tagXFORM {

    tagXFORM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_FLOAT.withName("eM11"),
        freeglut_h.C_FLOAT.withName("eM12"),
        freeglut_h.C_FLOAT.withName("eM21"),
        freeglut_h.C_FLOAT.withName("eM22"),
        freeglut_h.C_FLOAT.withName("eDx"),
        freeglut_h.C_FLOAT.withName("eDy")
    ).withName("tagXFORM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat eM11$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eM11"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eM11
     * }
     */
    public static final OfFloat eM11$layout() {
        return eM11$LAYOUT;
    }

    private static final long eM11$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eM11
     * }
     */
    public static final long eM11$offset() {
        return eM11$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eM11
     * }
     */
    public static float eM11(MemorySegment struct) {
        return struct.get(eM11$LAYOUT, eM11$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eM11
     * }
     */
    public static void eM11(MemorySegment struct, float fieldValue) {
        struct.set(eM11$LAYOUT, eM11$OFFSET, fieldValue);
    }

    private static final OfFloat eM12$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eM12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eM12
     * }
     */
    public static final OfFloat eM12$layout() {
        return eM12$LAYOUT;
    }

    private static final long eM12$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eM12
     * }
     */
    public static final long eM12$offset() {
        return eM12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eM12
     * }
     */
    public static float eM12(MemorySegment struct) {
        return struct.get(eM12$LAYOUT, eM12$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eM12
     * }
     */
    public static void eM12(MemorySegment struct, float fieldValue) {
        struct.set(eM12$LAYOUT, eM12$OFFSET, fieldValue);
    }

    private static final OfFloat eM21$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eM21"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eM21
     * }
     */
    public static final OfFloat eM21$layout() {
        return eM21$LAYOUT;
    }

    private static final long eM21$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eM21
     * }
     */
    public static final long eM21$offset() {
        return eM21$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eM21
     * }
     */
    public static float eM21(MemorySegment struct) {
        return struct.get(eM21$LAYOUT, eM21$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eM21
     * }
     */
    public static void eM21(MemorySegment struct, float fieldValue) {
        struct.set(eM21$LAYOUT, eM21$OFFSET, fieldValue);
    }

    private static final OfFloat eM22$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eM22"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eM22
     * }
     */
    public static final OfFloat eM22$layout() {
        return eM22$LAYOUT;
    }

    private static final long eM22$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eM22
     * }
     */
    public static final long eM22$offset() {
        return eM22$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eM22
     * }
     */
    public static float eM22(MemorySegment struct) {
        return struct.get(eM22$LAYOUT, eM22$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eM22
     * }
     */
    public static void eM22(MemorySegment struct, float fieldValue) {
        struct.set(eM22$LAYOUT, eM22$OFFSET, fieldValue);
    }

    private static final OfFloat eDx$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eDx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eDx
     * }
     */
    public static final OfFloat eDx$layout() {
        return eDx$LAYOUT;
    }

    private static final long eDx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eDx
     * }
     */
    public static final long eDx$offset() {
        return eDx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eDx
     * }
     */
    public static float eDx(MemorySegment struct) {
        return struct.get(eDx$LAYOUT, eDx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eDx
     * }
     */
    public static void eDx(MemorySegment struct, float fieldValue) {
        struct.set(eDx$LAYOUT, eDx$OFFSET, fieldValue);
    }

    private static final OfFloat eDy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eDy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FLOAT eDy
     * }
     */
    public static final OfFloat eDy$layout() {
        return eDy$LAYOUT;
    }

    private static final long eDy$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FLOAT eDy
     * }
     */
    public static final long eDy$offset() {
        return eDy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FLOAT eDy
     * }
     */
    public static float eDy(MemorySegment struct) {
        return struct.get(eDy$LAYOUT, eDy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FLOAT eDy
     * }
     */
    public static void eDy(MemorySegment struct, float fieldValue) {
        struct.set(eDy$LAYOUT, eDy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

