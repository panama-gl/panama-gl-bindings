// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TAPE_SET_DRIVE_PARAMETERS {
 *     BOOLEAN ECC;
 *     BOOLEAN Compression;
 *     BOOLEAN DataPadding;
 *     BOOLEAN ReportSetmarks;
 *     DWORD EOTWarningZoneSize;
 * }
 * }
 */
public class _TAPE_SET_DRIVE_PARAMETERS {

    _TAPE_SET_DRIVE_PARAMETERS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_CHAR.withName("ECC"),
        freeglut_h.C_CHAR.withName("Compression"),
        freeglut_h.C_CHAR.withName("DataPadding"),
        freeglut_h.C_CHAR.withName("ReportSetmarks"),
        freeglut_h.C_LONG.withName("EOTWarningZoneSize")
    ).withName("_TAPE_SET_DRIVE_PARAMETERS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte ECC$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ECC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN ECC
     * }
     */
    public static final OfByte ECC$layout() {
        return ECC$LAYOUT;
    }

    private static final long ECC$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN ECC
     * }
     */
    public static final long ECC$offset() {
        return ECC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN ECC
     * }
     */
    public static byte ECC(MemorySegment struct) {
        return struct.get(ECC$LAYOUT, ECC$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN ECC
     * }
     */
    public static void ECC(MemorySegment struct, byte fieldValue) {
        struct.set(ECC$LAYOUT, ECC$OFFSET, fieldValue);
    }

    private static final OfByte Compression$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Compression"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN Compression
     * }
     */
    public static final OfByte Compression$layout() {
        return Compression$LAYOUT;
    }

    private static final long Compression$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN Compression
     * }
     */
    public static final long Compression$offset() {
        return Compression$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN Compression
     * }
     */
    public static byte Compression(MemorySegment struct) {
        return struct.get(Compression$LAYOUT, Compression$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN Compression
     * }
     */
    public static void Compression(MemorySegment struct, byte fieldValue) {
        struct.set(Compression$LAYOUT, Compression$OFFSET, fieldValue);
    }

    private static final OfByte DataPadding$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DataPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN DataPadding
     * }
     */
    public static final OfByte DataPadding$layout() {
        return DataPadding$LAYOUT;
    }

    private static final long DataPadding$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN DataPadding
     * }
     */
    public static final long DataPadding$offset() {
        return DataPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN DataPadding
     * }
     */
    public static byte DataPadding(MemorySegment struct) {
        return struct.get(DataPadding$LAYOUT, DataPadding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN DataPadding
     * }
     */
    public static void DataPadding(MemorySegment struct, byte fieldValue) {
        struct.set(DataPadding$LAYOUT, DataPadding$OFFSET, fieldValue);
    }

    private static final OfByte ReportSetmarks$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ReportSetmarks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOLEAN ReportSetmarks
     * }
     */
    public static final OfByte ReportSetmarks$layout() {
        return ReportSetmarks$LAYOUT;
    }

    private static final long ReportSetmarks$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOLEAN ReportSetmarks
     * }
     */
    public static final long ReportSetmarks$offset() {
        return ReportSetmarks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOLEAN ReportSetmarks
     * }
     */
    public static byte ReportSetmarks(MemorySegment struct) {
        return struct.get(ReportSetmarks$LAYOUT, ReportSetmarks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOLEAN ReportSetmarks
     * }
     */
    public static void ReportSetmarks(MemorySegment struct, byte fieldValue) {
        struct.set(ReportSetmarks$LAYOUT, ReportSetmarks$OFFSET, fieldValue);
    }

    private static final OfInt EOTWarningZoneSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EOTWarningZoneSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD EOTWarningZoneSize
     * }
     */
    public static final OfInt EOTWarningZoneSize$layout() {
        return EOTWarningZoneSize$LAYOUT;
    }

    private static final long EOTWarningZoneSize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD EOTWarningZoneSize
     * }
     */
    public static final long EOTWarningZoneSize$offset() {
        return EOTWarningZoneSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD EOTWarningZoneSize
     * }
     */
    public static int EOTWarningZoneSize(MemorySegment struct) {
        return struct.get(EOTWarningZoneSize$LAYOUT, EOTWarningZoneSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD EOTWarningZoneSize
     * }
     */
    public static void EOTWarningZoneSize(MemorySegment struct, int fieldValue) {
        struct.set(EOTWarningZoneSize$LAYOUT, EOTWarningZoneSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

