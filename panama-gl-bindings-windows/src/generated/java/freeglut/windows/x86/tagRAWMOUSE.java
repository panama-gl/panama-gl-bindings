// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagRAWMOUSE {
 *     USHORT usFlags;
 *     union {
 *         ULONG ulButtons;
 *         struct {
 *             USHORT usButtonFlags;
 *             USHORT usButtonData;
 *         };
 *     };
 *     ULONG ulRawButtons;
 *     LONG lLastX;
 *     LONG lLastY;
 *     ULONG ulExtraInformation;
 * }
 * }
 */
public class tagRAWMOUSE {

    tagRAWMOUSE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_SHORT.withName("usFlags"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.unionLayout(
            freeglut_h.C_LONG.withName("ulButtons"),
            MemoryLayout.structLayout(
                freeglut_h.C_SHORT.withName("usButtonFlags"),
                freeglut_h.C_SHORT.withName("usButtonData")
            ).withName("$anon$14916:9")
        ).withName("$anon$14914:5"),
        freeglut_h.C_LONG.withName("ulRawButtons"),
        freeglut_h.C_LONG.withName("lLastX"),
        freeglut_h.C_LONG.withName("lLastY"),
        freeglut_h.C_LONG.withName("ulExtraInformation")
    ).withName("tagRAWMOUSE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort usFlags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("usFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT usFlags
     * }
     */
    public static final OfShort usFlags$layout() {
        return usFlags$LAYOUT;
    }

    private static final long usFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT usFlags
     * }
     */
    public static final long usFlags$offset() {
        return usFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT usFlags
     * }
     */
    public static short usFlags(MemorySegment struct) {
        return struct.get(usFlags$LAYOUT, usFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT usFlags
     * }
     */
    public static void usFlags(MemorySegment struct, short fieldValue) {
        struct.set(usFlags$LAYOUT, usFlags$OFFSET, fieldValue);
    }

    private static final OfInt ulButtons$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$14914:5"), groupElement("ulButtons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulButtons
     * }
     */
    public static final OfInt ulButtons$layout() {
        return ulButtons$LAYOUT;
    }

    private static final long ulButtons$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulButtons
     * }
     */
    public static final long ulButtons$offset() {
        return ulButtons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulButtons
     * }
     */
    public static int ulButtons(MemorySegment struct) {
        return struct.get(ulButtons$LAYOUT, ulButtons$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulButtons
     * }
     */
    public static void ulButtons(MemorySegment struct, int fieldValue) {
        struct.set(ulButtons$LAYOUT, ulButtons$OFFSET, fieldValue);
    }

    private static final OfShort usButtonFlags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$14914:5"), groupElement("$anon$14916:9"), groupElement("usButtonFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT usButtonFlags
     * }
     */
    public static final OfShort usButtonFlags$layout() {
        return usButtonFlags$LAYOUT;
    }

    private static final long usButtonFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT usButtonFlags
     * }
     */
    public static final long usButtonFlags$offset() {
        return usButtonFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT usButtonFlags
     * }
     */
    public static short usButtonFlags(MemorySegment struct) {
        return struct.get(usButtonFlags$LAYOUT, usButtonFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT usButtonFlags
     * }
     */
    public static void usButtonFlags(MemorySegment struct, short fieldValue) {
        struct.set(usButtonFlags$LAYOUT, usButtonFlags$OFFSET, fieldValue);
    }

    private static final OfShort usButtonData$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$14914:5"), groupElement("$anon$14916:9"), groupElement("usButtonData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USHORT usButtonData
     * }
     */
    public static final OfShort usButtonData$layout() {
        return usButtonData$LAYOUT;
    }

    private static final long usButtonData$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USHORT usButtonData
     * }
     */
    public static final long usButtonData$offset() {
        return usButtonData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USHORT usButtonData
     * }
     */
    public static short usButtonData(MemorySegment struct) {
        return struct.get(usButtonData$LAYOUT, usButtonData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USHORT usButtonData
     * }
     */
    public static void usButtonData(MemorySegment struct, short fieldValue) {
        struct.set(usButtonData$LAYOUT, usButtonData$OFFSET, fieldValue);
    }

    private static final OfInt ulRawButtons$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulRawButtons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulRawButtons
     * }
     */
    public static final OfInt ulRawButtons$layout() {
        return ulRawButtons$LAYOUT;
    }

    private static final long ulRawButtons$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulRawButtons
     * }
     */
    public static final long ulRawButtons$offset() {
        return ulRawButtons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulRawButtons
     * }
     */
    public static int ulRawButtons(MemorySegment struct) {
        return struct.get(ulRawButtons$LAYOUT, ulRawButtons$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulRawButtons
     * }
     */
    public static void ulRawButtons(MemorySegment struct, int fieldValue) {
        struct.set(ulRawButtons$LAYOUT, ulRawButtons$OFFSET, fieldValue);
    }

    private static final OfInt lLastX$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lLastX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lLastX
     * }
     */
    public static final OfInt lLastX$layout() {
        return lLastX$LAYOUT;
    }

    private static final long lLastX$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lLastX
     * }
     */
    public static final long lLastX$offset() {
        return lLastX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lLastX
     * }
     */
    public static int lLastX(MemorySegment struct) {
        return struct.get(lLastX$LAYOUT, lLastX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lLastX
     * }
     */
    public static void lLastX(MemorySegment struct, int fieldValue) {
        struct.set(lLastX$LAYOUT, lLastX$OFFSET, fieldValue);
    }

    private static final OfInt lLastY$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lLastY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lLastY
     * }
     */
    public static final OfInt lLastY$layout() {
        return lLastY$LAYOUT;
    }

    private static final long lLastY$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lLastY
     * }
     */
    public static final long lLastY$offset() {
        return lLastY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lLastY
     * }
     */
    public static int lLastY(MemorySegment struct) {
        return struct.get(lLastY$LAYOUT, lLastY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lLastY
     * }
     */
    public static void lLastY(MemorySegment struct, int fieldValue) {
        struct.set(lLastY$LAYOUT, lLastY$OFFSET, fieldValue);
    }

    private static final OfInt ulExtraInformation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulExtraInformation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulExtraInformation
     * }
     */
    public static final OfInt ulExtraInformation$layout() {
        return ulExtraInformation$LAYOUT;
    }

    private static final long ulExtraInformation$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulExtraInformation
     * }
     */
    public static final long ulExtraInformation$offset() {
        return ulExtraInformation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulExtraInformation
     * }
     */
    public static int ulExtraInformation(MemorySegment struct) {
        return struct.get(ulExtraInformation$LAYOUT, ulExtraInformation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulExtraInformation
     * }
     */
    public static void ulExtraInformation(MemorySegment struct, int fieldValue) {
        struct.set(ulExtraInformation$LAYOUT, ulExtraInformation$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

