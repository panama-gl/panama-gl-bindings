// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IO_COUNTERS {
 *     ULONGLONG ReadOperationCount;
 *     ULONGLONG WriteOperationCount;
 *     ULONGLONG OtherOperationCount;
 *     ULONGLONG ReadTransferCount;
 *     ULONGLONG WriteTransferCount;
 *     ULONGLONG OtherTransferCount;
 * }
 * }
 */
public class _IO_COUNTERS {

    _IO_COUNTERS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG_LONG.withName("ReadOperationCount"),
        freeglut_h.C_LONG_LONG.withName("WriteOperationCount"),
        freeglut_h.C_LONG_LONG.withName("OtherOperationCount"),
        freeglut_h.C_LONG_LONG.withName("ReadTransferCount"),
        freeglut_h.C_LONG_LONG.withName("WriteTransferCount"),
        freeglut_h.C_LONG_LONG.withName("OtherTransferCount")
    ).withName("_IO_COUNTERS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong ReadOperationCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ReadOperationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ReadOperationCount
     * }
     */
    public static final OfLong ReadOperationCount$layout() {
        return ReadOperationCount$LAYOUT;
    }

    private static final long ReadOperationCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ReadOperationCount
     * }
     */
    public static final long ReadOperationCount$offset() {
        return ReadOperationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ReadOperationCount
     * }
     */
    public static long ReadOperationCount(MemorySegment struct) {
        return struct.get(ReadOperationCount$LAYOUT, ReadOperationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ReadOperationCount
     * }
     */
    public static void ReadOperationCount(MemorySegment struct, long fieldValue) {
        struct.set(ReadOperationCount$LAYOUT, ReadOperationCount$OFFSET, fieldValue);
    }

    private static final OfLong WriteOperationCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("WriteOperationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG WriteOperationCount
     * }
     */
    public static final OfLong WriteOperationCount$layout() {
        return WriteOperationCount$LAYOUT;
    }

    private static final long WriteOperationCount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG WriteOperationCount
     * }
     */
    public static final long WriteOperationCount$offset() {
        return WriteOperationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG WriteOperationCount
     * }
     */
    public static long WriteOperationCount(MemorySegment struct) {
        return struct.get(WriteOperationCount$LAYOUT, WriteOperationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG WriteOperationCount
     * }
     */
    public static void WriteOperationCount(MemorySegment struct, long fieldValue) {
        struct.set(WriteOperationCount$LAYOUT, WriteOperationCount$OFFSET, fieldValue);
    }

    private static final OfLong OtherOperationCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("OtherOperationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG OtherOperationCount
     * }
     */
    public static final OfLong OtherOperationCount$layout() {
        return OtherOperationCount$LAYOUT;
    }

    private static final long OtherOperationCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG OtherOperationCount
     * }
     */
    public static final long OtherOperationCount$offset() {
        return OtherOperationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG OtherOperationCount
     * }
     */
    public static long OtherOperationCount(MemorySegment struct) {
        return struct.get(OtherOperationCount$LAYOUT, OtherOperationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG OtherOperationCount
     * }
     */
    public static void OtherOperationCount(MemorySegment struct, long fieldValue) {
        struct.set(OtherOperationCount$LAYOUT, OtherOperationCount$OFFSET, fieldValue);
    }

    private static final OfLong ReadTransferCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ReadTransferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ReadTransferCount
     * }
     */
    public static final OfLong ReadTransferCount$layout() {
        return ReadTransferCount$LAYOUT;
    }

    private static final long ReadTransferCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ReadTransferCount
     * }
     */
    public static final long ReadTransferCount$offset() {
        return ReadTransferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ReadTransferCount
     * }
     */
    public static long ReadTransferCount(MemorySegment struct) {
        return struct.get(ReadTransferCount$LAYOUT, ReadTransferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ReadTransferCount
     * }
     */
    public static void ReadTransferCount(MemorySegment struct, long fieldValue) {
        struct.set(ReadTransferCount$LAYOUT, ReadTransferCount$OFFSET, fieldValue);
    }

    private static final OfLong WriteTransferCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("WriteTransferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG WriteTransferCount
     * }
     */
    public static final OfLong WriteTransferCount$layout() {
        return WriteTransferCount$LAYOUT;
    }

    private static final long WriteTransferCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG WriteTransferCount
     * }
     */
    public static final long WriteTransferCount$offset() {
        return WriteTransferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG WriteTransferCount
     * }
     */
    public static long WriteTransferCount(MemorySegment struct) {
        return struct.get(WriteTransferCount$LAYOUT, WriteTransferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG WriteTransferCount
     * }
     */
    public static void WriteTransferCount(MemorySegment struct, long fieldValue) {
        struct.set(WriteTransferCount$LAYOUT, WriteTransferCount$OFFSET, fieldValue);
    }

    private static final OfLong OtherTransferCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("OtherTransferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG OtherTransferCount
     * }
     */
    public static final OfLong OtherTransferCount$layout() {
        return OtherTransferCount$LAYOUT;
    }

    private static final long OtherTransferCount$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG OtherTransferCount
     * }
     */
    public static final long OtherTransferCount$offset() {
        return OtherTransferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG OtherTransferCount
     * }
     */
    public static long OtherTransferCount(MemorySegment struct) {
        return struct.get(OtherTransferCount$LAYOUT, OtherTransferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG OtherTransferCount
     * }
     */
    public static void OtherTransferCount(MemorySegment struct, long fieldValue) {
        struct.set(OtherTransferCount$LAYOUT, OtherTransferCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

