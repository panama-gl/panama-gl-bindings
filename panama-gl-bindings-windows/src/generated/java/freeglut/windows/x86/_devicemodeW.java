// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _devicemodeW {
 *     WCHAR dmDeviceName[32];
 *     WORD dmSpecVersion;
 *     WORD dmDriverVersion;
 *     WORD dmSize;
 *     WORD dmDriverExtra;
 *     DWORD dmFields;
 *     union {
 *         struct {
 *             short dmOrientation;
 *             short dmPaperSize;
 *             short dmPaperLength;
 *             short dmPaperWidth;
 *             short dmScale;
 *             short dmCopies;
 *             short dmDefaultSource;
 *             short dmPrintQuality;
 *         };
 *         struct {
 *             POINTL dmPosition;
 *             DWORD dmDisplayOrientation;
 *             DWORD dmDisplayFixedOutput;
 *         };
 *     };
 *     short dmColor;
 *     short dmDuplex;
 *     short dmYResolution;
 *     short dmTTOption;
 *     short dmCollate;
 *     WCHAR dmFormName[32];
 *     WORD dmLogPixels;
 *     DWORD dmBitsPerPel;
 *     DWORD dmPelsWidth;
 *     DWORD dmPelsHeight;
 *     union {
 *         DWORD dmDisplayFlags;
 *         DWORD dmNup;
 *     };
 *     DWORD dmDisplayFrequency;
 *     DWORD dmICMMethod;
 *     DWORD dmICMIntent;
 *     DWORD dmMediaType;
 *     DWORD dmDitherType;
 *     DWORD dmReserved1;
 *     DWORD dmReserved2;
 *     DWORD dmPanningWidth;
 *     DWORD dmPanningHeight;
 * }
 * }
 */
public class _devicemodeW {

    _devicemodeW() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(32, freeglut_h.C_SHORT).withName("dmDeviceName"),
        freeglut_h.C_SHORT.withName("dmSpecVersion"),
        freeglut_h.C_SHORT.withName("dmDriverVersion"),
        freeglut_h.C_SHORT.withName("dmSize"),
        freeglut_h.C_SHORT.withName("dmDriverExtra"),
        freeglut_h.C_LONG.withName("dmFields"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                freeglut_h.C_SHORT.withName("dmOrientation"),
                freeglut_h.C_SHORT.withName("dmPaperSize"),
                freeglut_h.C_SHORT.withName("dmPaperLength"),
                freeglut_h.C_SHORT.withName("dmPaperWidth"),
                freeglut_h.C_SHORT.withName("dmScale"),
                freeglut_h.C_SHORT.withName("dmCopies"),
                freeglut_h.C_SHORT.withName("dmDefaultSource"),
                freeglut_h.C_SHORT.withName("dmPrintQuality")
            ).withName("$anon$2258:7"),
            MemoryLayout.structLayout(
                _POINTL.layout().withName("dmPosition"),
                freeglut_h.C_LONG.withName("dmDisplayOrientation"),
                freeglut_h.C_LONG.withName("dmDisplayFixedOutput")
            ).withName("$anon$2269:7")
        ).withName("$anon$2256:5"),
        freeglut_h.C_SHORT.withName("dmColor"),
        freeglut_h.C_SHORT.withName("dmDuplex"),
        freeglut_h.C_SHORT.withName("dmYResolution"),
        freeglut_h.C_SHORT.withName("dmTTOption"),
        freeglut_h.C_SHORT.withName("dmCollate"),
        MemoryLayout.sequenceLayout(32, freeglut_h.C_SHORT).withName("dmFormName"),
        freeglut_h.C_SHORT.withName("dmLogPixels"),
        freeglut_h.C_LONG.withName("dmBitsPerPel"),
        freeglut_h.C_LONG.withName("dmPelsWidth"),
        freeglut_h.C_LONG.withName("dmPelsHeight"),
        MemoryLayout.unionLayout(
            freeglut_h.C_LONG.withName("dmDisplayFlags"),
            freeglut_h.C_LONG.withName("dmNup")
        ).withName("$anon$2285:5"),
        freeglut_h.C_LONG.withName("dmDisplayFrequency"),
        freeglut_h.C_LONG.withName("dmICMMethod"),
        freeglut_h.C_LONG.withName("dmICMIntent"),
        freeglut_h.C_LONG.withName("dmMediaType"),
        freeglut_h.C_LONG.withName("dmDitherType"),
        freeglut_h.C_LONG.withName("dmReserved1"),
        freeglut_h.C_LONG.withName("dmReserved2"),
        freeglut_h.C_LONG.withName("dmPanningWidth"),
        freeglut_h.C_LONG.withName("dmPanningHeight")
    ).withName("_devicemodeW");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout dmDeviceName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dmDeviceName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static final SequenceLayout dmDeviceName$layout() {
        return dmDeviceName$LAYOUT;
    }

    private static final long dmDeviceName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static final long dmDeviceName$offset() {
        return dmDeviceName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static MemorySegment dmDeviceName(MemorySegment struct) {
        return struct.asSlice(dmDeviceName$OFFSET, dmDeviceName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static void dmDeviceName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dmDeviceName$OFFSET, dmDeviceName$LAYOUT.byteSize());
    }

    private static long[] dmDeviceName$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static long[] dmDeviceName$dimensions() {
        return dmDeviceName$DIMS;
    }
    private static final VarHandle dmDeviceName$ELEM_HANDLE = dmDeviceName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static short dmDeviceName(MemorySegment struct, long index0) {
        return (short)dmDeviceName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR dmDeviceName[32]
     * }
     */
    public static void dmDeviceName(MemorySegment struct, long index0, short fieldValue) {
        dmDeviceName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort dmSpecVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmSpecVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD dmSpecVersion
     * }
     */
    public static final OfShort dmSpecVersion$layout() {
        return dmSpecVersion$LAYOUT;
    }

    private static final long dmSpecVersion$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD dmSpecVersion
     * }
     */
    public static final long dmSpecVersion$offset() {
        return dmSpecVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD dmSpecVersion
     * }
     */
    public static short dmSpecVersion(MemorySegment struct) {
        return struct.get(dmSpecVersion$LAYOUT, dmSpecVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD dmSpecVersion
     * }
     */
    public static void dmSpecVersion(MemorySegment struct, short fieldValue) {
        struct.set(dmSpecVersion$LAYOUT, dmSpecVersion$OFFSET, fieldValue);
    }

    private static final OfShort dmDriverVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmDriverVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD dmDriverVersion
     * }
     */
    public static final OfShort dmDriverVersion$layout() {
        return dmDriverVersion$LAYOUT;
    }

    private static final long dmDriverVersion$OFFSET = 66;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD dmDriverVersion
     * }
     */
    public static final long dmDriverVersion$offset() {
        return dmDriverVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD dmDriverVersion
     * }
     */
    public static short dmDriverVersion(MemorySegment struct) {
        return struct.get(dmDriverVersion$LAYOUT, dmDriverVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD dmDriverVersion
     * }
     */
    public static void dmDriverVersion(MemorySegment struct, short fieldValue) {
        struct.set(dmDriverVersion$LAYOUT, dmDriverVersion$OFFSET, fieldValue);
    }

    private static final OfShort dmSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD dmSize
     * }
     */
    public static final OfShort dmSize$layout() {
        return dmSize$LAYOUT;
    }

    private static final long dmSize$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD dmSize
     * }
     */
    public static final long dmSize$offset() {
        return dmSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD dmSize
     * }
     */
    public static short dmSize(MemorySegment struct) {
        return struct.get(dmSize$LAYOUT, dmSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD dmSize
     * }
     */
    public static void dmSize(MemorySegment struct, short fieldValue) {
        struct.set(dmSize$LAYOUT, dmSize$OFFSET, fieldValue);
    }

    private static final OfShort dmDriverExtra$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmDriverExtra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD dmDriverExtra
     * }
     */
    public static final OfShort dmDriverExtra$layout() {
        return dmDriverExtra$LAYOUT;
    }

    private static final long dmDriverExtra$OFFSET = 70;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD dmDriverExtra
     * }
     */
    public static final long dmDriverExtra$offset() {
        return dmDriverExtra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD dmDriverExtra
     * }
     */
    public static short dmDriverExtra(MemorySegment struct) {
        return struct.get(dmDriverExtra$LAYOUT, dmDriverExtra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD dmDriverExtra
     * }
     */
    public static void dmDriverExtra(MemorySegment struct, short fieldValue) {
        struct.set(dmDriverExtra$LAYOUT, dmDriverExtra$OFFSET, fieldValue);
    }

    private static final OfInt dmFields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmFields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmFields
     * }
     */
    public static final OfInt dmFields$layout() {
        return dmFields$LAYOUT;
    }

    private static final long dmFields$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmFields
     * }
     */
    public static final long dmFields$offset() {
        return dmFields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmFields
     * }
     */
    public static int dmFields(MemorySegment struct) {
        return struct.get(dmFields$LAYOUT, dmFields$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmFields
     * }
     */
    public static void dmFields(MemorySegment struct, int fieldValue) {
        struct.set(dmFields$LAYOUT, dmFields$OFFSET, fieldValue);
    }

    private static final OfShort dmOrientation$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmOrientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmOrientation
     * }
     */
    public static final OfShort dmOrientation$layout() {
        return dmOrientation$LAYOUT;
    }

    private static final long dmOrientation$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmOrientation
     * }
     */
    public static final long dmOrientation$offset() {
        return dmOrientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmOrientation
     * }
     */
    public static short dmOrientation(MemorySegment struct) {
        return struct.get(dmOrientation$LAYOUT, dmOrientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmOrientation
     * }
     */
    public static void dmOrientation(MemorySegment struct, short fieldValue) {
        struct.set(dmOrientation$LAYOUT, dmOrientation$OFFSET, fieldValue);
    }

    private static final OfShort dmPaperSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmPaperSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmPaperSize
     * }
     */
    public static final OfShort dmPaperSize$layout() {
        return dmPaperSize$LAYOUT;
    }

    private static final long dmPaperSize$OFFSET = 78;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmPaperSize
     * }
     */
    public static final long dmPaperSize$offset() {
        return dmPaperSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmPaperSize
     * }
     */
    public static short dmPaperSize(MemorySegment struct) {
        return struct.get(dmPaperSize$LAYOUT, dmPaperSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmPaperSize
     * }
     */
    public static void dmPaperSize(MemorySegment struct, short fieldValue) {
        struct.set(dmPaperSize$LAYOUT, dmPaperSize$OFFSET, fieldValue);
    }

    private static final OfShort dmPaperLength$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmPaperLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmPaperLength
     * }
     */
    public static final OfShort dmPaperLength$layout() {
        return dmPaperLength$LAYOUT;
    }

    private static final long dmPaperLength$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmPaperLength
     * }
     */
    public static final long dmPaperLength$offset() {
        return dmPaperLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmPaperLength
     * }
     */
    public static short dmPaperLength(MemorySegment struct) {
        return struct.get(dmPaperLength$LAYOUT, dmPaperLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmPaperLength
     * }
     */
    public static void dmPaperLength(MemorySegment struct, short fieldValue) {
        struct.set(dmPaperLength$LAYOUT, dmPaperLength$OFFSET, fieldValue);
    }

    private static final OfShort dmPaperWidth$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmPaperWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmPaperWidth
     * }
     */
    public static final OfShort dmPaperWidth$layout() {
        return dmPaperWidth$LAYOUT;
    }

    private static final long dmPaperWidth$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmPaperWidth
     * }
     */
    public static final long dmPaperWidth$offset() {
        return dmPaperWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmPaperWidth
     * }
     */
    public static short dmPaperWidth(MemorySegment struct) {
        return struct.get(dmPaperWidth$LAYOUT, dmPaperWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmPaperWidth
     * }
     */
    public static void dmPaperWidth(MemorySegment struct, short fieldValue) {
        struct.set(dmPaperWidth$LAYOUT, dmPaperWidth$OFFSET, fieldValue);
    }

    private static final OfShort dmScale$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmScale
     * }
     */
    public static final OfShort dmScale$layout() {
        return dmScale$LAYOUT;
    }

    private static final long dmScale$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmScale
     * }
     */
    public static final long dmScale$offset() {
        return dmScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmScale
     * }
     */
    public static short dmScale(MemorySegment struct) {
        return struct.get(dmScale$LAYOUT, dmScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmScale
     * }
     */
    public static void dmScale(MemorySegment struct, short fieldValue) {
        struct.set(dmScale$LAYOUT, dmScale$OFFSET, fieldValue);
    }

    private static final OfShort dmCopies$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmCopies"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmCopies
     * }
     */
    public static final OfShort dmCopies$layout() {
        return dmCopies$LAYOUT;
    }

    private static final long dmCopies$OFFSET = 86;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmCopies
     * }
     */
    public static final long dmCopies$offset() {
        return dmCopies$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmCopies
     * }
     */
    public static short dmCopies(MemorySegment struct) {
        return struct.get(dmCopies$LAYOUT, dmCopies$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmCopies
     * }
     */
    public static void dmCopies(MemorySegment struct, short fieldValue) {
        struct.set(dmCopies$LAYOUT, dmCopies$OFFSET, fieldValue);
    }

    private static final OfShort dmDefaultSource$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmDefaultSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmDefaultSource
     * }
     */
    public static final OfShort dmDefaultSource$layout() {
        return dmDefaultSource$LAYOUT;
    }

    private static final long dmDefaultSource$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmDefaultSource
     * }
     */
    public static final long dmDefaultSource$offset() {
        return dmDefaultSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmDefaultSource
     * }
     */
    public static short dmDefaultSource(MemorySegment struct) {
        return struct.get(dmDefaultSource$LAYOUT, dmDefaultSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmDefaultSource
     * }
     */
    public static void dmDefaultSource(MemorySegment struct, short fieldValue) {
        struct.set(dmDefaultSource$LAYOUT, dmDefaultSource$OFFSET, fieldValue);
    }

    private static final OfShort dmPrintQuality$LAYOUT = (OfShort)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2258:7"), groupElement("dmPrintQuality"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmPrintQuality
     * }
     */
    public static final OfShort dmPrintQuality$layout() {
        return dmPrintQuality$LAYOUT;
    }

    private static final long dmPrintQuality$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmPrintQuality
     * }
     */
    public static final long dmPrintQuality$offset() {
        return dmPrintQuality$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmPrintQuality
     * }
     */
    public static short dmPrintQuality(MemorySegment struct) {
        return struct.get(dmPrintQuality$LAYOUT, dmPrintQuality$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmPrintQuality
     * }
     */
    public static void dmPrintQuality(MemorySegment struct, short fieldValue) {
        struct.set(dmPrintQuality$LAYOUT, dmPrintQuality$OFFSET, fieldValue);
    }

    private static final GroupLayout dmPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2269:7"), groupElement("dmPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * POINTL dmPosition
     * }
     */
    public static final GroupLayout dmPosition$layout() {
        return dmPosition$LAYOUT;
    }

    private static final long dmPosition$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * POINTL dmPosition
     * }
     */
    public static final long dmPosition$offset() {
        return dmPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * POINTL dmPosition
     * }
     */
    public static MemorySegment dmPosition(MemorySegment struct) {
        return struct.asSlice(dmPosition$OFFSET, dmPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * POINTL dmPosition
     * }
     */
    public static void dmPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dmPosition$OFFSET, dmPosition$LAYOUT.byteSize());
    }

    private static final OfInt dmDisplayOrientation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2269:7"), groupElement("dmDisplayOrientation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmDisplayOrientation
     * }
     */
    public static final OfInt dmDisplayOrientation$layout() {
        return dmDisplayOrientation$LAYOUT;
    }

    private static final long dmDisplayOrientation$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmDisplayOrientation
     * }
     */
    public static final long dmDisplayOrientation$offset() {
        return dmDisplayOrientation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayOrientation
     * }
     */
    public static int dmDisplayOrientation(MemorySegment struct) {
        return struct.get(dmDisplayOrientation$LAYOUT, dmDisplayOrientation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayOrientation
     * }
     */
    public static void dmDisplayOrientation(MemorySegment struct, int fieldValue) {
        struct.set(dmDisplayOrientation$LAYOUT, dmDisplayOrientation$OFFSET, fieldValue);
    }

    private static final OfInt dmDisplayFixedOutput$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$2256:5"), groupElement("$anon$2269:7"), groupElement("dmDisplayFixedOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFixedOutput
     * }
     */
    public static final OfInt dmDisplayFixedOutput$layout() {
        return dmDisplayFixedOutput$LAYOUT;
    }

    private static final long dmDisplayFixedOutput$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFixedOutput
     * }
     */
    public static final long dmDisplayFixedOutput$offset() {
        return dmDisplayFixedOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFixedOutput
     * }
     */
    public static int dmDisplayFixedOutput(MemorySegment struct) {
        return struct.get(dmDisplayFixedOutput$LAYOUT, dmDisplayFixedOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFixedOutput
     * }
     */
    public static void dmDisplayFixedOutput(MemorySegment struct, int fieldValue) {
        struct.set(dmDisplayFixedOutput$LAYOUT, dmDisplayFixedOutput$OFFSET, fieldValue);
    }

    private static final OfShort dmColor$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmColor
     * }
     */
    public static final OfShort dmColor$layout() {
        return dmColor$LAYOUT;
    }

    private static final long dmColor$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmColor
     * }
     */
    public static final long dmColor$offset() {
        return dmColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmColor
     * }
     */
    public static short dmColor(MemorySegment struct) {
        return struct.get(dmColor$LAYOUT, dmColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmColor
     * }
     */
    public static void dmColor(MemorySegment struct, short fieldValue) {
        struct.set(dmColor$LAYOUT, dmColor$OFFSET, fieldValue);
    }

    private static final OfShort dmDuplex$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmDuplex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmDuplex
     * }
     */
    public static final OfShort dmDuplex$layout() {
        return dmDuplex$LAYOUT;
    }

    private static final long dmDuplex$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmDuplex
     * }
     */
    public static final long dmDuplex$offset() {
        return dmDuplex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmDuplex
     * }
     */
    public static short dmDuplex(MemorySegment struct) {
        return struct.get(dmDuplex$LAYOUT, dmDuplex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmDuplex
     * }
     */
    public static void dmDuplex(MemorySegment struct, short fieldValue) {
        struct.set(dmDuplex$LAYOUT, dmDuplex$OFFSET, fieldValue);
    }

    private static final OfShort dmYResolution$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmYResolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmYResolution
     * }
     */
    public static final OfShort dmYResolution$layout() {
        return dmYResolution$LAYOUT;
    }

    private static final long dmYResolution$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmYResolution
     * }
     */
    public static final long dmYResolution$offset() {
        return dmYResolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmYResolution
     * }
     */
    public static short dmYResolution(MemorySegment struct) {
        return struct.get(dmYResolution$LAYOUT, dmYResolution$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmYResolution
     * }
     */
    public static void dmYResolution(MemorySegment struct, short fieldValue) {
        struct.set(dmYResolution$LAYOUT, dmYResolution$OFFSET, fieldValue);
    }

    private static final OfShort dmTTOption$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmTTOption"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmTTOption
     * }
     */
    public static final OfShort dmTTOption$layout() {
        return dmTTOption$LAYOUT;
    }

    private static final long dmTTOption$OFFSET = 98;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmTTOption
     * }
     */
    public static final long dmTTOption$offset() {
        return dmTTOption$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmTTOption
     * }
     */
    public static short dmTTOption(MemorySegment struct) {
        return struct.get(dmTTOption$LAYOUT, dmTTOption$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmTTOption
     * }
     */
    public static void dmTTOption(MemorySegment struct, short fieldValue) {
        struct.set(dmTTOption$LAYOUT, dmTTOption$OFFSET, fieldValue);
    }

    private static final OfShort dmCollate$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmCollate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short dmCollate
     * }
     */
    public static final OfShort dmCollate$layout() {
        return dmCollate$LAYOUT;
    }

    private static final long dmCollate$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short dmCollate
     * }
     */
    public static final long dmCollate$offset() {
        return dmCollate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short dmCollate
     * }
     */
    public static short dmCollate(MemorySegment struct) {
        return struct.get(dmCollate$LAYOUT, dmCollate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short dmCollate
     * }
     */
    public static void dmCollate(MemorySegment struct, short fieldValue) {
        struct.set(dmCollate$LAYOUT, dmCollate$OFFSET, fieldValue);
    }

    private static final SequenceLayout dmFormName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dmFormName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static final SequenceLayout dmFormName$layout() {
        return dmFormName$LAYOUT;
    }

    private static final long dmFormName$OFFSET = 102;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static final long dmFormName$offset() {
        return dmFormName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static MemorySegment dmFormName(MemorySegment struct) {
        return struct.asSlice(dmFormName$OFFSET, dmFormName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static void dmFormName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dmFormName$OFFSET, dmFormName$LAYOUT.byteSize());
    }

    private static long[] dmFormName$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static long[] dmFormName$dimensions() {
        return dmFormName$DIMS;
    }
    private static final VarHandle dmFormName$ELEM_HANDLE = dmFormName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static short dmFormName(MemorySegment struct, long index0) {
        return (short)dmFormName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR dmFormName[32]
     * }
     */
    public static void dmFormName(MemorySegment struct, long index0, short fieldValue) {
        dmFormName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort dmLogPixels$LAYOUT = (OfShort)$LAYOUT.select(groupElement("dmLogPixels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD dmLogPixels
     * }
     */
    public static final OfShort dmLogPixels$layout() {
        return dmLogPixels$LAYOUT;
    }

    private static final long dmLogPixels$OFFSET = 166;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD dmLogPixels
     * }
     */
    public static final long dmLogPixels$offset() {
        return dmLogPixels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD dmLogPixels
     * }
     */
    public static short dmLogPixels(MemorySegment struct) {
        return struct.get(dmLogPixels$LAYOUT, dmLogPixels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD dmLogPixels
     * }
     */
    public static void dmLogPixels(MemorySegment struct, short fieldValue) {
        struct.set(dmLogPixels$LAYOUT, dmLogPixels$OFFSET, fieldValue);
    }

    private static final OfInt dmBitsPerPel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmBitsPerPel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmBitsPerPel
     * }
     */
    public static final OfInt dmBitsPerPel$layout() {
        return dmBitsPerPel$LAYOUT;
    }

    private static final long dmBitsPerPel$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmBitsPerPel
     * }
     */
    public static final long dmBitsPerPel$offset() {
        return dmBitsPerPel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmBitsPerPel
     * }
     */
    public static int dmBitsPerPel(MemorySegment struct) {
        return struct.get(dmBitsPerPel$LAYOUT, dmBitsPerPel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmBitsPerPel
     * }
     */
    public static void dmBitsPerPel(MemorySegment struct, int fieldValue) {
        struct.set(dmBitsPerPel$LAYOUT, dmBitsPerPel$OFFSET, fieldValue);
    }

    private static final OfInt dmPelsWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmPelsWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmPelsWidth
     * }
     */
    public static final OfInt dmPelsWidth$layout() {
        return dmPelsWidth$LAYOUT;
    }

    private static final long dmPelsWidth$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmPelsWidth
     * }
     */
    public static final long dmPelsWidth$offset() {
        return dmPelsWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmPelsWidth
     * }
     */
    public static int dmPelsWidth(MemorySegment struct) {
        return struct.get(dmPelsWidth$LAYOUT, dmPelsWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmPelsWidth
     * }
     */
    public static void dmPelsWidth(MemorySegment struct, int fieldValue) {
        struct.set(dmPelsWidth$LAYOUT, dmPelsWidth$OFFSET, fieldValue);
    }

    private static final OfInt dmPelsHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmPelsHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmPelsHeight
     * }
     */
    public static final OfInt dmPelsHeight$layout() {
        return dmPelsHeight$LAYOUT;
    }

    private static final long dmPelsHeight$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmPelsHeight
     * }
     */
    public static final long dmPelsHeight$offset() {
        return dmPelsHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmPelsHeight
     * }
     */
    public static int dmPelsHeight(MemorySegment struct) {
        return struct.get(dmPelsHeight$LAYOUT, dmPelsHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmPelsHeight
     * }
     */
    public static void dmPelsHeight(MemorySegment struct, int fieldValue) {
        struct.set(dmPelsHeight$LAYOUT, dmPelsHeight$OFFSET, fieldValue);
    }

    private static final OfInt dmDisplayFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$2285:5"), groupElement("dmDisplayFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFlags
     * }
     */
    public static final OfInt dmDisplayFlags$layout() {
        return dmDisplayFlags$LAYOUT;
    }

    private static final long dmDisplayFlags$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFlags
     * }
     */
    public static final long dmDisplayFlags$offset() {
        return dmDisplayFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFlags
     * }
     */
    public static int dmDisplayFlags(MemorySegment struct) {
        return struct.get(dmDisplayFlags$LAYOUT, dmDisplayFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFlags
     * }
     */
    public static void dmDisplayFlags(MemorySegment struct, int fieldValue) {
        struct.set(dmDisplayFlags$LAYOUT, dmDisplayFlags$OFFSET, fieldValue);
    }

    private static final OfInt dmNup$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$2285:5"), groupElement("dmNup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmNup
     * }
     */
    public static final OfInt dmNup$layout() {
        return dmNup$LAYOUT;
    }

    private static final long dmNup$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmNup
     * }
     */
    public static final long dmNup$offset() {
        return dmNup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmNup
     * }
     */
    public static int dmNup(MemorySegment struct) {
        return struct.get(dmNup$LAYOUT, dmNup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmNup
     * }
     */
    public static void dmNup(MemorySegment struct, int fieldValue) {
        struct.set(dmNup$LAYOUT, dmNup$OFFSET, fieldValue);
    }

    private static final OfInt dmDisplayFrequency$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmDisplayFrequency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFrequency
     * }
     */
    public static final OfInt dmDisplayFrequency$layout() {
        return dmDisplayFrequency$LAYOUT;
    }

    private static final long dmDisplayFrequency$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFrequency
     * }
     */
    public static final long dmDisplayFrequency$offset() {
        return dmDisplayFrequency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFrequency
     * }
     */
    public static int dmDisplayFrequency(MemorySegment struct) {
        return struct.get(dmDisplayFrequency$LAYOUT, dmDisplayFrequency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmDisplayFrequency
     * }
     */
    public static void dmDisplayFrequency(MemorySegment struct, int fieldValue) {
        struct.set(dmDisplayFrequency$LAYOUT, dmDisplayFrequency$OFFSET, fieldValue);
    }

    private static final OfInt dmICMMethod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmICMMethod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmICMMethod
     * }
     */
    public static final OfInt dmICMMethod$layout() {
        return dmICMMethod$LAYOUT;
    }

    private static final long dmICMMethod$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmICMMethod
     * }
     */
    public static final long dmICMMethod$offset() {
        return dmICMMethod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmICMMethod
     * }
     */
    public static int dmICMMethod(MemorySegment struct) {
        return struct.get(dmICMMethod$LAYOUT, dmICMMethod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmICMMethod
     * }
     */
    public static void dmICMMethod(MemorySegment struct, int fieldValue) {
        struct.set(dmICMMethod$LAYOUT, dmICMMethod$OFFSET, fieldValue);
    }

    private static final OfInt dmICMIntent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmICMIntent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmICMIntent
     * }
     */
    public static final OfInt dmICMIntent$layout() {
        return dmICMIntent$LAYOUT;
    }

    private static final long dmICMIntent$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmICMIntent
     * }
     */
    public static final long dmICMIntent$offset() {
        return dmICMIntent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmICMIntent
     * }
     */
    public static int dmICMIntent(MemorySegment struct) {
        return struct.get(dmICMIntent$LAYOUT, dmICMIntent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmICMIntent
     * }
     */
    public static void dmICMIntent(MemorySegment struct, int fieldValue) {
        struct.set(dmICMIntent$LAYOUT, dmICMIntent$OFFSET, fieldValue);
    }

    private static final OfInt dmMediaType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmMediaType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmMediaType
     * }
     */
    public static final OfInt dmMediaType$layout() {
        return dmMediaType$LAYOUT;
    }

    private static final long dmMediaType$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmMediaType
     * }
     */
    public static final long dmMediaType$offset() {
        return dmMediaType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmMediaType
     * }
     */
    public static int dmMediaType(MemorySegment struct) {
        return struct.get(dmMediaType$LAYOUT, dmMediaType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmMediaType
     * }
     */
    public static void dmMediaType(MemorySegment struct, int fieldValue) {
        struct.set(dmMediaType$LAYOUT, dmMediaType$OFFSET, fieldValue);
    }

    private static final OfInt dmDitherType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmDitherType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmDitherType
     * }
     */
    public static final OfInt dmDitherType$layout() {
        return dmDitherType$LAYOUT;
    }

    private static final long dmDitherType$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmDitherType
     * }
     */
    public static final long dmDitherType$offset() {
        return dmDitherType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmDitherType
     * }
     */
    public static int dmDitherType(MemorySegment struct) {
        return struct.get(dmDitherType$LAYOUT, dmDitherType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmDitherType
     * }
     */
    public static void dmDitherType(MemorySegment struct, int fieldValue) {
        struct.set(dmDitherType$LAYOUT, dmDitherType$OFFSET, fieldValue);
    }

    private static final OfInt dmReserved1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmReserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmReserved1
     * }
     */
    public static final OfInt dmReserved1$layout() {
        return dmReserved1$LAYOUT;
    }

    private static final long dmReserved1$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmReserved1
     * }
     */
    public static final long dmReserved1$offset() {
        return dmReserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmReserved1
     * }
     */
    public static int dmReserved1(MemorySegment struct) {
        return struct.get(dmReserved1$LAYOUT, dmReserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmReserved1
     * }
     */
    public static void dmReserved1(MemorySegment struct, int fieldValue) {
        struct.set(dmReserved1$LAYOUT, dmReserved1$OFFSET, fieldValue);
    }

    private static final OfInt dmReserved2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmReserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmReserved2
     * }
     */
    public static final OfInt dmReserved2$layout() {
        return dmReserved2$LAYOUT;
    }

    private static final long dmReserved2$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmReserved2
     * }
     */
    public static final long dmReserved2$offset() {
        return dmReserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmReserved2
     * }
     */
    public static int dmReserved2(MemorySegment struct) {
        return struct.get(dmReserved2$LAYOUT, dmReserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmReserved2
     * }
     */
    public static void dmReserved2(MemorySegment struct, int fieldValue) {
        struct.set(dmReserved2$LAYOUT, dmReserved2$OFFSET, fieldValue);
    }

    private static final OfInt dmPanningWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmPanningWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmPanningWidth
     * }
     */
    public static final OfInt dmPanningWidth$layout() {
        return dmPanningWidth$LAYOUT;
    }

    private static final long dmPanningWidth$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmPanningWidth
     * }
     */
    public static final long dmPanningWidth$offset() {
        return dmPanningWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmPanningWidth
     * }
     */
    public static int dmPanningWidth(MemorySegment struct) {
        return struct.get(dmPanningWidth$LAYOUT, dmPanningWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmPanningWidth
     * }
     */
    public static void dmPanningWidth(MemorySegment struct, int fieldValue) {
        struct.set(dmPanningWidth$LAYOUT, dmPanningWidth$OFFSET, fieldValue);
    }

    private static final OfInt dmPanningHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dmPanningHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dmPanningHeight
     * }
     */
    public static final OfInt dmPanningHeight$layout() {
        return dmPanningHeight$LAYOUT;
    }

    private static final long dmPanningHeight$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dmPanningHeight
     * }
     */
    public static final long dmPanningHeight$offset() {
        return dmPanningHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dmPanningHeight
     * }
     */
    public static int dmPanningHeight(MemorySegment struct) {
        return struct.get(dmPanningHeight$LAYOUT, dmPanningHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dmPanningHeight
     * }
     */
    public static void dmPanningHeight(MemorySegment struct, int fieldValue) {
        struct.set(dmPanningHeight$LAYOUT, dmPanningHeight$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

