// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class freeglut_h_15 extends freeglut_h_16 {

    freeglut_h_15() {
        // Should not be called directly
    }

    private static class GUID_PROCESSOR_THROTTLE_MINIMUM$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_THROTTLE_MINIMUM").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM
     * }
     */
    public static GroupLayout GUID_PROCESSOR_THROTTLE_MINIMUM$layout() {
        return GUID_PROCESSOR_THROTTLE_MINIMUM$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM
     * }
     */
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM() {
        return GUID_PROCESSOR_THROTTLE_MINIMUM$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM
     * }
     */
    public static void GUID_PROCESSOR_THROTTLE_MINIMUM(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_THROTTLE_MINIMUM$constants.SEGMENT, 0L, GUID_PROCESSOR_THROTTLE_MINIMUM$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_THROTTLE_MINIMUM_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_THROTTLE_MINIMUM_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_THROTTLE_MINIMUM_1$layout() {
        return GUID_PROCESSOR_THROTTLE_MINIMUM_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM_1() {
        return GUID_PROCESSOR_THROTTLE_MINIMUM_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THROTTLE_MINIMUM_1
     * }
     */
    public static void GUID_PROCESSOR_THROTTLE_MINIMUM_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_THROTTLE_MINIMUM_1$constants.SEGMENT, 0L, GUID_PROCESSOR_THROTTLE_MINIMUM_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_FREQUENCY_LIMIT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_FREQUENCY_LIMIT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT
     * }
     */
    public static GroupLayout GUID_PROCESSOR_FREQUENCY_LIMIT$layout() {
        return GUID_PROCESSOR_FREQUENCY_LIMIT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT
     * }
     */
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT() {
        return GUID_PROCESSOR_FREQUENCY_LIMIT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT
     * }
     */
    public static void GUID_PROCESSOR_FREQUENCY_LIMIT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_FREQUENCY_LIMIT$constants.SEGMENT, 0L, GUID_PROCESSOR_FREQUENCY_LIMIT$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_FREQUENCY_LIMIT_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_FREQUENCY_LIMIT_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_FREQUENCY_LIMIT_1$layout() {
        return GUID_PROCESSOR_FREQUENCY_LIMIT_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT_1() {
        return GUID_PROCESSOR_FREQUENCY_LIMIT_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_FREQUENCY_LIMIT_1
     * }
     */
    public static void GUID_PROCESSOR_FREQUENCY_LIMIT_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_FREQUENCY_LIMIT_1$constants.SEGMENT, 0L, GUID_PROCESSOR_FREQUENCY_LIMIT_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_ALLOW_THROTTLING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_ALLOW_THROTTLING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_ALLOW_THROTTLING$layout() {
        return GUID_PROCESSOR_ALLOW_THROTTLING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING() {
        return GUID_PROCESSOR_ALLOW_THROTTLING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_ALLOW_THROTTLING
     * }
     */
    public static void GUID_PROCESSOR_ALLOW_THROTTLING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_ALLOW_THROTTLING$constants.SEGMENT, 0L, GUID_PROCESSOR_ALLOW_THROTTLING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLESTATE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLESTATE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLESTATE_POLICY$layout() {
        return GUID_PROCESSOR_IDLESTATE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY() {
        return GUID_PROCESSOR_IDLESTATE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLESTATE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_IDLESTATE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLESTATE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLESTATE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERFSTATE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERFSTATE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERFSTATE_POLICY$layout() {
        return GUID_PROCESSOR_PERFSTATE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY() {
        return GUID_PROCESSOR_PERFSTATE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERFSTATE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_PERFSTATE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERFSTATE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERFSTATE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD() {
        return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1() {
        return GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD() {
        return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1() {
        return GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_POLICY$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY() {
        return GUID_PROCESSOR_PERF_INCREASE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_POLICY_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_POLICY_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_POLICY_1$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_POLICY_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY_1() {
        return GUID_PROCESSOR_PERF_INCREASE_POLICY_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_POLICY_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_POLICY_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_POLICY_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_POLICY_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_POLICY$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY() {
        return GUID_PROCESSOR_PERF_DECREASE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_POLICY_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_POLICY_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_POLICY_1$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_POLICY_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY_1() {
        return GUID_PROCESSOR_PERF_DECREASE_POLICY_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_POLICY_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_POLICY_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_POLICY_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_POLICY_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_TIME$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME() {
        return GUID_PROCESSOR_PERF_INCREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_TIME_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_TIME_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_TIME_1$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_TIME_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME_1() {
        return GUID_PROCESSOR_PERF_INCREASE_TIME_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_TIME_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_TIME_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_TIME_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_TIME_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_TIME$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME() {
        return GUID_PROCESSOR_PERF_DECREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_TIME_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_TIME_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_TIME_1$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_TIME_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME_1() {
        return GUID_PROCESSOR_PERF_DECREASE_TIME_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_TIME_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_TIME_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_TIME_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_TIME_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_TIME_CHECK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_TIME_CHECK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_TIME_CHECK$layout() {
        return GUID_PROCESSOR_PERF_TIME_CHECK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK() {
        return GUID_PROCESSOR_PERF_TIME_CHECK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_TIME_CHECK
     * }
     */
    public static void GUID_PROCESSOR_PERF_TIME_CHECK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_TIME_CHECK$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_TIME_CHECK$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_BOOST_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_BOOST_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_BOOST_POLICY$layout() {
        return GUID_PROCESSOR_PERF_BOOST_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY() {
        return GUID_PROCESSOR_PERF_BOOST_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_POLICY
     * }
     */
    public static void GUID_PROCESSOR_PERF_BOOST_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_BOOST_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_BOOST_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_BOOST_MODE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_BOOST_MODE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_BOOST_MODE$layout() {
        return GUID_PROCESSOR_PERF_BOOST_MODE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE() {
        return GUID_PROCESSOR_PERF_BOOST_MODE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_BOOST_MODE
     * }
     */
    public static void GUID_PROCESSOR_PERF_BOOST_MODE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_BOOST_MODE$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_BOOST_MODE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_AUTONOMOUS_MODE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$layout() {
        return GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_MODE() {
        return GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_MODE
     * }
     */
    public static void GUID_PROCESSOR_PERF_AUTONOMOUS_MODE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$layout() {
        return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE() {
        return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE
     * }
     */
    public static void GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$layout() {
        return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1() {
        return GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$layout() {
        return GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW() {
        return GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW
     * }
     */
    public static void GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_DUTY_CYCLING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_DUTY_CYCLING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DUTY_CYCLING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_DUTY_CYCLING$layout() {
        return GUID_PROCESSOR_DUTY_CYCLING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DUTY_CYCLING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_DUTY_CYCLING() {
        return GUID_PROCESSOR_DUTY_CYCLING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DUTY_CYCLING
     * }
     */
    public static void GUID_PROCESSOR_DUTY_CYCLING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_DUTY_CYCLING$constants.SEGMENT, 0L, GUID_PROCESSOR_DUTY_CYCLING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_ALLOW_SCALING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_ALLOW_SCALING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_ALLOW_SCALING$layout() {
        return GUID_PROCESSOR_IDLE_ALLOW_SCALING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING() {
        return GUID_PROCESSOR_IDLE_ALLOW_SCALING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_ALLOW_SCALING
     * }
     */
    public static void GUID_PROCESSOR_IDLE_ALLOW_SCALING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_ALLOW_SCALING$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_ALLOW_SCALING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_DISABLE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_DISABLE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DISABLE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_DISABLE$layout() {
        return GUID_PROCESSOR_IDLE_DISABLE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DISABLE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_DISABLE() {
        return GUID_PROCESSOR_IDLE_DISABLE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DISABLE
     * }
     */
    public static void GUID_PROCESSOR_IDLE_DISABLE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_DISABLE$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_DISABLE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_STATE_MAXIMUM$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_STATE_MAXIMUM").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_STATE_MAXIMUM$layout() {
        return GUID_PROCESSOR_IDLE_STATE_MAXIMUM$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM() {
        return GUID_PROCESSOR_IDLE_STATE_MAXIMUM$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_STATE_MAXIMUM
     * }
     */
    public static void GUID_PROCESSOR_IDLE_STATE_MAXIMUM(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_STATE_MAXIMUM$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_STATE_MAXIMUM$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_TIME_CHECK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_TIME_CHECK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_TIME_CHECK$layout() {
        return GUID_PROCESSOR_IDLE_TIME_CHECK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK() {
        return GUID_PROCESSOR_IDLE_TIME_CHECK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_TIME_CHECK
     * }
     */
    public static void GUID_PROCESSOR_IDLE_TIME_CHECK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_TIME_CHECK$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_TIME_CHECK$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$layout() {
        return GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD() {
        return GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$layout() {
        return GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD() {
        return GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$layout() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$layout() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_MAX_CORES$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_MAX_CORES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES$layout() {
        return GUID_PROCESSOR_CORE_PARKING_MAX_CORES$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES() {
        return GUID_PROCESSOR_CORE_PARKING_MAX_CORES$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_MAX_CORES(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_MAX_CORES$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_MAX_CORES$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$layout() {
        return GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1() {
        return GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_MIN_CORES$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_MIN_CORES").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES$layout() {
        return GUID_PROCESSOR_CORE_PARKING_MIN_CORES$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES() {
        return GUID_PROCESSOR_CORE_PARKING_MIN_CORES$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_MIN_CORES(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_MIN_CORES$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_MIN_CORES$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$layout() {
        return GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1() {
        return GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$layout() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME() {
        return GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$layout() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME() {
        return GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$layout() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$layout() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$layout() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING() {
        return GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$layout() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$layout() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$layout() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$layout() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD() {
        return GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_CORE_OVERRIDE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_CORE_OVERRIDE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_CORE_OVERRIDE$layout() {
        return GUID_PROCESSOR_PARKING_CORE_OVERRIDE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE() {
        return GUID_PROCESSOR_PARKING_CORE_OVERRIDE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CORE_OVERRIDE
     * }
     */
    public static void GUID_PROCESSOR_PARKING_CORE_OVERRIDE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_CORE_OVERRIDE$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_CORE_OVERRIDE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_PERF_STATE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_PERF_STATE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_PERF_STATE$layout() {
        return GUID_PROCESSOR_PARKING_PERF_STATE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE() {
        return GUID_PROCESSOR_PARKING_PERF_STATE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE
     * }
     */
    public static void GUID_PROCESSOR_PARKING_PERF_STATE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_PERF_STATE$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_PERF_STATE$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_PERF_STATE_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_PERF_STATE_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_PERF_STATE_1$layout() {
        return GUID_PROCESSOR_PARKING_PERF_STATE_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1() {
        return GUID_PROCESSOR_PARKING_PERF_STATE_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_PERF_STATE_1
     * }
     */
    public static void GUID_PROCESSOR_PARKING_PERF_STATE_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_PERF_STATE_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_PERF_STATE_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$layout() {
        return GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD() {
        return GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$layout() {
        return GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD() {
        return GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$layout() {
        return GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD() {
        return GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_SOFT_PARKING_LATENCY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_SOFT_PARKING_LATENCY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SOFT_PARKING_LATENCY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_SOFT_PARKING_LATENCY$layout() {
        return GUID_PROCESSOR_SOFT_PARKING_LATENCY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SOFT_PARKING_LATENCY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY() {
        return GUID_PROCESSOR_SOFT_PARKING_LATENCY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SOFT_PARKING_LATENCY
     * }
     */
    public static void GUID_PROCESSOR_SOFT_PARKING_LATENCY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_SOFT_PARKING_LATENCY$constants.SEGMENT, 0L, GUID_PROCESSOR_SOFT_PARKING_LATENCY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_HISTORY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_HISTORY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_HISTORY$layout() {
        return GUID_PROCESSOR_PERF_HISTORY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY() {
        return GUID_PROCESSOR_PERF_HISTORY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY
     * }
     */
    public static void GUID_PROCESSOR_PERF_HISTORY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_HISTORY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_HISTORY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_HISTORY_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_HISTORY_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_HISTORY_1$layout() {
        return GUID_PROCESSOR_PERF_HISTORY_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY_1() {
        return GUID_PROCESSOR_PERF_HISTORY_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_HISTORY_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_HISTORY_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_HISTORY_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_HISTORY_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_INCREASE_HISTORY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_INCREASE_HISTORY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_INCREASE_HISTORY$layout() {
        return GUID_PROCESSOR_PERF_INCREASE_HISTORY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_HISTORY() {
        return GUID_PROCESSOR_PERF_INCREASE_HISTORY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_INCREASE_HISTORY
     * }
     */
    public static void GUID_PROCESSOR_PERF_INCREASE_HISTORY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_INCREASE_HISTORY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_INCREASE_HISTORY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_DECREASE_HISTORY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_DECREASE_HISTORY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_DECREASE_HISTORY$layout() {
        return GUID_PROCESSOR_PERF_DECREASE_HISTORY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_HISTORY() {
        return GUID_PROCESSOR_PERF_DECREASE_HISTORY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_DECREASE_HISTORY
     * }
     */
    public static void GUID_PROCESSOR_PERF_DECREASE_HISTORY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_DECREASE_HISTORY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_DECREASE_HISTORY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$layout() {
        return GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY() {
        return GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY
     * }
     */
    public static void GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_LATENCY_HINT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_LATENCY_HINT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_LATENCY_HINT$layout() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT
     * }
     */
    public static void GUID_PROCESSOR_PERF_LATENCY_HINT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_LATENCY_HINT_PERF").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$layout() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF
     * }
     */
    public static void GUID_PROCESSOR_PERF_LATENCY_HINT_PERF(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$layout() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1() {
        return GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1
     * }
     */
    public static void GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$constants.SEGMENT, 0L, GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
     * }
     */
    public static GroupLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$layout() {
        return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
     * }
     */
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK() {
        return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK
     * }
     */
    public static void GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$constants.SEGMENT, 0L, GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$layout() {
        return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1() {
        return GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1
     * }
     */
    public static void GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$constants.SEGMENT, 0L, GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_DISTRIBUTE_UTILITY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_DISTRIBUTE_UTILITY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_DISTRIBUTE_UTILITY$layout() {
        return GUID_PROCESSOR_DISTRIBUTE_UTILITY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY() {
        return GUID_PROCESSOR_DISTRIBUTE_UTILITY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_DISTRIBUTE_UTILITY
     * }
     */
    public static void GUID_PROCESSOR_DISTRIBUTE_UTILITY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_DISTRIBUTE_UTILITY$constants.SEGMENT, 0L, GUID_PROCESSOR_DISTRIBUTE_UTILITY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_HETEROGENEOUS_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_HETEROGENEOUS_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETEROGENEOUS_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_HETEROGENEOUS_POLICY$layout() {
        return GUID_PROCESSOR_HETEROGENEOUS_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETEROGENEOUS_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_HETEROGENEOUS_POLICY() {
        return GUID_PROCESSOR_HETEROGENEOUS_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETEROGENEOUS_POLICY
     * }
     */
    public static void GUID_PROCESSOR_HETEROGENEOUS_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_HETEROGENEOUS_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_HETEROGENEOUS_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_HETERO_DECREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_HETERO_DECREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_HETERO_DECREASE_TIME$layout() {
        return GUID_PROCESSOR_HETERO_DECREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_TIME() {
        return GUID_PROCESSOR_HETERO_DECREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_HETERO_DECREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_HETERO_DECREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_HETERO_DECREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_HETERO_INCREASE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_HETERO_INCREASE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_HETERO_INCREASE_TIME$layout() {
        return GUID_PROCESSOR_HETERO_INCREASE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_TIME() {
        return GUID_PROCESSOR_HETERO_INCREASE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_TIME
     * }
     */
    public static void GUID_PROCESSOR_HETERO_INCREASE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_HETERO_INCREASE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_HETERO_INCREASE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD() {
        return GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$layout() {
        return GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD() {
        return GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CLASS0_FLOOR_PERF$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CLASS0_FLOOR_PERF").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS0_FLOOR_PERF
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CLASS0_FLOOR_PERF$layout() {
        return GUID_PROCESSOR_CLASS0_FLOOR_PERF$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS0_FLOOR_PERF
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CLASS0_FLOOR_PERF() {
        return GUID_PROCESSOR_CLASS0_FLOOR_PERF$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS0_FLOOR_PERF
     * }
     */
    public static void GUID_PROCESSOR_CLASS0_FLOOR_PERF(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CLASS0_FLOOR_PERF$constants.SEGMENT, 0L, GUID_PROCESSOR_CLASS0_FLOOR_PERF$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_CLASS1_INITIAL_PERF$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_CLASS1_INITIAL_PERF").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS1_INITIAL_PERF
     * }
     */
    public static GroupLayout GUID_PROCESSOR_CLASS1_INITIAL_PERF$layout() {
        return GUID_PROCESSOR_CLASS1_INITIAL_PERF$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS1_INITIAL_PERF
     * }
     */
    public static MemorySegment GUID_PROCESSOR_CLASS1_INITIAL_PERF() {
        return GUID_PROCESSOR_CLASS1_INITIAL_PERF$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_CLASS1_INITIAL_PERF
     * }
     */
    public static void GUID_PROCESSOR_CLASS1_INITIAL_PERF(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_CLASS1_INITIAL_PERF$constants.SEGMENT, 0L, GUID_PROCESSOR_CLASS1_INITIAL_PERF$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_THREAD_SCHEDULING_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$layout() {
        return GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_THREAD_SCHEDULING_POLICY() {
        return GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_THREAD_SCHEDULING_POLICY
     * }
     */
    public static void GUID_PROCESSOR_THREAD_SCHEDULING_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
     * }
     */
    public static GroupLayout GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$layout() {
        return GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
     * }
     */
    public static MemorySegment GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY() {
        return GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY
     * }
     */
    public static void GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$constants.SEGMENT, 0L, GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_SYSTEM_COOLING_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_SYSTEM_COOLING_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SYSTEM_COOLING_POLICY
     * }
     */
    public static GroupLayout GUID_SYSTEM_COOLING_POLICY$layout() {
        return GUID_SYSTEM_COOLING_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SYSTEM_COOLING_POLICY
     * }
     */
    public static MemorySegment GUID_SYSTEM_COOLING_POLICY() {
        return GUID_SYSTEM_COOLING_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SYSTEM_COOLING_POLICY
     * }
     */
    public static void GUID_SYSTEM_COOLING_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SYSTEM_COOLING_POLICY$constants.SEGMENT, 0L, GUID_SYSTEM_COOLING_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING() {
        return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR() {
        return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$constants.LAYOUT.byteSize());
    }

    private static class GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
     * }
     */
    public static GroupLayout GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$layout() {
        return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
     * }
     */
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1() {
        return GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1
     * }
     */
    public static void GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$constants.SEGMENT, 0L, GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$constants.LAYOUT.byteSize());
    }

    private static class GUID_LOCK_CONSOLE_ON_WAKE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_LOCK_CONSOLE_ON_WAKE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LOCK_CONSOLE_ON_WAKE
     * }
     */
    public static GroupLayout GUID_LOCK_CONSOLE_ON_WAKE$layout() {
        return GUID_LOCK_CONSOLE_ON_WAKE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LOCK_CONSOLE_ON_WAKE
     * }
     */
    public static MemorySegment GUID_LOCK_CONSOLE_ON_WAKE() {
        return GUID_LOCK_CONSOLE_ON_WAKE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LOCK_CONSOLE_ON_WAKE
     * }
     */
    public static void GUID_LOCK_CONSOLE_ON_WAKE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_LOCK_CONSOLE_ON_WAKE$constants.SEGMENT, 0L, GUID_LOCK_CONSOLE_ON_WAKE$constants.LAYOUT.byteSize());
    }

    private static class GUID_DEVICE_IDLE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_DEVICE_IDLE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVICE_IDLE_POLICY
     * }
     */
    public static GroupLayout GUID_DEVICE_IDLE_POLICY$layout() {
        return GUID_DEVICE_IDLE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVICE_IDLE_POLICY
     * }
     */
    public static MemorySegment GUID_DEVICE_IDLE_POLICY() {
        return GUID_DEVICE_IDLE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVICE_IDLE_POLICY
     * }
     */
    public static void GUID_DEVICE_IDLE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVICE_IDLE_POLICY$constants.SEGMENT, 0L, GUID_DEVICE_IDLE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_CONNECTIVITY_IN_STANDBY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_CONNECTIVITY_IN_STANDBY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CONNECTIVITY_IN_STANDBY
     * }
     */
    public static GroupLayout GUID_CONNECTIVITY_IN_STANDBY$layout() {
        return GUID_CONNECTIVITY_IN_STANDBY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CONNECTIVITY_IN_STANDBY
     * }
     */
    public static MemorySegment GUID_CONNECTIVITY_IN_STANDBY() {
        return GUID_CONNECTIVITY_IN_STANDBY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CONNECTIVITY_IN_STANDBY
     * }
     */
    public static void GUID_CONNECTIVITY_IN_STANDBY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CONNECTIVITY_IN_STANDBY$constants.SEGMENT, 0L, GUID_CONNECTIVITY_IN_STANDBY$constants.LAYOUT.byteSize());
    }

    private static class GUID_DISCONNECTED_STANDBY_MODE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_DISCONNECTED_STANDBY_MODE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DISCONNECTED_STANDBY_MODE
     * }
     */
    public static GroupLayout GUID_DISCONNECTED_STANDBY_MODE$layout() {
        return GUID_DISCONNECTED_STANDBY_MODE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DISCONNECTED_STANDBY_MODE
     * }
     */
    public static MemorySegment GUID_DISCONNECTED_STANDBY_MODE() {
        return GUID_DISCONNECTED_STANDBY_MODE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DISCONNECTED_STANDBY_MODE
     * }
     */
    public static void GUID_DISCONNECTED_STANDBY_MODE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DISCONNECTED_STANDBY_MODE$constants.SEGMENT, 0L, GUID_DISCONNECTED_STANDBY_MODE$constants.LAYOUT.byteSize());
    }

    private static class GUID_ACDC_POWER_SOURCE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_ACDC_POWER_SOURCE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ACDC_POWER_SOURCE
     * }
     */
    public static GroupLayout GUID_ACDC_POWER_SOURCE$layout() {
        return GUID_ACDC_POWER_SOURCE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ACDC_POWER_SOURCE
     * }
     */
    public static MemorySegment GUID_ACDC_POWER_SOURCE() {
        return GUID_ACDC_POWER_SOURCE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ACDC_POWER_SOURCE
     * }
     */
    public static void GUID_ACDC_POWER_SOURCE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_ACDC_POWER_SOURCE$constants.SEGMENT, 0L, GUID_ACDC_POWER_SOURCE$constants.LAYOUT.byteSize());
    }

    private static class GUID_LIDSWITCH_STATE_CHANGE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_LIDSWITCH_STATE_CHANGE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LIDSWITCH_STATE_CHANGE
     * }
     */
    public static GroupLayout GUID_LIDSWITCH_STATE_CHANGE$layout() {
        return GUID_LIDSWITCH_STATE_CHANGE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LIDSWITCH_STATE_CHANGE
     * }
     */
    public static MemorySegment GUID_LIDSWITCH_STATE_CHANGE() {
        return GUID_LIDSWITCH_STATE_CHANGE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_LIDSWITCH_STATE_CHANGE
     * }
     */
    public static void GUID_LIDSWITCH_STATE_CHANGE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_LIDSWITCH_STATE_CHANGE$constants.SEGMENT, 0L, GUID_LIDSWITCH_STATE_CHANGE$constants.LAYOUT.byteSize());
    }

    private static class GUID_BATTERY_PERCENTAGE_REMAINING$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_BATTERY_PERCENTAGE_REMAINING").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING
     * }
     */
    public static GroupLayout GUID_BATTERY_PERCENTAGE_REMAINING$layout() {
        return GUID_BATTERY_PERCENTAGE_REMAINING$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING
     * }
     */
    public static MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING() {
        return GUID_BATTERY_PERCENTAGE_REMAINING$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_PERCENTAGE_REMAINING
     * }
     */
    public static void GUID_BATTERY_PERCENTAGE_REMAINING(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_BATTERY_PERCENTAGE_REMAINING$constants.SEGMENT, 0L, GUID_BATTERY_PERCENTAGE_REMAINING$constants.LAYOUT.byteSize());
    }

    private static class GUID_BATTERY_COUNT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_BATTERY_COUNT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_COUNT
     * }
     */
    public static GroupLayout GUID_BATTERY_COUNT$layout() {
        return GUID_BATTERY_COUNT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_COUNT
     * }
     */
    public static MemorySegment GUID_BATTERY_COUNT() {
        return GUID_BATTERY_COUNT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BATTERY_COUNT
     * }
     */
    public static void GUID_BATTERY_COUNT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_BATTERY_COUNT$constants.SEGMENT, 0L, GUID_BATTERY_COUNT$constants.LAYOUT.byteSize());
    }

    private static class GUID_GLOBAL_USER_PRESENCE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_GLOBAL_USER_PRESENCE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GLOBAL_USER_PRESENCE
     * }
     */
    public static GroupLayout GUID_GLOBAL_USER_PRESENCE$layout() {
        return GUID_GLOBAL_USER_PRESENCE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GLOBAL_USER_PRESENCE
     * }
     */
    public static MemorySegment GUID_GLOBAL_USER_PRESENCE() {
        return GUID_GLOBAL_USER_PRESENCE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GLOBAL_USER_PRESENCE
     * }
     */
    public static void GUID_GLOBAL_USER_PRESENCE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_GLOBAL_USER_PRESENCE$constants.SEGMENT, 0L, GUID_GLOBAL_USER_PRESENCE$constants.LAYOUT.byteSize());
    }

    private static class GUID_SESSION_DISPLAY_STATUS$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_SESSION_DISPLAY_STATUS").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_DISPLAY_STATUS
     * }
     */
    public static GroupLayout GUID_SESSION_DISPLAY_STATUS$layout() {
        return GUID_SESSION_DISPLAY_STATUS$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_DISPLAY_STATUS
     * }
     */
    public static MemorySegment GUID_SESSION_DISPLAY_STATUS() {
        return GUID_SESSION_DISPLAY_STATUS$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_DISPLAY_STATUS
     * }
     */
    public static void GUID_SESSION_DISPLAY_STATUS(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SESSION_DISPLAY_STATUS$constants.SEGMENT, 0L, GUID_SESSION_DISPLAY_STATUS$constants.LAYOUT.byteSize());
    }

    private static class GUID_SESSION_USER_PRESENCE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_SESSION_USER_PRESENCE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_USER_PRESENCE
     * }
     */
    public static GroupLayout GUID_SESSION_USER_PRESENCE$layout() {
        return GUID_SESSION_USER_PRESENCE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_USER_PRESENCE
     * }
     */
    public static MemorySegment GUID_SESSION_USER_PRESENCE() {
        return GUID_SESSION_USER_PRESENCE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SESSION_USER_PRESENCE
     * }
     */
    public static void GUID_SESSION_USER_PRESENCE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SESSION_USER_PRESENCE$constants.SEGMENT, 0L, GUID_SESSION_USER_PRESENCE$constants.LAYOUT.byteSize());
    }

    private static class GUID_IDLE_BACKGROUND_TASK$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_IDLE_BACKGROUND_TASK").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_IDLE_BACKGROUND_TASK
     * }
     */
    public static GroupLayout GUID_IDLE_BACKGROUND_TASK$layout() {
        return GUID_IDLE_BACKGROUND_TASK$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_IDLE_BACKGROUND_TASK
     * }
     */
    public static MemorySegment GUID_IDLE_BACKGROUND_TASK() {
        return GUID_IDLE_BACKGROUND_TASK$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_IDLE_BACKGROUND_TASK
     * }
     */
    public static void GUID_IDLE_BACKGROUND_TASK(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_IDLE_BACKGROUND_TASK$constants.SEGMENT, 0L, GUID_IDLE_BACKGROUND_TASK$constants.LAYOUT.byteSize());
    }

    private static class GUID_BACKGROUND_TASK_NOTIFICATION$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_BACKGROUND_TASK_NOTIFICATION").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION
     * }
     */
    public static GroupLayout GUID_BACKGROUND_TASK_NOTIFICATION$layout() {
        return GUID_BACKGROUND_TASK_NOTIFICATION$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION
     * }
     */
    public static MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION() {
        return GUID_BACKGROUND_TASK_NOTIFICATION$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_BACKGROUND_TASK_NOTIFICATION
     * }
     */
    public static void GUID_BACKGROUND_TASK_NOTIFICATION(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_BACKGROUND_TASK_NOTIFICATION$constants.SEGMENT, 0L, GUID_BACKGROUND_TASK_NOTIFICATION$constants.LAYOUT.byteSize());
    }

    private static class GUID_APPLAUNCH_BUTTON$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_APPLAUNCH_BUTTON").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_APPLAUNCH_BUTTON
     * }
     */
    public static GroupLayout GUID_APPLAUNCH_BUTTON$layout() {
        return GUID_APPLAUNCH_BUTTON$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_APPLAUNCH_BUTTON
     * }
     */
    public static MemorySegment GUID_APPLAUNCH_BUTTON() {
        return GUID_APPLAUNCH_BUTTON$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_APPLAUNCH_BUTTON
     * }
     */
    public static void GUID_APPLAUNCH_BUTTON(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_APPLAUNCH_BUTTON$constants.SEGMENT, 0L, GUID_APPLAUNCH_BUTTON$constants.LAYOUT.byteSize());
    }

    private static class GUID_PCIEXPRESS_SETTINGS_SUBGROUP$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PCIEXPRESS_SETTINGS_SUBGROUP").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP
     * }
     */
    public static GroupLayout GUID_PCIEXPRESS_SETTINGS_SUBGROUP$layout() {
        return GUID_PCIEXPRESS_SETTINGS_SUBGROUP$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP
     * }
     */
    public static MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP() {
        return GUID_PCIEXPRESS_SETTINGS_SUBGROUP$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_SETTINGS_SUBGROUP
     * }
     */
    public static void GUID_PCIEXPRESS_SETTINGS_SUBGROUP(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PCIEXPRESS_SETTINGS_SUBGROUP$constants.SEGMENT, 0L, GUID_PCIEXPRESS_SETTINGS_SUBGROUP$constants.LAYOUT.byteSize());
    }

    private static class GUID_PCIEXPRESS_ASPM_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_PCIEXPRESS_ASPM_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_ASPM_POLICY
     * }
     */
    public static GroupLayout GUID_PCIEXPRESS_ASPM_POLICY$layout() {
        return GUID_PCIEXPRESS_ASPM_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_ASPM_POLICY
     * }
     */
    public static MemorySegment GUID_PCIEXPRESS_ASPM_POLICY() {
        return GUID_PCIEXPRESS_ASPM_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_PCIEXPRESS_ASPM_POLICY
     * }
     */
    public static void GUID_PCIEXPRESS_ASPM_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_PCIEXPRESS_ASPM_POLICY$constants.SEGMENT, 0L, GUID_PCIEXPRESS_ASPM_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_ENABLE_SWITCH_FORCED_SHUTDOWN").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
     * }
     */
    public static GroupLayout GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$layout() {
        return GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
     * }
     */
    public static MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN() {
        return GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_ENABLE_SWITCH_FORCED_SHUTDOWN
     * }
     */
    public static void GUID_ENABLE_SWITCH_FORCED_SHUTDOWN(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$constants.SEGMENT, 0L, GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$constants.LAYOUT.byteSize());
    }

    private static class GUID_INTSTEER_SUBGROUP$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_INTSTEER_SUBGROUP").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_SUBGROUP
     * }
     */
    public static GroupLayout GUID_INTSTEER_SUBGROUP$layout() {
        return GUID_INTSTEER_SUBGROUP$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_SUBGROUP
     * }
     */
    public static MemorySegment GUID_INTSTEER_SUBGROUP() {
        return GUID_INTSTEER_SUBGROUP$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_SUBGROUP
     * }
     */
    public static void GUID_INTSTEER_SUBGROUP(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_INTSTEER_SUBGROUP$constants.SEGMENT, 0L, GUID_INTSTEER_SUBGROUP$constants.LAYOUT.byteSize());
    }

    private static class GUID_INTSTEER_MODE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_INTSTEER_MODE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_MODE
     * }
     */
    public static GroupLayout GUID_INTSTEER_MODE$layout() {
        return GUID_INTSTEER_MODE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_MODE
     * }
     */
    public static MemorySegment GUID_INTSTEER_MODE() {
        return GUID_INTSTEER_MODE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_MODE
     * }
     */
    public static void GUID_INTSTEER_MODE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_INTSTEER_MODE$constants.SEGMENT, 0L, GUID_INTSTEER_MODE$constants.LAYOUT.byteSize());
    }

    private static class GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_INTSTEER_LOAD_PER_PROC_TRIGGER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
     * }
     */
    public static GroupLayout GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$layout() {
        return GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
     * }
     */
    public static MemorySegment GUID_INTSTEER_LOAD_PER_PROC_TRIGGER() {
        return GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_LOAD_PER_PROC_TRIGGER
     * }
     */
    public static void GUID_INTSTEER_LOAD_PER_PROC_TRIGGER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$constants.SEGMENT, 0L, GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$constants.LAYOUT.byteSize());
    }

    private static class GUID_INTSTEER_TIME_UNPARK_TRIGGER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_INTSTEER_TIME_UNPARK_TRIGGER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER
     * }
     */
    public static GroupLayout GUID_INTSTEER_TIME_UNPARK_TRIGGER$layout() {
        return GUID_INTSTEER_TIME_UNPARK_TRIGGER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER
     * }
     */
    public static MemorySegment GUID_INTSTEER_TIME_UNPARK_TRIGGER() {
        return GUID_INTSTEER_TIME_UNPARK_TRIGGER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_INTSTEER_TIME_UNPARK_TRIGGER
     * }
     */
    public static void GUID_INTSTEER_TIME_UNPARK_TRIGGER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_INTSTEER_TIME_UNPARK_TRIGGER$constants.SEGMENT, 0L, GUID_INTSTEER_TIME_UNPARK_TRIGGER$constants.LAYOUT.byteSize());
    }

    private static class GUID_GRAPHICS_SUBGROUP$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_GRAPHICS_SUBGROUP").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GRAPHICS_SUBGROUP
     * }
     */
    public static GroupLayout GUID_GRAPHICS_SUBGROUP$layout() {
        return GUID_GRAPHICS_SUBGROUP$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GRAPHICS_SUBGROUP
     * }
     */
    public static MemorySegment GUID_GRAPHICS_SUBGROUP() {
        return GUID_GRAPHICS_SUBGROUP$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GRAPHICS_SUBGROUP
     * }
     */
    public static void GUID_GRAPHICS_SUBGROUP(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_GRAPHICS_SUBGROUP$constants.SEGMENT, 0L, GUID_GRAPHICS_SUBGROUP$constants.LAYOUT.byteSize());
    }

    private static class GUID_GPU_PREFERENCE_POLICY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_GPU_PREFERENCE_POLICY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GPU_PREFERENCE_POLICY
     * }
     */
    public static GroupLayout GUID_GPU_PREFERENCE_POLICY$layout() {
        return GUID_GPU_PREFERENCE_POLICY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GPU_PREFERENCE_POLICY
     * }
     */
    public static MemorySegment GUID_GPU_PREFERENCE_POLICY() {
        return GUID_GPU_PREFERENCE_POLICY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_GPU_PREFERENCE_POLICY
     * }
     */
    public static void GUID_GPU_PREFERENCE_POLICY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_GPU_PREFERENCE_POLICY$constants.SEGMENT, 0L, GUID_GPU_PREFERENCE_POLICY$constants.LAYOUT.byteSize());
    }

    private static class GUID_MIXED_REALITY_MODE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_MIXED_REALITY_MODE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_MIXED_REALITY_MODE
     * }
     */
    public static GroupLayout GUID_MIXED_REALITY_MODE$layout() {
        return GUID_MIXED_REALITY_MODE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_MIXED_REALITY_MODE
     * }
     */
    public static MemorySegment GUID_MIXED_REALITY_MODE() {
        return GUID_MIXED_REALITY_MODE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_MIXED_REALITY_MODE
     * }
     */
    public static void GUID_MIXED_REALITY_MODE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_MIXED_REALITY_MODE$constants.SEGMENT, 0L, GUID_MIXED_REALITY_MODE$constants.LAYOUT.byteSize());
    }

    private static class GUID_SPR_ACTIVE_SESSION_CHANGE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("GUID_SPR_ACTIVE_SESSION_CHANGE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SPR_ACTIVE_SESSION_CHANGE
     * }
     */
    public static GroupLayout GUID_SPR_ACTIVE_SESSION_CHANGE$layout() {
        return GUID_SPR_ACTIVE_SESSION_CHANGE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SPR_ACTIVE_SESSION_CHANGE
     * }
     */
    public static MemorySegment GUID_SPR_ACTIVE_SESSION_CHANGE() {
        return GUID_SPR_ACTIVE_SESSION_CHANGE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_SPR_ACTIVE_SESSION_CHANGE
     * }
     */
    public static void GUID_SPR_ACTIVE_SESSION_CHANGE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_SPR_ACTIVE_SESSION_CHANGE$constants.SEGMENT, 0L, GUID_SPR_ACTIVE_SESSION_CHANGE$constants.LAYOUT.byteSize());
    }
    private static final int PowerSystemUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemUnspecified = 0
     * }
     */
    public static int PowerSystemUnspecified() {
        return PowerSystemUnspecified;
    }
    private static final int PowerSystemWorking = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemWorking = 1
     * }
     */
    public static int PowerSystemWorking() {
        return PowerSystemWorking;
    }
    private static final int PowerSystemSleeping1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemSleeping1 = 2
     * }
     */
    public static int PowerSystemSleeping1() {
        return PowerSystemSleeping1;
    }
    private static final int PowerSystemSleeping2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemSleeping2 = 3
     * }
     */
    public static int PowerSystemSleeping2() {
        return PowerSystemSleeping2;
    }
    private static final int PowerSystemSleeping3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemSleeping3 = 4
     * }
     */
    public static int PowerSystemSleeping3() {
        return PowerSystemSleeping3;
    }
    private static final int PowerSystemHibernate = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemHibernate = 5
     * }
     */
    public static int PowerSystemHibernate() {
        return PowerSystemHibernate;
    }
    private static final int PowerSystemShutdown = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemShutdown = 6
     * }
     */
    public static int PowerSystemShutdown() {
        return PowerSystemShutdown;
    }
    private static final int PowerSystemMaximum = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _SYSTEM_POWER_STATE.PowerSystemMaximum = 7
     * }
     */
    public static int PowerSystemMaximum() {
        return PowerSystemMaximum;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SYSTEM_POWER_STATE {
     *     PowerSystemUnspecified = 0,
     *     PowerSystemWorking = 1,
     *     PowerSystemSleeping1 = 2,
     *     PowerSystemSleeping2 = 3,
     *     PowerSystemSleeping3 = 4,
     *     PowerSystemHibernate = 5,
     *     PowerSystemShutdown = 6,
     *     PowerSystemMaximum = 7
     * } *PSYSTEM_POWER_STATE
     * }
     */
    public static final AddressLayout PSYSTEM_POWER_STATE = freeglut_h.C_POINTER;
    private static final int PowerActionNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionNone = 0
     * }
     */
    public static int PowerActionNone() {
        return PowerActionNone;
    }
    private static final int PowerActionReserved = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionReserved = 1
     * }
     */
    public static int PowerActionReserved() {
        return PowerActionReserved;
    }
    private static final int PowerActionSleep = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionSleep = 2
     * }
     */
    public static int PowerActionSleep() {
        return PowerActionSleep;
    }
    private static final int PowerActionHibernate = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionHibernate = 3
     * }
     */
    public static int PowerActionHibernate() {
        return PowerActionHibernate;
    }
    private static final int PowerActionShutdown = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionShutdown = 4
     * }
     */
    public static int PowerActionShutdown() {
        return PowerActionShutdown;
    }
    private static final int PowerActionShutdownReset = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionShutdownReset = 5
     * }
     */
    public static int PowerActionShutdownReset() {
        return PowerActionShutdownReset;
    }
    private static final int PowerActionShutdownOff = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionShutdownOff = 6
     * }
     */
    public static int PowerActionShutdownOff() {
        return PowerActionShutdownOff;
    }
    private static final int PowerActionWarmEject = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionWarmEject = 7
     * }
     */
    public static int PowerActionWarmEject() {
        return PowerActionWarmEject;
    }
    private static final int PowerActionDisplayOff = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerActionDisplayOff = 8
     * }
     */
    public static int PowerActionDisplayOff() {
        return PowerActionDisplayOff;
    }
    /**
     * {@snippet lang=c :
     * typedef enum {
     *     PowerActionNone = 0,
     *     PowerActionReserved,
     *     PowerActionSleep,
     *     PowerActionHibernate,
     *     PowerActionShutdown,
     *     PowerActionShutdownReset,
     *     PowerActionShutdownOff,
     *     PowerActionWarmEject,
     *     PowerActionDisplayOff
     * } *PPOWER_ACTION
     * }
     */
    public static final AddressLayout PPOWER_ACTION = freeglut_h.C_POINTER;
    private static final int PowerDeviceUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceUnspecified = 0
     * }
     */
    public static int PowerDeviceUnspecified() {
        return PowerDeviceUnspecified;
    }
    private static final int PowerDeviceD0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceD0 = 1
     * }
     */
    public static int PowerDeviceD0() {
        return PowerDeviceD0;
    }
    private static final int PowerDeviceD1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceD1 = 2
     * }
     */
    public static int PowerDeviceD1() {
        return PowerDeviceD1;
    }
    private static final int PowerDeviceD2 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceD2 = 3
     * }
     */
    public static int PowerDeviceD2() {
        return PowerDeviceD2;
    }
    private static final int PowerDeviceD3 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceD3 = 4
     * }
     */
    public static int PowerDeviceD3() {
        return PowerDeviceD3;
    }
    private static final int PowerDeviceMaximum = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _DEVICE_POWER_STATE.PowerDeviceMaximum = 5
     * }
     */
    public static int PowerDeviceMaximum() {
        return PowerDeviceMaximum;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DEVICE_POWER_STATE {
     *     PowerDeviceUnspecified = 0,
     *     PowerDeviceD0,
     *     PowerDeviceD1,
     *     PowerDeviceD2,
     *     PowerDeviceD3,
     *     PowerDeviceMaximum
     * } *PDEVICE_POWER_STATE
     * }
     */
    public static final AddressLayout PDEVICE_POWER_STATE = freeglut_h.C_POINTER;
    private static final int PowerMonitorOff = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _MONITOR_DISPLAY_STATE.PowerMonitorOff = 0
     * }
     */
    public static int PowerMonitorOff() {
        return PowerMonitorOff;
    }
    private static final int PowerMonitorOn = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _MONITOR_DISPLAY_STATE.PowerMonitorOn = 1
     * }
     */
    public static int PowerMonitorOn() {
        return PowerMonitorOn;
    }
    private static final int PowerMonitorDim = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _MONITOR_DISPLAY_STATE.PowerMonitorDim = 2
     * }
     */
    public static int PowerMonitorDim() {
        return PowerMonitorDim;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _MONITOR_DISPLAY_STATE {
     *     PowerMonitorOff = 0,
     *     PowerMonitorOn,
     *     PowerMonitorDim
     * } *PMONITOR_DISPLAY_STATE
     * }
     */
    public static final AddressLayout PMONITOR_DISPLAY_STATE = freeglut_h.C_POINTER;
    private static final int PowerUserPresent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _USER_ACTIVITY_PRESENCE.PowerUserPresent = 0
     * }
     */
    public static int PowerUserPresent() {
        return PowerUserPresent;
    }
    private static final int PowerUserNotPresent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _USER_ACTIVITY_PRESENCE.PowerUserNotPresent = 1
     * }
     */
    public static int PowerUserNotPresent() {
        return PowerUserNotPresent;
    }
    private static final int PowerUserInactive = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _USER_ACTIVITY_PRESENCE.PowerUserInactive = 2
     * }
     */
    public static int PowerUserInactive() {
        return PowerUserInactive;
    }
    private static final int PowerUserMaximum = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _USER_ACTIVITY_PRESENCE.PowerUserMaximum = 3
     * }
     */
    public static int PowerUserMaximum() {
        return PowerUserMaximum;
    }
    private static final int PowerUserInvalid = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _USER_ACTIVITY_PRESENCE.PowerUserInvalid = 3
     * }
     */
    public static int PowerUserInvalid() {
        return PowerUserInvalid;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _USER_ACTIVITY_PRESENCE {
     *     PowerUserPresent = 0,
     *     PowerUserNotPresent,
     *     PowerUserInactive,
     *     PowerUserMaximum,
     *     PowerUserInvalid = PowerUserMaximum
     * } *PUSER_ACTIVITY_PRESENCE
     * }
     */
    public static final AddressLayout PUSER_ACTIVITY_PRESENCE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD EXECUTION_STATE
     * }
     */
    public static final OfInt EXECUTION_STATE = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD *PEXECUTION_STATE
     * }
     */
    public static final AddressLayout PEXECUTION_STATE = freeglut_h.C_POINTER;
    private static final int LT_DONT_CARE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LT_DONT_CARE = 0
     * }
     */
    public static int LT_DONT_CARE() {
        return LT_DONT_CARE;
    }
    private static final int LT_LOWEST_LATENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LT_LOWEST_LATENCY = 1
     * }
     */
    public static int LT_LOWEST_LATENCY() {
        return LT_LOWEST_LATENCY;
    }
    private static final int PowerRequestDisplayRequired = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _POWER_REQUEST_TYPE.PowerRequestDisplayRequired = 0
     * }
     */
    public static int PowerRequestDisplayRequired() {
        return PowerRequestDisplayRequired;
    }
    private static final int PowerRequestSystemRequired = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _POWER_REQUEST_TYPE.PowerRequestSystemRequired = 1
     * }
     */
    public static int PowerRequestSystemRequired() {
        return PowerRequestSystemRequired;
    }
    private static final int PowerRequestAwayModeRequired = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _POWER_REQUEST_TYPE.PowerRequestAwayModeRequired = 2
     * }
     */
    public static int PowerRequestAwayModeRequired() {
        return PowerRequestAwayModeRequired;
    }
    private static final int PowerRequestExecutionRequired = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _POWER_REQUEST_TYPE.PowerRequestExecutionRequired = 3
     * }
     */
    public static int PowerRequestExecutionRequired() {
        return PowerRequestExecutionRequired;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _POWER_REQUEST_TYPE {
     *     PowerRequestDisplayRequired,
     *     PowerRequestSystemRequired,
     *     PowerRequestAwayModeRequired,
     *     PowerRequestExecutionRequired
     * } *PPOWER_REQUEST_TYPE
     * }
     */
    public static final AddressLayout PPOWER_REQUEST_TYPE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct CM_Power_Data_s {
     *     DWORD PD_Size;
     *     DEVICE_POWER_STATE PD_MostRecentPowerState;
     *     DWORD PD_Capabilities;
     *     DWORD PD_D1Latency;
     *     DWORD PD_D2Latency;
     *     DWORD PD_D3Latency;
     *     DEVICE_POWER_STATE PD_PowerStateMapping[7];
     *     SYSTEM_POWER_STATE PD_DeepestSystemWake;
     * } *PCM_POWER_DATA
     * }
     */
    public static final AddressLayout PCM_POWER_DATA = freeglut_h.C_POINTER;
    private static final int SystemPowerPolicyAc = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerPolicyAc = 0
     * }
     */
    public static int SystemPowerPolicyAc() {
        return SystemPowerPolicyAc;
    }
    private static final int SystemPowerPolicyDc = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerPolicyDc = 1
     * }
     */
    public static int SystemPowerPolicyDc() {
        return SystemPowerPolicyDc;
    }
    private static final int VerifySystemPolicyAc = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VerifySystemPolicyAc = 2
     * }
     */
    public static int VerifySystemPolicyAc() {
        return VerifySystemPolicyAc;
    }
    private static final int VerifySystemPolicyDc = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VerifySystemPolicyDc = 3
     * }
     */
    public static int VerifySystemPolicyDc() {
        return VerifySystemPolicyDc;
    }
    private static final int SystemPowerCapabilities = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerCapabilities = 4
     * }
     */
    public static int SystemPowerCapabilities() {
        return SystemPowerCapabilities;
    }
    private static final int SystemBatteryState = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemBatteryState = 5
     * }
     */
    public static int SystemBatteryState() {
        return SystemBatteryState;
    }
    private static final int SystemPowerStateHandler = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerStateHandler = 6
     * }
     */
    public static int SystemPowerStateHandler() {
        return SystemPowerStateHandler;
    }
    private static final int ProcessorStateHandler = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorStateHandler = 7
     * }
     */
    public static int ProcessorStateHandler() {
        return ProcessorStateHandler;
    }
    private static final int SystemPowerPolicyCurrent = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerPolicyCurrent = 8
     * }
     */
    public static int SystemPowerPolicyCurrent() {
        return SystemPowerPolicyCurrent;
    }
    private static final int AdministratorPowerPolicy = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.AdministratorPowerPolicy = 9
     * }
     */
    public static int AdministratorPowerPolicy() {
        return AdministratorPowerPolicy;
    }
    private static final int SystemReserveHiberFile = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemReserveHiberFile = 10
     * }
     */
    public static int SystemReserveHiberFile() {
        return SystemReserveHiberFile;
    }
    private static final int ProcessorInformation = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorInformation = 11
     * }
     */
    public static int ProcessorInformation() {
        return ProcessorInformation;
    }
    private static final int SystemPowerInformation = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerInformation = 12
     * }
     */
    public static int SystemPowerInformation() {
        return SystemPowerInformation;
    }
    private static final int ProcessorStateHandler2 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorStateHandler2 = 13
     * }
     */
    public static int ProcessorStateHandler2() {
        return ProcessorStateHandler2;
    }
    private static final int LastWakeTime = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LastWakeTime = 14
     * }
     */
    public static int LastWakeTime() {
        return LastWakeTime;
    }
    private static final int LastSleepTime = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LastSleepTime = 15
     * }
     */
    public static int LastSleepTime() {
        return LastSleepTime;
    }
    private static final int SystemExecutionState = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemExecutionState = 16
     * }
     */
    public static int SystemExecutionState() {
        return SystemExecutionState;
    }
    private static final int SystemPowerStateNotifyHandler = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerStateNotifyHandler = 17
     * }
     */
    public static int SystemPowerStateNotifyHandler() {
        return SystemPowerStateNotifyHandler;
    }
    private static final int ProcessorPowerPolicyAc = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPowerPolicyAc = 18
     * }
     */
    public static int ProcessorPowerPolicyAc() {
        return ProcessorPowerPolicyAc;
    }
    private static final int ProcessorPowerPolicyDc = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPowerPolicyDc = 19
     * }
     */
    public static int ProcessorPowerPolicyDc() {
        return ProcessorPowerPolicyDc;
    }
    private static final int VerifyProcessorPowerPolicyAc = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VerifyProcessorPowerPolicyAc = 20
     * }
     */
    public static int VerifyProcessorPowerPolicyAc() {
        return VerifyProcessorPowerPolicyAc;
    }
    private static final int VerifyProcessorPowerPolicyDc = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.VerifyProcessorPowerPolicyDc = 21
     * }
     */
    public static int VerifyProcessorPowerPolicyDc() {
        return VerifyProcessorPowerPolicyDc;
    }
    private static final int ProcessorPowerPolicyCurrent = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPowerPolicyCurrent = 22
     * }
     */
    public static int ProcessorPowerPolicyCurrent() {
        return ProcessorPowerPolicyCurrent;
    }
    private static final int SystemPowerStateLogging = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerStateLogging = 23
     * }
     */
    public static int SystemPowerStateLogging() {
        return SystemPowerStateLogging;
    }
    private static final int SystemPowerLoggingEntry = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemPowerLoggingEntry = 24
     * }
     */
    public static int SystemPowerLoggingEntry() {
        return SystemPowerLoggingEntry;
    }
    private static final int SetPowerSettingValue = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SetPowerSettingValue = 25
     * }
     */
    public static int SetPowerSettingValue() {
        return SetPowerSettingValue;
    }
    private static final int NotifyUserPowerSetting = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NotifyUserPowerSetting = 26
     * }
     */
    public static int NotifyUserPowerSetting() {
        return NotifyUserPowerSetting;
    }
    private static final int PowerInformationLevelUnused0 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerInformationLevelUnused0 = 27
     * }
     */
    public static int PowerInformationLevelUnused0() {
        return PowerInformationLevelUnused0;
    }
    private static final int SystemMonitorHiberBootPowerOff = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemMonitorHiberBootPowerOff = 28
     * }
     */
    public static int SystemMonitorHiberBootPowerOff() {
        return SystemMonitorHiberBootPowerOff;
    }
    private static final int SystemVideoState = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemVideoState = 29
     * }
     */
    public static int SystemVideoState() {
        return SystemVideoState;
    }
    private static final int TraceApplicationPowerMessage = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TraceApplicationPowerMessage = 30
     * }
     */
    public static int TraceApplicationPowerMessage() {
        return TraceApplicationPowerMessage;
    }
    private static final int TraceApplicationPowerMessageEnd = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TraceApplicationPowerMessageEnd = 31
     * }
     */
    public static int TraceApplicationPowerMessageEnd() {
        return TraceApplicationPowerMessageEnd;
    }
    private static final int ProcessorPerfStates = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPerfStates = 32
     * }
     */
    public static int ProcessorPerfStates() {
        return ProcessorPerfStates;
    }
    private static final int ProcessorIdleStates = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorIdleStates = 33
     * }
     */
    public static int ProcessorIdleStates() {
        return ProcessorIdleStates;
    }
    private static final int ProcessorCap = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorCap = 34
     * }
     */
    public static int ProcessorCap() {
        return ProcessorCap;
    }
    private static final int SystemWakeSource = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemWakeSource = 35
     * }
     */
    public static int SystemWakeSource() {
        return SystemWakeSource;
    }
    private static final int SystemHiberFileInformation = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemHiberFileInformation = 36
     * }
     */
    public static int SystemHiberFileInformation() {
        return SystemHiberFileInformation;
    }
    private static final int TraceServicePowerMessage = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.TraceServicePowerMessage = 37
     * }
     */
    public static int TraceServicePowerMessage() {
        return TraceServicePowerMessage;
    }
    private static final int ProcessorLoad = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorLoad = 38
     * }
     */
    public static int ProcessorLoad() {
        return ProcessorLoad;
    }
    private static final int PowerShutdownNotification = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerShutdownNotification = 39
     * }
     */
    public static int PowerShutdownNotification() {
        return PowerShutdownNotification;
    }
    private static final int MonitorCapabilities = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorCapabilities = 40
     * }
     */
    public static int MonitorCapabilities() {
        return MonitorCapabilities;
    }
    private static final int SessionPowerInit = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionPowerInit = 41
     * }
     */
    public static int SessionPowerInit() {
        return SessionPowerInit;
    }
    private static final int SessionDisplayState = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionDisplayState = 42
     * }
     */
    public static int SessionDisplayState() {
        return SessionDisplayState;
    }
    private static final int PowerRequestCreate = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerRequestCreate = 43
     * }
     */
    public static int PowerRequestCreate() {
        return PowerRequestCreate;
    }
    private static final int PowerRequestAction = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerRequestAction = 44
     * }
     */
    public static int PowerRequestAction() {
        return PowerRequestAction;
    }
    private static final int GetPowerRequestList = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GetPowerRequestList = 45
     * }
     */
    public static int GetPowerRequestList() {
        return GetPowerRequestList;
    }
    private static final int ProcessorInformationEx = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorInformationEx = 46
     * }
     */
    public static int ProcessorInformationEx() {
        return ProcessorInformationEx;
    }
    private static final int NotifyUserModeLegacyPowerEvent = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.NotifyUserModeLegacyPowerEvent = 47
     * }
     */
    public static int NotifyUserModeLegacyPowerEvent() {
        return NotifyUserModeLegacyPowerEvent;
    }
    private static final int GroupPark = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GroupPark = 48
     * }
     */
    public static int GroupPark() {
        return GroupPark;
    }
    private static final int ProcessorIdleDomains = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorIdleDomains = 49
     * }
     */
    public static int ProcessorIdleDomains() {
        return ProcessorIdleDomains;
    }
    private static final int WakeTimerList = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.WakeTimerList = 50
     * }
     */
    public static int WakeTimerList() {
        return WakeTimerList;
    }
    private static final int SystemHiberFileSize = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemHiberFileSize = 51
     * }
     */
    public static int SystemHiberFileSize() {
        return SystemHiberFileSize;
    }
    private static final int ProcessorIdleStatesHv = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorIdleStatesHv = 52
     * }
     */
    public static int ProcessorIdleStatesHv() {
        return ProcessorIdleStatesHv;
    }
    private static final int ProcessorPerfStatesHv = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPerfStatesHv = 53
     * }
     */
    public static int ProcessorPerfStatesHv() {
        return ProcessorPerfStatesHv;
    }
    private static final int ProcessorPerfCapHv = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorPerfCapHv = 54
     * }
     */
    public static int ProcessorPerfCapHv() {
        return ProcessorPerfCapHv;
    }
    private static final int ProcessorSetIdle = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorSetIdle = 55
     * }
     */
    public static int ProcessorSetIdle() {
        return ProcessorSetIdle;
    }
    private static final int LogicalProcessorIdling = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LogicalProcessorIdling = 56
     * }
     */
    public static int LogicalProcessorIdling() {
        return LogicalProcessorIdling;
    }
    private static final int UserPresence = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UserPresence = 57
     * }
     */
    public static int UserPresence() {
        return UserPresence;
    }
    private static final int PowerSettingNotificationName = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerSettingNotificationName = 58
     * }
     */
    public static int PowerSettingNotificationName() {
        return PowerSettingNotificationName;
    }
    private static final int GetPowerSettingValue = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GetPowerSettingValue = 59
     * }
     */
    public static int GetPowerSettingValue() {
        return GetPowerSettingValue;
    }
    private static final int IdleResiliency = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.IdleResiliency = 60
     * }
     */
    public static int IdleResiliency() {
        return IdleResiliency;
    }
    private static final int SessionRITState = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionRITState = 61
     * }
     */
    public static int SessionRITState() {
        return SessionRITState;
    }
    private static final int SessionConnectNotification = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionConnectNotification = 62
     * }
     */
    public static int SessionConnectNotification() {
        return SessionConnectNotification;
    }
    private static final int SessionPowerCleanup = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionPowerCleanup = 63
     * }
     */
    public static int SessionPowerCleanup() {
        return SessionPowerCleanup;
    }
    private static final int SessionLockState = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionLockState = 64
     * }
     */
    public static int SessionLockState() {
        return SessionLockState;
    }
    private static final int SystemHiberbootState = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemHiberbootState = 65
     * }
     */
    public static int SystemHiberbootState() {
        return SystemHiberbootState;
    }
    private static final int PlatformInformation = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PlatformInformation = 66
     * }
     */
    public static int PlatformInformation() {
        return PlatformInformation;
    }
    private static final int PdcInvocation = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PdcInvocation = 67
     * }
     */
    public static int PdcInvocation() {
        return PdcInvocation;
    }
    private static final int MonitorInvocation = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorInvocation = 68
     * }
     */
    public static int MonitorInvocation() {
        return MonitorInvocation;
    }
    private static final int FirmwareTableInformationRegistered = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FirmwareTableInformationRegistered = 69
     * }
     */
    public static int FirmwareTableInformationRegistered() {
        return FirmwareTableInformationRegistered;
    }
    private static final int SetShutdownSelectedTime = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SetShutdownSelectedTime = 70
     * }
     */
    public static int SetShutdownSelectedTime() {
        return SetShutdownSelectedTime;
    }
    private static final int SuspendResumeInvocation = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SuspendResumeInvocation = 71
     * }
     */
    public static int SuspendResumeInvocation() {
        return SuspendResumeInvocation;
    }
    private static final int PlmPowerRequestCreate = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PlmPowerRequestCreate = 72
     * }
     */
    public static int PlmPowerRequestCreate() {
        return PlmPowerRequestCreate;
    }
    private static final int ScreenOff = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ScreenOff = 73
     * }
     */
    public static int ScreenOff() {
        return ScreenOff;
    }
    private static final int CsDeviceNotification = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CsDeviceNotification = 74
     * }
     */
    public static int CsDeviceNotification() {
        return CsDeviceNotification;
    }
    private static final int PlatformRole = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PlatformRole = 75
     * }
     */
    public static int PlatformRole() {
        return PlatformRole;
    }
    private static final int LastResumePerformance = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.LastResumePerformance = 76
     * }
     */
    public static int LastResumePerformance() {
        return LastResumePerformance;
    }
    private static final int DisplayBurst = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DisplayBurst = 77
     * }
     */
    public static int DisplayBurst() {
        return DisplayBurst;
    }
    private static final int ExitLatencySamplingPercentage = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ExitLatencySamplingPercentage = 78
     * }
     */
    public static int ExitLatencySamplingPercentage() {
        return ExitLatencySamplingPercentage;
    }
    private static final int RegisterSpmPowerSettings = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RegisterSpmPowerSettings = 79
     * }
     */
    public static int RegisterSpmPowerSettings() {
        return RegisterSpmPowerSettings;
    }
    private static final int PlatformIdleStates = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PlatformIdleStates = 80
     * }
     */
    public static int PlatformIdleStates() {
        return PlatformIdleStates;
    }
    private static final int ProcessorIdleVeto = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ProcessorIdleVeto = 81
     * }
     */
    public static int ProcessorIdleVeto() {
        return ProcessorIdleVeto;
    }
    private static final int PlatformIdleVeto = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PlatformIdleVeto = 82
     * }
     */
    public static int PlatformIdleVeto() {
        return PlatformIdleVeto;
    }
    private static final int SystemBatteryStatePrecise = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemBatteryStatePrecise = 83
     * }
     */
    public static int SystemBatteryStatePrecise() {
        return SystemBatteryStatePrecise;
    }
    private static final int ThermalEvent = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ThermalEvent = 84
     * }
     */
    public static int ThermalEvent() {
        return ThermalEvent;
    }
    private static final int PowerRequestActionInternal = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerRequestActionInternal = 85
     * }
     */
    public static int PowerRequestActionInternal() {
        return PowerRequestActionInternal;
    }
    private static final int BatteryDeviceState = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BatteryDeviceState = 86
     * }
     */
    public static int BatteryDeviceState() {
        return BatteryDeviceState;
    }
    private static final int PowerInformationInternal = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerInformationInternal = 87
     * }
     */
    public static int PowerInformationInternal() {
        return PowerInformationInternal;
    }
    private static final int ThermalStandby = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ThermalStandby = 88
     * }
     */
    public static int ThermalStandby() {
        return ThermalStandby;
    }
    private static final int SystemHiberFileType = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SystemHiberFileType = 89
     * }
     */
    public static int SystemHiberFileType() {
        return SystemHiberFileType;
    }
    private static final int PhysicalPowerButtonPress = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PhysicalPowerButtonPress = 90
     * }
     */
    public static int PhysicalPowerButtonPress() {
        return PhysicalPowerButtonPress;
    }
    private static final int QueryPotentialDripsConstraint = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QueryPotentialDripsConstraint = 91
     * }
     */
    public static int QueryPotentialDripsConstraint() {
        return QueryPotentialDripsConstraint;
    }
    private static final int EnergyTrackerCreate = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.EnergyTrackerCreate = 92
     * }
     */
    public static int EnergyTrackerCreate() {
        return EnergyTrackerCreate;
    }
    private static final int EnergyTrackerQuery = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.EnergyTrackerQuery = 93
     * }
     */
    public static int EnergyTrackerQuery() {
        return EnergyTrackerQuery;
    }
    private static final int UpdateBlackBoxRecorder = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UpdateBlackBoxRecorder = 94
     * }
     */
    public static int UpdateBlackBoxRecorder() {
        return UpdateBlackBoxRecorder;
    }
    private static final int SessionAllowExternalDmaDevices = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SessionAllowExternalDmaDevices = 95
     * }
     */
    public static int SessionAllowExternalDmaDevices() {
        return SessionAllowExternalDmaDevices;
    }
    private static final int PowerInformationLevelMaximum = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PowerInformationLevelMaximum = 96
     * }
     */
    public static int PowerInformationLevelMaximum() {
        return PowerInformationLevelMaximum;
    }
    private static final int UserNotPresent = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UserNotPresent = 0
     * }
     */
    public static int UserNotPresent() {
        return UserNotPresent;
    }
    private static final int UserPresent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UserPresent = 1
     * }
     */
    public static int UserPresent() {
        return UserPresent;
    }
    private static final int UserUnknown = (int)255L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.UserUnknown = 255
     * }
     */
    public static int UserUnknown() {
        return UserUnknown;
    }
    /**
     * {@snippet lang=c :
     * typedef enum {
     *     UserNotPresent = 0,
     *     UserPresent = 1,
     *     UserUnknown = 255
     * } *PPOWER_USER_PRESENCE_TYPE
     * }
     */
    public static final AddressLayout PPOWER_USER_PRESENCE_TYPE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_USER_PRESENCE {
     *     POWER_USER_PRESENCE_TYPE UserPresence;
     * } *PPOWER_USER_PRESENCE
     * }
     */
    public static final AddressLayout PPOWER_USER_PRESENCE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_SESSION_CONNECT {
     *     BOOLEAN Connected;
     *     BOOLEAN Console;
     * } *PPOWER_SESSION_CONNECT
     * }
     */
    public static final AddressLayout PPOWER_SESSION_CONNECT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_SESSION_TIMEOUTS {
     *     DWORD InputTimeout;
     *     DWORD DisplayTimeout;
     * } *PPOWER_SESSION_TIMEOUTS
     * }
     */
    public static final AddressLayout PPOWER_SESSION_TIMEOUTS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_SESSION_RIT_STATE {
     *     BOOLEAN Active;
     *     DWORD LastInputTime;
     * } *PPOWER_SESSION_RIT_STATE
     * }
     */
    public static final AddressLayout PPOWER_SESSION_RIT_STATE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_SESSION_WINLOGON {
     *     DWORD SessionId;
     *     BOOLEAN Console;
     *     BOOLEAN Locked;
     * } *PPOWER_SESSION_WINLOGON
     * }
     */
    public static final AddressLayout PPOWER_SESSION_WINLOGON = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
     *     BOOLEAN IsAllowed;
     * } *PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
     * }
     */
    public static final AddressLayout PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_IDLE_RESILIENCY {
     *     DWORD CoalescingTimeout;
     *     DWORD IdleResiliencyPeriod;
     * } *PPOWER_IDLE_RESILIENCY
     * }
     */
    public static final AddressLayout PPOWER_IDLE_RESILIENCY = freeglut_h.C_POINTER;
    private static final int MonitorRequestReasonUnknown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUnknown = 0
     * }
     */
    public static int MonitorRequestReasonUnknown() {
        return MonitorRequestReasonUnknown;
    }
    private static final int MonitorRequestReasonPowerButton = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPowerButton = 1
     * }
     */
    public static int MonitorRequestReasonPowerButton() {
        return MonitorRequestReasonPowerButton;
    }
    private static final int MonitorRequestReasonRemoteConnection = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonRemoteConnection = 2
     * }
     */
    public static int MonitorRequestReasonRemoteConnection() {
        return MonitorRequestReasonRemoteConnection;
    }
    private static final int MonitorRequestReasonScMonitorpower = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonScMonitorpower = 3
     * }
     */
    public static int MonitorRequestReasonScMonitorpower() {
        return MonitorRequestReasonScMonitorpower;
    }
    private static final int MonitorRequestReasonUserInput = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInput = 4
     * }
     */
    public static int MonitorRequestReasonUserInput() {
        return MonitorRequestReasonUserInput;
    }
    private static final int MonitorRequestReasonAcDcDisplayBurst = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonAcDcDisplayBurst = 5
     * }
     */
    public static int MonitorRequestReasonAcDcDisplayBurst() {
        return MonitorRequestReasonAcDcDisplayBurst;
    }
    private static final int MonitorRequestReasonUserDisplayBurst = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserDisplayBurst = 6
     * }
     */
    public static int MonitorRequestReasonUserDisplayBurst() {
        return MonitorRequestReasonUserDisplayBurst;
    }
    private static final int MonitorRequestReasonPoSetSystemState = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPoSetSystemState = 7
     * }
     */
    public static int MonitorRequestReasonPoSetSystemState() {
        return MonitorRequestReasonPoSetSystemState;
    }
    private static final int MonitorRequestReasonSetThreadExecutionState = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSetThreadExecutionState = 8
     * }
     */
    public static int MonitorRequestReasonSetThreadExecutionState() {
        return MonitorRequestReasonSetThreadExecutionState;
    }
    private static final int MonitorRequestReasonFullWake = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonFullWake = 9
     * }
     */
    public static int MonitorRequestReasonFullWake() {
        return MonitorRequestReasonFullWake;
    }
    private static final int MonitorRequestReasonSessionUnlock = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSessionUnlock = 10
     * }
     */
    public static int MonitorRequestReasonSessionUnlock() {
        return MonitorRequestReasonSessionUnlock;
    }
    private static final int MonitorRequestReasonScreenOffRequest = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonScreenOffRequest = 11
     * }
     */
    public static int MonitorRequestReasonScreenOffRequest() {
        return MonitorRequestReasonScreenOffRequest;
    }
    private static final int MonitorRequestReasonIdleTimeout = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonIdleTimeout = 12
     * }
     */
    public static int MonitorRequestReasonIdleTimeout() {
        return MonitorRequestReasonIdleTimeout;
    }
    private static final int MonitorRequestReasonPolicyChange = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPolicyChange = 13
     * }
     */
    public static int MonitorRequestReasonPolicyChange() {
        return MonitorRequestReasonPolicyChange;
    }
    private static final int MonitorRequestReasonSleepButton = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSleepButton = 14
     * }
     */
    public static int MonitorRequestReasonSleepButton() {
        return MonitorRequestReasonSleepButton;
    }
    private static final int MonitorRequestReasonLid = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonLid = 15
     * }
     */
    public static int MonitorRequestReasonLid() {
        return MonitorRequestReasonLid;
    }
    private static final int MonitorRequestReasonBatteryCountChange = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonBatteryCountChange = 16
     * }
     */
    public static int MonitorRequestReasonBatteryCountChange() {
        return MonitorRequestReasonBatteryCountChange;
    }
    private static final int MonitorRequestReasonGracePeriod = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonGracePeriod = 17
     * }
     */
    public static int MonitorRequestReasonGracePeriod() {
        return MonitorRequestReasonGracePeriod;
    }
    private static final int MonitorRequestReasonPnP = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPnP = 18
     * }
     */
    public static int MonitorRequestReasonPnP() {
        return MonitorRequestReasonPnP;
    }
    private static final int MonitorRequestReasonDP = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonDP = 19
     * }
     */
    public static int MonitorRequestReasonDP() {
        return MonitorRequestReasonDP;
    }
    private static final int MonitorRequestReasonSxTransition = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSxTransition = 20
     * }
     */
    public static int MonitorRequestReasonSxTransition() {
        return MonitorRequestReasonSxTransition;
    }
    private static final int MonitorRequestReasonSystemIdle = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSystemIdle = 21
     * }
     */
    public static int MonitorRequestReasonSystemIdle() {
        return MonitorRequestReasonSystemIdle;
    }
    private static final int MonitorRequestReasonNearProximity = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonNearProximity = 22
     * }
     */
    public static int MonitorRequestReasonNearProximity() {
        return MonitorRequestReasonNearProximity;
    }
    private static final int MonitorRequestReasonThermalStandby = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonThermalStandby = 23
     * }
     */
    public static int MonitorRequestReasonThermalStandby() {
        return MonitorRequestReasonThermalStandby;
    }
    private static final int MonitorRequestReasonResumePdc = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonResumePdc = 24
     * }
     */
    public static int MonitorRequestReasonResumePdc() {
        return MonitorRequestReasonResumePdc;
    }
    private static final int MonitorRequestReasonResumeS4 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonResumeS4 = 25
     * }
     */
    public static int MonitorRequestReasonResumeS4() {
        return MonitorRequestReasonResumeS4;
    }
    private static final int MonitorRequestReasonTerminal = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonTerminal = 26
     * }
     */
    public static int MonitorRequestReasonTerminal() {
        return MonitorRequestReasonTerminal;
    }
    private static final int MonitorRequestReasonPdcSignal = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignal = 27
     * }
     */
    public static int MonitorRequestReasonPdcSignal() {
        return MonitorRequestReasonPdcSignal;
    }
    private static final int MonitorRequestReasonAcDcDisplayBurstSuppressed = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonAcDcDisplayBurstSuppressed = 28
     * }
     */
    public static int MonitorRequestReasonAcDcDisplayBurstSuppressed() {
        return MonitorRequestReasonAcDcDisplayBurstSuppressed;
    }
    private static final int MonitorRequestReasonSystemStateEntered = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonSystemStateEntered = 29
     * }
     */
    public static int MonitorRequestReasonSystemStateEntered() {
        return MonitorRequestReasonSystemStateEntered;
    }
    private static final int MonitorRequestReasonWinrt = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonWinrt = 30
     * }
     */
    public static int MonitorRequestReasonWinrt() {
        return MonitorRequestReasonWinrt;
    }
    private static final int MonitorRequestReasonUserInputKeyboard = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputKeyboard = 31
     * }
     */
    public static int MonitorRequestReasonUserInputKeyboard() {
        return MonitorRequestReasonUserInputKeyboard;
    }
    private static final int MonitorRequestReasonUserInputMouse = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputMouse = 32
     * }
     */
    public static int MonitorRequestReasonUserInputMouse() {
        return MonitorRequestReasonUserInputMouse;
    }
    private static final int MonitorRequestReasonUserInputTouch = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputTouch = 33
     * }
     */
    public static int MonitorRequestReasonUserInputTouch() {
        return MonitorRequestReasonUserInputTouch;
    }
    private static final int MonitorRequestReasonUserInputPen = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputPen = 34
     * }
     */
    public static int MonitorRequestReasonUserInputPen() {
        return MonitorRequestReasonUserInputPen;
    }
    private static final int MonitorRequestReasonUserInputAccelerometer = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputAccelerometer = 35
     * }
     */
    public static int MonitorRequestReasonUserInputAccelerometer() {
        return MonitorRequestReasonUserInputAccelerometer;
    }
    private static final int MonitorRequestReasonUserInputHid = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputHid = 36
     * }
     */
    public static int MonitorRequestReasonUserInputHid() {
        return MonitorRequestReasonUserInputHid;
    }
    private static final int MonitorRequestReasonUserInputPoUserPresent = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputPoUserPresent = 37
     * }
     */
    public static int MonitorRequestReasonUserInputPoUserPresent() {
        return MonitorRequestReasonUserInputPoUserPresent;
    }
    private static final int MonitorRequestReasonUserInputSessionSwitch = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputSessionSwitch = 38
     * }
     */
    public static int MonitorRequestReasonUserInputSessionSwitch() {
        return MonitorRequestReasonUserInputSessionSwitch;
    }
    private static final int MonitorRequestReasonUserInputInitialization = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonUserInputInitialization = 39
     * }
     */
    public static int MonitorRequestReasonUserInputInitialization() {
        return MonitorRequestReasonUserInputInitialization;
    }
    private static final int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40
     * }
     */
    public static int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif() {
        return MonitorRequestReasonPdcSignalWindowsMobilePwrNotif;
    }
    private static final int MonitorRequestReasonPdcSignalWindowsMobileShell = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignalWindowsMobileShell = 41
     * }
     */
    public static int MonitorRequestReasonPdcSignalWindowsMobileShell() {
        return MonitorRequestReasonPdcSignalWindowsMobileShell;
    }
    private static final int MonitorRequestReasonPdcSignalHeyCortana = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignalHeyCortana = 42
     * }
     */
    public static int MonitorRequestReasonPdcSignalHeyCortana() {
        return MonitorRequestReasonPdcSignalHeyCortana;
    }
    private static final int MonitorRequestReasonPdcSignalHolographicShell = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignalHolographicShell = 43
     * }
     */
    public static int MonitorRequestReasonPdcSignalHolographicShell() {
        return MonitorRequestReasonPdcSignalHolographicShell;
    }
    private static final int MonitorRequestReasonPdcSignalFingerprint = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonPdcSignalFingerprint = 44
     * }
     */
    public static int MonitorRequestReasonPdcSignalFingerprint() {
        return MonitorRequestReasonPdcSignalFingerprint;
    }
    private static final int MonitorRequestReasonDirectedDrips = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonDirectedDrips = 45
     * }
     */
    public static int MonitorRequestReasonDirectedDrips() {
        return MonitorRequestReasonDirectedDrips;
    }
    private static final int MonitorRequestReasonDim = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonDim = 46
     * }
     */
    public static int MonitorRequestReasonDim() {
        return MonitorRequestReasonDim;
    }
    private static final int MonitorRequestReasonBuiltinPanel = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonBuiltinPanel = 47
     * }
     */
    public static int MonitorRequestReasonBuiltinPanel() {
        return MonitorRequestReasonBuiltinPanel;
    }
    private static final int MonitorRequestReasonDisplayRequiredUnDim = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonDisplayRequiredUnDim = 48
     * }
     */
    public static int MonitorRequestReasonDisplayRequiredUnDim() {
        return MonitorRequestReasonDisplayRequiredUnDim;
    }
    private static final int MonitorRequestReasonBatteryCountChangeSuppressed = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonBatteryCountChangeSuppressed = 49
     * }
     */
    public static int MonitorRequestReasonBatteryCountChangeSuppressed() {
        return MonitorRequestReasonBatteryCountChangeSuppressed;
    }
    private static final int MonitorRequestReasonResumeModernStandby = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonResumeModernStandby = 50
     * }
     */
    public static int MonitorRequestReasonResumeModernStandby() {
        return MonitorRequestReasonResumeModernStandby;
    }
    private static final int MonitorRequestReasonMax = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.MonitorRequestReasonMax = 51
     * }
     */
    public static int MonitorRequestReasonMax() {
        return MonitorRequestReasonMax;
    }
    private static final int MonitorRequestTypeOff = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeOff = 0
     * }
     */
    public static int MonitorRequestTypeOff() {
        return MonitorRequestTypeOff;
    }
    private static final int MonitorRequestTypeOnAndPresent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeOnAndPresent = 1
     * }
     */
    public static int MonitorRequestTypeOnAndPresent() {
        return MonitorRequestTypeOnAndPresent;
    }
    private static final int MonitorRequestTypeToggleOn = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeToggleOn = 2
     * }
     */
    public static int MonitorRequestTypeToggleOn() {
        return MonitorRequestTypeToggleOn;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_MONITOR_INVOCATION {
     *     BOOLEAN Console;
     *     POWER_MONITOR_REQUEST_REASON RequestReason;
     * } *PPOWER_MONITOR_INVOCATION
     * }
     */
    public static final AddressLayout PPOWER_MONITOR_INVOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RESUME_PERFORMANCE {
     *     DWORD PostTimeMs;
     *     ULONGLONG TotalResumeTimeMs;
     *     ULONGLONG ResumeCompleteTimestamp;
     * } *PRESUME_PERFORMANCE
     * }
     */
    public static final AddressLayout PRESUME_PERFORMANCE = freeglut_h.C_POINTER;
    private static final int PoAc = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PoAc = 0
     * }
     */
    public static int PoAc() {
        return PoAc;
    }
    private static final int PoDc = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PoDc = 1
     * }
     */
    public static int PoDc() {
        return PoDc;
    }
    private static final int PoHot = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PoHot = 2
     * }
     */
    public static int PoHot() {
        return PoHot;
    }
    private static final int PoConditionMaximum = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PoConditionMaximum = 3
     * }
     */
    public static int PoConditionMaximum() {
        return PoConditionMaximum;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Version;
     *     GUID Guid;
     *     SYSTEM_POWER_CONDITION PowerCondition;
     *     DWORD DataLength;
     *     BYTE Data[1];
     * } *PSET_POWER_SETTING_VALUE
     * }
     */
    public static final AddressLayout PSET_POWER_SETTING_VALUE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     GUID Guid;
     * } *PNOTIFY_USER_POWER_SETTING
     * }
     */
    public static final AddressLayout PNOTIFY_USER_POWER_SETTING = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
     *     LARGE_INTEGER ActivationTime;
     *     DWORD Flags;
     *     DWORD ButtonInstanceID;
     * } *PAPPLICATIONLAUNCH_SETTING_VALUE
     * }
     */
    public static final AddressLayout PAPPLICATIONLAUNCH_SETTING_VALUE = freeglut_h.C_POINTER;
    private static final int PlatformRoleUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleUnspecified = 0
     * }
     */
    public static int PlatformRoleUnspecified() {
        return PlatformRoleUnspecified;
    }
    private static final int PlatformRoleDesktop = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleDesktop = 1
     * }
     */
    public static int PlatformRoleDesktop() {
        return PlatformRoleDesktop;
    }
    private static final int PlatformRoleMobile = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleMobile = 2
     * }
     */
    public static int PlatformRoleMobile() {
        return PlatformRoleMobile;
    }
    private static final int PlatformRoleWorkstation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleWorkstation = 3
     * }
     */
    public static int PlatformRoleWorkstation() {
        return PlatformRoleWorkstation;
    }
    private static final int PlatformRoleEnterpriseServer = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleEnterpriseServer = 4
     * }
     */
    public static int PlatformRoleEnterpriseServer() {
        return PlatformRoleEnterpriseServer;
    }
    private static final int PlatformRoleSOHOServer = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleSOHOServer = 5
     * }
     */
    public static int PlatformRoleSOHOServer() {
        return PlatformRoleSOHOServer;
    }
    private static final int PlatformRoleAppliancePC = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleAppliancePC = 6
     * }
     */
    public static int PlatformRoleAppliancePC() {
        return PlatformRoleAppliancePC;
    }
    private static final int PlatformRolePerformanceServer = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRolePerformanceServer = 7
     * }
     */
    public static int PlatformRolePerformanceServer() {
        return PlatformRolePerformanceServer;
    }
    private static final int PlatformRoleSlate = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleSlate = 8
     * }
     */
    public static int PlatformRoleSlate() {
        return PlatformRoleSlate;
    }
    private static final int PlatformRoleMaximum = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _POWER_PLATFORM_ROLE.PlatformRoleMaximum = 9
     * }
     */
    public static int PlatformRoleMaximum() {
        return PlatformRoleMaximum;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _POWER_PLATFORM_ROLE {
     *     PlatformRoleUnspecified = 0,
     *     PlatformRoleDesktop,
     *     PlatformRoleMobile,
     *     PlatformRoleWorkstation,
     *     PlatformRoleEnterpriseServer,
     *     PlatformRoleSOHOServer,
     *     PlatformRoleAppliancePC,
     *     PlatformRolePerformanceServer,
     *     PlatformRoleSlate,
     *     PlatformRoleMaximum
     * } *PPOWER_PLATFORM_ROLE
     * }
     */
    public static final AddressLayout PPOWER_PLATFORM_ROLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POWER_PLATFORM_INFORMATION {
     *     BOOLEAN AoAc;
     * } *PPOWER_PLATFORM_INFORMATION
     * }
     */
    public static final AddressLayout PPOWER_PLATFORM_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Granularity;
     *     DWORD Capacity;
     * } *PBATTERY_REPORTING_SCALE
     * }
     */
    public static final AddressLayout PBATTERY_REPORTING_SCALE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Frequency;
     *     DWORD Flags;
     *     DWORD PercentFrequency;
     * } *PPPM_WMI_LEGACY_PERFSTATE
     * }
     */
    public static final AddressLayout PPPM_WMI_LEGACY_PERFSTATE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Latency;
     *     DWORD Power;
     *     DWORD TimeCheck;
     *     BYTE PromotePercent;
     *     BYTE DemotePercent;
     *     BYTE StateType;
     *     BYTE Reserved;
     *     DWORD StateFlags;
     *     DWORD Context;
     *     DWORD IdleHandler;
     *     DWORD Reserved1;
     * } *PPPM_WMI_IDLE_STATE
     * }
     */
    public static final AddressLayout PPPM_WMI_IDLE_STATE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Type;
     *     DWORD Count;
     *     DWORD TargetState;
     *     DWORD OldState;
     *     DWORD64 TargetProcessors;
     *     PPM_WMI_IDLE_STATE State[1];
     * } *PPPM_WMI_IDLE_STATES
     * }
     */
    public static final AddressLayout PPPM_WMI_IDLE_STATES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Type;
     *     DWORD Count;
     *     DWORD TargetState;
     *     DWORD OldState;
     *     PVOID TargetProcessors;
     *     PPM_WMI_IDLE_STATE State[1];
     * } *PPPM_WMI_IDLE_STATES_EX
     * }
     */
    public static final AddressLayout PPPM_WMI_IDLE_STATES_EX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Frequency;
     *     DWORD Power;
     *     BYTE PercentFrequency;
     *     BYTE IncreaseLevel;
     *     BYTE DecreaseLevel;
     *     BYTE Type;
     *     DWORD IncreaseTime;
     *     DWORD DecreaseTime;
     *     DWORD64 Control;
     *     DWORD64 Status;
     *     DWORD HitCount;
     *     DWORD Reserved1;
     *     DWORD64 Reserved2;
     *     DWORD64 Reserved3;
     * } *PPPM_WMI_PERF_STATE
     * }
     */
    public static final AddressLayout PPPM_WMI_PERF_STATE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Count;
     *     DWORD MaxFrequency;
     *     DWORD CurrentState;
     *     DWORD MaxPerfState;
     *     DWORD MinPerfState;
     *     DWORD LowestPerfState;
     *     DWORD ThermalConstraint;
     *     BYTE BusyAdjThreshold;
     *     BYTE PolicyType;
     *     BYTE Type;
     *     BYTE Reserved;
     *     DWORD TimerInterval;
     *     DWORD64 TargetProcessors;
     *     DWORD PStateHandler;
     *     DWORD PStateContext;
     *     DWORD TStateHandler;
     *     DWORD TStateContext;
     *     DWORD FeedbackHandler;
     *     DWORD Reserved1;
     *     DWORD64 Reserved2;
     *     PPM_WMI_PERF_STATE State[1];
     * } *PPPM_WMI_PERF_STATES
     * }
     */
    public static final AddressLayout PPPM_WMI_PERF_STATES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Count;
     *     DWORD MaxFrequency;
     *     DWORD CurrentState;
     *     DWORD MaxPerfState;
     *     DWORD MinPerfState;
     *     DWORD LowestPerfState;
     *     DWORD ThermalConstraint;
     *     BYTE BusyAdjThreshold;
     *     BYTE PolicyType;
     *     BYTE Type;
     *     BYTE Reserved;
     *     DWORD TimerInterval;
     *     PVOID TargetProcessors;
     *     DWORD PStateHandler;
     *     DWORD PStateContext;
     *     DWORD TStateHandler;
     *     DWORD TStateContext;
     *     DWORD FeedbackHandler;
     *     DWORD Reserved1;
     *     DWORD64 Reserved2;
     *     PPM_WMI_PERF_STATE State[1];
     * } *PPPM_WMI_PERF_STATES_EX
     * }
     */
    public static final AddressLayout PPPM_WMI_PERF_STATES_EX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD IdleTransitions;
     *     DWORD FailedTransitions;
     *     DWORD InvalidBucketIndex;
     *     DWORD64 TotalTime;
     *     DWORD IdleTimeBuckets[6];
     * } *PPPM_IDLE_STATE_ACCOUNTING
     * }
     */
    public static final AddressLayout PPPM_IDLE_STATE_ACCOUNTING = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD StateCount;
     *     DWORD TotalTransitions;
     *     DWORD ResetCount;
     *     DWORD64 StartTime;
     *     PPM_IDLE_STATE_ACCOUNTING State[1];
     * } *PPPM_IDLE_ACCOUNTING
     * }
     */
    public static final AddressLayout PPPM_IDLE_ACCOUNTING = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD64 TotalTimeUs;
     *     DWORD MinTimeUs;
     *     DWORD MaxTimeUs;
     *     DWORD Count;
     * } *PPPM_IDLE_STATE_BUCKET_EX
     * }
     */
    public static final AddressLayout PPPM_IDLE_STATE_BUCKET_EX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD64 TotalTime;
     *     DWORD IdleTransitions;
     *     DWORD FailedTransitions;
     *     DWORD InvalidBucketIndex;
     *     DWORD MinTimeUs;
     *     DWORD MaxTimeUs;
     *     DWORD CancelledTransitions;
     *     PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
     * } *PPPM_IDLE_STATE_ACCOUNTING_EX
     * }
     */
    public static final AddressLayout PPPM_IDLE_STATE_ACCOUNTING_EX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD StateCount;
     *     DWORD TotalTransitions;
     *     DWORD ResetCount;
     *     DWORD AbortCount;
     *     DWORD64 StartTime;
     *     PPM_IDLE_STATE_ACCOUNTING_EX State[1];
     * } *PPPM_IDLE_ACCOUNTING_EX
     * }
     */
    public static final AddressLayout PPPM_IDLE_ACCOUNTING_EX = freeglut_h.C_POINTER;

    private static class PPM_PERFSTATE_CHANGE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_PERFSTATE_CHANGE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_CHANGE_GUID
     * }
     */
    public static GroupLayout PPM_PERFSTATE_CHANGE_GUID$layout() {
        return PPM_PERFSTATE_CHANGE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_CHANGE_GUID
     * }
     */
    public static MemorySegment PPM_PERFSTATE_CHANGE_GUID() {
        return PPM_PERFSTATE_CHANGE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_CHANGE_GUID
     * }
     */
    public static void PPM_PERFSTATE_CHANGE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_PERFSTATE_CHANGE_GUID$constants.SEGMENT, 0L, PPM_PERFSTATE_CHANGE_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_PERFSTATE_DOMAIN_CHANGE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_PERFSTATE_DOMAIN_CHANGE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID
     * }
     */
    public static GroupLayout PPM_PERFSTATE_DOMAIN_CHANGE_GUID$layout() {
        return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID
     * }
     */
    public static MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID() {
        return PPM_PERFSTATE_DOMAIN_CHANGE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATE_DOMAIN_CHANGE_GUID
     * }
     */
    public static void PPM_PERFSTATE_DOMAIN_CHANGE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_PERFSTATE_DOMAIN_CHANGE_GUID$constants.SEGMENT, 0L, PPM_PERFSTATE_DOMAIN_CHANGE_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_IDLESTATE_CHANGE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_IDLESTATE_CHANGE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATE_CHANGE_GUID
     * }
     */
    public static GroupLayout PPM_IDLESTATE_CHANGE_GUID$layout() {
        return PPM_IDLESTATE_CHANGE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATE_CHANGE_GUID
     * }
     */
    public static MemorySegment PPM_IDLESTATE_CHANGE_GUID() {
        return PPM_IDLESTATE_CHANGE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATE_CHANGE_GUID
     * }
     */
    public static void PPM_IDLESTATE_CHANGE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_IDLESTATE_CHANGE_GUID$constants.SEGMENT, 0L, PPM_IDLESTATE_CHANGE_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_PERFSTATES_DATA_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_PERFSTATES_DATA_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATES_DATA_GUID
     * }
     */
    public static GroupLayout PPM_PERFSTATES_DATA_GUID$layout() {
        return PPM_PERFSTATES_DATA_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATES_DATA_GUID
     * }
     */
    public static MemorySegment PPM_PERFSTATES_DATA_GUID() {
        return PPM_PERFSTATES_DATA_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFSTATES_DATA_GUID
     * }
     */
    public static void PPM_PERFSTATES_DATA_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_PERFSTATES_DATA_GUID$constants.SEGMENT, 0L, PPM_PERFSTATES_DATA_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_IDLESTATES_DATA_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_IDLESTATES_DATA_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATES_DATA_GUID
     * }
     */
    public static GroupLayout PPM_IDLESTATES_DATA_GUID$layout() {
        return PPM_IDLESTATES_DATA_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATES_DATA_GUID
     * }
     */
    public static MemorySegment PPM_IDLESTATES_DATA_GUID() {
        return PPM_IDLESTATES_DATA_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLESTATES_DATA_GUID
     * }
     */
    public static void PPM_IDLESTATES_DATA_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_IDLESTATES_DATA_GUID$constants.SEGMENT, 0L, PPM_IDLESTATES_DATA_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_IDLE_ACCOUNTING_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_IDLE_ACCOUNTING_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_GUID
     * }
     */
    public static GroupLayout PPM_IDLE_ACCOUNTING_GUID$layout() {
        return PPM_IDLE_ACCOUNTING_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_GUID
     * }
     */
    public static MemorySegment PPM_IDLE_ACCOUNTING_GUID() {
        return PPM_IDLE_ACCOUNTING_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_GUID
     * }
     */
    public static void PPM_IDLE_ACCOUNTING_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_IDLE_ACCOUNTING_GUID$constants.SEGMENT, 0L, PPM_IDLE_ACCOUNTING_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_IDLE_ACCOUNTING_EX_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_IDLE_ACCOUNTING_EX_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID
     * }
     */
    public static GroupLayout PPM_IDLE_ACCOUNTING_EX_GUID$layout() {
        return PPM_IDLE_ACCOUNTING_EX_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID
     * }
     */
    public static MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID() {
        return PPM_IDLE_ACCOUNTING_EX_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_IDLE_ACCOUNTING_EX_GUID
     * }
     */
    public static void PPM_IDLE_ACCOUNTING_EX_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_IDLE_ACCOUNTING_EX_GUID$constants.SEGMENT, 0L, PPM_IDLE_ACCOUNTING_EX_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_THERMALCONSTRAINT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_THERMALCONSTRAINT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMALCONSTRAINT_GUID
     * }
     */
    public static GroupLayout PPM_THERMALCONSTRAINT_GUID$layout() {
        return PPM_THERMALCONSTRAINT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMALCONSTRAINT_GUID
     * }
     */
    public static MemorySegment PPM_THERMALCONSTRAINT_GUID() {
        return PPM_THERMALCONSTRAINT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMALCONSTRAINT_GUID
     * }
     */
    public static void PPM_THERMALCONSTRAINT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_THERMALCONSTRAINT_GUID$constants.SEGMENT, 0L, PPM_THERMALCONSTRAINT_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_PERFMON_PERFSTATE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_PERFMON_PERFSTATE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFMON_PERFSTATE_GUID
     * }
     */
    public static GroupLayout PPM_PERFMON_PERFSTATE_GUID$layout() {
        return PPM_PERFMON_PERFSTATE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFMON_PERFSTATE_GUID
     * }
     */
    public static MemorySegment PPM_PERFMON_PERFSTATE_GUID() {
        return PPM_PERFMON_PERFSTATE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_PERFMON_PERFSTATE_GUID
     * }
     */
    public static void PPM_PERFMON_PERFSTATE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_PERFMON_PERFSTATE_GUID$constants.SEGMENT, 0L, PPM_PERFMON_PERFSTATE_GUID$constants.LAYOUT.byteSize());
    }

    private static class PPM_THERMAL_POLICY_CHANGE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = freeglut_h.findOrThrow("PPM_THERMAL_POLICY_CHANGE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID
     * }
     */
    public static GroupLayout PPM_THERMAL_POLICY_CHANGE_GUID$layout() {
        return PPM_THERMAL_POLICY_CHANGE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID
     * }
     */
    public static MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID() {
        return PPM_THERMAL_POLICY_CHANGE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID PPM_THERMAL_POLICY_CHANGE_GUID
     * }
     */
    public static void PPM_THERMAL_POLICY_CHANGE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, PPM_THERMAL_POLICY_CHANGE_GUID$constants.SEGMENT, 0L, PPM_THERMAL_POLICY_CHANGE_GUID$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD State;
     *     DWORD Status;
     *     DWORD Latency;
     *     DWORD Speed;
     *     DWORD Processor;
     * } *PPPM_PERFSTATE_EVENT
     * }
     */
    public static final AddressLayout PPPM_PERFSTATE_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD State;
     *     DWORD Latency;
     *     DWORD Speed;
     *     DWORD64 Processors;
     * } *PPPM_PERFSTATE_DOMAIN_EVENT
     * }
     */
    public static final AddressLayout PPPM_PERFSTATE_DOMAIN_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD NewState;
     *     DWORD OldState;
     *     DWORD64 Processors;
     * } *PPPM_IDLESTATE_EVENT
     * }
     */
    public static final AddressLayout PPPM_IDLESTATE_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD ThermalConstraint;
     *     DWORD64 Processors;
     * } *PPPM_THERMALCHANGE_EVENT
     * }
     */
    public static final AddressLayout PPPM_THERMALCHANGE_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     BYTE Mode;
     *     DWORD64 Processors;
     * } *PPPM_THERMAL_POLICY_EVENT
     * }
     */
    public static final AddressLayout PPPM_THERMAL_POLICY_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     POWER_ACTION Action;
     *     DWORD Flags;
     *     DWORD EventCode;
     * } *PPOWER_ACTION_POLICY
     * }
     */
    public static final AddressLayout PPOWER_ACTION_POLICY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     BOOLEAN Enable;
     *     BYTE Spare[3];
     *     DWORD BatteryLevel;
     *     POWER_ACTION_POLICY PowerPolicy;
     *     SYSTEM_POWER_STATE MinSystemState;
     * } *PSYSTEM_POWER_LEVEL
     * }
     */
    public static final AddressLayout PSYSTEM_POWER_LEVEL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SYSTEM_POWER_POLICY {
     *     DWORD Revision;
     *     POWER_ACTION_POLICY PowerButton;
     *     POWER_ACTION_POLICY SleepButton;
     *     POWER_ACTION_POLICY LidClose;
     *     SYSTEM_POWER_STATE LidOpenWake;
     *     DWORD Reserved;
     *     POWER_ACTION_POLICY Idle;
     *     DWORD IdleTimeout;
     *     BYTE IdleSensitivity;
     *     BYTE DynamicThrottle;
     *     BYTE Spare2[2];
     *     SYSTEM_POWER_STATE MinSleep;
     *     SYSTEM_POWER_STATE MaxSleep;
     *     SYSTEM_POWER_STATE ReducedLatencySleep;
     *     DWORD WinLogonFlags;
     *     DWORD Spare3;
     *     DWORD DozeS4Timeout;
     *     DWORD BroadcastCapacityResolution;
     *     SYSTEM_POWER_LEVEL DischargePolicy[4];
     *     DWORD VideoTimeout;
     *     BOOLEAN VideoDimDisplay;
     *     DWORD VideoReserved[3];
     *     DWORD SpindownTimeout;
     *     BOOLEAN OptimizeForPower;
     *     BYTE FanThrottleTolerance;
     *     BYTE ForcedThrottle;
     *     BYTE MinThrottle;
     *     POWER_ACTION_POLICY OverThrottled;
     * } *PSYSTEM_POWER_POLICY
     * }
     */
    public static final AddressLayout PSYSTEM_POWER_POLICY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD TimeCheck;
     *     BYTE DemotePercent;
     *     BYTE PromotePercent;
     *     BYTE Spare[2];
     * } *PPROCESSOR_IDLESTATE_INFO
     * }
     */
    public static final AddressLayout PPROCESSOR_IDLESTATE_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     WORD Revision;
     *     union {
     *         WORD AsWORD;
     *         struct {
     *             WORD AllowScaling : 1;
     *             WORD Disabled : 1;
     *             WORD Reserved : 14;
     *         };
     *     } Flags;
     *     DWORD PolicyCount;
     *     PROCESSOR_IDLESTATE_INFO Policy[3];
     * } *PPROCESSOR_IDLESTATE_POLICY
     * }
     */
    public static final AddressLayout PPROCESSOR_IDLESTATE_POLICY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROCESSOR_POWER_POLICY_INFO {
     *     DWORD TimeCheck;
     *     DWORD DemoteLimit;
     *     DWORD PromoteLimit;
     *     BYTE DemotePercent;
     *     BYTE PromotePercent;
     *     BYTE Spare[2];
     *     DWORD AllowDemotion : 1;
     *     DWORD AllowPromotion : 1;
     *     DWORD Reserved : 30;
     * } *PPROCESSOR_POWER_POLICY_INFO
     * }
     */
    public static final AddressLayout PPROCESSOR_POWER_POLICY_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROCESSOR_POWER_POLICY {
     *     DWORD Revision;
     *     BYTE DynamicThrottle;
     *     BYTE Spare[3];
     *     DWORD DisableCStates : 1;
     *     DWORD Reserved : 31;
     *     DWORD PolicyCount;
     *     PROCESSOR_POWER_POLICY_INFO Policy[3];
     * } *PPROCESSOR_POWER_POLICY
     * }
     */
    public static final AddressLayout PPROCESSOR_POWER_POLICY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD Revision;
     *     BYTE MaxThrottle;
     *     BYTE MinThrottle;
     *     BYTE BusyAdjThreshold;
     *     union {
     *         BYTE Spare;
     *         union {
     *             BYTE AsBYTE;
     *             struct {
     *                 BYTE NoDomainAccounting : 1;
     *                 BYTE IncreasePolicy : 2;
     *                 BYTE DecreasePolicy : 2;
     *                 BYTE Reserved : 3;
     *             };
     *         } Flags;
     *     };
     *     DWORD TimeCheck;
     *     DWORD IncreaseTime;
     *     DWORD DecreaseTime;
     *     DWORD IncreasePercent;
     *     DWORD DecreasePercent;
     * } *PPROCESSOR_PERFSTATE_POLICY
     * }
     */
    public static final AddressLayout PPROCESSOR_PERFSTATE_POLICY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADMINISTRATOR_POWER_POLICY {
     *     SYSTEM_POWER_STATE MinSleep;
     *     SYSTEM_POWER_STATE MaxSleep;
     *     DWORD MinVideoTimeout;
     *     DWORD MaxVideoTimeout;
     *     DWORD MinSpindownTimeout;
     *     DWORD MaxSpindownTimeout;
     * } *PADMINISTRATOR_POWER_POLICY
     * }
     */
    public static final AddressLayout PADMINISTRATOR_POWER_POLICY = freeglut_h.C_POINTER;
    private static final int HiberFileBucket1GB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket1GB = 0
     * }
     */
    public static int HiberFileBucket1GB() {
        return HiberFileBucket1GB;
    }
    private static final int HiberFileBucket2GB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket2GB = 1
     * }
     */
    public static int HiberFileBucket2GB() {
        return HiberFileBucket2GB;
    }
    private static final int HiberFileBucket4GB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket4GB = 2
     * }
     */
    public static int HiberFileBucket4GB() {
        return HiberFileBucket4GB;
    }
    private static final int HiberFileBucket8GB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket8GB = 3
     * }
     */
    public static int HiberFileBucket8GB() {
        return HiberFileBucket8GB;
    }
    private static final int HiberFileBucket16GB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket16GB = 4
     * }
     */
    public static int HiberFileBucket16GB() {
        return HiberFileBucket16GB;
    }
    private static final int HiberFileBucket32GB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucket32GB = 5
     * }
     */
    public static int HiberFileBucket32GB() {
        return HiberFileBucket32GB;
    }
    private static final int HiberFileBucketUnlimited = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucketUnlimited = 6
     * }
     */
    public static int HiberFileBucketUnlimited() {
        return HiberFileBucketUnlimited;
    }
    private static final int HiberFileBucketMax = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _HIBERFILE_BUCKET_SIZE.HiberFileBucketMax = 7
     * }
     */
    public static int HiberFileBucketMax() {
        return HiberFileBucketMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _HIBERFILE_BUCKET_SIZE {
     *     HiberFileBucket1GB = 0,
     *     HiberFileBucket2GB,
     *     HiberFileBucket4GB,
     *     HiberFileBucket8GB,
     *     HiberFileBucket16GB,
     *     HiberFileBucket32GB,
     *     HiberFileBucketUnlimited,
     *     HiberFileBucketMax
     * } *PHIBERFILE_BUCKET_SIZE
     * }
     */
    public static final AddressLayout PHIBERFILE_BUCKET_SIZE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _HIBERFILE_BUCKET {
     *     DWORD64 MaxPhysicalMemory;
     *     DWORD PhysicalMemoryPercent[3];
     * } *PHIBERFILE_BUCKET
     * }
     */
    public static final AddressLayout PHIBERFILE_BUCKET = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     BOOLEAN PowerButtonPresent;
     *     BOOLEAN SleepButtonPresent;
     *     BOOLEAN LidPresent;
     *     BOOLEAN SystemS1;
     *     BOOLEAN SystemS2;
     *     BOOLEAN SystemS3;
     *     BOOLEAN SystemS4;
     *     BOOLEAN SystemS5;
     *     BOOLEAN HiberFilePresent;
     *     BOOLEAN FullWake;
     *     BOOLEAN VideoDimPresent;
     *     BOOLEAN ApmPresent;
     *     BOOLEAN UpsPresent;
     *     BOOLEAN ThermalControl;
     *     BOOLEAN ProcessorThrottle;
     *     BYTE ProcessorMinThrottle;
     *     BYTE ProcessorMaxThrottle;
     *     BOOLEAN FastSystemS4;
     *     BOOLEAN Hiberboot;
     *     BOOLEAN WakeAlarmPresent;
     *     BOOLEAN AoAc;
     *     BOOLEAN DiskSpinDown;
     *     BYTE HiberFileType;
     *     BOOLEAN AoAcConnectivitySupported;
     *     BYTE spare3[6];
     *     BOOLEAN SystemBatteriesPresent;
     *     BOOLEAN BatteriesAreShortTerm;
     *     BATTERY_REPORTING_SCALE BatteryScale[3];
     *     SYSTEM_POWER_STATE AcOnLineWake;
     *     SYSTEM_POWER_STATE SoftLidWake;
     *     SYSTEM_POWER_STATE RtcWake;
     *     SYSTEM_POWER_STATE MinDeviceWakeState;
     *     SYSTEM_POWER_STATE DefaultLowLatencyWake;
     * } *PSYSTEM_POWER_CAPABILITIES
     * }
     */
    public static final AddressLayout PSYSTEM_POWER_CAPABILITIES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     BOOLEAN AcOnLine;
     *     BOOLEAN BatteryPresent;
     *     BOOLEAN Charging;
     *     BOOLEAN Discharging;
     *     BOOLEAN Spare1[3];
     *     BYTE Tag;
     *     DWORD MaxCapacity;
     *     DWORD RemainingCapacity;
     *     DWORD Rate;
     *     DWORD EstimatedTime;
     *     DWORD DefaultAlert1;
     *     DWORD DefaultAlert2;
     * } *PSYSTEM_BATTERY_STATE
     * }
     */
    public static final AddressLayout PSYSTEM_BATTERY_STATE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DOS_HEADER {
     *     WORD e_magic;
     *     WORD e_cblp;
     *     WORD e_cp;
     *     WORD e_crlc;
     *     WORD e_cparhdr;
     *     WORD e_minalloc;
     *     WORD e_maxalloc;
     *     WORD e_ss;
     *     WORD e_sp;
     *     WORD e_csum;
     *     WORD e_ip;
     *     WORD e_cs;
     *     WORD e_lfarlc;
     *     WORD e_ovno;
     *     WORD e_res[4];
     *     WORD e_oemid;
     *     WORD e_oeminfo;
     *     WORD e_res2[10];
     *     LONG e_lfanew;
     * } *PIMAGE_DOS_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_DOS_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_OS2_HEADER {
     *     WORD ne_magic;
     *     CHAR ne_ver;
     *     CHAR ne_rev;
     *     WORD ne_enttab;
     *     WORD ne_cbenttab;
     *     LONG ne_crc;
     *     WORD ne_flags;
     *     WORD ne_autodata;
     *     WORD ne_heap;
     *     WORD ne_stack;
     *     LONG ne_csip;
     *     LONG ne_sssp;
     *     WORD ne_cseg;
     *     WORD ne_cmod;
     *     WORD ne_cbnrestab;
     *     WORD ne_segtab;
     *     WORD ne_rsrctab;
     *     WORD ne_restab;
     *     WORD ne_modtab;
     *     WORD ne_imptab;
     *     LONG ne_nrestab;
     *     WORD ne_cmovent;
     *     WORD ne_align;
     *     WORD ne_cres;
     *     BYTE ne_exetyp;
     *     BYTE ne_flagsothers;
     *     WORD ne_pretthunks;
     *     WORD ne_psegrefbytes;
     *     WORD ne_swaparea;
     *     WORD ne_expver;
     * } *PIMAGE_OS2_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_OS2_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_VXD_HEADER {
     *     WORD e32_magic;
     *     BYTE e32_border;
     *     BYTE e32_worder;
     *     DWORD e32_level;
     *     WORD e32_cpu;
     *     WORD e32_os;
     *     DWORD e32_ver;
     *     DWORD e32_mflags;
     *     DWORD e32_mpages;
     *     DWORD e32_startobj;
     *     DWORD e32_eip;
     *     DWORD e32_stackobj;
     *     DWORD e32_esp;
     *     DWORD e32_pagesize;
     *     DWORD e32_lastpagesize;
     *     DWORD e32_fixupsize;
     *     DWORD e32_fixupsum;
     *     DWORD e32_ldrsize;
     *     DWORD e32_ldrsum;
     *     DWORD e32_objtab;
     *     DWORD e32_objcnt;
     *     DWORD e32_objmap;
     *     DWORD e32_itermap;
     *     DWORD e32_rsrctab;
     *     DWORD e32_rsrccnt;
     *     DWORD e32_restab;
     *     DWORD e32_enttab;
     *     DWORD e32_dirtab;
     *     DWORD e32_dircnt;
     *     DWORD e32_fpagetab;
     *     DWORD e32_frectab;
     *     DWORD e32_impmod;
     *     DWORD e32_impmodcnt;
     *     DWORD e32_impproc;
     *     DWORD e32_pagesum;
     *     DWORD e32_datapage;
     *     DWORD e32_preload;
     *     DWORD e32_nrestab;
     *     DWORD e32_cbnrestab;
     *     DWORD e32_nressum;
     *     DWORD e32_autodata;
     *     DWORD e32_debuginfo;
     *     DWORD e32_debuglen;
     *     DWORD e32_instpreload;
     *     DWORD e32_instdemand;
     *     DWORD e32_heapsize;
     *     BYTE e32_res3[12];
     *     DWORD e32_winresoff;
     *     DWORD e32_winreslen;
     *     WORD e32_devid;
     *     WORD e32_ddkver;
     * } *PIMAGE_VXD_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_VXD_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_FILE_HEADER {
     *     WORD Machine;
     *     WORD NumberOfSections;
     *     DWORD TimeDateStamp;
     *     DWORD PointerToSymbolTable;
     *     DWORD NumberOfSymbols;
     *     WORD SizeOfOptionalHeader;
     *     WORD Characteristics;
     * } *PIMAGE_FILE_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_FILE_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DATA_DIRECTORY {
     *     DWORD VirtualAddress;
     *     DWORD Size;
     * } *PIMAGE_DATA_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_DATA_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_OPTIONAL_HEADER {
     *     WORD Magic;
     *     BYTE MajorLinkerVersion;
     *     BYTE MinorLinkerVersion;
     *     DWORD SizeOfCode;
     *     DWORD SizeOfInitializedData;
     *     DWORD SizeOfUninitializedData;
     *     DWORD AddressOfEntryPoint;
     *     DWORD BaseOfCode;
     *     DWORD BaseOfData;
     *     DWORD ImageBase;
     *     DWORD SectionAlignment;
     *     DWORD FileAlignment;
     *     WORD MajorOperatingSystemVersion;
     *     WORD MinorOperatingSystemVersion;
     *     WORD MajorImageVersion;
     *     WORD MinorImageVersion;
     *     WORD MajorSubsystemVersion;
     *     WORD MinorSubsystemVersion;
     *     DWORD Win32VersionValue;
     *     DWORD SizeOfImage;
     *     DWORD SizeOfHeaders;
     *     DWORD CheckSum;
     *     WORD Subsystem;
     *     WORD DllCharacteristics;
     *     DWORD SizeOfStackReserve;
     *     DWORD SizeOfStackCommit;
     *     DWORD SizeOfHeapReserve;
     *     DWORD SizeOfHeapCommit;
     *     DWORD LoaderFlags;
     *     DWORD NumberOfRvaAndSizes;
     *     IMAGE_DATA_DIRECTORY DataDirectory[16];
     * } *PIMAGE_OPTIONAL_HEADER32
     * }
     */
    public static final AddressLayout PIMAGE_OPTIONAL_HEADER32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
     *     WORD Magic;
     *     BYTE MajorLinkerVersion;
     *     BYTE MinorLinkerVersion;
     *     DWORD SizeOfCode;
     *     DWORD SizeOfInitializedData;
     *     DWORD SizeOfUninitializedData;
     *     DWORD AddressOfEntryPoint;
     *     DWORD BaseOfCode;
     *     DWORD BaseOfData;
     *     DWORD BaseOfBss;
     *     DWORD GprMask;
     *     DWORD CprMask[4];
     *     DWORD GpValue;
     * } *PIMAGE_ROM_OPTIONAL_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_ROM_OPTIONAL_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_OPTIONAL_HEADER64 {
     *     WORD Magic;
     *     BYTE MajorLinkerVersion;
     *     BYTE MinorLinkerVersion;
     *     DWORD SizeOfCode;
     *     DWORD SizeOfInitializedData;
     *     DWORD SizeOfUninitializedData;
     *     DWORD AddressOfEntryPoint;
     *     DWORD BaseOfCode;
     *     ULONGLONG ImageBase;
     *     DWORD SectionAlignment;
     *     DWORD FileAlignment;
     *     WORD MajorOperatingSystemVersion;
     *     WORD MinorOperatingSystemVersion;
     *     WORD MajorImageVersion;
     *     WORD MinorImageVersion;
     *     WORD MajorSubsystemVersion;
     *     WORD MinorSubsystemVersion;
     *     DWORD Win32VersionValue;
     *     DWORD SizeOfImage;
     *     DWORD SizeOfHeaders;
     *     DWORD CheckSum;
     *     WORD Subsystem;
     *     WORD DllCharacteristics;
     *     ULONGLONG SizeOfStackReserve;
     *     ULONGLONG SizeOfStackCommit;
     *     ULONGLONG SizeOfHeapReserve;
     *     ULONGLONG SizeOfHeapCommit;
     *     DWORD LoaderFlags;
     *     DWORD NumberOfRvaAndSizes;
     *     IMAGE_DATA_DIRECTORY DataDirectory[16];
     * } *PIMAGE_OPTIONAL_HEADER64
     * }
     */
    public static final AddressLayout PIMAGE_OPTIONAL_HEADER64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_OPTIONAL_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_NT_HEADERS64 {
     *     DWORD Signature;
     *     IMAGE_FILE_HEADER FileHeader;
     *     IMAGE_OPTIONAL_HEADER64 OptionalHeader;
     * } *PIMAGE_NT_HEADERS64
     * }
     */
    public static final AddressLayout PIMAGE_NT_HEADERS64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_NT_HEADERS {
     *     DWORD Signature;
     *     IMAGE_FILE_HEADER FileHeader;
     *     IMAGE_OPTIONAL_HEADER32 OptionalHeader;
     * } *PIMAGE_NT_HEADERS32
     * }
     */
    public static final AddressLayout PIMAGE_NT_HEADERS32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ROM_HEADERS {
     *     IMAGE_FILE_HEADER FileHeader;
     *     IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
     * } *PIMAGE_ROM_HEADERS
     * }
     */
    public static final AddressLayout PIMAGE_ROM_HEADERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS
     * }
     */
    public static final AddressLayout PIMAGE_NT_HEADERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_SECTION_HEADER {
     *     BYTE Name[8];
     *     union {
     *         DWORD PhysicalAddress;
     *         DWORD VirtualSize;
     *     } Misc;
     *     DWORD VirtualAddress;
     *     DWORD SizeOfRawData;
     *     DWORD PointerToRawData;
     *     DWORD PointerToRelocations;
     *     DWORD PointerToLinenumbers;
     *     WORD NumberOfRelocations;
     *     WORD NumberOfLinenumbers;
     *     DWORD Characteristics;
     * } *PIMAGE_SECTION_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_SECTION_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_SYMBOL *PIMAGE_SYMBOL
     * }
     */
    public static final AddressLayout PIMAGE_SYMBOL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_SYMBOL_EX *PIMAGE_SYMBOL_EX
     * }
     */
    public static final AddressLayout PIMAGE_SYMBOL_EX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_AUX_SYMBOL_TOKEN_DEF *PIMAGE_AUX_SYMBOL_TOKEN_DEF
     * }
     */
    public static final AddressLayout PIMAGE_AUX_SYMBOL_TOKEN_DEF = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL
     * }
     */
    public static final AddressLayout PIMAGE_AUX_SYMBOL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_AUX_SYMBOL_EX *PIMAGE_AUX_SYMBOL_EX
     * }
     */
    public static final AddressLayout PIMAGE_AUX_SYMBOL_EX = freeglut_h.C_POINTER;
    private static final int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum IMAGE_AUX_SYMBOL_TYPE.IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
     * }
     */
    public static int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() {
        return IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF;
    }
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_RELOCATION *PIMAGE_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_LINENUMBER *PIMAGE_LINENUMBER
     * }
     */
    public static final AddressLayout PIMAGE_LINENUMBER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_BASE_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
     *     BYTE Name[16];
     *     BYTE Date[12];
     *     BYTE UserID[6];
     *     BYTE GroupID[6];
     *     BYTE Mode[8];
     *     BYTE Size[10];
     *     BYTE EndHeader[2];
     * } *PIMAGE_ARCHIVE_MEMBER_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_ARCHIVE_MEMBER_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_EXPORT_DIRECTORY {
     *     DWORD Characteristics;
     *     DWORD TimeDateStamp;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD Name;
     *     DWORD Base;
     *     DWORD NumberOfFunctions;
     *     DWORD NumberOfNames;
     *     DWORD AddressOfFunctions;
     *     DWORD AddressOfNames;
     *     DWORD AddressOfNameOrdinals;
     * } *PIMAGE_EXPORT_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_EXPORT_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_IMPORT_BY_NAME {
     *     WORD Hint;
     *     CHAR Name[1];
     * } *PIMAGE_IMPORT_BY_NAME
     * }
     */
    public static final AddressLayout PIMAGE_IMPORT_BY_NAME = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64
     * }
     */
    public static final AddressLayout PIMAGE_THUNK_DATA64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32
     * }
     */
    public static final AddressLayout PIMAGE_THUNK_DATA32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64
     * }
     */
    public static final AddressLayout PIMAGE_TLS_DIRECTORY64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32
     * }
     */
    public static final AddressLayout PIMAGE_TLS_DIRECTORY32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA
     * }
     */
    public static final AddressLayout PIMAGE_THUNK_DATA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_TLS_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR
     * }
     */
    public static final AddressLayout PIMAGE_IMPORT_DESCRIPTOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
     *     DWORD TimeDateStamp;
     *     WORD OffsetModuleName;
     *     WORD NumberOfModuleForwarderRefs;
     * } *PIMAGE_BOUND_IMPORT_DESCRIPTOR
     * }
     */
    public static final AddressLayout PIMAGE_BOUND_IMPORT_DESCRIPTOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_BOUND_FORWARDER_REF {
     *     DWORD TimeDateStamp;
     *     WORD OffsetModuleName;
     *     WORD Reserved;
     * } *PIMAGE_BOUND_FORWARDER_REF
     * }
     */
    public static final AddressLayout PIMAGE_BOUND_FORWARDER_REF = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
     *     union {
     *         DWORD AllAttributes;
     *         struct {
     *             DWORD RvaBased : 1;
     *             DWORD ReservedAttributes : 31;
     *         };
     *     } Attributes;
     *     DWORD DllNameRVA;
     *     DWORD ModuleHandleRVA;
     *     DWORD ImportAddressTableRVA;
     *     DWORD ImportNameTableRVA;
     *     DWORD BoundImportAddressTableRVA;
     *     DWORD UnloadInformationTableRVA;
     *     DWORD TimeDateStamp;
     * } *PIMAGE_DELAYLOAD_DESCRIPTOR
     * }
     */
    public static final AddressLayout PIMAGE_DELAYLOAD_DESCRIPTOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR
     * }
     */
    public static final AddressLayout PCIMAGE_DELAYLOAD_DESCRIPTOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RESOURCE_DIRECTORY {
     *     DWORD Characteristics;
     *     DWORD TimeDateStamp;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     WORD NumberOfNamedEntries;
     *     WORD NumberOfIdEntries;
     * } *PIMAGE_RESOURCE_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_RESOURCE_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
     *     union {
     *         struct {
     *             DWORD NameOffset : 31;
     *             DWORD NameIsString : 1;
     *         };
     *         DWORD Name;
     *         WORD Id;
     *     };
     *     union {
     *         DWORD OffsetToData;
     *         struct {
     *             DWORD OffsetToDirectory : 31;
     *             DWORD DataIsDirectory : 1;
     *         };
     *     };
     * } *PIMAGE_RESOURCE_DIRECTORY_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_RESOURCE_DIRECTORY_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
     *     WORD Length;
     *     CHAR NameString[1];
     * } *PIMAGE_RESOURCE_DIRECTORY_STRING
     * }
     */
    public static final AddressLayout PIMAGE_RESOURCE_DIRECTORY_STRING = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
     *     WORD Length;
     *     WCHAR NameString[1];
     * } *PIMAGE_RESOURCE_DIR_STRING_U
     * }
     */
    public static final AddressLayout PIMAGE_RESOURCE_DIR_STRING_U = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
     *     DWORD OffsetToData;
     *     DWORD Size;
     *     DWORD CodePage;
     *     DWORD Reserved;
     * } *PIMAGE_RESOURCE_DATA_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_RESOURCE_DATA_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
     *     WORD Flags;
     *     WORD Catalog;
     *     DWORD CatalogOffset;
     *     DWORD Reserved;
     * } *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY
     * }
     */
    public static final AddressLayout PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
     *     DWORD Version;
     *     DWORD Size;
     * } *PIMAGE_DYNAMIC_RELOCATION_TABLE
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION_TABLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
     *     DWORD Symbol;
     *     DWORD BaseRelocSize;
     * } *PIMAGE_DYNAMIC_RELOCATION32
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
     *     ULONGLONG Symbol;
     *     DWORD BaseRelocSize;
     * } *PIMAGE_DYNAMIC_RELOCATION64
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
     *     DWORD HeaderSize;
     *     DWORD FixupInfoSize;
     *     DWORD Symbol;
     *     DWORD SymbolGroup;
     *     DWORD Flags;
     * } *PIMAGE_DYNAMIC_RELOCATION32_V2
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION32_V2 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
     *     DWORD HeaderSize;
     *     DWORD FixupInfoSize;
     *     ULONGLONG Symbol;
     *     DWORD SymbolGroup;
     *     DWORD Flags;
     * } *PIMAGE_DYNAMIC_RELOCATION64_V2
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION64_V2 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_DYNAMIC_RELOCATION64 PIMAGE_DYNAMIC_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_DYNAMIC_RELOCATION64_V2 PIMAGE_DYNAMIC_RELOCATION_V2
     * }
     */
    public static final AddressLayout PIMAGE_DYNAMIC_RELOCATION_V2 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER *PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION *PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __unaligned IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION *PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
     * }
     */
    public static final AddressLayout PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
     *     DWORD Size;
     *     DWORD TimeDateStamp;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD GlobalFlagsClear;
     *     DWORD GlobalFlagsSet;
     *     DWORD CriticalSectionDefaultTimeout;
     *     DWORD DeCommitFreeBlockThreshold;
     *     DWORD DeCommitTotalFreeThreshold;
     *     DWORD LockPrefixTable;
     *     DWORD MaximumAllocationSize;
     *     DWORD VirtualMemoryThreshold;
     *     DWORD ProcessHeapFlags;
     *     DWORD ProcessAffinityMask;
     *     WORD CSDVersion;
     *     WORD DependentLoadFlags;
     *     DWORD EditList;
     *     DWORD SecurityCookie;
     *     DWORD SEHandlerTable;
     *     DWORD SEHandlerCount;
     *     DWORD GuardCFCheckFunctionPointer;
     *     DWORD GuardCFDispatchFunctionPointer;
     *     DWORD GuardCFFunctionTable;
     *     DWORD GuardCFFunctionCount;
     *     DWORD GuardFlags;
     *     IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
     *     DWORD GuardAddressTakenIatEntryTable;
     *     DWORD GuardAddressTakenIatEntryCount;
     *     DWORD GuardLongJumpTargetTable;
     *     DWORD GuardLongJumpTargetCount;
     *     DWORD DynamicValueRelocTable;
     *     DWORD CHPEMetadataPointer;
     *     DWORD GuardRFFailureRoutine;
     *     DWORD GuardRFFailureRoutineFunctionPointer;
     *     DWORD DynamicValueRelocTableOffset;
     *     WORD DynamicValueRelocTableSection;
     *     WORD Reserved2;
     *     DWORD GuardRFVerifyStackPointerFunctionPointer;
     *     DWORD HotPatchTableOffset;
     *     DWORD Reserved3;
     *     DWORD EnclaveConfigurationPointer;
     *     DWORD VolatileMetadataPointer;
     *     DWORD GuardEHContinuationTable;
     *     DWORD GuardEHContinuationCount;
     * } *PIMAGE_LOAD_CONFIG_DIRECTORY32
     * }
     */
    public static final AddressLayout PIMAGE_LOAD_CONFIG_DIRECTORY32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
     *     DWORD Size;
     *     DWORD TimeDateStamp;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD GlobalFlagsClear;
     *     DWORD GlobalFlagsSet;
     *     DWORD CriticalSectionDefaultTimeout;
     *     ULONGLONG DeCommitFreeBlockThreshold;
     *     ULONGLONG DeCommitTotalFreeThreshold;
     *     ULONGLONG LockPrefixTable;
     *     ULONGLONG MaximumAllocationSize;
     *     ULONGLONG VirtualMemoryThreshold;
     *     ULONGLONG ProcessAffinityMask;
     *     DWORD ProcessHeapFlags;
     *     WORD CSDVersion;
     *     WORD DependentLoadFlags;
     *     ULONGLONG EditList;
     *     ULONGLONG SecurityCookie;
     *     ULONGLONG SEHandlerTable;
     *     ULONGLONG SEHandlerCount;
     *     ULONGLONG GuardCFCheckFunctionPointer;
     *     ULONGLONG GuardCFDispatchFunctionPointer;
     *     ULONGLONG GuardCFFunctionTable;
     *     ULONGLONG GuardCFFunctionCount;
     *     DWORD GuardFlags;
     *     IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
     *     ULONGLONG GuardAddressTakenIatEntryTable;
     *     ULONGLONG GuardAddressTakenIatEntryCount;
     *     ULONGLONG GuardLongJumpTargetTable;
     *     ULONGLONG GuardLongJumpTargetCount;
     *     ULONGLONG DynamicValueRelocTable;
     *     ULONGLONG CHPEMetadataPointer;
     *     ULONGLONG GuardRFFailureRoutine;
     *     ULONGLONG GuardRFFailureRoutineFunctionPointer;
     *     DWORD DynamicValueRelocTableOffset;
     *     WORD DynamicValueRelocTableSection;
     *     WORD Reserved2;
     *     ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
     *     DWORD HotPatchTableOffset;
     *     DWORD Reserved3;
     *     ULONGLONG EnclaveConfigurationPointer;
     *     ULONGLONG VolatileMetadataPointer;
     *     ULONGLONG GuardEHContinuationTable;
     *     ULONGLONG GuardEHContinuationCount;
     * } *PIMAGE_LOAD_CONFIG_DIRECTORY64
     * }
     */
    public static final AddressLayout PIMAGE_LOAD_CONFIG_DIRECTORY64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_LOAD_CONFIG_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_HOT_PATCH_INFO {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD SequenceNumber;
     *     DWORD BaseImageList;
     *     DWORD BaseImageCount;
     *     DWORD BufferOffset;
     *     DWORD ExtraPatchSize;
     * } *PIMAGE_HOT_PATCH_INFO
     * }
     */
    public static final AddressLayout PIMAGE_HOT_PATCH_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_HOT_PATCH_BASE {
     *     DWORD SequenceNumber;
     *     DWORD Flags;
     *     DWORD OriginalTimeDateStamp;
     *     DWORD OriginalCheckSum;
     *     DWORD CodeIntegrityInfo;
     *     DWORD CodeIntegritySize;
     *     DWORD PatchTable;
     *     DWORD BufferOffset;
     * } *PIMAGE_HOT_PATCH_BASE
     * }
     */
    public static final AddressLayout PIMAGE_HOT_PATCH_BASE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_HOT_PATCH_HASHES {
     *     BYTE SHA256[32];
     *     BYTE SHA1[20];
     * } *PIMAGE_HOT_PATCH_HASHES
     * }
     */
    public static final AddressLayout PIMAGE_HOT_PATCH_HASHES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
     *     DWORD FuncStart;
     *     DWORD PrologLen : 8;
     *     DWORD FuncLen : 22;
     *     DWORD ThirtyTwoBit : 1;
     *     DWORD ExceptionFlag : 1;
     * } *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
     *     DWORD BeginAddress;
     *     union {
     *         DWORD UnwindData;
     *         struct {
     *             DWORD Flag : 2;
     *             DWORD FunctionLength : 11;
     *             DWORD Ret : 2;
     *             DWORD H : 1;
     *             DWORD Reg : 3;
     *             DWORD R : 1;
     *             DWORD L : 1;
     *             DWORD C : 1;
     *             DWORD StackAdjust : 10;
     *         };
     *     };
     * } *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    private static final int PdataRefToFullXdata = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_FLAGS.PdataRefToFullXdata = 0
     * }
     */
    public static int PdataRefToFullXdata() {
        return PdataRefToFullXdata;
    }
    private static final int PdataPackedUnwindFunction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_FLAGS.PdataPackedUnwindFunction = 1
     * }
     */
    public static int PdataPackedUnwindFunction() {
        return PdataPackedUnwindFunction;
    }
    private static final int PdataPackedUnwindFragment = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_FLAGS.PdataPackedUnwindFragment = 2
     * }
     */
    public static int PdataPackedUnwindFragment() {
        return PdataPackedUnwindFragment;
    }
    private static final int PdataCrUnchained = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_CR.PdataCrUnchained = 0
     * }
     */
    public static int PdataCrUnchained() {
        return PdataCrUnchained;
    }
    private static final int PdataCrUnchainedSavedLr = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_CR.PdataCrUnchainedSavedLr = 1
     * }
     */
    public static int PdataCrUnchainedSavedLr() {
        return PdataCrUnchainedSavedLr;
    }
    private static final int PdataCrChainedWithPac = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_CR.PdataCrChainedWithPac = 2
     * }
     */
    public static int PdataCrChainedWithPac() {
        return PdataCrChainedWithPac;
    }
    private static final int PdataCrChained = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ARM64_FNPDATA_CR.PdataCrChained = 3
     * }
     */
    public static int PdataCrChained() {
        return PdataCrChained;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
     *     DWORD BeginAddress;
     *     union {
     *         DWORD UnwindData;
     *         struct {
     *             DWORD Flag : 2;
     *             DWORD FunctionLength : 11;
     *             DWORD RegF : 3;
     *             DWORD RegI : 4;
     *             DWORD H : 1;
     *             DWORD CR : 2;
     *             DWORD FrameSize : 9;
     *         };
     *     };
     * } *PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
     *     ULONGLONG BeginAddress;
     *     ULONGLONG EndAddress;
     *     ULONGLONG ExceptionHandler;
     *     ULONGLONG HandlerData;
     *     ULONGLONG PrologEndAddress;
     * } *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
     *     DWORD BeginAddress;
     *     DWORD EndAddress;
     *     DWORD ExceptionHandler;
     *     DWORD HandlerData;
     *     DWORD PrologEndAddress;
     * } *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
     *     DWORD BeginAddress;
     *     DWORD EndAddress;
     *     union {
     *         DWORD UnwindInfoAddress;
     *         DWORD UnwindData;
     *     };
     * } *_PIMAGE_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout _PIMAGE_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_RUNTIME_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ENCLAVE_CONFIG32 {
     *     DWORD Size;
     *     DWORD MinimumRequiredConfigSize;
     *     DWORD PolicyFlags;
     *     DWORD NumberOfImports;
     *     DWORD ImportList;
     *     DWORD ImportEntrySize;
     *     BYTE FamilyID[16];
     *     BYTE ImageID[16];
     *     DWORD ImageVersion;
     *     DWORD SecurityVersion;
     *     DWORD EnclaveSize;
     *     DWORD NumberOfThreads;
     *     DWORD EnclaveFlags;
     * } *PIMAGE_ENCLAVE_CONFIG32
     * }
     */
    public static final AddressLayout PIMAGE_ENCLAVE_CONFIG32 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ENCLAVE_CONFIG64 {
     *     DWORD Size;
     *     DWORD MinimumRequiredConfigSize;
     *     DWORD PolicyFlags;
     *     DWORD NumberOfImports;
     *     DWORD ImportList;
     *     DWORD ImportEntrySize;
     *     BYTE FamilyID[16];
     *     BYTE ImageID[16];
     *     DWORD ImageVersion;
     *     DWORD SecurityVersion;
     *     ULONGLONG EnclaveSize;
     *     DWORD NumberOfThreads;
     *     DWORD EnclaveFlags;
     * } *PIMAGE_ENCLAVE_CONFIG64
     * }
     */
    public static final AddressLayout PIMAGE_ENCLAVE_CONFIG64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMAGE_ENCLAVE_CONFIG64 PIMAGE_ENCLAVE_CONFIG
     * }
     */
    public static final AddressLayout PIMAGE_ENCLAVE_CONFIG = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_ENCLAVE_IMPORT {
     *     DWORD MatchType;
     *     DWORD MinimumSecurityVersion;
     *     BYTE UniqueOrAuthorID[32];
     *     BYTE FamilyID[16];
     *     BYTE ImageID[16];
     *     DWORD ImportName;
     *     DWORD Reserved;
     * } *PIMAGE_ENCLAVE_IMPORT
     * }
     */
    public static final AddressLayout PIMAGE_ENCLAVE_IMPORT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DEBUG_DIRECTORY {
     *     DWORD Characteristics;
     *     DWORD TimeDateStamp;
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     *     DWORD Type;
     *     DWORD SizeOfData;
     *     DWORD AddressOfRawData;
     *     DWORD PointerToRawData;
     * } *PIMAGE_DEBUG_DIRECTORY
     * }
     */
    public static final AddressLayout PIMAGE_DEBUG_DIRECTORY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
     *     DWORD NumberOfSymbols;
     *     DWORD LvaToFirstSymbol;
     *     DWORD NumberOfLinenumbers;
     *     DWORD LvaToFirstLinenumber;
     *     DWORD RvaToFirstByteOfCode;
     *     DWORD RvaToLastByteOfCode;
     *     DWORD RvaToFirstByteOfData;
     *     DWORD RvaToLastByteOfData;
     * } *PIMAGE_COFF_SYMBOLS_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_COFF_SYMBOLS_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FPO_DATA {
     *     DWORD ulOffStart;
     *     DWORD cbProcSize;
     *     DWORD cdwLocals;
     *     WORD cdwParams;
     *     WORD cbProlog : 8;
     *     WORD cbRegs : 3;
     *     WORD fHasSEH : 1;
     *     WORD fUseBP : 1;
     *     WORD reserved : 1;
     *     WORD cbFrame : 2;
     * } *PFPO_DATA
     * }
     */
    public static final AddressLayout PFPO_DATA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_DEBUG_MISC {
     *     DWORD DataType;
     *     DWORD Length;
     *     BOOLEAN Unicode;
     *     BYTE Reserved[3];
     *     BYTE Data[1];
     * } *PIMAGE_DEBUG_MISC
     * }
     */
    public static final AddressLayout PIMAGE_DEBUG_MISC = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_FUNCTION_ENTRY {
     *     DWORD StartingAddress;
     *     DWORD EndingAddress;
     *     DWORD EndOfPrologue;
     * } *PIMAGE_FUNCTION_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_FUNCTION_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_FUNCTION_ENTRY64 {
     *     ULONGLONG StartingAddress;
     *     ULONGLONG EndingAddress;
     *     union {
     *         ULONGLONG EndOfPrologue;
     *         ULONGLONG UnwindInfoAddress;
     *     };
     * } *PIMAGE_FUNCTION_ENTRY64
     * }
     */
    public static final AddressLayout PIMAGE_FUNCTION_ENTRY64 = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
     *     WORD Signature;
     *     WORD Flags;
     *     WORD Machine;
     *     WORD Characteristics;
     *     DWORD TimeDateStamp;
     *     DWORD CheckSum;
     *     DWORD ImageBase;
     *     DWORD SizeOfImage;
     *     DWORD NumberOfSections;
     *     DWORD ExportedNamesSize;
     *     DWORD DebugDirectorySize;
     *     DWORD SectionAlignment;
     *     DWORD Reserved[2];
     * } *PIMAGE_SEPARATE_DEBUG_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_SEPARATE_DEBUG_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NON_PAGED_DEBUG_INFO {
     *     WORD Signature;
     *     WORD Flags;
     *     DWORD Size;
     *     WORD Machine;
     *     WORD Characteristics;
     *     DWORD TimeDateStamp;
     *     DWORD CheckSum;
     *     DWORD SizeOfImage;
     *     ULONGLONG ImageBase;
     * } *PNON_PAGED_DEBUG_INFO
     * }
     */
    public static final AddressLayout PNON_PAGED_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ImageArchitectureHeader {
     *     unsigned int AmaskValue : 1;
     *     int : 7;
     *     unsigned int AmaskShift : 8;
     *     int : 16;
     *     DWORD FirstEntryRVA;
     * } *PIMAGE_ARCHITECTURE_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_ARCHITECTURE_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ImageArchitectureEntry {
     *     DWORD FixupInstRVA;
     *     DWORD NewInst;
     * } *PIMAGE_ARCHITECTURE_ENTRY
     * }
     */
    public static final AddressLayout PIMAGE_ARCHITECTURE_ENTRY = freeglut_h.C_POINTER;
    private static final int IMPORT_OBJECT_CODE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_TYPE.IMPORT_OBJECT_CODE = 0
     * }
     */
    public static int IMPORT_OBJECT_CODE() {
        return IMPORT_OBJECT_CODE;
    }
    private static final int IMPORT_OBJECT_DATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_TYPE.IMPORT_OBJECT_DATA = 1
     * }
     */
    public static int IMPORT_OBJECT_DATA() {
        return IMPORT_OBJECT_DATA;
    }
    private static final int IMPORT_OBJECT_CONST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_TYPE.IMPORT_OBJECT_CONST = 2
     * }
     */
    public static int IMPORT_OBJECT_CONST() {
        return IMPORT_OBJECT_CONST;
    }
    private static final int IMPORT_OBJECT_ORDINAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_ORDINAL = 0
     * }
     */
    public static int IMPORT_OBJECT_ORDINAL() {
        return IMPORT_OBJECT_ORDINAL;
    }
    private static final int IMPORT_OBJECT_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME = 1
     * }
     */
    public static int IMPORT_OBJECT_NAME() {
        return IMPORT_OBJECT_NAME;
    }
    private static final int IMPORT_OBJECT_NAME_NO_PREFIX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_NO_PREFIX = 2
     * }
     */
    public static int IMPORT_OBJECT_NAME_NO_PREFIX() {
        return IMPORT_OBJECT_NAME_NO_PREFIX;
    }
    private static final int IMPORT_OBJECT_NAME_UNDECORATE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_UNDECORATE = 3
     * }
     */
    public static int IMPORT_OBJECT_NAME_UNDECORATE() {
        return IMPORT_OBJECT_NAME_UNDECORATE;
    }
    private static final int IMPORT_OBJECT_NAME_EXPORTAS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_EXPORTAS = 4
     * }
     */
    public static int IMPORT_OBJECT_NAME_EXPORTAS() {
        return IMPORT_OBJECT_NAME_EXPORTAS;
    }
    private static final int COMIMAGE_FLAGS_ILONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_ILONLY = 1
     * }
     */
    public static int COMIMAGE_FLAGS_ILONLY() {
        return COMIMAGE_FLAGS_ILONLY;
    }
    private static final int COMIMAGE_FLAGS_32BITREQUIRED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_32BITREQUIRED = 2
     * }
     */
    public static int COMIMAGE_FLAGS_32BITREQUIRED() {
        return COMIMAGE_FLAGS_32BITREQUIRED;
    }
    private static final int COMIMAGE_FLAGS_IL_LIBRARY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_IL_LIBRARY = 4
     * }
     */
    public static int COMIMAGE_FLAGS_IL_LIBRARY() {
        return COMIMAGE_FLAGS_IL_LIBRARY;
    }
    private static final int COMIMAGE_FLAGS_STRONGNAMESIGNED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_STRONGNAMESIGNED = 8
     * }
     */
    public static int COMIMAGE_FLAGS_STRONGNAMESIGNED() {
        return COMIMAGE_FLAGS_STRONGNAMESIGNED;
    }
    private static final int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16
     * }
     */
    public static int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() {
        return COMIMAGE_FLAGS_NATIVE_ENTRYPOINT;
    }
    private static final int COMIMAGE_FLAGS_TRACKDEBUGDATA = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536
     * }
     */
    public static int COMIMAGE_FLAGS_TRACKDEBUGDATA() {
        return COMIMAGE_FLAGS_TRACKDEBUGDATA;
    }
    private static final int COMIMAGE_FLAGS_32BITPREFERRED = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_32BITPREFERRED = 131072
     * }
     */
    public static int COMIMAGE_FLAGS_32BITPREFERRED() {
        return COMIMAGE_FLAGS_32BITPREFERRED;
    }
    private static final int COR_VERSION_MAJOR_V2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VERSION_MAJOR_V2 = 2
     * }
     */
    public static int COR_VERSION_MAJOR_V2() {
        return COR_VERSION_MAJOR_V2;
    }
    private static final int COR_VERSION_MAJOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VERSION_MAJOR = 2
     * }
     */
    public static int COR_VERSION_MAJOR() {
        return COR_VERSION_MAJOR;
    }
    private static final int COR_VERSION_MINOR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VERSION_MINOR = 5
     * }
     */
    public static int COR_VERSION_MINOR() {
        return COR_VERSION_MINOR;
    }
    private static final int COR_DELETED_NAME_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_DELETED_NAME_LENGTH = 8
     * }
     */
    public static int COR_DELETED_NAME_LENGTH() {
        return COR_DELETED_NAME_LENGTH;
    }
    private static final int COR_VTABLEGAP_NAME_LENGTH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLEGAP_NAME_LENGTH = 8
     * }
     */
    public static int COR_VTABLEGAP_NAME_LENGTH() {
        return COR_VTABLEGAP_NAME_LENGTH;
    }
    private static final int NATIVE_TYPE_MAX_CB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.NATIVE_TYPE_MAX_CB = 1
     * }
     */
    public static int NATIVE_TYPE_MAX_CB() {
        return NATIVE_TYPE_MAX_CB;
    }
    private static final int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = (int)255L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255
     * }
     */
    public static int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() {
        return COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE;
    }
    private static final int IMAGE_COR_MIH_METHODRVA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_METHODRVA = 1
     * }
     */
    public static int IMAGE_COR_MIH_METHODRVA() {
        return IMAGE_COR_MIH_METHODRVA;
    }
    private static final int IMAGE_COR_MIH_EHRVA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_EHRVA = 2
     * }
     */
    public static int IMAGE_COR_MIH_EHRVA() {
        return IMAGE_COR_MIH_EHRVA;
    }
    private static final int IMAGE_COR_MIH_BASICBLOCK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_BASICBLOCK = 8
     * }
     */
    public static int IMAGE_COR_MIH_BASICBLOCK() {
        return IMAGE_COR_MIH_BASICBLOCK;
    }
    private static final int COR_VTABLE_32BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLE_32BIT = 1
     * }
     */
    public static int COR_VTABLE_32BIT() {
        return COR_VTABLE_32BIT;
    }
    private static final int COR_VTABLE_64BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLE_64BIT = 2
     * }
     */
    public static int COR_VTABLE_64BIT() {
        return COR_VTABLE_64BIT;
    }
    private static final int COR_VTABLE_FROM_UNMANAGED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLE_FROM_UNMANAGED = 4
     * }
     */
    public static int COR_VTABLE_FROM_UNMANAGED() {
        return COR_VTABLE_FROM_UNMANAGED;
    }
    private static final int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8
     * }
     */
    public static int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() {
        return COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN;
    }
    private static final int COR_VTABLE_CALL_MOST_DERIVED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.COR_VTABLE_CALL_MOST_DERIVED = 16
     * }
     */
    public static int COR_VTABLE_CALL_MOST_DERIVED() {
        return COR_VTABLE_CALL_MOST_DERIVED;
    }
    private static final int IMAGE_COR_EATJ_THUNK_SIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.IMAGE_COR_EATJ_THUNK_SIZE = 32
     * }
     */
    public static int IMAGE_COR_EATJ_THUNK_SIZE() {
        return IMAGE_COR_EATJ_THUNK_SIZE;
    }
    private static final int MAX_CLASS_NAME = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.MAX_CLASS_NAME = 1024
     * }
     */
    public static int MAX_CLASS_NAME() {
        return MAX_CLASS_NAME;
    }
    private static final int MAX_PACKAGE_NAME = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum ReplacesCorHdrNumericDefines.MAX_PACKAGE_NAME = 1024
     * }
     */
    public static int MAX_PACKAGE_NAME() {
        return MAX_PACKAGE_NAME;
    }
    /**
     * {@snippet lang=c :
     * typedef struct IMAGE_COR20_HEADER {
     *     DWORD cb;
     *     WORD MajorRuntimeVersion;
     *     WORD MinorRuntimeVersion;
     *     IMAGE_DATA_DIRECTORY MetaData;
     *     DWORD Flags;
     *     union {
     *         DWORD EntryPointToken;
     *         DWORD EntryPointRVA;
     *     };
     *     IMAGE_DATA_DIRECTORY Resources;
     *     IMAGE_DATA_DIRECTORY StrongNameSignature;
     *     IMAGE_DATA_DIRECTORY CodeManagerTable;
     *     IMAGE_DATA_DIRECTORY VTableFixups;
     *     IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
     *     IMAGE_DATA_DIRECTORY ManagedNativeHeader;
     * } *PIMAGE_COR20_HEADER
     * }
     */
    public static final AddressLayout PIMAGE_COR20_HEADER = freeglut_h.C_POINTER;

    private static class RtlCaptureStackBackTrace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_SHORT,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCaptureStackBackTrace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WORD RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash)
     * }
     */
    public static FunctionDescriptor RtlCaptureStackBackTrace$descriptor() {
        return RtlCaptureStackBackTrace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WORD RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash)
     * }
     */
    public static MethodHandle RtlCaptureStackBackTrace$handle() {
        return RtlCaptureStackBackTrace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WORD RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash)
     * }
     */
    public static MemorySegment RtlCaptureStackBackTrace$address() {
        return RtlCaptureStackBackTrace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WORD RtlCaptureStackBackTrace(DWORD FramesToSkip, DWORD FramesToCapture, PVOID *BackTrace, PDWORD BackTraceHash)
     * }
     */
    public static short RtlCaptureStackBackTrace(int FramesToSkip, int FramesToCapture, MemorySegment BackTrace, MemorySegment BackTraceHash) {
        var mh$ = RtlCaptureStackBackTrace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCaptureStackBackTrace", FramesToSkip, FramesToCapture, BackTrace, BackTraceHash);
            }
            return (short)mh$.invokeExact(FramesToSkip, FramesToCapture, BackTrace, BackTraceHash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlCaptureContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCaptureContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlCaptureContext(PCONTEXT ContextRecord)
     * }
     */
    public static FunctionDescriptor RtlCaptureContext$descriptor() {
        return RtlCaptureContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlCaptureContext(PCONTEXT ContextRecord)
     * }
     */
    public static MethodHandle RtlCaptureContext$handle() {
        return RtlCaptureContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlCaptureContext(PCONTEXT ContextRecord)
     * }
     */
    public static MemorySegment RtlCaptureContext$address() {
        return RtlCaptureContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlCaptureContext(PCONTEXT ContextRecord)
     * }
     */
    public static void RtlCaptureContext(MemorySegment ContextRecord) {
        var mh$ = RtlCaptureContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCaptureContext", ContextRecord);
            }
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlCaptureContext2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCaptureContext2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlCaptureContext2(PCONTEXT ContextRecord)
     * }
     */
    public static FunctionDescriptor RtlCaptureContext2$descriptor() {
        return RtlCaptureContext2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlCaptureContext2(PCONTEXT ContextRecord)
     * }
     */
    public static MethodHandle RtlCaptureContext2$handle() {
        return RtlCaptureContext2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlCaptureContext2(PCONTEXT ContextRecord)
     * }
     */
    public static MemorySegment RtlCaptureContext2$address() {
        return RtlCaptureContext2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlCaptureContext2(PCONTEXT ContextRecord)
     * }
     */
    public static void RtlCaptureContext2(MemorySegment ContextRecord) {
        var mh$ = RtlCaptureContext2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCaptureContext2", ContextRecord);
            }
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlUnwind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlUnwind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
     * }
     */
    public static FunctionDescriptor RtlUnwind$descriptor() {
        return RtlUnwind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
     * }
     */
    public static MethodHandle RtlUnwind$handle() {
        return RtlUnwind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
     * }
     */
    public static MemorySegment RtlUnwind$address() {
        return RtlUnwind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)
     * }
     */
    public static void RtlUnwind(MemorySegment TargetFrame, MemorySegment TargetIp, MemorySegment ExceptionRecord, MemorySegment ReturnValue) {
        var mh$ = RtlUnwind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlUnwind", TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
            }
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlAddFunctionTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlAddFunctionTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress)
     * }
     */
    public static FunctionDescriptor RtlAddFunctionTable$descriptor() {
        return RtlAddFunctionTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress)
     * }
     */
    public static MethodHandle RtlAddFunctionTable$handle() {
        return RtlAddFunctionTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress)
     * }
     */
    public static MemorySegment RtlAddFunctionTable$address() {
        return RtlAddFunctionTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD64 BaseAddress)
     * }
     */
    public static byte RtlAddFunctionTable(MemorySegment FunctionTable, int EntryCount, long BaseAddress) {
        var mh$ = RtlAddFunctionTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlAddFunctionTable", FunctionTable, EntryCount, BaseAddress);
            }
            return (byte)mh$.invokeExact(FunctionTable, EntryCount, BaseAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlDeleteFunctionTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlDeleteFunctionTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)
     * }
     */
    public static FunctionDescriptor RtlDeleteFunctionTable$descriptor() {
        return RtlDeleteFunctionTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)
     * }
     */
    public static MethodHandle RtlDeleteFunctionTable$handle() {
        return RtlDeleteFunctionTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)
     * }
     */
    public static MemorySegment RtlDeleteFunctionTable$address() {
        return RtlDeleteFunctionTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable)
     * }
     */
    public static byte RtlDeleteFunctionTable(MemorySegment FunctionTable) {
        var mh$ = RtlDeleteFunctionTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlDeleteFunctionTable", FunctionTable);
            }
            return (byte)mh$.invokeExact(FunctionTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlInstallFunctionTableCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInstallFunctionTableCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll)
     * }
     */
    public static FunctionDescriptor RtlInstallFunctionTableCallback$descriptor() {
        return RtlInstallFunctionTableCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll)
     * }
     */
    public static MethodHandle RtlInstallFunctionTableCallback$handle() {
        return RtlInstallFunctionTableCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll)
     * }
     */
    public static MemorySegment RtlInstallFunctionTableCallback$address() {
        return RtlInstallFunctionTableCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlInstallFunctionTableCallback(DWORD64 TableIdentifier, DWORD64 BaseAddress, DWORD Length, PGET_RUNTIME_FUNCTION_CALLBACK Callback, PVOID Context, PCWSTR OutOfProcessCallbackDll)
     * }
     */
    public static byte RtlInstallFunctionTableCallback(long TableIdentifier, long BaseAddress, int Length, MemorySegment Callback, MemorySegment Context, MemorySegment OutOfProcessCallbackDll) {
        var mh$ = RtlInstallFunctionTableCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInstallFunctionTableCallback", TableIdentifier, BaseAddress, Length, Callback, Context, OutOfProcessCallbackDll);
            }
            return (byte)mh$.invokeExact(TableIdentifier, BaseAddress, Length, Callback, Context, OutOfProcessCallbackDll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlAddGrowableFunctionTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlAddGrowableFunctionTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlAddGrowableFunctionTable(PVOID *DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd)
     * }
     */
    public static FunctionDescriptor RtlAddGrowableFunctionTable$descriptor() {
        return RtlAddGrowableFunctionTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlAddGrowableFunctionTable(PVOID *DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd)
     * }
     */
    public static MethodHandle RtlAddGrowableFunctionTable$handle() {
        return RtlAddGrowableFunctionTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlAddGrowableFunctionTable(PVOID *DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd)
     * }
     */
    public static MemorySegment RtlAddGrowableFunctionTable$address() {
        return RtlAddGrowableFunctionTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlAddGrowableFunctionTable(PVOID *DynamicTable, PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount, DWORD MaximumEntryCount, ULONG_PTR RangeBase, ULONG_PTR RangeEnd)
     * }
     */
    public static int RtlAddGrowableFunctionTable(MemorySegment DynamicTable, MemorySegment FunctionTable, int EntryCount, int MaximumEntryCount, long RangeBase, long RangeEnd) {
        var mh$ = RtlAddGrowableFunctionTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlAddGrowableFunctionTable", DynamicTable, FunctionTable, EntryCount, MaximumEntryCount, RangeBase, RangeEnd);
            }
            return (int)mh$.invokeExact(DynamicTable, FunctionTable, EntryCount, MaximumEntryCount, RangeBase, RangeEnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlGrowFunctionTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlGrowFunctionTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlGrowFunctionTable(PVOID DynamicTable, DWORD NewEntryCount)
     * }
     */
    public static FunctionDescriptor RtlGrowFunctionTable$descriptor() {
        return RtlGrowFunctionTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlGrowFunctionTable(PVOID DynamicTable, DWORD NewEntryCount)
     * }
     */
    public static MethodHandle RtlGrowFunctionTable$handle() {
        return RtlGrowFunctionTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlGrowFunctionTable(PVOID DynamicTable, DWORD NewEntryCount)
     * }
     */
    public static MemorySegment RtlGrowFunctionTable$address() {
        return RtlGrowFunctionTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlGrowFunctionTable(PVOID DynamicTable, DWORD NewEntryCount)
     * }
     */
    public static void RtlGrowFunctionTable(MemorySegment DynamicTable, int NewEntryCount) {
        var mh$ = RtlGrowFunctionTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlGrowFunctionTable", DynamicTable, NewEntryCount);
            }
            mh$.invokeExact(DynamicTable, NewEntryCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlDeleteGrowableFunctionTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlDeleteGrowableFunctionTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlDeleteGrowableFunctionTable(PVOID DynamicTable)
     * }
     */
    public static FunctionDescriptor RtlDeleteGrowableFunctionTable$descriptor() {
        return RtlDeleteGrowableFunctionTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlDeleteGrowableFunctionTable(PVOID DynamicTable)
     * }
     */
    public static MethodHandle RtlDeleteGrowableFunctionTable$handle() {
        return RtlDeleteGrowableFunctionTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlDeleteGrowableFunctionTable(PVOID DynamicTable)
     * }
     */
    public static MemorySegment RtlDeleteGrowableFunctionTable$address() {
        return RtlDeleteGrowableFunctionTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlDeleteGrowableFunctionTable(PVOID DynamicTable)
     * }
     */
    public static void RtlDeleteGrowableFunctionTable(MemorySegment DynamicTable) {
        var mh$ = RtlDeleteGrowableFunctionTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlDeleteGrowableFunctionTable", DynamicTable);
            }
            mh$.invokeExact(DynamicTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlLookupFunctionEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlLookupFunctionEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PRUNTIME_FUNCTION RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static FunctionDescriptor RtlLookupFunctionEntry$descriptor() {
        return RtlLookupFunctionEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PRUNTIME_FUNCTION RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static MethodHandle RtlLookupFunctionEntry$handle() {
        return RtlLookupFunctionEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PRUNTIME_FUNCTION RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static MemorySegment RtlLookupFunctionEntry$address() {
        return RtlLookupFunctionEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PRUNTIME_FUNCTION RtlLookupFunctionEntry(DWORD64 ControlPc, PDWORD64 ImageBase, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static MemorySegment RtlLookupFunctionEntry(long ControlPc, MemorySegment ImageBase, MemorySegment HistoryTable) {
        var mh$ = RtlLookupFunctionEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlLookupFunctionEntry", ControlPc, ImageBase, HistoryTable);
            }
            return (MemorySegment)mh$.invokeExact(ControlPc, ImageBase, HistoryTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlRestoreContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlRestoreContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlRestoreContext(PCONTEXT ContextRecord, struct _EXCEPTION_RECORD *ExceptionRecord)
     * }
     */
    public static FunctionDescriptor RtlRestoreContext$descriptor() {
        return RtlRestoreContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlRestoreContext(PCONTEXT ContextRecord, struct _EXCEPTION_RECORD *ExceptionRecord)
     * }
     */
    public static MethodHandle RtlRestoreContext$handle() {
        return RtlRestoreContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlRestoreContext(PCONTEXT ContextRecord, struct _EXCEPTION_RECORD *ExceptionRecord)
     * }
     */
    public static MemorySegment RtlRestoreContext$address() {
        return RtlRestoreContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlRestoreContext(PCONTEXT ContextRecord, struct _EXCEPTION_RECORD *ExceptionRecord)
     * }
     */
    public static void RtlRestoreContext(MemorySegment ContextRecord, MemorySegment ExceptionRecord) {
        var mh$ = RtlRestoreContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlRestoreContext", ContextRecord, ExceptionRecord);
            }
            mh$.invokeExact(ContextRecord, ExceptionRecord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlUnwindEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlUnwindEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static FunctionDescriptor RtlUnwindEx$descriptor() {
        return RtlUnwindEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static MethodHandle RtlUnwindEx$handle() {
        return RtlUnwindEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static MemorySegment RtlUnwindEx$address() {
        return RtlUnwindEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlUnwindEx(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue, PCONTEXT ContextRecord, PUNWIND_HISTORY_TABLE HistoryTable)
     * }
     */
    public static void RtlUnwindEx(MemorySegment TargetFrame, MemorySegment TargetIp, MemorySegment ExceptionRecord, MemorySegment ReturnValue, MemorySegment ContextRecord, MemorySegment HistoryTable) {
        var mh$ = RtlUnwindEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlUnwindEx", TargetFrame, TargetIp, ExceptionRecord, ReturnValue, ContextRecord, HistoryTable);
            }
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue, ContextRecord, HistoryTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlVirtualUnwind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlVirtualUnwind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PEXCEPTION_ROUTINE RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
     * }
     */
    public static FunctionDescriptor RtlVirtualUnwind$descriptor() {
        return RtlVirtualUnwind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PEXCEPTION_ROUTINE RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
     * }
     */
    public static MethodHandle RtlVirtualUnwind$handle() {
        return RtlVirtualUnwind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PEXCEPTION_ROUTINE RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
     * }
     */
    public static MemorySegment RtlVirtualUnwind$address() {
        return RtlVirtualUnwind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PEXCEPTION_ROUTINE RtlVirtualUnwind(DWORD HandlerType, DWORD64 ImageBase, DWORD64 ControlPc, PRUNTIME_FUNCTION FunctionEntry, PCONTEXT ContextRecord, PVOID *HandlerData, PDWORD64 EstablisherFrame, PKNONVOLATILE_CONTEXT_POINTERS ContextPointers)
     * }
     */
    public static MemorySegment RtlVirtualUnwind(int HandlerType, long ImageBase, long ControlPc, MemorySegment FunctionEntry, MemorySegment ContextRecord, MemorySegment HandlerData, MemorySegment EstablisherFrame, MemorySegment ContextPointers) {
        var mh$ = RtlVirtualUnwind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlVirtualUnwind", HandlerType, ImageBase, ControlPc, FunctionEntry, ContextRecord, HandlerData, EstablisherFrame, ContextPointers);
            }
            return (MemorySegment)mh$.invokeExact(HandlerType, ImageBase, ControlPc, FunctionEntry, ContextRecord, HandlerData, EstablisherFrame, ContextPointers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlRaiseException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlRaiseException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord)
     * }
     */
    public static FunctionDescriptor RtlRaiseException$descriptor() {
        return RtlRaiseException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord)
     * }
     */
    public static MethodHandle RtlRaiseException$handle() {
        return RtlRaiseException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord)
     * }
     */
    public static MemorySegment RtlRaiseException$address() {
        return RtlRaiseException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlRaiseException(PEXCEPTION_RECORD ExceptionRecord)
     * }
     */
    public static void RtlRaiseException(MemorySegment ExceptionRecord) {
        var mh$ = RtlRaiseException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlRaiseException", ExceptionRecord);
            }
            mh$.invokeExact(ExceptionRecord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlPcToFileHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlPcToFileHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PVOID RtlPcToFileHeader(PVOID PcValue, PVOID *BaseOfImage)
     * }
     */
    public static FunctionDescriptor RtlPcToFileHeader$descriptor() {
        return RtlPcToFileHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PVOID RtlPcToFileHeader(PVOID PcValue, PVOID *BaseOfImage)
     * }
     */
    public static MethodHandle RtlPcToFileHeader$handle() {
        return RtlPcToFileHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PVOID RtlPcToFileHeader(PVOID PcValue, PVOID *BaseOfImage)
     * }
     */
    public static MemorySegment RtlPcToFileHeader$address() {
        return RtlPcToFileHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PVOID RtlPcToFileHeader(PVOID PcValue, PVOID *BaseOfImage)
     * }
     */
    public static MemorySegment RtlPcToFileHeader(MemorySegment PcValue, MemorySegment BaseOfImage) {
        var mh$ = RtlPcToFileHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlPcToFileHeader", PcValue, BaseOfImage);
            }
            return (MemorySegment)mh$.invokeExact(PcValue, BaseOfImage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlCompareMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCompareMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SIZE_T RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length)
     * }
     */
    public static FunctionDescriptor RtlCompareMemory$descriptor() {
        return RtlCompareMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SIZE_T RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length)
     * }
     */
    public static MethodHandle RtlCompareMemory$handle() {
        return RtlCompareMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SIZE_T RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length)
     * }
     */
    public static MemorySegment RtlCompareMemory$address() {
        return RtlCompareMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SIZE_T RtlCompareMemory(const void *Source1, const void *Source2, SIZE_T Length)
     * }
     */
    public static long RtlCompareMemory(MemorySegment Source1, MemorySegment Source2, long Length) {
        var mh$ = RtlCompareMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCompareMemory", Source1, Source2, Length);
            }
            return (long)mh$.invokeExact(Source1, Source2, Length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SLIST_ENTRY {
     *     struct _SLIST_ENTRY *Next;
     * } *PSLIST_ENTRY
     * }
     */
    public static final AddressLayout PSLIST_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef union _SLIST_HEADER {
     *     struct {
     *         ULONGLONG Alignment;
     *         ULONGLONG Region;
     *     };
     *     struct {
     *         ULONGLONG Depth : 16;
     *         ULONGLONG Sequence : 48;
     *         ULONGLONG Reserved : 4;
     *         ULONGLONG NextEntry : 60;
     *     } HeaderX64;
     * } *PSLIST_HEADER
     * }
     */
    public static final AddressLayout PSLIST_HEADER = freeglut_h.C_POINTER;

    private static class RtlInitializeSListHead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInitializeSListHead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlInitializeSListHead(PSLIST_HEADER ListHead)
     * }
     */
    public static FunctionDescriptor RtlInitializeSListHead$descriptor() {
        return RtlInitializeSListHead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlInitializeSListHead(PSLIST_HEADER ListHead)
     * }
     */
    public static MethodHandle RtlInitializeSListHead$handle() {
        return RtlInitializeSListHead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlInitializeSListHead(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlInitializeSListHead$address() {
        return RtlInitializeSListHead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlInitializeSListHead(PSLIST_HEADER ListHead)
     * }
     */
    public static void RtlInitializeSListHead(MemorySegment ListHead) {
        var mh$ = RtlInitializeSListHead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInitializeSListHead", ListHead);
            }
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlFirstEntrySList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlFirstEntrySList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlFirstEntrySList(const SLIST_HEADER *ListHead)
     * }
     */
    public static FunctionDescriptor RtlFirstEntrySList$descriptor() {
        return RtlFirstEntrySList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlFirstEntrySList(const SLIST_HEADER *ListHead)
     * }
     */
    public static MethodHandle RtlFirstEntrySList$handle() {
        return RtlFirstEntrySList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlFirstEntrySList(const SLIST_HEADER *ListHead)
     * }
     */
    public static MemorySegment RtlFirstEntrySList$address() {
        return RtlFirstEntrySList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlFirstEntrySList(const SLIST_HEADER *ListHead)
     * }
     */
    public static MemorySegment RtlFirstEntrySList(MemorySegment ListHead) {
        var mh$ = RtlFirstEntrySList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlFirstEntrySList", ListHead);
            }
            return (MemorySegment)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlInterlockedPopEntrySList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInterlockedPopEntrySList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead)
     * }
     */
    public static FunctionDescriptor RtlInterlockedPopEntrySList$descriptor() {
        return RtlInterlockedPopEntrySList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead)
     * }
     */
    public static MethodHandle RtlInterlockedPopEntrySList$handle() {
        return RtlInterlockedPopEntrySList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlInterlockedPopEntrySList$address() {
        return RtlInterlockedPopEntrySList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPopEntrySList(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlInterlockedPopEntrySList(MemorySegment ListHead) {
        var mh$ = RtlInterlockedPopEntrySList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInterlockedPopEntrySList", ListHead);
            }
            return (MemorySegment)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlInterlockedPushEntrySList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInterlockedPushEntrySList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry)
     * }
     */
    public static FunctionDescriptor RtlInterlockedPushEntrySList$descriptor() {
        return RtlInterlockedPushEntrySList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry)
     * }
     */
    public static MethodHandle RtlInterlockedPushEntrySList$handle() {
        return RtlInterlockedPushEntrySList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry)
     * }
     */
    public static MemorySegment RtlInterlockedPushEntrySList$address() {
        return RtlInterlockedPushEntrySList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushEntrySList(PSLIST_HEADER ListHead, PSLIST_ENTRY ListEntry)
     * }
     */
    public static MemorySegment RtlInterlockedPushEntrySList(MemorySegment ListHead, MemorySegment ListEntry) {
        var mh$ = RtlInterlockedPushEntrySList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInterlockedPushEntrySList", ListHead, ListEntry);
            }
            return (MemorySegment)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlInterlockedPushListSListEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInterlockedPushListSListEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count)
     * }
     */
    public static FunctionDescriptor RtlInterlockedPushListSListEx$descriptor() {
        return RtlInterlockedPushListSListEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count)
     * }
     */
    public static MethodHandle RtlInterlockedPushListSListEx$handle() {
        return RtlInterlockedPushListSListEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count)
     * }
     */
    public static MemorySegment RtlInterlockedPushListSListEx$address() {
        return RtlInterlockedPushListSListEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedPushListSListEx(PSLIST_HEADER ListHead, PSLIST_ENTRY List, PSLIST_ENTRY ListEnd, DWORD Count)
     * }
     */
    public static MemorySegment RtlInterlockedPushListSListEx(MemorySegment ListHead, MemorySegment List, MemorySegment ListEnd, int Count) {
        var mh$ = RtlInterlockedPushListSListEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInterlockedPushListSListEx", ListHead, List, ListEnd, Count);
            }
            return (MemorySegment)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlInterlockedFlushSList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInterlockedFlushSList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedFlushSList(PSLIST_HEADER ListHead)
     * }
     */
    public static FunctionDescriptor RtlInterlockedFlushSList$descriptor() {
        return RtlInterlockedFlushSList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedFlushSList(PSLIST_HEADER ListHead)
     * }
     */
    public static MethodHandle RtlInterlockedFlushSList$handle() {
        return RtlInterlockedFlushSList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedFlushSList(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlInterlockedFlushSList$address() {
        return RtlInterlockedFlushSList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PSLIST_ENTRY RtlInterlockedFlushSList(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlInterlockedFlushSList(MemorySegment ListHead) {
        var mh$ = RtlInterlockedFlushSList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInterlockedFlushSList", ListHead);
            }
            return (MemorySegment)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlQueryDepthSList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_SHORT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlQueryDepthSList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * WORD RtlQueryDepthSList(PSLIST_HEADER ListHead)
     * }
     */
    public static FunctionDescriptor RtlQueryDepthSList$descriptor() {
        return RtlQueryDepthSList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * WORD RtlQueryDepthSList(PSLIST_HEADER ListHead)
     * }
     */
    public static MethodHandle RtlQueryDepthSList$handle() {
        return RtlQueryDepthSList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * WORD RtlQueryDepthSList(PSLIST_HEADER ListHead)
     * }
     */
    public static MemorySegment RtlQueryDepthSList$address() {
        return RtlQueryDepthSList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * WORD RtlQueryDepthSList(PSLIST_HEADER ListHead)
     * }
     */
    public static short RtlQueryDepthSList(MemorySegment ListHead) {
        var mh$ = RtlQueryDepthSList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlQueryDepthSList", ListHead);
            }
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlGetReturnAddressHijackTarget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlGetReturnAddressHijackTarget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONG_PTR RtlGetReturnAddressHijackTarget()
     * }
     */
    public static FunctionDescriptor RtlGetReturnAddressHijackTarget$descriptor() {
        return RtlGetReturnAddressHijackTarget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONG_PTR RtlGetReturnAddressHijackTarget()
     * }
     */
    public static MethodHandle RtlGetReturnAddressHijackTarget$handle() {
        return RtlGetReturnAddressHijackTarget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONG_PTR RtlGetReturnAddressHijackTarget()
     * }
     */
    public static MemorySegment RtlGetReturnAddressHijackTarget$address() {
        return RtlGetReturnAddressHijackTarget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONG_PTR RtlGetReturnAddressHijackTarget()
     * }
     */
    public static long RtlGetReturnAddressHijackTarget() {
        var mh$ = RtlGetReturnAddressHijackTarget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlGetReturnAddressHijackTarget");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef union _RTL_RUN_ONCE {
     *     PVOID Ptr;
     * } *PRTL_RUN_ONCE
     * }
     */
    public static final AddressLayout PRTL_RUN_ONCE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_BARRIER {
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     ULONG_PTR Reserved3[2];
     *     DWORD Reserved4;
     *     DWORD Reserved5;
     * } *PRTL_BARRIER
     * }
     */
    public static final AddressLayout PRTL_BARRIER = freeglut_h.C_POINTER;

    private static class __fastfail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_INT
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("__fastfail");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __fastfail(unsigned int Code)
     * }
     */
    public static FunctionDescriptor __fastfail$descriptor() {
        return __fastfail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __fastfail(unsigned int Code)
     * }
     */
    public static MethodHandle __fastfail$handle() {
        return __fastfail.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void __fastfail(unsigned int Code)
     * }
     */
    public static MemorySegment __fastfail$address() {
        return __fastfail.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void __fastfail(unsigned int Code)
     * }
     */
    public static void __fastfail(int Code) {
        var mh$ = __fastfail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__fastfail", Code);
            }
            mh$.invokeExact(Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _MESSAGE_RESOURCE_ENTRY {
     *     WORD Length;
     *     WORD Flags;
     *     BYTE Text[1];
     * } *PMESSAGE_RESOURCE_ENTRY
     * }
     */
    public static final AddressLayout PMESSAGE_RESOURCE_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MESSAGE_RESOURCE_BLOCK {
     *     DWORD LowId;
     *     DWORD HighId;
     *     DWORD OffsetToEntries;
     * } *PMESSAGE_RESOURCE_BLOCK
     * }
     */
    public static final AddressLayout PMESSAGE_RESOURCE_BLOCK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MESSAGE_RESOURCE_DATA {
     *     DWORD NumberOfBlocks;
     *     MESSAGE_RESOURCE_BLOCK Blocks[1];
     * } *PMESSAGE_RESOURCE_DATA
     * }
     */
    public static final AddressLayout PMESSAGE_RESOURCE_DATA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOA {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     CHAR szCSDVersion[128];
     * } *POSVERSIONINFOA
     * }
     */
    public static final AddressLayout POSVERSIONINFOA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOA {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     CHAR szCSDVersion[128];
     * } *LPOSVERSIONINFOA
     * }
     */
    public static final AddressLayout LPOSVERSIONINFOA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     * } *POSVERSIONINFOW
     * }
     */
    public static final AddressLayout POSVERSIONINFOW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     * } *LPOSVERSIONINFOW
     * }
     */
    public static final AddressLayout LPOSVERSIONINFOW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     * } *PRTL_OSVERSIONINFOW
     * }
     */
    public static final AddressLayout PRTL_OSVERSIONINFOW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POSVERSIONINFOA POSVERSIONINFO
     * }
     */
    public static final AddressLayout POSVERSIONINFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOSVERSIONINFOA LPOSVERSIONINFO
     * }
     */
    public static final AddressLayout LPOSVERSIONINFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOEXA {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     CHAR szCSDVersion[128];
     *     WORD wServicePackMajor;
     *     WORD wServicePackMinor;
     *     WORD wSuiteMask;
     *     BYTE wProductType;
     *     BYTE wReserved;
     * } *POSVERSIONINFOEXA
     * }
     */
    public static final AddressLayout POSVERSIONINFOEXA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOEXA {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     CHAR szCSDVersion[128];
     *     WORD wServicePackMajor;
     *     WORD wServicePackMinor;
     *     WORD wSuiteMask;
     *     BYTE wProductType;
     *     BYTE wReserved;
     * } *LPOSVERSIONINFOEXA
     * }
     */
    public static final AddressLayout LPOSVERSIONINFOEXA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOEXW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     *     WORD wServicePackMajor;
     *     WORD wServicePackMinor;
     *     WORD wSuiteMask;
     *     BYTE wProductType;
     *     BYTE wReserved;
     * } *POSVERSIONINFOEXW
     * }
     */
    public static final AddressLayout POSVERSIONINFOEXW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOEXW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     *     WORD wServicePackMajor;
     *     WORD wServicePackMinor;
     *     WORD wSuiteMask;
     *     BYTE wProductType;
     *     BYTE wReserved;
     * } *LPOSVERSIONINFOEXW
     * }
     */
    public static final AddressLayout LPOSVERSIONINFOEXW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OSVERSIONINFOEXW {
     *     DWORD dwOSVersionInfoSize;
     *     DWORD dwMajorVersion;
     *     DWORD dwMinorVersion;
     *     DWORD dwBuildNumber;
     *     DWORD dwPlatformId;
     *     WCHAR szCSDVersion[128];
     *     WORD wServicePackMajor;
     *     WORD wServicePackMinor;
     *     WORD wSuiteMask;
     *     BYTE wProductType;
     *     BYTE wReserved;
     * } *PRTL_OSVERSIONINFOEXW
     * }
     */
    public static final AddressLayout PRTL_OSVERSIONINFOEXW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POSVERSIONINFOEXA POSVERSIONINFOEX
     * }
     */
    public static final AddressLayout POSVERSIONINFOEX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX
     * }
     */
    public static final AddressLayout LPOSVERSIONINFOEX = freeglut_h.C_POINTER;

    private static class VerSetConditionMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_CHAR
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("VerSetConditionMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition)
     * }
     */
    public static FunctionDescriptor VerSetConditionMask$descriptor() {
        return VerSetConditionMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition)
     * }
     */
    public static MethodHandle VerSetConditionMask$handle() {
        return VerSetConditionMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition)
     * }
     */
    public static MemorySegment VerSetConditionMask$address() {
        return VerSetConditionMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONGLONG VerSetConditionMask(ULONGLONG ConditionMask, DWORD TypeMask, BYTE Condition)
     * }
     */
    public static long VerSetConditionMask(long ConditionMask, int TypeMask, byte Condition) {
        var mh$ = VerSetConditionMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VerSetConditionMask", ConditionMask, TypeMask, Condition);
            }
            return (long)mh$.invokeExact(ConditionMask, TypeMask, Condition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlGetProductInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlGetProductInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlGetProductInfo(DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType)
     * }
     */
    public static FunctionDescriptor RtlGetProductInfo$descriptor() {
        return RtlGetProductInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlGetProductInfo(DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType)
     * }
     */
    public static MethodHandle RtlGetProductInfo$handle() {
        return RtlGetProductInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlGetProductInfo(DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType)
     * }
     */
    public static MemorySegment RtlGetProductInfo$address() {
        return RtlGetProductInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlGetProductInfo(DWORD OSMajorVersion, DWORD OSMinorVersion, DWORD SpMajorVersion, DWORD SpMinorVersion, PDWORD ReturnedProductType)
     * }
     */
    public static byte RtlGetProductInfo(int OSMajorVersion, int OSMinorVersion, int SpMajorVersion, int SpMinorVersion, MemorySegment ReturnedProductType) {
        var mh$ = RtlGetProductInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlGetProductInfo", OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, ReturnedProductType);
            }
            return (byte)mh$.invokeExact(OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, ReturnedProductType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int UmsThreadInvalidInfoClass = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadInvalidInfoClass = 0
     * }
     */
    public static int UmsThreadInvalidInfoClass() {
        return UmsThreadInvalidInfoClass;
    }
    private static final int UmsThreadUserContext = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadUserContext = 1
     * }
     */
    public static int UmsThreadUserContext() {
        return UmsThreadUserContext;
    }
    private static final int UmsThreadPriority = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadPriority = 2
     * }
     */
    public static int UmsThreadPriority() {
        return UmsThreadPriority;
    }
    private static final int UmsThreadAffinity = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadAffinity = 3
     * }
     */
    public static int UmsThreadAffinity() {
        return UmsThreadAffinity;
    }
    private static final int UmsThreadTeb = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadTeb = 4
     * }
     */
    public static int UmsThreadTeb() {
        return UmsThreadTeb;
    }
    private static final int UmsThreadIsSuspended = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadIsSuspended = 5
     * }
     */
    public static int UmsThreadIsSuspended() {
        return UmsThreadIsSuspended;
    }
    private static final int UmsThreadIsTerminated = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadIsTerminated = 6
     * }
     */
    public static int UmsThreadIsTerminated() {
        return UmsThreadIsTerminated;
    }
    private static final int UmsThreadMaxInfoClass = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_THREAD_INFO_CLASS.UmsThreadMaxInfoClass = 7
     * }
     */
    public static int UmsThreadMaxInfoClass() {
        return UmsThreadMaxInfoClass;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _RTL_UMS_THREAD_INFO_CLASS {
     *     UmsThreadInvalidInfoClass = 0,
     *     UmsThreadUserContext,
     *     UmsThreadPriority,
     *     UmsThreadAffinity,
     *     UmsThreadTeb,
     *     UmsThreadIsSuspended,
     *     UmsThreadIsTerminated,
     *     UmsThreadMaxInfoClass
     * } *PRTL_UMS_THREAD_INFO_CLASS
     * }
     */
    public static final AddressLayout PRTL_UMS_THREAD_INFO_CLASS = freeglut_h.C_POINTER;
    private static final int UmsSchedulerStartup = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_SCHEDULER_REASON.UmsSchedulerStartup = 0
     * }
     */
    public static int UmsSchedulerStartup() {
        return UmsSchedulerStartup;
    }
    private static final int UmsSchedulerThreadBlocked = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_SCHEDULER_REASON.UmsSchedulerThreadBlocked = 1
     * }
     */
    public static int UmsSchedulerThreadBlocked() {
        return UmsSchedulerThreadBlocked;
    }
    private static final int UmsSchedulerThreadYield = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RTL_UMS_SCHEDULER_REASON.UmsSchedulerThreadYield = 2
     * }
     */
    public static int UmsSchedulerThreadYield() {
        return UmsSchedulerThreadYield;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _RTL_UMS_SCHEDULER_REASON {
     *     UmsSchedulerStartup = 0,
     *     UmsSchedulerThreadBlocked,
     *     UmsSchedulerThreadYield
     * } *PRTL_UMS_SCHEDULER_REASON
     * }
     */
    public static final AddressLayout PRTL_UMS_SCHEDULER_REASON = freeglut_h.C_POINTER;

    private static class RtlCrc32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCrc32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlCrc32(const void *Buffer, size_t Size, DWORD InitialCrc)
     * }
     */
    public static FunctionDescriptor RtlCrc32$descriptor() {
        return RtlCrc32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlCrc32(const void *Buffer, size_t Size, DWORD InitialCrc)
     * }
     */
    public static MethodHandle RtlCrc32$handle() {
        return RtlCrc32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlCrc32(const void *Buffer, size_t Size, DWORD InitialCrc)
     * }
     */
    public static MemorySegment RtlCrc32$address() {
        return RtlCrc32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlCrc32(const void *Buffer, size_t Size, DWORD InitialCrc)
     * }
     */
    public static int RtlCrc32(MemorySegment Buffer, long Size, int InitialCrc) {
        var mh$ = RtlCrc32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCrc32", Buffer, Size, InitialCrc);
            }
            return (int)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlCrc64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlCrc64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONGLONG RtlCrc64(const void *Buffer, size_t Size, ULONGLONG InitialCrc)
     * }
     */
    public static FunctionDescriptor RtlCrc64$descriptor() {
        return RtlCrc64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONGLONG RtlCrc64(const void *Buffer, size_t Size, ULONGLONG InitialCrc)
     * }
     */
    public static MethodHandle RtlCrc64$handle() {
        return RtlCrc64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONGLONG RtlCrc64(const void *Buffer, size_t Size, ULONGLONG InitialCrc)
     * }
     */
    public static MemorySegment RtlCrc64$address() {
        return RtlCrc64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONGLONG RtlCrc64(const void *Buffer, size_t Size, ULONGLONG InitialCrc)
     * }
     */
    public static long RtlCrc64(MemorySegment Buffer, long Size, long InitialCrc) {
        var mh$ = RtlCrc64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlCrc64", Buffer, Size, InitialCrc);
            }
            return (long)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int OS_DEPLOYMENT_STANDARD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _OS_DEPLOYEMENT_STATE_VALUES.OS_DEPLOYMENT_STANDARD = 1
     * }
     */
    public static int OS_DEPLOYMENT_STANDARD() {
        return OS_DEPLOYMENT_STANDARD;
    }
    private static final int OS_DEPLOYMENT_COMPACT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _OS_DEPLOYEMENT_STATE_VALUES.OS_DEPLOYMENT_COMPACT = 2
     * }
     */
    public static int OS_DEPLOYMENT_COMPACT() {
        return OS_DEPLOYMENT_COMPACT;
    }

    private static class RtlOsDeploymentState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlOsDeploymentState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState(DWORD Flags)
     * }
     */
    public static FunctionDescriptor RtlOsDeploymentState$descriptor() {
        return RtlOsDeploymentState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState(DWORD Flags)
     * }
     */
    public static MethodHandle RtlOsDeploymentState$handle() {
        return RtlOsDeploymentState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState(DWORD Flags)
     * }
     */
    public static MemorySegment RtlOsDeploymentState$address() {
        return RtlOsDeploymentState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState(DWORD Flags)
     * }
     */
    public static int RtlOsDeploymentState(int Flags) {
        var mh$ = RtlOsDeploymentState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlOsDeploymentState", Flags);
            }
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NV_MEMORY_RANGE {
     *     void *BaseAddress;
     *     SIZE_T Length;
     * } *PNV_MEMORY_RANGE
     * }
     */
    public static final AddressLayout PNV_MEMORY_RANGE = freeglut_h.C_POINTER;

    private static class RtlGetNonVolatileToken {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlGetNonVolatileToken");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID *NvToken)
     * }
     */
    public static FunctionDescriptor RtlGetNonVolatileToken$descriptor() {
        return RtlGetNonVolatileToken.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID *NvToken)
     * }
     */
    public static MethodHandle RtlGetNonVolatileToken$handle() {
        return RtlGetNonVolatileToken.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID *NvToken)
     * }
     */
    public static MemorySegment RtlGetNonVolatileToken$address() {
        return RtlGetNonVolatileToken.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlGetNonVolatileToken(PVOID NvBuffer, SIZE_T Size, PVOID *NvToken)
     * }
     */
    public static int RtlGetNonVolatileToken(MemorySegment NvBuffer, long Size, MemorySegment NvToken) {
        var mh$ = RtlGetNonVolatileToken.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlGetNonVolatileToken", NvBuffer, Size, NvToken);
            }
            return (int)mh$.invokeExact(NvBuffer, Size, NvToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlFreeNonVolatileToken {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlFreeNonVolatileToken");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlFreeNonVolatileToken(PVOID NvToken)
     * }
     */
    public static FunctionDescriptor RtlFreeNonVolatileToken$descriptor() {
        return RtlFreeNonVolatileToken.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlFreeNonVolatileToken(PVOID NvToken)
     * }
     */
    public static MethodHandle RtlFreeNonVolatileToken$handle() {
        return RtlFreeNonVolatileToken.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlFreeNonVolatileToken(PVOID NvToken)
     * }
     */
    public static MemorySegment RtlFreeNonVolatileToken$address() {
        return RtlFreeNonVolatileToken.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlFreeNonVolatileToken(PVOID NvToken)
     * }
     */
    public static int RtlFreeNonVolatileToken(MemorySegment NvToken) {
        var mh$ = RtlFreeNonVolatileToken.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlFreeNonVolatileToken", NvToken);
            }
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlFlushNonVolatileMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlFlushNonVolatileMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RtlFlushNonVolatileMemory$descriptor() {
        return RtlFlushNonVolatileMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, DWORD Flags)
     * }
     */
    public static MethodHandle RtlFlushNonVolatileMemory$handle() {
        return RtlFlushNonVolatileMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, DWORD Flags)
     * }
     */
    public static MemorySegment RtlFlushNonVolatileMemory$address() {
        return RtlFlushNonVolatileMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemory(PVOID NvToken, PVOID NvBuffer, SIZE_T Size, DWORD Flags)
     * }
     */
    public static int RtlFlushNonVolatileMemory(MemorySegment NvToken, MemorySegment NvBuffer, long Size, int Flags) {
        var mh$ = RtlFlushNonVolatileMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlFlushNonVolatileMemory", NvToken, NvBuffer, Size, Flags);
            }
            return (int)mh$.invokeExact(NvToken, NvBuffer, Size, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlDrainNonVolatileFlush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlDrainNonVolatileFlush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlDrainNonVolatileFlush(PVOID NvToken)
     * }
     */
    public static FunctionDescriptor RtlDrainNonVolatileFlush$descriptor() {
        return RtlDrainNonVolatileFlush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlDrainNonVolatileFlush(PVOID NvToken)
     * }
     */
    public static MethodHandle RtlDrainNonVolatileFlush$handle() {
        return RtlDrainNonVolatileFlush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlDrainNonVolatileFlush(PVOID NvToken)
     * }
     */
    public static MemorySegment RtlDrainNonVolatileFlush$address() {
        return RtlDrainNonVolatileFlush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlDrainNonVolatileFlush(PVOID NvToken)
     * }
     */
    public static int RtlDrainNonVolatileFlush(MemorySegment NvToken) {
        var mh$ = RtlDrainNonVolatileFlush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlDrainNonVolatileFlush", NvToken);
            }
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlWriteNonVolatileMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlWriteNonVolatileMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlWriteNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, const __unaligned void *Source, SIZE_T Size, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RtlWriteNonVolatileMemory$descriptor() {
        return RtlWriteNonVolatileMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlWriteNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, const __unaligned void *Source, SIZE_T Size, DWORD Flags)
     * }
     */
    public static MethodHandle RtlWriteNonVolatileMemory$handle() {
        return RtlWriteNonVolatileMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlWriteNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, const __unaligned void *Source, SIZE_T Size, DWORD Flags)
     * }
     */
    public static MemorySegment RtlWriteNonVolatileMemory$address() {
        return RtlWriteNonVolatileMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlWriteNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, const __unaligned void *Source, SIZE_T Size, DWORD Flags)
     * }
     */
    public static int RtlWriteNonVolatileMemory(MemorySegment NvToken, MemorySegment NvDestination, MemorySegment Source, long Size, int Flags) {
        var mh$ = RtlWriteNonVolatileMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlWriteNonVolatileMemory", NvToken, NvDestination, Source, Size, Flags);
            }
            return (int)mh$.invokeExact(NvToken, NvDestination, Source, Size, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlFillNonVolatileMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_CHAR,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlFillNonVolatileMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlFillNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, SIZE_T Size, const BYTE Value, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RtlFillNonVolatileMemory$descriptor() {
        return RtlFillNonVolatileMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlFillNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, SIZE_T Size, const BYTE Value, DWORD Flags)
     * }
     */
    public static MethodHandle RtlFillNonVolatileMemory$handle() {
        return RtlFillNonVolatileMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlFillNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, SIZE_T Size, const BYTE Value, DWORD Flags)
     * }
     */
    public static MemorySegment RtlFillNonVolatileMemory$address() {
        return RtlFillNonVolatileMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlFillNonVolatileMemory(PVOID NvToken, __unaligned void *NvDestination, SIZE_T Size, const BYTE Value, DWORD Flags)
     * }
     */
    public static int RtlFillNonVolatileMemory(MemorySegment NvToken, MemorySegment NvDestination, long Size, byte Value, int Flags) {
        var mh$ = RtlFillNonVolatileMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlFillNonVolatileMemory", NvToken, NvDestination, Size, Value, Flags);
            }
            return (int)mh$.invokeExact(NvToken, NvDestination, Size, Value, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlFlushNonVolatileMemoryRanges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlFlushNonVolatileMemoryRanges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, DWORD Flags)
     * }
     */
    public static FunctionDescriptor RtlFlushNonVolatileMemoryRanges$descriptor() {
        return RtlFlushNonVolatileMemoryRanges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, DWORD Flags)
     * }
     */
    public static MethodHandle RtlFlushNonVolatileMemoryRanges$handle() {
        return RtlFlushNonVolatileMemoryRanges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, DWORD Flags)
     * }
     */
    public static MemorySegment RtlFlushNonVolatileMemoryRanges$address() {
        return RtlFlushNonVolatileMemoryRanges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlFlushNonVolatileMemoryRanges(PVOID NvToken, PNV_MEMORY_RANGE NvRanges, SIZE_T NumRanges, DWORD Flags)
     * }
     */
    public static int RtlFlushNonVolatileMemoryRanges(MemorySegment NvToken, MemorySegment NvRanges, long NumRanges, int Flags) {
        var mh$ = RtlFlushNonVolatileMemoryRanges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlFlushNonVolatileMemoryRanges", NvToken, NvRanges, NumRanges, Flags);
            }
            return (int)mh$.invokeExact(NvToken, NvRanges, NumRanges, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef CORRELATION_VECTOR *PCORRELATION_VECTOR
     * }
     */
    public static final AddressLayout PCORRELATION_VECTOR = freeglut_h.C_POINTER;

    private static class RtlInitializeCorrelationVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlInitializeCorrelationVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID *Guid)
     * }
     */
    public static FunctionDescriptor RtlInitializeCorrelationVector$descriptor() {
        return RtlInitializeCorrelationVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID *Guid)
     * }
     */
    public static MethodHandle RtlInitializeCorrelationVector$handle() {
        return RtlInitializeCorrelationVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID *Guid)
     * }
     */
    public static MemorySegment RtlInitializeCorrelationVector$address() {
        return RtlInitializeCorrelationVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlInitializeCorrelationVector(PCORRELATION_VECTOR CorrelationVector, int Version, const GUID *Guid)
     * }
     */
    public static int RtlInitializeCorrelationVector(MemorySegment CorrelationVector, int Version, MemorySegment Guid) {
        var mh$ = RtlInitializeCorrelationVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlInitializeCorrelationVector", CorrelationVector, Version, Guid);
            }
            return (int)mh$.invokeExact(CorrelationVector, Version, Guid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlIncrementCorrelationVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlIncrementCorrelationVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static FunctionDescriptor RtlIncrementCorrelationVector$descriptor() {
        return RtlIncrementCorrelationVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static MethodHandle RtlIncrementCorrelationVector$handle() {
        return RtlIncrementCorrelationVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static MemorySegment RtlIncrementCorrelationVector$address() {
        return RtlIncrementCorrelationVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlIncrementCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static int RtlIncrementCorrelationVector(MemorySegment CorrelationVector) {
        var mh$ = RtlIncrementCorrelationVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlIncrementCorrelationVector", CorrelationVector);
            }
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlExtendCorrelationVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlExtendCorrelationVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static FunctionDescriptor RtlExtendCorrelationVector$descriptor() {
        return RtlExtendCorrelationVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static MethodHandle RtlExtendCorrelationVector$handle() {
        return RtlExtendCorrelationVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static MemorySegment RtlExtendCorrelationVector$address() {
        return RtlExtendCorrelationVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlExtendCorrelationVector(PCORRELATION_VECTOR CorrelationVector)
     * }
     */
    public static int RtlExtendCorrelationVector(MemorySegment CorrelationVector) {
        var mh$ = RtlExtendCorrelationVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlExtendCorrelationVector", CorrelationVector);
            }
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlValidateCorrelationVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlValidateCorrelationVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector)
     * }
     */
    public static FunctionDescriptor RtlValidateCorrelationVector$descriptor() {
        return RtlValidateCorrelationVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector)
     * }
     */
    public static MethodHandle RtlValidateCorrelationVector$handle() {
        return RtlValidateCorrelationVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector)
     * }
     */
    public static MemorySegment RtlValidateCorrelationVector$address() {
        return RtlValidateCorrelationVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlValidateCorrelationVector(PCORRELATION_VECTOR Vector)
     * }
     */
    public static int RtlValidateCorrelationVector(MemorySegment Vector) {
        var mh$ = RtlValidateCorrelationVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlValidateCorrelationVector", Vector);
            }
            return (int)mh$.invokeExact(Vector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
     *     DWORD Size;
     *     PCWSTR TriggerId;
     * } *PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
     * }
     */
    public static final AddressLayout PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = freeglut_h.C_POINTER;

    private static class RtlRaiseCustomSystemEventTrigger {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlRaiseCustomSystemEventTrigger");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig)
     * }
     */
    public static FunctionDescriptor RtlRaiseCustomSystemEventTrigger$descriptor() {
        return RtlRaiseCustomSystemEventTrigger.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig)
     * }
     */
    public static MethodHandle RtlRaiseCustomSystemEventTrigger$handle() {
        return RtlRaiseCustomSystemEventTrigger.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig)
     * }
     */
    public static MemorySegment RtlRaiseCustomSystemEventTrigger$address() {
        return RtlRaiseCustomSystemEventTrigger.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlRaiseCustomSystemEventTrigger(PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig)
     * }
     */
    public static int RtlRaiseCustomSystemEventTrigger(MemorySegment TriggerConfig) {
        var mh$ = RtlRaiseCustomSystemEventTrigger.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlRaiseCustomSystemEventTrigger", TriggerConfig);
            }
            return (int)mh$.invokeExact(TriggerConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ImagePolicyEntryTypeNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeNone = 0
     * }
     */
    public static int ImagePolicyEntryTypeNone() {
        return ImagePolicyEntryTypeNone;
    }
    private static final int ImagePolicyEntryTypeBool = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeBool = 1
     * }
     */
    public static int ImagePolicyEntryTypeBool() {
        return ImagePolicyEntryTypeBool;
    }
    private static final int ImagePolicyEntryTypeInt8 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt8 = 2
     * }
     */
    public static int ImagePolicyEntryTypeInt8() {
        return ImagePolicyEntryTypeInt8;
    }
    private static final int ImagePolicyEntryTypeUInt8 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt8 = 3
     * }
     */
    public static int ImagePolicyEntryTypeUInt8() {
        return ImagePolicyEntryTypeUInt8;
    }
    private static final int ImagePolicyEntryTypeInt16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt16 = 4
     * }
     */
    public static int ImagePolicyEntryTypeInt16() {
        return ImagePolicyEntryTypeInt16;
    }
    private static final int ImagePolicyEntryTypeUInt16 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt16 = 5
     * }
     */
    public static int ImagePolicyEntryTypeUInt16() {
        return ImagePolicyEntryTypeUInt16;
    }
    private static final int ImagePolicyEntryTypeInt32 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt32 = 6
     * }
     */
    public static int ImagePolicyEntryTypeInt32() {
        return ImagePolicyEntryTypeInt32;
    }
    private static final int ImagePolicyEntryTypeUInt32 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt32 = 7
     * }
     */
    public static int ImagePolicyEntryTypeUInt32() {
        return ImagePolicyEntryTypeUInt32;
    }
    private static final int ImagePolicyEntryTypeInt64 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt64 = 8
     * }
     */
    public static int ImagePolicyEntryTypeInt64() {
        return ImagePolicyEntryTypeInt64;
    }
    private static final int ImagePolicyEntryTypeUInt64 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt64 = 9
     * }
     */
    public static int ImagePolicyEntryTypeUInt64() {
        return ImagePolicyEntryTypeUInt64;
    }
    private static final int ImagePolicyEntryTypeAnsiString = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeAnsiString = 10
     * }
     */
    public static int ImagePolicyEntryTypeAnsiString() {
        return ImagePolicyEntryTypeAnsiString;
    }
    private static final int ImagePolicyEntryTypeUnicodeString = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUnicodeString = 11
     * }
     */
    public static int ImagePolicyEntryTypeUnicodeString() {
        return ImagePolicyEntryTypeUnicodeString;
    }
    private static final int ImagePolicyEntryTypeOverride = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeOverride = 12
     * }
     */
    public static int ImagePolicyEntryTypeOverride() {
        return ImagePolicyEntryTypeOverride;
    }
    private static final int ImagePolicyEntryTypeMaximum = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeMaximum = 13
     * }
     */
    public static int ImagePolicyEntryTypeMaximum() {
        return ImagePolicyEntryTypeMaximum;
    }
    private static final int ImagePolicyIdNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdNone = 0
     * }
     */
    public static int ImagePolicyIdNone() {
        return ImagePolicyIdNone;
    }
    private static final int ImagePolicyIdEtw = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdEtw = 1
     * }
     */
    public static int ImagePolicyIdEtw() {
        return ImagePolicyIdEtw;
    }
    private static final int ImagePolicyIdDebug = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdDebug = 2
     * }
     */
    public static int ImagePolicyIdDebug() {
        return ImagePolicyIdDebug;
    }
    private static final int ImagePolicyIdCrashDump = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDump = 3
     * }
     */
    public static int ImagePolicyIdCrashDump() {
        return ImagePolicyIdCrashDump;
    }
    private static final int ImagePolicyIdCrashDumpKey = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKey = 4
     * }
     */
    public static int ImagePolicyIdCrashDumpKey() {
        return ImagePolicyIdCrashDumpKey;
    }
    private static final int ImagePolicyIdCrashDumpKeyGuid = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKeyGuid = 5
     * }
     */
    public static int ImagePolicyIdCrashDumpKeyGuid() {
        return ImagePolicyIdCrashDumpKeyGuid;
    }
    private static final int ImagePolicyIdParentSd = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdParentSd = 6
     * }
     */
    public static int ImagePolicyIdParentSd() {
        return ImagePolicyIdParentSd;
    }
    private static final int ImagePolicyIdParentSdRev = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdParentSdRev = 7
     * }
     */
    public static int ImagePolicyIdParentSdRev() {
        return ImagePolicyIdParentSdRev;
    }
    private static final int ImagePolicyIdSvn = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdSvn = 8
     * }
     */
    public static int ImagePolicyIdSvn() {
        return ImagePolicyIdSvn;
    }
    private static final int ImagePolicyIdDeviceId = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdDeviceId = 9
     * }
     */
    public static int ImagePolicyIdDeviceId() {
        return ImagePolicyIdDeviceId;
    }
    private static final int ImagePolicyIdCapability = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdCapability = 10
     * }
     */
    public static int ImagePolicyIdCapability() {
        return ImagePolicyIdCapability;
    }
    private static final int ImagePolicyIdScenarioId = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdScenarioId = 11
     * }
     */
    public static int ImagePolicyIdScenarioId() {
        return ImagePolicyIdScenarioId;
    }
    private static final int ImagePolicyIdMaximum = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _IMAGE_POLICY_ID.ImagePolicyIdMaximum = 12
     * }
     */
    public static int ImagePolicyIdMaximum() {
        return ImagePolicyIdMaximum;
    }
    /**
     * {@snippet lang=c :
     * typedef const IMAGE_POLICY_ENTRY *PCIMAGE_POLICY_ENTRY
     * }
     */
    public static final AddressLayout PCIMAGE_POLICY_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const IMAGE_POLICY_METADATA *PCIMAGE_POLICY_METADATA
     * }
     */
    public static final AddressLayout PCIMAGE_POLICY_METADATA = freeglut_h.C_POINTER;

    private static class RtlIsZeroMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlIsZeroMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlIsZeroMemory(PVOID Buffer, SIZE_T Length)
     * }
     */
    public static FunctionDescriptor RtlIsZeroMemory$descriptor() {
        return RtlIsZeroMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlIsZeroMemory(PVOID Buffer, SIZE_T Length)
     * }
     */
    public static MethodHandle RtlIsZeroMemory$handle() {
        return RtlIsZeroMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlIsZeroMemory(PVOID Buffer, SIZE_T Length)
     * }
     */
    public static MemorySegment RtlIsZeroMemory$address() {
        return RtlIsZeroMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlIsZeroMemory(PVOID Buffer, SIZE_T Length)
     * }
     */
    public static byte RtlIsZeroMemory(MemorySegment Buffer, long Length) {
        var mh$ = RtlIsZeroMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlIsZeroMemory", Buffer, Length);
            }
            return (byte)mh$.invokeExact(Buffer, Length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlNormalizeSecurityDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_CHAR,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_CHAR
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlNormalizeSecurityDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR *SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly)
     * }
     */
    public static FunctionDescriptor RtlNormalizeSecurityDescriptor$descriptor() {
        return RtlNormalizeSecurityDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR *SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly)
     * }
     */
    public static MethodHandle RtlNormalizeSecurityDescriptor$handle() {
        return RtlNormalizeSecurityDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR *SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly)
     * }
     */
    public static MemorySegment RtlNormalizeSecurityDescriptor$address() {
        return RtlNormalizeSecurityDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN RtlNormalizeSecurityDescriptor(PSECURITY_DESCRIPTOR *SecurityDescriptor, DWORD SecurityDescriptorLength, PSECURITY_DESCRIPTOR *NewSecurityDescriptor, PDWORD NewSecurityDescriptorLength, BOOLEAN CheckOnly)
     * }
     */
    public static byte RtlNormalizeSecurityDescriptor(MemorySegment SecurityDescriptor, int SecurityDescriptorLength, MemorySegment NewSecurityDescriptor, MemorySegment NewSecurityDescriptorLength, byte CheckOnly) {
        var mh$ = RtlNormalizeSecurityDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlNormalizeSecurityDescriptor", SecurityDescriptor, SecurityDescriptorLength, NewSecurityDescriptor, NewSecurityDescriptorLength, CheckOnly);
            }
            return (byte)mh$.invokeExact(SecurityDescriptor, SecurityDescriptorLength, NewSecurityDescriptor, NewSecurityDescriptorLength, CheckOnly);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG {
     *     WORD Type;
     *     WORD CreatorBackTraceIndex;
     *     struct _RTL_CRITICAL_SECTION *CriticalSection;
     *     LIST_ENTRY ProcessLocksList;
     *     DWORD EntryCount;
     *     DWORD ContentionCount;
     *     DWORD Flags;
     *     WORD CreatorBackTraceIndexHigh;
     *     WORD SpareWORD;
     * } *PRTL_CRITICAL_SECTION_DEBUG
     * }
     */
    public static final AddressLayout PRTL_CRITICAL_SECTION_DEBUG = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_CRITICAL_SECTION_DEBUG {
     *     WORD Type;
     *     WORD CreatorBackTraceIndex;
     *     struct _RTL_CRITICAL_SECTION *CriticalSection;
     *     LIST_ENTRY ProcessLocksList;
     *     DWORD EntryCount;
     *     DWORD ContentionCount;
     *     DWORD Flags;
     *     WORD CreatorBackTraceIndexHigh;
     *     WORD SpareWORD;
     * } *PRTL_RESOURCE_DEBUG
     * }
     */
    public static final AddressLayout PRTL_RESOURCE_DEBUG = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_CRITICAL_SECTION {
     *     PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
     *     LONG LockCount;
     *     LONG RecursionCount;
     *     HANDLE OwningThread;
     *     HANDLE LockSemaphore;
     *     ULONG_PTR SpinCount;
     * } *PRTL_CRITICAL_SECTION
     * }
     */
    public static final AddressLayout PRTL_CRITICAL_SECTION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_SRWLOCK {
     *     PVOID Ptr;
     * } *PRTL_SRWLOCK
     * }
     */
    public static final AddressLayout PRTL_SRWLOCK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RTL_CONDITION_VARIABLE {
     *     PVOID Ptr;
     * } *PRTL_CONDITION_VARIABLE
     * }
     */
    public static final AddressLayout PRTL_CONDITION_VARIABLE = freeglut_h.C_POINTER;
    private static final int HeapCompatibilityInformation = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _HEAP_INFORMATION_CLASS.HeapCompatibilityInformation = 0
     * }
     */
    public static int HeapCompatibilityInformation() {
        return HeapCompatibilityInformation;
    }
    private static final int HeapEnableTerminationOnCorruption = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _HEAP_INFORMATION_CLASS.HeapEnableTerminationOnCorruption = 1
     * }
     */
    public static int HeapEnableTerminationOnCorruption() {
        return HeapEnableTerminationOnCorruption;
    }
    private static final int HeapOptimizeResources = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _HEAP_INFORMATION_CLASS.HeapOptimizeResources = 3
     * }
     */
    public static int HeapOptimizeResources() {
        return HeapOptimizeResources;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
     *     DWORD Version;
     *     DWORD Flags;
     * } *PHEAP_OPTIMIZE_RESOURCES_INFORMATION
     * }
     */
    public static final AddressLayout PHEAP_OPTIMIZE_RESOURCES_INFORMATION = freeglut_h.C_POINTER;
    private static final int ActivationContextBasicInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextBasicInformation = 1
     * }
     */
    public static int ActivationContextBasicInformation() {
        return ActivationContextBasicInformation;
    }
    private static final int ActivationContextDetailedInformation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextDetailedInformation = 2
     * }
     */
    public static int ActivationContextDetailedInformation() {
        return ActivationContextDetailedInformation;
    }
    private static final int AssemblyDetailedInformationInActivationContext = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContext = 3
     * }
     */
    public static int AssemblyDetailedInformationInActivationContext() {
        return AssemblyDetailedInformationInActivationContext;
    }
    private static final int FileInformationInAssemblyOfAssemblyInActivationContext = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContext = 4
     * }
     */
    public static int FileInformationInAssemblyOfAssemblyInActivationContext() {
        return FileInformationInAssemblyOfAssemblyInActivationContext;
    }
    private static final int RunlevelInformationInActivationContext = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.RunlevelInformationInActivationContext = 5
     * }
     */
    public static int RunlevelInformationInActivationContext() {
        return RunlevelInformationInActivationContext;
    }
    private static final int CompatibilityInformationInActivationContext = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.CompatibilityInformationInActivationContext = 6
     * }
     */
    public static int CompatibilityInformationInActivationContext() {
        return CompatibilityInformationInActivationContext;
    }
    private static final int ActivationContextManifestResourceName = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextManifestResourceName = 7
     * }
     */
    public static int ActivationContextManifestResourceName() {
        return ActivationContextManifestResourceName;
    }
    private static final int MaxActivationContextInfoClass = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.MaxActivationContextInfoClass = 8
     * }
     */
    public static int MaxActivationContextInfoClass() {
        return MaxActivationContextInfoClass;
    }
    private static final int AssemblyDetailedInformationInActivationContxt = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContxt = 3
     * }
     */
    public static int AssemblyDetailedInformationInActivationContxt() {
        return AssemblyDetailedInformationInActivationContxt;
    }
    private static final int FileInformationInAssemblyOfAssemblyInActivationContxt = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContxt = 4
     * }
     */
    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() {
        return FileInformationInAssemblyOfAssemblyInActivationContxt;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
     *     DWORD ulAssemblyIndex;
     *     DWORD ulFileIndexInAssembly;
     * } *PACTIVATION_CONTEXT_QUERY_INDEX
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_QUERY_INDEX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX {
     *     DWORD ulAssemblyIndex;
     *     DWORD ulFileIndexInAssembly;
     * } *PCACTIVATION_CONTEXT_QUERY_INDEX
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_QUERY_INDEX = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
     *     DWORD ulFlags;
     *     DWORD ulFilenameLength;
     *     DWORD ulPathLength;
     *     PCWSTR lpFileName;
     *     PCWSTR lpFilePath;
     * } *PASSEMBLY_FILE_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PASSEMBLY_FILE_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PCASSEMBLY_FILE_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
     *     DWORD ulFlags;
     *     DWORD ulEncodedAssemblyIdentityLength;
     *     DWORD ulManifestPathType;
     *     DWORD ulManifestPathLength;
     *     LARGE_INTEGER liManifestLastWriteTime;
     *     DWORD ulPolicyPathType;
     *     DWORD ulPolicyPathLength;
     *     LARGE_INTEGER liPolicyLastWriteTime;
     *     DWORD ulMetadataSatelliteRosterIndex;
     *     DWORD ulManifestVersionMajor;
     *     DWORD ulManifestVersionMinor;
     *     DWORD ulPolicyVersionMajor;
     *     DWORD ulPolicyVersionMinor;
     *     DWORD ulAssemblyDirectoryNameLength;
     *     PCWSTR lpAssemblyEncodedAssemblyIdentity;
     *     PCWSTR lpAssemblyManifestPath;
     *     PCWSTR lpAssemblyPolicyPath;
     *     PCWSTR lpAssemblyDirectoryName;
     *     DWORD ulFileCount;
     * } *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
     *     DWORD ulFlags;
     *     DWORD ulEncodedAssemblyIdentityLength;
     *     DWORD ulManifestPathType;
     *     DWORD ulManifestPathLength;
     *     LARGE_INTEGER liManifestLastWriteTime;
     *     DWORD ulPolicyPathType;
     *     DWORD ulPolicyPathLength;
     *     LARGE_INTEGER liPolicyLastWriteTime;
     *     DWORD ulMetadataSatelliteRosterIndex;
     *     DWORD ulManifestVersionMajor;
     *     DWORD ulManifestVersionMinor;
     *     DWORD ulPolicyVersionMajor;
     *     DWORD ulPolicyVersionMinor;
     *     DWORD ulAssemblyDirectoryNameLength;
     *     PCWSTR lpAssemblyEncodedAssemblyIdentity;
     *     PCWSTR lpAssemblyManifestPath;
     *     PCWSTR lpAssemblyPolicyPath;
     *     PCWSTR lpAssemblyDirectoryName;
     *     DWORD ulFileCount;
     * } *PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    private static final int ACTCTX_RUN_LEVEL_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_RUN_LEVEL_UNSPECIFIED = 0
     * }
     */
    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() {
        return ACTCTX_RUN_LEVEL_UNSPECIFIED;
    }
    private static final int ACTCTX_RUN_LEVEL_AS_INVOKER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_RUN_LEVEL_AS_INVOKER = 1
     * }
     */
    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() {
        return ACTCTX_RUN_LEVEL_AS_INVOKER;
    }
    private static final int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2
     * }
     */
    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() {
        return ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE;
    }
    private static final int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3
     * }
     */
    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() {
        return ACTCTX_RUN_LEVEL_REQUIRE_ADMIN;
    }
    private static final int ACTCTX_RUN_LEVEL_NUMBERS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_RUN_LEVEL_NUMBERS = 4
     * }
     */
    public static int ACTCTX_RUN_LEVEL_NUMBERS() {
        return ACTCTX_RUN_LEVEL_NUMBERS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
     *     DWORD ulFlags;
     *     ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
     *     DWORD UiAccess;
     * } *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
     *     DWORD ulFlags;
     *     ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
     *     DWORD UiAccess;
     * } *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = freeglut_h.C_POINTER;
    private static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() {
        return ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN;
    }
    private static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() {
        return ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS;
    }
    private static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() {
        return ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION;
    }
    private static final int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3
     * }
     */
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() {
        return ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
     *     GUID Id;
     *     ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
     *     ULONGLONG MaxVersionTested;
     * } *PCOMPATIBILITY_CONTEXT_ELEMENT
     * }
     */
    public static final AddressLayout PCOMPATIBILITY_CONTEXT_ELEMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT {
     *     GUID Id;
     *     ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
     *     ULONGLONG MaxVersionTested;
     * } *PCCOMPATIBILITY_CONTEXT_ELEMENT
     * }
     */
    public static final AddressLayout PCCOMPATIBILITY_CONTEXT_ELEMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
     *     DWORD ElementCount;
     *     COMPATIBILITY_CONTEXT_ELEMENT Elements[];
     * } *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
     *     DWORD ElementCount;
     *     COMPATIBILITY_CONTEXT_ELEMENT Elements[];
     * } *PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SUPPORTED_OS_INFO {
     *     WORD MajorVersion;
     *     WORD MinorVersion;
     * } *PSUPPORTED_OS_INFO
     * }
     */
    public static final AddressLayout PSUPPORTED_OS_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MAXVERSIONTESTED_INFO {
     *     ULONGLONG MaxVersionTested;
     * } *PMAXVERSIONTESTED_INFO
     * }
     */
    public static final AddressLayout PMAXVERSIONTESTED_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
     *     DWORD dwFlags;
     *     DWORD ulFormatVersion;
     *     DWORD ulAssemblyCount;
     *     DWORD ulRootManifestPathType;
     *     DWORD ulRootManifestPathChars;
     *     DWORD ulRootConfigurationPathType;
     *     DWORD ulRootConfigurationPathChars;
     *     DWORD ulAppDirPathType;
     *     DWORD ulAppDirPathChars;
     *     PCWSTR lpRootManifestPath;
     *     PCWSTR lpRootConfigurationPath;
     *     PCWSTR lpAppDirPath;
     * } *PACTIVATION_CONTEXT_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PACTIVATION_CONTEXT_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
     *     DWORD dwFlags;
     *     DWORD ulFormatVersion;
     *     DWORD ulAssemblyCount;
     *     DWORD ulRootManifestPathType;
     *     DWORD ulRootManifestPathChars;
     *     DWORD ulRootConfigurationPathType;
     *     DWORD ulRootConfigurationPathChars;
     *     DWORD ulAppDirPathType;
     *     DWORD ulAppDirPathChars;
     *     PCWSTR lpRootManifestPath;
     *     PCWSTR lpRootConfigurationPath;
     *     PCWSTR lpAppDirPath;
     * } *PCACTIVATION_CONTEXT_DETAILED_INFORMATION
     * }
     */
    public static final AddressLayout PCACTIVATION_CONTEXT_DETAILED_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _HARDWARE_COUNTER_DATA {
     *     HARDWARE_COUNTER_TYPE Type;
     *     DWORD Reserved;
     *     DWORD64 Value;
     * } *PHARDWARE_COUNTER_DATA
     * }
     */
    public static final AddressLayout PHARDWARE_COUNTER_DATA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERFORMANCE_DATA {
     *     WORD Size;
     *     BYTE Version;
     *     BYTE HwCountersCount;
     *     DWORD ContextSwitchCount;
     *     DWORD64 WaitReasonBitMap;
     *     DWORD64 CycleTime;
     *     DWORD RetryCount;
     *     DWORD Reserved;
     *     HARDWARE_COUNTER_DATA HwCounters[16];
     * } *PPERFORMANCE_DATA
     * }
     */
    public static final AddressLayout PPERFORMANCE_DATA = freeglut_h.C_POINTER;

    private static class RtlGetDeviceFamilyInfoEnum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlGetDeviceFamilyInfoEnum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RtlGetDeviceFamilyInfoEnum(ULONGLONG *pullUAPInfo, DWORD *pulDeviceFamily, DWORD *pulDeviceForm)
     * }
     */
    public static FunctionDescriptor RtlGetDeviceFamilyInfoEnum$descriptor() {
        return RtlGetDeviceFamilyInfoEnum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RtlGetDeviceFamilyInfoEnum(ULONGLONG *pullUAPInfo, DWORD *pulDeviceFamily, DWORD *pulDeviceForm)
     * }
     */
    public static MethodHandle RtlGetDeviceFamilyInfoEnum$handle() {
        return RtlGetDeviceFamilyInfoEnum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RtlGetDeviceFamilyInfoEnum(ULONGLONG *pullUAPInfo, DWORD *pulDeviceFamily, DWORD *pulDeviceForm)
     * }
     */
    public static MemorySegment RtlGetDeviceFamilyInfoEnum$address() {
        return RtlGetDeviceFamilyInfoEnum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RtlGetDeviceFamilyInfoEnum(ULONGLONG *pullUAPInfo, DWORD *pulDeviceFamily, DWORD *pulDeviceForm)
     * }
     */
    public static void RtlGetDeviceFamilyInfoEnum(MemorySegment pullUAPInfo, MemorySegment pulDeviceFamily, MemorySegment pulDeviceForm) {
        var mh$ = RtlGetDeviceFamilyInfoEnum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlGetDeviceFamilyInfoEnum", pullUAPInfo, pulDeviceFamily, pulDeviceForm);
            }
            mh$.invokeExact(pullUAPInfo, pulDeviceFamily, pulDeviceForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlConvertDeviceFamilyInfoToString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlConvertDeviceFamilyInfoToString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm)
     * }
     */
    public static FunctionDescriptor RtlConvertDeviceFamilyInfoToString$descriptor() {
        return RtlConvertDeviceFamilyInfoToString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm)
     * }
     */
    public static MethodHandle RtlConvertDeviceFamilyInfoToString$handle() {
        return RtlConvertDeviceFamilyInfoToString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm)
     * }
     */
    public static MemorySegment RtlConvertDeviceFamilyInfoToString$address() {
        return RtlConvertDeviceFamilyInfoToString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlConvertDeviceFamilyInfoToString(PDWORD pulDeviceFamilyBufferSize, PDWORD pulDeviceFormBufferSize, PWSTR DeviceFamily, PWSTR DeviceForm)
     * }
     */
    public static int RtlConvertDeviceFamilyInfoToString(MemorySegment pulDeviceFamilyBufferSize, MemorySegment pulDeviceFormBufferSize, MemorySegment DeviceFamily, MemorySegment DeviceForm) {
        var mh$ = RtlConvertDeviceFamilyInfoToString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlConvertDeviceFamilyInfoToString", pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
            }
            return (int)mh$.invokeExact(pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RtlSwitchedVVI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("RtlSwitchedVVI");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask)
     * }
     */
    public static FunctionDescriptor RtlSwitchedVVI$descriptor() {
        return RtlSwitchedVVI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask)
     * }
     */
    public static MethodHandle RtlSwitchedVVI$handle() {
        return RtlSwitchedVVI.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask)
     * }
     */
    public static MemorySegment RtlSwitchedVVI$address() {
        return RtlSwitchedVVI.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD RtlSwitchedVVI(PRTL_OSVERSIONINFOEXW VersionInfo, DWORD TypeMask, ULONGLONG ConditionMask)
     * }
     */
    public static int RtlSwitchedVVI(MemorySegment VersionInfo, int TypeMask, long ConditionMask) {
        var mh$ = RtlSwitchedVVI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RtlSwitchedVVI", VersionInfo, TypeMask, ConditionMask);
            }
            return (int)mh$.invokeExact(VersionInfo, TypeMask, ConditionMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _EVENTLOGRECORD {
     *     DWORD Length;
     *     DWORD Reserved;
     *     DWORD RecordNumber;
     *     DWORD TimeGenerated;
     *     DWORD TimeWritten;
     *     DWORD EventID;
     *     WORD EventType;
     *     WORD NumStrings;
     *     WORD EventCategory;
     *     WORD ReservedFlags;
     *     DWORD ClosingRecordNumber;
     *     DWORD StringOffset;
     *     DWORD UserSidLength;
     *     DWORD UserSidOffset;
     *     DWORD DataLength;
     *     DWORD DataOffset;
     * } *PEVENTLOGRECORD
     * }
     */
    public static final AddressLayout PEVENTLOGRECORD = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EVENTSFORLOGFILE {
     *     DWORD ulSize;
     *     WCHAR szLogicalLogFile[256];
     *     DWORD ulNumRecords;
     *     EVENTLOGRECORD pEventLogRecords[];
     * } *PEVENTSFORLOGFILE
     * }
     */
    public static final AddressLayout PEVENTSFORLOGFILE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PACKEDEVENTINFO {
     *     DWORD ulSize;
     *     DWORD ulNumEventsForLogFile;
     *     DWORD ulOffsets[];
     * } *PPACKEDEVENTINFO
     * }
     */
    public static final AddressLayout PPACKEDEVENTINFO = freeglut_h.C_POINTER;
    private static final int DriverType = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.DriverType = 1
     * }
     */
    public static int DriverType() {
        return DriverType;
    }
    private static final int FileSystemType = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.FileSystemType = 2
     * }
     */
    public static int FileSystemType() {
        return FileSystemType;
    }
    private static final int Win32ServiceOwnProcess = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.Win32ServiceOwnProcess = 16
     * }
     */
    public static int Win32ServiceOwnProcess() {
        return Win32ServiceOwnProcess;
    }
    private static final int Win32ServiceShareProcess = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.Win32ServiceShareProcess = 32
     * }
     */
    public static int Win32ServiceShareProcess() {
        return Win32ServiceShareProcess;
    }
    private static final int AdapterType = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.AdapterType = 4
     * }
     */
    public static int AdapterType() {
        return AdapterType;
    }
    private static final int RecognizerType = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_NODE_TYPE.RecognizerType = 8
     * }
     */
    public static int RecognizerType() {
        return RecognizerType;
    }
    private static final int BootLoad = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_LOAD_TYPE.BootLoad = 0
     * }
     */
    public static int BootLoad() {
        return BootLoad;
    }
    private static final int SystemLoad = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_LOAD_TYPE.SystemLoad = 1
     * }
     */
    public static int SystemLoad() {
        return SystemLoad;
    }
    private static final int AutoLoad = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_LOAD_TYPE.AutoLoad = 2
     * }
     */
    public static int AutoLoad() {
        return AutoLoad;
    }
    private static final int DemandLoad = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_LOAD_TYPE.DemandLoad = 3
     * }
     */
    public static int DemandLoad() {
        return DemandLoad;
    }
    private static final int DisableLoad = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _CM_SERVICE_LOAD_TYPE.DisableLoad = 4
     * }
     */
    public static int DisableLoad() {
        return DisableLoad;
    }
    private static final int IgnoreError = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _CM_ERROR_CONTROL_TYPE.IgnoreError = 0
     * }
     */
    public static int IgnoreError() {
        return IgnoreError;
    }
    private static final int NormalError = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _CM_ERROR_CONTROL_TYPE.NormalError = 1
     * }
     */
    public static int NormalError() {
        return NormalError;
    }
    private static final int SevereError = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _CM_ERROR_CONTROL_TYPE.SevereError = 2
     * }
     */
    public static int SevereError() {
        return SevereError;
    }
    private static final int CriticalError = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _CM_ERROR_CONTROL_TYPE.CriticalError = 3
     * }
     */
    public static int CriticalError() {
        return CriticalError;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_ERASE {
     *     DWORD Type;
     *     BOOLEAN Immediate;
     * } *PTAPE_ERASE
     * }
     */
    public static final AddressLayout PTAPE_ERASE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_PREPARE {
     *     DWORD Operation;
     *     BOOLEAN Immediate;
     * } *PTAPE_PREPARE
     * }
     */
    public static final AddressLayout PTAPE_PREPARE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_WRITE_MARKS {
     *     DWORD Type;
     *     DWORD Count;
     *     BOOLEAN Immediate;
     * } *PTAPE_WRITE_MARKS
     * }
     */
    public static final AddressLayout PTAPE_WRITE_MARKS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_GET_POSITION {
     *     DWORD Type;
     *     DWORD Partition;
     *     LARGE_INTEGER Offset;
     * } *PTAPE_GET_POSITION
     * }
     */
    public static final AddressLayout PTAPE_GET_POSITION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_SET_POSITION {
     *     DWORD Method;
     *     DWORD Partition;
     *     LARGE_INTEGER Offset;
     *     BOOLEAN Immediate;
     * } *PTAPE_SET_POSITION
     * }
     */
    public static final AddressLayout PTAPE_SET_POSITION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_GET_DRIVE_PARAMETERS {
     *     BOOLEAN ECC;
     *     BOOLEAN Compression;
     *     BOOLEAN DataPadding;
     *     BOOLEAN ReportSetmarks;
     *     DWORD DefaultBlockSize;
     *     DWORD MaximumBlockSize;
     *     DWORD MinimumBlockSize;
     *     DWORD MaximumPartitionCount;
     *     DWORD FeaturesLow;
     *     DWORD FeaturesHigh;
     *     DWORD EOTWarningZoneSize;
     * } *PTAPE_GET_DRIVE_PARAMETERS
     * }
     */
    public static final AddressLayout PTAPE_GET_DRIVE_PARAMETERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_SET_DRIVE_PARAMETERS {
     *     BOOLEAN ECC;
     *     BOOLEAN Compression;
     *     BOOLEAN DataPadding;
     *     BOOLEAN ReportSetmarks;
     *     DWORD EOTWarningZoneSize;
     * } *PTAPE_SET_DRIVE_PARAMETERS
     * }
     */
    public static final AddressLayout PTAPE_SET_DRIVE_PARAMETERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_GET_MEDIA_PARAMETERS {
     *     LARGE_INTEGER Capacity;
     *     LARGE_INTEGER Remaining;
     *     DWORD BlockSize;
     *     DWORD PartitionCount;
     *     BOOLEAN WriteProtected;
     * } *PTAPE_GET_MEDIA_PARAMETERS
     * }
     */
    public static final AddressLayout PTAPE_GET_MEDIA_PARAMETERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_SET_MEDIA_PARAMETERS {
     *     DWORD BlockSize;
     * } *PTAPE_SET_MEDIA_PARAMETERS
     * }
     */
    public static final AddressLayout PTAPE_SET_MEDIA_PARAMETERS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_CREATE_PARTITION {
     *     DWORD Method;
     *     DWORD Count;
     *     DWORD Size;
     * } *PTAPE_CREATE_PARTITION
     * }
     */
    public static final AddressLayout PTAPE_CREATE_PARTITION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TAPE_WMI_OPERATIONS {
     *     DWORD Method;
     *     DWORD DataBufferSize;
     *     PVOID DataBuffer;
     * } *PTAPE_WMI_OPERATIONS
     * }
     */
    public static final AddressLayout PTAPE_WMI_OPERATIONS = freeglut_h.C_POINTER;
    private static final int TapeDriveProblemNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveProblemNone = 0
     * }
     */
    public static int TapeDriveProblemNone() {
        return TapeDriveProblemNone;
    }
    private static final int TapeDriveReadWriteWarning = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteWarning = 1
     * }
     */
    public static int TapeDriveReadWriteWarning() {
        return TapeDriveReadWriteWarning;
    }
    private static final int TapeDriveReadWriteError = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteError = 2
     * }
     */
    public static int TapeDriveReadWriteError() {
        return TapeDriveReadWriteError;
    }
    private static final int TapeDriveReadWarning = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWarning = 3
     * }
     */
    public static int TapeDriveReadWarning() {
        return TapeDriveReadWarning;
    }
    private static final int TapeDriveWriteWarning = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteWarning = 4
     * }
     */
    public static int TapeDriveWriteWarning() {
        return TapeDriveWriteWarning;
    }
    private static final int TapeDriveReadError = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadError = 5
     * }
     */
    public static int TapeDriveReadError() {
        return TapeDriveReadError;
    }
    private static final int TapeDriveWriteError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteError = 6
     * }
     */
    public static int TapeDriveWriteError() {
        return TapeDriveWriteError;
    }
    private static final int TapeDriveHardwareError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveHardwareError = 7
     * }
     */
    public static int TapeDriveHardwareError() {
        return TapeDriveHardwareError;
    }
    private static final int TapeDriveUnsupportedMedia = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveUnsupportedMedia = 8
     * }
     */
    public static int TapeDriveUnsupportedMedia() {
        return TapeDriveUnsupportedMedia;
    }
    private static final int TapeDriveScsiConnectionError = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveScsiConnectionError = 9
     * }
     */
    public static int TapeDriveScsiConnectionError() {
        return TapeDriveScsiConnectionError;
    }
    private static final int TapeDriveTimetoClean = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveTimetoClean = 10
     * }
     */
    public static int TapeDriveTimetoClean() {
        return TapeDriveTimetoClean;
    }
    private static final int TapeDriveCleanDriveNow = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveCleanDriveNow = 11
     * }
     */
    public static int TapeDriveCleanDriveNow() {
        return TapeDriveCleanDriveNow;
    }
    private static final int TapeDriveMediaLifeExpired = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveMediaLifeExpired = 12
     * }
     */
    public static int TapeDriveMediaLifeExpired() {
        return TapeDriveMediaLifeExpired;
    }
    private static final int TapeDriveSnappedTape = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _TAPE_DRIVE_PROBLEM_TYPE.TapeDriveSnappedTape = 13
     * }
     */
    public static int TapeDriveSnappedTape() {
        return TapeDriveSnappedTape;
    }
    /**
     * {@snippet lang=c :
     * typedef GUID *PUOW
     * }
     */
    public static final AddressLayout PUOW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GUID *PCRM_PROTOCOL_ID
     * }
     */
    public static final AddressLayout PCRM_PROTOCOL_ID = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG NOTIFICATION_MASK
     * }
     */
    public static final OfInt NOTIFICATION_MASK = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION {
     *     PVOID TransactionKey;
     *     ULONG TransactionNotification;
     *     LARGE_INTEGER TmVirtualClock;
     *     ULONG ArgumentLength;
     * } *PTRANSACTION_NOTIFICATION
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
     *     GUID EnlistmentId;
     *     UOW UOW;
     * } *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
     *     GUID TmIdentity;
     *     ULONG Flags;
     * } *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG SAVEPOINT_ID
     * }
     */
    public static final OfInt SAVEPOINT_ID = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG *PSAVEPOINT_ID
     * }
     */
    public static final AddressLayout PSAVEPOINT_ID = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
     *     SAVEPOINT_ID SavepointId;
     * } *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
     *     ULONG PropagationCookie;
     *     GUID UOW;
     *     GUID TmIdentity;
     *     ULONG BufferLength;
     * } *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
     *     ULONG MarshalCookie;
     *     GUID UOW;
     * } *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT
     * }
     */
    public static final AddressLayout PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_MARSHAL_HEADER {
     *     ULONG VersionMajor;
     *     ULONG VersionMinor;
     *     ULONG NumProtocols;
     *     ULONG Unused;
     * } *PKCRM_MARSHAL_HEADER
     * }
     */
    public static final AddressLayout PKCRM_MARSHAL_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_MARSHAL_HEADER {
     *     ULONG VersionMajor;
     *     ULONG VersionMinor;
     *     ULONG NumProtocols;
     *     ULONG Unused;
     * } *PRKCRM_MARSHAL_HEADER
     * }
     */
    public static final AddressLayout PRKCRM_MARSHAL_HEADER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_TRANSACTION_BLOB {
     *     UOW UOW;
     *     GUID TmIdentity;
     *     ULONG IsolationLevel;
     *     ULONG IsolationFlags;
     *     ULONG Timeout;
     *     WCHAR Description[64];
     * } *PKCRM_TRANSACTION_BLOB
     * }
     */
    public static final AddressLayout PKCRM_TRANSACTION_BLOB = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_TRANSACTION_BLOB {
     *     UOW UOW;
     *     GUID TmIdentity;
     *     ULONG IsolationLevel;
     *     ULONG IsolationFlags;
     *     ULONG Timeout;
     *     WCHAR Description[64];
     * } *PRKCRM_TRANSACTION_BLOB
     * }
     */
    public static final AddressLayout PRKCRM_TRANSACTION_BLOB = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_PROTOCOL_BLOB {
     *     CRM_PROTOCOL_ID ProtocolId;
     *     ULONG StaticInfoLength;
     *     ULONG TransactionIdInfoLength;
     *     ULONG Unused1;
     *     ULONG Unused2;
     * } *PKCRM_PROTOCOL_BLOB
     * }
     */
    public static final AddressLayout PKCRM_PROTOCOL_BLOB = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KCRM_PROTOCOL_BLOB {
     *     CRM_PROTOCOL_ID ProtocolId;
     *     ULONG StaticInfoLength;
     *     ULONG TransactionIdInfoLength;
     *     ULONG Unused1;
     *     ULONG Unused2;
     * } *PRKCRM_PROTOCOL_BLOB
     * }
     */
    public static final AddressLayout PRKCRM_PROTOCOL_BLOB = freeglut_h.C_POINTER;
    private static final int TransactionOutcomeUndetermined = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeUndetermined = 1
     * }
     */
    public static int TransactionOutcomeUndetermined() {
        return TransactionOutcomeUndetermined;
    }
    private static final int TransactionOutcomeCommitted = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeCommitted = 2
     * }
     */
    public static int TransactionOutcomeCommitted() {
        return TransactionOutcomeCommitted;
    }
    private static final int TransactionOutcomeAborted = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_OUTCOME.TransactionOutcomeAborted = 3
     * }
     */
    public static int TransactionOutcomeAborted() {
        return TransactionOutcomeAborted;
    }
    private static final int TransactionStateNormal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_STATE.TransactionStateNormal = 1
     * }
     */
    public static int TransactionStateNormal() {
        return TransactionStateNormal;
    }
    private static final int TransactionStateIndoubt = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_STATE.TransactionStateIndoubt = 2
     * }
     */
    public static int TransactionStateIndoubt() {
        return TransactionStateIndoubt;
    }
    private static final int TransactionStateCommittedNotify = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_STATE.TransactionStateCommittedNotify = 3
     * }
     */
    public static int TransactionStateCommittedNotify() {
        return TransactionStateCommittedNotify;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_BASIC_INFORMATION {
     *     GUID TransactionId;
     *     DWORD State;
     *     DWORD Outcome;
     * } *PTRANSACTION_BASIC_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_BASIC_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
     *     GUID TmIdentity;
     *     LARGE_INTEGER VirtualClock;
     * } *PTRANSACTIONMANAGER_BASIC_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_BASIC_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
     *     GUID LogIdentity;
     * } *PTRANSACTIONMANAGER_LOG_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_LOG_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
     *     DWORD LogPathLength;
     *     WCHAR LogPath[1];
     * } *PTRANSACTIONMANAGER_LOGPATH_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_LOGPATH_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
     *     ULONGLONG LastRecoveredLsn;
     * } *PTRANSACTIONMANAGER_RECOVERY_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_RECOVERY_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
     *     GUID OldestTransactionGuid;
     * } *PTRANSACTIONMANAGER_OLDEST_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTIONMANAGER_OLDEST_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
     *     DWORD IsolationLevel;
     *     DWORD IsolationFlags;
     *     LARGE_INTEGER Timeout;
     *     DWORD Outcome;
     *     DWORD DescriptionLength;
     *     WCHAR Description[1];
     * } *PTRANSACTION_PROPERTIES_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_PROPERTIES_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_BIND_INFORMATION {
     *     HANDLE TmHandle;
     * } *PTRANSACTION_BIND_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_BIND_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_ENLISTMENT_PAIR {
     *     GUID EnlistmentId;
     *     GUID ResourceManagerId;
     * } *PTRANSACTION_ENLISTMENT_PAIR
     * }
     */
    public static final AddressLayout PTRANSACTION_ENLISTMENT_PAIR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
     *     DWORD NumberOfEnlistments;
     *     TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
     * } *PTRANSACTION_ENLISTMENTS_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_ENLISTMENTS_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
     *     TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
     * } *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
     *     GUID ResourceManagerId;
     *     DWORD DescriptionLength;
     *     WCHAR Description[1];
     * } *PRESOURCEMANAGER_BASIC_INFORMATION
     * }
     */
    public static final AddressLayout PRESOURCEMANAGER_BASIC_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
     *     HANDLE IoCompletionPortHandle;
     *     ULONG_PTR CompletionKey;
     * } *PRESOURCEMANAGER_COMPLETION_INFORMATION
     * }
     */
    public static final AddressLayout PRESOURCEMANAGER_COMPLETION_INFORMATION = freeglut_h.C_POINTER;
    private static final int TransactionBasicInformation = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionBasicInformation = 0
     * }
     */
    public static int TransactionBasicInformation() {
        return TransactionBasicInformation;
    }
    private static final int TransactionPropertiesInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionPropertiesInformation = 1
     * }
     */
    public static int TransactionPropertiesInformation() {
        return TransactionPropertiesInformation;
    }
    private static final int TransactionEnlistmentInformation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionEnlistmentInformation = 2
     * }
     */
    public static int TransactionEnlistmentInformation() {
        return TransactionEnlistmentInformation;
    }
    private static final int TransactionSuperiorEnlistmentInformation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionSuperiorEnlistmentInformation = 3
     * }
     */
    public static int TransactionSuperiorEnlistmentInformation() {
        return TransactionSuperiorEnlistmentInformation;
    }
    private static final int TransactionBindInformation = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionBindInformation = 4
     * }
     */
    public static int TransactionBindInformation() {
        return TransactionBindInformation;
    }
    private static final int TransactionDTCPrivateInformation = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTION_INFORMATION_CLASS.TransactionDTCPrivateInformation = 5
     * }
     */
    public static int TransactionDTCPrivateInformation() {
        return TransactionDTCPrivateInformation;
    }
    private static final int TransactionManagerBasicInformation = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerBasicInformation = 0
     * }
     */
    public static int TransactionManagerBasicInformation() {
        return TransactionManagerBasicInformation;
    }
    private static final int TransactionManagerLogInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogInformation = 1
     * }
     */
    public static int TransactionManagerLogInformation() {
        return TransactionManagerLogInformation;
    }
    private static final int TransactionManagerLogPathInformation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogPathInformation = 2
     * }
     */
    public static int TransactionManagerLogPathInformation() {
        return TransactionManagerLogPathInformation;
    }
    private static final int TransactionManagerRecoveryInformation = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerRecoveryInformation = 4
     * }
     */
    public static int TransactionManagerRecoveryInformation() {
        return TransactionManagerRecoveryInformation;
    }
    private static final int TransactionManagerOnlineProbeInformation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOnlineProbeInformation = 3
     * }
     */
    public static int TransactionManagerOnlineProbeInformation() {
        return TransactionManagerOnlineProbeInformation;
    }
    private static final int TransactionManagerOldestTransactionInformation = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOldestTransactionInformation = 5
     * }
     */
    public static int TransactionManagerOldestTransactionInformation() {
        return TransactionManagerOldestTransactionInformation;
    }
    private static final int ResourceManagerBasicInformation = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerBasicInformation = 0
     * }
     */
    public static int ResourceManagerBasicInformation() {
        return ResourceManagerBasicInformation;
    }
    private static final int ResourceManagerCompletionInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerCompletionInformation = 1
     * }
     */
    public static int ResourceManagerCompletionInformation() {
        return ResourceManagerCompletionInformation;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ENLISTMENT_BASIC_INFORMATION {
     *     GUID EnlistmentId;
     *     GUID TransactionId;
     *     GUID ResourceManagerId;
     * } *PENLISTMENT_BASIC_INFORMATION
     * }
     */
    public static final AddressLayout PENLISTMENT_BASIC_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENLISTMENT_CRM_INFORMATION {
     *     GUID CrmTransactionManagerId;
     *     GUID CrmResourceManagerId;
     *     GUID CrmEnlistmentId;
     * } *PENLISTMENT_CRM_INFORMATION
     * }
     */
    public static final AddressLayout PENLISTMENT_CRM_INFORMATION = freeglut_h.C_POINTER;
    private static final int EnlistmentBasicInformation = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentBasicInformation = 0
     * }
     */
    public static int EnlistmentBasicInformation() {
        return EnlistmentBasicInformation;
    }
    private static final int EnlistmentRecoveryInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentRecoveryInformation = 1
     * }
     */
    public static int EnlistmentRecoveryInformation() {
        return EnlistmentRecoveryInformation;
    }
    private static final int EnlistmentCrmInformation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _ENLISTMENT_INFORMATION_CLASS.EnlistmentCrmInformation = 2
     * }
     */
    public static int EnlistmentCrmInformation() {
        return EnlistmentCrmInformation;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_LIST_ENTRY {
     *     UOW UOW;
     * } *PTRANSACTION_LIST_ENTRY
     * }
     */
    public static final AddressLayout PTRANSACTION_LIST_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSACTION_LIST_INFORMATION {
     *     DWORD NumberOfTransactions;
     *     TRANSACTION_LIST_ENTRY TransactionInformation[1];
     * } *PTRANSACTION_LIST_INFORMATION
     * }
     */
    public static final AddressLayout PTRANSACTION_LIST_INFORMATION = freeglut_h.C_POINTER;
    private static final int KTMOBJECT_TRANSACTION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION = 0
     * }
     */
    public static int KTMOBJECT_TRANSACTION() {
        return KTMOBJECT_TRANSACTION;
    }
    private static final int KTMOBJECT_TRANSACTION_MANAGER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION_MANAGER = 1
     * }
     */
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return KTMOBJECT_TRANSACTION_MANAGER;
    }
    private static final int KTMOBJECT_RESOURCE_MANAGER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_RESOURCE_MANAGER = 2
     * }
     */
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return KTMOBJECT_RESOURCE_MANAGER;
    }
    private static final int KTMOBJECT_ENLISTMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_ENLISTMENT = 3
     * }
     */
    public static int KTMOBJECT_ENLISTMENT() {
        return KTMOBJECT_ENLISTMENT;
    }
    private static final int KTMOBJECT_INVALID = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _KTMOBJECT_TYPE.KTMOBJECT_INVALID = 4
     * }
     */
    public static int KTMOBJECT_INVALID() {
        return KTMOBJECT_INVALID;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _KTMOBJECT_TYPE {
     *     KTMOBJECT_TRANSACTION,
     *     KTMOBJECT_TRANSACTION_MANAGER,
     *     KTMOBJECT_RESOURCE_MANAGER,
     *     KTMOBJECT_ENLISTMENT,
     *     KTMOBJECT_INVALID
     * } *PKTMOBJECT_TYPE
     * }
     */
    public static final AddressLayout PKTMOBJECT_TYPE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KTMOBJECT_CURSOR {
     *     GUID LastQuery;
     *     DWORD ObjectIdCount;
     *     GUID ObjectIds[1];
     * } *PKTMOBJECT_CURSOR
     * }
     */
    public static final AddressLayout PKTMOBJECT_CURSOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD TP_VERSION
     * }
     */
    public static final OfInt TP_VERSION = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD *PTP_VERSION
     * }
     */
    public static final AddressLayout PTP_VERSION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE
     * }
     */
    public static final AddressLayout PTP_CALLBACK_INSTANCE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_POOL *PTP_POOL
     * }
     */
    public static final AddressLayout PTP_POOL = freeglut_h.C_POINTER;
    private static final int TP_CALLBACK_PRIORITY_HIGH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_HIGH = 0
     * }
     */
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return TP_CALLBACK_PRIORITY_HIGH;
    }
    private static final int TP_CALLBACK_PRIORITY_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_NORMAL = 1
     * }
     */
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return TP_CALLBACK_PRIORITY_NORMAL;
    }
    private static final int TP_CALLBACK_PRIORITY_LOW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_LOW = 2
     * }
     */
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return TP_CALLBACK_PRIORITY_LOW;
    }
    private static final int TP_CALLBACK_PRIORITY_INVALID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_INVALID = 3
     * }
     */
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return TP_CALLBACK_PRIORITY_INVALID;
    }
    private static final int TP_CALLBACK_PRIORITY_COUNT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_COUNT = 3
     * }
     */
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return TP_CALLBACK_PRIORITY_COUNT;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _TP_POOL_STACK_INFORMATION {
     *     SIZE_T StackReserve;
     *     SIZE_T StackCommit;
     * } *PTP_POOL_STACK_INFORMATION
     * }
     */
    public static final AddressLayout PTP_POOL_STACK_INFORMATION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP
     * }
     */
    public static final AddressLayout PTP_CLEANUP_GROUP = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef TP_CALLBACK_ENVIRON_V3 *PTP_CALLBACK_ENVIRON
     * }
     */
    public static final AddressLayout PTP_CALLBACK_ENVIRON = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_WORK *PTP_WORK
     * }
     */
    public static final AddressLayout PTP_WORK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_TIMER *PTP_TIMER
     * }
     */
    public static final AddressLayout PTP_TIMER = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD TP_WAIT_RESULT
     * }
     */
    public static final OfInt TP_WAIT_RESULT = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_WAIT *PTP_WAIT
     * }
     */
    public static final AddressLayout PTP_WAIT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TP_IO *PTP_IO
     * }
     */
    public static final AddressLayout PTP_IO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef UINT_PTR WPARAM
     * }
     */
    public static final OfLong WPARAM = freeglut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef LONG_PTR LPARAM
     * }
     */
    public static final OfLong LPARAM = freeglut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef LONG_PTR LRESULT
     * }
     */
    public static final OfLong LRESULT = freeglut_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef HANDLE *SPHANDLE
     * }
     */
    public static final AddressLayout SPHANDLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HANDLE *LPHANDLE
     * }
     */
    public static final AddressLayout LPHANDLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HANDLE HGLOBAL
     * }
     */
    public static final AddressLayout HGLOBAL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HANDLE HLOCAL
     * }
     */
    public static final AddressLayout HLOCAL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HANDLE GLOBALHANDLE
     * }
     */
    public static final AddressLayout GLOBALHANDLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HANDLE LOCALHANDLE
     * }
     */
    public static final AddressLayout LOCALHANDLE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD ATOM
     * }
     */
    public static final OfShort ATOM = freeglut_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct HKEY__ {
     *     int unused;
     * } *HKEY
     * }
     */
    public static final AddressLayout HKEY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HKEY *PHKEY
     * }
     */
    public static final AddressLayout PHKEY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMETAFILE__ {
     *     int unused;
     * } *HMETAFILE
     * }
     */
    public static final AddressLayout HMETAFILE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HINSTANCE__ {
     *     int unused;
     * } *HINSTANCE
     * }
     */
    public static final AddressLayout HINSTANCE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HINSTANCE HMODULE
     * }
     */
    public static final AddressLayout HMODULE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HRGN__ {
     *     int unused;
     * } *HRGN
     * }
     */
    public static final AddressLayout HRGN = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HRSRC__ {
     *     int unused;
     * } *HRSRC
     * }
     */
    public static final AddressLayout HRSRC = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HSPRITE__ {
     *     int unused;
     * } *HSPRITE
     * }
     */
    public static final AddressLayout HSPRITE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HLSURF__ {
     *     int unused;
     * } *HLSURF
     * }
     */
    public static final AddressLayout HLSURF = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HSTR__ {
     *     int unused;
     * } *HSTR
     * }
     */
    public static final AddressLayout HSTR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HTASK__ {
     *     int unused;
     * } *HTASK
     * }
     */
    public static final AddressLayout HTASK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWINSTA__ {
     *     int unused;
     * } *HWINSTA
     * }
     */
    public static final AddressLayout HWINSTA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HKL__ {
     *     int unused;
     * } *HKL
     * }
     */
    public static final AddressLayout HKL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int HFILE
     * }
     */
    public static final OfInt HFILE = freeglut_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef struct _FILETIME {
     *     DWORD dwLowDateTime;
     *     DWORD dwHighDateTime;
     * } *PFILETIME
     * }
     */
    public static final AddressLayout PFILETIME = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILETIME {
     *     DWORD dwLowDateTime;
     *     DWORD dwHighDateTime;
     * } *LPFILETIME
     * }
     */
    public static final AddressLayout LPFILETIME = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWND__ {
     *     int unused;
     * } *HWND
     * }
     */
    public static final AddressLayout HWND = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HHOOK__ {
     *     int unused;
     * } *HHOOK
     * }
     */
    public static final AddressLayout HHOOK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *HGDIOBJ
     * }
     */
    public static final AddressLayout HGDIOBJ = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HACCEL__ {
     *     int unused;
     * } *HACCEL
     * }
     */
    public static final AddressLayout HACCEL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HBITMAP__ {
     *     int unused;
     * } *HBITMAP
     * }
     */
    public static final AddressLayout HBITMAP = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HBRUSH__ {
     *     int unused;
     * } *HBRUSH
     * }
     */
    public static final AddressLayout HBRUSH = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HCOLORSPACE__ {
     *     int unused;
     * } *HCOLORSPACE
     * }
     */
    public static final AddressLayout HCOLORSPACE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HDC__ {
     *     int unused;
     * } *HDC
     * }
     */
    public static final AddressLayout HDC = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HGLRC__ {
     *     int unused;
     * } *HGLRC
     * }
     */
    public static final AddressLayout HGLRC = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HDESK__ {
     *     int unused;
     * } *HDESK
     * }
     */
    public static final AddressLayout HDESK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HENHMETAFILE__ {
     *     int unused;
     * } *HENHMETAFILE
     * }
     */
    public static final AddressLayout HENHMETAFILE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HFONT__ {
     *     int unused;
     * } *HFONT
     * }
     */
    public static final AddressLayout HFONT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HICON__ {
     *     int unused;
     * } *HICON
     * }
     */
    public static final AddressLayout HICON = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMENU__ {
     *     int unused;
     * } *HMENU
     * }
     */
    public static final AddressLayout HMENU = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HPALETTE__ {
     *     int unused;
     * } *HPALETTE
     * }
     */
    public static final AddressLayout HPALETTE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HPEN__ {
     *     int unused;
     * } *HPEN
     * }
     */
    public static final AddressLayout HPEN = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HWINEVENTHOOK__ {
     *     int unused;
     * } *HWINEVENTHOOK
     * }
     */
    public static final AddressLayout HWINEVENTHOOK = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HMONITOR__ {
     *     int unused;
     * } *HMONITOR
     * }
     */
    public static final AddressLayout HMONITOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HUMPD__ {
     *     int unused;
     * } *HUMPD
     * }
     */
    public static final AddressLayout HUMPD = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HICON HCURSOR
     * }
     */
    public static final AddressLayout HCURSOR = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef DWORD COLORREF
     * }
     */
    public static final OfInt COLORREF = freeglut_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD *LPCOLORREF
     * }
     */
    public static final AddressLayout LPCOLORREF = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECT {
     *     LONG left;
     *     LONG top;
     *     LONG right;
     *     LONG bottom;
     * } *PRECT
     * }
     */
    public static final AddressLayout PRECT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECT {
     *     LONG left;
     *     LONG top;
     *     LONG right;
     *     LONG bottom;
     * } *NPRECT
     * }
     */
    public static final AddressLayout NPRECT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECT {
     *     LONG left;
     *     LONG top;
     *     LONG right;
     *     LONG bottom;
     * } *LPRECT
     * }
     */
    public static final AddressLayout LPRECT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const RECT *LPCRECT
     * }
     */
    public static final AddressLayout LPCRECT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RECTL {
     *     LONG left;
     *     LONG top;
     *     LONG right;
     *     LONG bottom;
     * } *PRECTL
     * }
     */
    public static final AddressLayout PRECTL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RECTL {
     *     LONG left;
     *     LONG top;
     *     LONG right;
     *     LONG bottom;
     * } *LPRECTL
     * }
     */
    public static final AddressLayout LPRECTL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const RECTL *LPCRECTL
     * }
     */
    public static final AddressLayout LPCRECTL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPOINT {
     *     LONG x;
     *     LONG y;
     * } *PPOINT
     * }
     */
    public static final AddressLayout PPOINT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPOINT {
     *     LONG x;
     *     LONG y;
     * } *NPPOINT
     * }
     */
    public static final AddressLayout NPPOINT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPOINT {
     *     LONG x;
     *     LONG y;
     * } *LPPOINT
     * }
     */
    public static final AddressLayout LPPOINT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _POINTL {
     *     LONG x;
     *     LONG y;
     * } *PPOINTL
     * }
     */
    public static final AddressLayout PPOINTL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSIZE {
     *     LONG cx;
     *     LONG cy;
     * } *PSIZE
     * }
     */
    public static final AddressLayout PSIZE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSIZE {
     *     LONG cx;
     *     LONG cy;
     * } *LPSIZE
     * }
     */
    public static final AddressLayout LPSIZE = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SIZE *PSIZEL
     * }
     */
    public static final AddressLayout PSIZEL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SIZE *LPSIZEL
     * }
     */
    public static final AddressLayout LPSIZEL = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPOINTS {
     *     SHORT x;
     *     SHORT y;
     * } *PPOINTS
     * }
     */
    public static final AddressLayout PPOINTS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPOINTS {
     *     SHORT x;
     *     SHORT y;
     * } *LPPOINTS
     * }
     */
    public static final AddressLayout LPPOINTS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct DPI_AWARENESS_CONTEXT__ {
     *     int unused;
     * } *DPI_AWARENESS_CONTEXT
     * }
     */
    public static final AddressLayout DPI_AWARENESS_CONTEXT = freeglut_h.C_POINTER;
    private static final int DPI_AWARENESS_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum DPI_AWARENESS.DPI_AWARENESS_INVALID = -1
     * }
     */
    public static int DPI_AWARENESS_INVALID() {
        return DPI_AWARENESS_INVALID;
    }
    private static final int DPI_AWARENESS_UNAWARE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum DPI_AWARENESS.DPI_AWARENESS_UNAWARE = 0
     * }
     */
    public static int DPI_AWARENESS_UNAWARE() {
        return DPI_AWARENESS_UNAWARE;
    }
    private static final int DPI_AWARENESS_SYSTEM_AWARE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum DPI_AWARENESS.DPI_AWARENESS_SYSTEM_AWARE = 1
     * }
     */
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return DPI_AWARENESS_SYSTEM_AWARE;
    }
    private static final int DPI_AWARENESS_PER_MONITOR_AWARE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum DPI_AWARENESS.DPI_AWARENESS_PER_MONITOR_AWARE = 2
     * }
     */
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return DPI_AWARENESS_PER_MONITOR_AWARE;
    }
    private static final int DPI_HOSTING_BEHAVIOR_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_INVALID = -1
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return DPI_HOSTING_BEHAVIOR_INVALID;
    }
    private static final int DPI_HOSTING_BEHAVIOR_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_DEFAULT = 0
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return DPI_HOSTING_BEHAVIOR_DEFAULT;
    }
    private static final int DPI_HOSTING_BEHAVIOR_MIXED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum DPI_HOSTING_BEHAVIOR.DPI_HOSTING_BEHAVIOR_MIXED = 1
     * }
     */
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return DPI_HOSTING_BEHAVIOR_MIXED;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     LPVOID lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *PSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout PSECURITY_ATTRIBUTES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SECURITY_ATTRIBUTES {
     *     DWORD nLength;
     *     LPVOID lpSecurityDescriptor;
     *     BOOL bInheritHandle;
     * } *LPSECURITY_ATTRIBUTES
     * }
     */
    public static final AddressLayout LPSECURITY_ATTRIBUTES = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OVERLAPPED {
     *     ULONG_PTR Internal;
     *     ULONG_PTR InternalHigh;
     *     union {
     *         struct {
     *             DWORD Offset;
     *             DWORD OffsetHigh;
     *         };
     *         PVOID Pointer;
     *     };
     *     HANDLE hEvent;
     * } *LPOVERLAPPED
     * }
     */
    public static final AddressLayout LPOVERLAPPED = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OVERLAPPED_ENTRY {
     *     ULONG_PTR lpCompletionKey;
     *     LPOVERLAPPED lpOverlapped;
     *     ULONG_PTR Internal;
     *     DWORD dwNumberOfBytesTransferred;
     * } *LPOVERLAPPED_ENTRY
     * }
     */
    public static final AddressLayout LPOVERLAPPED_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SYSTEMTIME {
     *     WORD wYear;
     *     WORD wMonth;
     *     WORD wDayOfWeek;
     *     WORD wDay;
     *     WORD wHour;
     *     WORD wMinute;
     *     WORD wSecond;
     *     WORD wMilliseconds;
     * } *PSYSTEMTIME
     * }
     */
    public static final AddressLayout PSYSTEMTIME = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SYSTEMTIME {
     *     WORD wYear;
     *     WORD wMonth;
     *     WORD wDayOfWeek;
     *     WORD wDay;
     *     WORD wHour;
     *     WORD wMinute;
     *     WORD wSecond;
     *     WORD wMilliseconds;
     * } *LPSYSTEMTIME
     * }
     */
    public static final AddressLayout LPSYSTEMTIME = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIN32_FIND_DATAA {
     *     DWORD dwFileAttributes;
     *     FILETIME ftCreationTime;
     *     FILETIME ftLastAccessTime;
     *     FILETIME ftLastWriteTime;
     *     DWORD nFileSizeHigh;
     *     DWORD nFileSizeLow;
     *     DWORD dwReserved0;
     *     DWORD dwReserved1;
     *     CHAR cFileName[260];
     *     CHAR cAlternateFileName[14];
     * } *PWIN32_FIND_DATAA
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATAA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIN32_FIND_DATAA {
     *     DWORD dwFileAttributes;
     *     FILETIME ftCreationTime;
     *     FILETIME ftLastAccessTime;
     *     FILETIME ftLastWriteTime;
     *     DWORD nFileSizeHigh;
     *     DWORD nFileSizeLow;
     *     DWORD dwReserved0;
     *     DWORD dwReserved1;
     *     CHAR cFileName[260];
     *     CHAR cAlternateFileName[14];
     * } *LPWIN32_FIND_DATAA
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATAA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIN32_FIND_DATAW {
     *     DWORD dwFileAttributes;
     *     FILETIME ftCreationTime;
     *     FILETIME ftLastAccessTime;
     *     FILETIME ftLastWriteTime;
     *     DWORD nFileSizeHigh;
     *     DWORD nFileSizeLow;
     *     DWORD dwReserved0;
     *     DWORD dwReserved1;
     *     WCHAR cFileName[260];
     *     WCHAR cAlternateFileName[14];
     * } *PWIN32_FIND_DATAW
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATAW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIN32_FIND_DATAW {
     *     DWORD dwFileAttributes;
     *     FILETIME ftCreationTime;
     *     FILETIME ftLastAccessTime;
     *     FILETIME ftLastWriteTime;
     *     DWORD nFileSizeHigh;
     *     DWORD nFileSizeLow;
     *     DWORD dwReserved0;
     *     DWORD dwReserved1;
     *     WCHAR cFileName[260];
     *     WCHAR cAlternateFileName[14];
     * } *LPWIN32_FIND_DATAW
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATAW = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA
     * }
     */
    public static final AddressLayout PWIN32_FIND_DATA = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA
     * }
     */
    public static final AddressLayout LPWIN32_FIND_DATA = freeglut_h.C_POINTER;
    private static final int FindExInfoStandard = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_INFO_LEVELS.FindExInfoStandard = 0
     * }
     */
    public static int FindExInfoStandard() {
        return FindExInfoStandard;
    }
    private static final int FindExInfoBasic = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_INFO_LEVELS.FindExInfoBasic = 1
     * }
     */
    public static int FindExInfoBasic() {
        return FindExInfoBasic;
    }
    private static final int FindExInfoMaxInfoLevel = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_INFO_LEVELS.FindExInfoMaxInfoLevel = 2
     * }
     */
    public static int FindExInfoMaxInfoLevel() {
        return FindExInfoMaxInfoLevel;
    }
    private static final int FindExSearchNameMatch = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_SEARCH_OPS.FindExSearchNameMatch = 0
     * }
     */
    public static int FindExSearchNameMatch() {
        return FindExSearchNameMatch;
    }
    private static final int FindExSearchLimitToDirectories = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_SEARCH_OPS.FindExSearchLimitToDirectories = 1
     * }
     */
    public static int FindExSearchLimitToDirectories() {
        return FindExSearchLimitToDirectories;
    }
    private static final int FindExSearchLimitToDevices = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_SEARCH_OPS.FindExSearchLimitToDevices = 2
     * }
     */
    public static int FindExSearchLimitToDevices() {
        return FindExSearchLimitToDevices;
    }
    private static final int FindExSearchMaxSearchOp = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FINDEX_SEARCH_OPS.FindExSearchMaxSearchOp = 3
     * }
     */
    public static int FindExSearchMaxSearchOp() {
        return FindExSearchMaxSearchOp;
    }
    private static final int ReadDirectoryNotifyInformation = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyInformation = 1
     * }
     */
    public static int ReadDirectoryNotifyInformation() {
        return ReadDirectoryNotifyInformation;
    }
    private static final int ReadDirectoryNotifyExtendedInformation = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyExtendedInformation = 2
     * }
     */
    public static int ReadDirectoryNotifyExtendedInformation() {
        return ReadDirectoryNotifyExtendedInformation;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
     *     ReadDirectoryNotifyInformation = 1,
     *     ReadDirectoryNotifyExtendedInformation
     * } *PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS
     * }
     */
    public static final AddressLayout PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = freeglut_h.C_POINTER;
    private static final int GetFileExInfoStandard = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard = 0
     * }
     */
    public static int GetFileExInfoStandard() {
        return GetFileExInfoStandard;
    }
    private static final int GetFileExMaxInfoLevel = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _GET_FILEEX_INFO_LEVELS.GetFileExMaxInfoLevel = 1
     * }
     */
    public static int GetFileExMaxInfoLevel() {
        return GetFileExMaxInfoLevel;
    }
    private static final int FileBasicInfo = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileBasicInfo = 0
     * }
     */
    public static int FileBasicInfo() {
        return FileBasicInfo;
    }
    private static final int FileStandardInfo = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo = 1
     * }
     */
    public static int FileStandardInfo() {
        return FileStandardInfo;
    }
    private static final int FileNameInfo = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileNameInfo = 2
     * }
     */
    public static int FileNameInfo() {
        return FileNameInfo;
    }
    private static final int FileRenameInfo = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRenameInfo = 3
     * }
     */
    public static int FileRenameInfo() {
        return FileRenameInfo;
    }
    private static final int FileDispositionInfo = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfo = 4
     * }
     */
    public static int FileDispositionInfo() {
        return FileDispositionInfo;
    }
    private static final int FileAllocationInfo = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAllocationInfo = 5
     * }
     */
    public static int FileAllocationInfo() {
        return FileAllocationInfo;
    }
    private static final int FileEndOfFileInfo = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileEndOfFileInfo = 6
     * }
     */
    public static int FileEndOfFileInfo() {
        return FileEndOfFileInfo;
    }
    private static final int FileStreamInfo = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStreamInfo = 7
     * }
     */
    public static int FileStreamInfo() {
        return FileStreamInfo;
    }
    private static final int FileCompressionInfo = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileCompressionInfo = 8
     * }
     */
    public static int FileCompressionInfo() {
        return FileCompressionInfo;
    }
    private static final int FileAttributeTagInfo = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAttributeTagInfo = 9
     * }
     */
    public static int FileAttributeTagInfo() {
        return FileAttributeTagInfo;
    }
    private static final int FileIdBothDirectoryInfo = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo = 10
     * }
     */
    public static int FileIdBothDirectoryInfo() {
        return FileIdBothDirectoryInfo;
    }
    private static final int FileIdBothDirectoryRestartInfo = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryRestartInfo = 11
     * }
     */
    public static int FileIdBothDirectoryRestartInfo() {
        return FileIdBothDirectoryRestartInfo;
    }
    private static final int FileIoPriorityHintInfo = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIoPriorityHintInfo = 12
     * }
     */
    public static int FileIoPriorityHintInfo() {
        return FileIoPriorityHintInfo;
    }
    private static final int FileRemoteProtocolInfo = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRemoteProtocolInfo = 13
     * }
     */
    public static int FileRemoteProtocolInfo() {
        return FileRemoteProtocolInfo;
    }
    private static final int FileFullDirectoryInfo = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryInfo = 14
     * }
     */
    public static int FileFullDirectoryInfo() {
        return FileFullDirectoryInfo;
    }
    private static final int FileFullDirectoryRestartInfo = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryRestartInfo = 15
     * }
     */
    public static int FileFullDirectoryRestartInfo() {
        return FileFullDirectoryRestartInfo;
    }
    private static final int FileStorageInfo = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileStorageInfo = 16
     * }
     */
    public static int FileStorageInfo() {
        return FileStorageInfo;
    }
    private static final int FileAlignmentInfo = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileAlignmentInfo = 17
     * }
     */
    public static int FileAlignmentInfo() {
        return FileAlignmentInfo;
    }
    private static final int FileIdInfo = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdInfo = 18
     * }
     */
    public static int FileIdInfo() {
        return FileIdInfo;
    }
    private static final int FileIdExtdDirectoryInfo = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryInfo = 19
     * }
     */
    public static int FileIdExtdDirectoryInfo() {
        return FileIdExtdDirectoryInfo;
    }
    private static final int FileIdExtdDirectoryRestartInfo = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryRestartInfo = 20
     * }
     */
    public static int FileIdExtdDirectoryRestartInfo() {
        return FileIdExtdDirectoryRestartInfo;
    }
    private static final int FileDispositionInfoEx = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfoEx = 21
     * }
     */
    public static int FileDispositionInfoEx() {
        return FileDispositionInfoEx;
    }
    private static final int FileRenameInfoEx = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileRenameInfoEx = 22
     * }
     */
    public static int FileRenameInfoEx() {
        return FileRenameInfoEx;
    }
    private static final int FileCaseSensitiveInfo = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileCaseSensitiveInfo = 23
     * }
     */
    public static int FileCaseSensitiveInfo() {
        return FileCaseSensitiveInfo;
    }
    private static final int FileNormalizedNameInfo = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.FileNormalizedNameInfo = 24
     * }
     */
    public static int FileNormalizedNameInfo() {
        return FileNormalizedNameInfo;
    }
    private static final int MaximumFileInfoByHandleClass = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _FILE_INFO_BY_HANDLE_CLASS.MaximumFileInfoByHandleClass = 25
     * }
     */
    public static int MaximumFileInfoByHandleClass() {
        return MaximumFileInfoByHandleClass;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_INFO_BY_HANDLE_CLASS {
     *     FileBasicInfo,
     *     FileStandardInfo,
     *     FileNameInfo,
     *     FileRenameInfo,
     *     FileDispositionInfo,
     *     FileAllocationInfo,
     *     FileEndOfFileInfo,
     *     FileStreamInfo,
     *     FileCompressionInfo,
     *     FileAttributeTagInfo,
     *     FileIdBothDirectoryInfo,
     *     FileIdBothDirectoryRestartInfo,
     *     FileIoPriorityHintInfo,
     *     FileRemoteProtocolInfo,
     *     FileFullDirectoryInfo,
     *     FileFullDirectoryRestartInfo,
     *     FileStorageInfo,
     *     FileAlignmentInfo,
     *     FileIdInfo,
     *     FileIdExtdDirectoryInfo,
     *     FileIdExtdDirectoryRestartInfo,
     *     FileDispositionInfoEx,
     *     FileRenameInfoEx,
     *     FileCaseSensitiveInfo,
     *     FileNormalizedNameInfo,
     *     MaximumFileInfoByHandleClass
     * } *PFILE_INFO_BY_HANDLE_CLASS
     * }
     */
    public static final AddressLayout PFILE_INFO_BY_HANDLE_CLASS = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION
     * }
     */
    public static final AddressLayout PCRITICAL_SECTION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION
     * }
     */
    public static final AddressLayout LPCRITICAL_SECTION = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG
     * }
     */
    public static final AddressLayout PCRITICAL_SECTION_DEBUG = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG
     * }
     */
    public static final AddressLayout LPCRITICAL_SECTION_DEBUG = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROCESS_HEAP_ENTRY {
     *     PVOID lpData;
     *     DWORD cbData;
     *     BYTE cbOverhead;
     *     BYTE iRegionIndex;
     *     WORD wFlags;
     *     union {
     *         struct {
     *             HANDLE hMem;
     *             DWORD dwReserved[3];
     *         } Block;
     *         struct {
     *             DWORD dwCommittedSize;
     *             DWORD dwUnCommittedSize;
     *             LPVOID lpFirstBlock;
     *             LPVOID lpLastBlock;
     *         } Region;
     *     };
     * } *LPPROCESS_HEAP_ENTRY
     * }
     */
    public static final AddressLayout LPPROCESS_HEAP_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROCESS_HEAP_ENTRY {
     *     PVOID lpData;
     *     DWORD cbData;
     *     BYTE cbOverhead;
     *     BYTE iRegionIndex;
     *     WORD wFlags;
     *     union {
     *         struct {
     *             HANDLE hMem;
     *             DWORD dwReserved[3];
     *         } Block;
     *         struct {
     *             DWORD dwCommittedSize;
     *             DWORD dwUnCommittedSize;
     *             LPVOID lpFirstBlock;
     *             LPVOID lpLastBlock;
     *         } Region;
     *     };
     * } *PPROCESS_HEAP_ENTRY
     * }
     */
    public static final AddressLayout PPROCESS_HEAP_ENTRY = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REASON_CONTEXT {
     *     ULONG Version;
     *     DWORD Flags;
     *     union {
     *         struct {
     *             HMODULE LocalizedReasonModule;
     *             ULONG LocalizedReasonId;
     *             ULONG ReasonStringCount;
     *             LPWSTR *ReasonStrings;
     *         } Detailed;
     *         LPWSTR SimpleReasonString;
     *     } Reason;
     * } *PREASON_CONTEXT
     * }
     */
    public static final AddressLayout PREASON_CONTEXT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXCEPTION_DEBUG_INFO {
     *     EXCEPTION_RECORD ExceptionRecord;
     *     DWORD dwFirstChance;
     * } *LPEXCEPTION_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPEXCEPTION_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_THREAD_DEBUG_INFO {
     *     HANDLE hThread;
     *     LPVOID lpThreadLocalBase;
     *     LPTHREAD_START_ROUTINE lpStartAddress;
     * } *LPCREATE_THREAD_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPCREATE_THREAD_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CREATE_PROCESS_DEBUG_INFO {
     *     HANDLE hFile;
     *     HANDLE hProcess;
     *     HANDLE hThread;
     *     LPVOID lpBaseOfImage;
     *     DWORD dwDebugInfoFileOffset;
     *     DWORD nDebugInfoSize;
     *     LPVOID lpThreadLocalBase;
     *     LPTHREAD_START_ROUTINE lpStartAddress;
     *     LPVOID lpImageName;
     *     WORD fUnicode;
     * } *LPCREATE_PROCESS_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPCREATE_PROCESS_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXIT_THREAD_DEBUG_INFO {
     *     DWORD dwExitCode;
     * } *LPEXIT_THREAD_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPEXIT_THREAD_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _EXIT_PROCESS_DEBUG_INFO {
     *     DWORD dwExitCode;
     * } *LPEXIT_PROCESS_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPEXIT_PROCESS_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LOAD_DLL_DEBUG_INFO {
     *     HANDLE hFile;
     *     LPVOID lpBaseOfDll;
     *     DWORD dwDebugInfoFileOffset;
     *     DWORD nDebugInfoSize;
     *     LPVOID lpImageName;
     *     WORD fUnicode;
     * } *LPLOAD_DLL_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPLOAD_DLL_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _UNLOAD_DLL_DEBUG_INFO {
     *     LPVOID lpBaseOfDll;
     * } *LPUNLOAD_DLL_DEBUG_INFO
     * }
     */
    public static final AddressLayout LPUNLOAD_DLL_DEBUG_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OUTPUT_DEBUG_STRING_INFO {
     *     LPSTR lpDebugStringData;
     *     WORD fUnicode;
     *     WORD nDebugStringLength;
     * } *LPOUTPUT_DEBUG_STRING_INFO
     * }
     */
    public static final AddressLayout LPOUTPUT_DEBUG_STRING_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RIP_INFO {
     *     DWORD dwError;
     *     DWORD dwType;
     * } *LPRIP_INFO
     * }
     */
    public static final AddressLayout LPRIP_INFO = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DEBUG_EVENT {
     *     DWORD dwDebugEventCode;
     *     DWORD dwProcessId;
     *     DWORD dwThreadId;
     *     union {
     *         EXCEPTION_DEBUG_INFO Exception;
     *         CREATE_THREAD_DEBUG_INFO CreateThread;
     *         CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
     *         EXIT_THREAD_DEBUG_INFO ExitThread;
     *         EXIT_PROCESS_DEBUG_INFO ExitProcess;
     *         LOAD_DLL_DEBUG_INFO LoadDll;
     *         UNLOAD_DLL_DEBUG_INFO UnloadDll;
     *         OUTPUT_DEBUG_STRING_INFO DebugString;
     *         RIP_INFO RipInfo;
     *     } u;
     * } *LPDEBUG_EVENT
     * }
     */
    public static final AddressLayout LPDEBUG_EVENT = freeglut_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PCONTEXT LPCONTEXT
     * }
     */
    public static final AddressLayout LPCONTEXT = freeglut_h.C_POINTER;

    private static class IsApiSetImplemented {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("IsApiSetImplemented");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsApiSetImplemented(PCSTR Contract)
     * }
     */
    public static FunctionDescriptor IsApiSetImplemented$descriptor() {
        return IsApiSetImplemented.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsApiSetImplemented(PCSTR Contract)
     * }
     */
    public static MethodHandle IsApiSetImplemented$handle() {
        return IsApiSetImplemented.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsApiSetImplemented(PCSTR Contract)
     * }
     */
    public static MemorySegment IsApiSetImplemented$address() {
        return IsApiSetImplemented.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsApiSetImplemented(PCSTR Contract)
     * }
     */
    public static int IsApiSetImplemented(MemorySegment Contract) {
        var mh$ = IsApiSetImplemented.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsApiSetImplemented", Contract);
            }
            return (int)mh$.invokeExact(Contract);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetEnvironmentStringsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetEnvironmentStringsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentStringsW(LPWCH NewEnvironment)
     * }
     */
    public static FunctionDescriptor SetEnvironmentStringsW$descriptor() {
        return SetEnvironmentStringsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentStringsW(LPWCH NewEnvironment)
     * }
     */
    public static MethodHandle SetEnvironmentStringsW$handle() {
        return SetEnvironmentStringsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentStringsW(LPWCH NewEnvironment)
     * }
     */
    public static MemorySegment SetEnvironmentStringsW$address() {
        return SetEnvironmentStringsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetEnvironmentStringsW(LPWCH NewEnvironment)
     * }
     */
    public static int SetEnvironmentStringsW(MemorySegment NewEnvironment) {
        var mh$ = SetEnvironmentStringsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetEnvironmentStringsW", NewEnvironment);
            }
            return (int)mh$.invokeExact(NewEnvironment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetStdHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetStdHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE GetStdHandle(DWORD nStdHandle)
     * }
     */
    public static FunctionDescriptor GetStdHandle$descriptor() {
        return GetStdHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE GetStdHandle(DWORD nStdHandle)
     * }
     */
    public static MethodHandle GetStdHandle$handle() {
        return GetStdHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE GetStdHandle(DWORD nStdHandle)
     * }
     */
    public static MemorySegment GetStdHandle$address() {
        return GetStdHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE GetStdHandle(DWORD nStdHandle)
     * }
     */
    public static MemorySegment GetStdHandle(int nStdHandle) {
        var mh$ = GetStdHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetStdHandle", nStdHandle);
            }
            return (MemorySegment)mh$.invokeExact(nStdHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetStdHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetStdHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
     * }
     */
    public static FunctionDescriptor SetStdHandle$descriptor() {
        return SetStdHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
     * }
     */
    public static MethodHandle SetStdHandle$handle() {
        return SetStdHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
     * }
     */
    public static MemorySegment SetStdHandle$address() {
        return SetStdHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetStdHandle(DWORD nStdHandle, HANDLE hHandle)
     * }
     */
    public static int SetStdHandle(int nStdHandle, MemorySegment hHandle) {
        var mh$ = SetStdHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetStdHandle", nStdHandle, hHandle);
            }
            return (int)mh$.invokeExact(nStdHandle, hHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetStdHandleEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetStdHandleEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue)
     * }
     */
    public static FunctionDescriptor SetStdHandleEx$descriptor() {
        return SetStdHandleEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue)
     * }
     */
    public static MethodHandle SetStdHandleEx$handle() {
        return SetStdHandleEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue)
     * }
     */
    public static MemorySegment SetStdHandleEx$address() {
        return SetStdHandleEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetStdHandleEx(DWORD nStdHandle, HANDLE hHandle, PHANDLE phPrevValue)
     * }
     */
    public static int SetStdHandleEx(int nStdHandle, MemorySegment hHandle, MemorySegment phPrevValue) {
        var mh$ = SetStdHandleEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetStdHandleEx", nStdHandle, hHandle, phPrevValue);
            }
            return (int)mh$.invokeExact(nStdHandle, hHandle, phPrevValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCommandLineA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER    );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetCommandLineA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPSTR GetCommandLineA()
     * }
     */
    public static FunctionDescriptor GetCommandLineA$descriptor() {
        return GetCommandLineA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPSTR GetCommandLineA()
     * }
     */
    public static MethodHandle GetCommandLineA$handle() {
        return GetCommandLineA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPSTR GetCommandLineA()
     * }
     */
    public static MemorySegment GetCommandLineA$address() {
        return GetCommandLineA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPSTR GetCommandLineA()
     * }
     */
    public static MemorySegment GetCommandLineA() {
        var mh$ = GetCommandLineA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCommandLineA");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCommandLineW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER    );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetCommandLineW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPWSTR GetCommandLineW()
     * }
     */
    public static FunctionDescriptor GetCommandLineW$descriptor() {
        return GetCommandLineW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPWSTR GetCommandLineW()
     * }
     */
    public static MethodHandle GetCommandLineW$handle() {
        return GetCommandLineW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPWSTR GetCommandLineW()
     * }
     */
    public static MemorySegment GetCommandLineW$address() {
        return GetCommandLineW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPWSTR GetCommandLineW()
     * }
     */
    public static MemorySegment GetCommandLineW() {
        var mh$ = GetCommandLineW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCommandLineW");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetEnvironmentStrings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER    );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetEnvironmentStrings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPCH GetEnvironmentStrings()
     * }
     */
    public static FunctionDescriptor GetEnvironmentStrings$descriptor() {
        return GetEnvironmentStrings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPCH GetEnvironmentStrings()
     * }
     */
    public static MethodHandle GetEnvironmentStrings$handle() {
        return GetEnvironmentStrings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPCH GetEnvironmentStrings()
     * }
     */
    public static MemorySegment GetEnvironmentStrings$address() {
        return GetEnvironmentStrings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPCH GetEnvironmentStrings()
     * }
     */
    public static MemorySegment GetEnvironmentStrings() {
        var mh$ = GetEnvironmentStrings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetEnvironmentStrings");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetEnvironmentStringsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER    );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetEnvironmentStringsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPWCH GetEnvironmentStringsW()
     * }
     */
    public static FunctionDescriptor GetEnvironmentStringsW$descriptor() {
        return GetEnvironmentStringsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPWCH GetEnvironmentStringsW()
     * }
     */
    public static MethodHandle GetEnvironmentStringsW$handle() {
        return GetEnvironmentStringsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPWCH GetEnvironmentStringsW()
     * }
     */
    public static MemorySegment GetEnvironmentStringsW$address() {
        return GetEnvironmentStringsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPWCH GetEnvironmentStringsW()
     * }
     */
    public static MemorySegment GetEnvironmentStringsW() {
        var mh$ = GetEnvironmentStringsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetEnvironmentStringsW");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreeEnvironmentStringsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FreeEnvironmentStringsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsA(LPCH penv)
     * }
     */
    public static FunctionDescriptor FreeEnvironmentStringsA$descriptor() {
        return FreeEnvironmentStringsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsA(LPCH penv)
     * }
     */
    public static MethodHandle FreeEnvironmentStringsA$handle() {
        return FreeEnvironmentStringsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsA(LPCH penv)
     * }
     */
    public static MemorySegment FreeEnvironmentStringsA$address() {
        return FreeEnvironmentStringsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsA(LPCH penv)
     * }
     */
    public static int FreeEnvironmentStringsA(MemorySegment penv) {
        var mh$ = FreeEnvironmentStringsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreeEnvironmentStringsA", penv);
            }
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreeEnvironmentStringsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FreeEnvironmentStringsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsW(LPWCH penv)
     * }
     */
    public static FunctionDescriptor FreeEnvironmentStringsW$descriptor() {
        return FreeEnvironmentStringsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsW(LPWCH penv)
     * }
     */
    public static MethodHandle FreeEnvironmentStringsW$handle() {
        return FreeEnvironmentStringsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsW(LPWCH penv)
     * }
     */
    public static MemorySegment FreeEnvironmentStringsW$address() {
        return FreeEnvironmentStringsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FreeEnvironmentStringsW(LPWCH penv)
     * }
     */
    public static int FreeEnvironmentStringsW(MemorySegment penv) {
        var mh$ = FreeEnvironmentStringsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreeEnvironmentStringsW", penv);
            }
            return (int)mh$.invokeExact(penv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetEnvironmentVariableA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetEnvironmentVariableA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
     * }
     */
    public static FunctionDescriptor GetEnvironmentVariableA$descriptor() {
        return GetEnvironmentVariableA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
     * }
     */
    public static MethodHandle GetEnvironmentVariableA$handle() {
        return GetEnvironmentVariableA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
     * }
     */
    public static MemorySegment GetEnvironmentVariableA$address() {
        return GetEnvironmentVariableA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
     * }
     */
    public static int GetEnvironmentVariableA(MemorySegment lpName, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetEnvironmentVariableA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetEnvironmentVariableA", lpName, lpBuffer, nSize);
            }
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetEnvironmentVariableW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetEnvironmentVariableW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
     * }
     */
    public static FunctionDescriptor GetEnvironmentVariableW$descriptor() {
        return GetEnvironmentVariableW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
     * }
     */
    public static MethodHandle GetEnvironmentVariableW$handle() {
        return GetEnvironmentVariableW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
     * }
     */
    public static MemorySegment GetEnvironmentVariableW$address() {
        return GetEnvironmentVariableW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetEnvironmentVariableW(LPCWSTR lpName, LPWSTR lpBuffer, DWORD nSize)
     * }
     */
    public static int GetEnvironmentVariableW(MemorySegment lpName, MemorySegment lpBuffer, int nSize) {
        var mh$ = GetEnvironmentVariableW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetEnvironmentVariableW", lpName, lpBuffer, nSize);
            }
            return (int)mh$.invokeExact(lpName, lpBuffer, nSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetEnvironmentVariableA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetEnvironmentVariableA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue)
     * }
     */
    public static FunctionDescriptor SetEnvironmentVariableA$descriptor() {
        return SetEnvironmentVariableA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue)
     * }
     */
    public static MethodHandle SetEnvironmentVariableA$handle() {
        return SetEnvironmentVariableA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue)
     * }
     */
    public static MemorySegment SetEnvironmentVariableA$address() {
        return SetEnvironmentVariableA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableA(LPCSTR lpName, LPCSTR lpValue)
     * }
     */
    public static int SetEnvironmentVariableA(MemorySegment lpName, MemorySegment lpValue) {
        var mh$ = SetEnvironmentVariableA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetEnvironmentVariableA", lpName, lpValue);
            }
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetEnvironmentVariableW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetEnvironmentVariableW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue)
     * }
     */
    public static FunctionDescriptor SetEnvironmentVariableW$descriptor() {
        return SetEnvironmentVariableW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue)
     * }
     */
    public static MethodHandle SetEnvironmentVariableW$handle() {
        return SetEnvironmentVariableW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue)
     * }
     */
    public static MemorySegment SetEnvironmentVariableW$address() {
        return SetEnvironmentVariableW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetEnvironmentVariableW(LPCWSTR lpName, LPCWSTR lpValue)
     * }
     */
    public static int SetEnvironmentVariableW(MemorySegment lpName, MemorySegment lpValue) {
        var mh$ = SetEnvironmentVariableW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetEnvironmentVariableW", lpName, lpValue);
            }
            return (int)mh$.invokeExact(lpName, lpValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExpandEnvironmentStringsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("ExpandEnvironmentStringsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
     * }
     */
    public static FunctionDescriptor ExpandEnvironmentStringsA$descriptor() {
        return ExpandEnvironmentStringsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
     * }
     */
    public static MethodHandle ExpandEnvironmentStringsA$handle() {
        return ExpandEnvironmentStringsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
     * }
     */
    public static MemorySegment ExpandEnvironmentStringsA$address() {
        return ExpandEnvironmentStringsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsA(LPCSTR lpSrc, LPSTR lpDst, DWORD nSize)
     * }
     */
    public static int ExpandEnvironmentStringsA(MemorySegment lpSrc, MemorySegment lpDst, int nSize) {
        var mh$ = ExpandEnvironmentStringsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExpandEnvironmentStringsA", lpSrc, lpDst, nSize);
            }
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExpandEnvironmentStringsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("ExpandEnvironmentStringsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
     * }
     */
    public static FunctionDescriptor ExpandEnvironmentStringsW$descriptor() {
        return ExpandEnvironmentStringsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
     * }
     */
    public static MethodHandle ExpandEnvironmentStringsW$handle() {
        return ExpandEnvironmentStringsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
     * }
     */
    public static MemorySegment ExpandEnvironmentStringsW$address() {
        return ExpandEnvironmentStringsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
     * }
     */
    public static int ExpandEnvironmentStringsW(MemorySegment lpSrc, MemorySegment lpDst, int nSize) {
        var mh$ = ExpandEnvironmentStringsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExpandEnvironmentStringsW", lpSrc, lpDst, nSize);
            }
            return (int)mh$.invokeExact(lpSrc, lpDst, nSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetCurrentDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetCurrentDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryA(LPCSTR lpPathName)
     * }
     */
    public static FunctionDescriptor SetCurrentDirectoryA$descriptor() {
        return SetCurrentDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryA(LPCSTR lpPathName)
     * }
     */
    public static MethodHandle SetCurrentDirectoryA$handle() {
        return SetCurrentDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryA(LPCSTR lpPathName)
     * }
     */
    public static MemorySegment SetCurrentDirectoryA$address() {
        return SetCurrentDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryA(LPCSTR lpPathName)
     * }
     */
    public static int SetCurrentDirectoryA(MemorySegment lpPathName) {
        var mh$ = SetCurrentDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetCurrentDirectoryA", lpPathName);
            }
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetCurrentDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SetCurrentDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryW(LPCWSTR lpPathName)
     * }
     */
    public static FunctionDescriptor SetCurrentDirectoryW$descriptor() {
        return SetCurrentDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryW(LPCWSTR lpPathName)
     * }
     */
    public static MethodHandle SetCurrentDirectoryW$handle() {
        return SetCurrentDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryW(LPCWSTR lpPathName)
     * }
     */
    public static MemorySegment SetCurrentDirectoryW$address() {
        return SetCurrentDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetCurrentDirectoryW(LPCWSTR lpPathName)
     * }
     */
    public static int SetCurrentDirectoryW(MemorySegment lpPathName) {
        var mh$ = SetCurrentDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetCurrentDirectoryW", lpPathName);
            }
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCurrentDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetCurrentDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
     * }
     */
    public static FunctionDescriptor GetCurrentDirectoryA$descriptor() {
        return GetCurrentDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
     * }
     */
    public static MethodHandle GetCurrentDirectoryA$handle() {
        return GetCurrentDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
     * }
     */
    public static MemorySegment GetCurrentDirectoryA$address() {
        return GetCurrentDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
     * }
     */
    public static int GetCurrentDirectoryA(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetCurrentDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCurrentDirectoryA", nBufferLength, lpBuffer);
            }
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCurrentDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetCurrentDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
     * }
     */
    public static FunctionDescriptor GetCurrentDirectoryW$descriptor() {
        return GetCurrentDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
     * }
     */
    public static MethodHandle GetCurrentDirectoryW$handle() {
        return GetCurrentDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
     * }
     */
    public static MemorySegment GetCurrentDirectoryW$address() {
        return GetCurrentDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetCurrentDirectoryW(DWORD nBufferLength, LPWSTR lpBuffer)
     * }
     */
    public static int GetCurrentDirectoryW(int nBufferLength, MemorySegment lpBuffer) {
        var mh$ = GetCurrentDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCurrentDirectoryW", nBufferLength, lpBuffer);
            }
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SearchPathW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SearchPathW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
     * }
     */
    public static FunctionDescriptor SearchPathW$descriptor() {
        return SearchPathW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
     * }
     */
    public static MethodHandle SearchPathW$handle() {
        return SearchPathW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
     * }
     */
    public static MemorySegment SearchPathW$address() {
        return SearchPathW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SearchPathW(LPCWSTR lpPath, LPCWSTR lpFileName, LPCWSTR lpExtension, DWORD nBufferLength, LPWSTR lpBuffer, LPWSTR *lpFilePart)
     * }
     */
    public static int SearchPathW(MemorySegment lpPath, MemorySegment lpFileName, MemorySegment lpExtension, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = SearchPathW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SearchPathW", lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
            }
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SearchPathA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("SearchPathA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
     * }
     */
    public static FunctionDescriptor SearchPathA$descriptor() {
        return SearchPathA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
     * }
     */
    public static MethodHandle SearchPathA$handle() {
        return SearchPathA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
     * }
     */
    public static MemorySegment SearchPathA$address() {
        return SearchPathA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SearchPathA(LPCSTR lpPath, LPCSTR lpFileName, LPCSTR lpExtension, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
     * }
     */
    public static int SearchPathA(MemorySegment lpPath, MemorySegment lpFileName, MemorySegment lpExtension, int nBufferLength, MemorySegment lpBuffer, MemorySegment lpFilePart) {
        var mh$ = SearchPathA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SearchPathA", lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
            }
            return (int)mh$.invokeExact(lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NeedCurrentDirectoryForExePathA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("NeedCurrentDirectoryForExePathA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName)
     * }
     */
    public static FunctionDescriptor NeedCurrentDirectoryForExePathA$descriptor() {
        return NeedCurrentDirectoryForExePathA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName)
     * }
     */
    public static MethodHandle NeedCurrentDirectoryForExePathA$handle() {
        return NeedCurrentDirectoryForExePathA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName)
     * }
     */
    public static MemorySegment NeedCurrentDirectoryForExePathA$address() {
        return NeedCurrentDirectoryForExePathA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathA(LPCSTR ExeName)
     * }
     */
    public static int NeedCurrentDirectoryForExePathA(MemorySegment ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NeedCurrentDirectoryForExePathA", ExeName);
            }
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NeedCurrentDirectoryForExePathW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("NeedCurrentDirectoryForExePathW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName)
     * }
     */
    public static FunctionDescriptor NeedCurrentDirectoryForExePathW$descriptor() {
        return NeedCurrentDirectoryForExePathW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName)
     * }
     */
    public static MethodHandle NeedCurrentDirectoryForExePathW$handle() {
        return NeedCurrentDirectoryForExePathW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName)
     * }
     */
    public static MemorySegment NeedCurrentDirectoryForExePathW$address() {
        return NeedCurrentDirectoryForExePathW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL NeedCurrentDirectoryForExePathW(LPCWSTR ExeName)
     * }
     */
    public static int NeedCurrentDirectoryForExePathW(MemorySegment ExeName) {
        var mh$ = NeedCurrentDirectoryForExePathW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NeedCurrentDirectoryForExePathW", ExeName);
            }
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CompareFileTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("CompareFileTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
     * }
     */
    public static FunctionDescriptor CompareFileTime$descriptor() {
        return CompareFileTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
     * }
     */
    public static MethodHandle CompareFileTime$handle() {
        return CompareFileTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
     * }
     */
    public static MemorySegment CompareFileTime$address() {
        return CompareFileTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG CompareFileTime(const FILETIME *lpFileTime1, const FILETIME *lpFileTime2)
     * }
     */
    public static int CompareFileTime(MemorySegment lpFileTime1, MemorySegment lpFileTime2) {
        var mh$ = CompareFileTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CompareFileTime", lpFileTime1, lpFileTime2);
            }
            return (int)mh$.invokeExact(lpFileTime1, lpFileTime2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("CreateDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static FunctionDescriptor CreateDirectoryA$descriptor() {
        return CreateDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static MethodHandle CreateDirectoryA$handle() {
        return CreateDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static MemorySegment CreateDirectoryA$address() {
        return CreateDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static int CreateDirectoryA(MemorySegment lpPathName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDirectoryA", lpPathName, lpSecurityAttributes);
            }
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("CreateDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static FunctionDescriptor CreateDirectoryW$descriptor() {
        return CreateDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static MethodHandle CreateDirectoryW$handle() {
        return CreateDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static MemorySegment CreateDirectoryW$address() {
        return CreateDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
     * }
     */
    public static int CreateDirectoryW(MemorySegment lpPathName, MemorySegment lpSecurityAttributes) {
        var mh$ = CreateDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDirectoryW", lpPathName, lpSecurityAttributes);
            }
            return (int)mh$.invokeExact(lpPathName, lpSecurityAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("CreateFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static FunctionDescriptor CreateFileA$descriptor() {
        return CreateFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MethodHandle CreateFileA$handle() {
        return CreateFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MemorySegment CreateFileA$address() {
        return CreateFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MemorySegment CreateFileA(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile) {
        var mh$ = CreateFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFileA", lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("CreateFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static FunctionDescriptor CreateFileW$descriptor() {
        return CreateFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MethodHandle CreateFileW$handle() {
        return CreateFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MemorySegment CreateFileW$address() {
        return CreateFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
     * }
     */
    public static MemorySegment CreateFileW(MemorySegment lpFileName, int dwDesiredAccess, int dwShareMode, MemorySegment lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, MemorySegment hTemplateFile) {
        var mh$ = CreateFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateFileW", lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DefineDosDeviceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_LONG,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("DefineDosDeviceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath)
     * }
     */
    public static FunctionDescriptor DefineDosDeviceW$descriptor() {
        return DefineDosDeviceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath)
     * }
     */
    public static MethodHandle DefineDosDeviceW$handle() {
        return DefineDosDeviceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath)
     * }
     */
    public static MemorySegment DefineDosDeviceW$address() {
        return DefineDosDeviceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DefineDosDeviceW(DWORD dwFlags, LPCWSTR lpDeviceName, LPCWSTR lpTargetPath)
     * }
     */
    public static int DefineDosDeviceW(int dwFlags, MemorySegment lpDeviceName, MemorySegment lpTargetPath) {
        var mh$ = DefineDosDeviceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DefineDosDeviceW", dwFlags, lpDeviceName, lpTargetPath);
            }
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("DeleteFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFileA(LPCSTR lpFileName)
     * }
     */
    public static FunctionDescriptor DeleteFileA$descriptor() {
        return DeleteFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFileA(LPCSTR lpFileName)
     * }
     */
    public static MethodHandle DeleteFileA$handle() {
        return DeleteFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFileA(LPCSTR lpFileName)
     * }
     */
    public static MemorySegment DeleteFileA$address() {
        return DeleteFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFileA(LPCSTR lpFileName)
     * }
     */
    public static int DeleteFileA(MemorySegment lpFileName) {
        var mh$ = DeleteFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFileA", lpFileName);
            }
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("DeleteFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFileW(LPCWSTR lpFileName)
     * }
     */
    public static FunctionDescriptor DeleteFileW$descriptor() {
        return DeleteFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFileW(LPCWSTR lpFileName)
     * }
     */
    public static MethodHandle DeleteFileW$handle() {
        return DeleteFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFileW(LPCWSTR lpFileName)
     * }
     */
    public static MemorySegment DeleteFileW$address() {
        return DeleteFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFileW(LPCWSTR lpFileName)
     * }
     */
    public static int DeleteFileW(MemorySegment lpFileName) {
        var mh$ = DeleteFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFileW", lpFileName);
            }
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteVolumeMountPointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("DeleteVolumeMountPointW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint)
     * }
     */
    public static FunctionDescriptor DeleteVolumeMountPointW$descriptor() {
        return DeleteVolumeMountPointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint)
     * }
     */
    public static MethodHandle DeleteVolumeMountPointW$handle() {
        return DeleteVolumeMountPointW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint)
     * }
     */
    public static MemorySegment DeleteVolumeMountPointW$address() {
        return DeleteVolumeMountPointW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteVolumeMountPointW(LPCWSTR lpszVolumeMountPoint)
     * }
     */
    public static int DeleteVolumeMountPointW(MemorySegment lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteVolumeMountPointW", lpszVolumeMountPoint);
            }
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FileTimeToLocalFileTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FileTimeToLocalFileTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
     * }
     */
    public static FunctionDescriptor FileTimeToLocalFileTime$descriptor() {
        return FileTimeToLocalFileTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
     * }
     */
    public static MethodHandle FileTimeToLocalFileTime$handle() {
        return FileTimeToLocalFileTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
     * }
     */
    public static MemorySegment FileTimeToLocalFileTime$address() {
        return FileTimeToLocalFileTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FileTimeToLocalFileTime(const FILETIME *lpFileTime, LPFILETIME lpLocalFileTime)
     * }
     */
    public static int FileTimeToLocalFileTime(MemorySegment lpFileTime, MemorySegment lpLocalFileTime) {
        var mh$ = FileTimeToLocalFileTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FileTimeToLocalFileTime", lpFileTime, lpLocalFileTime);
            }
            return (int)mh$.invokeExact(lpFileTime, lpLocalFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindClose(HANDLE hFindFile)
     * }
     */
    public static FunctionDescriptor FindClose$descriptor() {
        return FindClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindClose(HANDLE hFindFile)
     * }
     */
    public static MethodHandle FindClose$handle() {
        return FindClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindClose(HANDLE hFindFile)
     * }
     */
    public static MemorySegment FindClose$address() {
        return FindClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindClose(HANDLE hFindFile)
     * }
     */
    public static int FindClose(MemorySegment hFindFile) {
        var mh$ = FindClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindClose", hFindFile);
            }
            return (int)mh$.invokeExact(hFindFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindCloseChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindCloseChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindCloseChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static FunctionDescriptor FindCloseChangeNotification$descriptor() {
        return FindCloseChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindCloseChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static MethodHandle FindCloseChangeNotification$handle() {
        return FindCloseChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindCloseChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static MemorySegment FindCloseChangeNotification$address() {
        return FindCloseChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindCloseChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static int FindCloseChangeNotification(MemorySegment hChangeHandle) {
        var mh$ = FindCloseChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindCloseChangeNotification", hChangeHandle);
            }
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstChangeNotificationA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstChangeNotificationA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static FunctionDescriptor FindFirstChangeNotificationA$descriptor() {
        return FindFirstChangeNotificationA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MethodHandle FindFirstChangeNotificationA$handle() {
        return FindFirstChangeNotificationA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MemorySegment FindFirstChangeNotificationA$address() {
        return FindFirstChangeNotificationA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationA(LPCSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MemorySegment FindFirstChangeNotificationA(MemorySegment lpPathName, int bWatchSubtree, int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstChangeNotificationA", lpPathName, bWatchSubtree, dwNotifyFilter);
            }
            return (MemorySegment)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstChangeNotificationW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstChangeNotificationW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static FunctionDescriptor FindFirstChangeNotificationW$descriptor() {
        return FindFirstChangeNotificationW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MethodHandle FindFirstChangeNotificationW$handle() {
        return FindFirstChangeNotificationW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MemorySegment FindFirstChangeNotificationW$address() {
        return FindFirstChangeNotificationW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstChangeNotificationW(LPCWSTR lpPathName, BOOL bWatchSubtree, DWORD dwNotifyFilter)
     * }
     */
    public static MemorySegment FindFirstChangeNotificationW(MemorySegment lpPathName, int bWatchSubtree, int dwNotifyFilter) {
        var mh$ = FindFirstChangeNotificationW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstChangeNotificationW", lpPathName, bWatchSubtree, dwNotifyFilter);
            }
            return (MemorySegment)mh$.invokeExact(lpPathName, bWatchSubtree, dwNotifyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static FunctionDescriptor FindFirstFileA$descriptor() {
        return FindFirstFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static MethodHandle FindFirstFileA$handle() {
        return FindFirstFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static MemorySegment FindFirstFileA$address() {
        return FindFirstFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static MemorySegment FindFirstFileA(MemorySegment lpFileName, MemorySegment lpFindFileData) {
        var mh$ = FindFirstFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstFileA", lpFileName, lpFindFileData);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static FunctionDescriptor FindFirstFileW$descriptor() {
        return FindFirstFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static MethodHandle FindFirstFileW$handle() {
        return FindFirstFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static MemorySegment FindFirstFileW$address() {
        return FindFirstFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static MemorySegment FindFirstFileW(MemorySegment lpFileName, MemorySegment lpFindFileData) {
        var mh$ = FindFirstFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstFileW", lpFileName, lpFindFileData);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, lpFindFileData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstFileExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstFileExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static FunctionDescriptor FindFirstFileExA$descriptor() {
        return FindFirstFileExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MethodHandle FindFirstFileExA$handle() {
        return FindFirstFileExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MemorySegment FindFirstFileExA$address() {
        return FindFirstFileExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstFileExA(LPCSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MemorySegment FindFirstFileExA(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags) {
        var mh$ = FindFirstFileExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstFileExA", lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstFileExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstFileExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static FunctionDescriptor FindFirstFileExW$descriptor() {
        return FindFirstFileExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MethodHandle FindFirstFileExW$handle() {
        return FindFirstFileExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MemorySegment FindFirstFileExW$address() {
        return FindFirstFileExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstFileExW(LPCWSTR lpFileName, FINDEX_INFO_LEVELS fInfoLevelId, LPVOID lpFindFileData, FINDEX_SEARCH_OPS fSearchOp, LPVOID lpSearchFilter, DWORD dwAdditionalFlags)
     * }
     */
    public static MemorySegment FindFirstFileExW(MemorySegment lpFileName, int fInfoLevelId, MemorySegment lpFindFileData, int fSearchOp, MemorySegment lpSearchFilter, int dwAdditionalFlags) {
        var mh$ = FindFirstFileExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstFileExW", lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
            }
            return (MemorySegment)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstVolumeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindFirstVolumeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static FunctionDescriptor FindFirstVolumeW$descriptor() {
        return FindFirstVolumeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static MethodHandle FindFirstVolumeW$handle() {
        return FindFirstVolumeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static MemorySegment FindFirstVolumeW$address() {
        return FindFirstVolumeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstVolumeW(LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static MemorySegment FindFirstVolumeW(MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindFirstVolumeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstVolumeW", lpszVolumeName, cchBufferLength);
            }
            return (MemorySegment)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindNextChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static FunctionDescriptor FindNextChangeNotification$descriptor() {
        return FindNextChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static MethodHandle FindNextChangeNotification$handle() {
        return FindNextChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static MemorySegment FindNextChangeNotification$address() {
        return FindNextChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextChangeNotification(HANDLE hChangeHandle)
     * }
     */
    public static int FindNextChangeNotification(MemorySegment hChangeHandle) {
        var mh$ = FindNextChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextChangeNotification", hChangeHandle);
            }
            return (int)mh$.invokeExact(hChangeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindNextFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static FunctionDescriptor FindNextFileA$descriptor() {
        return FindNextFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static MethodHandle FindNextFileA$handle() {
        return FindNextFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static MemorySegment FindNextFileA$address() {
        return FindNextFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
     * }
     */
    public static int FindNextFileA(MemorySegment hFindFile, MemorySegment lpFindFileData) {
        var mh$ = FindNextFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextFileA", hFindFile, lpFindFileData);
            }
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindNextFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static FunctionDescriptor FindNextFileW$descriptor() {
        return FindNextFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static MethodHandle FindNextFileW$handle() {
        return FindNextFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static MemorySegment FindNextFileW$address() {
        return FindNextFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
     * }
     */
    public static int FindNextFileW(MemorySegment hFindFile, MemorySegment lpFindFileData) {
        var mh$ = FindNextFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextFileW", hFindFile, lpFindFileData);
            }
            return (int)mh$.invokeExact(hFindFile, lpFindFileData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextVolumeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_LONG
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindNextVolumeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static FunctionDescriptor FindNextVolumeW$descriptor() {
        return FindNextVolumeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static MethodHandle FindNextVolumeW$handle() {
        return FindNextVolumeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static MemorySegment FindNextVolumeW$address() {
        return FindNextVolumeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextVolumeW(HANDLE hFindVolume, LPWSTR lpszVolumeName, DWORD cchBufferLength)
     * }
     */
    public static int FindNextVolumeW(MemorySegment hFindVolume, MemorySegment lpszVolumeName, int cchBufferLength) {
        var mh$ = FindNextVolumeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextVolumeW", hFindVolume, lpszVolumeName, cchBufferLength);
            }
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindVolumeClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FindVolumeClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindVolumeClose(HANDLE hFindVolume)
     * }
     */
    public static FunctionDescriptor FindVolumeClose$descriptor() {
        return FindVolumeClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindVolumeClose(HANDLE hFindVolume)
     * }
     */
    public static MethodHandle FindVolumeClose$handle() {
        return FindVolumeClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindVolumeClose(HANDLE hFindVolume)
     * }
     */
    public static MemorySegment FindVolumeClose$address() {
        return FindVolumeClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindVolumeClose(HANDLE hFindVolume)
     * }
     */
    public static int FindVolumeClose(MemorySegment hFindVolume) {
        var mh$ = FindVolumeClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindVolumeClose", hFindVolume);
            }
            return (int)mh$.invokeExact(hFindVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FlushFileBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("FlushFileBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FlushFileBuffers(HANDLE hFile)
     * }
     */
    public static FunctionDescriptor FlushFileBuffers$descriptor() {
        return FlushFileBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FlushFileBuffers(HANDLE hFile)
     * }
     */
    public static MethodHandle FlushFileBuffers$handle() {
        return FlushFileBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FlushFileBuffers(HANDLE hFile)
     * }
     */
    public static MemorySegment FlushFileBuffers$address() {
        return FlushFileBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FlushFileBuffers(HANDLE hFile)
     * }
     */
    public static int FlushFileBuffers(MemorySegment hFile) {
        var mh$ = FlushFileBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FlushFileBuffers", hFile);
            }
            return (int)mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDiskFreeSpaceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetDiskFreeSpaceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static FunctionDescriptor GetDiskFreeSpaceA$descriptor() {
        return GetDiskFreeSpaceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static MethodHandle GetDiskFreeSpaceA$handle() {
        return GetDiskFreeSpaceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static MemorySegment GetDiskFreeSpaceA$address() {
        return GetDiskFreeSpaceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static int GetDiskFreeSpaceA(MemorySegment lpRootPathName, MemorySegment lpSectorsPerCluster, MemorySegment lpBytesPerSector, MemorySegment lpNumberOfFreeClusters, MemorySegment lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDiskFreeSpaceA", lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
            }
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDiskFreeSpaceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetDiskFreeSpaceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static FunctionDescriptor GetDiskFreeSpaceW$descriptor() {
        return GetDiskFreeSpaceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static MethodHandle GetDiskFreeSpaceW$handle() {
        return GetDiskFreeSpaceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static MemorySegment GetDiskFreeSpaceW$address() {
        return GetDiskFreeSpaceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceW(LPCWSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
     * }
     */
    public static int GetDiskFreeSpaceW(MemorySegment lpRootPathName, MemorySegment lpSectorsPerCluster, MemorySegment lpBytesPerSector, MemorySegment lpNumberOfFreeClusters, MemorySegment lpTotalNumberOfClusters) {
        var mh$ = GetDiskFreeSpaceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDiskFreeSpaceW", lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
            }
            return (int)mh$.invokeExact(lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDiskFreeSpaceExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            freeglut_h.C_INT,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER,
            freeglut_h.C_POINTER
        );

        public static final MemorySegment ADDR = freeglut_h.findOrThrow("GetDiskFreeSpaceExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
     * }
     */
    public static FunctionDescriptor GetDiskFreeSpaceExA$descriptor() {
        return GetDiskFreeSpaceExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
     * }
     */
    public static MethodHandle GetDiskFreeSpaceExA$handle() {
        return GetDiskFreeSpaceExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
     * }
     */
    public static MemorySegment GetDiskFreeSpaceExA$address() {
        return GetDiskFreeSpaceExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller, PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes)
     * }
     */
    public static int GetDiskFreeSpaceExA(MemorySegment lpDirectoryName, MemorySegment lpFreeBytesAvailableToCaller, MemorySegment lpTotalNumberOfBytes, MemorySegment lpTotalNumberOfFreeBytes) {
        var mh$ = GetDiskFreeSpaceExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDiskFreeSpaceExA", lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
            }
            return (int)mh$.invokeExact(lpDirectoryName, lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

