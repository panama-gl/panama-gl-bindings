// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagSCROLLBARINFO {
 *     DWORD cbSize;
 *     RECT rcScrollBar;
 *     int dxyLineButton;
 *     int xyThumbTop;
 *     int xyThumbBottom;
 *     int reserved;
 *     DWORD rgstate[6];
 * }
 * }
 */
public class tagSCROLLBARINFO {

    tagSCROLLBARINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("cbSize"),
        tagRECT.layout().withName("rcScrollBar"),
        freeglut_h.C_INT.withName("dxyLineButton"),
        freeglut_h.C_INT.withName("xyThumbTop"),
        freeglut_h.C_INT.withName("xyThumbBottom"),
        freeglut_h.C_INT.withName("reserved"),
        MemoryLayout.sequenceLayout(6, freeglut_h.C_LONG).withName("rgstate")
    ).withName("tagSCROLLBARINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout rcScrollBar$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcScrollBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcScrollBar
     * }
     */
    public static final GroupLayout rcScrollBar$layout() {
        return rcScrollBar$LAYOUT;
    }

    private static final long rcScrollBar$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcScrollBar
     * }
     */
    public static final long rcScrollBar$offset() {
        return rcScrollBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcScrollBar
     * }
     */
    public static MemorySegment rcScrollBar(MemorySegment struct) {
        return struct.asSlice(rcScrollBar$OFFSET, rcScrollBar$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcScrollBar
     * }
     */
    public static void rcScrollBar(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcScrollBar$OFFSET, rcScrollBar$LAYOUT.byteSize());
    }

    private static final OfInt dxyLineButton$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dxyLineButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int dxyLineButton
     * }
     */
    public static final OfInt dxyLineButton$layout() {
        return dxyLineButton$LAYOUT;
    }

    private static final long dxyLineButton$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int dxyLineButton
     * }
     */
    public static final long dxyLineButton$offset() {
        return dxyLineButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int dxyLineButton
     * }
     */
    public static int dxyLineButton(MemorySegment struct) {
        return struct.get(dxyLineButton$LAYOUT, dxyLineButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int dxyLineButton
     * }
     */
    public static void dxyLineButton(MemorySegment struct, int fieldValue) {
        struct.set(dxyLineButton$LAYOUT, dxyLineButton$OFFSET, fieldValue);
    }

    private static final OfInt xyThumbTop$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xyThumbTop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int xyThumbTop
     * }
     */
    public static final OfInt xyThumbTop$layout() {
        return xyThumbTop$LAYOUT;
    }

    private static final long xyThumbTop$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int xyThumbTop
     * }
     */
    public static final long xyThumbTop$offset() {
        return xyThumbTop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int xyThumbTop
     * }
     */
    public static int xyThumbTop(MemorySegment struct) {
        return struct.get(xyThumbTop$LAYOUT, xyThumbTop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int xyThumbTop
     * }
     */
    public static void xyThumbTop(MemorySegment struct, int fieldValue) {
        struct.set(xyThumbTop$LAYOUT, xyThumbTop$OFFSET, fieldValue);
    }

    private static final OfInt xyThumbBottom$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xyThumbBottom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int xyThumbBottom
     * }
     */
    public static final OfInt xyThumbBottom$layout() {
        return xyThumbBottom$LAYOUT;
    }

    private static final long xyThumbBottom$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int xyThumbBottom
     * }
     */
    public static final long xyThumbBottom$offset() {
        return xyThumbBottom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int xyThumbBottom
     * }
     */
    public static int xyThumbBottom(MemorySegment struct) {
        return struct.get(xyThumbBottom$LAYOUT, xyThumbBottom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int xyThumbBottom
     * }
     */
    public static void xyThumbBottom(MemorySegment struct, int fieldValue) {
        struct.set(xyThumbBottom$LAYOUT, xyThumbBottom$OFFSET, fieldValue);
    }

    private static final OfInt reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int reserved
     * }
     */
    public static final OfInt reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int reserved
     * }
     */
    public static int reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int reserved
     * }
     */
    public static void reserved(MemorySegment struct, int fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final SequenceLayout rgstate$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgstate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static final SequenceLayout rgstate$layout() {
        return rgstate$LAYOUT;
    }

    private static final long rgstate$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static final long rgstate$offset() {
        return rgstate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static MemorySegment rgstate(MemorySegment struct) {
        return struct.asSlice(rgstate$OFFSET, rgstate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static void rgstate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgstate$OFFSET, rgstate$LAYOUT.byteSize());
    }

    private static long[] rgstate$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static long[] rgstate$dimensions() {
        return rgstate$DIMS;
    }
    private static final VarHandle rgstate$ELEM_HANDLE = rgstate$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static int rgstate(MemorySegment struct, long index0) {
        return (int)rgstate$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD rgstate[6]
     * }
     */
    public static void rgstate(MemorySegment struct, long index0, int fieldValue) {
        rgstate$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

