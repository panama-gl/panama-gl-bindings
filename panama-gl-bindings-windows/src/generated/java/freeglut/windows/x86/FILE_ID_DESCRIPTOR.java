// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FILE_ID_DESCRIPTOR {
 *     DWORD dwSize;
 *     FILE_ID_TYPE Type;
 *     union {
 *         LARGE_INTEGER FileId;
 *         GUID ObjectId;
 *         FILE_ID_128 ExtendedFileId;
 *     };
 * }
 * }
 */
public class FILE_ID_DESCRIPTOR {

    FILE_ID_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("dwSize"),
        freeglut_h.C_INT.withName("Type"),
        MemoryLayout.unionLayout(
            _LARGE_INTEGER.layout().withName("FileId"),
            _GUID.layout().withName("ObjectId"),
            _FILE_ID_128.layout().withName("ExtendedFileId")
        ).withName("$anon$9139:5")
    ).withName("FILE_ID_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final OfInt dwSize$layout() {
        return dwSize$LAYOUT;
    }

    private static final long dwSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final long dwSize$offset() {
        return dwSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static int dwSize(MemorySegment struct) {
        return struct.get(dwSize$LAYOUT, dwSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static void dwSize(MemorySegment struct, int fieldValue) {
        struct.set(dwSize$LAYOUT, dwSize$OFFSET, fieldValue);
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILE_ID_TYPE Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILE_ID_TYPE Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILE_ID_TYPE Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILE_ID_TYPE Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final GroupLayout FileId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$9139:5"), groupElement("FileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static final GroupLayout FileId$layout() {
        return FileId$LAYOUT;
    }

    private static final long FileId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static final long FileId$offset() {
        return FileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static MemorySegment FileId(MemorySegment struct) {
        return struct.asSlice(FileId$OFFSET, FileId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static void FileId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FileId$OFFSET, FileId$LAYOUT.byteSize());
    }

    private static final GroupLayout ObjectId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$9139:5"), groupElement("ObjectId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID ObjectId
     * }
     */
    public static final GroupLayout ObjectId$layout() {
        return ObjectId$LAYOUT;
    }

    private static final long ObjectId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID ObjectId
     * }
     */
    public static final long ObjectId$offset() {
        return ObjectId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID ObjectId
     * }
     */
    public static MemorySegment ObjectId(MemorySegment struct) {
        return struct.asSlice(ObjectId$OFFSET, ObjectId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID ObjectId
     * }
     */
    public static void ObjectId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ObjectId$OFFSET, ObjectId$LAYOUT.byteSize());
    }

    private static final GroupLayout ExtendedFileId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$9139:5"), groupElement("ExtendedFileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILE_ID_128 ExtendedFileId
     * }
     */
    public static final GroupLayout ExtendedFileId$layout() {
        return ExtendedFileId$LAYOUT;
    }

    private static final long ExtendedFileId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILE_ID_128 ExtendedFileId
     * }
     */
    public static final long ExtendedFileId$offset() {
        return ExtendedFileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILE_ID_128 ExtendedFileId
     * }
     */
    public static MemorySegment ExtendedFileId(MemorySegment struct) {
        return struct.asSlice(ExtendedFileId$OFFSET, ExtendedFileId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILE_ID_128 ExtendedFileId
     * }
     */
    public static void ExtendedFileId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ExtendedFileId$OFFSET, ExtendedFileId$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

