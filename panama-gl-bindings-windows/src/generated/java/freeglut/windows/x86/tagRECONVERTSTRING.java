// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagRECONVERTSTRING {
 *     DWORD dwSize;
 *     DWORD dwVersion;
 *     DWORD dwStrLen;
 *     DWORD dwStrOffset;
 *     DWORD dwCompStrLen;
 *     DWORD dwCompStrOffset;
 *     DWORD dwTargetStrLen;
 *     DWORD dwTargetStrOffset;
 * }
 * }
 */
public class tagRECONVERTSTRING {

    tagRECONVERTSTRING() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        freeglut_h.C_LONG.withName("dwSize"),
        freeglut_h.C_LONG.withName("dwVersion"),
        freeglut_h.C_LONG.withName("dwStrLen"),
        freeglut_h.C_LONG.withName("dwStrOffset"),
        freeglut_h.C_LONG.withName("dwCompStrLen"),
        freeglut_h.C_LONG.withName("dwCompStrOffset"),
        freeglut_h.C_LONG.withName("dwTargetStrLen"),
        freeglut_h.C_LONG.withName("dwTargetStrOffset")
    ).withName("tagRECONVERTSTRING");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final OfInt dwSize$layout() {
        return dwSize$LAYOUT;
    }

    private static final long dwSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static final long dwSize$offset() {
        return dwSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static int dwSize(MemorySegment struct) {
        return struct.get(dwSize$LAYOUT, dwSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSize
     * }
     */
    public static void dwSize(MemorySegment struct, int fieldValue) {
        struct.set(dwSize$LAYOUT, dwSize$OFFSET, fieldValue);
    }

    private static final OfInt dwVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final OfInt dwVersion$layout() {
        return dwVersion$LAYOUT;
    }

    private static final long dwVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final long dwVersion$offset() {
        return dwVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static int dwVersion(MemorySegment struct) {
        return struct.get(dwVersion$LAYOUT, dwVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static void dwVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwVersion$LAYOUT, dwVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwStrLen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStrLen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStrLen
     * }
     */
    public static final OfInt dwStrLen$layout() {
        return dwStrLen$LAYOUT;
    }

    private static final long dwStrLen$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStrLen
     * }
     */
    public static final long dwStrLen$offset() {
        return dwStrLen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStrLen
     * }
     */
    public static int dwStrLen(MemorySegment struct) {
        return struct.get(dwStrLen$LAYOUT, dwStrLen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStrLen
     * }
     */
    public static void dwStrLen(MemorySegment struct, int fieldValue) {
        struct.set(dwStrLen$LAYOUT, dwStrLen$OFFSET, fieldValue);
    }

    private static final OfInt dwStrOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwStrOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwStrOffset
     * }
     */
    public static final OfInt dwStrOffset$layout() {
        return dwStrOffset$LAYOUT;
    }

    private static final long dwStrOffset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwStrOffset
     * }
     */
    public static final long dwStrOffset$offset() {
        return dwStrOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwStrOffset
     * }
     */
    public static int dwStrOffset(MemorySegment struct) {
        return struct.get(dwStrOffset$LAYOUT, dwStrOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwStrOffset
     * }
     */
    public static void dwStrOffset(MemorySegment struct, int fieldValue) {
        struct.set(dwStrOffset$LAYOUT, dwStrOffset$OFFSET, fieldValue);
    }

    private static final OfInt dwCompStrLen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCompStrLen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCompStrLen
     * }
     */
    public static final OfInt dwCompStrLen$layout() {
        return dwCompStrLen$LAYOUT;
    }

    private static final long dwCompStrLen$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCompStrLen
     * }
     */
    public static final long dwCompStrLen$offset() {
        return dwCompStrLen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCompStrLen
     * }
     */
    public static int dwCompStrLen(MemorySegment struct) {
        return struct.get(dwCompStrLen$LAYOUT, dwCompStrLen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCompStrLen
     * }
     */
    public static void dwCompStrLen(MemorySegment struct, int fieldValue) {
        struct.set(dwCompStrLen$LAYOUT, dwCompStrLen$OFFSET, fieldValue);
    }

    private static final OfInt dwCompStrOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCompStrOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCompStrOffset
     * }
     */
    public static final OfInt dwCompStrOffset$layout() {
        return dwCompStrOffset$LAYOUT;
    }

    private static final long dwCompStrOffset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCompStrOffset
     * }
     */
    public static final long dwCompStrOffset$offset() {
        return dwCompStrOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCompStrOffset
     * }
     */
    public static int dwCompStrOffset(MemorySegment struct) {
        return struct.get(dwCompStrOffset$LAYOUT, dwCompStrOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCompStrOffset
     * }
     */
    public static void dwCompStrOffset(MemorySegment struct, int fieldValue) {
        struct.set(dwCompStrOffset$LAYOUT, dwCompStrOffset$OFFSET, fieldValue);
    }

    private static final OfInt dwTargetStrLen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwTargetStrLen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrLen
     * }
     */
    public static final OfInt dwTargetStrLen$layout() {
        return dwTargetStrLen$LAYOUT;
    }

    private static final long dwTargetStrLen$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrLen
     * }
     */
    public static final long dwTargetStrLen$offset() {
        return dwTargetStrLen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrLen
     * }
     */
    public static int dwTargetStrLen(MemorySegment struct) {
        return struct.get(dwTargetStrLen$LAYOUT, dwTargetStrLen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrLen
     * }
     */
    public static void dwTargetStrLen(MemorySegment struct, int fieldValue) {
        struct.set(dwTargetStrLen$LAYOUT, dwTargetStrLen$OFFSET, fieldValue);
    }

    private static final OfInt dwTargetStrOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwTargetStrOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrOffset
     * }
     */
    public static final OfInt dwTargetStrOffset$layout() {
        return dwTargetStrOffset$LAYOUT;
    }

    private static final long dwTargetStrOffset$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrOffset
     * }
     */
    public static final long dwTargetStrOffset$offset() {
        return dwTargetStrOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrOffset
     * }
     */
    public static int dwTargetStrOffset(MemorySegment struct) {
        return struct.get(dwTargetStrOffset$LAYOUT, dwTargetStrOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwTargetStrOffset
     * }
     */
    public static void dwTargetStrOffset(MemorySegment struct, int fieldValue) {
        struct.set(dwTargetStrOffset$LAYOUT, dwTargetStrOffset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

