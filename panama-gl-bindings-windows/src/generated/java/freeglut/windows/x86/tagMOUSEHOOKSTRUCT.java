// Generated by jextract

package freeglut.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagMOUSEHOOKSTRUCT {
 *     POINT pt;
 *     HWND hwnd;
 *     UINT wHitTestCode;
 *     ULONG_PTR dwExtraInfo;
 * }
 * }
 */
public class tagMOUSEHOOKSTRUCT {

    tagMOUSEHOOKSTRUCT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        tagPOINT.layout().withName("pt"),
        freeglut_h.C_POINTER.withName("hwnd"),
        freeglut_h.C_INT.withName("wHitTestCode"),
        MemoryLayout.paddingLayout(4),
        freeglut_h.C_LONG_LONG.withName("dwExtraInfo")
    ).withName("tagMOUSEHOOKSTRUCT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout pt$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * POINT pt
     * }
     */
    public static final GroupLayout pt$layout() {
        return pt$LAYOUT;
    }

    private static final long pt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * POINT pt
     * }
     */
    public static final long pt$offset() {
        return pt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * POINT pt
     * }
     */
    public static MemorySegment pt(MemorySegment struct) {
        return struct.asSlice(pt$OFFSET, pt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * POINT pt
     * }
     */
    public static void pt(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pt$OFFSET, pt$LAYOUT.byteSize());
    }

    private static final AddressLayout hwnd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwnd
     * }
     */
    public static final AddressLayout hwnd$layout() {
        return hwnd$LAYOUT;
    }

    private static final long hwnd$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwnd
     * }
     */
    public static final long hwnd$offset() {
        return hwnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwnd
     * }
     */
    public static MemorySegment hwnd(MemorySegment struct) {
        return struct.get(hwnd$LAYOUT, hwnd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwnd
     * }
     */
    public static void hwnd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwnd$LAYOUT, hwnd$OFFSET, fieldValue);
    }

    private static final OfInt wHitTestCode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wHitTestCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT wHitTestCode
     * }
     */
    public static final OfInt wHitTestCode$layout() {
        return wHitTestCode$LAYOUT;
    }

    private static final long wHitTestCode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT wHitTestCode
     * }
     */
    public static final long wHitTestCode$offset() {
        return wHitTestCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT wHitTestCode
     * }
     */
    public static int wHitTestCode(MemorySegment struct) {
        return struct.get(wHitTestCode$LAYOUT, wHitTestCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT wHitTestCode
     * }
     */
    public static void wHitTestCode(MemorySegment struct, int fieldValue) {
        struct.set(wHitTestCode$LAYOUT, wHitTestCode$OFFSET, fieldValue);
    }

    private static final OfLong dwExtraInfo$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dwExtraInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR dwExtraInfo
     * }
     */
    public static final OfLong dwExtraInfo$layout() {
        return dwExtraInfo$LAYOUT;
    }

    private static final long dwExtraInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR dwExtraInfo
     * }
     */
    public static final long dwExtraInfo$offset() {
        return dwExtraInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR dwExtraInfo
     * }
     */
    public static long dwExtraInfo(MemorySegment struct) {
        return struct.get(dwExtraInfo$LAYOUT, dwExtraInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR dwExtraInfo
     * }
     */
    public static void dwExtraInfo(MemorySegment struct, long fieldValue) {
        struct.set(dwExtraInfo$LAYOUT, dwExtraInfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

