// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagOFN_NT4W {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("lStructSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("hInstance"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFilter"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrCustomFilter"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxCustFilter"),
        Constants$root.C_LONG$LAYOUT.withName("nFilterIndex"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFile"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxFile"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrFileTitle"),
        Constants$root.C_LONG$LAYOUT.withName("nMaxFileTitle"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrInitialDir"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrTitle"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_SHORT$LAYOUT.withName("nFileOffset"),
        Constants$root.C_SHORT$LAYOUT.withName("nFileExtension"),
        Constants$root.C_POINTER$LAYOUT.withName("lpstrDefExt"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("lpfnHook"),
        Constants$root.C_POINTER$LAYOUT.withName("lpTemplateName")
    ).withName("tagOFN_NT4W");
    public static MemoryLayout $LAYOUT() {
        return tagOFN_NT4W.$struct$LAYOUT;
    }
    static final VarHandle lStructSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lStructSize"));
    public static VarHandle lStructSize$VH() {
        return tagOFN_NT4W.lStructSize$VH;
    }
    public static int lStructSize$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.lStructSize$VH.get(seg);
    }
    public static void lStructSize$set( MemorySegment seg, int x) {
        tagOFN_NT4W.lStructSize$VH.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.lStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.lStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndOwner"));
    public static VarHandle hwndOwner$VH() {
        return tagOFN_NT4W.hwndOwner$VH;
    }
    public static MemoryAddress hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.hwndOwner$VH.get(seg);
    }
    public static void hwndOwner$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.hwndOwner$VH.set(seg, x);
    }
    public static MemoryAddress hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.hwndOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.hwndOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hInstance"));
    public static VarHandle hInstance$VH() {
        return tagOFN_NT4W.hInstance$VH;
    }
    public static MemoryAddress hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.hInstance$VH.get(seg);
    }
    public static void hInstance$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.hInstance$VH.set(seg, x);
    }
    public static MemoryAddress hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.hInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.hInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFilter"));
    public static VarHandle lpstrFilter$VH() {
        return tagOFN_NT4W.lpstrFilter$VH;
    }
    public static MemoryAddress lpstrFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFilter$VH.get(seg);
    }
    public static void lpstrFilter$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrFilter$VH.set(seg, x);
    }
    public static MemoryAddress lpstrFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFilter$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrCustomFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrCustomFilter"));
    public static VarHandle lpstrCustomFilter$VH() {
        return tagOFN_NT4W.lpstrCustomFilter$VH;
    }
    public static MemoryAddress lpstrCustomFilter$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrCustomFilter$VH.get(seg);
    }
    public static void lpstrCustomFilter$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrCustomFilter$VH.set(seg, x);
    }
    public static MemoryAddress lpstrCustomFilter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrCustomFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrCustomFilter$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrCustomFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxCustFilter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxCustFilter"));
    public static VarHandle nMaxCustFilter$VH() {
        return tagOFN_NT4W.nMaxCustFilter$VH;
    }
    public static int nMaxCustFilter$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.nMaxCustFilter$VH.get(seg);
    }
    public static void nMaxCustFilter$set( MemorySegment seg, int x) {
        tagOFN_NT4W.nMaxCustFilter$VH.set(seg, x);
    }
    public static int nMaxCustFilter$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.nMaxCustFilter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxCustFilter$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.nMaxCustFilter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFilterIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFilterIndex"));
    public static VarHandle nFilterIndex$VH() {
        return tagOFN_NT4W.nFilterIndex$VH;
    }
    public static int nFilterIndex$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.nFilterIndex$VH.get(seg);
    }
    public static void nFilterIndex$set( MemorySegment seg, int x) {
        tagOFN_NT4W.nFilterIndex$VH.set(seg, x);
    }
    public static int nFilterIndex$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.nFilterIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFilterIndex$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.nFilterIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFile"));
    public static VarHandle lpstrFile$VH() {
        return tagOFN_NT4W.lpstrFile$VH;
    }
    public static MemoryAddress lpstrFile$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFile$VH.get(seg);
    }
    public static void lpstrFile$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrFile$VH.set(seg, x);
    }
    public static MemoryAddress lpstrFile$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFile$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxFile"));
    public static VarHandle nMaxFile$VH() {
        return tagOFN_NT4W.nMaxFile$VH;
    }
    public static int nMaxFile$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.nMaxFile$VH.get(seg);
    }
    public static void nMaxFile$set( MemorySegment seg, int x) {
        tagOFN_NT4W.nMaxFile$VH.set(seg, x);
    }
    public static int nMaxFile$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.nMaxFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFile$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.nMaxFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrFileTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrFileTitle"));
    public static VarHandle lpstrFileTitle$VH() {
        return tagOFN_NT4W.lpstrFileTitle$VH;
    }
    public static MemoryAddress lpstrFileTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFileTitle$VH.get(seg);
    }
    public static void lpstrFileTitle$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrFileTitle$VH.set(seg, x);
    }
    public static MemoryAddress lpstrFileTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrFileTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrFileTitle$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrFileTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxFileTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxFileTitle"));
    public static VarHandle nMaxFileTitle$VH() {
        return tagOFN_NT4W.nMaxFileTitle$VH;
    }
    public static int nMaxFileTitle$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.nMaxFileTitle$VH.get(seg);
    }
    public static void nMaxFileTitle$set( MemorySegment seg, int x) {
        tagOFN_NT4W.nMaxFileTitle$VH.set(seg, x);
    }
    public static int nMaxFileTitle$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.nMaxFileTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxFileTitle$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.nMaxFileTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrInitialDir$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrInitialDir"));
    public static VarHandle lpstrInitialDir$VH() {
        return tagOFN_NT4W.lpstrInitialDir$VH;
    }
    public static MemoryAddress lpstrInitialDir$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrInitialDir$VH.get(seg);
    }
    public static void lpstrInitialDir$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrInitialDir$VH.set(seg, x);
    }
    public static MemoryAddress lpstrInitialDir$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrInitialDir$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrInitialDir$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrInitialDir$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrTitle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrTitle"));
    public static VarHandle lpstrTitle$VH() {
        return tagOFN_NT4W.lpstrTitle$VH;
    }
    public static MemoryAddress lpstrTitle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrTitle$VH.get(seg);
    }
    public static void lpstrTitle$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrTitle$VH.set(seg, x);
    }
    public static MemoryAddress lpstrTitle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrTitle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrTitle$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrTitle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagOFN_NT4W.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)tagOFN_NT4W.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        tagOFN_NT4W.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)tagOFN_NT4W.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        tagOFN_NT4W.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFileOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFileOffset"));
    public static VarHandle nFileOffset$VH() {
        return tagOFN_NT4W.nFileOffset$VH;
    }
    public static short nFileOffset$get(MemorySegment seg) {
        return (short)tagOFN_NT4W.nFileOffset$VH.get(seg);
    }
    public static void nFileOffset$set( MemorySegment seg, short x) {
        tagOFN_NT4W.nFileOffset$VH.set(seg, x);
    }
    public static short nFileOffset$get(MemorySegment seg, long index) {
        return (short)tagOFN_NT4W.nFileOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileOffset$set(MemorySegment seg, long index, short x) {
        tagOFN_NT4W.nFileOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFileExtension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFileExtension"));
    public static VarHandle nFileExtension$VH() {
        return tagOFN_NT4W.nFileExtension$VH;
    }
    public static short nFileExtension$get(MemorySegment seg) {
        return (short)tagOFN_NT4W.nFileExtension$VH.get(seg);
    }
    public static void nFileExtension$set( MemorySegment seg, short x) {
        tagOFN_NT4W.nFileExtension$VH.set(seg, x);
    }
    public static short nFileExtension$get(MemorySegment seg, long index) {
        return (short)tagOFN_NT4W.nFileExtension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFileExtension$set(MemorySegment seg, long index, short x) {
        tagOFN_NT4W.nFileExtension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpstrDefExt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpstrDefExt"));
    public static VarHandle lpstrDefExt$VH() {
        return tagOFN_NT4W.lpstrDefExt$VH;
    }
    public static MemoryAddress lpstrDefExt$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrDefExt$VH.get(seg);
    }
    public static void lpstrDefExt$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpstrDefExt$VH.set(seg, x);
    }
    public static MemoryAddress lpstrDefExt$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpstrDefExt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpstrDefExt$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpstrDefExt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lCustData"));
    public static VarHandle lCustData$VH() {
        return tagOFN_NT4W.lCustData$VH;
    }
    public static long lCustData$get(MemorySegment seg) {
        return (long)tagOFN_NT4W.lCustData$VH.get(seg);
    }
    public static void lCustData$set( MemorySegment seg, long x) {
        tagOFN_NT4W.lCustData$VH.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)tagOFN_NT4W.lCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        tagOFN_NT4W.lCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpfnHook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfnHook"));
    public static VarHandle lpfnHook$VH() {
        return tagOFN_NT4W.lpfnHook$VH;
    }
    public static MemoryAddress lpfnHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpfnHook$VH.get(seg);
    }
    public static void lpfnHook$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpfnHook$VH.set(seg, x);
    }
    public static MemoryAddress lpfnHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpfnHook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnHook$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpfnHook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPOFNHOOKPROC lpfnHook (MemorySegment segment, MemorySession session) {
        return LPOFNHOOKPROC.ofAddress(lpfnHook$get(segment), session);
    }
    static final VarHandle lpTemplateName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpTemplateName"));
    public static VarHandle lpTemplateName$VH() {
        return tagOFN_NT4W.lpTemplateName$VH;
    }
    public static MemoryAddress lpTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpTemplateName$VH.get(seg);
    }
    public static void lpTemplateName$set( MemorySegment seg, MemoryAddress x) {
        tagOFN_NT4W.lpTemplateName$VH.set(seg, x);
    }
    public static MemoryAddress lpTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagOFN_NT4W.lpTemplateName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpTemplateName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagOFN_NT4W.lpTemplateName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


