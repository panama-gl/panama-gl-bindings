// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagServerInformation {
 *     DWORD dwServerPid;
 *     DWORD dwServerTid;
 *     UINT64 ui64ServerAddress;
 * }
 * }
 */
public class tagServerInformation {

    tagServerInformation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwServerPid"),
        wgl_h.C_LONG.withName("dwServerTid"),
        wgl_h.C_LONG_LONG.withName("ui64ServerAddress")
    ).withName("tagServerInformation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwServerPid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwServerPid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwServerPid
     * }
     */
    public static final OfInt dwServerPid$layout() {
        return dwServerPid$LAYOUT;
    }

    private static final long dwServerPid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwServerPid
     * }
     */
    public static final long dwServerPid$offset() {
        return dwServerPid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwServerPid
     * }
     */
    public static int dwServerPid(MemorySegment struct) {
        return struct.get(dwServerPid$LAYOUT, dwServerPid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwServerPid
     * }
     */
    public static void dwServerPid(MemorySegment struct, int fieldValue) {
        struct.set(dwServerPid$LAYOUT, dwServerPid$OFFSET, fieldValue);
    }

    private static final OfInt dwServerTid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwServerTid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwServerTid
     * }
     */
    public static final OfInt dwServerTid$layout() {
        return dwServerTid$LAYOUT;
    }

    private static final long dwServerTid$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwServerTid
     * }
     */
    public static final long dwServerTid$offset() {
        return dwServerTid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwServerTid
     * }
     */
    public static int dwServerTid(MemorySegment struct) {
        return struct.get(dwServerTid$LAYOUT, dwServerTid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwServerTid
     * }
     */
    public static void dwServerTid(MemorySegment struct, int fieldValue) {
        struct.set(dwServerTid$LAYOUT, dwServerTid$OFFSET, fieldValue);
    }

    private static final OfLong ui64ServerAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ui64ServerAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT64 ui64ServerAddress
     * }
     */
    public static final OfLong ui64ServerAddress$layout() {
        return ui64ServerAddress$LAYOUT;
    }

    private static final long ui64ServerAddress$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT64 ui64ServerAddress
     * }
     */
    public static final long ui64ServerAddress$offset() {
        return ui64ServerAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT64 ui64ServerAddress
     * }
     */
    public static long ui64ServerAddress(MemorySegment struct) {
        return struct.get(ui64ServerAddress$LAYOUT, ui64ServerAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT64 ui64ServerAddress
     * }
     */
    public static void ui64ServerAddress(MemorySegment struct, long fieldValue) {
        struct.set(ui64ServerAddress$LAYOUT, ui64ServerAddress$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

