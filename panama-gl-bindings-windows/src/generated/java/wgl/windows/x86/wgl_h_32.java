// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class wgl_h_32 extends wgl_h_33 {

    wgl_h_32() {
        // Should not be called directly
    }
    private static final int NCBSEND = (int)20L;
    /**
     * {@snippet lang=c :
     * #define NCBSEND 20
     * }
     */
    public static int NCBSEND() {
        return NCBSEND;
    }
    private static final int NCBRECV = (int)21L;
    /**
     * {@snippet lang=c :
     * #define NCBRECV 21
     * }
     */
    public static int NCBRECV() {
        return NCBRECV;
    }
    private static final int NCBRECVANY = (int)22L;
    /**
     * {@snippet lang=c :
     * #define NCBRECVANY 22
     * }
     */
    public static int NCBRECVANY() {
        return NCBRECVANY;
    }
    private static final int NCBCHAINSEND = (int)23L;
    /**
     * {@snippet lang=c :
     * #define NCBCHAINSEND 23
     * }
     */
    public static int NCBCHAINSEND() {
        return NCBCHAINSEND;
    }
    private static final int NCBDGSEND = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NCBDGSEND 32
     * }
     */
    public static int NCBDGSEND() {
        return NCBDGSEND;
    }
    private static final int NCBDGRECV = (int)33L;
    /**
     * {@snippet lang=c :
     * #define NCBDGRECV 33
     * }
     */
    public static int NCBDGRECV() {
        return NCBDGRECV;
    }
    private static final int NCBDGSENDBC = (int)34L;
    /**
     * {@snippet lang=c :
     * #define NCBDGSENDBC 34
     * }
     */
    public static int NCBDGSENDBC() {
        return NCBDGSENDBC;
    }
    private static final int NCBDGRECVBC = (int)35L;
    /**
     * {@snippet lang=c :
     * #define NCBDGRECVBC 35
     * }
     */
    public static int NCBDGRECVBC() {
        return NCBDGRECVBC;
    }
    private static final int NCBADDNAME = (int)48L;
    /**
     * {@snippet lang=c :
     * #define NCBADDNAME 48
     * }
     */
    public static int NCBADDNAME() {
        return NCBADDNAME;
    }
    private static final int NCBDELNAME = (int)49L;
    /**
     * {@snippet lang=c :
     * #define NCBDELNAME 49
     * }
     */
    public static int NCBDELNAME() {
        return NCBDELNAME;
    }
    private static final int NCBRESET = (int)50L;
    /**
     * {@snippet lang=c :
     * #define NCBRESET 50
     * }
     */
    public static int NCBRESET() {
        return NCBRESET;
    }
    private static final int NCBASTAT = (int)51L;
    /**
     * {@snippet lang=c :
     * #define NCBASTAT 51
     * }
     */
    public static int NCBASTAT() {
        return NCBASTAT;
    }
    private static final int NCBSSTAT = (int)52L;
    /**
     * {@snippet lang=c :
     * #define NCBSSTAT 52
     * }
     */
    public static int NCBSSTAT() {
        return NCBSSTAT;
    }
    private static final int NCBCANCEL = (int)53L;
    /**
     * {@snippet lang=c :
     * #define NCBCANCEL 53
     * }
     */
    public static int NCBCANCEL() {
        return NCBCANCEL;
    }
    private static final int NCBADDGRNAME = (int)54L;
    /**
     * {@snippet lang=c :
     * #define NCBADDGRNAME 54
     * }
     */
    public static int NCBADDGRNAME() {
        return NCBADDGRNAME;
    }
    private static final int NCBENUM = (int)55L;
    /**
     * {@snippet lang=c :
     * #define NCBENUM 55
     * }
     */
    public static int NCBENUM() {
        return NCBENUM;
    }
    private static final int NCBUNLINK = (int)112L;
    /**
     * {@snippet lang=c :
     * #define NCBUNLINK 112
     * }
     */
    public static int NCBUNLINK() {
        return NCBUNLINK;
    }
    private static final int NCBSENDNA = (int)113L;
    /**
     * {@snippet lang=c :
     * #define NCBSENDNA 113
     * }
     */
    public static int NCBSENDNA() {
        return NCBSENDNA;
    }
    private static final int NCBCHAINSENDNA = (int)114L;
    /**
     * {@snippet lang=c :
     * #define NCBCHAINSENDNA 114
     * }
     */
    public static int NCBCHAINSENDNA() {
        return NCBCHAINSENDNA;
    }
    private static final int NCBLANSTALERT = (int)115L;
    /**
     * {@snippet lang=c :
     * #define NCBLANSTALERT 115
     * }
     */
    public static int NCBLANSTALERT() {
        return NCBLANSTALERT;
    }
    private static final int NCBACTION = (int)119L;
    /**
     * {@snippet lang=c :
     * #define NCBACTION 119
     * }
     */
    public static int NCBACTION() {
        return NCBACTION;
    }
    private static final int NCBFINDNAME = (int)120L;
    /**
     * {@snippet lang=c :
     * #define NCBFINDNAME 120
     * }
     */
    public static int NCBFINDNAME() {
        return NCBFINDNAME;
    }
    private static final int NCBTRACE = (int)121L;
    /**
     * {@snippet lang=c :
     * #define NCBTRACE 121
     * }
     */
    public static int NCBTRACE() {
        return NCBTRACE;
    }
    private static final int ASYNCH = (int)128L;
    /**
     * {@snippet lang=c :
     * #define ASYNCH 128
     * }
     */
    public static int ASYNCH() {
        return ASYNCH;
    }
    private static final int NRC_GOODRET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NRC_GOODRET 0
     * }
     */
    public static int NRC_GOODRET() {
        return NRC_GOODRET;
    }
    private static final int NRC_BUFLEN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NRC_BUFLEN 1
     * }
     */
    public static int NRC_BUFLEN() {
        return NRC_BUFLEN;
    }
    private static final int NRC_ILLCMD = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NRC_ILLCMD 3
     * }
     */
    public static int NRC_ILLCMD() {
        return NRC_ILLCMD;
    }
    private static final int NRC_CMDTMO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define NRC_CMDTMO 5
     * }
     */
    public static int NRC_CMDTMO() {
        return NRC_CMDTMO;
    }
    private static final int NRC_INCOMP = (int)6L;
    /**
     * {@snippet lang=c :
     * #define NRC_INCOMP 6
     * }
     */
    public static int NRC_INCOMP() {
        return NRC_INCOMP;
    }
    private static final int NRC_BADDR = (int)7L;
    /**
     * {@snippet lang=c :
     * #define NRC_BADDR 7
     * }
     */
    public static int NRC_BADDR() {
        return NRC_BADDR;
    }
    private static final int NRC_SNUMOUT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NRC_SNUMOUT 8
     * }
     */
    public static int NRC_SNUMOUT() {
        return NRC_SNUMOUT;
    }
    private static final int NRC_NORES = (int)9L;
    /**
     * {@snippet lang=c :
     * #define NRC_NORES 9
     * }
     */
    public static int NRC_NORES() {
        return NRC_NORES;
    }
    private static final int NRC_SCLOSED = (int)10L;
    /**
     * {@snippet lang=c :
     * #define NRC_SCLOSED 10
     * }
     */
    public static int NRC_SCLOSED() {
        return NRC_SCLOSED;
    }
    private static final int NRC_CMDCAN = (int)11L;
    /**
     * {@snippet lang=c :
     * #define NRC_CMDCAN 11
     * }
     */
    public static int NRC_CMDCAN() {
        return NRC_CMDCAN;
    }
    private static final int NRC_DUPNAME = (int)13L;
    /**
     * {@snippet lang=c :
     * #define NRC_DUPNAME 13
     * }
     */
    public static int NRC_DUPNAME() {
        return NRC_DUPNAME;
    }
    private static final int NRC_NAMTFUL = (int)14L;
    /**
     * {@snippet lang=c :
     * #define NRC_NAMTFUL 14
     * }
     */
    public static int NRC_NAMTFUL() {
        return NRC_NAMTFUL;
    }
    private static final int NRC_ACTSES = (int)15L;
    /**
     * {@snippet lang=c :
     * #define NRC_ACTSES 15
     * }
     */
    public static int NRC_ACTSES() {
        return NRC_ACTSES;
    }
    private static final int NRC_LOCTFUL = (int)17L;
    /**
     * {@snippet lang=c :
     * #define NRC_LOCTFUL 17
     * }
     */
    public static int NRC_LOCTFUL() {
        return NRC_LOCTFUL;
    }
    private static final int NRC_REMTFUL = (int)18L;
    /**
     * {@snippet lang=c :
     * #define NRC_REMTFUL 18
     * }
     */
    public static int NRC_REMTFUL() {
        return NRC_REMTFUL;
    }
    private static final int NRC_ILLNN = (int)19L;
    /**
     * {@snippet lang=c :
     * #define NRC_ILLNN 19
     * }
     */
    public static int NRC_ILLNN() {
        return NRC_ILLNN;
    }
    private static final int NRC_NOCALL = (int)20L;
    /**
     * {@snippet lang=c :
     * #define NRC_NOCALL 20
     * }
     */
    public static int NRC_NOCALL() {
        return NRC_NOCALL;
    }
    private static final int NRC_NOWILD = (int)21L;
    /**
     * {@snippet lang=c :
     * #define NRC_NOWILD 21
     * }
     */
    public static int NRC_NOWILD() {
        return NRC_NOWILD;
    }
    private static final int NRC_INUSE = (int)22L;
    /**
     * {@snippet lang=c :
     * #define NRC_INUSE 22
     * }
     */
    public static int NRC_INUSE() {
        return NRC_INUSE;
    }
    private static final int NRC_NAMERR = (int)23L;
    /**
     * {@snippet lang=c :
     * #define NRC_NAMERR 23
     * }
     */
    public static int NRC_NAMERR() {
        return NRC_NAMERR;
    }
    private static final int NRC_SABORT = (int)24L;
    /**
     * {@snippet lang=c :
     * #define NRC_SABORT 24
     * }
     */
    public static int NRC_SABORT() {
        return NRC_SABORT;
    }
    private static final int NRC_NAMCONF = (int)25L;
    /**
     * {@snippet lang=c :
     * #define NRC_NAMCONF 25
     * }
     */
    public static int NRC_NAMCONF() {
        return NRC_NAMCONF;
    }
    private static final int NRC_IFBUSY = (int)33L;
    /**
     * {@snippet lang=c :
     * #define NRC_IFBUSY 33
     * }
     */
    public static int NRC_IFBUSY() {
        return NRC_IFBUSY;
    }
    private static final int NRC_TOOMANY = (int)34L;
    /**
     * {@snippet lang=c :
     * #define NRC_TOOMANY 34
     * }
     */
    public static int NRC_TOOMANY() {
        return NRC_TOOMANY;
    }
    private static final int NRC_BRIDGE = (int)35L;
    /**
     * {@snippet lang=c :
     * #define NRC_BRIDGE 35
     * }
     */
    public static int NRC_BRIDGE() {
        return NRC_BRIDGE;
    }
    private static final int NRC_CANOCCR = (int)36L;
    /**
     * {@snippet lang=c :
     * #define NRC_CANOCCR 36
     * }
     */
    public static int NRC_CANOCCR() {
        return NRC_CANOCCR;
    }
    private static final int NRC_CANCEL = (int)38L;
    /**
     * {@snippet lang=c :
     * #define NRC_CANCEL 38
     * }
     */
    public static int NRC_CANCEL() {
        return NRC_CANCEL;
    }
    private static final int NRC_DUPENV = (int)48L;
    /**
     * {@snippet lang=c :
     * #define NRC_DUPENV 48
     * }
     */
    public static int NRC_DUPENV() {
        return NRC_DUPENV;
    }
    private static final int NRC_ENVNOTDEF = (int)52L;
    /**
     * {@snippet lang=c :
     * #define NRC_ENVNOTDEF 52
     * }
     */
    public static int NRC_ENVNOTDEF() {
        return NRC_ENVNOTDEF;
    }
    private static final int NRC_OSRESNOTAV = (int)53L;
    /**
     * {@snippet lang=c :
     * #define NRC_OSRESNOTAV 53
     * }
     */
    public static int NRC_OSRESNOTAV() {
        return NRC_OSRESNOTAV;
    }
    private static final int NRC_MAXAPPS = (int)54L;
    /**
     * {@snippet lang=c :
     * #define NRC_MAXAPPS 54
     * }
     */
    public static int NRC_MAXAPPS() {
        return NRC_MAXAPPS;
    }
    private static final int NRC_NOSAPS = (int)55L;
    /**
     * {@snippet lang=c :
     * #define NRC_NOSAPS 55
     * }
     */
    public static int NRC_NOSAPS() {
        return NRC_NOSAPS;
    }
    private static final int NRC_NORESOURCES = (int)56L;
    /**
     * {@snippet lang=c :
     * #define NRC_NORESOURCES 56
     * }
     */
    public static int NRC_NORESOURCES() {
        return NRC_NORESOURCES;
    }
    private static final int NRC_INVADDRESS = (int)57L;
    /**
     * {@snippet lang=c :
     * #define NRC_INVADDRESS 57
     * }
     */
    public static int NRC_INVADDRESS() {
        return NRC_INVADDRESS;
    }
    private static final int NRC_INVDDID = (int)59L;
    /**
     * {@snippet lang=c :
     * #define NRC_INVDDID 59
     * }
     */
    public static int NRC_INVDDID() {
        return NRC_INVDDID;
    }
    private static final int NRC_LOCKFAIL = (int)60L;
    /**
     * {@snippet lang=c :
     * #define NRC_LOCKFAIL 60
     * }
     */
    public static int NRC_LOCKFAIL() {
        return NRC_LOCKFAIL;
    }
    private static final int NRC_OPENERR = (int)63L;
    /**
     * {@snippet lang=c :
     * #define NRC_OPENERR 63
     * }
     */
    public static int NRC_OPENERR() {
        return NRC_OPENERR;
    }
    private static final int NRC_SYSTEM = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NRC_SYSTEM 64
     * }
     */
    public static int NRC_SYSTEM() {
        return NRC_SYSTEM;
    }
    private static final int NRC_PENDING = (int)255L;
    /**
     * {@snippet lang=c :
     * #define NRC_PENDING 255
     * }
     */
    public static int NRC_PENDING() {
        return NRC_PENDING;
    }
    private static final int RPC_C_BINDING_INFINITE_TIMEOUT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_BINDING_INFINITE_TIMEOUT 10
     * }
     */
    public static int RPC_C_BINDING_INFINITE_TIMEOUT() {
        return RPC_C_BINDING_INFINITE_TIMEOUT;
    }
    private static final int RPC_C_BINDING_MIN_TIMEOUT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_BINDING_MIN_TIMEOUT 0
     * }
     */
    public static int RPC_C_BINDING_MIN_TIMEOUT() {
        return RPC_C_BINDING_MIN_TIMEOUT;
    }
    private static final int RPC_C_BINDING_DEFAULT_TIMEOUT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_BINDING_DEFAULT_TIMEOUT 5
     * }
     */
    public static int RPC_C_BINDING_DEFAULT_TIMEOUT() {
        return RPC_C_BINDING_DEFAULT_TIMEOUT;
    }
    private static final int RPC_C_BINDING_MAX_TIMEOUT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_BINDING_MAX_TIMEOUT 9
     * }
     */
    public static int RPC_C_BINDING_MAX_TIMEOUT() {
        return RPC_C_BINDING_MAX_TIMEOUT;
    }
    private static final int RPC_C_LISTEN_MAX_CALLS_DEFAULT = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_LISTEN_MAX_CALLS_DEFAULT 1234
     * }
     */
    public static int RPC_C_LISTEN_MAX_CALLS_DEFAULT() {
        return RPC_C_LISTEN_MAX_CALLS_DEFAULT;
    }
    private static final int RPC_C_PROTSEQ_MAX_REQS_DEFAULT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROTSEQ_MAX_REQS_DEFAULT 10
     * }
     */
    public static int RPC_C_PROTSEQ_MAX_REQS_DEFAULT() {
        return RPC_C_PROTSEQ_MAX_REQS_DEFAULT;
    }
    private static final int RPC_C_BIND_TO_ALL_NICS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_BIND_TO_ALL_NICS 1
     * }
     */
    public static int RPC_C_BIND_TO_ALL_NICS() {
        return RPC_C_BIND_TO_ALL_NICS;
    }
    private static final int RPC_C_USE_INTERNET_PORT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_USE_INTERNET_PORT 1
     * }
     */
    public static int RPC_C_USE_INTERNET_PORT() {
        return RPC_C_USE_INTERNET_PORT;
    }
    private static final int RPC_C_USE_INTRANET_PORT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_USE_INTRANET_PORT 2
     * }
     */
    public static int RPC_C_USE_INTRANET_PORT() {
        return RPC_C_USE_INTRANET_PORT;
    }
    private static final int RPC_C_DONT_FAIL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_DONT_FAIL 4
     * }
     */
    public static int RPC_C_DONT_FAIL() {
        return RPC_C_DONT_FAIL;
    }
    private static final int RPC_C_RPCHTTP_USE_LOAD_BALANCE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_RPCHTTP_USE_LOAD_BALANCE 8
     * }
     */
    public static int RPC_C_RPCHTTP_USE_LOAD_BALANCE() {
        return RPC_C_RPCHTTP_USE_LOAD_BALANCE;
    }
    private static final int RPC_C_OPT_BINDING_NONCAUSAL = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_BINDING_NONCAUSAL 9
     * }
     */
    public static int RPC_C_OPT_BINDING_NONCAUSAL() {
        return RPC_C_OPT_BINDING_NONCAUSAL;
    }
    private static final int RPC_C_OPT_SECURITY_CALLBACK = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_SECURITY_CALLBACK 10
     * }
     */
    public static int RPC_C_OPT_SECURITY_CALLBACK() {
        return RPC_C_OPT_SECURITY_CALLBACK;
    }
    private static final int RPC_C_OPT_UNIQUE_BINDING = (int)11L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_UNIQUE_BINDING 11
     * }
     */
    public static int RPC_C_OPT_UNIQUE_BINDING() {
        return RPC_C_OPT_UNIQUE_BINDING;
    }
    private static final int RPC_C_OPT_TRANS_SEND_BUFFER_SIZE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_TRANS_SEND_BUFFER_SIZE 5
     * }
     */
    public static int RPC_C_OPT_TRANS_SEND_BUFFER_SIZE() {
        return RPC_C_OPT_TRANS_SEND_BUFFER_SIZE;
    }
    private static final int RPC_C_OPT_CALL_TIMEOUT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_CALL_TIMEOUT 12
     * }
     */
    public static int RPC_C_OPT_CALL_TIMEOUT() {
        return RPC_C_OPT_CALL_TIMEOUT;
    }
    private static final int RPC_C_OPT_DONT_LINGER = (int)13L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_DONT_LINGER 13
     * }
     */
    public static int RPC_C_OPT_DONT_LINGER() {
        return RPC_C_OPT_DONT_LINGER;
    }
    private static final int RPC_C_OPT_TRUST_PEER = (int)14L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_TRUST_PEER 14
     * }
     */
    public static int RPC_C_OPT_TRUST_PEER() {
        return RPC_C_OPT_TRUST_PEER;
    }
    private static final int RPC_C_OPT_ASYNC_BLOCK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_ASYNC_BLOCK 15
     * }
     */
    public static int RPC_C_OPT_ASYNC_BLOCK() {
        return RPC_C_OPT_ASYNC_BLOCK;
    }
    private static final int RPC_C_OPT_OPTIMIZE_TIME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_OPTIMIZE_TIME 16
     * }
     */
    public static int RPC_C_OPT_OPTIMIZE_TIME() {
        return RPC_C_OPT_OPTIMIZE_TIME;
    }
    private static final int RPC_C_OPT_MAX_OPTIONS = (int)17L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_MAX_OPTIONS 17
     * }
     */
    public static int RPC_C_OPT_MAX_OPTIONS() {
        return RPC_C_OPT_MAX_OPTIONS;
    }
    private static final int RPC_C_FULL_CERT_CHAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_FULL_CERT_CHAIN 1
     * }
     */
    public static int RPC_C_FULL_CERT_CHAIN() {
        return RPC_C_FULL_CERT_CHAIN;
    }
    private static final int RPC_C_STATS_CALLS_IN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_STATS_CALLS_IN 0
     * }
     */
    public static int RPC_C_STATS_CALLS_IN() {
        return RPC_C_STATS_CALLS_IN;
    }
    private static final int RPC_C_STATS_CALLS_OUT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_STATS_CALLS_OUT 1
     * }
     */
    public static int RPC_C_STATS_CALLS_OUT() {
        return RPC_C_STATS_CALLS_OUT;
    }
    private static final int RPC_C_STATS_PKTS_IN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_STATS_PKTS_IN 2
     * }
     */
    public static int RPC_C_STATS_PKTS_IN() {
        return RPC_C_STATS_PKTS_IN;
    }
    private static final int RPC_C_STATS_PKTS_OUT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_STATS_PKTS_OUT 3
     * }
     */
    public static int RPC_C_STATS_PKTS_OUT() {
        return RPC_C_STATS_PKTS_OUT;
    }
    private static final int RPC_C_AUTHN_LEVEL_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_DEFAULT 0
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_DEFAULT() {
        return RPC_C_AUTHN_LEVEL_DEFAULT;
    }
    private static final int RPC_C_AUTHN_LEVEL_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_NONE 1
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_NONE() {
        return RPC_C_AUTHN_LEVEL_NONE;
    }
    private static final int RPC_C_AUTHN_LEVEL_CONNECT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_CONNECT 2
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_CONNECT() {
        return RPC_C_AUTHN_LEVEL_CONNECT;
    }
    private static final int RPC_C_AUTHN_LEVEL_CALL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_CALL 3
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_CALL() {
        return RPC_C_AUTHN_LEVEL_CALL;
    }
    private static final int RPC_C_AUTHN_LEVEL_PKT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_PKT 4
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_PKT() {
        return RPC_C_AUTHN_LEVEL_PKT;
    }
    private static final int RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_PKT_INTEGRITY 5
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_PKT_INTEGRITY() {
        return RPC_C_AUTHN_LEVEL_PKT_INTEGRITY;
    }
    private static final int RPC_C_AUTHN_LEVEL_PKT_PRIVACY = (int)6L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LEVEL_PKT_PRIVACY 6
     * }
     */
    public static int RPC_C_AUTHN_LEVEL_PKT_PRIVACY() {
        return RPC_C_AUTHN_LEVEL_PKT_PRIVACY;
    }
    private static final int RPC_C_IMP_LEVEL_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_IMP_LEVEL_DEFAULT 0
     * }
     */
    public static int RPC_C_IMP_LEVEL_DEFAULT() {
        return RPC_C_IMP_LEVEL_DEFAULT;
    }
    private static final int RPC_C_IMP_LEVEL_ANONYMOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_IMP_LEVEL_ANONYMOUS 1
     * }
     */
    public static int RPC_C_IMP_LEVEL_ANONYMOUS() {
        return RPC_C_IMP_LEVEL_ANONYMOUS;
    }
    private static final int RPC_C_IMP_LEVEL_IDENTIFY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_IMP_LEVEL_IDENTIFY 2
     * }
     */
    public static int RPC_C_IMP_LEVEL_IDENTIFY() {
        return RPC_C_IMP_LEVEL_IDENTIFY;
    }
    private static final int RPC_C_IMP_LEVEL_IMPERSONATE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_IMP_LEVEL_IMPERSONATE 3
     * }
     */
    public static int RPC_C_IMP_LEVEL_IMPERSONATE() {
        return RPC_C_IMP_LEVEL_IMPERSONATE;
    }
    private static final int RPC_C_IMP_LEVEL_DELEGATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_IMP_LEVEL_DELEGATE 4
     * }
     */
    public static int RPC_C_IMP_LEVEL_DELEGATE() {
        return RPC_C_IMP_LEVEL_DELEGATE;
    }
    private static final int RPC_C_QOS_IDENTITY_STATIC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_IDENTITY_STATIC 0
     * }
     */
    public static int RPC_C_QOS_IDENTITY_STATIC() {
        return RPC_C_QOS_IDENTITY_STATIC;
    }
    private static final int RPC_C_QOS_IDENTITY_DYNAMIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_IDENTITY_DYNAMIC 1
     * }
     */
    public static int RPC_C_QOS_IDENTITY_DYNAMIC() {
        return RPC_C_QOS_IDENTITY_DYNAMIC;
    }
    private static final int RPC_C_QOS_CAPABILITIES_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_DEFAULT 0
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_DEFAULT() {
        return RPC_C_QOS_CAPABILITIES_DEFAULT;
    }
    private static final int RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH 1
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH() {
        return RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH;
    }
    private static final int RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC 2
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC() {
        return RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC;
    }
    private static final int RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY 4
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY() {
        return RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY;
    }
    private static final int RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE 8
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE() {
        return RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE;
    }
    private static final int RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT 16
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT() {
        return RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT;
    }
    private static final int RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY 32
     * }
     */
    public static int RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY() {
        return RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY;
    }
    private static final int RPC_C_AUTHN_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_NONE 0
     * }
     */
    public static int RPC_C_AUTHN_NONE() {
        return RPC_C_AUTHN_NONE;
    }
    private static final int RPC_C_AUTHN_DCE_PRIVATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_DCE_PRIVATE 1
     * }
     */
    public static int RPC_C_AUTHN_DCE_PRIVATE() {
        return RPC_C_AUTHN_DCE_PRIVATE;
    }
    private static final int RPC_C_AUTHN_DCE_PUBLIC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_DCE_PUBLIC 2
     * }
     */
    public static int RPC_C_AUTHN_DCE_PUBLIC() {
        return RPC_C_AUTHN_DCE_PUBLIC;
    }
    private static final int RPC_C_AUTHN_DEC_PUBLIC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_DEC_PUBLIC 4
     * }
     */
    public static int RPC_C_AUTHN_DEC_PUBLIC() {
        return RPC_C_AUTHN_DEC_PUBLIC;
    }
    private static final int RPC_C_AUTHN_GSS_NEGOTIATE = (int)9L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_GSS_NEGOTIATE 9
     * }
     */
    public static int RPC_C_AUTHN_GSS_NEGOTIATE() {
        return RPC_C_AUTHN_GSS_NEGOTIATE;
    }
    private static final int RPC_C_AUTHN_WINNT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_WINNT 10
     * }
     */
    public static int RPC_C_AUTHN_WINNT() {
        return RPC_C_AUTHN_WINNT;
    }
    private static final int RPC_C_AUTHN_GSS_SCHANNEL = (int)14L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_GSS_SCHANNEL 14
     * }
     */
    public static int RPC_C_AUTHN_GSS_SCHANNEL() {
        return RPC_C_AUTHN_GSS_SCHANNEL;
    }
    private static final int RPC_C_AUTHN_GSS_KERBEROS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_GSS_KERBEROS 16
     * }
     */
    public static int RPC_C_AUTHN_GSS_KERBEROS() {
        return RPC_C_AUTHN_GSS_KERBEROS;
    }
    private static final int RPC_C_AUTHN_DPA = (int)17L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_DPA 17
     * }
     */
    public static int RPC_C_AUTHN_DPA() {
        return RPC_C_AUTHN_DPA;
    }
    private static final int RPC_C_AUTHN_MSN = (int)18L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_MSN 18
     * }
     */
    public static int RPC_C_AUTHN_MSN() {
        return RPC_C_AUTHN_MSN;
    }
    private static final int RPC_C_AUTHN_DIGEST = (int)21L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_DIGEST 21
     * }
     */
    public static int RPC_C_AUTHN_DIGEST() {
        return RPC_C_AUTHN_DIGEST;
    }
    private static final int RPC_C_AUTHN_KERNEL = (int)20L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_KERNEL 20
     * }
     */
    public static int RPC_C_AUTHN_KERNEL() {
        return RPC_C_AUTHN_KERNEL;
    }
    private static final int RPC_C_AUTHN_NEGO_EXTENDER = (int)30L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_NEGO_EXTENDER 30
     * }
     */
    public static int RPC_C_AUTHN_NEGO_EXTENDER() {
        return RPC_C_AUTHN_NEGO_EXTENDER;
    }
    private static final int RPC_C_AUTHN_PKU2U = (int)31L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_PKU2U 31
     * }
     */
    public static int RPC_C_AUTHN_PKU2U() {
        return RPC_C_AUTHN_PKU2U;
    }
    private static final int RPC_C_AUTHN_LIVE_SSP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LIVE_SSP 32
     * }
     */
    public static int RPC_C_AUTHN_LIVE_SSP() {
        return RPC_C_AUTHN_LIVE_SSP;
    }
    private static final int RPC_C_AUTHN_LIVEXP_SSP = (int)35L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_LIVEXP_SSP 35
     * }
     */
    public static int RPC_C_AUTHN_LIVEXP_SSP() {
        return RPC_C_AUTHN_LIVEXP_SSP;
    }
    private static final int RPC_C_AUTHN_CLOUD_AP = (int)36L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_CLOUD_AP 36
     * }
     */
    public static int RPC_C_AUTHN_CLOUD_AP() {
        return RPC_C_AUTHN_CLOUD_AP;
    }
    private static final int RPC_C_AUTHN_MSONLINE = (int)82L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_MSONLINE 82
     * }
     */
    public static int RPC_C_AUTHN_MSONLINE() {
        return RPC_C_AUTHN_MSONLINE;
    }
    private static final int RPC_C_AUTHN_MQ = (int)100L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_MQ 100
     * }
     */
    public static int RPC_C_AUTHN_MQ() {
        return RPC_C_AUTHN_MQ;
    }
    private static final int SEC_WINNT_AUTH_IDENTITY_ANSI = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEC_WINNT_AUTH_IDENTITY_ANSI 1
     * }
     */
    public static int SEC_WINNT_AUTH_IDENTITY_ANSI() {
        return SEC_WINNT_AUTH_IDENTITY_ANSI;
    }
    private static final int SEC_WINNT_AUTH_IDENTITY_UNICODE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEC_WINNT_AUTH_IDENTITY_UNICODE 2
     * }
     */
    public static int SEC_WINNT_AUTH_IDENTITY_UNICODE() {
        return SEC_WINNT_AUTH_IDENTITY_UNICODE;
    }
    private static final int RPC_C_AUTHN_INFO_TYPE_HTTP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHN_INFO_TYPE_HTTP 1
     * }
     */
    public static int RPC_C_AUTHN_INFO_TYPE_HTTP() {
        return RPC_C_AUTHN_INFO_TYPE_HTTP;
    }
    private static final int RPC_C_HTTP_AUTHN_TARGET_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_TARGET_SERVER 1
     * }
     */
    public static int RPC_C_HTTP_AUTHN_TARGET_SERVER() {
        return RPC_C_HTTP_AUTHN_TARGET_SERVER;
    }
    private static final int RPC_C_HTTP_AUTHN_TARGET_PROXY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_TARGET_PROXY 2
     * }
     */
    public static int RPC_C_HTTP_AUTHN_TARGET_PROXY() {
        return RPC_C_HTTP_AUTHN_TARGET_PROXY;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_BASIC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_BASIC 1
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_BASIC() {
        return RPC_C_HTTP_AUTHN_SCHEME_BASIC;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_NTLM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_NTLM 2
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_NTLM() {
        return RPC_C_HTTP_AUTHN_SCHEME_NTLM;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_PASSPORT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_PASSPORT 4
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_PASSPORT() {
        return RPC_C_HTTP_AUTHN_SCHEME_PASSPORT;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_DIGEST = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_DIGEST 8
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_DIGEST() {
        return RPC_C_HTTP_AUTHN_SCHEME_DIGEST;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE 16
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE() {
        return RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE;
    }
    private static final int RPC_C_HTTP_AUTHN_SCHEME_CERT = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_AUTHN_SCHEME_CERT 65536
     * }
     */
    public static int RPC_C_HTTP_AUTHN_SCHEME_CERT() {
        return RPC_C_HTTP_AUTHN_SCHEME_CERT;
    }
    private static final int RPC_C_HTTP_FLAG_USE_SSL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_FLAG_USE_SSL 1
     * }
     */
    public static int RPC_C_HTTP_FLAG_USE_SSL() {
        return RPC_C_HTTP_FLAG_USE_SSL;
    }
    private static final int RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME 2
     * }
     */
    public static int RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME() {
        return RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME;
    }
    private static final int RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID 8
     * }
     */
    public static int RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID() {
        return RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID;
    }
    private static final int RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK 16
     * }
     */
    public static int RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK() {
        return RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK;
    }
    private static final int RPC_C_AUTHZ_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHZ_NONE 0
     * }
     */
    public static int RPC_C_AUTHZ_NONE() {
        return RPC_C_AUTHZ_NONE;
    }
    private static final int RPC_C_AUTHZ_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHZ_NAME 1
     * }
     */
    public static int RPC_C_AUTHZ_NAME() {
        return RPC_C_AUTHZ_NAME;
    }
    private static final int RPC_C_AUTHZ_DCE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_AUTHZ_DCE 2
     * }
     */
    public static int RPC_C_AUTHZ_DCE() {
        return RPC_C_AUTHZ_DCE;
    }
    private static final int DCE_C_ERROR_STRING_LEN = (int)256L;
    /**
     * {@snippet lang=c :
     * #define DCE_C_ERROR_STRING_LEN 256
     * }
     */
    public static int DCE_C_ERROR_STRING_LEN() {
        return DCE_C_ERROR_STRING_LEN;
    }
    private static final int RPC_C_EP_ALL_ELTS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_EP_ALL_ELTS 0
     * }
     */
    public static int RPC_C_EP_ALL_ELTS() {
        return RPC_C_EP_ALL_ELTS;
    }
    private static final int RPC_C_EP_MATCH_BY_IF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_EP_MATCH_BY_IF 1
     * }
     */
    public static int RPC_C_EP_MATCH_BY_IF() {
        return RPC_C_EP_MATCH_BY_IF;
    }
    private static final int RPC_C_EP_MATCH_BY_OBJ = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_EP_MATCH_BY_OBJ 2
     * }
     */
    public static int RPC_C_EP_MATCH_BY_OBJ() {
        return RPC_C_EP_MATCH_BY_OBJ;
    }
    private static final int RPC_C_EP_MATCH_BY_BOTH = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_EP_MATCH_BY_BOTH 3
     * }
     */
    public static int RPC_C_EP_MATCH_BY_BOTH() {
        return RPC_C_EP_MATCH_BY_BOTH;
    }
    private static final int RPC_C_VERS_ALL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_VERS_ALL 1
     * }
     */
    public static int RPC_C_VERS_ALL() {
        return RPC_C_VERS_ALL;
    }
    private static final int RPC_C_VERS_COMPATIBLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_VERS_COMPATIBLE 2
     * }
     */
    public static int RPC_C_VERS_COMPATIBLE() {
        return RPC_C_VERS_COMPATIBLE;
    }
    private static final int RPC_C_VERS_EXACT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_VERS_EXACT 3
     * }
     */
    public static int RPC_C_VERS_EXACT() {
        return RPC_C_VERS_EXACT;
    }
    private static final int RPC_C_VERS_MAJOR_ONLY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_VERS_MAJOR_ONLY 4
     * }
     */
    public static int RPC_C_VERS_MAJOR_ONLY() {
        return RPC_C_VERS_MAJOR_ONLY;
    }
    private static final int RPC_C_VERS_UPTO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_VERS_UPTO 5
     * }
     */
    public static int RPC_C_VERS_UPTO() {
        return RPC_C_VERS_UPTO;
    }
    private static final int RPC_C_MGMT_INQ_IF_IDS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_MGMT_INQ_IF_IDS 0
     * }
     */
    public static int RPC_C_MGMT_INQ_IF_IDS() {
        return RPC_C_MGMT_INQ_IF_IDS;
    }
    private static final int RPC_C_MGMT_INQ_PRINC_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_MGMT_INQ_PRINC_NAME 1
     * }
     */
    public static int RPC_C_MGMT_INQ_PRINC_NAME() {
        return RPC_C_MGMT_INQ_PRINC_NAME;
    }
    private static final int RPC_C_MGMT_INQ_STATS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_MGMT_INQ_STATS 2
     * }
     */
    public static int RPC_C_MGMT_INQ_STATS() {
        return RPC_C_MGMT_INQ_STATS;
    }
    private static final int RPC_C_MGMT_IS_SERVER_LISTEN = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_MGMT_IS_SERVER_LISTEN 3
     * }
     */
    public static int RPC_C_MGMT_IS_SERVER_LISTEN() {
        return RPC_C_MGMT_IS_SERVER_LISTEN;
    }
    private static final int RPC_C_MGMT_STOP_SERVER_LISTEN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_MGMT_STOP_SERVER_LISTEN 4
     * }
     */
    public static int RPC_C_MGMT_STOP_SERVER_LISTEN() {
        return RPC_C_MGMT_STOP_SERVER_LISTEN;
    }
    private static final int RPC_C_PARM_MAX_PACKET_LENGTH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PARM_MAX_PACKET_LENGTH 1
     * }
     */
    public static int RPC_C_PARM_MAX_PACKET_LENGTH() {
        return RPC_C_PARM_MAX_PACKET_LENGTH;
    }
    private static final int RPC_C_PARM_BUFFER_LENGTH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PARM_BUFFER_LENGTH 2
     * }
     */
    public static int RPC_C_PARM_BUFFER_LENGTH() {
        return RPC_C_PARM_BUFFER_LENGTH;
    }
    private static final int RPC_IF_AUTOLISTEN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_AUTOLISTEN 1
     * }
     */
    public static int RPC_IF_AUTOLISTEN() {
        return RPC_IF_AUTOLISTEN;
    }
    private static final int RPC_IF_OLE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_OLE 2
     * }
     */
    public static int RPC_IF_OLE() {
        return RPC_IF_OLE;
    }
    private static final int RPC_IF_ALLOW_UNKNOWN_AUTHORITY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_ALLOW_UNKNOWN_AUTHORITY 4
     * }
     */
    public static int RPC_IF_ALLOW_UNKNOWN_AUTHORITY() {
        return RPC_IF_ALLOW_UNKNOWN_AUTHORITY;
    }
    private static final int RPC_IF_ALLOW_SECURE_ONLY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_ALLOW_SECURE_ONLY 8
     * }
     */
    public static int RPC_IF_ALLOW_SECURE_ONLY() {
        return RPC_IF_ALLOW_SECURE_ONLY;
    }
    private static final int RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH 16
     * }
     */
    public static int RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH() {
        return RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH;
    }
    private static final int RPC_IF_ALLOW_LOCAL_ONLY = (int)32L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_ALLOW_LOCAL_ONLY 32
     * }
     */
    public static int RPC_IF_ALLOW_LOCAL_ONLY() {
        return RPC_IF_ALLOW_LOCAL_ONLY;
    }
    private static final int RPC_IF_SEC_NO_CACHE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_SEC_NO_CACHE 64
     * }
     */
    public static int RPC_IF_SEC_NO_CACHE() {
        return RPC_IF_SEC_NO_CACHE;
    }
    private static final int RPC_IF_SEC_CACHE_PER_PROC = (int)128L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_SEC_CACHE_PER_PROC 128
     * }
     */
    public static int RPC_IF_SEC_CACHE_PER_PROC() {
        return RPC_IF_SEC_CACHE_PER_PROC;
    }
    private static final int RPC_IF_ASYNC_CALLBACK = (int)256L;
    /**
     * {@snippet lang=c :
     * #define RPC_IF_ASYNC_CALLBACK 256
     * }
     */
    public static int RPC_IF_ASYNC_CALLBACK() {
        return RPC_IF_ASYNC_CALLBACK;
    }
    private static final int RPC_FW_IF_FLAG_DCOM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_FW_IF_FLAG_DCOM 1
     * }
     */
    public static int RPC_FW_IF_FLAG_DCOM() {
        return RPC_FW_IF_FLAG_DCOM;
    }
    private static final int RPC_NCA_FLAGS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_NCA_FLAGS_DEFAULT 0
     * }
     */
    public static int RPC_NCA_FLAGS_DEFAULT() {
        return RPC_NCA_FLAGS_DEFAULT;
    }
    private static final int RPC_NCA_FLAGS_IDEMPOTENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_NCA_FLAGS_IDEMPOTENT 1
     * }
     */
    public static int RPC_NCA_FLAGS_IDEMPOTENT() {
        return RPC_NCA_FLAGS_IDEMPOTENT;
    }
    private static final int RPC_NCA_FLAGS_BROADCAST = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_NCA_FLAGS_BROADCAST 2
     * }
     */
    public static int RPC_NCA_FLAGS_BROADCAST() {
        return RPC_NCA_FLAGS_BROADCAST;
    }
    private static final int RPC_NCA_FLAGS_MAYBE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_NCA_FLAGS_MAYBE 4
     * }
     */
    public static int RPC_NCA_FLAGS_MAYBE() {
        return RPC_NCA_FLAGS_MAYBE;
    }
    private static final int RPC_BUFFER_COMPLETE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define RPC_BUFFER_COMPLETE 4096
     * }
     */
    public static int RPC_BUFFER_COMPLETE() {
        return RPC_BUFFER_COMPLETE;
    }
    private static final int RPC_BUFFER_PARTIAL = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define RPC_BUFFER_PARTIAL 8192
     * }
     */
    public static int RPC_BUFFER_PARTIAL() {
        return RPC_BUFFER_PARTIAL;
    }
    private static final int RPC_BUFFER_EXTRA = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define RPC_BUFFER_EXTRA 16384
     * }
     */
    public static int RPC_BUFFER_EXTRA() {
        return RPC_BUFFER_EXTRA;
    }
    private static final int RPC_BUFFER_ASYNC = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define RPC_BUFFER_ASYNC 32768
     * }
     */
    public static int RPC_BUFFER_ASYNC() {
        return RPC_BUFFER_ASYNC;
    }
    private static final int RPC_BUFFER_NONOTIFY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define RPC_BUFFER_NONOTIFY 65536
     * }
     */
    public static int RPC_BUFFER_NONOTIFY() {
        return RPC_BUFFER_NONOTIFY;
    }
    private static final int RPC_FLAGS_VALID_BIT = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define RPC_FLAGS_VALID_BIT 32768
     * }
     */
    public static int RPC_FLAGS_VALID_BIT() {
        return RPC_FLAGS_VALID_BIT;
    }
    private static final int NT351_INTERFACE_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NT351_INTERFACE_SIZE 64
     * }
     */
    public static int NT351_INTERFACE_SIZE() {
        return NT351_INTERFACE_SIZE;
    }
    private static final int RPC_INTERFACE_HAS_PIPES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_INTERFACE_HAS_PIPES 1
     * }
     */
    public static int RPC_INTERFACE_HAS_PIPES() {
        return RPC_INTERFACE_HAS_PIPES;
    }
    private static final int RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED 1
     * }
     */
    public static int RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED() {
        return RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED;
    }
    private static final int RPC_SYSTEM_HANDLE_FREE_RETRIEVED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_SYSTEM_HANDLE_FREE_RETRIEVED 2
     * }
     */
    public static int RPC_SYSTEM_HANDLE_FREE_RETRIEVED() {
        return RPC_SYSTEM_HANDLE_FREE_RETRIEVED;
    }
    private static final int RPC_SYSTEM_HANDLE_FREE_ALL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_SYSTEM_HANDLE_FREE_ALL 3
     * }
     */
    public static int RPC_SYSTEM_HANDLE_FREE_ALL() {
        return RPC_SYSTEM_HANDLE_FREE_ALL;
    }
    private static final int RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE 4
     * }
     */
    public static int RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE() {
        return RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE;
    }
    private static final int TRANSPORT_TYPE_CN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TRANSPORT_TYPE_CN 1
     * }
     */
    public static int TRANSPORT_TYPE_CN() {
        return TRANSPORT_TYPE_CN;
    }
    private static final int TRANSPORT_TYPE_DG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TRANSPORT_TYPE_DG 2
     * }
     */
    public static int TRANSPORT_TYPE_DG() {
        return TRANSPORT_TYPE_DG;
    }
    private static final int TRANSPORT_TYPE_LPC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TRANSPORT_TYPE_LPC 4
     * }
     */
    public static int TRANSPORT_TYPE_LPC() {
        return TRANSPORT_TYPE_LPC;
    }
    private static final int TRANSPORT_TYPE_WMSG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TRANSPORT_TYPE_WMSG 8
     * }
     */
    public static int TRANSPORT_TYPE_WMSG() {
        return TRANSPORT_TYPE_WMSG;
    }
    private static final int RPC_P_ADDR_FORMAT_TCP_IPV4 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_P_ADDR_FORMAT_TCP_IPV4 1
     * }
     */
    public static int RPC_P_ADDR_FORMAT_TCP_IPV4() {
        return RPC_P_ADDR_FORMAT_TCP_IPV4;
    }
    private static final int RPC_P_ADDR_FORMAT_TCP_IPV6 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_P_ADDR_FORMAT_TCP_IPV6 2
     * }
     */
    public static int RPC_P_ADDR_FORMAT_TCP_IPV6() {
        return RPC_P_ADDR_FORMAT_TCP_IPV6;
    }
    private static final int RPC_PROXY_CONNECTION_TYPE_IN_PROXY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_PROXY_CONNECTION_TYPE_IN_PROXY 0
     * }
     */
    public static int RPC_PROXY_CONNECTION_TYPE_IN_PROXY() {
        return RPC_PROXY_CONNECTION_TYPE_IN_PROXY;
    }
    private static final int RPC_PROXY_CONNECTION_TYPE_OUT_PROXY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_PROXY_CONNECTION_TYPE_OUT_PROXY 1
     * }
     */
    public static int RPC_PROXY_CONNECTION_TYPE_OUT_PROXY() {
        return RPC_PROXY_CONNECTION_TYPE_OUT_PROXY;
    }
    private static final int RPC_C_OPT_PRIVATE_SUPPRESS_WAKE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_PRIVATE_SUPPRESS_WAKE 1
     * }
     */
    public static int RPC_C_OPT_PRIVATE_SUPPRESS_WAKE() {
        return RPC_C_OPT_PRIVATE_SUPPRESS_WAKE;
    }
    private static final int RPC_C_OPT_PRIVATE_DO_NOT_DISTURB = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_PRIVATE_DO_NOT_DISTURB 2
     * }
     */
    public static int RPC_C_OPT_PRIVATE_DO_NOT_DISTURB() {
        return RPC_C_OPT_PRIVATE_DO_NOT_DISTURB;
    }
    private static final int RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND 3
     * }
     */
    public static int RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND() {
        return RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND;
    }
    private static final int RPC_C_NS_SYNTAX_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_NS_SYNTAX_DEFAULT 0
     * }
     */
    public static int RPC_C_NS_SYNTAX_DEFAULT() {
        return RPC_C_NS_SYNTAX_DEFAULT;
    }
    private static final int RPC_C_NS_SYNTAX_DCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_NS_SYNTAX_DCE 3
     * }
     */
    public static int RPC_C_NS_SYNTAX_DCE() {
        return RPC_C_NS_SYNTAX_DCE;
    }
    private static final int RPC_C_PROFILE_DEFAULT_ELT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROFILE_DEFAULT_ELT 0
     * }
     */
    public static int RPC_C_PROFILE_DEFAULT_ELT() {
        return RPC_C_PROFILE_DEFAULT_ELT;
    }
    private static final int RPC_C_PROFILE_ALL_ELT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROFILE_ALL_ELT 1
     * }
     */
    public static int RPC_C_PROFILE_ALL_ELT() {
        return RPC_C_PROFILE_ALL_ELT;
    }
    private static final int RPC_C_PROFILE_MATCH_BY_IF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROFILE_MATCH_BY_IF 2
     * }
     */
    public static int RPC_C_PROFILE_MATCH_BY_IF() {
        return RPC_C_PROFILE_MATCH_BY_IF;
    }
    private static final int RPC_C_PROFILE_MATCH_BY_MBR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROFILE_MATCH_BY_MBR 3
     * }
     */
    public static int RPC_C_PROFILE_MATCH_BY_MBR() {
        return RPC_C_PROFILE_MATCH_BY_MBR;
    }
    private static final int RPC_C_PROFILE_MATCH_BY_BOTH = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_PROFILE_MATCH_BY_BOTH 4
     * }
     */
    public static int RPC_C_PROFILE_MATCH_BY_BOTH() {
        return RPC_C_PROFILE_MATCH_BY_BOTH;
    }
    private static final int RPC_C_NOTIFY_ON_SEND_COMPLETE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_C_NOTIFY_ON_SEND_COMPLETE 1
     * }
     */
    public static int RPC_C_NOTIFY_ON_SEND_COMPLETE() {
        return RPC_C_NOTIFY_ON_SEND_COMPLETE;
    }
    private static final int MaxNumberOfEEInfoParams = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MaxNumberOfEEInfoParams 4
     * }
     */
    public static int MaxNumberOfEEInfoParams() {
        return MaxNumberOfEEInfoParams;
    }
    private static final int RPC_EEINFO_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_EEINFO_VERSION 1
     * }
     */
    public static int RPC_EEINFO_VERSION() {
        return RPC_EEINFO_VERSION;
    }
    private static final int EEInfoPreviousRecordsMissing = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EEInfoPreviousRecordsMissing 1
     * }
     */
    public static int EEInfoPreviousRecordsMissing() {
        return EEInfoPreviousRecordsMissing;
    }
    private static final int EEInfoNextRecordsMissing = (int)2L;
    /**
     * {@snippet lang=c :
     * #define EEInfoNextRecordsMissing 2
     * }
     */
    public static int EEInfoNextRecordsMissing() {
        return EEInfoNextRecordsMissing;
    }
    private static final int EEInfoUseFileTime = (int)4L;
    /**
     * {@snippet lang=c :
     * #define EEInfoUseFileTime 4
     * }
     */
    public static int EEInfoUseFileTime() {
        return EEInfoUseFileTime;
    }
    private static final int EEInfoGCCOM = (int)11L;
    /**
     * {@snippet lang=c :
     * #define EEInfoGCCOM 11
     * }
     */
    public static int EEInfoGCCOM() {
        return EEInfoGCCOM;
    }
    private static final int EEInfoGCFRS = (int)12L;
    /**
     * {@snippet lang=c :
     * #define EEInfoGCFRS 12
     * }
     */
    public static int EEInfoGCFRS() {
        return EEInfoGCFRS;
    }
    private static final int RPC_CALL_STATUS_CANCELLED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RPC_CALL_STATUS_CANCELLED 1
     * }
     */
    public static int RPC_CALL_STATUS_CANCELLED() {
        return RPC_CALL_STATUS_CANCELLED;
    }
    private static final int RPC_CALL_STATUS_DISCONNECTED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RPC_CALL_STATUS_DISCONNECTED 2
     * }
     */
    public static int RPC_CALL_STATUS_DISCONNECTED() {
        return RPC_CALL_STATUS_DISCONNECTED;
    }
    private static final int ABM_NEW = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ABM_NEW 0
     * }
     */
    public static int ABM_NEW() {
        return ABM_NEW;
    }
    private static final int ABM_REMOVE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ABM_REMOVE 1
     * }
     */
    public static int ABM_REMOVE() {
        return ABM_REMOVE;
    }
    private static final int ABM_QUERYPOS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ABM_QUERYPOS 2
     * }
     */
    public static int ABM_QUERYPOS() {
        return ABM_QUERYPOS;
    }
    private static final int ABM_SETPOS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ABM_SETPOS 3
     * }
     */
    public static int ABM_SETPOS() {
        return ABM_SETPOS;
    }
    private static final int ABM_GETSTATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ABM_GETSTATE 4
     * }
     */
    public static int ABM_GETSTATE() {
        return ABM_GETSTATE;
    }
    private static final int ABM_GETTASKBARPOS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ABM_GETTASKBARPOS 5
     * }
     */
    public static int ABM_GETTASKBARPOS() {
        return ABM_GETTASKBARPOS;
    }
    private static final int ABM_ACTIVATE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ABM_ACTIVATE 6
     * }
     */
    public static int ABM_ACTIVATE() {
        return ABM_ACTIVATE;
    }
    private static final int ABM_GETAUTOHIDEBAR = (int)7L;
    /**
     * {@snippet lang=c :
     * #define ABM_GETAUTOHIDEBAR 7
     * }
     */
    public static int ABM_GETAUTOHIDEBAR() {
        return ABM_GETAUTOHIDEBAR;
    }
    private static final int ABM_SETAUTOHIDEBAR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ABM_SETAUTOHIDEBAR 8
     * }
     */
    public static int ABM_SETAUTOHIDEBAR() {
        return ABM_SETAUTOHIDEBAR;
    }
    private static final int ABM_WINDOWPOSCHANGED = (int)9L;
    /**
     * {@snippet lang=c :
     * #define ABM_WINDOWPOSCHANGED 9
     * }
     */
    public static int ABM_WINDOWPOSCHANGED() {
        return ABM_WINDOWPOSCHANGED;
    }
    private static final int ABM_SETSTATE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define ABM_SETSTATE 10
     * }
     */
    public static int ABM_SETSTATE() {
        return ABM_SETSTATE;
    }
    private static final int ABM_GETAUTOHIDEBAREX = (int)11L;
    /**
     * {@snippet lang=c :
     * #define ABM_GETAUTOHIDEBAREX 11
     * }
     */
    public static int ABM_GETAUTOHIDEBAREX() {
        return ABM_GETAUTOHIDEBAREX;
    }
    private static final int ABM_SETAUTOHIDEBAREX = (int)12L;
    /**
     * {@snippet lang=c :
     * #define ABM_SETAUTOHIDEBAREX 12
     * }
     */
    public static int ABM_SETAUTOHIDEBAREX() {
        return ABM_SETAUTOHIDEBAREX;
    }
    private static final int ABN_STATECHANGE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ABN_STATECHANGE 0
     * }
     */
    public static int ABN_STATECHANGE() {
        return ABN_STATECHANGE;
    }
    private static final int ABN_POSCHANGED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ABN_POSCHANGED 1
     * }
     */
    public static int ABN_POSCHANGED() {
        return ABN_POSCHANGED;
    }
    private static final int ABN_FULLSCREENAPP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ABN_FULLSCREENAPP 2
     * }
     */
    public static int ABN_FULLSCREENAPP() {
        return ABN_FULLSCREENAPP;
    }
    private static final int ABN_WINDOWARRANGE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ABN_WINDOWARRANGE 3
     * }
     */
    public static int ABN_WINDOWARRANGE() {
        return ABN_WINDOWARRANGE;
    }
    private static final int ABS_AUTOHIDE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ABS_AUTOHIDE 1
     * }
     */
    public static int ABS_AUTOHIDE() {
        return ABS_AUTOHIDE;
    }
    private static final int ABS_ALWAYSONTOP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ABS_ALWAYSONTOP 2
     * }
     */
    public static int ABS_ALWAYSONTOP() {
        return ABS_ALWAYSONTOP;
    }
    private static final int ABE_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ABE_LEFT 0
     * }
     */
    public static int ABE_LEFT() {
        return ABE_LEFT;
    }
    private static final int ABE_TOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ABE_TOP 1
     * }
     */
    public static int ABE_TOP() {
        return ABE_TOP;
    }
    private static final int ABE_RIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ABE_RIGHT 2
     * }
     */
    public static int ABE_RIGHT() {
        return ABE_RIGHT;
    }
    private static final int ABE_BOTTOM = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ABE_BOTTOM 3
     * }
     */
    public static int ABE_BOTTOM() {
        return ABE_BOTTOM;
    }
    private static final int FO_MOVE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FO_MOVE 1
     * }
     */
    public static int FO_MOVE() {
        return FO_MOVE;
    }
    private static final int FO_COPY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FO_COPY 2
     * }
     */
    public static int FO_COPY() {
        return FO_COPY;
    }
    private static final int FO_DELETE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define FO_DELETE 3
     * }
     */
    public static int FO_DELETE() {
        return FO_DELETE;
    }
    private static final int FO_RENAME = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FO_RENAME 4
     * }
     */
    public static int FO_RENAME() {
        return FO_RENAME;
    }
    private static final int FOF_MULTIDESTFILES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FOF_MULTIDESTFILES 1
     * }
     */
    public static int FOF_MULTIDESTFILES() {
        return FOF_MULTIDESTFILES;
    }
    private static final int FOF_CONFIRMMOUSE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FOF_CONFIRMMOUSE 2
     * }
     */
    public static int FOF_CONFIRMMOUSE() {
        return FOF_CONFIRMMOUSE;
    }
    private static final int FOF_SILENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FOF_SILENT 4
     * }
     */
    public static int FOF_SILENT() {
        return FOF_SILENT;
    }
    private static final int FOF_RENAMEONCOLLISION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FOF_RENAMEONCOLLISION 8
     * }
     */
    public static int FOF_RENAMEONCOLLISION() {
        return FOF_RENAMEONCOLLISION;
    }
    private static final int FOF_NOCONFIRMATION = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FOF_NOCONFIRMATION 16
     * }
     */
    public static int FOF_NOCONFIRMATION() {
        return FOF_NOCONFIRMATION;
    }
    private static final int FOF_WANTMAPPINGHANDLE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FOF_WANTMAPPINGHANDLE 32
     * }
     */
    public static int FOF_WANTMAPPINGHANDLE() {
        return FOF_WANTMAPPINGHANDLE;
    }
    private static final int FOF_ALLOWUNDO = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FOF_ALLOWUNDO 64
     * }
     */
    public static int FOF_ALLOWUNDO() {
        return FOF_ALLOWUNDO;
    }
    private static final int FOF_FILESONLY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FOF_FILESONLY 128
     * }
     */
    public static int FOF_FILESONLY() {
        return FOF_FILESONLY;
    }
    private static final int FOF_SIMPLEPROGRESS = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FOF_SIMPLEPROGRESS 256
     * }
     */
    public static int FOF_SIMPLEPROGRESS() {
        return FOF_SIMPLEPROGRESS;
    }
    private static final int FOF_NOCONFIRMMKDIR = (int)512L;
    /**
     * {@snippet lang=c :
     * #define FOF_NOCONFIRMMKDIR 512
     * }
     */
    public static int FOF_NOCONFIRMMKDIR() {
        return FOF_NOCONFIRMMKDIR;
    }
    private static final int FOF_NOERRORUI = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FOF_NOERRORUI 1024
     * }
     */
    public static int FOF_NOERRORUI() {
        return FOF_NOERRORUI;
    }
    private static final int FOF_NOCOPYSECURITYATTRIBS = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define FOF_NOCOPYSECURITYATTRIBS 2048
     * }
     */
    public static int FOF_NOCOPYSECURITYATTRIBS() {
        return FOF_NOCOPYSECURITYATTRIBS;
    }
    private static final int FOF_NORECURSION = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define FOF_NORECURSION 4096
     * }
     */
    public static int FOF_NORECURSION() {
        return FOF_NORECURSION;
    }
    private static final int FOF_NO_CONNECTED_ELEMENTS = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define FOF_NO_CONNECTED_ELEMENTS 8192
     * }
     */
    public static int FOF_NO_CONNECTED_ELEMENTS() {
        return FOF_NO_CONNECTED_ELEMENTS;
    }
    private static final int FOF_WANTNUKEWARNING = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FOF_WANTNUKEWARNING 16384
     * }
     */
    public static int FOF_WANTNUKEWARNING() {
        return FOF_WANTNUKEWARNING;
    }
    private static final int FOF_NORECURSEREPARSE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define FOF_NORECURSEREPARSE 32768
     * }
     */
    public static int FOF_NORECURSEREPARSE() {
        return FOF_NORECURSEREPARSE;
    }
    private static final int PO_DELETE = (int)19L;
    /**
     * {@snippet lang=c :
     * #define PO_DELETE 19
     * }
     */
    public static int PO_DELETE() {
        return PO_DELETE;
    }
    private static final int PO_RENAME = (int)20L;
    /**
     * {@snippet lang=c :
     * #define PO_RENAME 20
     * }
     */
    public static int PO_RENAME() {
        return PO_RENAME;
    }
    private static final int PO_PORTCHANGE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PO_PORTCHANGE 32
     * }
     */
    public static int PO_PORTCHANGE() {
        return PO_PORTCHANGE;
    }
    private static final int PO_REN_PORT = (int)52L;
    /**
     * {@snippet lang=c :
     * #define PO_REN_PORT 52
     * }
     */
    public static int PO_REN_PORT() {
        return PO_REN_PORT;
    }
    private static final int SE_ERR_FNF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_FNF 2
     * }
     */
    public static int SE_ERR_FNF() {
        return SE_ERR_FNF;
    }
    private static final int SE_ERR_PNF = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_PNF 3
     * }
     */
    public static int SE_ERR_PNF() {
        return SE_ERR_PNF;
    }
    private static final int SE_ERR_ACCESSDENIED = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_ACCESSDENIED 5
     * }
     */
    public static int SE_ERR_ACCESSDENIED() {
        return SE_ERR_ACCESSDENIED;
    }
    private static final int SE_ERR_OOM = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_OOM 8
     * }
     */
    public static int SE_ERR_OOM() {
        return SE_ERR_OOM;
    }
    private static final int SE_ERR_DLLNOTFOUND = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_DLLNOTFOUND 32
     * }
     */
    public static int SE_ERR_DLLNOTFOUND() {
        return SE_ERR_DLLNOTFOUND;
    }
    private static final int SE_ERR_SHARE = (int)26L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_SHARE 26
     * }
     */
    public static int SE_ERR_SHARE() {
        return SE_ERR_SHARE;
    }
    private static final int SE_ERR_ASSOCINCOMPLETE = (int)27L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_ASSOCINCOMPLETE 27
     * }
     */
    public static int SE_ERR_ASSOCINCOMPLETE() {
        return SE_ERR_ASSOCINCOMPLETE;
    }
    private static final int SE_ERR_DDETIMEOUT = (int)28L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_DDETIMEOUT 28
     * }
     */
    public static int SE_ERR_DDETIMEOUT() {
        return SE_ERR_DDETIMEOUT;
    }
    private static final int SE_ERR_DDEFAIL = (int)29L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_DDEFAIL 29
     * }
     */
    public static int SE_ERR_DDEFAIL() {
        return SE_ERR_DDEFAIL;
    }
    private static final int SE_ERR_DDEBUSY = (int)30L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_DDEBUSY 30
     * }
     */
    public static int SE_ERR_DDEBUSY() {
        return SE_ERR_DDEBUSY;
    }
    private static final int SE_ERR_NOASSOC = (int)31L;
    /**
     * {@snippet lang=c :
     * #define SE_ERR_NOASSOC 31
     * }
     */
    public static int SE_ERR_NOASSOC() {
        return SE_ERR_NOASSOC;
    }
    private static final int SEE_MASK_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_DEFAULT 0
     * }
     */
    public static int SEE_MASK_DEFAULT() {
        return SEE_MASK_DEFAULT;
    }
    private static final int SEE_MASK_CLASSNAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_CLASSNAME 1
     * }
     */
    public static int SEE_MASK_CLASSNAME() {
        return SEE_MASK_CLASSNAME;
    }
    private static final int SEE_MASK_CLASSKEY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_CLASSKEY 3
     * }
     */
    public static int SEE_MASK_CLASSKEY() {
        return SEE_MASK_CLASSKEY;
    }
    private static final int SEE_MASK_IDLIST = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_IDLIST 4
     * }
     */
    public static int SEE_MASK_IDLIST() {
        return SEE_MASK_IDLIST;
    }
    private static final int SEE_MASK_INVOKEIDLIST = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_INVOKEIDLIST 12
     * }
     */
    public static int SEE_MASK_INVOKEIDLIST() {
        return SEE_MASK_INVOKEIDLIST;
    }
    private static final int SEE_MASK_HOTKEY = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_HOTKEY 32
     * }
     */
    public static int SEE_MASK_HOTKEY() {
        return SEE_MASK_HOTKEY;
    }
    private static final int SEE_MASK_NOCLOSEPROCESS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_NOCLOSEPROCESS 64
     * }
     */
    public static int SEE_MASK_NOCLOSEPROCESS() {
        return SEE_MASK_NOCLOSEPROCESS;
    }
    private static final int SEE_MASK_CONNECTNETDRV = (int)128L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_CONNECTNETDRV 128
     * }
     */
    public static int SEE_MASK_CONNECTNETDRV() {
        return SEE_MASK_CONNECTNETDRV;
    }
    private static final int SEE_MASK_NOASYNC = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_NOASYNC 256
     * }
     */
    public static int SEE_MASK_NOASYNC() {
        return SEE_MASK_NOASYNC;
    }
    private static final int SEE_MASK_DOENVSUBST = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_DOENVSUBST 512
     * }
     */
    public static int SEE_MASK_DOENVSUBST() {
        return SEE_MASK_DOENVSUBST;
    }
    private static final int SEE_MASK_FLAG_NO_UI = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_FLAG_NO_UI 1024
     * }
     */
    public static int SEE_MASK_FLAG_NO_UI() {
        return SEE_MASK_FLAG_NO_UI;
    }
    private static final int SEE_MASK_UNICODE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_UNICODE 16384
     * }
     */
    public static int SEE_MASK_UNICODE() {
        return SEE_MASK_UNICODE;
    }
    private static final int SEE_MASK_NO_CONSOLE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_NO_CONSOLE 32768
     * }
     */
    public static int SEE_MASK_NO_CONSOLE() {
        return SEE_MASK_NO_CONSOLE;
    }
    private static final int SEE_MASK_ASYNCOK = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_ASYNCOK 1048576
     * }
     */
    public static int SEE_MASK_ASYNCOK() {
        return SEE_MASK_ASYNCOK;
    }
    private static final int SEE_MASK_HMONITOR = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_HMONITOR 2097152
     * }
     */
    public static int SEE_MASK_HMONITOR() {
        return SEE_MASK_HMONITOR;
    }
    private static final int SEE_MASK_NOZONECHECKS = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_NOZONECHECKS 8388608
     * }
     */
    public static int SEE_MASK_NOZONECHECKS() {
        return SEE_MASK_NOZONECHECKS;
    }
    private static final int SEE_MASK_NOQUERYCLASSSTORE = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_NOQUERYCLASSSTORE 16777216
     * }
     */
    public static int SEE_MASK_NOQUERYCLASSSTORE() {
        return SEE_MASK_NOQUERYCLASSSTORE;
    }
    private static final int SEE_MASK_WAITFORINPUTIDLE = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_WAITFORINPUTIDLE 33554432
     * }
     */
    public static int SEE_MASK_WAITFORINPUTIDLE() {
        return SEE_MASK_WAITFORINPUTIDLE;
    }
    private static final int SEE_MASK_FLAG_LOG_USAGE = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_FLAG_LOG_USAGE 67108864
     * }
     */
    public static int SEE_MASK_FLAG_LOG_USAGE() {
        return SEE_MASK_FLAG_LOG_USAGE;
    }
    private static final int SEE_MASK_FLAG_HINST_IS_SITE = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define SEE_MASK_FLAG_HINST_IS_SITE 134217728
     * }
     */
    public static int SEE_MASK_FLAG_HINST_IS_SITE() {
        return SEE_MASK_FLAG_HINST_IS_SITE;
    }
    private static final int SHERB_NOCONFIRMATION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SHERB_NOCONFIRMATION 1
     * }
     */
    public static int SHERB_NOCONFIRMATION() {
        return SHERB_NOCONFIRMATION;
    }
    private static final int SHERB_NOPROGRESSUI = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SHERB_NOPROGRESSUI 2
     * }
     */
    public static int SHERB_NOPROGRESSUI() {
        return SHERB_NOPROGRESSUI;
    }
    private static final int SHERB_NOSOUND = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SHERB_NOSOUND 4
     * }
     */
    public static int SHERB_NOSOUND() {
        return SHERB_NOSOUND;
    }
    private static final int NINF_KEY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NINF_KEY 1
     * }
     */
    public static int NINF_KEY() {
        return NINF_KEY;
    }
    private static final int NIM_ADD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NIM_ADD 0
     * }
     */
    public static int NIM_ADD() {
        return NIM_ADD;
    }
    private static final int NIM_MODIFY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NIM_MODIFY 1
     * }
     */
    public static int NIM_MODIFY() {
        return NIM_MODIFY;
    }
    private static final int NIM_DELETE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NIM_DELETE 2
     * }
     */
    public static int NIM_DELETE() {
        return NIM_DELETE;
    }
    private static final int NIM_SETFOCUS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NIM_SETFOCUS 3
     * }
     */
    public static int NIM_SETFOCUS() {
        return NIM_SETFOCUS;
    }
    private static final int NIM_SETVERSION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NIM_SETVERSION 4
     * }
     */
    public static int NIM_SETVERSION() {
        return NIM_SETVERSION;
    }
    private static final int NOTIFYICON_VERSION = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NOTIFYICON_VERSION 3
     * }
     */
    public static int NOTIFYICON_VERSION() {
        return NOTIFYICON_VERSION;
    }
    private static final int NOTIFYICON_VERSION_4 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NOTIFYICON_VERSION_4 4
     * }
     */
    public static int NOTIFYICON_VERSION_4() {
        return NOTIFYICON_VERSION_4;
    }
    private static final int NIF_MESSAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NIF_MESSAGE 1
     * }
     */
    public static int NIF_MESSAGE() {
        return NIF_MESSAGE;
    }
    private static final int NIF_ICON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NIF_ICON 2
     * }
     */
    public static int NIF_ICON() {
        return NIF_ICON;
    }
    private static final int NIF_TIP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NIF_TIP 4
     * }
     */
    public static int NIF_TIP() {
        return NIF_TIP;
    }
    private static final int NIF_STATE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NIF_STATE 8
     * }
     */
    public static int NIF_STATE() {
        return NIF_STATE;
    }
    private static final int NIF_INFO = (int)16L;
    /**
     * {@snippet lang=c :
     * #define NIF_INFO 16
     * }
     */
    public static int NIF_INFO() {
        return NIF_INFO;
    }
    private static final int NIF_GUID = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NIF_GUID 32
     * }
     */
    public static int NIF_GUID() {
        return NIF_GUID;
    }
    private static final int NIF_REALTIME = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NIF_REALTIME 64
     * }
     */
    public static int NIF_REALTIME() {
        return NIF_REALTIME;
    }
    private static final int NIF_SHOWTIP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define NIF_SHOWTIP 128
     * }
     */
    public static int NIF_SHOWTIP() {
        return NIF_SHOWTIP;
    }
    private static final int NIS_HIDDEN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NIS_HIDDEN 1
     * }
     */
    public static int NIS_HIDDEN() {
        return NIS_HIDDEN;
    }
    private static final int NIS_SHAREDICON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NIS_SHAREDICON 2
     * }
     */
    public static int NIS_SHAREDICON() {
        return NIS_SHAREDICON;
    }
    private static final int NIIF_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NIIF_NONE 0
     * }
     */
    public static int NIIF_NONE() {
        return NIIF_NONE;
    }
    private static final int NIIF_INFO = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NIIF_INFO 1
     * }
     */
    public static int NIIF_INFO() {
        return NIIF_INFO;
    }
    private static final int NIIF_WARNING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NIIF_WARNING 2
     * }
     */
    public static int NIIF_WARNING() {
        return NIIF_WARNING;
    }
    private static final int NIIF_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NIIF_ERROR 3
     * }
     */
    public static int NIIF_ERROR() {
        return NIIF_ERROR;
    }
    private static final int NIIF_USER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NIIF_USER 4
     * }
     */
    public static int NIIF_USER() {
        return NIIF_USER;
    }
    private static final int NIIF_ICON_MASK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define NIIF_ICON_MASK 15
     * }
     */
    public static int NIIF_ICON_MASK() {
        return NIIF_ICON_MASK;
    }
    private static final int NIIF_NOSOUND = (int)16L;
    /**
     * {@snippet lang=c :
     * #define NIIF_NOSOUND 16
     * }
     */
    public static int NIIF_NOSOUND() {
        return NIIF_NOSOUND;
    }
    private static final int NIIF_LARGE_ICON = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NIIF_LARGE_ICON 32
     * }
     */
    public static int NIIF_LARGE_ICON() {
        return NIIF_LARGE_ICON;
    }
    private static final int NIIF_RESPECT_QUIET_TIME = (int)128L;
    /**
     * {@snippet lang=c :
     * #define NIIF_RESPECT_QUIET_TIME 128
     * }
     */
    public static int NIIF_RESPECT_QUIET_TIME() {
        return NIIF_RESPECT_QUIET_TIME;
    }
    private static final int SHGFI_ICON = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_ICON 256
     * }
     */
    public static int SHGFI_ICON() {
        return SHGFI_ICON;
    }
    private static final int SHGFI_DISPLAYNAME = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_DISPLAYNAME 512
     * }
     */
    public static int SHGFI_DISPLAYNAME() {
        return SHGFI_DISPLAYNAME;
    }
    private static final int SHGFI_TYPENAME = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_TYPENAME 1024
     * }
     */
    public static int SHGFI_TYPENAME() {
        return SHGFI_TYPENAME;
    }
    private static final int SHGFI_ATTRIBUTES = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_ATTRIBUTES 2048
     * }
     */
    public static int SHGFI_ATTRIBUTES() {
        return SHGFI_ATTRIBUTES;
    }
    private static final int SHGFI_ICONLOCATION = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_ICONLOCATION 4096
     * }
     */
    public static int SHGFI_ICONLOCATION() {
        return SHGFI_ICONLOCATION;
    }
    private static final int SHGFI_EXETYPE = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_EXETYPE 8192
     * }
     */
    public static int SHGFI_EXETYPE() {
        return SHGFI_EXETYPE;
    }
    private static final int SHGFI_SYSICONINDEX = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_SYSICONINDEX 16384
     * }
     */
    public static int SHGFI_SYSICONINDEX() {
        return SHGFI_SYSICONINDEX;
    }
    private static final int SHGFI_LINKOVERLAY = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_LINKOVERLAY 32768
     * }
     */
    public static int SHGFI_LINKOVERLAY() {
        return SHGFI_LINKOVERLAY;
    }
    private static final int SHGFI_SELECTED = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_SELECTED 65536
     * }
     */
    public static int SHGFI_SELECTED() {
        return SHGFI_SELECTED;
    }
    private static final int SHGFI_ATTR_SPECIFIED = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_ATTR_SPECIFIED 131072
     * }
     */
    public static int SHGFI_ATTR_SPECIFIED() {
        return SHGFI_ATTR_SPECIFIED;
    }
    private static final int SHGFI_LARGEICON = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_LARGEICON 0
     * }
     */
    public static int SHGFI_LARGEICON() {
        return SHGFI_LARGEICON;
    }
    private static final int SHGFI_SMALLICON = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_SMALLICON 1
     * }
     */
    public static int SHGFI_SMALLICON() {
        return SHGFI_SMALLICON;
    }
    private static final int SHGFI_OPENICON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_OPENICON 2
     * }
     */
    public static int SHGFI_OPENICON() {
        return SHGFI_OPENICON;
    }
    private static final int SHGFI_SHELLICONSIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_SHELLICONSIZE 4
     * }
     */
    public static int SHGFI_SHELLICONSIZE() {
        return SHGFI_SHELLICONSIZE;
    }
    private static final int SHGFI_PIDL = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_PIDL 8
     * }
     */
    public static int SHGFI_PIDL() {
        return SHGFI_PIDL;
    }
    private static final int SHGFI_USEFILEATTRIBUTES = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_USEFILEATTRIBUTES 16
     * }
     */
    public static int SHGFI_USEFILEATTRIBUTES() {
        return SHGFI_USEFILEATTRIBUTES;
    }
    private static final int SHGFI_ADDOVERLAYS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_ADDOVERLAYS 32
     * }
     */
    public static int SHGFI_ADDOVERLAYS() {
        return SHGFI_ADDOVERLAYS;
    }
    private static final int SHGFI_OVERLAYINDEX = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SHGFI_OVERLAYINDEX 64
     * }
     */
    public static int SHGFI_OVERLAYINDEX() {
        return SHGFI_OVERLAYINDEX;
    }
    private static final int SHGSI_ICONLOCATION = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SHGSI_ICONLOCATION 0
     * }
     */
    public static int SHGSI_ICONLOCATION() {
        return SHGSI_ICONLOCATION;
    }
    private static final int SHGNLI_PIDL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_PIDL 1
     * }
     */
    public static int SHGNLI_PIDL() {
        return SHGNLI_PIDL;
    }
    private static final int SHGNLI_PREFIXNAME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_PREFIXNAME 2
     * }
     */
    public static int SHGNLI_PREFIXNAME() {
        return SHGNLI_PREFIXNAME;
    }
    private static final int SHGNLI_NOUNIQUE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_NOUNIQUE 4
     * }
     */
    public static int SHGNLI_NOUNIQUE() {
        return SHGNLI_NOUNIQUE;
    }
    private static final int SHGNLI_NOLNK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_NOLNK 8
     * }
     */
    public static int SHGNLI_NOLNK() {
        return SHGNLI_NOLNK;
    }
    private static final int SHGNLI_NOLOCNAME = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_NOLOCNAME 16
     * }
     */
    public static int SHGNLI_NOLOCNAME() {
        return SHGNLI_NOLOCNAME;
    }
    private static final int SHGNLI_USEURLEXT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SHGNLI_USEURLEXT 32
     * }
     */
    public static int SHGNLI_USEURLEXT() {
        return SHGNLI_USEURLEXT;
    }
    private static final int PRINTACTION_OPEN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_OPEN 0
     * }
     */
    public static int PRINTACTION_OPEN() {
        return PRINTACTION_OPEN;
    }
    private static final int PRINTACTION_PROPERTIES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_PROPERTIES 1
     * }
     */
    public static int PRINTACTION_PROPERTIES() {
        return PRINTACTION_PROPERTIES;
    }
    private static final int PRINTACTION_NETINSTALL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_NETINSTALL 2
     * }
     */
    public static int PRINTACTION_NETINSTALL() {
        return PRINTACTION_NETINSTALL;
    }
    private static final int PRINTACTION_NETINSTALLLINK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_NETINSTALLLINK 3
     * }
     */
    public static int PRINTACTION_NETINSTALLLINK() {
        return PRINTACTION_NETINSTALLLINK;
    }
    private static final int PRINTACTION_TESTPAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_TESTPAGE 4
     * }
     */
    public static int PRINTACTION_TESTPAGE() {
        return PRINTACTION_TESTPAGE;
    }
    private static final int PRINTACTION_OPENNETPRN = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_OPENNETPRN 5
     * }
     */
    public static int PRINTACTION_OPENNETPRN() {
        return PRINTACTION_OPENNETPRN;
    }
    private static final int PRINTACTION_DOCUMENTDEFAULTS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_DOCUMENTDEFAULTS 6
     * }
     */
    public static int PRINTACTION_DOCUMENTDEFAULTS() {
        return PRINTACTION_DOCUMENTDEFAULTS;
    }
    private static final int PRINTACTION_SERVERPROPERTIES = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PRINTACTION_SERVERPROPERTIES 7
     * }
     */
    public static int PRINTACTION_SERVERPROPERTIES() {
        return PRINTACTION_SERVERPROPERTIES;
    }
    private static final int PRINT_PROP_FORCE_NAME = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PRINT_PROP_FORCE_NAME 1
     * }
     */
    public static int PRINT_PROP_FORCE_NAME() {
        return PRINT_PROP_FORCE_NAME;
    }
    private static final int OFFLINE_STATUS_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OFFLINE_STATUS_LOCAL 1
     * }
     */
    public static int OFFLINE_STATUS_LOCAL() {
        return OFFLINE_STATUS_LOCAL;
    }
    private static final int OFFLINE_STATUS_REMOTE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define OFFLINE_STATUS_REMOTE 2
     * }
     */
    public static int OFFLINE_STATUS_REMOTE() {
        return OFFLINE_STATUS_REMOTE;
    }
    private static final int OFFLINE_STATUS_INCOMPLETE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define OFFLINE_STATUS_INCOMPLETE 4
     * }
     */
    public static int OFFLINE_STATUS_INCOMPLETE() {
        return OFFLINE_STATUS_INCOMPLETE;
    }
    private static final int SHIL_LARGE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SHIL_LARGE 0
     * }
     */
    public static int SHIL_LARGE() {
        return SHIL_LARGE;
    }
    private static final int SHIL_SMALL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SHIL_SMALL 1
     * }
     */
    public static int SHIL_SMALL() {
        return SHIL_SMALL;
    }
    private static final int SHIL_EXTRALARGE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SHIL_EXTRALARGE 2
     * }
     */
    public static int SHIL_EXTRALARGE() {
        return SHIL_EXTRALARGE;
    }
    private static final int SHIL_SYSSMALL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SHIL_SYSSMALL 3
     * }
     */
    public static int SHIL_SYSSMALL() {
        return SHIL_SYSSMALL;
    }
    private static final int SHIL_JUMBO = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SHIL_JUMBO 4
     * }
     */
    public static int SHIL_JUMBO() {
        return SHIL_JUMBO;
    }
    private static final int PERF_DATA_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PERF_DATA_VERSION 1
     * }
     */
    public static int PERF_DATA_VERSION() {
        return PERF_DATA_VERSION;
    }
    private static final int PERF_DATA_REVISION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PERF_DATA_REVISION 1
     * }
     */
    public static int PERF_DATA_REVISION() {
        return PERF_DATA_REVISION;
    }
    private static final int PERF_SIZE_DWORD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_SIZE_DWORD 0
     * }
     */
    public static int PERF_SIZE_DWORD() {
        return PERF_SIZE_DWORD;
    }
    private static final int PERF_SIZE_LARGE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define PERF_SIZE_LARGE 256
     * }
     */
    public static int PERF_SIZE_LARGE() {
        return PERF_SIZE_LARGE;
    }
    private static final int PERF_SIZE_ZERO = (int)512L;
    /**
     * {@snippet lang=c :
     * #define PERF_SIZE_ZERO 512
     * }
     */
    public static int PERF_SIZE_ZERO() {
        return PERF_SIZE_ZERO;
    }
    private static final int PERF_SIZE_VARIABLE_LEN = (int)768L;
    /**
     * {@snippet lang=c :
     * #define PERF_SIZE_VARIABLE_LEN 768
     * }
     */
    public static int PERF_SIZE_VARIABLE_LEN() {
        return PERF_SIZE_VARIABLE_LEN;
    }
    private static final int PERF_TYPE_NUMBER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_TYPE_NUMBER 0
     * }
     */
    public static int PERF_TYPE_NUMBER() {
        return PERF_TYPE_NUMBER;
    }
    private static final int PERF_TYPE_COUNTER = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define PERF_TYPE_COUNTER 1024
     * }
     */
    public static int PERF_TYPE_COUNTER() {
        return PERF_TYPE_COUNTER;
    }
    private static final int PERF_TYPE_TEXT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define PERF_TYPE_TEXT 2048
     * }
     */
    public static int PERF_TYPE_TEXT() {
        return PERF_TYPE_TEXT;
    }
    private static final int PERF_TYPE_ZERO = (int)3072L;
    /**
     * {@snippet lang=c :
     * #define PERF_TYPE_ZERO 3072
     * }
     */
    public static int PERF_TYPE_ZERO() {
        return PERF_TYPE_ZERO;
    }
    private static final int PERF_NUMBER_HEX = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_NUMBER_HEX 0
     * }
     */
    public static int PERF_NUMBER_HEX() {
        return PERF_NUMBER_HEX;
    }
    private static final int PERF_NUMBER_DECIMAL = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define PERF_NUMBER_DECIMAL 65536
     * }
     */
    public static int PERF_NUMBER_DECIMAL() {
        return PERF_NUMBER_DECIMAL;
    }
    private static final int PERF_NUMBER_DEC_1000 = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define PERF_NUMBER_DEC_1000 131072
     * }
     */
    public static int PERF_NUMBER_DEC_1000() {
        return PERF_NUMBER_DEC_1000;
    }
    private static final int PERF_COUNTER_VALUE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_VALUE 0
     * }
     */
    public static int PERF_COUNTER_VALUE() {
        return PERF_COUNTER_VALUE;
    }
    private static final int PERF_COUNTER_RATE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_RATE 65536
     * }
     */
    public static int PERF_COUNTER_RATE() {
        return PERF_COUNTER_RATE;
    }
    private static final int PERF_COUNTER_FRACTION = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_FRACTION 131072
     * }
     */
    public static int PERF_COUNTER_FRACTION() {
        return PERF_COUNTER_FRACTION;
    }
    private static final int PERF_COUNTER_BASE = (int)196608L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_BASE 196608
     * }
     */
    public static int PERF_COUNTER_BASE() {
        return PERF_COUNTER_BASE;
    }
    private static final int PERF_COUNTER_ELAPSED = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_ELAPSED 262144
     * }
     */
    public static int PERF_COUNTER_ELAPSED() {
        return PERF_COUNTER_ELAPSED;
    }
    private static final int PERF_COUNTER_QUEUELEN = (int)327680L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_QUEUELEN 327680
     * }
     */
    public static int PERF_COUNTER_QUEUELEN() {
        return PERF_COUNTER_QUEUELEN;
    }
    private static final int PERF_COUNTER_HISTOGRAM = (int)393216L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_HISTOGRAM 393216
     * }
     */
    public static int PERF_COUNTER_HISTOGRAM() {
        return PERF_COUNTER_HISTOGRAM;
    }
    private static final int PERF_COUNTER_PRECISION = (int)458752L;
    /**
     * {@snippet lang=c :
     * #define PERF_COUNTER_PRECISION 458752
     * }
     */
    public static int PERF_COUNTER_PRECISION() {
        return PERF_COUNTER_PRECISION;
    }
    private static final int PERF_TEXT_UNICODE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_TEXT_UNICODE 0
     * }
     */
    public static int PERF_TEXT_UNICODE() {
        return PERF_TEXT_UNICODE;
    }
    private static final int PERF_TEXT_ASCII = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define PERF_TEXT_ASCII 65536
     * }
     */
    public static int PERF_TEXT_ASCII() {
        return PERF_TEXT_ASCII;
    }
    private static final int PERF_TIMER_TICK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_TIMER_TICK 0
     * }
     */
    public static int PERF_TIMER_TICK() {
        return PERF_TIMER_TICK;
    }
    private static final int PERF_TIMER_100NS = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define PERF_TIMER_100NS 1048576
     * }
     */
    public static int PERF_TIMER_100NS() {
        return PERF_TIMER_100NS;
    }
    private static final int PERF_OBJECT_TIMER = (int)2097152L;
    /**
     * {@snippet lang=c :
     * #define PERF_OBJECT_TIMER 2097152
     * }
     */
    public static int PERF_OBJECT_TIMER() {
        return PERF_OBJECT_TIMER;
    }
    private static final int PERF_DELTA_COUNTER = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define PERF_DELTA_COUNTER 4194304
     * }
     */
    public static int PERF_DELTA_COUNTER() {
        return PERF_DELTA_COUNTER;
    }
    private static final int PERF_DELTA_BASE = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define PERF_DELTA_BASE 8388608
     * }
     */
    public static int PERF_DELTA_BASE() {
        return PERF_DELTA_BASE;
    }
    private static final int PERF_INVERSE_COUNTER = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define PERF_INVERSE_COUNTER 16777216
     * }
     */
    public static int PERF_INVERSE_COUNTER() {
        return PERF_INVERSE_COUNTER;
    }
    private static final int PERF_MULTI_COUNTER = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define PERF_MULTI_COUNTER 33554432
     * }
     */
    public static int PERF_MULTI_COUNTER() {
        return PERF_MULTI_COUNTER;
    }
    private static final int PERF_DISPLAY_NO_SUFFIX = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PERF_DISPLAY_NO_SUFFIX 0
     * }
     */
    public static int PERF_DISPLAY_NO_SUFFIX() {
        return PERF_DISPLAY_NO_SUFFIX;
    }
    private static final int PERF_DISPLAY_PER_SEC = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define PERF_DISPLAY_PER_SEC 268435456
     * }
     */
    public static int PERF_DISPLAY_PER_SEC() {
        return PERF_DISPLAY_PER_SEC;
    }
    private static final int PERF_DISPLAY_PERCENT = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define PERF_DISPLAY_PERCENT 536870912
     * }
     */
    public static int PERF_DISPLAY_PERCENT() {
        return PERF_DISPLAY_PERCENT;
    }
    private static final int PERF_DISPLAY_SECONDS = (int)805306368L;
    /**
     * {@snippet lang=c :
     * #define PERF_DISPLAY_SECONDS 805306368
     * }
     */
    public static int PERF_DISPLAY_SECONDS() {
        return PERF_DISPLAY_SECONDS;
    }
    private static final int PERF_DISPLAY_NOSHOW = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define PERF_DISPLAY_NOSHOW 1073741824
     * }
     */
    public static int PERF_DISPLAY_NOSHOW() {
        return PERF_DISPLAY_NOSHOW;
    }
    private static final int PERF_DETAIL_NOVICE = (int)100L;
    /**
     * {@snippet lang=c :
     * #define PERF_DETAIL_NOVICE 100
     * }
     */
    public static int PERF_DETAIL_NOVICE() {
        return PERF_DETAIL_NOVICE;
    }
    private static final int PERF_DETAIL_ADVANCED = (int)200L;
    /**
     * {@snippet lang=c :
     * #define PERF_DETAIL_ADVANCED 200
     * }
     */
    public static int PERF_DETAIL_ADVANCED() {
        return PERF_DETAIL_ADVANCED;
    }
    private static final int PERF_DETAIL_EXPERT = (int)300L;
    /**
     * {@snippet lang=c :
     * #define PERF_DETAIL_EXPERT 300
     * }
     */
    public static int PERF_DETAIL_EXPERT() {
        return PERF_DETAIL_EXPERT;
    }
    private static final int PERF_DETAIL_WIZARD = (int)400L;
    /**
     * {@snippet lang=c :
     * #define PERF_DETAIL_WIZARD 400
     * }
     */
    public static int PERF_DETAIL_WIZARD() {
        return PERF_DETAIL_WIZARD;
    }
    private static final int WINPERF_LOG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINPERF_LOG_NONE 0
     * }
     */
    public static int WINPERF_LOG_NONE() {
        return WINPERF_LOG_NONE;
    }
    private static final int WINPERF_LOG_USER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINPERF_LOG_USER 1
     * }
     */
    public static int WINPERF_LOG_USER() {
        return WINPERF_LOG_USER;
    }
    private static final int WINPERF_LOG_DEBUG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WINPERF_LOG_DEBUG 2
     * }
     */
    public static int WINPERF_LOG_DEBUG() {
        return WINPERF_LOG_DEBUG;
    }
    private static final int WINPERF_LOG_VERBOSE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define WINPERF_LOG_VERBOSE 3
     * }
     */
    public static int WINPERF_LOG_VERBOSE() {
        return WINPERF_LOG_VERBOSE;
    }
    private static final int FD_SETSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FD_SETSIZE 64
     * }
     */
    public static int FD_SETSIZE() {
        return FD_SETSIZE;
    }
    private static final int IOCPARM_MASK = (int)127L;
    /**
     * {@snippet lang=c :
     * #define IOCPARM_MASK 127
     * }
     */
    public static int IOCPARM_MASK() {
        return IOCPARM_MASK;
    }
    private static final int IOC_VOID = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define IOC_VOID 536870912
     * }
     */
    public static int IOC_VOID() {
        return IOC_VOID;
    }
    private static final int IOC_OUT = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define IOC_OUT 1073741824
     * }
     */
    public static int IOC_OUT() {
        return IOC_OUT;
    }
    private static final int IPPROTO_IP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IP 0
     * }
     */
    public static int IPPROTO_IP() {
        return IPPROTO_IP;
    }
    private static final int IPPROTO_ICMP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ICMP 1
     * }
     */
    public static int IPPROTO_ICMP() {
        return IPPROTO_ICMP;
    }
    private static final int IPPROTO_IGMP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IGMP 2
     * }
     */
    public static int IPPROTO_IGMP() {
        return IPPROTO_IGMP;
    }
    private static final int IPPROTO_GGP = (int)3L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_GGP 3
     * }
     */
    public static int IPPROTO_GGP() {
        return IPPROTO_GGP;
    }
    private static final int IPPROTO_TCP = (int)6L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_TCP 6
     * }
     */
    public static int IPPROTO_TCP() {
        return IPPROTO_TCP;
    }
    private static final int IPPROTO_PUP = (int)12L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_PUP 12
     * }
     */
    public static int IPPROTO_PUP() {
        return IPPROTO_PUP;
    }
    private static final int IPPROTO_UDP = (int)17L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_UDP 17
     * }
     */
    public static int IPPROTO_UDP() {
        return IPPROTO_UDP;
    }
    private static final int IPPROTO_IDP = (int)22L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_IDP 22
     * }
     */
    public static int IPPROTO_IDP() {
        return IPPROTO_IDP;
    }
    private static final int IPPROTO_ND = (int)77L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_ND 77
     * }
     */
    public static int IPPROTO_ND() {
        return IPPROTO_ND;
    }
    private static final int IPPROTO_RAW = (int)255L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_RAW 255
     * }
     */
    public static int IPPROTO_RAW() {
        return IPPROTO_RAW;
    }
    private static final int IPPROTO_MAX = (int)256L;
    /**
     * {@snippet lang=c :
     * #define IPPROTO_MAX 256
     * }
     */
    public static int IPPROTO_MAX() {
        return IPPROTO_MAX;
    }
    private static final int IPPORT_ECHO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_ECHO 7
     * }
     */
    public static int IPPORT_ECHO() {
        return IPPORT_ECHO;
    }
    private static final int IPPORT_DISCARD = (int)9L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_DISCARD 9
     * }
     */
    public static int IPPORT_DISCARD() {
        return IPPORT_DISCARD;
    }
    private static final int IPPORT_SYSTAT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_SYSTAT 11
     * }
     */
    public static int IPPORT_SYSTAT() {
        return IPPORT_SYSTAT;
    }
    private static final int IPPORT_DAYTIME = (int)13L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_DAYTIME 13
     * }
     */
    public static int IPPORT_DAYTIME() {
        return IPPORT_DAYTIME;
    }
    private static final int IPPORT_NETSTAT = (int)15L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_NETSTAT 15
     * }
     */
    public static int IPPORT_NETSTAT() {
        return IPPORT_NETSTAT;
    }
    private static final int IPPORT_FTP = (int)21L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_FTP 21
     * }
     */
    public static int IPPORT_FTP() {
        return IPPORT_FTP;
    }
    private static final int IPPORT_TELNET = (int)23L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_TELNET 23
     * }
     */
    public static int IPPORT_TELNET() {
        return IPPORT_TELNET;
    }
    private static final int IPPORT_SMTP = (int)25L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_SMTP 25
     * }
     */
    public static int IPPORT_SMTP() {
        return IPPORT_SMTP;
    }
    private static final int IPPORT_TIMESERVER = (int)37L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_TIMESERVER 37
     * }
     */
    public static int IPPORT_TIMESERVER() {
        return IPPORT_TIMESERVER;
    }
    private static final int IPPORT_NAMESERVER = (int)42L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_NAMESERVER 42
     * }
     */
    public static int IPPORT_NAMESERVER() {
        return IPPORT_NAMESERVER;
    }
    private static final int IPPORT_WHOIS = (int)43L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_WHOIS 43
     * }
     */
    public static int IPPORT_WHOIS() {
        return IPPORT_WHOIS;
    }
    private static final int IPPORT_MTP = (int)57L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_MTP 57
     * }
     */
    public static int IPPORT_MTP() {
        return IPPORT_MTP;
    }
    private static final int IPPORT_TFTP = (int)69L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_TFTP 69
     * }
     */
    public static int IPPORT_TFTP() {
        return IPPORT_TFTP;
    }
    private static final int IPPORT_RJE = (int)77L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_RJE 77
     * }
     */
    public static int IPPORT_RJE() {
        return IPPORT_RJE;
    }
    private static final int IPPORT_FINGER = (int)79L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_FINGER 79
     * }
     */
    public static int IPPORT_FINGER() {
        return IPPORT_FINGER;
    }
    private static final int IPPORT_TTYLINK = (int)87L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_TTYLINK 87
     * }
     */
    public static int IPPORT_TTYLINK() {
        return IPPORT_TTYLINK;
    }
    private static final int IPPORT_SUPDUP = (int)95L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_SUPDUP 95
     * }
     */
    public static int IPPORT_SUPDUP() {
        return IPPORT_SUPDUP;
    }
    private static final int IPPORT_EXECSERVER = (int)512L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_EXECSERVER 512
     * }
     */
    public static int IPPORT_EXECSERVER() {
        return IPPORT_EXECSERVER;
    }
    private static final int IPPORT_LOGINSERVER = (int)513L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_LOGINSERVER 513
     * }
     */
    public static int IPPORT_LOGINSERVER() {
        return IPPORT_LOGINSERVER;
    }
    private static final int IPPORT_CMDSERVER = (int)514L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_CMDSERVER 514
     * }
     */
    public static int IPPORT_CMDSERVER() {
        return IPPORT_CMDSERVER;
    }
    private static final int IPPORT_EFSSERVER = (int)520L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_EFSSERVER 520
     * }
     */
    public static int IPPORT_EFSSERVER() {
        return IPPORT_EFSSERVER;
    }
    private static final int IPPORT_BIFFUDP = (int)512L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_BIFFUDP 512
     * }
     */
    public static int IPPORT_BIFFUDP() {
        return IPPORT_BIFFUDP;
    }
    private static final int IPPORT_WHOSERVER = (int)513L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_WHOSERVER 513
     * }
     */
    public static int IPPORT_WHOSERVER() {
        return IPPORT_WHOSERVER;
    }
    private static final int IPPORT_ROUTESERVER = (int)520L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_ROUTESERVER 520
     * }
     */
    public static int IPPORT_ROUTESERVER() {
        return IPPORT_ROUTESERVER;
    }
    private static final int IPPORT_RESERVED = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define IPPORT_RESERVED 1024
     * }
     */
    public static int IPPORT_RESERVED() {
        return IPPORT_RESERVED;
    }
    private static final int IMPLINK_IP = (int)155L;
    /**
     * {@snippet lang=c :
     * #define IMPLINK_IP 155
     * }
     */
    public static int IMPLINK_IP() {
        return IMPLINK_IP;
    }
    private static final int IMPLINK_LOWEXPER = (int)156L;
    /**
     * {@snippet lang=c :
     * #define IMPLINK_LOWEXPER 156
     * }
     */
    public static int IMPLINK_LOWEXPER() {
        return IMPLINK_LOWEXPER;
    }
    private static final int IMPLINK_HIGHEXPER = (int)158L;
    /**
     * {@snippet lang=c :
     * #define IMPLINK_HIGHEXPER 158
     * }
     */
    public static int IMPLINK_HIGHEXPER() {
        return IMPLINK_HIGHEXPER;
    }
    private static final int IN_CLASSA_NSHIFT = (int)24L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_NSHIFT 24
     * }
     */
    public static int IN_CLASSA_NSHIFT() {
        return IN_CLASSA_NSHIFT;
    }
    private static final int IN_CLASSA_HOST = (int)16777215L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_HOST 16777215
     * }
     */
    public static int IN_CLASSA_HOST() {
        return IN_CLASSA_HOST;
    }
    private static final int IN_CLASSA_MAX = (int)128L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSA_MAX 128
     * }
     */
    public static int IN_CLASSA_MAX() {
        return IN_CLASSA_MAX;
    }
    private static final int IN_CLASSB_NSHIFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_NSHIFT 16
     * }
     */
    public static int IN_CLASSB_NSHIFT() {
        return IN_CLASSB_NSHIFT;
    }
    private static final int IN_CLASSB_HOST = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_HOST 65535
     * }
     */
    public static int IN_CLASSB_HOST() {
        return IN_CLASSB_HOST;
    }
    private static final int IN_CLASSB_MAX = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSB_MAX 65536
     * }
     */
    public static int IN_CLASSB_MAX() {
        return IN_CLASSB_MAX;
    }
    private static final int IN_CLASSC_NSHIFT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_NSHIFT 8
     * }
     */
    public static int IN_CLASSC_NSHIFT() {
        return IN_CLASSC_NSHIFT;
    }
    private static final int IN_CLASSC_HOST = (int)255L;
    /**
     * {@snippet lang=c :
     * #define IN_CLASSC_HOST 255
     * }
     */
    public static int IN_CLASSC_HOST() {
        return IN_CLASSC_HOST;
    }
    private static final int INADDR_LOOPBACK = (int)2130706433L;
    /**
     * {@snippet lang=c :
     * #define INADDR_LOOPBACK 2130706433
     * }
     */
    public static int INADDR_LOOPBACK() {
        return INADDR_LOOPBACK;
    }
    private static final int WSADESCRIPTION_LEN = (int)256L;
    /**
     * {@snippet lang=c :
     * #define WSADESCRIPTION_LEN 256
     * }
     */
    public static int WSADESCRIPTION_LEN() {
        return WSADESCRIPTION_LEN;
    }
    private static final int WSASYS_STATUS_LEN = (int)128L;
    /**
     * {@snippet lang=c :
     * #define WSASYS_STATUS_LEN 128
     * }
     */
    public static int WSASYS_STATUS_LEN() {
        return WSASYS_STATUS_LEN;
    }
    private static final int IP_OPTIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IP_OPTIONS 1
     * }
     */
    public static int IP_OPTIONS() {
        return IP_OPTIONS;
    }
    private static final int IP_MULTICAST_IF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_IF 2
     * }
     */
    public static int IP_MULTICAST_IF() {
        return IP_MULTICAST_IF;
    }
    private static final int IP_MULTICAST_TTL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_TTL 3
     * }
     */
    public static int IP_MULTICAST_TTL() {
        return IP_MULTICAST_TTL;
    }
    private static final int IP_MULTICAST_LOOP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define IP_MULTICAST_LOOP 4
     * }
     */
    public static int IP_MULTICAST_LOOP() {
        return IP_MULTICAST_LOOP;
    }
    private static final int IP_ADD_MEMBERSHIP = (int)5L;
    /**
     * {@snippet lang=c :
     * #define IP_ADD_MEMBERSHIP 5
     * }
     */
    public static int IP_ADD_MEMBERSHIP() {
        return IP_ADD_MEMBERSHIP;
    }
    private static final int IP_DROP_MEMBERSHIP = (int)6L;
    /**
     * {@snippet lang=c :
     * #define IP_DROP_MEMBERSHIP 6
     * }
     */
    public static int IP_DROP_MEMBERSHIP() {
        return IP_DROP_MEMBERSHIP;
    }
    private static final int IP_TTL = (int)7L;
    /**
     * {@snippet lang=c :
     * #define IP_TTL 7
     * }
     */
    public static int IP_TTL() {
        return IP_TTL;
    }
    private static final int IP_TOS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define IP_TOS 8
     * }
     */
    public static int IP_TOS() {
        return IP_TOS;
    }
    private static final int IP_DONTFRAGMENT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define IP_DONTFRAGMENT 9
     * }
     */
    public static int IP_DONTFRAGMENT() {
        return IP_DONTFRAGMENT;
    }
    private static final int IP_DEFAULT_MULTICAST_TTL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_TTL 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_TTL() {
        return IP_DEFAULT_MULTICAST_TTL;
    }
    private static final int IP_DEFAULT_MULTICAST_LOOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IP_DEFAULT_MULTICAST_LOOP 1
     * }
     */
    public static int IP_DEFAULT_MULTICAST_LOOP() {
        return IP_DEFAULT_MULTICAST_LOOP;
    }
    private static final int IP_MAX_MEMBERSHIPS = (int)20L;
    /**
     * {@snippet lang=c :
     * #define IP_MAX_MEMBERSHIPS 20
     * }
     */
    public static int IP_MAX_MEMBERSHIPS() {
        return IP_MAX_MEMBERSHIPS;
    }
    private static final int SOCK_STREAM = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SOCK_STREAM 1
     * }
     */
    public static int SOCK_STREAM() {
        return SOCK_STREAM;
    }
    private static final int SOCK_DGRAM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SOCK_DGRAM 2
     * }
     */
    public static int SOCK_DGRAM() {
        return SOCK_DGRAM;
    }
    private static final int SOCK_RAW = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SOCK_RAW 3
     * }
     */
    public static int SOCK_RAW() {
        return SOCK_RAW;
    }
    private static final int SOCK_RDM = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SOCK_RDM 4
     * }
     */
    public static int SOCK_RDM() {
        return SOCK_RDM;
    }
    private static final int SOCK_SEQPACKET = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SOCK_SEQPACKET 5
     * }
     */
    public static int SOCK_SEQPACKET() {
        return SOCK_SEQPACKET;
    }
    private static final int SO_DEBUG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SO_DEBUG 1
     * }
     */
    public static int SO_DEBUG() {
        return SO_DEBUG;
    }
    private static final int SO_ACCEPTCONN = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SO_ACCEPTCONN 2
     * }
     */
    public static int SO_ACCEPTCONN() {
        return SO_ACCEPTCONN;
    }
    private static final int SO_REUSEADDR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SO_REUSEADDR 4
     * }
     */
    public static int SO_REUSEADDR() {
        return SO_REUSEADDR;
    }
    private static final int SO_KEEPALIVE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SO_KEEPALIVE 8
     * }
     */
    public static int SO_KEEPALIVE() {
        return SO_KEEPALIVE;
    }
    private static final int SO_DONTROUTE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SO_DONTROUTE 16
     * }
     */
    public static int SO_DONTROUTE() {
        return SO_DONTROUTE;
    }
    private static final int SO_BROADCAST = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SO_BROADCAST 32
     * }
     */
    public static int SO_BROADCAST() {
        return SO_BROADCAST;
    }
    private static final int SO_USELOOPBACK = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SO_USELOOPBACK 64
     * }
     */
    public static int SO_USELOOPBACK() {
        return SO_USELOOPBACK;
    }
    private static final int SO_LINGER = (int)128L;
    /**
     * {@snippet lang=c :
     * #define SO_LINGER 128
     * }
     */
    public static int SO_LINGER() {
        return SO_LINGER;
    }
    private static final int SO_OOBINLINE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SO_OOBINLINE 256
     * }
     */
    public static int SO_OOBINLINE() {
        return SO_OOBINLINE;
    }
    private static final int SO_SNDBUF = (int)4097L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDBUF 4097
     * }
     */
    public static int SO_SNDBUF() {
        return SO_SNDBUF;
    }
    private static final int SO_RCVBUF = (int)4098L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVBUF 4098
     * }
     */
    public static int SO_RCVBUF() {
        return SO_RCVBUF;
    }
    private static final int SO_SNDLOWAT = (int)4099L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDLOWAT 4099
     * }
     */
    public static int SO_SNDLOWAT() {
        return SO_SNDLOWAT;
    }
    private static final int SO_RCVLOWAT = (int)4100L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVLOWAT 4100
     * }
     */
    public static int SO_RCVLOWAT() {
        return SO_RCVLOWAT;
    }
    private static final int SO_SNDTIMEO = (int)4101L;
    /**
     * {@snippet lang=c :
     * #define SO_SNDTIMEO 4101
     * }
     */
    public static int SO_SNDTIMEO() {
        return SO_SNDTIMEO;
    }
    private static final int SO_RCVTIMEO = (int)4102L;
    /**
     * {@snippet lang=c :
     * #define SO_RCVTIMEO 4102
     * }
     */
    public static int SO_RCVTIMEO() {
        return SO_RCVTIMEO;
    }
    private static final int SO_ERROR = (int)4103L;
    /**
     * {@snippet lang=c :
     * #define SO_ERROR 4103
     * }
     */
    public static int SO_ERROR() {
        return SO_ERROR;
    }
    private static final int SO_TYPE = (int)4104L;
    /**
     * {@snippet lang=c :
     * #define SO_TYPE 4104
     * }
     */
    public static int SO_TYPE() {
        return SO_TYPE;
    }
    private static final int SO_CONNDATA = (int)28672L;
    /**
     * {@snippet lang=c :
     * #define SO_CONNDATA 28672
     * }
     */
    public static int SO_CONNDATA() {
        return SO_CONNDATA;
    }
    private static final int SO_CONNOPT = (int)28673L;
    /**
     * {@snippet lang=c :
     * #define SO_CONNOPT 28673
     * }
     */
    public static int SO_CONNOPT() {
        return SO_CONNOPT;
    }
    private static final int SO_DISCDATA = (int)28674L;
    /**
     * {@snippet lang=c :
     * #define SO_DISCDATA 28674
     * }
     */
    public static int SO_DISCDATA() {
        return SO_DISCDATA;
    }
    private static final int SO_DISCOPT = (int)28675L;
    /**
     * {@snippet lang=c :
     * #define SO_DISCOPT 28675
     * }
     */
    public static int SO_DISCOPT() {
        return SO_DISCOPT;
    }
    private static final int SO_CONNDATALEN = (int)28676L;
    /**
     * {@snippet lang=c :
     * #define SO_CONNDATALEN 28676
     * }
     */
    public static int SO_CONNDATALEN() {
        return SO_CONNDATALEN;
    }
    private static final int SO_CONNOPTLEN = (int)28677L;
    /**
     * {@snippet lang=c :
     * #define SO_CONNOPTLEN 28677
     * }
     */
    public static int SO_CONNOPTLEN() {
        return SO_CONNOPTLEN;
    }
    private static final int SO_DISCDATALEN = (int)28678L;
    /**
     * {@snippet lang=c :
     * #define SO_DISCDATALEN 28678
     * }
     */
    public static int SO_DISCDATALEN() {
        return SO_DISCDATALEN;
    }
    private static final int SO_DISCOPTLEN = (int)28679L;
    /**
     * {@snippet lang=c :
     * #define SO_DISCOPTLEN 28679
     * }
     */
    public static int SO_DISCOPTLEN() {
        return SO_DISCOPTLEN;
    }
    private static final int SO_OPENTYPE = (int)28680L;
    /**
     * {@snippet lang=c :
     * #define SO_OPENTYPE 28680
     * }
     */
    public static int SO_OPENTYPE() {
        return SO_OPENTYPE;
    }
    private static final int SO_SYNCHRONOUS_ALERT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SO_SYNCHRONOUS_ALERT 16
     * }
     */
    public static int SO_SYNCHRONOUS_ALERT() {
        return SO_SYNCHRONOUS_ALERT;
    }
    private static final int SO_SYNCHRONOUS_NONALERT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SO_SYNCHRONOUS_NONALERT 32
     * }
     */
    public static int SO_SYNCHRONOUS_NONALERT() {
        return SO_SYNCHRONOUS_NONALERT;
    }
    private static final int SO_MAXDG = (int)28681L;
    /**
     * {@snippet lang=c :
     * #define SO_MAXDG 28681
     * }
     */
    public static int SO_MAXDG() {
        return SO_MAXDG;
    }
    private static final int SO_MAXPATHDG = (int)28682L;
    /**
     * {@snippet lang=c :
     * #define SO_MAXPATHDG 28682
     * }
     */
    public static int SO_MAXPATHDG() {
        return SO_MAXPATHDG;
    }
    private static final int SO_UPDATE_ACCEPT_CONTEXT = (int)28683L;
    /**
     * {@snippet lang=c :
     * #define SO_UPDATE_ACCEPT_CONTEXT 28683
     * }
     */
    public static int SO_UPDATE_ACCEPT_CONTEXT() {
        return SO_UPDATE_ACCEPT_CONTEXT;
    }
    private static final int SO_CONNECT_TIME = (int)28684L;
    /**
     * {@snippet lang=c :
     * #define SO_CONNECT_TIME 28684
     * }
     */
    public static int SO_CONNECT_TIME() {
        return SO_CONNECT_TIME;
    }
    private static final int TCP_NODELAY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TCP_NODELAY 1
     * }
     */
    public static int TCP_NODELAY() {
        return TCP_NODELAY;
    }
    private static final int TCP_BSDURGENT = (int)28672L;
    /**
     * {@snippet lang=c :
     * #define TCP_BSDURGENT 28672
     * }
     */
    public static int TCP_BSDURGENT() {
        return TCP_BSDURGENT;
    }
    private static final int AF_UNSPEC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define AF_UNSPEC 0
     * }
     */
    public static int AF_UNSPEC() {
        return AF_UNSPEC;
    }
    private static final int AF_UNIX = (int)1L;
    /**
     * {@snippet lang=c :
     * #define AF_UNIX 1
     * }
     */
    public static int AF_UNIX() {
        return AF_UNIX;
    }
    private static final int AF_INET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return AF_INET;
    }
    private static final int AF_IMPLINK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define AF_IMPLINK 3
     * }
     */
    public static int AF_IMPLINK() {
        return AF_IMPLINK;
    }
    private static final int AF_PUP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define AF_PUP 4
     * }
     */
    public static int AF_PUP() {
        return AF_PUP;
    }
    private static final int AF_CHAOS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define AF_CHAOS 5
     * }
     */
    public static int AF_CHAOS() {
        return AF_CHAOS;
    }
    private static final int AF_IPX = (int)6L;
    /**
     * {@snippet lang=c :
     * #define AF_IPX 6
     * }
     */
    public static int AF_IPX() {
        return AF_IPX;
    }
    private static final int AF_NS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define AF_NS 6
     * }
     */
    public static int AF_NS() {
        return AF_NS;
    }
    private static final int AF_ISO = (int)7L;
    /**
     * {@snippet lang=c :
     * #define AF_ISO 7
     * }
     */
    public static int AF_ISO() {
        return AF_ISO;
    }
    private static final int AF_ECMA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define AF_ECMA 8
     * }
     */
    public static int AF_ECMA() {
        return AF_ECMA;
    }
    private static final int AF_DATAKIT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define AF_DATAKIT 9
     * }
     */
    public static int AF_DATAKIT() {
        return AF_DATAKIT;
    }
    private static final int AF_CCITT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define AF_CCITT 10
     * }
     */
    public static int AF_CCITT() {
        return AF_CCITT;
    }
    private static final int AF_SNA = (int)11L;
    /**
     * {@snippet lang=c :
     * #define AF_SNA 11
     * }
     */
    public static int AF_SNA() {
        return AF_SNA;
    }
    private static final int AF_DECnet = (int)12L;
    /**
     * {@snippet lang=c :
     * #define AF_DECnet 12
     * }
     */
    public static int AF_DECnet() {
        return AF_DECnet;
    }
    private static final int AF_DLI = (int)13L;
    /**
     * {@snippet lang=c :
     * #define AF_DLI 13
     * }
     */
    public static int AF_DLI() {
        return AF_DLI;
    }
    private static final int AF_LAT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define AF_LAT 14
     * }
     */
    public static int AF_LAT() {
        return AF_LAT;
    }
    private static final int AF_HYLINK = (int)15L;
    /**
     * {@snippet lang=c :
     * #define AF_HYLINK 15
     * }
     */
    public static int AF_HYLINK() {
        return AF_HYLINK;
    }
    private static final int AF_APPLETALK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define AF_APPLETALK 16
     * }
     */
    public static int AF_APPLETALK() {
        return AF_APPLETALK;
    }
    private static final int AF_NETBIOS = (int)17L;
    /**
     * {@snippet lang=c :
     * #define AF_NETBIOS 17
     * }
     */
    public static int AF_NETBIOS() {
        return AF_NETBIOS;
    }
    private static final int AF_VOICEVIEW = (int)18L;
    /**
     * {@snippet lang=c :
     * #define AF_VOICEVIEW 18
     * }
     */
    public static int AF_VOICEVIEW() {
        return AF_VOICEVIEW;
    }
    private static final int AF_FIREFOX = (int)19L;
    /**
     * {@snippet lang=c :
     * #define AF_FIREFOX 19
     * }
     */
    public static int AF_FIREFOX() {
        return AF_FIREFOX;
    }
    private static final int AF_UNKNOWN1 = (int)20L;
    /**
     * {@snippet lang=c :
     * #define AF_UNKNOWN1 20
     * }
     */
    public static int AF_UNKNOWN1() {
        return AF_UNKNOWN1;
    }
    private static final int AF_BAN = (int)21L;
    /**
     * {@snippet lang=c :
     * #define AF_BAN 21
     * }
     */
    public static int AF_BAN() {
        return AF_BAN;
    }
    private static final int AF_MAX = (int)22L;
    /**
     * {@snippet lang=c :
     * #define AF_MAX 22
     * }
     */
    public static int AF_MAX() {
        return AF_MAX;
    }
    private static final int SOL_SOCKET = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define SOL_SOCKET 65535
     * }
     */
    public static int SOL_SOCKET() {
        return SOL_SOCKET;
    }
    private static final int SOMAXCONN = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SOMAXCONN 5
     * }
     */
    public static int SOMAXCONN() {
        return SOMAXCONN;
    }
    private static final int MSG_OOB = (int)1L;
    /**
     * {@snippet lang=c :
     * #define MSG_OOB 1
     * }
     */
    public static int MSG_OOB() {
        return MSG_OOB;
    }
    private static final int MSG_PEEK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MSG_PEEK 2
     * }
     */
    public static int MSG_PEEK() {
        return MSG_PEEK;
    }
    private static final int MSG_DONTROUTE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MSG_DONTROUTE 4
     * }
     */
    public static int MSG_DONTROUTE() {
        return MSG_DONTROUTE;
    }
    private static final int MSG_MAXIOVLEN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define MSG_MAXIOVLEN 16
     * }
     */
    public static int MSG_MAXIOVLEN() {
        return MSG_MAXIOVLEN;
    }
    private static final int MSG_PARTIAL = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define MSG_PARTIAL 32768
     * }
     */
    public static int MSG_PARTIAL() {
        return MSG_PARTIAL;
    }
    private static final int MAXGETHOSTSTRUCT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define MAXGETHOSTSTRUCT 1024
     * }
     */
    public static int MAXGETHOSTSTRUCT() {
        return MAXGETHOSTSTRUCT;
    }
    private static final int FD_READ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FD_READ 1
     * }
     */
    public static int FD_READ() {
        return FD_READ;
    }
    private static final int FD_WRITE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FD_WRITE 2
     * }
     */
    public static int FD_WRITE() {
        return FD_WRITE;
    }
    private static final int FD_OOB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FD_OOB 4
     * }
     */
    public static int FD_OOB() {
        return FD_OOB;
    }
    private static final int FD_ACCEPT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FD_ACCEPT 8
     * }
     */
    public static int FD_ACCEPT() {
        return FD_ACCEPT;
    }
    private static final int FD_CONNECT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FD_CONNECT 16
     * }
     */
    public static int FD_CONNECT() {
        return FD_CONNECT;
    }
    private static final int FD_CLOSE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FD_CLOSE 32
     * }
     */
    public static int FD_CLOSE() {
        return FD_CLOSE;
    }
    private static final int TF_DISCONNECT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TF_DISCONNECT 1
     * }
     */
    public static int TF_DISCONNECT() {
        return TF_DISCONNECT;
    }
    private static final int TF_REUSE_SOCKET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TF_REUSE_SOCKET 2
     * }
     */
    public static int TF_REUSE_SOCKET() {
        return TF_REUSE_SOCKET;
    }
    private static final int TF_WRITE_BEHIND = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TF_WRITE_BEHIND 4
     * }
     */
    public static int TF_WRITE_BEHIND() {
        return TF_WRITE_BEHIND;
    }
    private static final int ALG_SID_RSA_ANY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RSA_ANY 0
     * }
     */
    public static int ALG_SID_RSA_ANY() {
        return ALG_SID_RSA_ANY;
    }
    private static final int ALG_SID_RSA_PKCS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RSA_PKCS 1
     * }
     */
    public static int ALG_SID_RSA_PKCS() {
        return ALG_SID_RSA_PKCS;
    }
    private static final int ALG_SID_RSA_MSATWORK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RSA_MSATWORK 2
     * }
     */
    public static int ALG_SID_RSA_MSATWORK() {
        return ALG_SID_RSA_MSATWORK;
    }
    private static final int ALG_SID_RSA_ENTRUST = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RSA_ENTRUST 3
     * }
     */
    public static int ALG_SID_RSA_ENTRUST() {
        return ALG_SID_RSA_ENTRUST;
    }
    private static final int ALG_SID_RSA_PGP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RSA_PGP 4
     * }
     */
    public static int ALG_SID_RSA_PGP() {
        return ALG_SID_RSA_PGP;
    }
    private static final int ALG_SID_DSS_ANY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DSS_ANY 0
     * }
     */
    public static int ALG_SID_DSS_ANY() {
        return ALG_SID_DSS_ANY;
    }
    private static final int ALG_SID_DSS_PKCS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DSS_PKCS 1
     * }
     */
    public static int ALG_SID_DSS_PKCS() {
        return ALG_SID_DSS_PKCS;
    }
    private static final int ALG_SID_DSS_DMS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DSS_DMS 2
     * }
     */
    public static int ALG_SID_DSS_DMS() {
        return ALG_SID_DSS_DMS;
    }
    private static final int ALG_SID_ECDSA = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_ECDSA 3
     * }
     */
    public static int ALG_SID_ECDSA() {
        return ALG_SID_ECDSA;
    }
    private static final int ALG_SID_DES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DES 1
     * }
     */
    public static int ALG_SID_DES() {
        return ALG_SID_DES;
    }
    private static final int ALG_SID_3DES = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_3DES 3
     * }
     */
    public static int ALG_SID_3DES() {
        return ALG_SID_3DES;
    }
    private static final int ALG_SID_DESX = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DESX 4
     * }
     */
    public static int ALG_SID_DESX() {
        return ALG_SID_DESX;
    }
    private static final int ALG_SID_IDEA = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_IDEA 5
     * }
     */
    public static int ALG_SID_IDEA() {
        return ALG_SID_IDEA;
    }
    private static final int ALG_SID_CAST = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_CAST 6
     * }
     */
    public static int ALG_SID_CAST() {
        return ALG_SID_CAST;
    }
    private static final int ALG_SID_SAFERSK64 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SAFERSK64 7
     * }
     */
    public static int ALG_SID_SAFERSK64() {
        return ALG_SID_SAFERSK64;
    }
    private static final int ALG_SID_SAFERSK128 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SAFERSK128 8
     * }
     */
    public static int ALG_SID_SAFERSK128() {
        return ALG_SID_SAFERSK128;
    }
    private static final int ALG_SID_3DES_112 = (int)9L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_3DES_112 9
     * }
     */
    public static int ALG_SID_3DES_112() {
        return ALG_SID_3DES_112;
    }
    private static final int ALG_SID_CYLINK_MEK = (int)12L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_CYLINK_MEK 12
     * }
     */
    public static int ALG_SID_CYLINK_MEK() {
        return ALG_SID_CYLINK_MEK;
    }
    private static final int ALG_SID_RC5 = (int)13L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RC5 13
     * }
     */
    public static int ALG_SID_RC5() {
        return ALG_SID_RC5;
    }
    private static final int ALG_SID_AES_128 = (int)14L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_AES_128 14
     * }
     */
    public static int ALG_SID_AES_128() {
        return ALG_SID_AES_128;
    }
    private static final int ALG_SID_AES_192 = (int)15L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_AES_192 15
     * }
     */
    public static int ALG_SID_AES_192() {
        return ALG_SID_AES_192;
    }
    private static final int ALG_SID_AES_256 = (int)16L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_AES_256 16
     * }
     */
    public static int ALG_SID_AES_256() {
        return ALG_SID_AES_256;
    }
    private static final int ALG_SID_AES = (int)17L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_AES 17
     * }
     */
    public static int ALG_SID_AES() {
        return ALG_SID_AES;
    }
    private static final int ALG_SID_SKIPJACK = (int)10L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SKIPJACK 10
     * }
     */
    public static int ALG_SID_SKIPJACK() {
        return ALG_SID_SKIPJACK;
    }
    private static final int ALG_SID_TEK = (int)11L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_TEK 11
     * }
     */
    public static int ALG_SID_TEK() {
        return ALG_SID_TEK;
    }
    private static final int CRYPT_MODE_CBCI = (int)6L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CBCI 6
     * }
     */
    public static int CRYPT_MODE_CBCI() {
        return CRYPT_MODE_CBCI;
    }
    private static final int CRYPT_MODE_CFBP = (int)7L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CFBP 7
     * }
     */
    public static int CRYPT_MODE_CFBP() {
        return CRYPT_MODE_CFBP;
    }
    private static final int CRYPT_MODE_OFBP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_OFBP 8
     * }
     */
    public static int CRYPT_MODE_OFBP() {
        return CRYPT_MODE_OFBP;
    }
    private static final int CRYPT_MODE_CBCOFM = (int)9L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CBCOFM 9
     * }
     */
    public static int CRYPT_MODE_CBCOFM() {
        return CRYPT_MODE_CBCOFM;
    }
    private static final int CRYPT_MODE_CBCOFMI = (int)10L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CBCOFMI 10
     * }
     */
    public static int CRYPT_MODE_CBCOFMI() {
        return CRYPT_MODE_CBCOFMI;
    }
    private static final int ALG_SID_RC2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RC2 2
     * }
     */
    public static int ALG_SID_RC2() {
        return ALG_SID_RC2;
    }
    private static final int ALG_SID_RC4 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RC4 1
     * }
     */
    public static int ALG_SID_RC4() {
        return ALG_SID_RC4;
    }
    private static final int ALG_SID_SEAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SEAL 2
     * }
     */
    public static int ALG_SID_SEAL() {
        return ALG_SID_SEAL;
    }
    private static final int ALG_SID_DH_SANDF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DH_SANDF 1
     * }
     */
    public static int ALG_SID_DH_SANDF() {
        return ALG_SID_DH_SANDF;
    }
    private static final int ALG_SID_DH_EPHEM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_DH_EPHEM 2
     * }
     */
    public static int ALG_SID_DH_EPHEM() {
        return ALG_SID_DH_EPHEM;
    }
    private static final int ALG_SID_AGREED_KEY_ANY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_AGREED_KEY_ANY 3
     * }
     */
    public static int ALG_SID_AGREED_KEY_ANY() {
        return ALG_SID_AGREED_KEY_ANY;
    }
    private static final int ALG_SID_KEA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_KEA 4
     * }
     */
    public static int ALG_SID_KEA() {
        return ALG_SID_KEA;
    }
    private static final int ALG_SID_ECDH = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_ECDH 5
     * }
     */
    public static int ALG_SID_ECDH() {
        return ALG_SID_ECDH;
    }
    private static final int ALG_SID_ECDH_EPHEM = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_ECDH_EPHEM 6
     * }
     */
    public static int ALG_SID_ECDH_EPHEM() {
        return ALG_SID_ECDH_EPHEM;
    }
    private static final int ALG_SID_MD2 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_MD2 1
     * }
     */
    public static int ALG_SID_MD2() {
        return ALG_SID_MD2;
    }
    private static final int ALG_SID_MD4 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_MD4 2
     * }
     */
    public static int ALG_SID_MD4() {
        return ALG_SID_MD4;
    }
    private static final int ALG_SID_MD5 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_MD5 3
     * }
     */
    public static int ALG_SID_MD5() {
        return ALG_SID_MD5;
    }
    private static final int ALG_SID_SHA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SHA 4
     * }
     */
    public static int ALG_SID_SHA() {
        return ALG_SID_SHA;
    }
    private static final int ALG_SID_SHA1 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SHA1 4
     * }
     */
    public static int ALG_SID_SHA1() {
        return ALG_SID_SHA1;
    }
    private static final int ALG_SID_MAC = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_MAC 5
     * }
     */
    public static int ALG_SID_MAC() {
        return ALG_SID_MAC;
    }
    private static final int ALG_SID_RIPEMD = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RIPEMD 6
     * }
     */
    public static int ALG_SID_RIPEMD() {
        return ALG_SID_RIPEMD;
    }
    private static final int ALG_SID_RIPEMD160 = (int)7L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_RIPEMD160 7
     * }
     */
    public static int ALG_SID_RIPEMD160() {
        return ALG_SID_RIPEMD160;
    }
    private static final int ALG_SID_SSL3SHAMD5 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SSL3SHAMD5 8
     * }
     */
    public static int ALG_SID_SSL3SHAMD5() {
        return ALG_SID_SSL3SHAMD5;
    }
    private static final int ALG_SID_HMAC = (int)9L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_HMAC 9
     * }
     */
    public static int ALG_SID_HMAC() {
        return ALG_SID_HMAC;
    }
    private static final int ALG_SID_TLS1PRF = (int)10L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_TLS1PRF 10
     * }
     */
    public static int ALG_SID_TLS1PRF() {
        return ALG_SID_TLS1PRF;
    }
    private static final int ALG_SID_HASH_REPLACE_OWF = (int)11L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_HASH_REPLACE_OWF 11
     * }
     */
    public static int ALG_SID_HASH_REPLACE_OWF() {
        return ALG_SID_HASH_REPLACE_OWF;
    }
    private static final int ALG_SID_SHA_256 = (int)12L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SHA_256 12
     * }
     */
    public static int ALG_SID_SHA_256() {
        return ALG_SID_SHA_256;
    }
    private static final int ALG_SID_SHA_384 = (int)13L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SHA_384 13
     * }
     */
    public static int ALG_SID_SHA_384() {
        return ALG_SID_SHA_384;
    }
    private static final int ALG_SID_SHA_512 = (int)14L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SHA_512 14
     * }
     */
    public static int ALG_SID_SHA_512() {
        return ALG_SID_SHA_512;
    }
    private static final int ALG_SID_SSL3_MASTER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SSL3_MASTER 1
     * }
     */
    public static int ALG_SID_SSL3_MASTER() {
        return ALG_SID_SSL3_MASTER;
    }
    private static final int ALG_SID_SCHANNEL_MASTER_HASH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SCHANNEL_MASTER_HASH 2
     * }
     */
    public static int ALG_SID_SCHANNEL_MASTER_HASH() {
        return ALG_SID_SCHANNEL_MASTER_HASH;
    }
    private static final int ALG_SID_SCHANNEL_MAC_KEY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SCHANNEL_MAC_KEY 3
     * }
     */
    public static int ALG_SID_SCHANNEL_MAC_KEY() {
        return ALG_SID_SCHANNEL_MAC_KEY;
    }
    private static final int ALG_SID_PCT1_MASTER = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_PCT1_MASTER 4
     * }
     */
    public static int ALG_SID_PCT1_MASTER() {
        return ALG_SID_PCT1_MASTER;
    }
    private static final int ALG_SID_SSL2_MASTER = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SSL2_MASTER 5
     * }
     */
    public static int ALG_SID_SSL2_MASTER() {
        return ALG_SID_SSL2_MASTER;
    }
    private static final int ALG_SID_TLS1_MASTER = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_TLS1_MASTER 6
     * }
     */
    public static int ALG_SID_TLS1_MASTER() {
        return ALG_SID_TLS1_MASTER;
    }
    private static final int ALG_SID_SCHANNEL_ENC_KEY = (int)7L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_SCHANNEL_ENC_KEY 7
     * }
     */
    public static int ALG_SID_SCHANNEL_ENC_KEY() {
        return ALG_SID_SCHANNEL_ENC_KEY;
    }
    private static final int ALG_SID_ECMQV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_ECMQV 1
     * }
     */
    public static int ALG_SID_ECMQV() {
        return ALG_SID_ECMQV;
    }
    private static final int ALG_SID_EXAMPLE = (int)80L;
    /**
     * {@snippet lang=c :
     * #define ALG_SID_EXAMPLE 80
     * }
     */
    public static int ALG_SID_EXAMPLE() {
        return ALG_SID_EXAMPLE;
    }
    private static final int CRYPT_NEWKEYSET = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_NEWKEYSET 8
     * }
     */
    public static int CRYPT_NEWKEYSET() {
        return CRYPT_NEWKEYSET;
    }
    private static final int CRYPT_DELETEKEYSET = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DELETEKEYSET 16
     * }
     */
    public static int CRYPT_DELETEKEYSET() {
        return CRYPT_DELETEKEYSET;
    }
    private static final int CRYPT_MACHINE_KEYSET = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MACHINE_KEYSET 32
     * }
     */
    public static int CRYPT_MACHINE_KEYSET() {
        return CRYPT_MACHINE_KEYSET;
    }
    private static final int CRYPT_SILENT = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SILENT 64
     * }
     */
    public static int CRYPT_SILENT() {
        return CRYPT_SILENT;
    }
    private static final int CRYPT_DEFAULT_CONTAINER_OPTIONAL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DEFAULT_CONTAINER_OPTIONAL 128
     * }
     */
    public static int CRYPT_DEFAULT_CONTAINER_OPTIONAL() {
        return CRYPT_DEFAULT_CONTAINER_OPTIONAL;
    }
    private static final int CRYPT_EXPORTABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_EXPORTABLE 1
     * }
     */
    public static int CRYPT_EXPORTABLE() {
        return CRYPT_EXPORTABLE;
    }
    private static final int CRYPT_USER_PROTECTED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_USER_PROTECTED 2
     * }
     */
    public static int CRYPT_USER_PROTECTED() {
        return CRYPT_USER_PROTECTED;
    }
    private static final int CRYPT_CREATE_SALT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_CREATE_SALT 4
     * }
     */
    public static int CRYPT_CREATE_SALT() {
        return CRYPT_CREATE_SALT;
    }
    private static final int CRYPT_UPDATE_KEY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_UPDATE_KEY 8
     * }
     */
    public static int CRYPT_UPDATE_KEY() {
        return CRYPT_UPDATE_KEY;
    }
    private static final int CRYPT_NO_SALT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_NO_SALT 16
     * }
     */
    public static int CRYPT_NO_SALT() {
        return CRYPT_NO_SALT;
    }
    private static final int CRYPT_PREGEN = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_PREGEN 64
     * }
     */
    public static int CRYPT_PREGEN() {
        return CRYPT_PREGEN;
    }
    private static final int CRYPT_RECIPIENT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_RECIPIENT 16
     * }
     */
    public static int CRYPT_RECIPIENT() {
        return CRYPT_RECIPIENT;
    }
    private static final int CRYPT_INITIATOR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_INITIATOR 64
     * }
     */
    public static int CRYPT_INITIATOR() {
        return CRYPT_INITIATOR;
    }
    private static final int CRYPT_ONLINE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_ONLINE 128
     * }
     */
    public static int CRYPT_ONLINE() {
        return CRYPT_ONLINE;
    }
    private static final int CRYPT_SF = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SF 256
     * }
     */
    public static int CRYPT_SF() {
        return CRYPT_SF;
    }
    private static final int CRYPT_CREATE_IV = (int)512L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_CREATE_IV 512
     * }
     */
    public static int CRYPT_CREATE_IV() {
        return CRYPT_CREATE_IV;
    }
    private static final int CRYPT_KEK = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_KEK 1024
     * }
     */
    public static int CRYPT_KEK() {
        return CRYPT_KEK;
    }
    private static final int CRYPT_DATA_KEY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DATA_KEY 2048
     * }
     */
    public static int CRYPT_DATA_KEY() {
        return CRYPT_DATA_KEY;
    }
    private static final int CRYPT_VOLATILE = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_VOLATILE 4096
     * }
     */
    public static int CRYPT_VOLATILE() {
        return CRYPT_VOLATILE;
    }
    private static final int CRYPT_SGCKEY = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SGCKEY 8192
     * }
     */
    public static int CRYPT_SGCKEY() {
        return CRYPT_SGCKEY;
    }
    private static final int CRYPT_USER_PROTECTED_STRONG = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_USER_PROTECTED_STRONG 1048576
     * }
     */
    public static int CRYPT_USER_PROTECTED_STRONG() {
        return CRYPT_USER_PROTECTED_STRONG;
    }
    private static final int CRYPT_ARCHIVABLE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_ARCHIVABLE 16384
     * }
     */
    public static int CRYPT_ARCHIVABLE() {
        return CRYPT_ARCHIVABLE;
    }
    private static final int CRYPT_FORCE_KEY_PROTECTION_HIGH = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FORCE_KEY_PROTECTION_HIGH 32768
     * }
     */
    public static int CRYPT_FORCE_KEY_PROTECTION_HIGH() {
        return CRYPT_FORCE_KEY_PROTECTION_HIGH;
    }
    private static final int RSA1024BIT_KEY = (int)67108864L;
    /**
     * {@snippet lang=c :
     * #define RSA1024BIT_KEY 67108864
     * }
     */
    public static int RSA1024BIT_KEY() {
        return RSA1024BIT_KEY;
    }
    private static final int CRYPT_SERVER = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SERVER 1024
     * }
     */
    public static int CRYPT_SERVER() {
        return CRYPT_SERVER;
    }
    private static final int CRYPT_Y_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_Y_ONLY 1
     * }
     */
    public static int CRYPT_Y_ONLY() {
        return CRYPT_Y_ONLY;
    }
    private static final int CRYPT_SSL2_FALLBACK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SSL2_FALLBACK 2
     * }
     */
    public static int CRYPT_SSL2_FALLBACK() {
        return CRYPT_SSL2_FALLBACK;
    }
    private static final int CRYPT_DESTROYKEY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DESTROYKEY 4
     * }
     */
    public static int CRYPT_DESTROYKEY() {
        return CRYPT_DESTROYKEY;
    }
    private static final int CRYPT_OAEP = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_OAEP 64
     * }
     */
    public static int CRYPT_OAEP() {
        return CRYPT_OAEP;
    }
    private static final int CRYPT_BLOB_VER3 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_BLOB_VER3 128
     * }
     */
    public static int CRYPT_BLOB_VER3() {
        return CRYPT_BLOB_VER3;
    }
    private static final int CRYPT_IPSEC_HMAC_KEY = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IPSEC_HMAC_KEY 256
     * }
     */
    public static int CRYPT_IPSEC_HMAC_KEY() {
        return CRYPT_IPSEC_HMAC_KEY;
    }
    private static final int CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DECRYPT_RSA_NO_PADDING_CHECK 32
     * }
     */
    public static int CRYPT_DECRYPT_RSA_NO_PADDING_CHECK() {
        return CRYPT_DECRYPT_RSA_NO_PADDING_CHECK;
    }
    private static final int CRYPT_SECRETDIGEST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SECRETDIGEST 1
     * }
     */
    public static int CRYPT_SECRETDIGEST() {
        return CRYPT_SECRETDIGEST;
    }
    private static final int CRYPT_OWF_REPL_LM_HASH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_OWF_REPL_LM_HASH 1
     * }
     */
    public static int CRYPT_OWF_REPL_LM_HASH() {
        return CRYPT_OWF_REPL_LM_HASH;
    }
    private static final int CRYPT_LITTLE_ENDIAN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_LITTLE_ENDIAN 1
     * }
     */
    public static int CRYPT_LITTLE_ENDIAN() {
        return CRYPT_LITTLE_ENDIAN;
    }
    private static final int CRYPT_NOHASHOID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_NOHASHOID 1
     * }
     */
    public static int CRYPT_NOHASHOID() {
        return CRYPT_NOHASHOID;
    }
    private static final int CRYPT_TYPE2_FORMAT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_TYPE2_FORMAT 2
     * }
     */
    public static int CRYPT_TYPE2_FORMAT() {
        return CRYPT_TYPE2_FORMAT;
    }
    private static final int CRYPT_X931_FORMAT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_X931_FORMAT 4
     * }
     */
    public static int CRYPT_X931_FORMAT() {
        return CRYPT_X931_FORMAT;
    }
    private static final int CRYPT_MACHINE_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MACHINE_DEFAULT 1
     * }
     */
    public static int CRYPT_MACHINE_DEFAULT() {
        return CRYPT_MACHINE_DEFAULT;
    }
    private static final int CRYPT_USER_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_USER_DEFAULT 2
     * }
     */
    public static int CRYPT_USER_DEFAULT() {
        return CRYPT_USER_DEFAULT;
    }
    private static final int CRYPT_DELETE_DEFAULT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DELETE_DEFAULT 4
     * }
     */
    public static int CRYPT_DELETE_DEFAULT() {
        return CRYPT_DELETE_DEFAULT;
    }
    private static final int SIMPLEBLOB = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SIMPLEBLOB 1
     * }
     */
    public static int SIMPLEBLOB() {
        return SIMPLEBLOB;
    }
    private static final int PUBLICKEYBLOB = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PUBLICKEYBLOB 6
     * }
     */
    public static int PUBLICKEYBLOB() {
        return PUBLICKEYBLOB;
    }
    private static final int PRIVATEKEYBLOB = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PRIVATEKEYBLOB 7
     * }
     */
    public static int PRIVATEKEYBLOB() {
        return PRIVATEKEYBLOB;
    }
    private static final int PLAINTEXTKEYBLOB = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PLAINTEXTKEYBLOB 8
     * }
     */
    public static int PLAINTEXTKEYBLOB() {
        return PLAINTEXTKEYBLOB;
    }
    private static final int OPAQUEKEYBLOB = (int)9L;
    /**
     * {@snippet lang=c :
     * #define OPAQUEKEYBLOB 9
     * }
     */
    public static int OPAQUEKEYBLOB() {
        return OPAQUEKEYBLOB;
    }
    private static final int PUBLICKEYBLOBEX = (int)10L;
    /**
     * {@snippet lang=c :
     * #define PUBLICKEYBLOBEX 10
     * }
     */
    public static int PUBLICKEYBLOBEX() {
        return PUBLICKEYBLOBEX;
    }
    private static final int SYMMETRICWRAPKEYBLOB = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SYMMETRICWRAPKEYBLOB 11
     * }
     */
    public static int SYMMETRICWRAPKEYBLOB() {
        return SYMMETRICWRAPKEYBLOB;
    }
    private static final int KEYSTATEBLOB = (int)12L;
    /**
     * {@snippet lang=c :
     * #define KEYSTATEBLOB 12
     * }
     */
    public static int KEYSTATEBLOB() {
        return KEYSTATEBLOB;
    }
    private static final int AT_KEYEXCHANGE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define AT_KEYEXCHANGE 1
     * }
     */
    public static int AT_KEYEXCHANGE() {
        return AT_KEYEXCHANGE;
    }
    private static final int AT_SIGNATURE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define AT_SIGNATURE 2
     * }
     */
    public static int AT_SIGNATURE() {
        return AT_SIGNATURE;
    }
    private static final int CRYPT_USERDATA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_USERDATA 1
     * }
     */
    public static int CRYPT_USERDATA() {
        return CRYPT_USERDATA;
    }
    private static final int KP_IV = (int)1L;
    /**
     * {@snippet lang=c :
     * #define KP_IV 1
     * }
     */
    public static int KP_IV() {
        return KP_IV;
    }
    private static final int KP_SALT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define KP_SALT 2
     * }
     */
    public static int KP_SALT() {
        return KP_SALT;
    }
    private static final int KP_PADDING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define KP_PADDING 3
     * }
     */
    public static int KP_PADDING() {
        return KP_PADDING;
    }
    private static final int KP_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define KP_MODE 4
     * }
     */
    public static int KP_MODE() {
        return KP_MODE;
    }
    private static final int KP_MODE_BITS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define KP_MODE_BITS 5
     * }
     */
    public static int KP_MODE_BITS() {
        return KP_MODE_BITS;
    }
    private static final int KP_PERMISSIONS = (int)6L;
    /**
     * {@snippet lang=c :
     * #define KP_PERMISSIONS 6
     * }
     */
    public static int KP_PERMISSIONS() {
        return KP_PERMISSIONS;
    }
    private static final int KP_ALGID = (int)7L;
    /**
     * {@snippet lang=c :
     * #define KP_ALGID 7
     * }
     */
    public static int KP_ALGID() {
        return KP_ALGID;
    }
    private static final int KP_BLOCKLEN = (int)8L;
    /**
     * {@snippet lang=c :
     * #define KP_BLOCKLEN 8
     * }
     */
    public static int KP_BLOCKLEN() {
        return KP_BLOCKLEN;
    }
    private static final int KP_KEYLEN = (int)9L;
    /**
     * {@snippet lang=c :
     * #define KP_KEYLEN 9
     * }
     */
    public static int KP_KEYLEN() {
        return KP_KEYLEN;
    }
    private static final int KP_SALT_EX = (int)10L;
    /**
     * {@snippet lang=c :
     * #define KP_SALT_EX 10
     * }
     */
    public static int KP_SALT_EX() {
        return KP_SALT_EX;
    }
    private static final int KP_P = (int)11L;
    /**
     * {@snippet lang=c :
     * #define KP_P 11
     * }
     */
    public static int KP_P() {
        return KP_P;
    }
    private static final int KP_G = (int)12L;
    /**
     * {@snippet lang=c :
     * #define KP_G 12
     * }
     */
    public static int KP_G() {
        return KP_G;
    }
    private static final int KP_Q = (int)13L;
    /**
     * {@snippet lang=c :
     * #define KP_Q 13
     * }
     */
    public static int KP_Q() {
        return KP_Q;
    }
    private static final int KP_X = (int)14L;
    /**
     * {@snippet lang=c :
     * #define KP_X 14
     * }
     */
    public static int KP_X() {
        return KP_X;
    }
    private static final int KP_Y = (int)15L;
    /**
     * {@snippet lang=c :
     * #define KP_Y 15
     * }
     */
    public static int KP_Y() {
        return KP_Y;
    }
    private static final int KP_RA = (int)16L;
    /**
     * {@snippet lang=c :
     * #define KP_RA 16
     * }
     */
    public static int KP_RA() {
        return KP_RA;
    }
    private static final int KP_RB = (int)17L;
    /**
     * {@snippet lang=c :
     * #define KP_RB 17
     * }
     */
    public static int KP_RB() {
        return KP_RB;
    }
    private static final int KP_INFO = (int)18L;
    /**
     * {@snippet lang=c :
     * #define KP_INFO 18
     * }
     */
    public static int KP_INFO() {
        return KP_INFO;
    }
    private static final int KP_EFFECTIVE_KEYLEN = (int)19L;
    /**
     * {@snippet lang=c :
     * #define KP_EFFECTIVE_KEYLEN 19
     * }
     */
    public static int KP_EFFECTIVE_KEYLEN() {
        return KP_EFFECTIVE_KEYLEN;
    }
    private static final int KP_SCHANNEL_ALG = (int)20L;
    /**
     * {@snippet lang=c :
     * #define KP_SCHANNEL_ALG 20
     * }
     */
    public static int KP_SCHANNEL_ALG() {
        return KP_SCHANNEL_ALG;
    }
    private static final int KP_CLIENT_RANDOM = (int)21L;
    /**
     * {@snippet lang=c :
     * #define KP_CLIENT_RANDOM 21
     * }
     */
    public static int KP_CLIENT_RANDOM() {
        return KP_CLIENT_RANDOM;
    }
    private static final int KP_SERVER_RANDOM = (int)22L;
    /**
     * {@snippet lang=c :
     * #define KP_SERVER_RANDOM 22
     * }
     */
    public static int KP_SERVER_RANDOM() {
        return KP_SERVER_RANDOM;
    }
    private static final int KP_RP = (int)23L;
    /**
     * {@snippet lang=c :
     * #define KP_RP 23
     * }
     */
    public static int KP_RP() {
        return KP_RP;
    }
    private static final int KP_PRECOMP_MD5 = (int)24L;
    /**
     * {@snippet lang=c :
     * #define KP_PRECOMP_MD5 24
     * }
     */
    public static int KP_PRECOMP_MD5() {
        return KP_PRECOMP_MD5;
    }
    private static final int KP_PRECOMP_SHA = (int)25L;
    /**
     * {@snippet lang=c :
     * #define KP_PRECOMP_SHA 25
     * }
     */
    public static int KP_PRECOMP_SHA() {
        return KP_PRECOMP_SHA;
    }
    private static final int KP_CERTIFICATE = (int)26L;
    /**
     * {@snippet lang=c :
     * #define KP_CERTIFICATE 26
     * }
     */
    public static int KP_CERTIFICATE() {
        return KP_CERTIFICATE;
    }
    private static final int KP_CLEAR_KEY = (int)27L;
    /**
     * {@snippet lang=c :
     * #define KP_CLEAR_KEY 27
     * }
     */
    public static int KP_CLEAR_KEY() {
        return KP_CLEAR_KEY;
    }
    private static final int KP_PUB_EX_LEN = (int)28L;
    /**
     * {@snippet lang=c :
     * #define KP_PUB_EX_LEN 28
     * }
     */
    public static int KP_PUB_EX_LEN() {
        return KP_PUB_EX_LEN;
    }
    private static final int KP_PUB_EX_VAL = (int)29L;
    /**
     * {@snippet lang=c :
     * #define KP_PUB_EX_VAL 29
     * }
     */
    public static int KP_PUB_EX_VAL() {
        return KP_PUB_EX_VAL;
    }
    private static final int KP_KEYVAL = (int)30L;
    /**
     * {@snippet lang=c :
     * #define KP_KEYVAL 30
     * }
     */
    public static int KP_KEYVAL() {
        return KP_KEYVAL;
    }
    private static final int KP_ADMIN_PIN = (int)31L;
    /**
     * {@snippet lang=c :
     * #define KP_ADMIN_PIN 31
     * }
     */
    public static int KP_ADMIN_PIN() {
        return KP_ADMIN_PIN;
    }
    private static final int KP_KEYEXCHANGE_PIN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define KP_KEYEXCHANGE_PIN 32
     * }
     */
    public static int KP_KEYEXCHANGE_PIN() {
        return KP_KEYEXCHANGE_PIN;
    }
    private static final int KP_SIGNATURE_PIN = (int)33L;
    /**
     * {@snippet lang=c :
     * #define KP_SIGNATURE_PIN 33
     * }
     */
    public static int KP_SIGNATURE_PIN() {
        return KP_SIGNATURE_PIN;
    }
    private static final int KP_PREHASH = (int)34L;
    /**
     * {@snippet lang=c :
     * #define KP_PREHASH 34
     * }
     */
    public static int KP_PREHASH() {
        return KP_PREHASH;
    }
    private static final int KP_ROUNDS = (int)35L;
    /**
     * {@snippet lang=c :
     * #define KP_ROUNDS 35
     * }
     */
    public static int KP_ROUNDS() {
        return KP_ROUNDS;
    }
    private static final int KP_OAEP_PARAMS = (int)36L;
    /**
     * {@snippet lang=c :
     * #define KP_OAEP_PARAMS 36
     * }
     */
    public static int KP_OAEP_PARAMS() {
        return KP_OAEP_PARAMS;
    }
    private static final int KP_CMS_KEY_INFO = (int)37L;
    /**
     * {@snippet lang=c :
     * #define KP_CMS_KEY_INFO 37
     * }
     */
    public static int KP_CMS_KEY_INFO() {
        return KP_CMS_KEY_INFO;
    }
    private static final int KP_CMS_DH_KEY_INFO = (int)38L;
    /**
     * {@snippet lang=c :
     * #define KP_CMS_DH_KEY_INFO 38
     * }
     */
    public static int KP_CMS_DH_KEY_INFO() {
        return KP_CMS_DH_KEY_INFO;
    }
    private static final int KP_PUB_PARAMS = (int)39L;
    /**
     * {@snippet lang=c :
     * #define KP_PUB_PARAMS 39
     * }
     */
    public static int KP_PUB_PARAMS() {
        return KP_PUB_PARAMS;
    }
    private static final int KP_VERIFY_PARAMS = (int)40L;
    /**
     * {@snippet lang=c :
     * #define KP_VERIFY_PARAMS 40
     * }
     */
    public static int KP_VERIFY_PARAMS() {
        return KP_VERIFY_PARAMS;
    }
    private static final int KP_HIGHEST_VERSION = (int)41L;
    /**
     * {@snippet lang=c :
     * #define KP_HIGHEST_VERSION 41
     * }
     */
    public static int KP_HIGHEST_VERSION() {
        return KP_HIGHEST_VERSION;
    }
    private static final int KP_GET_USE_COUNT = (int)42L;
    /**
     * {@snippet lang=c :
     * #define KP_GET_USE_COUNT 42
     * }
     */
    public static int KP_GET_USE_COUNT() {
        return KP_GET_USE_COUNT;
    }
    private static final int KP_PIN_ID = (int)43L;
    /**
     * {@snippet lang=c :
     * #define KP_PIN_ID 43
     * }
     */
    public static int KP_PIN_ID() {
        return KP_PIN_ID;
    }
    private static final int KP_PIN_INFO = (int)44L;
    /**
     * {@snippet lang=c :
     * #define KP_PIN_INFO 44
     * }
     */
    public static int KP_PIN_INFO() {
        return KP_PIN_INFO;
    }
    private static final int PKCS5_PADDING = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PKCS5_PADDING 1
     * }
     */
    public static int PKCS5_PADDING() {
        return PKCS5_PADDING;
    }
    private static final int RANDOM_PADDING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RANDOM_PADDING 2
     * }
     */
    public static int RANDOM_PADDING() {
        return RANDOM_PADDING;
    }
    private static final int ZERO_PADDING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ZERO_PADDING 3
     * }
     */
    public static int ZERO_PADDING() {
        return ZERO_PADDING;
    }
    private static final int CRYPT_MODE_CBC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CBC 1
     * }
     */
    public static int CRYPT_MODE_CBC() {
        return CRYPT_MODE_CBC;
    }
    private static final int CRYPT_MODE_ECB = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_ECB 2
     * }
     */
    public static int CRYPT_MODE_ECB() {
        return CRYPT_MODE_ECB;
    }
    private static final int CRYPT_MODE_OFB = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_OFB 3
     * }
     */
    public static int CRYPT_MODE_OFB() {
        return CRYPT_MODE_OFB;
    }
    private static final int CRYPT_MODE_CFB = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CFB 4
     * }
     */
    public static int CRYPT_MODE_CFB() {
        return CRYPT_MODE_CFB;
    }
    private static final int CRYPT_MODE_CTS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MODE_CTS 5
     * }
     */
    public static int CRYPT_MODE_CTS() {
        return CRYPT_MODE_CTS;
    }
    private static final int CRYPT_ENCRYPT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_ENCRYPT 1
     * }
     */
    public static int CRYPT_ENCRYPT() {
        return CRYPT_ENCRYPT;
    }
    private static final int CRYPT_DECRYPT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_DECRYPT 2
     * }
     */
    public static int CRYPT_DECRYPT() {
        return CRYPT_DECRYPT;
    }
    private static final int CRYPT_EXPORT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_EXPORT 4
     * }
     */
    public static int CRYPT_EXPORT() {
        return CRYPT_EXPORT;
    }
    private static final int CRYPT_READ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_READ 8
     * }
     */
    public static int CRYPT_READ() {
        return CRYPT_READ;
    }
    private static final int CRYPT_WRITE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_WRITE 16
     * }
     */
    public static int CRYPT_WRITE() {
        return CRYPT_WRITE;
    }
    private static final int CRYPT_MAC = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_MAC 32
     * }
     */
    public static int CRYPT_MAC() {
        return CRYPT_MAC;
    }
    private static final int CRYPT_EXPORT_KEY = (int)64L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_EXPORT_KEY 64
     * }
     */
    public static int CRYPT_EXPORT_KEY() {
        return CRYPT_EXPORT_KEY;
    }
    private static final int CRYPT_IMPORT_KEY = (int)128L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPORT_KEY 128
     * }
     */
    public static int CRYPT_IMPORT_KEY() {
        return CRYPT_IMPORT_KEY;
    }
    private static final int CRYPT_ARCHIVE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_ARCHIVE 256
     * }
     */
    public static int CRYPT_ARCHIVE() {
        return CRYPT_ARCHIVE;
    }
    private static final int HP_ALGID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define HP_ALGID 1
     * }
     */
    public static int HP_ALGID() {
        return HP_ALGID;
    }
    private static final int HP_HASHVAL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define HP_HASHVAL 2
     * }
     */
    public static int HP_HASHVAL() {
        return HP_HASHVAL;
    }
    private static final int HP_HASHSIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define HP_HASHSIZE 4
     * }
     */
    public static int HP_HASHSIZE() {
        return HP_HASHSIZE;
    }
    private static final int HP_HMAC_INFO = (int)5L;
    /**
     * {@snippet lang=c :
     * #define HP_HMAC_INFO 5
     * }
     */
    public static int HP_HMAC_INFO() {
        return HP_HMAC_INFO;
    }
    private static final int HP_TLS1PRF_LABEL = (int)6L;
    /**
     * {@snippet lang=c :
     * #define HP_TLS1PRF_LABEL 6
     * }
     */
    public static int HP_TLS1PRF_LABEL() {
        return HP_TLS1PRF_LABEL;
    }
    private static final int HP_TLS1PRF_SEED = (int)7L;
    /**
     * {@snippet lang=c :
     * #define HP_TLS1PRF_SEED 7
     * }
     */
    public static int HP_TLS1PRF_SEED() {
        return HP_TLS1PRF_SEED;
    }
    private static final int PP_ENUMALGS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMALGS 1
     * }
     */
    public static int PP_ENUMALGS() {
        return PP_ENUMALGS;
    }
    private static final int PP_ENUMCONTAINERS = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMCONTAINERS 2
     * }
     */
    public static int PP_ENUMCONTAINERS() {
        return PP_ENUMCONTAINERS;
    }
    private static final int PP_IMPTYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PP_IMPTYPE 3
     * }
     */
    public static int PP_IMPTYPE() {
        return PP_IMPTYPE;
    }
    private static final int PP_NAME = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PP_NAME 4
     * }
     */
    public static int PP_NAME() {
        return PP_NAME;
    }
    private static final int PP_VERSION = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PP_VERSION 5
     * }
     */
    public static int PP_VERSION() {
        return PP_VERSION;
    }
    private static final int PP_CONTAINER = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PP_CONTAINER 6
     * }
     */
    public static int PP_CONTAINER() {
        return PP_CONTAINER;
    }
    private static final int PP_CHANGE_PASSWORD = (int)7L;
    /**
     * {@snippet lang=c :
     * #define PP_CHANGE_PASSWORD 7
     * }
     */
    public static int PP_CHANGE_PASSWORD() {
        return PP_CHANGE_PASSWORD;
    }
    private static final int PP_KEYSET_SEC_DESCR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYSET_SEC_DESCR 8
     * }
     */
    public static int PP_KEYSET_SEC_DESCR() {
        return PP_KEYSET_SEC_DESCR;
    }
    private static final int PP_CERTCHAIN = (int)9L;
    /**
     * {@snippet lang=c :
     * #define PP_CERTCHAIN 9
     * }
     */
    public static int PP_CERTCHAIN() {
        return PP_CERTCHAIN;
    }
    private static final int PP_KEY_TYPE_SUBTYPE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define PP_KEY_TYPE_SUBTYPE 10
     * }
     */
    public static int PP_KEY_TYPE_SUBTYPE() {
        return PP_KEY_TYPE_SUBTYPE;
    }
    private static final int PP_PROVTYPE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PP_PROVTYPE 16
     * }
     */
    public static int PP_PROVTYPE() {
        return PP_PROVTYPE;
    }
    private static final int PP_KEYSTORAGE = (int)17L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYSTORAGE 17
     * }
     */
    public static int PP_KEYSTORAGE() {
        return PP_KEYSTORAGE;
    }
    private static final int PP_APPLI_CERT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define PP_APPLI_CERT 18
     * }
     */
    public static int PP_APPLI_CERT() {
        return PP_APPLI_CERT;
    }
    private static final int PP_SYM_KEYSIZE = (int)19L;
    /**
     * {@snippet lang=c :
     * #define PP_SYM_KEYSIZE 19
     * }
     */
    public static int PP_SYM_KEYSIZE() {
        return PP_SYM_KEYSIZE;
    }
    private static final int PP_SESSION_KEYSIZE = (int)20L;
    /**
     * {@snippet lang=c :
     * #define PP_SESSION_KEYSIZE 20
     * }
     */
    public static int PP_SESSION_KEYSIZE() {
        return PP_SESSION_KEYSIZE;
    }
    private static final int PP_UI_PROMPT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define PP_UI_PROMPT 21
     * }
     */
    public static int PP_UI_PROMPT() {
        return PP_UI_PROMPT;
    }
    private static final int PP_ENUMALGS_EX = (int)22L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMALGS_EX 22
     * }
     */
    public static int PP_ENUMALGS_EX() {
        return PP_ENUMALGS_EX;
    }
    private static final int PP_ENUMMANDROOTS = (int)25L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMMANDROOTS 25
     * }
     */
    public static int PP_ENUMMANDROOTS() {
        return PP_ENUMMANDROOTS;
    }
    private static final int PP_ENUMELECTROOTS = (int)26L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMELECTROOTS 26
     * }
     */
    public static int PP_ENUMELECTROOTS() {
        return PP_ENUMELECTROOTS;
    }
    private static final int PP_KEYSET_TYPE = (int)27L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYSET_TYPE 27
     * }
     */
    public static int PP_KEYSET_TYPE() {
        return PP_KEYSET_TYPE;
    }
    private static final int PP_ADMIN_PIN = (int)31L;
    /**
     * {@snippet lang=c :
     * #define PP_ADMIN_PIN 31
     * }
     */
    public static int PP_ADMIN_PIN() {
        return PP_ADMIN_PIN;
    }
    private static final int PP_KEYEXCHANGE_PIN = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYEXCHANGE_PIN 32
     * }
     */
    public static int PP_KEYEXCHANGE_PIN() {
        return PP_KEYEXCHANGE_PIN;
    }
    private static final int PP_SIGNATURE_PIN = (int)33L;
    /**
     * {@snippet lang=c :
     * #define PP_SIGNATURE_PIN 33
     * }
     */
    public static int PP_SIGNATURE_PIN() {
        return PP_SIGNATURE_PIN;
    }
    private static final int PP_SIG_KEYSIZE_INC = (int)34L;
    /**
     * {@snippet lang=c :
     * #define PP_SIG_KEYSIZE_INC 34
     * }
     */
    public static int PP_SIG_KEYSIZE_INC() {
        return PP_SIG_KEYSIZE_INC;
    }
    private static final int PP_KEYX_KEYSIZE_INC = (int)35L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYX_KEYSIZE_INC 35
     * }
     */
    public static int PP_KEYX_KEYSIZE_INC() {
        return PP_KEYX_KEYSIZE_INC;
    }
    private static final int PP_UNIQUE_CONTAINER = (int)36L;
    /**
     * {@snippet lang=c :
     * #define PP_UNIQUE_CONTAINER 36
     * }
     */
    public static int PP_UNIQUE_CONTAINER() {
        return PP_UNIQUE_CONTAINER;
    }
    private static final int PP_SGC_INFO = (int)37L;
    /**
     * {@snippet lang=c :
     * #define PP_SGC_INFO 37
     * }
     */
    public static int PP_SGC_INFO() {
        return PP_SGC_INFO;
    }
    private static final int PP_USE_HARDWARE_RNG = (int)38L;
    /**
     * {@snippet lang=c :
     * #define PP_USE_HARDWARE_RNG 38
     * }
     */
    public static int PP_USE_HARDWARE_RNG() {
        return PP_USE_HARDWARE_RNG;
    }
    private static final int PP_KEYSPEC = (int)39L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYSPEC 39
     * }
     */
    public static int PP_KEYSPEC() {
        return PP_KEYSPEC;
    }
    private static final int PP_ENUMEX_SIGNING_PROT = (int)40L;
    /**
     * {@snippet lang=c :
     * #define PP_ENUMEX_SIGNING_PROT 40
     * }
     */
    public static int PP_ENUMEX_SIGNING_PROT() {
        return PP_ENUMEX_SIGNING_PROT;
    }
    private static final int PP_CRYPT_COUNT_KEY_USE = (int)41L;
    /**
     * {@snippet lang=c :
     * #define PP_CRYPT_COUNT_KEY_USE 41
     * }
     */
    public static int PP_CRYPT_COUNT_KEY_USE() {
        return PP_CRYPT_COUNT_KEY_USE;
    }
    private static final int PP_USER_CERTSTORE = (int)42L;
    /**
     * {@snippet lang=c :
     * #define PP_USER_CERTSTORE 42
     * }
     */
    public static int PP_USER_CERTSTORE() {
        return PP_USER_CERTSTORE;
    }
    private static final int PP_SMARTCARD_READER = (int)43L;
    /**
     * {@snippet lang=c :
     * #define PP_SMARTCARD_READER 43
     * }
     */
    public static int PP_SMARTCARD_READER() {
        return PP_SMARTCARD_READER;
    }
    private static final int PP_SMARTCARD_GUID = (int)45L;
    /**
     * {@snippet lang=c :
     * #define PP_SMARTCARD_GUID 45
     * }
     */
    public static int PP_SMARTCARD_GUID() {
        return PP_SMARTCARD_GUID;
    }
    private static final int PP_ROOT_CERTSTORE = (int)46L;
    /**
     * {@snippet lang=c :
     * #define PP_ROOT_CERTSTORE 46
     * }
     */
    public static int PP_ROOT_CERTSTORE() {
        return PP_ROOT_CERTSTORE;
    }
    private static final int PP_SMARTCARD_READER_ICON = (int)47L;
    /**
     * {@snippet lang=c :
     * #define PP_SMARTCARD_READER_ICON 47
     * }
     */
    public static int PP_SMARTCARD_READER_ICON() {
        return PP_SMARTCARD_READER_ICON;
    }
    private static final int CRYPT_FIRST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FIRST 1
     * }
     */
    public static int CRYPT_FIRST() {
        return CRYPT_FIRST;
    }
    private static final int CRYPT_NEXT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_NEXT 2
     * }
     */
    public static int CRYPT_NEXT() {
        return CRYPT_NEXT;
    }
    private static final int CRYPT_SGC_ENUM = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SGC_ENUM 4
     * }
     */
    public static int CRYPT_SGC_ENUM() {
        return CRYPT_SGC_ENUM;
    }
    private static final int CRYPT_IMPL_HARDWARE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPL_HARDWARE 1
     * }
     */
    public static int CRYPT_IMPL_HARDWARE() {
        return CRYPT_IMPL_HARDWARE;
    }
    private static final int CRYPT_IMPL_SOFTWARE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPL_SOFTWARE 2
     * }
     */
    public static int CRYPT_IMPL_SOFTWARE() {
        return CRYPT_IMPL_SOFTWARE;
    }
    private static final int CRYPT_IMPL_MIXED = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPL_MIXED 3
     * }
     */
    public static int CRYPT_IMPL_MIXED() {
        return CRYPT_IMPL_MIXED;
    }
    private static final int CRYPT_IMPL_UNKNOWN = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPL_UNKNOWN 4
     * }
     */
    public static int CRYPT_IMPL_UNKNOWN() {
        return CRYPT_IMPL_UNKNOWN;
    }
    private static final int CRYPT_IMPL_REMOVABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_IMPL_REMOVABLE 8
     * }
     */
    public static int CRYPT_IMPL_REMOVABLE() {
        return CRYPT_IMPL_REMOVABLE;
    }
    private static final int CRYPT_SEC_DESCR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SEC_DESCR 1
     * }
     */
    public static int CRYPT_SEC_DESCR() {
        return CRYPT_SEC_DESCR;
    }
    private static final int CRYPT_PSTORE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_PSTORE 2
     * }
     */
    public static int CRYPT_PSTORE() {
        return CRYPT_PSTORE;
    }
    private static final int CRYPT_UI_PROMPT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_UI_PROMPT 4
     * }
     */
    public static int CRYPT_UI_PROMPT() {
        return CRYPT_UI_PROMPT;
    }
    private static final int CRYPT_FLAG_PCT1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_PCT1 1
     * }
     */
    public static int CRYPT_FLAG_PCT1() {
        return CRYPT_FLAG_PCT1;
    }
    private static final int CRYPT_FLAG_SSL2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_SSL2 2
     * }
     */
    public static int CRYPT_FLAG_SSL2() {
        return CRYPT_FLAG_SSL2;
    }
    private static final int CRYPT_FLAG_SSL3 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_SSL3 4
     * }
     */
    public static int CRYPT_FLAG_SSL3() {
        return CRYPT_FLAG_SSL3;
    }
    private static final int CRYPT_FLAG_TLS1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_TLS1 8
     * }
     */
    public static int CRYPT_FLAG_TLS1() {
        return CRYPT_FLAG_TLS1;
    }
    private static final int CRYPT_FLAG_IPSEC = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_IPSEC 16
     * }
     */
    public static int CRYPT_FLAG_IPSEC() {
        return CRYPT_FLAG_IPSEC;
    }
    private static final int CRYPT_FLAG_SIGNING = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FLAG_SIGNING 32
     * }
     */
    public static int CRYPT_FLAG_SIGNING() {
        return CRYPT_FLAG_SIGNING;
    }
    private static final int CRYPT_SGC = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_SGC 1
     * }
     */
    public static int CRYPT_SGC() {
        return CRYPT_SGC;
    }
    private static final int CRYPT_FASTSGC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CRYPT_FASTSGC 2
     * }
     */
    public static int CRYPT_FASTSGC() {
        return CRYPT_FASTSGC;
    }
    private static final int PP_CLIENT_HWND = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PP_CLIENT_HWND 1
     * }
     */
    public static int PP_CLIENT_HWND() {
        return PP_CLIENT_HWND;
    }
    private static final int PP_CONTEXT_INFO = (int)11L;
    /**
     * {@snippet lang=c :
     * #define PP_CONTEXT_INFO 11
     * }
     */
    public static int PP_CONTEXT_INFO() {
        return PP_CONTEXT_INFO;
    }
    private static final int PP_KEYEXCHANGE_KEYSIZE = (int)12L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYEXCHANGE_KEYSIZE 12
     * }
     */
    public static int PP_KEYEXCHANGE_KEYSIZE() {
        return PP_KEYEXCHANGE_KEYSIZE;
    }
    private static final int PP_SIGNATURE_KEYSIZE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define PP_SIGNATURE_KEYSIZE 13
     * }
     */
    public static int PP_SIGNATURE_KEYSIZE() {
        return PP_SIGNATURE_KEYSIZE;
    }
    private static final int PP_KEYEXCHANGE_ALG = (int)14L;
    /**
     * {@snippet lang=c :
     * #define PP_KEYEXCHANGE_ALG 14
     * }
     */
    public static int PP_KEYEXCHANGE_ALG() {
        return PP_KEYEXCHANGE_ALG;
    }
    private static final int PP_SIGNATURE_ALG = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PP_SIGNATURE_ALG 15
     * }
     */
    public static int PP_SIGNATURE_ALG() {
        return PP_SIGNATURE_ALG;
    }
    private static final int PP_DELETEKEY = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PP_DELETEKEY 24
     * }
     */
    public static int PP_DELETEKEY() {
        return PP_DELETEKEY;
    }
    private static final int PP_PIN_PROMPT_STRING = (int)44L;
    /**
     * {@snippet lang=c :
     * #define PP_PIN_PROMPT_STRING 44
     * }
     */
    public static int PP_PIN_PROMPT_STRING() {
        return PP_PIN_PROMPT_STRING;
    }
    private static final int PP_SECURE_KEYEXCHANGE_PIN = (int)47L;
    /**
     * {@snippet lang=c :
     * #define PP_SECURE_KEYEXCHANGE_PIN 47
     * }
     */
    public static int PP_SECURE_KEYEXCHANGE_PIN() {
        return PP_SECURE_KEYEXCHANGE_PIN;
    }
    private static final int PP_SECURE_SIGNATURE_PIN = (int)48L;
    /**
     * {@snippet lang=c :
     * #define PP_SECURE_SIGNATURE_PIN 48
     * }
     */
    public static int PP_SECURE_SIGNATURE_PIN() {
        return PP_SECURE_SIGNATURE_PIN;
    }
    private static final int PP_DISMISS_PIN_UI_SEC = (int)49L;
    /**
     * {@snippet lang=c :
     * #define PP_DISMISS_PIN_UI_SEC 49
     * }
     */
    public static int PP_DISMISS_PIN_UI_SEC() {
        return PP_DISMISS_PIN_UI_SEC;
    }
    private static final int PROV_RSA_FULL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PROV_RSA_FULL 1
     * }
     */
    public static int PROV_RSA_FULL() {
        return PROV_RSA_FULL;
    }
    private static final int PROV_RSA_SIG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PROV_RSA_SIG 2
     * }
     */
    public static int PROV_RSA_SIG() {
        return PROV_RSA_SIG;
    }
    private static final int PROV_DSS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PROV_DSS 3
     * }
     */
    public static int PROV_DSS() {
        return PROV_DSS;
    }
    private static final int PROV_FORTEZZA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PROV_FORTEZZA 4
     * }
     */
    public static int PROV_FORTEZZA() {
        return PROV_FORTEZZA;
    }
    private static final int PROV_MS_EXCHANGE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PROV_MS_EXCHANGE 5
     * }
     */
    public static int PROV_MS_EXCHANGE() {
        return PROV_MS_EXCHANGE;
    }
    private static final int PROV_SSL = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PROV_SSL 6
     * }
     */
    public static int PROV_SSL() {
        return PROV_SSL;
    }
    private static final int PROV_RSA_SCHANNEL = (int)12L;
    /**
     * {@snippet lang=c :
     * #define PROV_RSA_SCHANNEL 12
     * }
     */
    public static int PROV_RSA_SCHANNEL() {
        return PROV_RSA_SCHANNEL;
    }
    private static final int PROV_DSS_DH = (int)13L;
    /**
     * {@snippet lang=c :
     * #define PROV_DSS_DH 13
     * }
     */
    public static int PROV_DSS_DH() {
        return PROV_DSS_DH;
    }
    private static final int PROV_EC_ECDSA_SIG = (int)14L;
    /**
     * {@snippet lang=c :
     * #define PROV_EC_ECDSA_SIG 14
     * }
     */
    public static int PROV_EC_ECDSA_SIG() {
        return PROV_EC_ECDSA_SIG;
    }
    private static final int PROV_EC_ECNRA_SIG = (int)15L;
    /**
     * {@snippet lang=c :
     * #define PROV_EC_ECNRA_SIG 15
     * }
     */
    public static int PROV_EC_ECNRA_SIG() {
        return PROV_EC_ECNRA_SIG;
    }
    private static final int PROV_EC_ECDSA_FULL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PROV_EC_ECDSA_FULL 16
     * }
     */
    public static int PROV_EC_ECDSA_FULL() {
        return PROV_EC_ECDSA_FULL;
    }
    private static final int PROV_EC_ECNRA_FULL = (int)17L;
    /**
     * {@snippet lang=c :
     * #define PROV_EC_ECNRA_FULL 17
     * }
     */
    public static int PROV_EC_ECNRA_FULL() {
        return PROV_EC_ECNRA_FULL;
    }
    private static final int PROV_DH_SCHANNEL = (int)18L;
    /**
     * {@snippet lang=c :
     * #define PROV_DH_SCHANNEL 18
     * }
     */
    public static int PROV_DH_SCHANNEL() {
        return PROV_DH_SCHANNEL;
    }
    private static final int PROV_SPYRUS_LYNKS = (int)20L;
    /**
     * {@snippet lang=c :
     * #define PROV_SPYRUS_LYNKS 20
     * }
     */
    public static int PROV_SPYRUS_LYNKS() {
        return PROV_SPYRUS_LYNKS;
    }
    private static final int PROV_RNG = (int)21L;
    /**
     * {@snippet lang=c :
     * #define PROV_RNG 21
     * }
     */
    public static int PROV_RNG() {
        return PROV_RNG;
    }
    private static final int PROV_INTEL_SEC = (int)22L;
    /**
     * {@snippet lang=c :
     * #define PROV_INTEL_SEC 22
     * }
     */
    public static int PROV_INTEL_SEC() {
        return PROV_INTEL_SEC;
    }
    private static final int PROV_REPLACE_OWF = (int)23L;
    /**
     * {@snippet lang=c :
     * #define PROV_REPLACE_OWF 23
     * }
     */
    public static int PROV_REPLACE_OWF() {
        return PROV_REPLACE_OWF;
    }
    private static final int PROV_RSA_AES = (int)24L;
    /**
     * {@snippet lang=c :
     * #define PROV_RSA_AES 24
     * }
     */
    public static int PROV_RSA_AES() {
        return PROV_RSA_AES;
    }
    private static final int MAXUIDLEN = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MAXUIDLEN 64
     * }
     */
    public static int MAXUIDLEN() {
        return MAXUIDLEN;
    }
    private static final int cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT = (int)20L;
    /**
     * {@snippet lang=c :
     * #define cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT 20
     * }
     */
    public static int cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT() {
        return cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT;
    }
    private static final int cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT = (int)86400L;
    /**
     * {@snippet lang=c :
     * #define cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT 86400
     * }
     */
    public static int cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT() {
        return cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT;
    }
    private static final int CUR_BLOB_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CUR_BLOB_VERSION 2
     * }
     */
    public static int CUR_BLOB_VERSION() {
        return CUR_BLOB_VERSION;
    }
    private static final int SCHANNEL_MAC_KEY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SCHANNEL_MAC_KEY 0
     * }
     */
    public static int SCHANNEL_MAC_KEY() {
        return SCHANNEL_MAC_KEY;
    }
    private static final int SCHANNEL_ENC_KEY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SCHANNEL_ENC_KEY 1
     * }
     */
    public static int SCHANNEL_ENC_KEY() {
        return SCHANNEL_ENC_KEY;
    }
    private static final int INTERNATIONAL_USAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define INTERNATIONAL_USAGE 1
     * }
     */
    public static int INTERNATIONAL_USAGE() {
        return INTERNATIONAL_USAGE;
    }
    private static final int BCRYPT_OBJECT_ALIGNMENT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_OBJECT_ALIGNMENT 16
     * }
     */
    public static int BCRYPT_OBJECT_ALIGNMENT() {
        return BCRYPT_OBJECT_ALIGNMENT;
    }
    private static final int KDF_HASH_ALGORITHM = (int)0L;
    /**
     * {@snippet lang=c :
     * #define KDF_HASH_ALGORITHM 0
     * }
     */
    public static int KDF_HASH_ALGORITHM() {
        return KDF_HASH_ALGORITHM;
    }
    private static final int KDF_SECRET_PREPEND = (int)1L;
    /**
     * {@snippet lang=c :
     * #define KDF_SECRET_PREPEND 1
     * }
     */
    public static int KDF_SECRET_PREPEND() {
        return KDF_SECRET_PREPEND;
    }
    private static final int KDF_SECRET_APPEND = (int)2L;
    /**
     * {@snippet lang=c :
     * #define KDF_SECRET_APPEND 2
     * }
     */
    public static int KDF_SECRET_APPEND() {
        return KDF_SECRET_APPEND;
    }
    private static final int KDF_HMAC_KEY = (int)3L;
    /**
     * {@snippet lang=c :
     * #define KDF_HMAC_KEY 3
     * }
     */
    public static int KDF_HMAC_KEY() {
        return KDF_HMAC_KEY;
    }
    private static final int KDF_TLS_PRF_LABEL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define KDF_TLS_PRF_LABEL 4
     * }
     */
    public static int KDF_TLS_PRF_LABEL() {
        return KDF_TLS_PRF_LABEL;
    }
    private static final int KDF_TLS_PRF_SEED = (int)5L;
    /**
     * {@snippet lang=c :
     * #define KDF_TLS_PRF_SEED 5
     * }
     */
    public static int KDF_TLS_PRF_SEED() {
        return KDF_TLS_PRF_SEED;
    }
    private static final int KDF_SECRET_HANDLE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define KDF_SECRET_HANDLE 6
     * }
     */
    public static int KDF_SECRET_HANDLE() {
        return KDF_SECRET_HANDLE;
    }
    private static final int KDF_TLS_PRF_PROTOCOL = (int)7L;
    /**
     * {@snippet lang=c :
     * #define KDF_TLS_PRF_PROTOCOL 7
     * }
     */
    public static int KDF_TLS_PRF_PROTOCOL() {
        return KDF_TLS_PRF_PROTOCOL;
    }
    private static final int KDF_ALGORITHMID = (int)8L;
    /**
     * {@snippet lang=c :
     * #define KDF_ALGORITHMID 8
     * }
     */
    public static int KDF_ALGORITHMID() {
        return KDF_ALGORITHMID;
    }
    private static final int KDF_PARTYUINFO = (int)9L;
    /**
     * {@snippet lang=c :
     * #define KDF_PARTYUINFO 9
     * }
     */
    public static int KDF_PARTYUINFO() {
        return KDF_PARTYUINFO;
    }
    private static final int KDF_PARTYVINFO = (int)10L;
    /**
     * {@snippet lang=c :
     * #define KDF_PARTYVINFO 10
     * }
     */
    public static int KDF_PARTYVINFO() {
        return KDF_PARTYVINFO;
    }
    private static final int KDF_SUPPPUBINFO = (int)11L;
    /**
     * {@snippet lang=c :
     * #define KDF_SUPPPUBINFO 11
     * }
     */
    public static int KDF_SUPPPUBINFO() {
        return KDF_SUPPPUBINFO;
    }
    private static final int KDF_SUPPPRIVINFO = (int)12L;
    /**
     * {@snippet lang=c :
     * #define KDF_SUPPPRIVINFO 12
     * }
     */
    public static int KDF_SUPPPRIVINFO() {
        return KDF_SUPPPRIVINFO;
    }
    private static final int KDF_LABEL = (int)13L;
    /**
     * {@snippet lang=c :
     * #define KDF_LABEL 13
     * }
     */
    public static int KDF_LABEL() {
        return KDF_LABEL;
    }
    private static final int KDF_CONTEXT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define KDF_CONTEXT 14
     * }
     */
    public static int KDF_CONTEXT() {
        return KDF_CONTEXT;
    }
    private static final int KDF_SALT = (int)15L;
    /**
     * {@snippet lang=c :
     * #define KDF_SALT 15
     * }
     */
    public static int KDF_SALT() {
        return KDF_SALT;
    }
    private static final int KDF_ITERATION_COUNT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define KDF_ITERATION_COUNT 16
     * }
     */
    public static int KDF_ITERATION_COUNT() {
        return KDF_ITERATION_COUNT;
    }
    private static final int KDF_GENERIC_PARAMETER = (int)17L;
    /**
     * {@snippet lang=c :
     * #define KDF_GENERIC_PARAMETER 17
     * }
     */
    public static int KDF_GENERIC_PARAMETER() {
        return KDF_GENERIC_PARAMETER;
    }
    private static final int KDF_KEYBITLENGTH = (int)18L;
    /**
     * {@snippet lang=c :
     * #define KDF_KEYBITLENGTH 18
     * }
     */
    public static int KDF_KEYBITLENGTH() {
        return KDF_KEYBITLENGTH;
    }
    private static final int KDF_HKDF_SALT = (int)19L;
    /**
     * {@snippet lang=c :
     * #define KDF_HKDF_SALT 19
     * }
     */
    public static int KDF_HKDF_SALT() {
        return KDF_HKDF_SALT;
    }
    private static final int KDF_HKDF_INFO = (int)20L;
    /**
     * {@snippet lang=c :
     * #define KDF_HKDF_INFO 20
     * }
     */
    public static int KDF_HKDF_INFO() {
        return KDF_HKDF_INFO;
    }
    private static final int KDF_USE_SECRET_AS_HMAC_KEY_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define KDF_USE_SECRET_AS_HMAC_KEY_FLAG 1
     * }
     */
    public static int KDF_USE_SECRET_AS_HMAC_KEY_FLAG() {
        return KDF_USE_SECRET_AS_HMAC_KEY_FLAG;
    }
    private static final int BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION 1
     * }
     */
    public static int BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION() {
        return BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION;
    }
    private static final int BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG 1
     * }
     */
    public static int BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG() {
        return BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG;
    }
    private static final int BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG 2
     * }
     */
    public static int BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG() {
        return BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG;
    }
    private static final int BCRYPT_SUPPORTED_PAD_ROUTER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SUPPORTED_PAD_ROUTER 1
     * }
     */
    public static int BCRYPT_SUPPORTED_PAD_ROUTER() {
        return BCRYPT_SUPPORTED_PAD_ROUTER;
    }
    private static final int BCRYPT_SUPPORTED_PAD_PKCS1_ENC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SUPPORTED_PAD_PKCS1_ENC 2
     * }
     */
    public static int BCRYPT_SUPPORTED_PAD_PKCS1_ENC() {
        return BCRYPT_SUPPORTED_PAD_PKCS1_ENC;
    }
    private static final int BCRYPT_SUPPORTED_PAD_PKCS1_SIG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SUPPORTED_PAD_PKCS1_SIG 4
     * }
     */
    public static int BCRYPT_SUPPORTED_PAD_PKCS1_SIG() {
        return BCRYPT_SUPPORTED_PAD_PKCS1_SIG;
    }
    private static final int BCRYPT_SUPPORTED_PAD_OAEP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SUPPORTED_PAD_OAEP 8
     * }
     */
    public static int BCRYPT_SUPPORTED_PAD_OAEP() {
        return BCRYPT_SUPPORTED_PAD_OAEP;
    }
    private static final int BCRYPT_SUPPORTED_PAD_PSS = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SUPPORTED_PAD_PSS 16
     * }
     */
    public static int BCRYPT_SUPPORTED_PAD_PSS() {
        return BCRYPT_SUPPORTED_PAD_PSS;
    }
    private static final int BCRYPT_PROV_DISPATCH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PROV_DISPATCH 1
     * }
     */
    public static int BCRYPT_PROV_DISPATCH() {
        return BCRYPT_PROV_DISPATCH;
    }
    private static final int BCRYPT_BLOCK_PADDING = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_BLOCK_PADDING 1
     * }
     */
    public static int BCRYPT_BLOCK_PADDING() {
        return BCRYPT_BLOCK_PADDING;
    }
    private static final int BCRYPT_PAD_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PAD_NONE 1
     * }
     */
    public static int BCRYPT_PAD_NONE() {
        return BCRYPT_PAD_NONE;
    }
    private static final int BCRYPT_PAD_PKCS1 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PAD_PKCS1 2
     * }
     */
    public static int BCRYPT_PAD_PKCS1() {
        return BCRYPT_PAD_PKCS1;
    }
    private static final int BCRYPT_PAD_OAEP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PAD_OAEP 4
     * }
     */
    public static int BCRYPT_PAD_OAEP() {
        return BCRYPT_PAD_OAEP;
    }
    private static final int BCRYPT_PAD_PSS = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PAD_PSS 8
     * }
     */
    public static int BCRYPT_PAD_PSS() {
        return BCRYPT_PAD_PSS;
    }
    private static final int BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID 16
     * }
     */
    public static int BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID() {
        return BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID;
    }
    private static final int BCRYPTBUFFER_VERSION = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BCRYPTBUFFER_VERSION 0
     * }
     */
    public static int BCRYPTBUFFER_VERSION() {
        return BCRYPTBUFFER_VERSION;
    }
    private static final int BCRYPT_RSAPUBLIC_MAGIC = (int)826364754L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RSAPUBLIC_MAGIC 826364754
     * }
     */
    public static int BCRYPT_RSAPUBLIC_MAGIC() {
        return BCRYPT_RSAPUBLIC_MAGIC;
    }
    private static final int BCRYPT_RSAPRIVATE_MAGIC = (int)843141970L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RSAPRIVATE_MAGIC 843141970
     * }
     */
    public static int BCRYPT_RSAPRIVATE_MAGIC() {
        return BCRYPT_RSAPRIVATE_MAGIC;
    }
    private static final int BCRYPT_RSAFULLPRIVATE_MAGIC = (int)859919186L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RSAFULLPRIVATE_MAGIC 859919186
     * }
     */
    public static int BCRYPT_RSAFULLPRIVATE_MAGIC() {
        return BCRYPT_RSAFULLPRIVATE_MAGIC;
    }
    private static final int BCRYPT_ECDH_PUBLIC_P256_MAGIC = (int)827016005L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PUBLIC_P256_MAGIC 827016005
     * }
     */
    public static int BCRYPT_ECDH_PUBLIC_P256_MAGIC() {
        return BCRYPT_ECDH_PUBLIC_P256_MAGIC;
    }
    private static final int BCRYPT_ECDH_PRIVATE_P256_MAGIC = (int)843793221L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PRIVATE_P256_MAGIC 843793221
     * }
     */
    public static int BCRYPT_ECDH_PRIVATE_P256_MAGIC() {
        return BCRYPT_ECDH_PRIVATE_P256_MAGIC;
    }
    private static final int BCRYPT_ECDH_PUBLIC_P384_MAGIC = (int)860570437L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PUBLIC_P384_MAGIC 860570437
     * }
     */
    public static int BCRYPT_ECDH_PUBLIC_P384_MAGIC() {
        return BCRYPT_ECDH_PUBLIC_P384_MAGIC;
    }
    private static final int BCRYPT_ECDH_PRIVATE_P384_MAGIC = (int)877347653L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PRIVATE_P384_MAGIC 877347653
     * }
     */
    public static int BCRYPT_ECDH_PRIVATE_P384_MAGIC() {
        return BCRYPT_ECDH_PRIVATE_P384_MAGIC;
    }
    private static final int BCRYPT_ECDH_PUBLIC_P521_MAGIC = (int)894124869L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PUBLIC_P521_MAGIC 894124869
     * }
     */
    public static int BCRYPT_ECDH_PUBLIC_P521_MAGIC() {
        return BCRYPT_ECDH_PUBLIC_P521_MAGIC;
    }
    private static final int BCRYPT_ECDH_PRIVATE_P521_MAGIC = (int)910902085L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PRIVATE_P521_MAGIC 910902085
     * }
     */
    public static int BCRYPT_ECDH_PRIVATE_P521_MAGIC() {
        return BCRYPT_ECDH_PRIVATE_P521_MAGIC;
    }
    private static final int BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = (int)1347109701L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC 1347109701
     * }
     */
    public static int BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC() {
        return BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC;
    }
    private static final int BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = (int)1447772997L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC 1447772997
     * }
     */
    public static int BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC() {
        return BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PUBLIC_P256_MAGIC = (int)827540293L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PUBLIC_P256_MAGIC 827540293
     * }
     */
    public static int BCRYPT_ECDSA_PUBLIC_P256_MAGIC() {
        return BCRYPT_ECDSA_PUBLIC_P256_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PRIVATE_P256_MAGIC = (int)844317509L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PRIVATE_P256_MAGIC 844317509
     * }
     */
    public static int BCRYPT_ECDSA_PRIVATE_P256_MAGIC() {
        return BCRYPT_ECDSA_PRIVATE_P256_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PUBLIC_P384_MAGIC = (int)861094725L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PUBLIC_P384_MAGIC 861094725
     * }
     */
    public static int BCRYPT_ECDSA_PUBLIC_P384_MAGIC() {
        return BCRYPT_ECDSA_PUBLIC_P384_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PRIVATE_P384_MAGIC = (int)877871941L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PRIVATE_P384_MAGIC 877871941
     * }
     */
    public static int BCRYPT_ECDSA_PRIVATE_P384_MAGIC() {
        return BCRYPT_ECDSA_PRIVATE_P384_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PUBLIC_P521_MAGIC = (int)894649157L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PUBLIC_P521_MAGIC 894649157
     * }
     */
    public static int BCRYPT_ECDSA_PUBLIC_P521_MAGIC() {
        return BCRYPT_ECDSA_PUBLIC_P521_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PRIVATE_P521_MAGIC = (int)911426373L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PRIVATE_P521_MAGIC 911426373
     * }
     */
    public static int BCRYPT_ECDSA_PRIVATE_P521_MAGIC() {
        return BCRYPT_ECDSA_PRIVATE_P521_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = (int)1346650949L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC 1346650949
     * }
     */
    public static int BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC() {
        return BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC;
    }
    private static final int BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = (int)1447314245L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC 1447314245
     * }
     */
    public static int BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC() {
        return BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC;
    }
    private static final int BCRYPT_ECC_FULLKEY_BLOB_V1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECC_FULLKEY_BLOB_V1 1
     * }
     */
    public static int BCRYPT_ECC_FULLKEY_BLOB_V1() {
        return BCRYPT_ECC_FULLKEY_BLOB_V1;
    }
    private static final int BCRYPT_DH_PUBLIC_MAGIC = (int)1112557636L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DH_PUBLIC_MAGIC 1112557636
     * }
     */
    public static int BCRYPT_DH_PUBLIC_MAGIC() {
        return BCRYPT_DH_PUBLIC_MAGIC;
    }
    private static final int BCRYPT_DH_PRIVATE_MAGIC = (int)1448101956L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DH_PRIVATE_MAGIC 1448101956
     * }
     */
    public static int BCRYPT_DH_PRIVATE_MAGIC() {
        return BCRYPT_DH_PRIVATE_MAGIC;
    }
    private static final int BCRYPT_DH_PARAMETERS_MAGIC = (int)1297107012L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DH_PARAMETERS_MAGIC 1297107012
     * }
     */
    public static int BCRYPT_DH_PARAMETERS_MAGIC() {
        return BCRYPT_DH_PARAMETERS_MAGIC;
    }
    private static final int BCRYPT_DSA_PUBLIC_MAGIC = (int)1112560452L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PUBLIC_MAGIC 1112560452
     * }
     */
    public static int BCRYPT_DSA_PUBLIC_MAGIC() {
        return BCRYPT_DSA_PUBLIC_MAGIC;
    }
    private static final int BCRYPT_DSA_PRIVATE_MAGIC = (int)1448104772L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PRIVATE_MAGIC 1448104772
     * }
     */
    public static int BCRYPT_DSA_PRIVATE_MAGIC() {
        return BCRYPT_DSA_PRIVATE_MAGIC;
    }
    private static final int BCRYPT_DSA_PUBLIC_MAGIC_V2 = (int)843206724L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PUBLIC_MAGIC_V2 843206724
     * }
     */
    public static int BCRYPT_DSA_PUBLIC_MAGIC_V2() {
        return BCRYPT_DSA_PUBLIC_MAGIC_V2;
    }
    private static final int BCRYPT_DSA_PRIVATE_MAGIC_V2 = (int)844517444L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PRIVATE_MAGIC_V2 844517444
     * }
     */
    public static int BCRYPT_DSA_PRIVATE_MAGIC_V2() {
        return BCRYPT_DSA_PRIVATE_MAGIC_V2;
    }
    private static final int BCRYPT_KEY_DATA_BLOB_MAGIC = (int)1296188491L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_KEY_DATA_BLOB_MAGIC 1296188491
     * }
     */
    public static int BCRYPT_KEY_DATA_BLOB_MAGIC() {
        return BCRYPT_KEY_DATA_BLOB_MAGIC;
    }
    private static final int BCRYPT_KEY_DATA_BLOB_VERSION1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_KEY_DATA_BLOB_VERSION1 1
     * }
     */
    public static int BCRYPT_KEY_DATA_BLOB_VERSION1() {
        return BCRYPT_KEY_DATA_BLOB_VERSION1;
    }
    private static final int BCRYPT_DSA_PARAMETERS_MAGIC = (int)1297109828L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PARAMETERS_MAGIC 1297109828
     * }
     */
    public static int BCRYPT_DSA_PARAMETERS_MAGIC() {
        return BCRYPT_DSA_PARAMETERS_MAGIC;
    }
    private static final int BCRYPT_DSA_PARAMETERS_MAGIC_V2 = (int)843927620L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_DSA_PARAMETERS_MAGIC_V2 843927620
     * }
     */
    public static int BCRYPT_DSA_PARAMETERS_MAGIC_V2() {
        return BCRYPT_DSA_PARAMETERS_MAGIC_V2;
    }
    private static final int BCRYPT_ECC_PARAMETERS_MAGIC = (int)1346585413L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ECC_PARAMETERS_MAGIC 1346585413
     * }
     */
    public static int BCRYPT_ECC_PARAMETERS_MAGIC() {
        return BCRYPT_ECC_PARAMETERS_MAGIC;
    }
    private static final int BCRYPT_CIPHER_INTERFACE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_CIPHER_INTERFACE 1
     * }
     */
    public static int BCRYPT_CIPHER_INTERFACE() {
        return BCRYPT_CIPHER_INTERFACE;
    }
    private static final int BCRYPT_HASH_INTERFACE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_HASH_INTERFACE 2
     * }
     */
    public static int BCRYPT_HASH_INTERFACE() {
        return BCRYPT_HASH_INTERFACE;
    }
    private static final int BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE 3
     * }
     */
    public static int BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE() {
        return BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE;
    }
    private static final int BCRYPT_SECRET_AGREEMENT_INTERFACE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SECRET_AGREEMENT_INTERFACE 4
     * }
     */
    public static int BCRYPT_SECRET_AGREEMENT_INTERFACE() {
        return BCRYPT_SECRET_AGREEMENT_INTERFACE;
    }
    private static final int BCRYPT_SIGNATURE_INTERFACE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SIGNATURE_INTERFACE 5
     * }
     */
    public static int BCRYPT_SIGNATURE_INTERFACE() {
        return BCRYPT_SIGNATURE_INTERFACE;
    }
    private static final int BCRYPT_RNG_INTERFACE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RNG_INTERFACE 6
     * }
     */
    public static int BCRYPT_RNG_INTERFACE() {
        return BCRYPT_RNG_INTERFACE;
    }
    private static final int BCRYPT_KEY_DERIVATION_INTERFACE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_KEY_DERIVATION_INTERFACE 7
     * }
     */
    public static int BCRYPT_KEY_DERIVATION_INTERFACE() {
        return BCRYPT_KEY_DERIVATION_INTERFACE;
    }
    private static final int BCRYPT_ALG_HANDLE_HMAC_FLAG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ALG_HANDLE_HMAC_FLAG 8
     * }
     */
    public static int BCRYPT_ALG_HANDLE_HMAC_FLAG() {
        return BCRYPT_ALG_HANDLE_HMAC_FLAG;
    }
    private static final int BCRYPT_HASH_REUSABLE_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_HASH_REUSABLE_FLAG 32
     * }
     */
    public static int BCRYPT_HASH_REUSABLE_FLAG() {
        return BCRYPT_HASH_REUSABLE_FLAG;
    }
    private static final int BCRYPT_CAPI_AES_FLAG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_CAPI_AES_FLAG 16
     * }
     */
    public static int BCRYPT_CAPI_AES_FLAG() {
        return BCRYPT_CAPI_AES_FLAG;
    }
    private static final int BCRYPT_MULTI_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_MULTI_FLAG 64
     * }
     */
    public static int BCRYPT_MULTI_FLAG() {
        return BCRYPT_MULTI_FLAG;
    }
    private static final int BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG 4
     * }
     */
    public static int BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG() {
        return BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG;
    }
    private static final int BCRYPT_BUFFERS_LOCKED_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_BUFFERS_LOCKED_FLAG 64
     * }
     */
    public static int BCRYPT_BUFFERS_LOCKED_FLAG() {
        return BCRYPT_BUFFERS_LOCKED_FLAG;
    }
    private static final int BCRYPT_EXTENDED_KEYSIZE = (int)128L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_EXTENDED_KEYSIZE 128
     * }
     */
    public static int BCRYPT_EXTENDED_KEYSIZE() {
        return BCRYPT_EXTENDED_KEYSIZE;
    }
    private static final int BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = (int)256L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS 256
     * }
     */
    public static int BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS() {
        return BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS;
    }
    private static final int BCRYPT_CIPHER_OPERATION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_CIPHER_OPERATION 1
     * }
     */
    public static int BCRYPT_CIPHER_OPERATION() {
        return BCRYPT_CIPHER_OPERATION;
    }
    private static final int BCRYPT_HASH_OPERATION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_HASH_OPERATION 2
     * }
     */
    public static int BCRYPT_HASH_OPERATION() {
        return BCRYPT_HASH_OPERATION;
    }
    private static final int BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION 4
     * }
     */
    public static int BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION() {
        return BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION;
    }
    private static final int BCRYPT_SECRET_AGREEMENT_OPERATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SECRET_AGREEMENT_OPERATION 8
     * }
     */
    public static int BCRYPT_SECRET_AGREEMENT_OPERATION() {
        return BCRYPT_SECRET_AGREEMENT_OPERATION;
    }
    private static final int BCRYPT_SIGNATURE_OPERATION = (int)16L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_SIGNATURE_OPERATION 16
     * }
     */
    public static int BCRYPT_SIGNATURE_OPERATION() {
        return BCRYPT_SIGNATURE_OPERATION;
    }
    private static final int BCRYPT_RNG_OPERATION = (int)32L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RNG_OPERATION 32
     * }
     */
    public static int BCRYPT_RNG_OPERATION() {
        return BCRYPT_RNG_OPERATION;
    }
    private static final int BCRYPT_KEY_DERIVATION_OPERATION = (int)64L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_KEY_DERIVATION_OPERATION 64
     * }
     */
    public static int BCRYPT_KEY_DERIVATION_OPERATION() {
        return BCRYPT_KEY_DERIVATION_OPERATION;
    }
    private static final int BCRYPT_PUBLIC_KEY_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PUBLIC_KEY_FLAG 1
     * }
     */
    public static int BCRYPT_PUBLIC_KEY_FLAG() {
        return BCRYPT_PUBLIC_KEY_FLAG;
    }
    private static final int BCRYPT_PRIVATE_KEY_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_PRIVATE_KEY_FLAG 2
     * }
     */
    public static int BCRYPT_PRIVATE_KEY_FLAG() {
        return BCRYPT_PRIVATE_KEY_FLAG;
    }
    private static final int BCRYPT_NO_KEY_VALIDATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_NO_KEY_VALIDATION 8
     * }
     */
    public static int BCRYPT_NO_KEY_VALIDATION() {
        return BCRYPT_NO_KEY_VALIDATION;
    }
    private static final int BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = (int)1L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_RNG_USE_ENTROPY_IN_BUFFER 1
     * }
     */
    public static int BCRYPT_RNG_USE_ENTROPY_IN_BUFFER() {
        return BCRYPT_RNG_USE_ENTROPY_IN_BUFFER;
    }
    private static final int BCRYPT_USE_SYSTEM_PREFERRED_RNG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_USE_SYSTEM_PREFERRED_RNG 2
     * }
     */
    public static int BCRYPT_USE_SYSTEM_PREFERRED_RNG() {
        return BCRYPT_USE_SYSTEM_PREFERRED_RNG;
    }
    private static final int BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BCRYPT_HASH_INTERFACE_MAJORVERSION_2 2
     * }
     */
    public static int BCRYPT_HASH_INTERFACE_MAJORVERSION_2() {
        return BCRYPT_HASH_INTERFACE_MAJORVERSION_2;
    }
    private static final int NCRYPT_MAX_KEY_NAME_LENGTH = (int)512L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_MAX_KEY_NAME_LENGTH 512
     * }
     */
    public static int NCRYPT_MAX_KEY_NAME_LENGTH() {
        return NCRYPT_MAX_KEY_NAME_LENGTH;
    }
    private static final int NCRYPT_MAX_ALG_ID_LENGTH = (int)512L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_MAX_ALG_ID_LENGTH 512
     * }
     */
    public static int NCRYPT_MAX_ALG_ID_LENGTH() {
        return NCRYPT_MAX_ALG_ID_LENGTH;
    }
    private static final int NCRYPT_KEY_STORAGE_INTERFACE = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_KEY_STORAGE_INTERFACE 65537
     * }
     */
    public static int NCRYPT_KEY_STORAGE_INTERFACE() {
        return NCRYPT_KEY_STORAGE_INTERFACE;
    }
    private static final int NCRYPT_SCHANNEL_INTERFACE = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_SCHANNEL_INTERFACE 65538
     * }
     */
    public static int NCRYPT_SCHANNEL_INTERFACE() {
        return NCRYPT_SCHANNEL_INTERFACE;
    }
    private static final int NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = (int)65539L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_SCHANNEL_SIGNATURE_INTERFACE 65539
     * }
     */
    public static int NCRYPT_SCHANNEL_SIGNATURE_INTERFACE() {
        return NCRYPT_SCHANNEL_SIGNATURE_INTERFACE;
    }
    private static final int NCRYPT_KEY_PROTECTION_INTERFACE = (int)65540L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_KEY_PROTECTION_INTERFACE 65540
     * }
     */
    public static int NCRYPT_KEY_PROTECTION_INTERFACE() {
        return NCRYPT_KEY_PROTECTION_INTERFACE;
    }
    private static final int NCRYPTBUFFER_VERSION = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_VERSION 0
     * }
     */
    public static int NCRYPTBUFFER_VERSION() {
        return NCRYPTBUFFER_VERSION;
    }
    private static final int NCRYPTBUFFER_EMPTY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_EMPTY 0
     * }
     */
    public static int NCRYPTBUFFER_EMPTY() {
        return NCRYPTBUFFER_EMPTY;
    }
    private static final int NCRYPTBUFFER_DATA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_DATA 1
     * }
     */
    public static int NCRYPTBUFFER_DATA() {
        return NCRYPTBUFFER_DATA;
    }
    private static final int NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING 3
     * }
     */
    public static int NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING() {
        return NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING;
    }
    private static final int NCRYPTBUFFER_PROTECTION_FLAGS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PROTECTION_FLAGS 4
     * }
     */
    public static int NCRYPTBUFFER_PROTECTION_FLAGS() {
        return NCRYPTBUFFER_PROTECTION_FLAGS;
    }
    private static final int NCRYPTBUFFER_SSL_CLIENT_RANDOM = (int)20L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_CLIENT_RANDOM 20
     * }
     */
    public static int NCRYPTBUFFER_SSL_CLIENT_RANDOM() {
        return NCRYPTBUFFER_SSL_CLIENT_RANDOM;
    }
    private static final int NCRYPTBUFFER_SSL_SERVER_RANDOM = (int)21L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_SERVER_RANDOM 21
     * }
     */
    public static int NCRYPTBUFFER_SSL_SERVER_RANDOM() {
        return NCRYPTBUFFER_SSL_SERVER_RANDOM;
    }
    private static final int NCRYPTBUFFER_SSL_HIGHEST_VERSION = (int)22L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_HIGHEST_VERSION 22
     * }
     */
    public static int NCRYPTBUFFER_SSL_HIGHEST_VERSION() {
        return NCRYPTBUFFER_SSL_HIGHEST_VERSION;
    }
    private static final int NCRYPTBUFFER_SSL_CLEAR_KEY = (int)23L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_CLEAR_KEY 23
     * }
     */
    public static int NCRYPTBUFFER_SSL_CLEAR_KEY() {
        return NCRYPTBUFFER_SSL_CLEAR_KEY;
    }
    private static final int NCRYPTBUFFER_SSL_KEY_ARG_DATA = (int)24L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_KEY_ARG_DATA 24
     * }
     */
    public static int NCRYPTBUFFER_SSL_KEY_ARG_DATA() {
        return NCRYPTBUFFER_SSL_KEY_ARG_DATA;
    }
    private static final int NCRYPTBUFFER_SSL_SESSION_HASH = (int)25L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_SSL_SESSION_HASH 25
     * }
     */
    public static int NCRYPTBUFFER_SSL_SESSION_HASH() {
        return NCRYPTBUFFER_SSL_SESSION_HASH;
    }
    private static final int NCRYPTBUFFER_PKCS_OID = (int)40L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_OID 40
     * }
     */
    public static int NCRYPTBUFFER_PKCS_OID() {
        return NCRYPTBUFFER_PKCS_OID;
    }
    private static final int NCRYPTBUFFER_PKCS_ALG_OID = (int)41L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_ALG_OID 41
     * }
     */
    public static int NCRYPTBUFFER_PKCS_ALG_OID() {
        return NCRYPTBUFFER_PKCS_ALG_OID;
    }
    private static final int NCRYPTBUFFER_PKCS_ALG_PARAM = (int)42L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_ALG_PARAM 42
     * }
     */
    public static int NCRYPTBUFFER_PKCS_ALG_PARAM() {
        return NCRYPTBUFFER_PKCS_ALG_PARAM;
    }
    private static final int NCRYPTBUFFER_PKCS_ALG_ID = (int)43L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_ALG_ID 43
     * }
     */
    public static int NCRYPTBUFFER_PKCS_ALG_ID() {
        return NCRYPTBUFFER_PKCS_ALG_ID;
    }
    private static final int NCRYPTBUFFER_PKCS_ATTRS = (int)44L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_ATTRS 44
     * }
     */
    public static int NCRYPTBUFFER_PKCS_ATTRS() {
        return NCRYPTBUFFER_PKCS_ATTRS;
    }
    private static final int NCRYPTBUFFER_PKCS_KEY_NAME = (int)45L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_KEY_NAME 45
     * }
     */
    public static int NCRYPTBUFFER_PKCS_KEY_NAME() {
        return NCRYPTBUFFER_PKCS_KEY_NAME;
    }
    private static final int NCRYPTBUFFER_PKCS_SECRET = (int)46L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_PKCS_SECRET 46
     * }
     */
    public static int NCRYPTBUFFER_PKCS_SECRET() {
        return NCRYPTBUFFER_PKCS_SECRET;
    }
    private static final int NCRYPTBUFFER_CERT_BLOB = (int)47L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_CERT_BLOB 47
     * }
     */
    public static int NCRYPTBUFFER_CERT_BLOB() {
        return NCRYPTBUFFER_CERT_BLOB;
    }
    private static final int NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = (int)48L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_CLAIM_IDBINDING_NONCE 48
     * }
     */
    public static int NCRYPTBUFFER_CLAIM_IDBINDING_NONCE() {
        return NCRYPTBUFFER_CLAIM_IDBINDING_NONCE;
    }
    private static final int NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = (int)49L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE 49
     * }
     */
    public static int NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE() {
        return NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE;
    }
    private static final int NCRYPTBUFFER_KEY_PROPERTY_FLAGS = (int)50L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_KEY_PROPERTY_FLAGS 50
     * }
     */
    public static int NCRYPTBUFFER_KEY_PROPERTY_FLAGS() {
        return NCRYPTBUFFER_KEY_PROPERTY_FLAGS;
    }
    private static final int NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = (int)51L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB 51
     * }
     */
    public static int NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB() {
        return NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB;
    }
    private static final int NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = (int)52L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE 52
     * }
     */
    public static int NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE() {
        return NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE;
    }
    private static final int NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = (int)53L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED 53
     * }
     */
    public static int NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED() {
        return NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED;
    }
    private static final int NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = (int)54L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS 54
     * }
     */
    public static int NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS() {
        return NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS;
    }
    private static final int NCRYPTBUFFER_ECC_CURVE_NAME = (int)60L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_ECC_CURVE_NAME 60
     * }
     */
    public static int NCRYPTBUFFER_ECC_CURVE_NAME() {
        return NCRYPTBUFFER_ECC_CURVE_NAME;
    }
    private static final int NCRYPTBUFFER_ECC_PARAMETERS = (int)61L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_ECC_PARAMETERS 61
     * }
     */
    public static int NCRYPTBUFFER_ECC_PARAMETERS() {
        return NCRYPTBUFFER_ECC_PARAMETERS;
    }
    private static final int NCRYPTBUFFER_TPM_SEAL_PASSWORD = (int)70L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_SEAL_PASSWORD 70
     * }
     */
    public static int NCRYPTBUFFER_TPM_SEAL_PASSWORD() {
        return NCRYPTBUFFER_TPM_SEAL_PASSWORD;
    }
    private static final int NCRYPTBUFFER_TPM_SEAL_POLICYINFO = (int)71L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_SEAL_POLICYINFO 71
     * }
     */
    public static int NCRYPTBUFFER_TPM_SEAL_POLICYINFO() {
        return NCRYPTBUFFER_TPM_SEAL_POLICYINFO;
    }
    private static final int NCRYPTBUFFER_TPM_SEAL_TICKET = (int)72L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_SEAL_TICKET 72
     * }
     */
    public static int NCRYPTBUFFER_TPM_SEAL_TICKET() {
        return NCRYPTBUFFER_TPM_SEAL_TICKET;
    }
    private static final int NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = (int)73L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION 73
     * }
     */
    public static int NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION() {
        return NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION;
    }
    private static final int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = (int)80L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK 80
     * }
     */
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK() {
        return NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK;
    }
    private static final int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = (int)81L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE 81
     * }
     */
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE() {
        return NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE;
    }
    private static final int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = (int)82L;
    /**
     * {@snippet lang=c :
     * #define NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE 82
     * }
     */
    public static int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE() {
        return NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE;
    }
    private static final int NCRYPT_CIPHER_NO_PADDING_FLAG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CIPHER_NO_PADDING_FLAG 0
     * }
     */
    public static int NCRYPT_CIPHER_NO_PADDING_FLAG() {
        return NCRYPT_CIPHER_NO_PADDING_FLAG;
    }
    private static final int NCRYPT_CIPHER_BLOCK_PADDING_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CIPHER_BLOCK_PADDING_FLAG 1
     * }
     */
    public static int NCRYPT_CIPHER_BLOCK_PADDING_FLAG() {
        return NCRYPT_CIPHER_BLOCK_PADDING_FLAG;
    }
    private static final int NCRYPT_CIPHER_OTHER_PADDING_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CIPHER_OTHER_PADDING_FLAG 2
     * }
     */
    public static int NCRYPT_CIPHER_OTHER_PADDING_FLAG() {
        return NCRYPT_CIPHER_OTHER_PADDING_FLAG;
    }
    private static final int NCRYPT_PLATFORM_ATTEST_MAGIC = (int)1146110288L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_PLATFORM_ATTEST_MAGIC 1146110288
     * }
     */
    public static int NCRYPT_PLATFORM_ATTEST_MAGIC() {
        return NCRYPT_PLATFORM_ATTEST_MAGIC;
    }
    private static final int NCRYPT_KEY_ATTEST_MAGIC = (int)1146110283L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_KEY_ATTEST_MAGIC 1146110283
     * }
     */
    public static int NCRYPT_KEY_ATTEST_MAGIC() {
        return NCRYPT_KEY_ATTEST_MAGIC;
    }
    private static final int NCRYPT_CLAIM_AUTHORITY_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_AUTHORITY_ONLY 1
     * }
     */
    public static int NCRYPT_CLAIM_AUTHORITY_ONLY() {
        return NCRYPT_CLAIM_AUTHORITY_ONLY;
    }
    private static final int NCRYPT_CLAIM_SUBJECT_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_SUBJECT_ONLY 2
     * }
     */
    public static int NCRYPT_CLAIM_SUBJECT_ONLY() {
        return NCRYPT_CLAIM_SUBJECT_ONLY;
    }
    private static final int NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = (int)258L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY 258
     * }
     */
    public static int NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY() {
        return NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY;
    }
    private static final int NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT 3
     * }
     */
    public static int NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT() {
        return NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT;
    }
    private static final int NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT 4
     * }
     */
    public static int NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT() {
        return NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT;
    }
    private static final int NCRYPT_CLAIM_UNKNOWN = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_UNKNOWN 4096
     * }
     */
    public static int NCRYPT_CLAIM_UNKNOWN() {
        return NCRYPT_CLAIM_UNKNOWN;
    }
    private static final int NCRYPT_CLAIM_PLATFORM = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_CLAIM_PLATFORM 65536
     * }
     */
    public static int NCRYPT_CLAIM_PLATFORM() {
        return NCRYPT_CLAIM_PLATFORM;
    }
    private static final int NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION 1
     * }
     */
    public static int NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION() {
        return NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION;
    }
    private static final int NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY 2
     * }
     */
    public static int NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY() {
        return NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY;
    }
    private static final int NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 0
     * }
     */
    public static int NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0() {
        return NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0;
    }
    private static final int NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 0
     * }
     */
    public static int NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0() {
        return NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0;
    }
    private static final int NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 0
     * }
     */
    public static int NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0() {
        return NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0;
    }
    private static final int NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 0
     * }
     */
    public static int NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0() {
        return NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0;
    }
    private static final int NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 0
     * }
     */
    public static int NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0() {
        return NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0;
    }
    private static final int NCRYPT_NO_PADDING_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_NO_PADDING_FLAG 1
     * }
     */
    public static int NCRYPT_NO_PADDING_FLAG() {
        return NCRYPT_NO_PADDING_FLAG;
    }
    private static final int NCRYPT_PAD_PKCS1_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_PAD_PKCS1_FLAG 2
     * }
     */
    public static int NCRYPT_PAD_PKCS1_FLAG() {
        return NCRYPT_PAD_PKCS1_FLAG;
    }
    private static final int NCRYPT_PAD_OAEP_FLAG = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_PAD_OAEP_FLAG 4
     * }
     */
    public static int NCRYPT_PAD_OAEP_FLAG() {
        return NCRYPT_PAD_OAEP_FLAG;
    }
    private static final int NCRYPT_PAD_PSS_FLAG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_PAD_PSS_FLAG 8
     * }
     */
    public static int NCRYPT_PAD_PSS_FLAG() {
        return NCRYPT_PAD_PSS_FLAG;
    }
    private static final int NCRYPT_PAD_CIPHER_FLAG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_PAD_CIPHER_FLAG 16
     * }
     */
    public static int NCRYPT_PAD_CIPHER_FLAG() {
        return NCRYPT_PAD_CIPHER_FLAG;
    }
    private static final int NCRYPT_ATTESTATION_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_ATTESTATION_FLAG 32
     * }
     */
    public static int NCRYPT_ATTESTATION_FLAG() {
        return NCRYPT_ATTESTATION_FLAG;
    }
    private static final int NCRYPT_SEALING_FLAG = (int)256L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_SEALING_FLAG 256
     * }
     */
    public static int NCRYPT_SEALING_FLAG() {
        return NCRYPT_SEALING_FLAG;
    }
    private static final int NCRYPT_REGISTER_NOTIFY_FLAG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_REGISTER_NOTIFY_FLAG 1
     * }
     */
    public static int NCRYPT_REGISTER_NOTIFY_FLAG() {
        return NCRYPT_REGISTER_NOTIFY_FLAG;
    }
    private static final int NCRYPT_UNREGISTER_NOTIFY_FLAG = (int)2L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_UNREGISTER_NOTIFY_FLAG 2
     * }
     */
    public static int NCRYPT_UNREGISTER_NOTIFY_FLAG() {
        return NCRYPT_UNREGISTER_NOTIFY_FLAG;
    }
    private static final int NCRYPT_MACHINE_KEY_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_MACHINE_KEY_FLAG 32
     * }
     */
    public static int NCRYPT_MACHINE_KEY_FLAG() {
        return NCRYPT_MACHINE_KEY_FLAG;
    }
    private static final int NCRYPT_SILENT_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define NCRYPT_SILENT_FLAG 64
     * }
     */
    public static int NCRYPT_SILENT_FLAG() {
        return NCRYPT_SILENT_FLAG;
    }
}

