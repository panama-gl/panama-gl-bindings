// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagGESTURECONFIG {
 *     DWORD dwID;
 *     DWORD dwWant;
 *     DWORD dwBlock;
 * }
 * }
 */
public class tagGESTURECONFIG {

    tagGESTURECONFIG() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwID"),
        wgl_h.C_LONG.withName("dwWant"),
        wgl_h.C_LONG.withName("dwBlock")
    ).withName("tagGESTURECONFIG");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwID
     * }
     */
    public static final OfInt dwID$layout() {
        return dwID$LAYOUT;
    }

    private static final long dwID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwID
     * }
     */
    public static final long dwID$offset() {
        return dwID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwID
     * }
     */
    public static int dwID(MemorySegment struct) {
        return struct.get(dwID$LAYOUT, dwID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwID
     * }
     */
    public static void dwID(MemorySegment struct, int fieldValue) {
        struct.set(dwID$LAYOUT, dwID$OFFSET, fieldValue);
    }

    private static final OfInt dwWant$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwWant"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwWant
     * }
     */
    public static final OfInt dwWant$layout() {
        return dwWant$LAYOUT;
    }

    private static final long dwWant$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwWant
     * }
     */
    public static final long dwWant$offset() {
        return dwWant$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwWant
     * }
     */
    public static int dwWant(MemorySegment struct) {
        return struct.get(dwWant$LAYOUT, dwWant$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwWant
     * }
     */
    public static void dwWant(MemorySegment struct, int fieldValue) {
        struct.set(dwWant$LAYOUT, dwWant$OFFSET, fieldValue);
    }

    private static final OfInt dwBlock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwBlock
     * }
     */
    public static final OfInt dwBlock$layout() {
        return dwBlock$LAYOUT;
    }

    private static final long dwBlock$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwBlock
     * }
     */
    public static final long dwBlock$offset() {
        return dwBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwBlock
     * }
     */
    public static int dwBlock(MemorySegment struct) {
        return struct.get(dwBlock$LAYOUT, dwBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwBlock
     * }
     */
    public static void dwBlock(MemorySegment struct, int fieldValue) {
        struct.set(dwBlock$LAYOUT, dwBlock$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

