// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD BytesPerCacheLine;
 *     DWORD BytesOffsetForCacheAlignment;
 *     DWORD BytesPerLogicalSector;
 *     DWORD BytesPerPhysicalSector;
 *     DWORD BytesOffsetForSectorAlignment;
 * }
 * }
 */
public class _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {

    _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("BytesPerCacheLine"),
        wgl_h.C_LONG.withName("BytesOffsetForCacheAlignment"),
        wgl_h.C_LONG.withName("BytesPerLogicalSector"),
        wgl_h.C_LONG.withName("BytesPerPhysicalSector"),
        wgl_h.C_LONG.withName("BytesOffsetForSectorAlignment")
    ).withName("_STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerCacheLine$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerCacheLine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerCacheLine
     * }
     */
    public static final OfInt BytesPerCacheLine$layout() {
        return BytesPerCacheLine$LAYOUT;
    }

    private static final long BytesPerCacheLine$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerCacheLine
     * }
     */
    public static final long BytesPerCacheLine$offset() {
        return BytesPerCacheLine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerCacheLine
     * }
     */
    public static int BytesPerCacheLine(MemorySegment struct) {
        return struct.get(BytesPerCacheLine$LAYOUT, BytesPerCacheLine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerCacheLine
     * }
     */
    public static void BytesPerCacheLine(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerCacheLine$LAYOUT, BytesPerCacheLine$OFFSET, fieldValue);
    }

    private static final OfInt BytesOffsetForCacheAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesOffsetForCacheAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForCacheAlignment
     * }
     */
    public static final OfInt BytesOffsetForCacheAlignment$layout() {
        return BytesOffsetForCacheAlignment$LAYOUT;
    }

    private static final long BytesOffsetForCacheAlignment$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForCacheAlignment
     * }
     */
    public static final long BytesOffsetForCacheAlignment$offset() {
        return BytesOffsetForCacheAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForCacheAlignment
     * }
     */
    public static int BytesOffsetForCacheAlignment(MemorySegment struct) {
        return struct.get(BytesOffsetForCacheAlignment$LAYOUT, BytesOffsetForCacheAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForCacheAlignment
     * }
     */
    public static void BytesOffsetForCacheAlignment(MemorySegment struct, int fieldValue) {
        struct.set(BytesOffsetForCacheAlignment$LAYOUT, BytesOffsetForCacheAlignment$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerLogicalSector$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerLogicalSector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerLogicalSector
     * }
     */
    public static final OfInt BytesPerLogicalSector$layout() {
        return BytesPerLogicalSector$LAYOUT;
    }

    private static final long BytesPerLogicalSector$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerLogicalSector
     * }
     */
    public static final long BytesPerLogicalSector$offset() {
        return BytesPerLogicalSector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerLogicalSector
     * }
     */
    public static int BytesPerLogicalSector(MemorySegment struct) {
        return struct.get(BytesPerLogicalSector$LAYOUT, BytesPerLogicalSector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerLogicalSector
     * }
     */
    public static void BytesPerLogicalSector(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerLogicalSector$LAYOUT, BytesPerLogicalSector$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerPhysicalSector$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerPhysicalSector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static final OfInt BytesPerPhysicalSector$layout() {
        return BytesPerPhysicalSector$LAYOUT;
    }

    private static final long BytesPerPhysicalSector$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static final long BytesPerPhysicalSector$offset() {
        return BytesPerPhysicalSector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static int BytesPerPhysicalSector(MemorySegment struct) {
        return struct.get(BytesPerPhysicalSector$LAYOUT, BytesPerPhysicalSector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static void BytesPerPhysicalSector(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerPhysicalSector$LAYOUT, BytesPerPhysicalSector$OFFSET, fieldValue);
    }

    private static final OfInt BytesOffsetForSectorAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesOffsetForSectorAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForSectorAlignment
     * }
     */
    public static final OfInt BytesOffsetForSectorAlignment$layout() {
        return BytesOffsetForSectorAlignment$LAYOUT;
    }

    private static final long BytesOffsetForSectorAlignment$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForSectorAlignment
     * }
     */
    public static final long BytesOffsetForSectorAlignment$offset() {
        return BytesOffsetForSectorAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForSectorAlignment
     * }
     */
    public static int BytesOffsetForSectorAlignment(MemorySegment struct) {
        return struct.get(BytesOffsetForSectorAlignment$LAYOUT, BytesOffsetForSectorAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesOffsetForSectorAlignment
     * }
     */
    public static void BytesOffsetForSectorAlignment(MemorySegment struct, int fieldValue) {
        struct.set(BytesOffsetForSectorAlignment$LAYOUT, BytesOffsetForSectorAlignment$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

