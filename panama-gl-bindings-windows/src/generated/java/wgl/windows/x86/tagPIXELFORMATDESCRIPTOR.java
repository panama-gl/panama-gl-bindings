// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagPIXELFORMATDESCRIPTOR {
 *     WORD nSize;
 *     WORD nVersion;
 *     DWORD dwFlags;
 *     BYTE iPixelType;
 *     BYTE cColorBits;
 *     BYTE cRedBits;
 *     BYTE cRedShift;
 *     BYTE cGreenBits;
 *     BYTE cGreenShift;
 *     BYTE cBlueBits;
 *     BYTE cBlueShift;
 *     BYTE cAlphaBits;
 *     BYTE cAlphaShift;
 *     BYTE cAccumBits;
 *     BYTE cAccumRedBits;
 *     BYTE cAccumGreenBits;
 *     BYTE cAccumBlueBits;
 *     BYTE cAccumAlphaBits;
 *     BYTE cDepthBits;
 *     BYTE cStencilBits;
 *     BYTE cAuxBuffers;
 *     BYTE iLayerType;
 *     BYTE bReserved;
 *     DWORD dwLayerMask;
 *     DWORD dwVisibleMask;
 *     DWORD dwDamageMask;
 * }
 * }
 */
public class tagPIXELFORMATDESCRIPTOR {

    tagPIXELFORMATDESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("nSize"),
        wgl_h.C_SHORT.withName("nVersion"),
        wgl_h.C_LONG.withName("dwFlags"),
        wgl_h.C_CHAR.withName("iPixelType"),
        wgl_h.C_CHAR.withName("cColorBits"),
        wgl_h.C_CHAR.withName("cRedBits"),
        wgl_h.C_CHAR.withName("cRedShift"),
        wgl_h.C_CHAR.withName("cGreenBits"),
        wgl_h.C_CHAR.withName("cGreenShift"),
        wgl_h.C_CHAR.withName("cBlueBits"),
        wgl_h.C_CHAR.withName("cBlueShift"),
        wgl_h.C_CHAR.withName("cAlphaBits"),
        wgl_h.C_CHAR.withName("cAlphaShift"),
        wgl_h.C_CHAR.withName("cAccumBits"),
        wgl_h.C_CHAR.withName("cAccumRedBits"),
        wgl_h.C_CHAR.withName("cAccumGreenBits"),
        wgl_h.C_CHAR.withName("cAccumBlueBits"),
        wgl_h.C_CHAR.withName("cAccumAlphaBits"),
        wgl_h.C_CHAR.withName("cDepthBits"),
        wgl_h.C_CHAR.withName("cStencilBits"),
        wgl_h.C_CHAR.withName("cAuxBuffers"),
        wgl_h.C_CHAR.withName("iLayerType"),
        wgl_h.C_CHAR.withName("bReserved"),
        wgl_h.C_LONG.withName("dwLayerMask"),
        wgl_h.C_LONG.withName("dwVisibleMask"),
        wgl_h.C_LONG.withName("dwDamageMask")
    ).withName("tagPIXELFORMATDESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort nSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("nSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD nSize
     * }
     */
    public static final OfShort nSize$layout() {
        return nSize$LAYOUT;
    }

    private static final long nSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD nSize
     * }
     */
    public static final long nSize$offset() {
        return nSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD nSize
     * }
     */
    public static short nSize(MemorySegment struct) {
        return struct.get(nSize$LAYOUT, nSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD nSize
     * }
     */
    public static void nSize(MemorySegment struct, short fieldValue) {
        struct.set(nSize$LAYOUT, nSize$OFFSET, fieldValue);
    }

    private static final OfShort nVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("nVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD nVersion
     * }
     */
    public static final OfShort nVersion$layout() {
        return nVersion$LAYOUT;
    }

    private static final long nVersion$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD nVersion
     * }
     */
    public static final long nVersion$offset() {
        return nVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD nVersion
     * }
     */
    public static short nVersion(MemorySegment struct) {
        return struct.get(nVersion$LAYOUT, nVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD nVersion
     * }
     */
    public static void nVersion(MemorySegment struct, short fieldValue) {
        struct.set(nVersion$LAYOUT, nVersion$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    private static final OfByte iPixelType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("iPixelType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE iPixelType
     * }
     */
    public static final OfByte iPixelType$layout() {
        return iPixelType$LAYOUT;
    }

    private static final long iPixelType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE iPixelType
     * }
     */
    public static final long iPixelType$offset() {
        return iPixelType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE iPixelType
     * }
     */
    public static byte iPixelType(MemorySegment struct) {
        return struct.get(iPixelType$LAYOUT, iPixelType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE iPixelType
     * }
     */
    public static void iPixelType(MemorySegment struct, byte fieldValue) {
        struct.set(iPixelType$LAYOUT, iPixelType$OFFSET, fieldValue);
    }

    private static final OfByte cColorBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cColorBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cColorBits
     * }
     */
    public static final OfByte cColorBits$layout() {
        return cColorBits$LAYOUT;
    }

    private static final long cColorBits$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cColorBits
     * }
     */
    public static final long cColorBits$offset() {
        return cColorBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cColorBits
     * }
     */
    public static byte cColorBits(MemorySegment struct) {
        return struct.get(cColorBits$LAYOUT, cColorBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cColorBits
     * }
     */
    public static void cColorBits(MemorySegment struct, byte fieldValue) {
        struct.set(cColorBits$LAYOUT, cColorBits$OFFSET, fieldValue);
    }

    private static final OfByte cRedBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cRedBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cRedBits
     * }
     */
    public static final OfByte cRedBits$layout() {
        return cRedBits$LAYOUT;
    }

    private static final long cRedBits$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cRedBits
     * }
     */
    public static final long cRedBits$offset() {
        return cRedBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cRedBits
     * }
     */
    public static byte cRedBits(MemorySegment struct) {
        return struct.get(cRedBits$LAYOUT, cRedBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cRedBits
     * }
     */
    public static void cRedBits(MemorySegment struct, byte fieldValue) {
        struct.set(cRedBits$LAYOUT, cRedBits$OFFSET, fieldValue);
    }

    private static final OfByte cRedShift$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cRedShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cRedShift
     * }
     */
    public static final OfByte cRedShift$layout() {
        return cRedShift$LAYOUT;
    }

    private static final long cRedShift$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cRedShift
     * }
     */
    public static final long cRedShift$offset() {
        return cRedShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cRedShift
     * }
     */
    public static byte cRedShift(MemorySegment struct) {
        return struct.get(cRedShift$LAYOUT, cRedShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cRedShift
     * }
     */
    public static void cRedShift(MemorySegment struct, byte fieldValue) {
        struct.set(cRedShift$LAYOUT, cRedShift$OFFSET, fieldValue);
    }

    private static final OfByte cGreenBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cGreenBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cGreenBits
     * }
     */
    public static final OfByte cGreenBits$layout() {
        return cGreenBits$LAYOUT;
    }

    private static final long cGreenBits$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cGreenBits
     * }
     */
    public static final long cGreenBits$offset() {
        return cGreenBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cGreenBits
     * }
     */
    public static byte cGreenBits(MemorySegment struct) {
        return struct.get(cGreenBits$LAYOUT, cGreenBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cGreenBits
     * }
     */
    public static void cGreenBits(MemorySegment struct, byte fieldValue) {
        struct.set(cGreenBits$LAYOUT, cGreenBits$OFFSET, fieldValue);
    }

    private static final OfByte cGreenShift$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cGreenShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cGreenShift
     * }
     */
    public static final OfByte cGreenShift$layout() {
        return cGreenShift$LAYOUT;
    }

    private static final long cGreenShift$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cGreenShift
     * }
     */
    public static final long cGreenShift$offset() {
        return cGreenShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cGreenShift
     * }
     */
    public static byte cGreenShift(MemorySegment struct) {
        return struct.get(cGreenShift$LAYOUT, cGreenShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cGreenShift
     * }
     */
    public static void cGreenShift(MemorySegment struct, byte fieldValue) {
        struct.set(cGreenShift$LAYOUT, cGreenShift$OFFSET, fieldValue);
    }

    private static final OfByte cBlueBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cBlueBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cBlueBits
     * }
     */
    public static final OfByte cBlueBits$layout() {
        return cBlueBits$LAYOUT;
    }

    private static final long cBlueBits$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cBlueBits
     * }
     */
    public static final long cBlueBits$offset() {
        return cBlueBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cBlueBits
     * }
     */
    public static byte cBlueBits(MemorySegment struct) {
        return struct.get(cBlueBits$LAYOUT, cBlueBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cBlueBits
     * }
     */
    public static void cBlueBits(MemorySegment struct, byte fieldValue) {
        struct.set(cBlueBits$LAYOUT, cBlueBits$OFFSET, fieldValue);
    }

    private static final OfByte cBlueShift$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cBlueShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cBlueShift
     * }
     */
    public static final OfByte cBlueShift$layout() {
        return cBlueShift$LAYOUT;
    }

    private static final long cBlueShift$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cBlueShift
     * }
     */
    public static final long cBlueShift$offset() {
        return cBlueShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cBlueShift
     * }
     */
    public static byte cBlueShift(MemorySegment struct) {
        return struct.get(cBlueShift$LAYOUT, cBlueShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cBlueShift
     * }
     */
    public static void cBlueShift(MemorySegment struct, byte fieldValue) {
        struct.set(cBlueShift$LAYOUT, cBlueShift$OFFSET, fieldValue);
    }

    private static final OfByte cAlphaBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAlphaBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAlphaBits
     * }
     */
    public static final OfByte cAlphaBits$layout() {
        return cAlphaBits$LAYOUT;
    }

    private static final long cAlphaBits$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAlphaBits
     * }
     */
    public static final long cAlphaBits$offset() {
        return cAlphaBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAlphaBits
     * }
     */
    public static byte cAlphaBits(MemorySegment struct) {
        return struct.get(cAlphaBits$LAYOUT, cAlphaBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAlphaBits
     * }
     */
    public static void cAlphaBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAlphaBits$LAYOUT, cAlphaBits$OFFSET, fieldValue);
    }

    private static final OfByte cAlphaShift$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAlphaShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAlphaShift
     * }
     */
    public static final OfByte cAlphaShift$layout() {
        return cAlphaShift$LAYOUT;
    }

    private static final long cAlphaShift$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAlphaShift
     * }
     */
    public static final long cAlphaShift$offset() {
        return cAlphaShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAlphaShift
     * }
     */
    public static byte cAlphaShift(MemorySegment struct) {
        return struct.get(cAlphaShift$LAYOUT, cAlphaShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAlphaShift
     * }
     */
    public static void cAlphaShift(MemorySegment struct, byte fieldValue) {
        struct.set(cAlphaShift$LAYOUT, cAlphaShift$OFFSET, fieldValue);
    }

    private static final OfByte cAccumBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAccumBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAccumBits
     * }
     */
    public static final OfByte cAccumBits$layout() {
        return cAccumBits$LAYOUT;
    }

    private static final long cAccumBits$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAccumBits
     * }
     */
    public static final long cAccumBits$offset() {
        return cAccumBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAccumBits
     * }
     */
    public static byte cAccumBits(MemorySegment struct) {
        return struct.get(cAccumBits$LAYOUT, cAccumBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAccumBits
     * }
     */
    public static void cAccumBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAccumBits$LAYOUT, cAccumBits$OFFSET, fieldValue);
    }

    private static final OfByte cAccumRedBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAccumRedBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAccumRedBits
     * }
     */
    public static final OfByte cAccumRedBits$layout() {
        return cAccumRedBits$LAYOUT;
    }

    private static final long cAccumRedBits$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAccumRedBits
     * }
     */
    public static final long cAccumRedBits$offset() {
        return cAccumRedBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAccumRedBits
     * }
     */
    public static byte cAccumRedBits(MemorySegment struct) {
        return struct.get(cAccumRedBits$LAYOUT, cAccumRedBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAccumRedBits
     * }
     */
    public static void cAccumRedBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAccumRedBits$LAYOUT, cAccumRedBits$OFFSET, fieldValue);
    }

    private static final OfByte cAccumGreenBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAccumGreenBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAccumGreenBits
     * }
     */
    public static final OfByte cAccumGreenBits$layout() {
        return cAccumGreenBits$LAYOUT;
    }

    private static final long cAccumGreenBits$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAccumGreenBits
     * }
     */
    public static final long cAccumGreenBits$offset() {
        return cAccumGreenBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAccumGreenBits
     * }
     */
    public static byte cAccumGreenBits(MemorySegment struct) {
        return struct.get(cAccumGreenBits$LAYOUT, cAccumGreenBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAccumGreenBits
     * }
     */
    public static void cAccumGreenBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAccumGreenBits$LAYOUT, cAccumGreenBits$OFFSET, fieldValue);
    }

    private static final OfByte cAccumBlueBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAccumBlueBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAccumBlueBits
     * }
     */
    public static final OfByte cAccumBlueBits$layout() {
        return cAccumBlueBits$LAYOUT;
    }

    private static final long cAccumBlueBits$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAccumBlueBits
     * }
     */
    public static final long cAccumBlueBits$offset() {
        return cAccumBlueBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAccumBlueBits
     * }
     */
    public static byte cAccumBlueBits(MemorySegment struct) {
        return struct.get(cAccumBlueBits$LAYOUT, cAccumBlueBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAccumBlueBits
     * }
     */
    public static void cAccumBlueBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAccumBlueBits$LAYOUT, cAccumBlueBits$OFFSET, fieldValue);
    }

    private static final OfByte cAccumAlphaBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAccumAlphaBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAccumAlphaBits
     * }
     */
    public static final OfByte cAccumAlphaBits$layout() {
        return cAccumAlphaBits$LAYOUT;
    }

    private static final long cAccumAlphaBits$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAccumAlphaBits
     * }
     */
    public static final long cAccumAlphaBits$offset() {
        return cAccumAlphaBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAccumAlphaBits
     * }
     */
    public static byte cAccumAlphaBits(MemorySegment struct) {
        return struct.get(cAccumAlphaBits$LAYOUT, cAccumAlphaBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAccumAlphaBits
     * }
     */
    public static void cAccumAlphaBits(MemorySegment struct, byte fieldValue) {
        struct.set(cAccumAlphaBits$LAYOUT, cAccumAlphaBits$OFFSET, fieldValue);
    }

    private static final OfByte cDepthBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cDepthBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cDepthBits
     * }
     */
    public static final OfByte cDepthBits$layout() {
        return cDepthBits$LAYOUT;
    }

    private static final long cDepthBits$OFFSET = 23;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cDepthBits
     * }
     */
    public static final long cDepthBits$offset() {
        return cDepthBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cDepthBits
     * }
     */
    public static byte cDepthBits(MemorySegment struct) {
        return struct.get(cDepthBits$LAYOUT, cDepthBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cDepthBits
     * }
     */
    public static void cDepthBits(MemorySegment struct, byte fieldValue) {
        struct.set(cDepthBits$LAYOUT, cDepthBits$OFFSET, fieldValue);
    }

    private static final OfByte cStencilBits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cStencilBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cStencilBits
     * }
     */
    public static final OfByte cStencilBits$layout() {
        return cStencilBits$LAYOUT;
    }

    private static final long cStencilBits$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cStencilBits
     * }
     */
    public static final long cStencilBits$offset() {
        return cStencilBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cStencilBits
     * }
     */
    public static byte cStencilBits(MemorySegment struct) {
        return struct.get(cStencilBits$LAYOUT, cStencilBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cStencilBits
     * }
     */
    public static void cStencilBits(MemorySegment struct, byte fieldValue) {
        struct.set(cStencilBits$LAYOUT, cStencilBits$OFFSET, fieldValue);
    }

    private static final OfByte cAuxBuffers$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cAuxBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE cAuxBuffers
     * }
     */
    public static final OfByte cAuxBuffers$layout() {
        return cAuxBuffers$LAYOUT;
    }

    private static final long cAuxBuffers$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE cAuxBuffers
     * }
     */
    public static final long cAuxBuffers$offset() {
        return cAuxBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE cAuxBuffers
     * }
     */
    public static byte cAuxBuffers(MemorySegment struct) {
        return struct.get(cAuxBuffers$LAYOUT, cAuxBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE cAuxBuffers
     * }
     */
    public static void cAuxBuffers(MemorySegment struct, byte fieldValue) {
        struct.set(cAuxBuffers$LAYOUT, cAuxBuffers$OFFSET, fieldValue);
    }

    private static final OfByte iLayerType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("iLayerType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE iLayerType
     * }
     */
    public static final OfByte iLayerType$layout() {
        return iLayerType$LAYOUT;
    }

    private static final long iLayerType$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE iLayerType
     * }
     */
    public static final long iLayerType$offset() {
        return iLayerType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE iLayerType
     * }
     */
    public static byte iLayerType(MemorySegment struct) {
        return struct.get(iLayerType$LAYOUT, iLayerType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE iLayerType
     * }
     */
    public static void iLayerType(MemorySegment struct, byte fieldValue) {
        struct.set(iLayerType$LAYOUT, iLayerType$OFFSET, fieldValue);
    }

    private static final OfByte bReserved$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final OfByte bReserved$layout() {
        return bReserved$LAYOUT;
    }

    private static final long bReserved$OFFSET = 27;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final long bReserved$offset() {
        return bReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static byte bReserved(MemorySegment struct) {
        return struct.get(bReserved$LAYOUT, bReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static void bReserved(MemorySegment struct, byte fieldValue) {
        struct.set(bReserved$LAYOUT, bReserved$OFFSET, fieldValue);
    }

    private static final OfInt dwLayerMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwLayerMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwLayerMask
     * }
     */
    public static final OfInt dwLayerMask$layout() {
        return dwLayerMask$LAYOUT;
    }

    private static final long dwLayerMask$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwLayerMask
     * }
     */
    public static final long dwLayerMask$offset() {
        return dwLayerMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwLayerMask
     * }
     */
    public static int dwLayerMask(MemorySegment struct) {
        return struct.get(dwLayerMask$LAYOUT, dwLayerMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwLayerMask
     * }
     */
    public static void dwLayerMask(MemorySegment struct, int fieldValue) {
        struct.set(dwLayerMask$LAYOUT, dwLayerMask$OFFSET, fieldValue);
    }

    private static final OfInt dwVisibleMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVisibleMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVisibleMask
     * }
     */
    public static final OfInt dwVisibleMask$layout() {
        return dwVisibleMask$LAYOUT;
    }

    private static final long dwVisibleMask$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVisibleMask
     * }
     */
    public static final long dwVisibleMask$offset() {
        return dwVisibleMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVisibleMask
     * }
     */
    public static int dwVisibleMask(MemorySegment struct) {
        return struct.get(dwVisibleMask$LAYOUT, dwVisibleMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVisibleMask
     * }
     */
    public static void dwVisibleMask(MemorySegment struct, int fieldValue) {
        struct.set(dwVisibleMask$LAYOUT, dwVisibleMask$OFFSET, fieldValue);
    }

    private static final OfInt dwDamageMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDamageMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwDamageMask
     * }
     */
    public static final OfInt dwDamageMask$layout() {
        return dwDamageMask$LAYOUT;
    }

    private static final long dwDamageMask$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwDamageMask
     * }
     */
    public static final long dwDamageMask$offset() {
        return dwDamageMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwDamageMask
     * }
     */
    public static int dwDamageMask(MemorySegment struct) {
        return struct.get(dwDamageMask$LAYOUT, dwDamageMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwDamageMask
     * }
     */
    public static void dwDamageMask(MemorySegment struct, int fieldValue) {
        struct.set(dwDamageMask$LAYOUT, dwDamageMask$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

