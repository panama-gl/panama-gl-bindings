// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CMS_KEY_INFO {
 *     DWORD dwVersion;
 *     ALG_ID Algid;
 *     BYTE *pbOID;
 *     DWORD cbOID;
 * }
 * }
 */
public class _CMS_KEY_INFO {

    _CMS_KEY_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwVersion"),
        wgl_h.C_INT.withName("Algid"),
        wgl_h.C_POINTER.withName("pbOID"),
        wgl_h.C_LONG.withName("cbOID"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CMS_KEY_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final OfInt dwVersion$layout() {
        return dwVersion$LAYOUT;
    }

    private static final long dwVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static final long dwVersion$offset() {
        return dwVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static int dwVersion(MemorySegment struct) {
        return struct.get(dwVersion$LAYOUT, dwVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwVersion
     * }
     */
    public static void dwVersion(MemorySegment struct, int fieldValue) {
        struct.set(dwVersion$LAYOUT, dwVersion$OFFSET, fieldValue);
    }

    private static final OfInt Algid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Algid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ALG_ID Algid
     * }
     */
    public static final OfInt Algid$layout() {
        return Algid$LAYOUT;
    }

    private static final long Algid$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ALG_ID Algid
     * }
     */
    public static final long Algid$offset() {
        return Algid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ALG_ID Algid
     * }
     */
    public static int Algid(MemorySegment struct) {
        return struct.get(Algid$LAYOUT, Algid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ALG_ID Algid
     * }
     */
    public static void Algid(MemorySegment struct, int fieldValue) {
        struct.set(Algid$LAYOUT, Algid$OFFSET, fieldValue);
    }

    private static final AddressLayout pbOID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pbOID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE *pbOID
     * }
     */
    public static final AddressLayout pbOID$layout() {
        return pbOID$LAYOUT;
    }

    private static final long pbOID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE *pbOID
     * }
     */
    public static final long pbOID$offset() {
        return pbOID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE *pbOID
     * }
     */
    public static MemorySegment pbOID(MemorySegment struct) {
        return struct.get(pbOID$LAYOUT, pbOID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE *pbOID
     * }
     */
    public static void pbOID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pbOID$LAYOUT, pbOID$OFFSET, fieldValue);
    }

    private static final OfInt cbOID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbOID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbOID
     * }
     */
    public static final OfInt cbOID$layout() {
        return cbOID$LAYOUT;
    }

    private static final long cbOID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbOID
     * }
     */
    public static final long cbOID$offset() {
        return cbOID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbOID
     * }
     */
    public static int cbOID(MemorySegment struct) {
        return struct.get(cbOID$LAYOUT, cbOID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbOID
     * }
     */
    public static void cbOID(MemorySegment struct, int fieldValue) {
        struct.set(cbOID$LAYOUT, cbOID$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

