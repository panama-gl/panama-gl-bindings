// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _tagPROTOCOLFILTERDATA {
 *     DWORD cbSize;
 *     IInternetProtocolSink *pProtocolSink;
 *     IInternetProtocol *pProtocol;
 *     IUnknown *pUnk;
 *     DWORD dwFilterFlags;
 * }
 * }
 */
public class _tagPROTOCOLFILTERDATA {

    _tagPROTOCOLFILTERDATA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("pProtocolSink"),
        wgl_h.C_POINTER.withName("pProtocol"),
        wgl_h.C_POINTER.withName("pUnk"),
        wgl_h.C_LONG.withName("dwFilterFlags"),
        MemoryLayout.paddingLayout(4)
    ).withName("_tagPROTOCOLFILTERDATA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final AddressLayout pProtocolSink$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pProtocolSink"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IInternetProtocolSink *pProtocolSink
     * }
     */
    public static final AddressLayout pProtocolSink$layout() {
        return pProtocolSink$LAYOUT;
    }

    private static final long pProtocolSink$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IInternetProtocolSink *pProtocolSink
     * }
     */
    public static final long pProtocolSink$offset() {
        return pProtocolSink$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IInternetProtocolSink *pProtocolSink
     * }
     */
    public static MemorySegment pProtocolSink(MemorySegment struct) {
        return struct.get(pProtocolSink$LAYOUT, pProtocolSink$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IInternetProtocolSink *pProtocolSink
     * }
     */
    public static void pProtocolSink(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pProtocolSink$LAYOUT, pProtocolSink$OFFSET, fieldValue);
    }

    private static final AddressLayout pProtocol$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pProtocol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IInternetProtocol *pProtocol
     * }
     */
    public static final AddressLayout pProtocol$layout() {
        return pProtocol$LAYOUT;
    }

    private static final long pProtocol$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IInternetProtocol *pProtocol
     * }
     */
    public static final long pProtocol$offset() {
        return pProtocol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IInternetProtocol *pProtocol
     * }
     */
    public static MemorySegment pProtocol(MemorySegment struct) {
        return struct.get(pProtocol$LAYOUT, pProtocol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IInternetProtocol *pProtocol
     * }
     */
    public static void pProtocol(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pProtocol$LAYOUT, pProtocol$OFFSET, fieldValue);
    }

    private static final AddressLayout pUnk$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUnk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static final AddressLayout pUnk$layout() {
        return pUnk$LAYOUT;
    }

    private static final long pUnk$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static final long pUnk$offset() {
        return pUnk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static MemorySegment pUnk(MemorySegment struct) {
        return struct.get(pUnk$LAYOUT, pUnk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static void pUnk(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUnk$LAYOUT, pUnk$OFFSET, fieldValue);
    }

    private static final OfInt dwFilterFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFilterFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFilterFlags
     * }
     */
    public static final OfInt dwFilterFlags$layout() {
        return dwFilterFlags$LAYOUT;
    }

    private static final long dwFilterFlags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFilterFlags
     * }
     */
    public static final long dwFilterFlags$offset() {
        return dwFilterFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFilterFlags
     * }
     */
    public static int dwFilterFlags(MemorySegment struct) {
        return struct.get(dwFilterFlags$LAYOUT, dwFilterFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFilterFlags
     * }
     */
    public static void dwFilterFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFilterFlags$LAYOUT, dwFilterFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

