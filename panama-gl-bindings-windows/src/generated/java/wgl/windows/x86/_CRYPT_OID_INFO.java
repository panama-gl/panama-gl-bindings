// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CRYPT_OID_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pszOID"),
        Constants$root.C_POINTER$LAYOUT.withName("pwszName"),
        Constants$root.C_LONG$LAYOUT.withName("dwGroupId"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("dwValue"),
            Constants$root.C_LONG$LAYOUT.withName("Algid"),
            Constants$root.C_LONG$LAYOUT.withName("dwLength")
        ).withName("$anon$0"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("ExtraInfo")
    ).withName("_CRYPT_OID_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CRYPT_OID_INFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CRYPT_OID_INFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CRYPT_OID_INFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CRYPT_OID_INFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OID_INFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CRYPT_OID_INFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pszOID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pszOID"));
    public static VarHandle pszOID$VH() {
        return _CRYPT_OID_INFO.pszOID$VH;
    }
    public static MemoryAddress pszOID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OID_INFO.pszOID$VH.get(seg);
    }
    public static void pszOID$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OID_INFO.pszOID$VH.set(seg, x);
    }
    public static MemoryAddress pszOID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OID_INFO.pszOID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pszOID$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OID_INFO.pszOID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pwszName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pwszName"));
    public static VarHandle pwszName$VH() {
        return _CRYPT_OID_INFO.pwszName$VH;
    }
    public static MemoryAddress pwszName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OID_INFO.pwszName$VH.get(seg);
    }
    public static void pwszName$set( MemorySegment seg, MemoryAddress x) {
        _CRYPT_OID_INFO.pwszName$VH.set(seg, x);
    }
    public static MemoryAddress pwszName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CRYPT_OID_INFO.pwszName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pwszName$set(MemorySegment seg, long index, MemoryAddress x) {
        _CRYPT_OID_INFO.pwszName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwGroupId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwGroupId"));
    public static VarHandle dwGroupId$VH() {
        return _CRYPT_OID_INFO.dwGroupId$VH;
    }
    public static int dwGroupId$get(MemorySegment seg) {
        return (int)_CRYPT_OID_INFO.dwGroupId$VH.get(seg);
    }
    public static void dwGroupId$set( MemorySegment seg, int x) {
        _CRYPT_OID_INFO.dwGroupId$VH.set(seg, x);
    }
    public static int dwGroupId$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OID_INFO.dwGroupId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwGroupId$set(MemorySegment seg, long index, int x) {
        _CRYPT_OID_INFO.dwGroupId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwValue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("dwValue"));
    public static VarHandle dwValue$VH() {
        return _CRYPT_OID_INFO.dwValue$VH;
    }
    public static int dwValue$get(MemorySegment seg) {
        return (int)_CRYPT_OID_INFO.dwValue$VH.get(seg);
    }
    public static void dwValue$set( MemorySegment seg, int x) {
        _CRYPT_OID_INFO.dwValue$VH.set(seg, x);
    }
    public static int dwValue$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OID_INFO.dwValue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwValue$set(MemorySegment seg, long index, int x) {
        _CRYPT_OID_INFO.dwValue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Algid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Algid"));
    public static VarHandle Algid$VH() {
        return _CRYPT_OID_INFO.Algid$VH;
    }
    public static int Algid$get(MemorySegment seg) {
        return (int)_CRYPT_OID_INFO.Algid$VH.get(seg);
    }
    public static void Algid$set( MemorySegment seg, int x) {
        _CRYPT_OID_INFO.Algid$VH.set(seg, x);
    }
    public static int Algid$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OID_INFO.Algid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Algid$set(MemorySegment seg, long index, int x) {
        _CRYPT_OID_INFO.Algid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("dwLength"));
    public static VarHandle dwLength$VH() {
        return _CRYPT_OID_INFO.dwLength$VH;
    }
    public static int dwLength$get(MemorySegment seg) {
        return (int)_CRYPT_OID_INFO.dwLength$VH.get(seg);
    }
    public static void dwLength$set( MemorySegment seg, int x) {
        _CRYPT_OID_INFO.dwLength$VH.set(seg, x);
    }
    public static int dwLength$get(MemorySegment seg, long index) {
        return (int)_CRYPT_OID_INFO.dwLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLength$set(MemorySegment seg, long index, int x) {
        _CRYPT_OID_INFO.dwLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ExtraInfo$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


