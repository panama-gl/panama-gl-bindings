// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRYPT_ECC_CMS_SHARED_INFO {
 *     CRYPT_ALGORITHM_IDENTIFIER Algorithm;
 *     CRYPT_DATA_BLOB EntityUInfo;
 *     BYTE rgbSuppPubInfo[4];
 * }
 * }
 */
public class _CRYPT_ECC_CMS_SHARED_INFO {

    _CRYPT_ECC_CMS_SHARED_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("Algorithm"),
        _CRYPTOAPI_BLOB.layout().withName("EntityUInfo"),
        MemoryLayout.sequenceLayout(4, wgl_h.C_CHAR).withName("rgbSuppPubInfo"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CRYPT_ECC_CMS_SHARED_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Algorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Algorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static final GroupLayout Algorithm$layout() {
        return Algorithm$LAYOUT;
    }

    private static final long Algorithm$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static final long Algorithm$offset() {
        return Algorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static MemorySegment Algorithm(MemorySegment struct) {
        return struct.asSlice(Algorithm$OFFSET, Algorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER Algorithm
     * }
     */
    public static void Algorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Algorithm$OFFSET, Algorithm$LAYOUT.byteSize());
    }

    private static final GroupLayout EntityUInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("EntityUInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB EntityUInfo
     * }
     */
    public static final GroupLayout EntityUInfo$layout() {
        return EntityUInfo$LAYOUT;
    }

    private static final long EntityUInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB EntityUInfo
     * }
     */
    public static final long EntityUInfo$offset() {
        return EntityUInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB EntityUInfo
     * }
     */
    public static MemorySegment EntityUInfo(MemorySegment struct) {
        return struct.asSlice(EntityUInfo$OFFSET, EntityUInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB EntityUInfo
     * }
     */
    public static void EntityUInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, EntityUInfo$OFFSET, EntityUInfo$LAYOUT.byteSize());
    }

    private static final SequenceLayout rgbSuppPubInfo$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgbSuppPubInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static final SequenceLayout rgbSuppPubInfo$layout() {
        return rgbSuppPubInfo$LAYOUT;
    }

    private static final long rgbSuppPubInfo$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static final long rgbSuppPubInfo$offset() {
        return rgbSuppPubInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static MemorySegment rgbSuppPubInfo(MemorySegment struct) {
        return struct.asSlice(rgbSuppPubInfo$OFFSET, rgbSuppPubInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static void rgbSuppPubInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgbSuppPubInfo$OFFSET, rgbSuppPubInfo$LAYOUT.byteSize());
    }

    private static long[] rgbSuppPubInfo$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static long[] rgbSuppPubInfo$dimensions() {
        return rgbSuppPubInfo$DIMS;
    }
    private static final VarHandle rgbSuppPubInfo$ELEM_HANDLE = rgbSuppPubInfo$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static byte rgbSuppPubInfo(MemorySegment struct, long index0) {
        return (byte)rgbSuppPubInfo$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE rgbSuppPubInfo[4]
     * }
     */
    public static void rgbSuppPubInfo(MemorySegment struct, long index0, byte fieldValue) {
        rgbSuppPubInfo$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

