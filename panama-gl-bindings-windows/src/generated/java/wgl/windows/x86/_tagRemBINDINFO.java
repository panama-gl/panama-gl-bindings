// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _tagRemBINDINFO {
 *     ULONG cbSize;
 *     LPWSTR szExtraInfo;
 *     DWORD grfBindInfoF;
 *     DWORD dwBindVerb;
 *     LPWSTR szCustomVerb;
 *     DWORD cbstgmedData;
 *     DWORD dwOptions;
 *     DWORD dwOptionsFlags;
 *     DWORD dwCodePage;
 *     REMSECURITY_ATTRIBUTES securityAttributes;
 *     IID iid;
 *     IUnknown *pUnk;
 *     DWORD dwReserved;
 * }
 * }
 */
public class _tagRemBINDINFO {

    _tagRemBINDINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("szExtraInfo"),
        wgl_h.C_LONG.withName("grfBindInfoF"),
        wgl_h.C_LONG.withName("dwBindVerb"),
        wgl_h.C_POINTER.withName("szCustomVerb"),
        wgl_h.C_LONG.withName("cbstgmedData"),
        wgl_h.C_LONG.withName("dwOptions"),
        wgl_h.C_LONG.withName("dwOptionsFlags"),
        wgl_h.C_LONG.withName("dwCodePage"),
        _REMSECURITY_ATTRIBUTES.layout().withName("securityAttributes"),
        _GUID.layout().withName("iid"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("pUnk"),
        wgl_h.C_LONG.withName("dwReserved"),
        MemoryLayout.paddingLayout(4)
    ).withName("_tagRemBINDINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final AddressLayout szExtraInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("szExtraInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR szExtraInfo
     * }
     */
    public static final AddressLayout szExtraInfo$layout() {
        return szExtraInfo$LAYOUT;
    }

    private static final long szExtraInfo$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR szExtraInfo
     * }
     */
    public static final long szExtraInfo$offset() {
        return szExtraInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR szExtraInfo
     * }
     */
    public static MemorySegment szExtraInfo(MemorySegment struct) {
        return struct.get(szExtraInfo$LAYOUT, szExtraInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR szExtraInfo
     * }
     */
    public static void szExtraInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(szExtraInfo$LAYOUT, szExtraInfo$OFFSET, fieldValue);
    }

    private static final OfInt grfBindInfoF$LAYOUT = (OfInt)$LAYOUT.select(groupElement("grfBindInfoF"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD grfBindInfoF
     * }
     */
    public static final OfInt grfBindInfoF$layout() {
        return grfBindInfoF$LAYOUT;
    }

    private static final long grfBindInfoF$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD grfBindInfoF
     * }
     */
    public static final long grfBindInfoF$offset() {
        return grfBindInfoF$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD grfBindInfoF
     * }
     */
    public static int grfBindInfoF(MemorySegment struct) {
        return struct.get(grfBindInfoF$LAYOUT, grfBindInfoF$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD grfBindInfoF
     * }
     */
    public static void grfBindInfoF(MemorySegment struct, int fieldValue) {
        struct.set(grfBindInfoF$LAYOUT, grfBindInfoF$OFFSET, fieldValue);
    }

    private static final OfInt dwBindVerb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwBindVerb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwBindVerb
     * }
     */
    public static final OfInt dwBindVerb$layout() {
        return dwBindVerb$LAYOUT;
    }

    private static final long dwBindVerb$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwBindVerb
     * }
     */
    public static final long dwBindVerb$offset() {
        return dwBindVerb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwBindVerb
     * }
     */
    public static int dwBindVerb(MemorySegment struct) {
        return struct.get(dwBindVerb$LAYOUT, dwBindVerb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwBindVerb
     * }
     */
    public static void dwBindVerb(MemorySegment struct, int fieldValue) {
        struct.set(dwBindVerb$LAYOUT, dwBindVerb$OFFSET, fieldValue);
    }

    private static final AddressLayout szCustomVerb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("szCustomVerb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR szCustomVerb
     * }
     */
    public static final AddressLayout szCustomVerb$layout() {
        return szCustomVerb$LAYOUT;
    }

    private static final long szCustomVerb$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR szCustomVerb
     * }
     */
    public static final long szCustomVerb$offset() {
        return szCustomVerb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR szCustomVerb
     * }
     */
    public static MemorySegment szCustomVerb(MemorySegment struct) {
        return struct.get(szCustomVerb$LAYOUT, szCustomVerb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR szCustomVerb
     * }
     */
    public static void szCustomVerb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(szCustomVerb$LAYOUT, szCustomVerb$OFFSET, fieldValue);
    }

    private static final OfInt cbstgmedData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbstgmedData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbstgmedData
     * }
     */
    public static final OfInt cbstgmedData$layout() {
        return cbstgmedData$LAYOUT;
    }

    private static final long cbstgmedData$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbstgmedData
     * }
     */
    public static final long cbstgmedData$offset() {
        return cbstgmedData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbstgmedData
     * }
     */
    public static int cbstgmedData(MemorySegment struct) {
        return struct.get(cbstgmedData$LAYOUT, cbstgmedData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbstgmedData
     * }
     */
    public static void cbstgmedData(MemorySegment struct, int fieldValue) {
        struct.set(cbstgmedData$LAYOUT, cbstgmedData$OFFSET, fieldValue);
    }

    private static final OfInt dwOptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwOptions
     * }
     */
    public static final OfInt dwOptions$layout() {
        return dwOptions$LAYOUT;
    }

    private static final long dwOptions$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwOptions
     * }
     */
    public static final long dwOptions$offset() {
        return dwOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwOptions
     * }
     */
    public static int dwOptions(MemorySegment struct) {
        return struct.get(dwOptions$LAYOUT, dwOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwOptions
     * }
     */
    public static void dwOptions(MemorySegment struct, int fieldValue) {
        struct.set(dwOptions$LAYOUT, dwOptions$OFFSET, fieldValue);
    }

    private static final OfInt dwOptionsFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwOptionsFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwOptionsFlags
     * }
     */
    public static final OfInt dwOptionsFlags$layout() {
        return dwOptionsFlags$LAYOUT;
    }

    private static final long dwOptionsFlags$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwOptionsFlags
     * }
     */
    public static final long dwOptionsFlags$offset() {
        return dwOptionsFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwOptionsFlags
     * }
     */
    public static int dwOptionsFlags(MemorySegment struct) {
        return struct.get(dwOptionsFlags$LAYOUT, dwOptionsFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwOptionsFlags
     * }
     */
    public static void dwOptionsFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwOptionsFlags$LAYOUT, dwOptionsFlags$OFFSET, fieldValue);
    }

    private static final OfInt dwCodePage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCodePage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwCodePage
     * }
     */
    public static final OfInt dwCodePage$layout() {
        return dwCodePage$LAYOUT;
    }

    private static final long dwCodePage$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwCodePage
     * }
     */
    public static final long dwCodePage$offset() {
        return dwCodePage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwCodePage
     * }
     */
    public static int dwCodePage(MemorySegment struct) {
        return struct.get(dwCodePage$LAYOUT, dwCodePage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwCodePage
     * }
     */
    public static void dwCodePage(MemorySegment struct, int fieldValue) {
        struct.set(dwCodePage$LAYOUT, dwCodePage$OFFSET, fieldValue);
    }

    private static final GroupLayout securityAttributes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("securityAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * REMSECURITY_ATTRIBUTES securityAttributes
     * }
     */
    public static final GroupLayout securityAttributes$layout() {
        return securityAttributes$LAYOUT;
    }

    private static final long securityAttributes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * REMSECURITY_ATTRIBUTES securityAttributes
     * }
     */
    public static final long securityAttributes$offset() {
        return securityAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * REMSECURITY_ATTRIBUTES securityAttributes
     * }
     */
    public static MemorySegment securityAttributes(MemorySegment struct) {
        return struct.asSlice(securityAttributes$OFFSET, securityAttributes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * REMSECURITY_ATTRIBUTES securityAttributes
     * }
     */
    public static void securityAttributes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, securityAttributes$OFFSET, securityAttributes$LAYOUT.byteSize());
    }

    private static final GroupLayout iid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("iid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IID iid
     * }
     */
    public static final GroupLayout iid$layout() {
        return iid$LAYOUT;
    }

    private static final long iid$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IID iid
     * }
     */
    public static final long iid$offset() {
        return iid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IID iid
     * }
     */
    public static MemorySegment iid(MemorySegment struct) {
        return struct.asSlice(iid$OFFSET, iid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IID iid
     * }
     */
    public static void iid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, iid$OFFSET, iid$LAYOUT.byteSize());
    }

    private static final AddressLayout pUnk$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUnk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static final AddressLayout pUnk$layout() {
        return pUnk$LAYOUT;
    }

    private static final long pUnk$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static final long pUnk$offset() {
        return pUnk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static MemorySegment pUnk(MemorySegment struct) {
        return struct.get(pUnk$LAYOUT, pUnk$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IUnknown *pUnk
     * }
     */
    public static void pUnk(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUnk$LAYOUT, pUnk$OFFSET, fieldValue);
    }

    private static final OfInt dwReserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static final OfInt dwReserved$layout() {
        return dwReserved$LAYOUT;
    }

    private static final long dwReserved$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static final long dwReserved$offset() {
        return dwReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static int dwReserved(MemorySegment struct) {
        return struct.get(dwReserved$LAYOUT, dwReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwReserved
     * }
     */
    public static void dwReserved(MemorySegment struct, int fieldValue) {
        struct.set(dwReserved$LAYOUT, dwReserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

