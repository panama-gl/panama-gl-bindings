// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CREATE_PROCESS_DEBUG_INFO {
 *     HANDLE hFile;
 *     HANDLE hProcess;
 *     HANDLE hThread;
 *     LPVOID lpBaseOfImage;
 *     DWORD dwDebugInfoFileOffset;
 *     DWORD nDebugInfoSize;
 *     LPVOID lpThreadLocalBase;
 *     LPTHREAD_START_ROUTINE lpStartAddress;
 *     LPVOID lpImageName;
 *     WORD fUnicode;
 * }
 * }
 */
public class _CREATE_PROCESS_DEBUG_INFO {

    _CREATE_PROCESS_DEBUG_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("hFile"),
        wgl_h.C_POINTER.withName("hProcess"),
        wgl_h.C_POINTER.withName("hThread"),
        wgl_h.C_POINTER.withName("lpBaseOfImage"),
        wgl_h.C_LONG.withName("dwDebugInfoFileOffset"),
        wgl_h.C_LONG.withName("nDebugInfoSize"),
        wgl_h.C_POINTER.withName("lpThreadLocalBase"),
        wgl_h.C_POINTER.withName("lpStartAddress"),
        wgl_h.C_POINTER.withName("lpImageName"),
        wgl_h.C_SHORT.withName("fUnicode"),
        MemoryLayout.paddingLayout(6)
    ).withName("_CREATE_PROCESS_DEBUG_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout hFile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hFile
     * }
     */
    public static final AddressLayout hFile$layout() {
        return hFile$LAYOUT;
    }

    private static final long hFile$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hFile
     * }
     */
    public static final long hFile$offset() {
        return hFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hFile
     * }
     */
    public static MemorySegment hFile(MemorySegment struct) {
        return struct.get(hFile$LAYOUT, hFile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hFile
     * }
     */
    public static void hFile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hFile$LAYOUT, hFile$OFFSET, fieldValue);
    }

    private static final AddressLayout hProcess$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hProcess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hProcess
     * }
     */
    public static final AddressLayout hProcess$layout() {
        return hProcess$LAYOUT;
    }

    private static final long hProcess$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hProcess
     * }
     */
    public static final long hProcess$offset() {
        return hProcess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hProcess
     * }
     */
    public static MemorySegment hProcess(MemorySegment struct) {
        return struct.get(hProcess$LAYOUT, hProcess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hProcess
     * }
     */
    public static void hProcess(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hProcess$LAYOUT, hProcess$OFFSET, fieldValue);
    }

    private static final AddressLayout hThread$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hThread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HANDLE hThread
     * }
     */
    public static final AddressLayout hThread$layout() {
        return hThread$LAYOUT;
    }

    private static final long hThread$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HANDLE hThread
     * }
     */
    public static final long hThread$offset() {
        return hThread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HANDLE hThread
     * }
     */
    public static MemorySegment hThread(MemorySegment struct) {
        return struct.get(hThread$LAYOUT, hThread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HANDLE hThread
     * }
     */
    public static void hThread(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hThread$LAYOUT, hThread$OFFSET, fieldValue);
    }

    private static final AddressLayout lpBaseOfImage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpBaseOfImage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPVOID lpBaseOfImage
     * }
     */
    public static final AddressLayout lpBaseOfImage$layout() {
        return lpBaseOfImage$LAYOUT;
    }

    private static final long lpBaseOfImage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPVOID lpBaseOfImage
     * }
     */
    public static final long lpBaseOfImage$offset() {
        return lpBaseOfImage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPVOID lpBaseOfImage
     * }
     */
    public static MemorySegment lpBaseOfImage(MemorySegment struct) {
        return struct.get(lpBaseOfImage$LAYOUT, lpBaseOfImage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPVOID lpBaseOfImage
     * }
     */
    public static void lpBaseOfImage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpBaseOfImage$LAYOUT, lpBaseOfImage$OFFSET, fieldValue);
    }

    private static final OfInt dwDebugInfoFileOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDebugInfoFileOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwDebugInfoFileOffset
     * }
     */
    public static final OfInt dwDebugInfoFileOffset$layout() {
        return dwDebugInfoFileOffset$LAYOUT;
    }

    private static final long dwDebugInfoFileOffset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwDebugInfoFileOffset
     * }
     */
    public static final long dwDebugInfoFileOffset$offset() {
        return dwDebugInfoFileOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwDebugInfoFileOffset
     * }
     */
    public static int dwDebugInfoFileOffset(MemorySegment struct) {
        return struct.get(dwDebugInfoFileOffset$LAYOUT, dwDebugInfoFileOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwDebugInfoFileOffset
     * }
     */
    public static void dwDebugInfoFileOffset(MemorySegment struct, int fieldValue) {
        struct.set(dwDebugInfoFileOffset$LAYOUT, dwDebugInfoFileOffset$OFFSET, fieldValue);
    }

    private static final OfInt nDebugInfoSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nDebugInfoSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD nDebugInfoSize
     * }
     */
    public static final OfInt nDebugInfoSize$layout() {
        return nDebugInfoSize$LAYOUT;
    }

    private static final long nDebugInfoSize$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD nDebugInfoSize
     * }
     */
    public static final long nDebugInfoSize$offset() {
        return nDebugInfoSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD nDebugInfoSize
     * }
     */
    public static int nDebugInfoSize(MemorySegment struct) {
        return struct.get(nDebugInfoSize$LAYOUT, nDebugInfoSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD nDebugInfoSize
     * }
     */
    public static void nDebugInfoSize(MemorySegment struct, int fieldValue) {
        struct.set(nDebugInfoSize$LAYOUT, nDebugInfoSize$OFFSET, fieldValue);
    }

    private static final AddressLayout lpThreadLocalBase$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpThreadLocalBase"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPVOID lpThreadLocalBase
     * }
     */
    public static final AddressLayout lpThreadLocalBase$layout() {
        return lpThreadLocalBase$LAYOUT;
    }

    private static final long lpThreadLocalBase$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPVOID lpThreadLocalBase
     * }
     */
    public static final long lpThreadLocalBase$offset() {
        return lpThreadLocalBase$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPVOID lpThreadLocalBase
     * }
     */
    public static MemorySegment lpThreadLocalBase(MemorySegment struct) {
        return struct.get(lpThreadLocalBase$LAYOUT, lpThreadLocalBase$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPVOID lpThreadLocalBase
     * }
     */
    public static void lpThreadLocalBase(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpThreadLocalBase$LAYOUT, lpThreadLocalBase$OFFSET, fieldValue);
    }

    private static final AddressLayout lpStartAddress$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpStartAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPTHREAD_START_ROUTINE lpStartAddress
     * }
     */
    public static final AddressLayout lpStartAddress$layout() {
        return lpStartAddress$LAYOUT;
    }

    private static final long lpStartAddress$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPTHREAD_START_ROUTINE lpStartAddress
     * }
     */
    public static final long lpStartAddress$offset() {
        return lpStartAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPTHREAD_START_ROUTINE lpStartAddress
     * }
     */
    public static MemorySegment lpStartAddress(MemorySegment struct) {
        return struct.get(lpStartAddress$LAYOUT, lpStartAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPTHREAD_START_ROUTINE lpStartAddress
     * }
     */
    public static void lpStartAddress(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpStartAddress$LAYOUT, lpStartAddress$OFFSET, fieldValue);
    }

    private static final AddressLayout lpImageName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lpImageName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPVOID lpImageName
     * }
     */
    public static final AddressLayout lpImageName$layout() {
        return lpImageName$LAYOUT;
    }

    private static final long lpImageName$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPVOID lpImageName
     * }
     */
    public static final long lpImageName$offset() {
        return lpImageName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPVOID lpImageName
     * }
     */
    public static MemorySegment lpImageName(MemorySegment struct) {
        return struct.get(lpImageName$LAYOUT, lpImageName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPVOID lpImageName
     * }
     */
    public static void lpImageName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpImageName$LAYOUT, lpImageName$OFFSET, fieldValue);
    }

    private static final OfShort fUnicode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fUnicode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD fUnicode
     * }
     */
    public static final OfShort fUnicode$layout() {
        return fUnicode$LAYOUT;
    }

    private static final long fUnicode$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD fUnicode
     * }
     */
    public static final long fUnicode$offset() {
        return fUnicode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD fUnicode
     * }
     */
    public static short fUnicode(MemorySegment struct) {
        return struct.get(fUnicode$LAYOUT, fUnicode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD fUnicode
     * }
     */
    public static void fUnicode(MemorySegment struct, short fieldValue) {
        struct.set(fUnicode$LAYOUT, fUnicode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

