// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SHSTOCKICONINFO {
 *     DWORD cbSize;
 *     HICON hIcon;
 *     int iSysImageIndex;
 *     int iIcon;
 *     WCHAR szPath[260];
 * }
 * }
 */
public class _SHSTOCKICONINFO {

    _SHSTOCKICONINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("hIcon"),
        wgl_h.C_INT.withName("iSysImageIndex"),
        wgl_h.C_INT.withName("iIcon"),
        MemoryLayout.sequenceLayout(260, wgl_h.C_SHORT).withName("szPath")
    ).withName("_SHSTOCKICONINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final AddressLayout hIcon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final AddressLayout hIcon$layout() {
        return hIcon$LAYOUT;
    }

    private static final long hIcon$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static final long hIcon$offset() {
        return hIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static MemorySegment hIcon(MemorySegment struct) {
        return struct.get(hIcon$LAYOUT, hIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HICON hIcon
     * }
     */
    public static void hIcon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hIcon$LAYOUT, hIcon$OFFSET, fieldValue);
    }

    private static final OfInt iSysImageIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iSysImageIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iSysImageIndex
     * }
     */
    public static final OfInt iSysImageIndex$layout() {
        return iSysImageIndex$LAYOUT;
    }

    private static final long iSysImageIndex$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iSysImageIndex
     * }
     */
    public static final long iSysImageIndex$offset() {
        return iSysImageIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iSysImageIndex
     * }
     */
    public static int iSysImageIndex(MemorySegment struct) {
        return struct.get(iSysImageIndex$LAYOUT, iSysImageIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iSysImageIndex
     * }
     */
    public static void iSysImageIndex(MemorySegment struct, int fieldValue) {
        struct.set(iSysImageIndex$LAYOUT, iSysImageIndex$OFFSET, fieldValue);
    }

    private static final OfInt iIcon$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static final OfInt iIcon$layout() {
        return iIcon$LAYOUT;
    }

    private static final long iIcon$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static final long iIcon$offset() {
        return iIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static int iIcon(MemorySegment struct) {
        return struct.get(iIcon$LAYOUT, iIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iIcon
     * }
     */
    public static void iIcon(MemorySegment struct, int fieldValue) {
        struct.set(iIcon$LAYOUT, iIcon$OFFSET, fieldValue);
    }

    private static final SequenceLayout szPath$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szPath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static final SequenceLayout szPath$layout() {
        return szPath$LAYOUT;
    }

    private static final long szPath$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static final long szPath$offset() {
        return szPath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static MemorySegment szPath(MemorySegment struct) {
        return struct.asSlice(szPath$OFFSET, szPath$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static void szPath(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szPath$OFFSET, szPath$LAYOUT.byteSize());
    }

    private static long[] szPath$DIMS = { 260 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static long[] szPath$dimensions() {
        return szPath$DIMS;
    }
    private static final VarHandle szPath$ELEM_HANDLE = szPath$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static short szPath(MemorySegment struct, long index0) {
        return (short)szPath$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR szPath[260]
     * }
     */
    public static void szPath(MemorySegment struct, long index0, short fieldValue) {
        szPath$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

