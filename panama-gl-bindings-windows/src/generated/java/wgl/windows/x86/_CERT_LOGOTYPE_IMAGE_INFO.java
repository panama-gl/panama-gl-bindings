// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CERT_LOGOTYPE_IMAGE_INFO {
 *     DWORD dwLogotypeImageInfoChoice;
 *     DWORD dwFileSize;
 *     DWORD dwXSize;
 *     DWORD dwYSize;
 *     DWORD dwLogotypeImageResolutionChoice;
 *     union {
 *         DWORD dwNumBits;
 *         DWORD dwTableSize;
 *     };
 *     LPWSTR pwszLanguage;
 * }
 * }
 */
public class _CERT_LOGOTYPE_IMAGE_INFO {

    _CERT_LOGOTYPE_IMAGE_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwLogotypeImageInfoChoice"),
        wgl_h.C_LONG.withName("dwFileSize"),
        wgl_h.C_LONG.withName("dwXSize"),
        wgl_h.C_LONG.withName("dwYSize"),
        wgl_h.C_LONG.withName("dwLogotypeImageResolutionChoice"),
        MemoryLayout.unionLayout(
            wgl_h.C_LONG.withName("dwNumBits"),
            wgl_h.C_LONG.withName("dwTableSize")
        ).withName("$anon$5456:5"),
        wgl_h.C_POINTER.withName("pwszLanguage")
    ).withName("_CERT_LOGOTYPE_IMAGE_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwLogotypeImageInfoChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwLogotypeImageInfoChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageInfoChoice
     * }
     */
    public static final OfInt dwLogotypeImageInfoChoice$layout() {
        return dwLogotypeImageInfoChoice$LAYOUT;
    }

    private static final long dwLogotypeImageInfoChoice$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageInfoChoice
     * }
     */
    public static final long dwLogotypeImageInfoChoice$offset() {
        return dwLogotypeImageInfoChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageInfoChoice
     * }
     */
    public static int dwLogotypeImageInfoChoice(MemorySegment struct) {
        return struct.get(dwLogotypeImageInfoChoice$LAYOUT, dwLogotypeImageInfoChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageInfoChoice
     * }
     */
    public static void dwLogotypeImageInfoChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwLogotypeImageInfoChoice$LAYOUT, dwLogotypeImageInfoChoice$OFFSET, fieldValue);
    }

    private static final OfInt dwFileSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFileSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFileSize
     * }
     */
    public static final OfInt dwFileSize$layout() {
        return dwFileSize$LAYOUT;
    }

    private static final long dwFileSize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFileSize
     * }
     */
    public static final long dwFileSize$offset() {
        return dwFileSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFileSize
     * }
     */
    public static int dwFileSize(MemorySegment struct) {
        return struct.get(dwFileSize$LAYOUT, dwFileSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFileSize
     * }
     */
    public static void dwFileSize(MemorySegment struct, int fieldValue) {
        struct.set(dwFileSize$LAYOUT, dwFileSize$OFFSET, fieldValue);
    }

    private static final OfInt dwXSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwXSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwXSize
     * }
     */
    public static final OfInt dwXSize$layout() {
        return dwXSize$LAYOUT;
    }

    private static final long dwXSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwXSize
     * }
     */
    public static final long dwXSize$offset() {
        return dwXSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwXSize
     * }
     */
    public static int dwXSize(MemorySegment struct) {
        return struct.get(dwXSize$LAYOUT, dwXSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwXSize
     * }
     */
    public static void dwXSize(MemorySegment struct, int fieldValue) {
        struct.set(dwXSize$LAYOUT, dwXSize$OFFSET, fieldValue);
    }

    private static final OfInt dwYSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwYSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwYSize
     * }
     */
    public static final OfInt dwYSize$layout() {
        return dwYSize$LAYOUT;
    }

    private static final long dwYSize$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwYSize
     * }
     */
    public static final long dwYSize$offset() {
        return dwYSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwYSize
     * }
     */
    public static int dwYSize(MemorySegment struct) {
        return struct.get(dwYSize$LAYOUT, dwYSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwYSize
     * }
     */
    public static void dwYSize(MemorySegment struct, int fieldValue) {
        struct.set(dwYSize$LAYOUT, dwYSize$OFFSET, fieldValue);
    }

    private static final OfInt dwLogotypeImageResolutionChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwLogotypeImageResolutionChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageResolutionChoice
     * }
     */
    public static final OfInt dwLogotypeImageResolutionChoice$layout() {
        return dwLogotypeImageResolutionChoice$LAYOUT;
    }

    private static final long dwLogotypeImageResolutionChoice$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageResolutionChoice
     * }
     */
    public static final long dwLogotypeImageResolutionChoice$offset() {
        return dwLogotypeImageResolutionChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageResolutionChoice
     * }
     */
    public static int dwLogotypeImageResolutionChoice(MemorySegment struct) {
        return struct.get(dwLogotypeImageResolutionChoice$LAYOUT, dwLogotypeImageResolutionChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwLogotypeImageResolutionChoice
     * }
     */
    public static void dwLogotypeImageResolutionChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwLogotypeImageResolutionChoice$LAYOUT, dwLogotypeImageResolutionChoice$OFFSET, fieldValue);
    }

    private static final OfInt dwNumBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$5456:5"), groupElement("dwNumBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwNumBits
     * }
     */
    public static final OfInt dwNumBits$layout() {
        return dwNumBits$LAYOUT;
    }

    private static final long dwNumBits$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwNumBits
     * }
     */
    public static final long dwNumBits$offset() {
        return dwNumBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwNumBits
     * }
     */
    public static int dwNumBits(MemorySegment struct) {
        return struct.get(dwNumBits$LAYOUT, dwNumBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwNumBits
     * }
     */
    public static void dwNumBits(MemorySegment struct, int fieldValue) {
        struct.set(dwNumBits$LAYOUT, dwNumBits$OFFSET, fieldValue);
    }

    private static final OfInt dwTableSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$5456:5"), groupElement("dwTableSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwTableSize
     * }
     */
    public static final OfInt dwTableSize$layout() {
        return dwTableSize$LAYOUT;
    }

    private static final long dwTableSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwTableSize
     * }
     */
    public static final long dwTableSize$offset() {
        return dwTableSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwTableSize
     * }
     */
    public static int dwTableSize(MemorySegment struct) {
        return struct.get(dwTableSize$LAYOUT, dwTableSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwTableSize
     * }
     */
    public static void dwTableSize(MemorySegment struct, int fieldValue) {
        struct.set(dwTableSize$LAYOUT, dwTableSize$OFFSET, fieldValue);
    }

    private static final AddressLayout pwszLanguage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pwszLanguage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pwszLanguage
     * }
     */
    public static final AddressLayout pwszLanguage$layout() {
        return pwszLanguage$LAYOUT;
    }

    private static final long pwszLanguage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pwszLanguage
     * }
     */
    public static final long pwszLanguage$offset() {
        return pwszLanguage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pwszLanguage
     * }
     */
    public static MemorySegment pwszLanguage(MemorySegment struct) {
        return struct.get(pwszLanguage$LAYOUT, pwszLanguage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pwszLanguage
     * }
     */
    public static void pwszLanguage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pwszLanguage$LAYOUT, pwszLanguage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

