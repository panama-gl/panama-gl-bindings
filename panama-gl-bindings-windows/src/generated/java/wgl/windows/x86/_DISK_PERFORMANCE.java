// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _DISK_PERFORMANCE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("BytesRead"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("BytesWritten"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("ReadTime"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("WriteTime"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("IdleTime"),
        Constants$root.C_LONG$LAYOUT.withName("ReadCount"),
        Constants$root.C_LONG$LAYOUT.withName("WriteCount"),
        Constants$root.C_LONG$LAYOUT.withName("QueueDepth"),
        Constants$root.C_LONG$LAYOUT.withName("SplitCount"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("QueryTime"),
        Constants$root.C_LONG$LAYOUT.withName("StorageDeviceNumber"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_SHORT$LAYOUT).withName("StorageManagerName"),
        MemoryLayout.paddingLayout(32)
    ).withName("_DISK_PERFORMANCE");
    public static MemoryLayout $LAYOUT() {
        return _DISK_PERFORMANCE.$struct$LAYOUT;
    }
    public static MemorySegment BytesRead$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment BytesWritten$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static MemorySegment ReadTime$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static MemorySegment WriteTime$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    public static MemorySegment IdleTime$slice(MemorySegment seg) {
        return seg.asSlice(32, 8);
    }
    static final VarHandle ReadCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadCount"));
    public static VarHandle ReadCount$VH() {
        return _DISK_PERFORMANCE.ReadCount$VH;
    }
    public static int ReadCount$get(MemorySegment seg) {
        return (int)_DISK_PERFORMANCE.ReadCount$VH.get(seg);
    }
    public static void ReadCount$set( MemorySegment seg, int x) {
        _DISK_PERFORMANCE.ReadCount$VH.set(seg, x);
    }
    public static int ReadCount$get(MemorySegment seg, long index) {
        return (int)_DISK_PERFORMANCE.ReadCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadCount$set(MemorySegment seg, long index, int x) {
        _DISK_PERFORMANCE.ReadCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteCount"));
    public static VarHandle WriteCount$VH() {
        return _DISK_PERFORMANCE.WriteCount$VH;
    }
    public static int WriteCount$get(MemorySegment seg) {
        return (int)_DISK_PERFORMANCE.WriteCount$VH.get(seg);
    }
    public static void WriteCount$set( MemorySegment seg, int x) {
        _DISK_PERFORMANCE.WriteCount$VH.set(seg, x);
    }
    public static int WriteCount$get(MemorySegment seg, long index) {
        return (int)_DISK_PERFORMANCE.WriteCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteCount$set(MemorySegment seg, long index, int x) {
        _DISK_PERFORMANCE.WriteCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle QueueDepth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueueDepth"));
    public static VarHandle QueueDepth$VH() {
        return _DISK_PERFORMANCE.QueueDepth$VH;
    }
    public static int QueueDepth$get(MemorySegment seg) {
        return (int)_DISK_PERFORMANCE.QueueDepth$VH.get(seg);
    }
    public static void QueueDepth$set( MemorySegment seg, int x) {
        _DISK_PERFORMANCE.QueueDepth$VH.set(seg, x);
    }
    public static int QueueDepth$get(MemorySegment seg, long index) {
        return (int)_DISK_PERFORMANCE.QueueDepth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueueDepth$set(MemorySegment seg, long index, int x) {
        _DISK_PERFORMANCE.QueueDepth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SplitCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SplitCount"));
    public static VarHandle SplitCount$VH() {
        return _DISK_PERFORMANCE.SplitCount$VH;
    }
    public static int SplitCount$get(MemorySegment seg) {
        return (int)_DISK_PERFORMANCE.SplitCount$VH.get(seg);
    }
    public static void SplitCount$set( MemorySegment seg, int x) {
        _DISK_PERFORMANCE.SplitCount$VH.set(seg, x);
    }
    public static int SplitCount$get(MemorySegment seg, long index) {
        return (int)_DISK_PERFORMANCE.SplitCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SplitCount$set(MemorySegment seg, long index, int x) {
        _DISK_PERFORMANCE.SplitCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment QueryTime$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    static final VarHandle StorageDeviceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StorageDeviceNumber"));
    public static VarHandle StorageDeviceNumber$VH() {
        return _DISK_PERFORMANCE.StorageDeviceNumber$VH;
    }
    public static int StorageDeviceNumber$get(MemorySegment seg) {
        return (int)_DISK_PERFORMANCE.StorageDeviceNumber$VH.get(seg);
    }
    public static void StorageDeviceNumber$set( MemorySegment seg, int x) {
        _DISK_PERFORMANCE.StorageDeviceNumber$VH.set(seg, x);
    }
    public static int StorageDeviceNumber$get(MemorySegment seg, long index) {
        return (int)_DISK_PERFORMANCE.StorageDeviceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StorageDeviceNumber$set(MemorySegment seg, long index, int x) {
        _DISK_PERFORMANCE.StorageDeviceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment StorageManagerName$slice(MemorySegment seg) {
        return seg.asSlice(68, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


