// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _KCRM_MARSHAL_HEADER {
 *     ULONG VersionMajor;
 *     ULONG VersionMinor;
 *     ULONG NumProtocols;
 *     ULONG Unused;
 * }
 * }
 */
public class _KCRM_MARSHAL_HEADER {

    _KCRM_MARSHAL_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("VersionMajor"),
        wgl_h.C_LONG.withName("VersionMinor"),
        wgl_h.C_LONG.withName("NumProtocols"),
        wgl_h.C_LONG.withName("Unused")
    ).withName("_KCRM_MARSHAL_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt VersionMajor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VersionMajor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG VersionMajor
     * }
     */
    public static final OfInt VersionMajor$layout() {
        return VersionMajor$LAYOUT;
    }

    private static final long VersionMajor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG VersionMajor
     * }
     */
    public static final long VersionMajor$offset() {
        return VersionMajor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG VersionMajor
     * }
     */
    public static int VersionMajor(MemorySegment struct) {
        return struct.get(VersionMajor$LAYOUT, VersionMajor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG VersionMajor
     * }
     */
    public static void VersionMajor(MemorySegment struct, int fieldValue) {
        struct.set(VersionMajor$LAYOUT, VersionMajor$OFFSET, fieldValue);
    }

    private static final OfInt VersionMinor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VersionMinor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG VersionMinor
     * }
     */
    public static final OfInt VersionMinor$layout() {
        return VersionMinor$LAYOUT;
    }

    private static final long VersionMinor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG VersionMinor
     * }
     */
    public static final long VersionMinor$offset() {
        return VersionMinor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG VersionMinor
     * }
     */
    public static int VersionMinor(MemorySegment struct) {
        return struct.get(VersionMinor$LAYOUT, VersionMinor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG VersionMinor
     * }
     */
    public static void VersionMinor(MemorySegment struct, int fieldValue) {
        struct.set(VersionMinor$LAYOUT, VersionMinor$OFFSET, fieldValue);
    }

    private static final OfInt NumProtocols$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumProtocols"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG NumProtocols
     * }
     */
    public static final OfInt NumProtocols$layout() {
        return NumProtocols$LAYOUT;
    }

    private static final long NumProtocols$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG NumProtocols
     * }
     */
    public static final long NumProtocols$offset() {
        return NumProtocols$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG NumProtocols
     * }
     */
    public static int NumProtocols(MemorySegment struct) {
        return struct.get(NumProtocols$LAYOUT, NumProtocols$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG NumProtocols
     * }
     */
    public static void NumProtocols(MemorySegment struct, int fieldValue) {
        struct.set(NumProtocols$LAYOUT, NumProtocols$OFFSET, fieldValue);
    }

    private static final OfInt Unused$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Unused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Unused
     * }
     */
    public static final OfInt Unused$layout() {
        return Unused$LAYOUT;
    }

    private static final long Unused$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Unused
     * }
     */
    public static final long Unused$offset() {
        return Unused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Unused
     * }
     */
    public static int Unused(MemorySegment struct) {
        return struct.get(Unused$LAYOUT, Unused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Unused
     * }
     */
    public static void Unused(MemorySegment struct, int fieldValue) {
        struct.set(Unused$LAYOUT, Unused$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

