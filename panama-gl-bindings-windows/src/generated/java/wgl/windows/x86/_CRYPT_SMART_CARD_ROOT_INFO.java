// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CRYPT_SMART_CARD_ROOT_INFO {
 *     BYTE rgbCardID[16];
 *     ROOT_INFO_LUID luid;
 * }
 * }
 */
public class _CRYPT_SMART_CARD_ROOT_INFO {

    _CRYPT_SMART_CARD_ROOT_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, wgl_h.C_CHAR).withName("rgbCardID"),
        _ROOT_INFO_LUID.layout().withName("luid")
    ).withName("_CRYPT_SMART_CARD_ROOT_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout rgbCardID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("rgbCardID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static final SequenceLayout rgbCardID$layout() {
        return rgbCardID$LAYOUT;
    }

    private static final long rgbCardID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static final long rgbCardID$offset() {
        return rgbCardID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static MemorySegment rgbCardID(MemorySegment struct) {
        return struct.asSlice(rgbCardID$OFFSET, rgbCardID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static void rgbCardID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rgbCardID$OFFSET, rgbCardID$LAYOUT.byteSize());
    }

    private static long[] rgbCardID$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static long[] rgbCardID$dimensions() {
        return rgbCardID$DIMS;
    }
    private static final VarHandle rgbCardID$ELEM_HANDLE = rgbCardID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static byte rgbCardID(MemorySegment struct, long index0) {
        return (byte)rgbCardID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE rgbCardID[16]
     * }
     */
    public static void rgbCardID(MemorySegment struct, long index0, byte fieldValue) {
        rgbCardID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout luid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("luid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ROOT_INFO_LUID luid
     * }
     */
    public static final GroupLayout luid$layout() {
        return luid$LAYOUT;
    }

    private static final long luid$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ROOT_INFO_LUID luid
     * }
     */
    public static final long luid$offset() {
        return luid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ROOT_INFO_LUID luid
     * }
     */
    public static MemorySegment luid(MemorySegment struct) {
        return struct.asSlice(luid$OFFSET, luid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ROOT_INFO_LUID luid
     * }
     */
    public static void luid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, luid$OFFSET, luid$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

