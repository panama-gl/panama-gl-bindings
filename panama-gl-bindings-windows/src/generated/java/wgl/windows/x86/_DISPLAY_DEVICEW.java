// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _DISPLAY_DEVICEW {
 *     DWORD cb;
 *     WCHAR DeviceName[32];
 *     WCHAR DeviceString[128];
 *     DWORD StateFlags;
 *     WCHAR DeviceID[128];
 *     WCHAR DeviceKey[128];
 * }
 * }
 */
public class _DISPLAY_DEVICEW {

    _DISPLAY_DEVICEW() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cb"),
        MemoryLayout.sequenceLayout(32, wgl_h.C_SHORT).withName("DeviceName"),
        MemoryLayout.sequenceLayout(128, wgl_h.C_SHORT).withName("DeviceString"),
        wgl_h.C_LONG.withName("StateFlags"),
        MemoryLayout.sequenceLayout(128, wgl_h.C_SHORT).withName("DeviceID"),
        MemoryLayout.sequenceLayout(128, wgl_h.C_SHORT).withName("DeviceKey")
    ).withName("_DISPLAY_DEVICEW");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static final OfInt cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static int cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cb
     * }
     */
    public static void cb(MemorySegment struct, int fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final SequenceLayout DeviceName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DeviceName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static final SequenceLayout DeviceName$layout() {
        return DeviceName$LAYOUT;
    }

    private static final long DeviceName$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static final long DeviceName$offset() {
        return DeviceName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static MemorySegment DeviceName(MemorySegment struct) {
        return struct.asSlice(DeviceName$OFFSET, DeviceName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static void DeviceName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DeviceName$OFFSET, DeviceName$LAYOUT.byteSize());
    }

    private static long[] DeviceName$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static long[] DeviceName$dimensions() {
        return DeviceName$DIMS;
    }
    private static final VarHandle DeviceName$ELEM_HANDLE = DeviceName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static short DeviceName(MemorySegment struct, long index0) {
        return (short)DeviceName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceName[32]
     * }
     */
    public static void DeviceName(MemorySegment struct, long index0, short fieldValue) {
        DeviceName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout DeviceString$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DeviceString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static final SequenceLayout DeviceString$layout() {
        return DeviceString$LAYOUT;
    }

    private static final long DeviceString$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static final long DeviceString$offset() {
        return DeviceString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static MemorySegment DeviceString(MemorySegment struct) {
        return struct.asSlice(DeviceString$OFFSET, DeviceString$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static void DeviceString(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DeviceString$OFFSET, DeviceString$LAYOUT.byteSize());
    }

    private static long[] DeviceString$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static long[] DeviceString$dimensions() {
        return DeviceString$DIMS;
    }
    private static final VarHandle DeviceString$ELEM_HANDLE = DeviceString$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static short DeviceString(MemorySegment struct, long index0) {
        return (short)DeviceString$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceString[128]
     * }
     */
    public static void DeviceString(MemorySegment struct, long index0, short fieldValue) {
        DeviceString$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt StateFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("StateFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD StateFlags
     * }
     */
    public static final OfInt StateFlags$layout() {
        return StateFlags$LAYOUT;
    }

    private static final long StateFlags$OFFSET = 324;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD StateFlags
     * }
     */
    public static final long StateFlags$offset() {
        return StateFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD StateFlags
     * }
     */
    public static int StateFlags(MemorySegment struct) {
        return struct.get(StateFlags$LAYOUT, StateFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD StateFlags
     * }
     */
    public static void StateFlags(MemorySegment struct, int fieldValue) {
        struct.set(StateFlags$LAYOUT, StateFlags$OFFSET, fieldValue);
    }

    private static final SequenceLayout DeviceID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DeviceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static final SequenceLayout DeviceID$layout() {
        return DeviceID$LAYOUT;
    }

    private static final long DeviceID$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static final long DeviceID$offset() {
        return DeviceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static MemorySegment DeviceID(MemorySegment struct) {
        return struct.asSlice(DeviceID$OFFSET, DeviceID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static void DeviceID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DeviceID$OFFSET, DeviceID$LAYOUT.byteSize());
    }

    private static long[] DeviceID$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static long[] DeviceID$dimensions() {
        return DeviceID$DIMS;
    }
    private static final VarHandle DeviceID$ELEM_HANDLE = DeviceID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static short DeviceID(MemorySegment struct, long index0) {
        return (short)DeviceID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceID[128]
     * }
     */
    public static void DeviceID(MemorySegment struct, long index0, short fieldValue) {
        DeviceID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout DeviceKey$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DeviceKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static final SequenceLayout DeviceKey$layout() {
        return DeviceKey$LAYOUT;
    }

    private static final long DeviceKey$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static final long DeviceKey$offset() {
        return DeviceKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static MemorySegment DeviceKey(MemorySegment struct) {
        return struct.asSlice(DeviceKey$OFFSET, DeviceKey$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static void DeviceKey(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DeviceKey$OFFSET, DeviceKey$LAYOUT.byteSize());
    }

    private static long[] DeviceKey$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static long[] DeviceKey$dimensions() {
        return DeviceKey$DIMS;
    }
    private static final VarHandle DeviceKey$ELEM_HANDLE = DeviceKey$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static short DeviceKey(MemorySegment struct, long index0) {
        return (short)DeviceKey$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR DeviceKey[128]
     * }
     */
    public static void DeviceKey(MemorySegment struct, long index0, short fieldValue) {
        DeviceKey$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

