// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagSTGMEDIUM {
 *     DWORD tymed;
 *     union {
 *         HBITMAP hBitmap;
 *         HMETAFILEPICT hMetaFilePict;
 *         HENHMETAFILE hEnhMetaFile;
 *         HGLOBAL hGlobal;
 *         LPOLESTR lpszFileName;
 *         IStream *pstm;
 *         IStorage *pstg;
 *     };
 *     IUnknown *pUnkForRelease;
 * }
 * }
 */
public class tagSTGMEDIUM {

    tagSTGMEDIUM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("tymed"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            wgl_h.C_POINTER.withName("hBitmap"),
            wgl_h.C_POINTER.withName("hMetaFilePict"),
            wgl_h.C_POINTER.withName("hEnhMetaFile"),
            wgl_h.C_POINTER.withName("hGlobal"),
            wgl_h.C_POINTER.withName("lpszFileName"),
            wgl_h.C_POINTER.withName("pstm"),
            wgl_h.C_POINTER.withName("pstg")
        ).withName("$anon$11272:36"),
        wgl_h.C_POINTER.withName("pUnkForRelease")
    ).withName("tagSTGMEDIUM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tymed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tymed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static final OfInt tymed$layout() {
        return tymed$LAYOUT;
    }

    private static final long tymed$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static final long tymed$offset() {
        return tymed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static int tymed(MemorySegment struct) {
        return struct.get(tymed$LAYOUT, tymed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static void tymed(MemorySegment struct, int fieldValue) {
        struct.set(tymed$LAYOUT, tymed$OFFSET, fieldValue);
    }

    private static final AddressLayout hBitmap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("hBitmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HBITMAP hBitmap
     * }
     */
    public static final AddressLayout hBitmap$layout() {
        return hBitmap$LAYOUT;
    }

    private static final long hBitmap$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HBITMAP hBitmap
     * }
     */
    public static final long hBitmap$offset() {
        return hBitmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HBITMAP hBitmap
     * }
     */
    public static MemorySegment hBitmap(MemorySegment struct) {
        return struct.get(hBitmap$LAYOUT, hBitmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HBITMAP hBitmap
     * }
     */
    public static void hBitmap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hBitmap$LAYOUT, hBitmap$OFFSET, fieldValue);
    }

    private static final AddressLayout hMetaFilePict$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("hMetaFilePict"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HMETAFILEPICT hMetaFilePict
     * }
     */
    public static final AddressLayout hMetaFilePict$layout() {
        return hMetaFilePict$LAYOUT;
    }

    private static final long hMetaFilePict$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HMETAFILEPICT hMetaFilePict
     * }
     */
    public static final long hMetaFilePict$offset() {
        return hMetaFilePict$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HMETAFILEPICT hMetaFilePict
     * }
     */
    public static MemorySegment hMetaFilePict(MemorySegment struct) {
        return struct.get(hMetaFilePict$LAYOUT, hMetaFilePict$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HMETAFILEPICT hMetaFilePict
     * }
     */
    public static void hMetaFilePict(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hMetaFilePict$LAYOUT, hMetaFilePict$OFFSET, fieldValue);
    }

    private static final AddressLayout hEnhMetaFile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("hEnhMetaFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HENHMETAFILE hEnhMetaFile
     * }
     */
    public static final AddressLayout hEnhMetaFile$layout() {
        return hEnhMetaFile$LAYOUT;
    }

    private static final long hEnhMetaFile$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HENHMETAFILE hEnhMetaFile
     * }
     */
    public static final long hEnhMetaFile$offset() {
        return hEnhMetaFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HENHMETAFILE hEnhMetaFile
     * }
     */
    public static MemorySegment hEnhMetaFile(MemorySegment struct) {
        return struct.get(hEnhMetaFile$LAYOUT, hEnhMetaFile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HENHMETAFILE hEnhMetaFile
     * }
     */
    public static void hEnhMetaFile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hEnhMetaFile$LAYOUT, hEnhMetaFile$OFFSET, fieldValue);
    }

    private static final AddressLayout hGlobal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("hGlobal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HGLOBAL hGlobal
     * }
     */
    public static final AddressLayout hGlobal$layout() {
        return hGlobal$LAYOUT;
    }

    private static final long hGlobal$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HGLOBAL hGlobal
     * }
     */
    public static final long hGlobal$offset() {
        return hGlobal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HGLOBAL hGlobal
     * }
     */
    public static MemorySegment hGlobal(MemorySegment struct) {
        return struct.get(hGlobal$LAYOUT, hGlobal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HGLOBAL hGlobal
     * }
     */
    public static void hGlobal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hGlobal$LAYOUT, hGlobal$OFFSET, fieldValue);
    }

    private static final AddressLayout lpszFileName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("lpszFileName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPOLESTR lpszFileName
     * }
     */
    public static final AddressLayout lpszFileName$layout() {
        return lpszFileName$LAYOUT;
    }

    private static final long lpszFileName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPOLESTR lpszFileName
     * }
     */
    public static final long lpszFileName$offset() {
        return lpszFileName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPOLESTR lpszFileName
     * }
     */
    public static MemorySegment lpszFileName(MemorySegment struct) {
        return struct.get(lpszFileName$LAYOUT, lpszFileName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPOLESTR lpszFileName
     * }
     */
    public static void lpszFileName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lpszFileName$LAYOUT, lpszFileName$OFFSET, fieldValue);
    }

    private static final AddressLayout pstm$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("pstm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IStream *pstm
     * }
     */
    public static final AddressLayout pstm$layout() {
        return pstm$LAYOUT;
    }

    private static final long pstm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IStream *pstm
     * }
     */
    public static final long pstm$offset() {
        return pstm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IStream *pstm
     * }
     */
    public static MemorySegment pstm(MemorySegment struct) {
        return struct.get(pstm$LAYOUT, pstm$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IStream *pstm
     * }
     */
    public static void pstm(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pstm$LAYOUT, pstm$OFFSET, fieldValue);
    }

    private static final AddressLayout pstg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$11272:36"), groupElement("pstg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IStorage *pstg
     * }
     */
    public static final AddressLayout pstg$layout() {
        return pstg$LAYOUT;
    }

    private static final long pstg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IStorage *pstg
     * }
     */
    public static final long pstg$offset() {
        return pstg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IStorage *pstg
     * }
     */
    public static MemorySegment pstg(MemorySegment struct) {
        return struct.get(pstg$LAYOUT, pstg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IStorage *pstg
     * }
     */
    public static void pstg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pstg$LAYOUT, pstg$OFFSET, fieldValue);
    }

    private static final AddressLayout pUnkForRelease$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUnkForRelease"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * IUnknown *pUnkForRelease
     * }
     */
    public static final AddressLayout pUnkForRelease$layout() {
        return pUnkForRelease$LAYOUT;
    }

    private static final long pUnkForRelease$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * IUnknown *pUnkForRelease
     * }
     */
    public static final long pUnkForRelease$offset() {
        return pUnkForRelease$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * IUnknown *pUnkForRelease
     * }
     */
    public static MemorySegment pUnkForRelease(MemorySegment struct) {
        return struct.get(pUnkForRelease$LAYOUT, pUnkForRelease$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * IUnknown *pUnkForRelease
     * }
     */
    public static void pUnkForRelease(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUnkForRelease$LAYOUT, pUnkForRelease$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

