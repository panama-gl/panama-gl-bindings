// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GRADIENT_TRIANGLE {
 *     ULONG Vertex1;
 *     ULONG Vertex2;
 *     ULONG Vertex3;
 * }
 * }
 */
public class _GRADIENT_TRIANGLE {

    _GRADIENT_TRIANGLE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Vertex1"),
        wgl_h.C_LONG.withName("Vertex2"),
        wgl_h.C_LONG.withName("Vertex3")
    ).withName("_GRADIENT_TRIANGLE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Vertex1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Vertex1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Vertex1
     * }
     */
    public static final OfInt Vertex1$layout() {
        return Vertex1$LAYOUT;
    }

    private static final long Vertex1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Vertex1
     * }
     */
    public static final long Vertex1$offset() {
        return Vertex1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Vertex1
     * }
     */
    public static int Vertex1(MemorySegment struct) {
        return struct.get(Vertex1$LAYOUT, Vertex1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Vertex1
     * }
     */
    public static void Vertex1(MemorySegment struct, int fieldValue) {
        struct.set(Vertex1$LAYOUT, Vertex1$OFFSET, fieldValue);
    }

    private static final OfInt Vertex2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Vertex2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Vertex2
     * }
     */
    public static final OfInt Vertex2$layout() {
        return Vertex2$LAYOUT;
    }

    private static final long Vertex2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Vertex2
     * }
     */
    public static final long Vertex2$offset() {
        return Vertex2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Vertex2
     * }
     */
    public static int Vertex2(MemorySegment struct) {
        return struct.get(Vertex2$LAYOUT, Vertex2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Vertex2
     * }
     */
    public static void Vertex2(MemorySegment struct, int fieldValue) {
        struct.set(Vertex2$LAYOUT, Vertex2$OFFSET, fieldValue);
    }

    private static final OfInt Vertex3$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Vertex3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Vertex3
     * }
     */
    public static final OfInt Vertex3$layout() {
        return Vertex3$LAYOUT;
    }

    private static final long Vertex3$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Vertex3
     * }
     */
    public static final long Vertex3$offset() {
        return Vertex3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Vertex3
     * }
     */
    public static int Vertex3(MemorySegment struct) {
        return struct.get(Vertex3$LAYOUT, Vertex3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Vertex3
     * }
     */
    public static void Vertex3(MemorySegment struct, int fieldValue) {
        struct.set(Vertex3$LAYOUT, Vertex3$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

