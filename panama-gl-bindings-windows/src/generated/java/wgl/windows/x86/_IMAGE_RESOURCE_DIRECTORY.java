// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_RESOURCE_DIRECTORY {
 *     DWORD Characteristics;
 *     DWORD TimeDateStamp;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     WORD NumberOfNamedEntries;
 *     WORD NumberOfIdEntries;
 * }
 * }
 */
public class _IMAGE_RESOURCE_DIRECTORY {

    _IMAGE_RESOURCE_DIRECTORY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Characteristics"),
        wgl_h.C_LONG.withName("TimeDateStamp"),
        wgl_h.C_SHORT.withName("MajorVersion"),
        wgl_h.C_SHORT.withName("MinorVersion"),
        wgl_h.C_SHORT.withName("NumberOfNamedEntries"),
        wgl_h.C_SHORT.withName("NumberOfIdEntries")
    ).withName("_IMAGE_RESOURCE_DIRECTORY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Characteristics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final OfInt Characteristics$layout() {
        return Characteristics$LAYOUT;
    }

    private static final long Characteristics$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static final long Characteristics$offset() {
        return Characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static int Characteristics(MemorySegment struct) {
        return struct.get(Characteristics$LAYOUT, Characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Characteristics
     * }
     */
    public static void Characteristics(MemorySegment struct, int fieldValue) {
        struct.set(Characteristics$LAYOUT, Characteristics$OFFSET, fieldValue);
    }

    private static final OfInt TimeDateStamp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TimeDateStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final OfInt TimeDateStamp$layout() {
        return TimeDateStamp$LAYOUT;
    }

    private static final long TimeDateStamp$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static final long TimeDateStamp$offset() {
        return TimeDateStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static int TimeDateStamp(MemorySegment struct) {
        return struct.get(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TimeDateStamp
     * }
     */
    public static void TimeDateStamp(MemorySegment struct, int fieldValue) {
        struct.set(TimeDateStamp$LAYOUT, TimeDateStamp$OFFSET, fieldValue);
    }

    private static final OfShort MajorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final OfShort MajorVersion$layout() {
        return MajorVersion$LAYOUT;
    }

    private static final long MajorVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final long MajorVersion$offset() {
        return MajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static short MajorVersion(MemorySegment struct) {
        return struct.get(MajorVersion$LAYOUT, MajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static void MajorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MajorVersion$LAYOUT, MajorVersion$OFFSET, fieldValue);
    }

    private static final OfShort MinorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static final OfShort MinorVersion$layout() {
        return MinorVersion$LAYOUT;
    }

    private static final long MinorVersion$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static final long MinorVersion$offset() {
        return MinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static short MinorVersion(MemorySegment struct) {
        return struct.get(MinorVersion$LAYOUT, MinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static void MinorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinorVersion$LAYOUT, MinorVersion$OFFSET, fieldValue);
    }

    private static final OfShort NumberOfNamedEntries$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NumberOfNamedEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD NumberOfNamedEntries
     * }
     */
    public static final OfShort NumberOfNamedEntries$layout() {
        return NumberOfNamedEntries$LAYOUT;
    }

    private static final long NumberOfNamedEntries$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD NumberOfNamedEntries
     * }
     */
    public static final long NumberOfNamedEntries$offset() {
        return NumberOfNamedEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD NumberOfNamedEntries
     * }
     */
    public static short NumberOfNamedEntries(MemorySegment struct) {
        return struct.get(NumberOfNamedEntries$LAYOUT, NumberOfNamedEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD NumberOfNamedEntries
     * }
     */
    public static void NumberOfNamedEntries(MemorySegment struct, short fieldValue) {
        struct.set(NumberOfNamedEntries$LAYOUT, NumberOfNamedEntries$OFFSET, fieldValue);
    }

    private static final OfShort NumberOfIdEntries$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NumberOfIdEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD NumberOfIdEntries
     * }
     */
    public static final OfShort NumberOfIdEntries$layout() {
        return NumberOfIdEntries$LAYOUT;
    }

    private static final long NumberOfIdEntries$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD NumberOfIdEntries
     * }
     */
    public static final long NumberOfIdEntries$offset() {
        return NumberOfIdEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD NumberOfIdEntries
     * }
     */
    public static short NumberOfIdEntries(MemorySegment struct) {
        return struct.get(NumberOfIdEntries$LAYOUT, NumberOfIdEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD NumberOfIdEntries
     * }
     */
    public static void NumberOfIdEntries(MemorySegment struct, short fieldValue) {
        struct.set(NumberOfIdEntries$LAYOUT, NumberOfIdEntries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

