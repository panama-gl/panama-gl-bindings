// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IDEREGS {
 *     BYTE bFeaturesReg;
 *     BYTE bSectorCountReg;
 *     BYTE bSectorNumberReg;
 *     BYTE bCylLowReg;
 *     BYTE bCylHighReg;
 *     BYTE bDriveHeadReg;
 *     BYTE bCommandReg;
 *     BYTE bReserved;
 * }
 * }
 */
public class _IDEREGS {

    _IDEREGS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_CHAR.withName("bFeaturesReg"),
        wgl_h.C_CHAR.withName("bSectorCountReg"),
        wgl_h.C_CHAR.withName("bSectorNumberReg"),
        wgl_h.C_CHAR.withName("bCylLowReg"),
        wgl_h.C_CHAR.withName("bCylHighReg"),
        wgl_h.C_CHAR.withName("bDriveHeadReg"),
        wgl_h.C_CHAR.withName("bCommandReg"),
        wgl_h.C_CHAR.withName("bReserved")
    ).withName("_IDEREGS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte bFeaturesReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bFeaturesReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bFeaturesReg
     * }
     */
    public static final OfByte bFeaturesReg$layout() {
        return bFeaturesReg$LAYOUT;
    }

    private static final long bFeaturesReg$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bFeaturesReg
     * }
     */
    public static final long bFeaturesReg$offset() {
        return bFeaturesReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bFeaturesReg
     * }
     */
    public static byte bFeaturesReg(MemorySegment struct) {
        return struct.get(bFeaturesReg$LAYOUT, bFeaturesReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bFeaturesReg
     * }
     */
    public static void bFeaturesReg(MemorySegment struct, byte fieldValue) {
        struct.set(bFeaturesReg$LAYOUT, bFeaturesReg$OFFSET, fieldValue);
    }

    private static final OfByte bSectorCountReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bSectorCountReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bSectorCountReg
     * }
     */
    public static final OfByte bSectorCountReg$layout() {
        return bSectorCountReg$LAYOUT;
    }

    private static final long bSectorCountReg$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bSectorCountReg
     * }
     */
    public static final long bSectorCountReg$offset() {
        return bSectorCountReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bSectorCountReg
     * }
     */
    public static byte bSectorCountReg(MemorySegment struct) {
        return struct.get(bSectorCountReg$LAYOUT, bSectorCountReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bSectorCountReg
     * }
     */
    public static void bSectorCountReg(MemorySegment struct, byte fieldValue) {
        struct.set(bSectorCountReg$LAYOUT, bSectorCountReg$OFFSET, fieldValue);
    }

    private static final OfByte bSectorNumberReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bSectorNumberReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bSectorNumberReg
     * }
     */
    public static final OfByte bSectorNumberReg$layout() {
        return bSectorNumberReg$LAYOUT;
    }

    private static final long bSectorNumberReg$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bSectorNumberReg
     * }
     */
    public static final long bSectorNumberReg$offset() {
        return bSectorNumberReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bSectorNumberReg
     * }
     */
    public static byte bSectorNumberReg(MemorySegment struct) {
        return struct.get(bSectorNumberReg$LAYOUT, bSectorNumberReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bSectorNumberReg
     * }
     */
    public static void bSectorNumberReg(MemorySegment struct, byte fieldValue) {
        struct.set(bSectorNumberReg$LAYOUT, bSectorNumberReg$OFFSET, fieldValue);
    }

    private static final OfByte bCylLowReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bCylLowReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bCylLowReg
     * }
     */
    public static final OfByte bCylLowReg$layout() {
        return bCylLowReg$LAYOUT;
    }

    private static final long bCylLowReg$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bCylLowReg
     * }
     */
    public static final long bCylLowReg$offset() {
        return bCylLowReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bCylLowReg
     * }
     */
    public static byte bCylLowReg(MemorySegment struct) {
        return struct.get(bCylLowReg$LAYOUT, bCylLowReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bCylLowReg
     * }
     */
    public static void bCylLowReg(MemorySegment struct, byte fieldValue) {
        struct.set(bCylLowReg$LAYOUT, bCylLowReg$OFFSET, fieldValue);
    }

    private static final OfByte bCylHighReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bCylHighReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bCylHighReg
     * }
     */
    public static final OfByte bCylHighReg$layout() {
        return bCylHighReg$LAYOUT;
    }

    private static final long bCylHighReg$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bCylHighReg
     * }
     */
    public static final long bCylHighReg$offset() {
        return bCylHighReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bCylHighReg
     * }
     */
    public static byte bCylHighReg(MemorySegment struct) {
        return struct.get(bCylHighReg$LAYOUT, bCylHighReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bCylHighReg
     * }
     */
    public static void bCylHighReg(MemorySegment struct, byte fieldValue) {
        struct.set(bCylHighReg$LAYOUT, bCylHighReg$OFFSET, fieldValue);
    }

    private static final OfByte bDriveHeadReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bDriveHeadReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bDriveHeadReg
     * }
     */
    public static final OfByte bDriveHeadReg$layout() {
        return bDriveHeadReg$LAYOUT;
    }

    private static final long bDriveHeadReg$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bDriveHeadReg
     * }
     */
    public static final long bDriveHeadReg$offset() {
        return bDriveHeadReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bDriveHeadReg
     * }
     */
    public static byte bDriveHeadReg(MemorySegment struct) {
        return struct.get(bDriveHeadReg$LAYOUT, bDriveHeadReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bDriveHeadReg
     * }
     */
    public static void bDriveHeadReg(MemorySegment struct, byte fieldValue) {
        struct.set(bDriveHeadReg$LAYOUT, bDriveHeadReg$OFFSET, fieldValue);
    }

    private static final OfByte bCommandReg$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bCommandReg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bCommandReg
     * }
     */
    public static final OfByte bCommandReg$layout() {
        return bCommandReg$LAYOUT;
    }

    private static final long bCommandReg$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bCommandReg
     * }
     */
    public static final long bCommandReg$offset() {
        return bCommandReg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bCommandReg
     * }
     */
    public static byte bCommandReg(MemorySegment struct) {
        return struct.get(bCommandReg$LAYOUT, bCommandReg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bCommandReg
     * }
     */
    public static void bCommandReg(MemorySegment struct, byte fieldValue) {
        struct.set(bCommandReg$LAYOUT, bCommandReg$OFFSET, fieldValue);
    }

    private static final OfByte bReserved$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final OfByte bReserved$layout() {
        return bReserved$LAYOUT;
    }

    private static final long bReserved$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static final long bReserved$offset() {
        return bReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static byte bReserved(MemorySegment struct) {
        return struct.get(bReserved$LAYOUT, bReserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE bReserved
     * }
     */
    public static void bReserved(MemorySegment struct, byte fieldValue) {
        struct.set(bReserved$LAYOUT, bReserved$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

