// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     DWORD dwShareMode;
 *     DWORD dwPreferredProtocols;
 *     READER_SEL_REQUEST_MATCH_TYPE MatchType;
 *     union {
 *         struct {
 *             DWORD cbReaderNameOffset;
 *             DWORD cchReaderNameLength;
 *             DWORD cbContainerNameOffset;
 *             DWORD cchContainerNameLength;
 *             DWORD dwDesiredCardModuleVersion;
 *             DWORD dwCspFlags;
 *         } ReaderAndContainerParameter;
 *         struct {
 *             DWORD cbSerialNumberOffset;
 *             DWORD cbSerialNumberLength;
 *             DWORD dwDesiredCardModuleVersion;
 *         } SerialNumberParameter;
 *     };
 * }
 * }
 */
public class READER_SEL_REQUEST {

    READER_SEL_REQUEST() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwShareMode"),
        wgl_h.C_LONG.withName("dwPreferredProtocols"),
        wgl_h.C_INT.withName("MatchType"),
        MemoryLayout.unionLayout(
            READER_SEL_REQUEST.ReaderAndContainerParameter.layout().withName("ReaderAndContainerParameter"),
            READER_SEL_REQUEST.SerialNumberParameter.layout().withName("SerialNumberParameter")
        ).withName("$anon$1096:5")
    ).withName("$anon$1090:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwShareMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwShareMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwShareMode
     * }
     */
    public static final OfInt dwShareMode$layout() {
        return dwShareMode$LAYOUT;
    }

    private static final long dwShareMode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwShareMode
     * }
     */
    public static final long dwShareMode$offset() {
        return dwShareMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwShareMode
     * }
     */
    public static int dwShareMode(MemorySegment struct) {
        return struct.get(dwShareMode$LAYOUT, dwShareMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwShareMode
     * }
     */
    public static void dwShareMode(MemorySegment struct, int fieldValue) {
        struct.set(dwShareMode$LAYOUT, dwShareMode$OFFSET, fieldValue);
    }

    private static final OfInt dwPreferredProtocols$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwPreferredProtocols"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwPreferredProtocols
     * }
     */
    public static final OfInt dwPreferredProtocols$layout() {
        return dwPreferredProtocols$LAYOUT;
    }

    private static final long dwPreferredProtocols$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwPreferredProtocols
     * }
     */
    public static final long dwPreferredProtocols$offset() {
        return dwPreferredProtocols$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwPreferredProtocols
     * }
     */
    public static int dwPreferredProtocols(MemorySegment struct) {
        return struct.get(dwPreferredProtocols$LAYOUT, dwPreferredProtocols$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwPreferredProtocols
     * }
     */
    public static void dwPreferredProtocols(MemorySegment struct, int fieldValue) {
        struct.set(dwPreferredProtocols$LAYOUT, dwPreferredProtocols$OFFSET, fieldValue);
    }

    private static final OfInt MatchType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MatchType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * READER_SEL_REQUEST_MATCH_TYPE MatchType
     * }
     */
    public static final OfInt MatchType$layout() {
        return MatchType$LAYOUT;
    }

    private static final long MatchType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * READER_SEL_REQUEST_MATCH_TYPE MatchType
     * }
     */
    public static final long MatchType$offset() {
        return MatchType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * READER_SEL_REQUEST_MATCH_TYPE MatchType
     * }
     */
    public static int MatchType(MemorySegment struct) {
        return struct.get(MatchType$LAYOUT, MatchType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * READER_SEL_REQUEST_MATCH_TYPE MatchType
     * }
     */
    public static void MatchType(MemorySegment struct, int fieldValue) {
        struct.set(MatchType$LAYOUT, MatchType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbContainerNameOffset;
     *     DWORD cchContainerNameLength;
     *     DWORD dwDesiredCardModuleVersion;
     *     DWORD dwCspFlags;
     * }
     * }
     */
    public static class ReaderAndContainerParameter {

        ReaderAndContainerParameter() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("cbReaderNameOffset"),
            wgl_h.C_LONG.withName("cchReaderNameLength"),
            wgl_h.C_LONG.withName("cbContainerNameOffset"),
            wgl_h.C_LONG.withName("cchContainerNameLength"),
            wgl_h.C_LONG.withName("dwDesiredCardModuleVersion"),
            wgl_h.C_LONG.withName("dwCspFlags")
        ).withName("$anon$1097:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt cbReaderNameOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbReaderNameOffset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cbReaderNameOffset
         * }
         */
        public static final OfInt cbReaderNameOffset$layout() {
            return cbReaderNameOffset$LAYOUT;
        }

        private static final long cbReaderNameOffset$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cbReaderNameOffset
         * }
         */
        public static final long cbReaderNameOffset$offset() {
            return cbReaderNameOffset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cbReaderNameOffset
         * }
         */
        public static int cbReaderNameOffset(MemorySegment struct) {
            return struct.get(cbReaderNameOffset$LAYOUT, cbReaderNameOffset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cbReaderNameOffset
         * }
         */
        public static void cbReaderNameOffset(MemorySegment struct, int fieldValue) {
            struct.set(cbReaderNameOffset$LAYOUT, cbReaderNameOffset$OFFSET, fieldValue);
        }

        private static final OfInt cchReaderNameLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cchReaderNameLength"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cchReaderNameLength
         * }
         */
        public static final OfInt cchReaderNameLength$layout() {
            return cchReaderNameLength$LAYOUT;
        }

        private static final long cchReaderNameLength$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cchReaderNameLength
         * }
         */
        public static final long cchReaderNameLength$offset() {
            return cchReaderNameLength$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cchReaderNameLength
         * }
         */
        public static int cchReaderNameLength(MemorySegment struct) {
            return struct.get(cchReaderNameLength$LAYOUT, cchReaderNameLength$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cchReaderNameLength
         * }
         */
        public static void cchReaderNameLength(MemorySegment struct, int fieldValue) {
            struct.set(cchReaderNameLength$LAYOUT, cchReaderNameLength$OFFSET, fieldValue);
        }

        private static final OfInt cbContainerNameOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbContainerNameOffset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cbContainerNameOffset
         * }
         */
        public static final OfInt cbContainerNameOffset$layout() {
            return cbContainerNameOffset$LAYOUT;
        }

        private static final long cbContainerNameOffset$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cbContainerNameOffset
         * }
         */
        public static final long cbContainerNameOffset$offset() {
            return cbContainerNameOffset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cbContainerNameOffset
         * }
         */
        public static int cbContainerNameOffset(MemorySegment struct) {
            return struct.get(cbContainerNameOffset$LAYOUT, cbContainerNameOffset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cbContainerNameOffset
         * }
         */
        public static void cbContainerNameOffset(MemorySegment struct, int fieldValue) {
            struct.set(cbContainerNameOffset$LAYOUT, cbContainerNameOffset$OFFSET, fieldValue);
        }

        private static final OfInt cchContainerNameLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cchContainerNameLength"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cchContainerNameLength
         * }
         */
        public static final OfInt cchContainerNameLength$layout() {
            return cchContainerNameLength$LAYOUT;
        }

        private static final long cchContainerNameLength$OFFSET = 12;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cchContainerNameLength
         * }
         */
        public static final long cchContainerNameLength$offset() {
            return cchContainerNameLength$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cchContainerNameLength
         * }
         */
        public static int cchContainerNameLength(MemorySegment struct) {
            return struct.get(cchContainerNameLength$LAYOUT, cchContainerNameLength$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cchContainerNameLength
         * }
         */
        public static void cchContainerNameLength(MemorySegment struct, int fieldValue) {
            struct.set(cchContainerNameLength$LAYOUT, cchContainerNameLength$OFFSET, fieldValue);
        }

        private static final OfInt dwDesiredCardModuleVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDesiredCardModuleVersion"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static final OfInt dwDesiredCardModuleVersion$layout() {
            return dwDesiredCardModuleVersion$LAYOUT;
        }

        private static final long dwDesiredCardModuleVersion$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static final long dwDesiredCardModuleVersion$offset() {
            return dwDesiredCardModuleVersion$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static int dwDesiredCardModuleVersion(MemorySegment struct) {
            return struct.get(dwDesiredCardModuleVersion$LAYOUT, dwDesiredCardModuleVersion$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static void dwDesiredCardModuleVersion(MemorySegment struct, int fieldValue) {
            struct.set(dwDesiredCardModuleVersion$LAYOUT, dwDesiredCardModuleVersion$OFFSET, fieldValue);
        }

        private static final OfInt dwCspFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwCspFlags"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD dwCspFlags
         * }
         */
        public static final OfInt dwCspFlags$layout() {
            return dwCspFlags$LAYOUT;
        }

        private static final long dwCspFlags$OFFSET = 20;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD dwCspFlags
         * }
         */
        public static final long dwCspFlags$offset() {
            return dwCspFlags$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD dwCspFlags
         * }
         */
        public static int dwCspFlags(MemorySegment struct) {
            return struct.get(dwCspFlags$LAYOUT, dwCspFlags$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD dwCspFlags
         * }
         */
        public static void dwCspFlags(MemorySegment struct, int fieldValue) {
            struct.set(dwCspFlags$LAYOUT, dwCspFlags$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout ReaderAndContainerParameter$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$1096:5"), groupElement("ReaderAndContainerParameter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbContainerNameOffset;
     *     DWORD cchContainerNameLength;
     *     DWORD dwDesiredCardModuleVersion;
     *     DWORD dwCspFlags;
     * } ReaderAndContainerParameter
     * }
     */
    public static final GroupLayout ReaderAndContainerParameter$layout() {
        return ReaderAndContainerParameter$LAYOUT;
    }

    private static final long ReaderAndContainerParameter$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbContainerNameOffset;
     *     DWORD cchContainerNameLength;
     *     DWORD dwDesiredCardModuleVersion;
     *     DWORD dwCspFlags;
     * } ReaderAndContainerParameter
     * }
     */
    public static final long ReaderAndContainerParameter$offset() {
        return ReaderAndContainerParameter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbContainerNameOffset;
     *     DWORD cchContainerNameLength;
     *     DWORD dwDesiredCardModuleVersion;
     *     DWORD dwCspFlags;
     * } ReaderAndContainerParameter
     * }
     */
    public static MemorySegment ReaderAndContainerParameter(MemorySegment struct) {
        return struct.asSlice(ReaderAndContainerParameter$OFFSET, ReaderAndContainerParameter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbContainerNameOffset;
     *     DWORD cchContainerNameLength;
     *     DWORD dwDesiredCardModuleVersion;
     *     DWORD dwCspFlags;
     * } ReaderAndContainerParameter
     * }
     */
    public static void ReaderAndContainerParameter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ReaderAndContainerParameter$OFFSET, ReaderAndContainerParameter$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     DWORD cbSerialNumberOffset;
     *     DWORD cbSerialNumberLength;
     *     DWORD dwDesiredCardModuleVersion;
     * }
     * }
     */
    public static class SerialNumberParameter {

        SerialNumberParameter() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            wgl_h.C_LONG.withName("cbSerialNumberOffset"),
            wgl_h.C_LONG.withName("cbSerialNumberLength"),
            wgl_h.C_LONG.withName("dwDesiredCardModuleVersion")
        ).withName("$anon$1105:9");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt cbSerialNumberOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSerialNumberOffset"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberOffset
         * }
         */
        public static final OfInt cbSerialNumberOffset$layout() {
            return cbSerialNumberOffset$LAYOUT;
        }

        private static final long cbSerialNumberOffset$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberOffset
         * }
         */
        public static final long cbSerialNumberOffset$offset() {
            return cbSerialNumberOffset$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberOffset
         * }
         */
        public static int cbSerialNumberOffset(MemorySegment struct) {
            return struct.get(cbSerialNumberOffset$LAYOUT, cbSerialNumberOffset$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberOffset
         * }
         */
        public static void cbSerialNumberOffset(MemorySegment struct, int fieldValue) {
            struct.set(cbSerialNumberOffset$LAYOUT, cbSerialNumberOffset$OFFSET, fieldValue);
        }

        private static final OfInt cbSerialNumberLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSerialNumberLength"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberLength
         * }
         */
        public static final OfInt cbSerialNumberLength$layout() {
            return cbSerialNumberLength$LAYOUT;
        }

        private static final long cbSerialNumberLength$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberLength
         * }
         */
        public static final long cbSerialNumberLength$offset() {
            return cbSerialNumberLength$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberLength
         * }
         */
        public static int cbSerialNumberLength(MemorySegment struct) {
            return struct.get(cbSerialNumberLength$LAYOUT, cbSerialNumberLength$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD cbSerialNumberLength
         * }
         */
        public static void cbSerialNumberLength(MemorySegment struct, int fieldValue) {
            struct.set(cbSerialNumberLength$LAYOUT, cbSerialNumberLength$OFFSET, fieldValue);
        }

        private static final OfInt dwDesiredCardModuleVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwDesiredCardModuleVersion"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static final OfInt dwDesiredCardModuleVersion$layout() {
            return dwDesiredCardModuleVersion$LAYOUT;
        }

        private static final long dwDesiredCardModuleVersion$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static final long dwDesiredCardModuleVersion$offset() {
            return dwDesiredCardModuleVersion$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static int dwDesiredCardModuleVersion(MemorySegment struct) {
            return struct.get(dwDesiredCardModuleVersion$LAYOUT, dwDesiredCardModuleVersion$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD dwDesiredCardModuleVersion
         * }
         */
        public static void dwDesiredCardModuleVersion(MemorySegment struct, int fieldValue) {
            struct.set(dwDesiredCardModuleVersion$LAYOUT, dwDesiredCardModuleVersion$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout SerialNumberParameter$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$1096:5"), groupElement("SerialNumberParameter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbSerialNumberOffset;
     *     DWORD cbSerialNumberLength;
     *     DWORD dwDesiredCardModuleVersion;
     * } SerialNumberParameter
     * }
     */
    public static final GroupLayout SerialNumberParameter$layout() {
        return SerialNumberParameter$LAYOUT;
    }

    private static final long SerialNumberParameter$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbSerialNumberOffset;
     *     DWORD cbSerialNumberLength;
     *     DWORD dwDesiredCardModuleVersion;
     * } SerialNumberParameter
     * }
     */
    public static final long SerialNumberParameter$offset() {
        return SerialNumberParameter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbSerialNumberOffset;
     *     DWORD cbSerialNumberLength;
     *     DWORD dwDesiredCardModuleVersion;
     * } SerialNumberParameter
     * }
     */
    public static MemorySegment SerialNumberParameter(MemorySegment struct) {
        return struct.asSlice(SerialNumberParameter$OFFSET, SerialNumberParameter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     DWORD cbSerialNumberOffset;
     *     DWORD cbSerialNumberLength;
     *     DWORD dwDesiredCardModuleVersion;
     * } SerialNumberParameter
     * }
     */
    public static void SerialNumberParameter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SerialNumberParameter$OFFSET, SerialNumberParameter$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

