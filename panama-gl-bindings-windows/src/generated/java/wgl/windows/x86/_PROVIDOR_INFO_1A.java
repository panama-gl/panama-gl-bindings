// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PROVIDOR_INFO_1A {
 *     LPSTR pName;
 *     LPSTR pEnvironment;
 *     LPSTR pDLLName;
 * }
 * }
 */
public class _PROVIDOR_INFO_1A {

    _PROVIDOR_INFO_1A() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pName"),
        wgl_h.C_POINTER.withName("pEnvironment"),
        wgl_h.C_POINTER.withName("pDLLName")
    ).withName("_PROVIDOR_INFO_1A");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pName
     * }
     */
    public static final AddressLayout pName$layout() {
        return pName$LAYOUT;
    }

    private static final long pName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pName
     * }
     */
    public static final long pName$offset() {
        return pName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pName
     * }
     */
    public static MemorySegment pName(MemorySegment struct) {
        return struct.get(pName$LAYOUT, pName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pName
     * }
     */
    public static void pName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pName$LAYOUT, pName$OFFSET, fieldValue);
    }

    private static final AddressLayout pEnvironment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pEnvironment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pEnvironment
     * }
     */
    public static final AddressLayout pEnvironment$layout() {
        return pEnvironment$LAYOUT;
    }

    private static final long pEnvironment$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pEnvironment
     * }
     */
    public static final long pEnvironment$offset() {
        return pEnvironment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pEnvironment
     * }
     */
    public static MemorySegment pEnvironment(MemorySegment struct) {
        return struct.get(pEnvironment$LAYOUT, pEnvironment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pEnvironment
     * }
     */
    public static void pEnvironment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pEnvironment$LAYOUT, pEnvironment$OFFSET, fieldValue);
    }

    private static final AddressLayout pDLLName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDLLName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPSTR pDLLName
     * }
     */
    public static final AddressLayout pDLLName$layout() {
        return pDLLName$LAYOUT;
    }

    private static final long pDLLName$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPSTR pDLLName
     * }
     */
    public static final long pDLLName$offset() {
        return pDLLName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPSTR pDLLName
     * }
     */
    public static MemorySegment pDLLName(MemorySegment struct) {
        return struct.get(pDLLName$LAYOUT, pDLLName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPSTR pDLLName
     * }
     */
    public static void pDLLName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDLLName$LAYOUT, pDLLName$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

