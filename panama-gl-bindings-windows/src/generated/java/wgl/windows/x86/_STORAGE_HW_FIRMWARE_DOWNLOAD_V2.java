// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD Flags;
 *     BYTE Slot;
 *     BYTE Reserved[3];
 *     DWORDLONG Offset;
 *     DWORDLONG BufferSize;
 *     DWORD ImageSize;
 *     DWORD Reserved2;
 *     BYTE ImageBuffer[1];
 * }
 * }
 */
public class _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {

    _STORAGE_HW_FIRMWARE_DOWNLOAD_V2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_CHAR.withName("Slot"),
        MemoryLayout.sequenceLayout(3, wgl_h.C_CHAR).withName("Reserved"),
        wgl_h.C_LONG_LONG.withName("Offset"),
        wgl_h.C_LONG_LONG.withName("BufferSize"),
        wgl_h.C_LONG.withName("ImageSize"),
        wgl_h.C_LONG.withName("Reserved2"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_CHAR).withName("ImageBuffer"),
        MemoryLayout.paddingLayout(7)
    ).withName("_STORAGE_HW_FIRMWARE_DOWNLOAD_V2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfByte Slot$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Slot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Slot
     * }
     */
    public static final OfByte Slot$layout() {
        return Slot$LAYOUT;
    }

    private static final long Slot$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Slot
     * }
     */
    public static final long Slot$offset() {
        return Slot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Slot
     * }
     */
    public static byte Slot(MemorySegment struct) {
        return struct.get(Slot$LAYOUT, Slot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Slot
     * }
     */
    public static void Slot(MemorySegment struct, byte fieldValue) {
        struct.set(Slot$LAYOUT, Slot$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final VarHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static byte Reserved(MemorySegment struct, long index0) {
        return (byte)Reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Reserved[3]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, byte fieldValue) {
        Reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong Offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static final OfLong Offset$layout() {
        return Offset$LAYOUT;
    }

    private static final long Offset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static final long Offset$offset() {
        return Offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static long Offset(MemorySegment struct) {
        return struct.get(Offset$LAYOUT, Offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG Offset
     * }
     */
    public static void Offset(MemorySegment struct, long fieldValue) {
        struct.set(Offset$LAYOUT, Offset$OFFSET, fieldValue);
    }

    private static final OfLong BufferSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BufferSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSize
     * }
     */
    public static final OfLong BufferSize$layout() {
        return BufferSize$LAYOUT;
    }

    private static final long BufferSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSize
     * }
     */
    public static final long BufferSize$offset() {
        return BufferSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSize
     * }
     */
    public static long BufferSize(MemorySegment struct) {
        return struct.get(BufferSize$LAYOUT, BufferSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG BufferSize
     * }
     */
    public static void BufferSize(MemorySegment struct, long fieldValue) {
        struct.set(BufferSize$LAYOUT, BufferSize$OFFSET, fieldValue);
    }

    private static final OfInt ImageSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ImageSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ImageSize
     * }
     */
    public static final OfInt ImageSize$layout() {
        return ImageSize$LAYOUT;
    }

    private static final long ImageSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ImageSize
     * }
     */
    public static final long ImageSize$offset() {
        return ImageSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ImageSize
     * }
     */
    public static int ImageSize(MemorySegment struct) {
        return struct.get(ImageSize$LAYOUT, ImageSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ImageSize
     * }
     */
    public static void ImageSize(MemorySegment struct, int fieldValue) {
        struct.set(ImageSize$LAYOUT, ImageSize$OFFSET, fieldValue);
    }

    private static final OfInt Reserved2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reserved2
     * }
     */
    public static final OfInt Reserved2$layout() {
        return Reserved2$LAYOUT;
    }

    private static final long Reserved2$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reserved2
     * }
     */
    public static final long Reserved2$offset() {
        return Reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reserved2
     * }
     */
    public static int Reserved2(MemorySegment struct) {
        return struct.get(Reserved2$LAYOUT, Reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reserved2
     * }
     */
    public static void Reserved2(MemorySegment struct, int fieldValue) {
        struct.set(Reserved2$LAYOUT, Reserved2$OFFSET, fieldValue);
    }

    private static final SequenceLayout ImageBuffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ImageBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static final SequenceLayout ImageBuffer$layout() {
        return ImageBuffer$LAYOUT;
    }

    private static final long ImageBuffer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static final long ImageBuffer$offset() {
        return ImageBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static MemorySegment ImageBuffer(MemorySegment struct) {
        return struct.asSlice(ImageBuffer$OFFSET, ImageBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static void ImageBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ImageBuffer$OFFSET, ImageBuffer$LAYOUT.byteSize());
    }

    private static long[] ImageBuffer$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static long[] ImageBuffer$dimensions() {
        return ImageBuffer$DIMS;
    }
    private static final VarHandle ImageBuffer$ELEM_HANDLE = ImageBuffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static byte ImageBuffer(MemorySegment struct, long index0) {
        return (byte)ImageBuffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE ImageBuffer[1]
     * }
     */
    public static void ImageBuffer(MemorySegment struct, long index0, byte fieldValue) {
        ImageBuffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

