// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_CHAR$LAYOUT.withName("Slot"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_CHAR$LAYOUT).withName("Reserved"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("BufferSize"),
        Constants$root.C_LONG$LAYOUT.withName("ImageSize"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved2"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("ImageBuffer"),
        MemoryLayout.paddingLayout(56)
    ).withName("_STORAGE_HW_FIRMWARE_DOWNLOAD_V2");
    public static MemoryLayout $LAYOUT() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Slot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Slot"));
    public static VarHandle Slot$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Slot$VH;
    }
    public static byte Slot$get(MemorySegment seg) {
        return (byte)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Slot$VH.get(seg);
    }
    public static void Slot$set( MemorySegment seg, byte x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Slot$VH.set(seg, x);
    }
    public static byte Slot$get(MemorySegment seg, long index) {
        return (byte)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Slot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Slot$set(MemorySegment seg, long index, byte x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Slot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(13, 3);
    }
    static final VarHandle Offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Offset"));
    public static VarHandle Offset$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Offset$VH;
    }
    public static long Offset$get(MemorySegment seg) {
        return (long)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Offset$VH.get(seg);
    }
    public static void Offset$set( MemorySegment seg, long x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Offset$VH.set(seg, x);
    }
    public static long Offset$get(MemorySegment seg, long index) {
        return (long)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Offset$set(MemorySegment seg, long index, long x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BufferSize"));
    public static VarHandle BufferSize$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.BufferSize$VH;
    }
    public static long BufferSize$get(MemorySegment seg) {
        return (long)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.BufferSize$VH.get(seg);
    }
    public static void BufferSize$set( MemorySegment seg, long x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.BufferSize$VH.set(seg, x);
    }
    public static long BufferSize$get(MemorySegment seg, long index) {
        return (long)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.BufferSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferSize$set(MemorySegment seg, long index, long x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.BufferSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ImageSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ImageSize"));
    public static VarHandle ImageSize$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.ImageSize$VH;
    }
    public static int ImageSize$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.ImageSize$VH.get(seg);
    }
    public static void ImageSize$set( MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.ImageSize$VH.set(seg, x);
    }
    public static int ImageSize$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.ImageSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ImageSize$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.ImageSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved2"));
    public static VarHandle Reserved2$VH() {
        return _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Reserved2$VH;
    }
    public static int Reserved2$get(MemorySegment seg) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Reserved2$VH.get(seg);
    }
    public static void Reserved2$set( MemorySegment seg, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Reserved2$VH.set(seg, x);
    }
    public static int Reserved2$get(MemorySegment seg, long index) {
        return (int)_STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, int x) {
        _STORAGE_HW_FIRMWARE_DOWNLOAD_V2.Reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ImageBuffer$slice(MemorySegment seg) {
        return seg.asSlice(40, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


