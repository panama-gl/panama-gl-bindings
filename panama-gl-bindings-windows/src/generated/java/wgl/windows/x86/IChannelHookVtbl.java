// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IChannelHookVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientFillBuffer"),
        Constants$root.C_POINTER$LAYOUT.withName("ClientNotify"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerNotify"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerGetSize"),
        Constants$root.C_POINTER$LAYOUT.withName("ServerFillBuffer")
    ).withName("IChannelHookVtbl");
    public static MemoryLayout $LAYOUT() {
        return IChannelHookVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IChannelHookVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IChannelHookVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IChannelHookVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IChannelHookVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IChannelHookVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IChannelHookVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IChannelHookVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IChannelHookVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IChannelHookVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor ClientGetSize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientGetSize$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientGetSize$FUNC
    );
    public interface ClientGetSize {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(ClientGetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ClientGetSize.class, fi, IChannelHookVtbl.ClientGetSize$FUNC, session);
        }
        static ClientGetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    IChannelHookVtbl.ClientGetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientGetSize"));
    public static VarHandle ClientGetSize$VH() {
        return IChannelHookVtbl.ClientGetSize$VH;
    }
    public static MemoryAddress ClientGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientGetSize$VH.get(seg);
    }
    public static void ClientGetSize$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ClientGetSize$VH.set(seg, x);
    }
    public static MemoryAddress ClientGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ClientGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientGetSize ClientGetSize (MemorySegment segment, MemorySession session) {
        return ClientGetSize.ofAddress(ClientGetSize$get(segment), session);
    }
    static final FunctionDescriptor ClientFillBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ClientFillBuffer$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientFillBuffer$FUNC
    );
    public interface ClientFillBuffer {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(ClientFillBuffer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ClientFillBuffer.class, fi, IChannelHookVtbl.ClientFillBuffer$FUNC, session);
        }
        static ClientFillBuffer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    IChannelHookVtbl.ClientFillBuffer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientFillBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientFillBuffer"));
    public static VarHandle ClientFillBuffer$VH() {
        return IChannelHookVtbl.ClientFillBuffer$VH;
    }
    public static MemoryAddress ClientFillBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientFillBuffer$VH.get(seg);
    }
    public static void ClientFillBuffer$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ClientFillBuffer$VH.set(seg, x);
    }
    public static MemoryAddress ClientFillBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientFillBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientFillBuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ClientFillBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientFillBuffer ClientFillBuffer (MemorySegment segment, MemorySession session) {
        return ClientFillBuffer.ofAddress(ClientFillBuffer$get(segment), session);
    }
    static final FunctionDescriptor ClientNotify$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ClientNotify$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ClientNotify$FUNC
    );
    public interface ClientNotify {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, int _x5, int _x6);
        static MemorySegment allocate(ClientNotify fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ClientNotify.class, fi, IChannelHookVtbl.ClientNotify$FUNC, session);
        }
        static ClientNotify ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, int __x5, int __x6) -> {
                try {
                    IChannelHookVtbl.ClientNotify$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ClientNotify$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ClientNotify"));
    public static VarHandle ClientNotify$VH() {
        return IChannelHookVtbl.ClientNotify$VH;
    }
    public static MemoryAddress ClientNotify$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientNotify$VH.get(seg);
    }
    public static void ClientNotify$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ClientNotify$VH.set(seg, x);
    }
    public static MemoryAddress ClientNotify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ClientNotify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ClientNotify$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ClientNotify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ClientNotify ClientNotify (MemorySegment segment, MemorySession session) {
        return ClientNotify.ofAddress(ClientNotify$get(segment), session);
    }
    static final FunctionDescriptor ServerNotify$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerNotify$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerNotify$FUNC
    );
    public interface ServerNotify {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(ServerNotify fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ServerNotify.class, fi, IChannelHookVtbl.ServerNotify$FUNC, session);
        }
        static ServerNotify ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    IChannelHookVtbl.ServerNotify$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerNotify$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerNotify"));
    public static VarHandle ServerNotify$VH() {
        return IChannelHookVtbl.ServerNotify$VH;
    }
    public static MemoryAddress ServerNotify$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerNotify$VH.get(seg);
    }
    public static void ServerNotify$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ServerNotify$VH.set(seg, x);
    }
    public static MemoryAddress ServerNotify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerNotify$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerNotify$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ServerNotify$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerNotify ServerNotify (MemorySegment segment, MemorySession session) {
        return ServerNotify.ofAddress(ServerNotify$get(segment), session);
    }
    static final FunctionDescriptor ServerGetSize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ServerGetSize$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerGetSize$FUNC
    );
    public interface ServerGetSize {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(ServerGetSize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ServerGetSize.class, fi, IChannelHookVtbl.ServerGetSize$FUNC, session);
        }
        static ServerGetSize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    IChannelHookVtbl.ServerGetSize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerGetSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerGetSize"));
    public static VarHandle ServerGetSize$VH() {
        return IChannelHookVtbl.ServerGetSize$VH;
    }
    public static MemoryAddress ServerGetSize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerGetSize$VH.get(seg);
    }
    public static void ServerGetSize$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ServerGetSize$VH.set(seg, x);
    }
    public static MemoryAddress ServerGetSize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerGetSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerGetSize$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ServerGetSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerGetSize ServerGetSize (MemorySegment segment, MemorySession session) {
        return ServerGetSize.ofAddress(ServerGetSize$get(segment), session);
    }
    static final FunctionDescriptor ServerFillBuffer$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle ServerFillBuffer$MH = RuntimeHelper.downcallHandle(
        IChannelHookVtbl.ServerFillBuffer$FUNC
    );
    public interface ServerFillBuffer {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(ServerFillBuffer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ServerFillBuffer.class, fi, IChannelHookVtbl.ServerFillBuffer$FUNC, session);
        }
        static ServerFillBuffer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    IChannelHookVtbl.ServerFillBuffer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ServerFillBuffer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ServerFillBuffer"));
    public static VarHandle ServerFillBuffer$VH() {
        return IChannelHookVtbl.ServerFillBuffer$VH;
    }
    public static MemoryAddress ServerFillBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerFillBuffer$VH.get(seg);
    }
    public static void ServerFillBuffer$set( MemorySegment seg, MemoryAddress x) {
        IChannelHookVtbl.ServerFillBuffer$VH.set(seg, x);
    }
    public static MemoryAddress ServerFillBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IChannelHookVtbl.ServerFillBuffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ServerFillBuffer$set(MemorySegment seg, long index, MemoryAddress x) {
        IChannelHookVtbl.ServerFillBuffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ServerFillBuffer ServerFillBuffer (MemorySegment segment, MemorySession session) {
        return ServerFillBuffer.ofAddress(ServerFillBuffer$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


