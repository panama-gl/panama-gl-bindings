// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SCM_PD_FIRMWARE_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_CHAR$LAYOUT.withName("ActiveSlot"),
        Constants$root.C_CHAR$LAYOUT.withName("NextActiveSlot"),
        Constants$root.C_CHAR$LAYOUT.withName("SlotCount"),
        MemoryLayout.paddingLayout(8),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Version"),
            Constants$root.C_LONG$LAYOUT.withName("Size"),
            Constants$root.C_CHAR$LAYOUT.withName("SlotNumber"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(1).withName("ReadOnly"),
                MemoryLayout.paddingLayout(7).withName("Reserved0")
            ),
            MemoryLayout.sequenceLayout(6, Constants$root.C_CHAR$LAYOUT).withName("Reserved1"),
            MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("Revision")
        ).withName("_SCM_PD_FIRMWARE_SLOT_INFO")).withName("Slots")
    ).withName("_SCM_PD_FIRMWARE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _SCM_PD_FIRMWARE_INFO.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _SCM_PD_FIRMWARE_INFO.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_SCM_PD_FIRMWARE_INFO.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _SCM_PD_FIRMWARE_INFO.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_SCM_PD_FIRMWARE_INFO.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _SCM_PD_FIRMWARE_INFO.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SCM_PD_FIRMWARE_INFO.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_SCM_PD_FIRMWARE_INFO.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _SCM_PD_FIRMWARE_INFO.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_SCM_PD_FIRMWARE_INFO.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _SCM_PD_FIRMWARE_INFO.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ActiveSlot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ActiveSlot"));
    public static VarHandle ActiveSlot$VH() {
        return _SCM_PD_FIRMWARE_INFO.ActiveSlot$VH;
    }
    public static byte ActiveSlot$get(MemorySegment seg) {
        return (byte)_SCM_PD_FIRMWARE_INFO.ActiveSlot$VH.get(seg);
    }
    public static void ActiveSlot$set( MemorySegment seg, byte x) {
        _SCM_PD_FIRMWARE_INFO.ActiveSlot$VH.set(seg, x);
    }
    public static byte ActiveSlot$get(MemorySegment seg, long index) {
        return (byte)_SCM_PD_FIRMWARE_INFO.ActiveSlot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveSlot$set(MemorySegment seg, long index, byte x) {
        _SCM_PD_FIRMWARE_INFO.ActiveSlot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NextActiveSlot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NextActiveSlot"));
    public static VarHandle NextActiveSlot$VH() {
        return _SCM_PD_FIRMWARE_INFO.NextActiveSlot$VH;
    }
    public static byte NextActiveSlot$get(MemorySegment seg) {
        return (byte)_SCM_PD_FIRMWARE_INFO.NextActiveSlot$VH.get(seg);
    }
    public static void NextActiveSlot$set( MemorySegment seg, byte x) {
        _SCM_PD_FIRMWARE_INFO.NextActiveSlot$VH.set(seg, x);
    }
    public static byte NextActiveSlot$get(MemorySegment seg, long index) {
        return (byte)_SCM_PD_FIRMWARE_INFO.NextActiveSlot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NextActiveSlot$set(MemorySegment seg, long index, byte x) {
        _SCM_PD_FIRMWARE_INFO.NextActiveSlot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SlotCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SlotCount"));
    public static VarHandle SlotCount$VH() {
        return _SCM_PD_FIRMWARE_INFO.SlotCount$VH;
    }
    public static byte SlotCount$get(MemorySegment seg) {
        return (byte)_SCM_PD_FIRMWARE_INFO.SlotCount$VH.get(seg);
    }
    public static void SlotCount$set( MemorySegment seg, byte x) {
        _SCM_PD_FIRMWARE_INFO.SlotCount$VH.set(seg, x);
    }
    public static byte SlotCount$get(MemorySegment seg, long index) {
        return (byte)_SCM_PD_FIRMWARE_INFO.SlotCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SlotCount$set(MemorySegment seg, long index, byte x) {
        _SCM_PD_FIRMWARE_INFO.SlotCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Slots$slice(MemorySegment seg) {
        return seg.asSlice(12, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


