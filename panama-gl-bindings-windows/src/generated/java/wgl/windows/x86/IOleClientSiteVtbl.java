// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IOleClientSiteVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("SaveObject"),
        Constants$root.C_POINTER$LAYOUT.withName("GetMoniker"),
        Constants$root.C_POINTER$LAYOUT.withName("GetContainer"),
        Constants$root.C_POINTER$LAYOUT.withName("ShowObject"),
        Constants$root.C_POINTER$LAYOUT.withName("OnShowWindow"),
        Constants$root.C_POINTER$LAYOUT.withName("RequestNewObjectLayout")
    ).withName("IOleClientSiteVtbl");
    public static MemoryLayout $LAYOUT() {
        return IOleClientSiteVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IOleClientSiteVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IOleClientSiteVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IOleClientSiteVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IOleClientSiteVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IOleClientSiteVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IOleClientSiteVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IOleClientSiteVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor SaveObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SaveObject$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.SaveObject$FUNC
    );
    public interface SaveObject {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(SaveObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(SaveObject.class, fi, IOleClientSiteVtbl.SaveObject$FUNC, session);
        }
        static SaveObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.SaveObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle SaveObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SaveObject"));
    public static VarHandle SaveObject$VH() {
        return IOleClientSiteVtbl.SaveObject$VH;
    }
    public static MemoryAddress SaveObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.SaveObject$VH.get(seg);
    }
    public static void SaveObject$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.SaveObject$VH.set(seg, x);
    }
    public static MemoryAddress SaveObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.SaveObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SaveObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.SaveObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static SaveObject SaveObject (MemorySegment segment, MemorySession session) {
        return SaveObject.ofAddress(SaveObject$get(segment), session);
    }
    static final FunctionDescriptor GetMoniker$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetMoniker$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.GetMoniker$FUNC
    );
    public interface GetMoniker {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetMoniker fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetMoniker.class, fi, IOleClientSiteVtbl.GetMoniker$FUNC, session);
        }
        static GetMoniker ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IOleClientSiteVtbl.GetMoniker$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetMoniker$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetMoniker"));
    public static VarHandle GetMoniker$VH() {
        return IOleClientSiteVtbl.GetMoniker$VH;
    }
    public static MemoryAddress GetMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.GetMoniker$VH.get(seg);
    }
    public static void GetMoniker$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.GetMoniker$VH.set(seg, x);
    }
    public static MemoryAddress GetMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.GetMoniker$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMoniker$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.GetMoniker$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMoniker GetMoniker (MemorySegment segment, MemorySession session) {
        return GetMoniker.ofAddress(GetMoniker$get(segment), session);
    }
    static final FunctionDescriptor GetContainer$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetContainer$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.GetContainer$FUNC
    );
    public interface GetContainer {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetContainer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetContainer.class, fi, IOleClientSiteVtbl.GetContainer$FUNC, session);
        }
        static GetContainer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IOleClientSiteVtbl.GetContainer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetContainer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetContainer"));
    public static VarHandle GetContainer$VH() {
        return IOleClientSiteVtbl.GetContainer$VH;
    }
    public static MemoryAddress GetContainer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.GetContainer$VH.get(seg);
    }
    public static void GetContainer$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.GetContainer$VH.set(seg, x);
    }
    public static MemoryAddress GetContainer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.GetContainer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetContainer$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.GetContainer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetContainer GetContainer (MemorySegment segment, MemorySession session) {
        return GetContainer.ofAddress(GetContainer$get(segment), session);
    }
    static final FunctionDescriptor ShowObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ShowObject$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.ShowObject$FUNC
    );
    public interface ShowObject {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ShowObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ShowObject.class, fi, IOleClientSiteVtbl.ShowObject$FUNC, session);
        }
        static ShowObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.ShowObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ShowObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ShowObject"));
    public static VarHandle ShowObject$VH() {
        return IOleClientSiteVtbl.ShowObject$VH;
    }
    public static MemoryAddress ShowObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.ShowObject$VH.get(seg);
    }
    public static void ShowObject$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.ShowObject$VH.set(seg, x);
    }
    public static MemoryAddress ShowObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.ShowObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ShowObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.ShowObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ShowObject ShowObject (MemorySegment segment, MemorySession session) {
        return ShowObject.ofAddress(ShowObject$get(segment), session);
    }
    static final FunctionDescriptor OnShowWindow$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle OnShowWindow$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.OnShowWindow$FUNC
    );
    public interface OnShowWindow {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(OnShowWindow fi, MemorySession session) {
            return RuntimeHelper.upcallStub(OnShowWindow.class, fi, IOleClientSiteVtbl.OnShowWindow$FUNC, session);
        }
        static OnShowWindow ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IOleClientSiteVtbl.OnShowWindow$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle OnShowWindow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OnShowWindow"));
    public static VarHandle OnShowWindow$VH() {
        return IOleClientSiteVtbl.OnShowWindow$VH;
    }
    public static MemoryAddress OnShowWindow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.OnShowWindow$VH.get(seg);
    }
    public static void OnShowWindow$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.OnShowWindow$VH.set(seg, x);
    }
    public static MemoryAddress OnShowWindow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.OnShowWindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OnShowWindow$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.OnShowWindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static OnShowWindow OnShowWindow (MemorySegment segment, MemorySession session) {
        return OnShowWindow.ofAddress(OnShowWindow$get(segment), session);
    }
    static final FunctionDescriptor RequestNewObjectLayout$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RequestNewObjectLayout$MH = RuntimeHelper.downcallHandle(
        IOleClientSiteVtbl.RequestNewObjectLayout$FUNC
    );
    public interface RequestNewObjectLayout {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(RequestNewObjectLayout fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RequestNewObjectLayout.class, fi, IOleClientSiteVtbl.RequestNewObjectLayout$FUNC, session);
        }
        static RequestNewObjectLayout ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IOleClientSiteVtbl.RequestNewObjectLayout$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RequestNewObjectLayout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RequestNewObjectLayout"));
    public static VarHandle RequestNewObjectLayout$VH() {
        return IOleClientSiteVtbl.RequestNewObjectLayout$VH;
    }
    public static MemoryAddress RequestNewObjectLayout$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.RequestNewObjectLayout$VH.get(seg);
    }
    public static void RequestNewObjectLayout$set( MemorySegment seg, MemoryAddress x) {
        IOleClientSiteVtbl.RequestNewObjectLayout$VH.set(seg, x);
    }
    public static MemoryAddress RequestNewObjectLayout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IOleClientSiteVtbl.RequestNewObjectLayout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RequestNewObjectLayout$set(MemorySegment seg, long index, MemoryAddress x) {
        IOleClientSiteVtbl.RequestNewObjectLayout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RequestNewObjectLayout RequestNewObjectLayout (MemorySegment segment, MemorySession session) {
        return RequestNewObjectLayout.ofAddress(RequestNewObjectLayout$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


