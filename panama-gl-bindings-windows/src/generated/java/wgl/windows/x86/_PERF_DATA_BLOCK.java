// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PERF_DATA_BLOCK {
 *     WCHAR Signature[4];
 *     DWORD LittleEndian;
 *     DWORD Version;
 *     DWORD Revision;
 *     DWORD TotalByteLength;
 *     DWORD HeaderLength;
 *     DWORD NumObjectTypes;
 *     LONG DefaultObject;
 *     SYSTEMTIME SystemTime;
 *     LARGE_INTEGER PerfTime;
 *     LARGE_INTEGER PerfFreq;
 *     LARGE_INTEGER PerfTime100nSec;
 *     DWORD SystemNameLength;
 *     DWORD SystemNameOffset;
 * }
 * }
 */
public class _PERF_DATA_BLOCK {

    _PERF_DATA_BLOCK() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, wgl_h.C_SHORT).withName("Signature"),
        wgl_h.C_LONG.withName("LittleEndian"),
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Revision"),
        wgl_h.C_LONG.withName("TotalByteLength"),
        wgl_h.C_LONG.withName("HeaderLength"),
        wgl_h.C_LONG.withName("NumObjectTypes"),
        wgl_h.C_LONG.withName("DefaultObject"),
        _SYSTEMTIME.layout().withName("SystemTime"),
        MemoryLayout.paddingLayout(4),
        _LARGE_INTEGER.layout().withName("PerfTime"),
        _LARGE_INTEGER.layout().withName("PerfFreq"),
        _LARGE_INTEGER.layout().withName("PerfTime100nSec"),
        wgl_h.C_LONG.withName("SystemNameLength"),
        wgl_h.C_LONG.withName("SystemNameOffset")
    ).withName("_PERF_DATA_BLOCK");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Signature$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static final SequenceLayout Signature$layout() {
        return Signature$LAYOUT;
    }

    private static final long Signature$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static final long Signature$offset() {
        return Signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static MemorySegment Signature(MemorySegment struct) {
        return struct.asSlice(Signature$OFFSET, Signature$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static void Signature(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Signature$OFFSET, Signature$LAYOUT.byteSize());
    }

    private static long[] Signature$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static long[] Signature$dimensions() {
        return Signature$DIMS;
    }
    private static final VarHandle Signature$ELEM_HANDLE = Signature$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static short Signature(MemorySegment struct, long index0) {
        return (short)Signature$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR Signature[4]
     * }
     */
    public static void Signature(MemorySegment struct, long index0, short fieldValue) {
        Signature$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt LittleEndian$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LittleEndian"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LittleEndian
     * }
     */
    public static final OfInt LittleEndian$layout() {
        return LittleEndian$LAYOUT;
    }

    private static final long LittleEndian$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LittleEndian
     * }
     */
    public static final long LittleEndian$offset() {
        return LittleEndian$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LittleEndian
     * }
     */
    public static int LittleEndian(MemorySegment struct) {
        return struct.get(LittleEndian$LAYOUT, LittleEndian$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LittleEndian
     * }
     */
    public static void LittleEndian(MemorySegment struct, int fieldValue) {
        struct.set(LittleEndian$LAYOUT, LittleEndian$OFFSET, fieldValue);
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Revision$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Revision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Revision
     * }
     */
    public static final OfInt Revision$layout() {
        return Revision$LAYOUT;
    }

    private static final long Revision$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Revision
     * }
     */
    public static final long Revision$offset() {
        return Revision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Revision
     * }
     */
    public static int Revision(MemorySegment struct) {
        return struct.get(Revision$LAYOUT, Revision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Revision
     * }
     */
    public static void Revision(MemorySegment struct, int fieldValue) {
        struct.set(Revision$LAYOUT, Revision$OFFSET, fieldValue);
    }

    private static final OfInt TotalByteLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TotalByteLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TotalByteLength
     * }
     */
    public static final OfInt TotalByteLength$layout() {
        return TotalByteLength$LAYOUT;
    }

    private static final long TotalByteLength$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TotalByteLength
     * }
     */
    public static final long TotalByteLength$offset() {
        return TotalByteLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TotalByteLength
     * }
     */
    public static int TotalByteLength(MemorySegment struct) {
        return struct.get(TotalByteLength$LAYOUT, TotalByteLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TotalByteLength
     * }
     */
    public static void TotalByteLength(MemorySegment struct, int fieldValue) {
        struct.set(TotalByteLength$LAYOUT, TotalByteLength$OFFSET, fieldValue);
    }

    private static final OfInt HeaderLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HeaderLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD HeaderLength
     * }
     */
    public static final OfInt HeaderLength$layout() {
        return HeaderLength$LAYOUT;
    }

    private static final long HeaderLength$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD HeaderLength
     * }
     */
    public static final long HeaderLength$offset() {
        return HeaderLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD HeaderLength
     * }
     */
    public static int HeaderLength(MemorySegment struct) {
        return struct.get(HeaderLength$LAYOUT, HeaderLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD HeaderLength
     * }
     */
    public static void HeaderLength(MemorySegment struct, int fieldValue) {
        struct.set(HeaderLength$LAYOUT, HeaderLength$OFFSET, fieldValue);
    }

    private static final OfInt NumObjectTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumObjectTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumObjectTypes
     * }
     */
    public static final OfInt NumObjectTypes$layout() {
        return NumObjectTypes$LAYOUT;
    }

    private static final long NumObjectTypes$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumObjectTypes
     * }
     */
    public static final long NumObjectTypes$offset() {
        return NumObjectTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumObjectTypes
     * }
     */
    public static int NumObjectTypes(MemorySegment struct) {
        return struct.get(NumObjectTypes$LAYOUT, NumObjectTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumObjectTypes
     * }
     */
    public static void NumObjectTypes(MemorySegment struct, int fieldValue) {
        struct.set(NumObjectTypes$LAYOUT, NumObjectTypes$OFFSET, fieldValue);
    }

    private static final OfInt DefaultObject$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DefaultObject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG DefaultObject
     * }
     */
    public static final OfInt DefaultObject$layout() {
        return DefaultObject$LAYOUT;
    }

    private static final long DefaultObject$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG DefaultObject
     * }
     */
    public static final long DefaultObject$offset() {
        return DefaultObject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG DefaultObject
     * }
     */
    public static int DefaultObject(MemorySegment struct) {
        return struct.get(DefaultObject$LAYOUT, DefaultObject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG DefaultObject
     * }
     */
    public static void DefaultObject(MemorySegment struct, int fieldValue) {
        struct.set(DefaultObject$LAYOUT, DefaultObject$OFFSET, fieldValue);
    }

    private static final GroupLayout SystemTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SystemTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SYSTEMTIME SystemTime
     * }
     */
    public static final GroupLayout SystemTime$layout() {
        return SystemTime$LAYOUT;
    }

    private static final long SystemTime$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SYSTEMTIME SystemTime
     * }
     */
    public static final long SystemTime$offset() {
        return SystemTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SYSTEMTIME SystemTime
     * }
     */
    public static MemorySegment SystemTime(MemorySegment struct) {
        return struct.asSlice(SystemTime$OFFSET, SystemTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SYSTEMTIME SystemTime
     * }
     */
    public static void SystemTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SystemTime$OFFSET, SystemTime$LAYOUT.byteSize());
    }

    private static final GroupLayout PerfTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PerfTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime
     * }
     */
    public static final GroupLayout PerfTime$layout() {
        return PerfTime$LAYOUT;
    }

    private static final long PerfTime$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime
     * }
     */
    public static final long PerfTime$offset() {
        return PerfTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime
     * }
     */
    public static MemorySegment PerfTime(MemorySegment struct) {
        return struct.asSlice(PerfTime$OFFSET, PerfTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime
     * }
     */
    public static void PerfTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PerfTime$OFFSET, PerfTime$LAYOUT.byteSize());
    }

    private static final GroupLayout PerfFreq$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PerfFreq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfFreq
     * }
     */
    public static final GroupLayout PerfFreq$layout() {
        return PerfFreq$LAYOUT;
    }

    private static final long PerfFreq$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfFreq
     * }
     */
    public static final long PerfFreq$offset() {
        return PerfFreq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfFreq
     * }
     */
    public static MemorySegment PerfFreq(MemorySegment struct) {
        return struct.asSlice(PerfFreq$OFFSET, PerfFreq$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfFreq
     * }
     */
    public static void PerfFreq(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PerfFreq$OFFSET, PerfFreq$LAYOUT.byteSize());
    }

    private static final GroupLayout PerfTime100nSec$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PerfTime100nSec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime100nSec
     * }
     */
    public static final GroupLayout PerfTime100nSec$layout() {
        return PerfTime100nSec$LAYOUT;
    }

    private static final long PerfTime100nSec$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime100nSec
     * }
     */
    public static final long PerfTime100nSec$offset() {
        return PerfTime100nSec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime100nSec
     * }
     */
    public static MemorySegment PerfTime100nSec(MemorySegment struct) {
        return struct.asSlice(PerfTime100nSec$OFFSET, PerfTime100nSec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER PerfTime100nSec
     * }
     */
    public static void PerfTime100nSec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PerfTime100nSec$OFFSET, PerfTime100nSec$LAYOUT.byteSize());
    }

    private static final OfInt SystemNameLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SystemNameLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SystemNameLength
     * }
     */
    public static final OfInt SystemNameLength$layout() {
        return SystemNameLength$LAYOUT;
    }

    private static final long SystemNameLength$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SystemNameLength
     * }
     */
    public static final long SystemNameLength$offset() {
        return SystemNameLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SystemNameLength
     * }
     */
    public static int SystemNameLength(MemorySegment struct) {
        return struct.get(SystemNameLength$LAYOUT, SystemNameLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SystemNameLength
     * }
     */
    public static void SystemNameLength(MemorySegment struct, int fieldValue) {
        struct.set(SystemNameLength$LAYOUT, SystemNameLength$OFFSET, fieldValue);
    }

    private static final OfInt SystemNameOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SystemNameOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SystemNameOffset
     * }
     */
    public static final OfInt SystemNameOffset$layout() {
        return SystemNameOffset$LAYOUT;
    }

    private static final long SystemNameOffset$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SystemNameOffset
     * }
     */
    public static final long SystemNameOffset$offset() {
        return SystemNameOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SystemNameOffset
     * }
     */
    public static int SystemNameOffset(MemorySegment struct) {
        return struct.get(SystemNameOffset$LAYOUT, SystemNameOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SystemNameOffset
     * }
     */
    public static void SystemNameOffset(MemorySegment struct, int fieldValue) {
        struct.set(SystemNameOffset$LAYOUT, SystemNameOffset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

