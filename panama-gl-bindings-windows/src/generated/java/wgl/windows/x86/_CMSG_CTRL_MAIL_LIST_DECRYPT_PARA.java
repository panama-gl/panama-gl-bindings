// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("hCryptProv"),
        Constants$root.C_POINTER$LAYOUT.withName("pMailList"),
        Constants$root.C_LONG$LAYOUT.withName("dwRecipientIndex"),
        Constants$root.C_LONG$LAYOUT.withName("dwKeyChoice"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("hKeyEncryptionKey"),
            Constants$root.C_POINTER$LAYOUT.withName("pvKeyEncryptionKey")
        ).withName("$anon$0")
    ).withName("_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA");
    public static MemoryLayout $LAYOUT() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hCryptProv$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hCryptProv"));
    public static VarHandle hCryptProv$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv$VH;
    }
    public static long hCryptProv$get(MemorySegment seg) {
        return (long)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv$VH.get(seg);
    }
    public static void hCryptProv$set( MemorySegment seg, long x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv$VH.set(seg, x);
    }
    public static long hCryptProv$get(MemorySegment seg, long index) {
        return (long)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hCryptProv$set(MemorySegment seg, long index, long x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hCryptProv$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pMailList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pMailList"));
    public static VarHandle pMailList$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList$VH;
    }
    public static MemoryAddress pMailList$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList$VH.get(seg);
    }
    public static void pMailList$set( MemorySegment seg, MemoryAddress x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList$VH.set(seg, x);
    }
    public static MemoryAddress pMailList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pMailList$set(MemorySegment seg, long index, MemoryAddress x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pMailList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwRecipientIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwRecipientIndex"));
    public static VarHandle dwRecipientIndex$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex$VH;
    }
    public static int dwRecipientIndex$get(MemorySegment seg) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex$VH.get(seg);
    }
    public static void dwRecipientIndex$set( MemorySegment seg, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex$VH.set(seg, x);
    }
    public static int dwRecipientIndex$get(MemorySegment seg, long index) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwRecipientIndex$set(MemorySegment seg, long index, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwRecipientIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwKeyChoice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwKeyChoice"));
    public static VarHandle dwKeyChoice$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice$VH;
    }
    public static int dwKeyChoice$get(MemorySegment seg) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice$VH.get(seg);
    }
    public static void dwKeyChoice$set( MemorySegment seg, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice$VH.set(seg, x);
    }
    public static int dwKeyChoice$get(MemorySegment seg, long index) {
        return (int)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwKeyChoice$set(MemorySegment seg, long index, int x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.dwKeyChoice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hKeyEncryptionKey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("hKeyEncryptionKey"));
    public static VarHandle hKeyEncryptionKey$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey$VH;
    }
    public static long hKeyEncryptionKey$get(MemorySegment seg) {
        return (long)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey$VH.get(seg);
    }
    public static void hKeyEncryptionKey$set( MemorySegment seg, long x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey$VH.set(seg, x);
    }
    public static long hKeyEncryptionKey$get(MemorySegment seg, long index) {
        return (long)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hKeyEncryptionKey$set(MemorySegment seg, long index, long x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.hKeyEncryptionKey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pvKeyEncryptionKey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("pvKeyEncryptionKey"));
    public static VarHandle pvKeyEncryptionKey$VH() {
        return _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pvKeyEncryptionKey$VH;
    }
    public static MemoryAddress pvKeyEncryptionKey$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pvKeyEncryptionKey$VH.get(seg);
    }
    public static void pvKeyEncryptionKey$set( MemorySegment seg, MemoryAddress x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pvKeyEncryptionKey$VH.set(seg, x);
    }
    public static MemoryAddress pvKeyEncryptionKey$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pvKeyEncryptionKey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pvKeyEncryptionKey$set(MemorySegment seg, long index, MemoryAddress x) {
        _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.pvKeyEncryptionKey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


