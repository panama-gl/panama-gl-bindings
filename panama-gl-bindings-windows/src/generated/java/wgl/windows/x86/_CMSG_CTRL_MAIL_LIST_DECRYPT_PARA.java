// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
 *     DWORD cbSize;
 *     HCRYPTPROV hCryptProv;
 *     PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;
 *     DWORD dwRecipientIndex;
 *     DWORD dwKeyChoice;
 *     union {
 *         HCRYPTKEY hKeyEncryptionKey;
 *         void *pvKeyEncryptionKey;
 *     };
 * }
 * }
 */
public class _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {

    _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_LONG_LONG.withName("hCryptProv"),
        wgl_h.C_POINTER.withName("pMailList"),
        wgl_h.C_LONG.withName("dwRecipientIndex"),
        wgl_h.C_LONG.withName("dwKeyChoice"),
        MemoryLayout.unionLayout(
            wgl_h.C_LONG_LONG.withName("hKeyEncryptionKey"),
            wgl_h.C_POINTER.withName("pvKeyEncryptionKey")
        ).withName("$anon$8135:5")
    ).withName("_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfLong hCryptProv$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hCryptProv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HCRYPTPROV hCryptProv
     * }
     */
    public static final OfLong hCryptProv$layout() {
        return hCryptProv$LAYOUT;
    }

    private static final long hCryptProv$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HCRYPTPROV hCryptProv
     * }
     */
    public static final long hCryptProv$offset() {
        return hCryptProv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HCRYPTPROV hCryptProv
     * }
     */
    public static long hCryptProv(MemorySegment struct) {
        return struct.get(hCryptProv$LAYOUT, hCryptProv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HCRYPTPROV hCryptProv
     * }
     */
    public static void hCryptProv(MemorySegment struct, long fieldValue) {
        struct.set(hCryptProv$LAYOUT, hCryptProv$OFFSET, fieldValue);
    }

    private static final AddressLayout pMailList$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMailList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList
     * }
     */
    public static final AddressLayout pMailList$layout() {
        return pMailList$LAYOUT;
    }

    private static final long pMailList$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList
     * }
     */
    public static final long pMailList$offset() {
        return pMailList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList
     * }
     */
    public static MemorySegment pMailList(MemorySegment struct) {
        return struct.get(pMailList$LAYOUT, pMailList$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList
     * }
     */
    public static void pMailList(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMailList$LAYOUT, pMailList$OFFSET, fieldValue);
    }

    private static final OfInt dwRecipientIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwRecipientIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static final OfInt dwRecipientIndex$layout() {
        return dwRecipientIndex$LAYOUT;
    }

    private static final long dwRecipientIndex$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static final long dwRecipientIndex$offset() {
        return dwRecipientIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static int dwRecipientIndex(MemorySegment struct) {
        return struct.get(dwRecipientIndex$LAYOUT, dwRecipientIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static void dwRecipientIndex(MemorySegment struct, int fieldValue) {
        struct.set(dwRecipientIndex$LAYOUT, dwRecipientIndex$OFFSET, fieldValue);
    }

    private static final OfInt dwKeyChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwKeyChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static final OfInt dwKeyChoice$layout() {
        return dwKeyChoice$LAYOUT;
    }

    private static final long dwKeyChoice$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static final long dwKeyChoice$offset() {
        return dwKeyChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static int dwKeyChoice(MemorySegment struct) {
        return struct.get(dwKeyChoice$LAYOUT, dwKeyChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwKeyChoice
     * }
     */
    public static void dwKeyChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwKeyChoice$LAYOUT, dwKeyChoice$OFFSET, fieldValue);
    }

    private static final OfLong hKeyEncryptionKey$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$8135:5"), groupElement("hKeyEncryptionKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HCRYPTKEY hKeyEncryptionKey
     * }
     */
    public static final OfLong hKeyEncryptionKey$layout() {
        return hKeyEncryptionKey$LAYOUT;
    }

    private static final long hKeyEncryptionKey$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HCRYPTKEY hKeyEncryptionKey
     * }
     */
    public static final long hKeyEncryptionKey$offset() {
        return hKeyEncryptionKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HCRYPTKEY hKeyEncryptionKey
     * }
     */
    public static long hKeyEncryptionKey(MemorySegment struct) {
        return struct.get(hKeyEncryptionKey$LAYOUT, hKeyEncryptionKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HCRYPTKEY hKeyEncryptionKey
     * }
     */
    public static void hKeyEncryptionKey(MemorySegment struct, long fieldValue) {
        struct.set(hKeyEncryptionKey$LAYOUT, hKeyEncryptionKey$OFFSET, fieldValue);
    }

    private static final AddressLayout pvKeyEncryptionKey$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$8135:5"), groupElement("pvKeyEncryptionKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionKey
     * }
     */
    public static final AddressLayout pvKeyEncryptionKey$layout() {
        return pvKeyEncryptionKey$LAYOUT;
    }

    private static final long pvKeyEncryptionKey$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionKey
     * }
     */
    public static final long pvKeyEncryptionKey$offset() {
        return pvKeyEncryptionKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionKey
     * }
     */
    public static MemorySegment pvKeyEncryptionKey(MemorySegment struct) {
        return struct.get(pvKeyEncryptionKey$LAYOUT, pvKeyEncryptionKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pvKeyEncryptionKey
     * }
     */
    public static void pvKeyEncryptionKey(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pvKeyEncryptionKey$LAYOUT, pvKeyEncryptionKey$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

