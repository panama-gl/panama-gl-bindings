// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     DWORD RecordLength;
 *     WORD MajorVersion;
 *     WORD MinorVersion;
 *     DWORDLONG FileReferenceNumber;
 *     DWORDLONG ParentFileReferenceNumber;
 *     USN Usn;
 *     LARGE_INTEGER TimeStamp;
 *     DWORD Reason;
 *     DWORD SourceInfo;
 *     DWORD SecurityId;
 *     DWORD FileAttributes;
 *     WORD FileNameLength;
 *     WORD FileNameOffset;
 *     WCHAR FileName[1];
 * }
 * }
 */
public class USN_RECORD_V2 {

    USN_RECORD_V2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("RecordLength"),
        wgl_h.C_SHORT.withName("MajorVersion"),
        wgl_h.C_SHORT.withName("MinorVersion"),
        wgl_h.C_LONG_LONG.withName("FileReferenceNumber"),
        wgl_h.C_LONG_LONG.withName("ParentFileReferenceNumber"),
        wgl_h.C_LONG_LONG.withName("Usn"),
        _LARGE_INTEGER.layout().withName("TimeStamp"),
        wgl_h.C_LONG.withName("Reason"),
        wgl_h.C_LONG.withName("SourceInfo"),
        wgl_h.C_LONG.withName("SecurityId"),
        wgl_h.C_LONG.withName("FileAttributes"),
        wgl_h.C_SHORT.withName("FileNameLength"),
        wgl_h.C_SHORT.withName("FileNameOffset"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_SHORT).withName("FileName"),
        MemoryLayout.paddingLayout(2)
    ).withName("$anon$10857:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt RecordLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RecordLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RecordLength
     * }
     */
    public static final OfInt RecordLength$layout() {
        return RecordLength$LAYOUT;
    }

    private static final long RecordLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RecordLength
     * }
     */
    public static final long RecordLength$offset() {
        return RecordLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RecordLength
     * }
     */
    public static int RecordLength(MemorySegment struct) {
        return struct.get(RecordLength$LAYOUT, RecordLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RecordLength
     * }
     */
    public static void RecordLength(MemorySegment struct, int fieldValue) {
        struct.set(RecordLength$LAYOUT, RecordLength$OFFSET, fieldValue);
    }

    private static final OfShort MajorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final OfShort MajorVersion$layout() {
        return MajorVersion$LAYOUT;
    }

    private static final long MajorVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static final long MajorVersion$offset() {
        return MajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static short MajorVersion(MemorySegment struct) {
        return struct.get(MajorVersion$LAYOUT, MajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MajorVersion
     * }
     */
    public static void MajorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MajorVersion$LAYOUT, MajorVersion$OFFSET, fieldValue);
    }

    private static final OfShort MinorVersion$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static final OfShort MinorVersion$layout() {
        return MinorVersion$LAYOUT;
    }

    private static final long MinorVersion$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static final long MinorVersion$offset() {
        return MinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static short MinorVersion(MemorySegment struct) {
        return struct.get(MinorVersion$LAYOUT, MinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MinorVersion
     * }
     */
    public static void MinorVersion(MemorySegment struct, short fieldValue) {
        struct.set(MinorVersion$LAYOUT, MinorVersion$OFFSET, fieldValue);
    }

    private static final OfLong FileReferenceNumber$LAYOUT = (OfLong)$LAYOUT.select(groupElement("FileReferenceNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG FileReferenceNumber
     * }
     */
    public static final OfLong FileReferenceNumber$layout() {
        return FileReferenceNumber$LAYOUT;
    }

    private static final long FileReferenceNumber$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG FileReferenceNumber
     * }
     */
    public static final long FileReferenceNumber$offset() {
        return FileReferenceNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG FileReferenceNumber
     * }
     */
    public static long FileReferenceNumber(MemorySegment struct) {
        return struct.get(FileReferenceNumber$LAYOUT, FileReferenceNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG FileReferenceNumber
     * }
     */
    public static void FileReferenceNumber(MemorySegment struct, long fieldValue) {
        struct.set(FileReferenceNumber$LAYOUT, FileReferenceNumber$OFFSET, fieldValue);
    }

    private static final OfLong ParentFileReferenceNumber$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ParentFileReferenceNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG ParentFileReferenceNumber
     * }
     */
    public static final OfLong ParentFileReferenceNumber$layout() {
        return ParentFileReferenceNumber$LAYOUT;
    }

    private static final long ParentFileReferenceNumber$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG ParentFileReferenceNumber
     * }
     */
    public static final long ParentFileReferenceNumber$offset() {
        return ParentFileReferenceNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG ParentFileReferenceNumber
     * }
     */
    public static long ParentFileReferenceNumber(MemorySegment struct) {
        return struct.get(ParentFileReferenceNumber$LAYOUT, ParentFileReferenceNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG ParentFileReferenceNumber
     * }
     */
    public static void ParentFileReferenceNumber(MemorySegment struct, long fieldValue) {
        struct.set(ParentFileReferenceNumber$LAYOUT, ParentFileReferenceNumber$OFFSET, fieldValue);
    }

    private static final OfLong Usn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Usn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * USN Usn
     * }
     */
    public static final OfLong Usn$layout() {
        return Usn$LAYOUT;
    }

    private static final long Usn$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * USN Usn
     * }
     */
    public static final long Usn$offset() {
        return Usn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * USN Usn
     * }
     */
    public static long Usn(MemorySegment struct) {
        return struct.get(Usn$LAYOUT, Usn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * USN Usn
     * }
     */
    public static void Usn(MemorySegment struct, long fieldValue) {
        struct.set(Usn$LAYOUT, Usn$OFFSET, fieldValue);
    }

    private static final GroupLayout TimeStamp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TimeStamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TimeStamp
     * }
     */
    public static final GroupLayout TimeStamp$layout() {
        return TimeStamp$LAYOUT;
    }

    private static final long TimeStamp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TimeStamp
     * }
     */
    public static final long TimeStamp$offset() {
        return TimeStamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TimeStamp
     * }
     */
    public static MemorySegment TimeStamp(MemorySegment struct) {
        return struct.asSlice(TimeStamp$OFFSET, TimeStamp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TimeStamp
     * }
     */
    public static void TimeStamp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TimeStamp$OFFSET, TimeStamp$LAYOUT.byteSize());
    }

    private static final OfInt Reason$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Reason"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reason
     * }
     */
    public static final OfInt Reason$layout() {
        return Reason$LAYOUT;
    }

    private static final long Reason$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reason
     * }
     */
    public static final long Reason$offset() {
        return Reason$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reason
     * }
     */
    public static int Reason(MemorySegment struct) {
        return struct.get(Reason$LAYOUT, Reason$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reason
     * }
     */
    public static void Reason(MemorySegment struct, int fieldValue) {
        struct.set(Reason$LAYOUT, Reason$OFFSET, fieldValue);
    }

    private static final OfInt SourceInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SourceInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SourceInfo
     * }
     */
    public static final OfInt SourceInfo$layout() {
        return SourceInfo$LAYOUT;
    }

    private static final long SourceInfo$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SourceInfo
     * }
     */
    public static final long SourceInfo$offset() {
        return SourceInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SourceInfo
     * }
     */
    public static int SourceInfo(MemorySegment struct) {
        return struct.get(SourceInfo$LAYOUT, SourceInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SourceInfo
     * }
     */
    public static void SourceInfo(MemorySegment struct, int fieldValue) {
        struct.set(SourceInfo$LAYOUT, SourceInfo$OFFSET, fieldValue);
    }

    private static final OfInt SecurityId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SecurityId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SecurityId
     * }
     */
    public static final OfInt SecurityId$layout() {
        return SecurityId$LAYOUT;
    }

    private static final long SecurityId$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SecurityId
     * }
     */
    public static final long SecurityId$offset() {
        return SecurityId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SecurityId
     * }
     */
    public static int SecurityId(MemorySegment struct) {
        return struct.get(SecurityId$LAYOUT, SecurityId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SecurityId
     * }
     */
    public static void SecurityId(MemorySegment struct, int fieldValue) {
        struct.set(SecurityId$LAYOUT, SecurityId$OFFSET, fieldValue);
    }

    private static final OfInt FileAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FileAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static final OfInt FileAttributes$layout() {
        return FileAttributes$LAYOUT;
    }

    private static final long FileAttributes$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static final long FileAttributes$offset() {
        return FileAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static int FileAttributes(MemorySegment struct) {
        return struct.get(FileAttributes$LAYOUT, FileAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static void FileAttributes(MemorySegment struct, int fieldValue) {
        struct.set(FileAttributes$LAYOUT, FileAttributes$OFFSET, fieldValue);
    }

    private static final OfShort FileNameLength$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FileNameLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD FileNameLength
     * }
     */
    public static final OfShort FileNameLength$layout() {
        return FileNameLength$LAYOUT;
    }

    private static final long FileNameLength$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD FileNameLength
     * }
     */
    public static final long FileNameLength$offset() {
        return FileNameLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD FileNameLength
     * }
     */
    public static short FileNameLength(MemorySegment struct) {
        return struct.get(FileNameLength$LAYOUT, FileNameLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD FileNameLength
     * }
     */
    public static void FileNameLength(MemorySegment struct, short fieldValue) {
        struct.set(FileNameLength$LAYOUT, FileNameLength$OFFSET, fieldValue);
    }

    private static final OfShort FileNameOffset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FileNameOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD FileNameOffset
     * }
     */
    public static final OfShort FileNameOffset$layout() {
        return FileNameOffset$LAYOUT;
    }

    private static final long FileNameOffset$OFFSET = 58;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD FileNameOffset
     * }
     */
    public static final long FileNameOffset$offset() {
        return FileNameOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD FileNameOffset
     * }
     */
    public static short FileNameOffset(MemorySegment struct) {
        return struct.get(FileNameOffset$LAYOUT, FileNameOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD FileNameOffset
     * }
     */
    public static void FileNameOffset(MemorySegment struct, short fieldValue) {
        struct.set(FileNameOffset$LAYOUT, FileNameOffset$OFFSET, fieldValue);
    }

    private static final SequenceLayout FileName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FileName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static final SequenceLayout FileName$layout() {
        return FileName$LAYOUT;
    }

    private static final long FileName$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static final long FileName$offset() {
        return FileName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static MemorySegment FileName(MemorySegment struct) {
        return struct.asSlice(FileName$OFFSET, FileName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static void FileName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FileName$OFFSET, FileName$LAYOUT.byteSize());
    }

    private static long[] FileName$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static long[] FileName$dimensions() {
        return FileName$DIMS;
    }
    private static final VarHandle FileName$ELEM_HANDLE = FileName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static short FileName(MemorySegment struct, long index0) {
        return (short)FileName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR FileName[1]
     * }
     */
    public static void FileName(MemorySegment struct, long index0, short fieldValue) {
        FileName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

