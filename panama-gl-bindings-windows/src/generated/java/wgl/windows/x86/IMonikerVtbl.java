// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IMonikerVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("GetClassID"),
        Constants$root.C_POINTER$LAYOUT.withName("IsDirty"),
        Constants$root.C_POINTER$LAYOUT.withName("Load"),
        Constants$root.C_POINTER$LAYOUT.withName("Save"),
        Constants$root.C_POINTER$LAYOUT.withName("GetSizeMax"),
        Constants$root.C_POINTER$LAYOUT.withName("BindToObject"),
        Constants$root.C_POINTER$LAYOUT.withName("BindToStorage"),
        Constants$root.C_POINTER$LAYOUT.withName("Reduce"),
        Constants$root.C_POINTER$LAYOUT.withName("ComposeWith"),
        Constants$root.C_POINTER$LAYOUT.withName("Enum"),
        Constants$root.C_POINTER$LAYOUT.withName("IsEqual"),
        Constants$root.C_POINTER$LAYOUT.withName("Hash"),
        Constants$root.C_POINTER$LAYOUT.withName("IsRunning"),
        Constants$root.C_POINTER$LAYOUT.withName("GetTimeOfLastChange"),
        Constants$root.C_POINTER$LAYOUT.withName("Inverse"),
        Constants$root.C_POINTER$LAYOUT.withName("CommonPrefixWith"),
        Constants$root.C_POINTER$LAYOUT.withName("RelativePathTo"),
        Constants$root.C_POINTER$LAYOUT.withName("GetDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("ParseDisplayName"),
        Constants$root.C_POINTER$LAYOUT.withName("IsSystemMoniker")
    ).withName("IMonikerVtbl");
    public static MemoryLayout $LAYOUT() {
        return IMonikerVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IMonikerVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMonikerVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IMonikerVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IMonikerVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMonikerVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IMonikerVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IMonikerVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMonikerVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IMonikerVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor GetClassID$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetClassID$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetClassID$FUNC
    );
    public interface GetClassID {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetClassID fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetClassID.class, fi, IMonikerVtbl.GetClassID$FUNC, session);
        }
        static GetClassID ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.GetClassID$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetClassID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetClassID"));
    public static VarHandle GetClassID$VH() {
        return IMonikerVtbl.GetClassID$VH;
    }
    public static MemoryAddress GetClassID$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetClassID$VH.get(seg);
    }
    public static void GetClassID$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.GetClassID$VH.set(seg, x);
    }
    public static MemoryAddress GetClassID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetClassID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetClassID$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.GetClassID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetClassID GetClassID (MemorySegment segment, MemorySession session) {
        return GetClassID.ofAddress(GetClassID$get(segment), session);
    }
    static final FunctionDescriptor IsDirty$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsDirty$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsDirty$FUNC
    );
    public interface IsDirty {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(IsDirty fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsDirty.class, fi, IMonikerVtbl.IsDirty$FUNC, session);
        }
        static IsDirty ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IMonikerVtbl.IsDirty$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsDirty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsDirty"));
    public static VarHandle IsDirty$VH() {
        return IMonikerVtbl.IsDirty$VH;
    }
    public static MemoryAddress IsDirty$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsDirty$VH.get(seg);
    }
    public static void IsDirty$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.IsDirty$VH.set(seg, x);
    }
    public static MemoryAddress IsDirty$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsDirty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsDirty$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.IsDirty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsDirty IsDirty (MemorySegment segment, MemorySession session) {
        return IsDirty.ofAddress(IsDirty$get(segment), session);
    }
    static final FunctionDescriptor Load$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Load$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Load$FUNC
    );
    public interface Load {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Load fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Load.class, fi, IMonikerVtbl.Load$FUNC, session);
        }
        static Load ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.Load$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Load$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Load"));
    public static VarHandle Load$VH() {
        return IMonikerVtbl.Load$VH;
    }
    public static MemoryAddress Load$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Load$VH.get(seg);
    }
    public static void Load$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Load$VH.set(seg, x);
    }
    public static MemoryAddress Load$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Load$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Load$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Load$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Load Load (MemorySegment segment, MemorySession session) {
        return Load.ofAddress(Load$get(segment), session);
    }
    static final FunctionDescriptor Save$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle Save$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Save$FUNC
    );
    public interface Save {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(Save fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Save.class, fi, IMonikerVtbl.Save$FUNC, session);
        }
        static Save ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (int)IMonikerVtbl.Save$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Save$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Save"));
    public static VarHandle Save$VH() {
        return IMonikerVtbl.Save$VH;
    }
    public static MemoryAddress Save$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Save$VH.get(seg);
    }
    public static void Save$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Save$VH.set(seg, x);
    }
    public static MemoryAddress Save$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Save$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Save$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Save$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Save Save (MemorySegment segment, MemorySession session) {
        return Save.ofAddress(Save$get(segment), session);
    }
    static final FunctionDescriptor GetSizeMax$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSizeMax$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetSizeMax$FUNC
    );
    public interface GetSizeMax {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(GetSizeMax fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetSizeMax.class, fi, IMonikerVtbl.GetSizeMax$FUNC, session);
        }
        static GetSizeMax ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.GetSizeMax$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetSizeMax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetSizeMax"));
    public static VarHandle GetSizeMax$VH() {
        return IMonikerVtbl.GetSizeMax$VH;
    }
    public static MemoryAddress GetSizeMax$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetSizeMax$VH.get(seg);
    }
    public static void GetSizeMax$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.GetSizeMax$VH.set(seg, x);
    }
    public static MemoryAddress GetSizeMax$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetSizeMax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSizeMax$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.GetSizeMax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSizeMax GetSizeMax (MemorySegment segment, MemorySession session) {
        return GetSizeMax.ofAddress(GetSizeMax$get(segment), session);
    }
    static final FunctionDescriptor BindToObject$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToObject$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.BindToObject$FUNC
    );
    public interface BindToObject {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(BindToObject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(BindToObject.class, fi, IMonikerVtbl.BindToObject$FUNC, session);
        }
        static BindToObject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IMonikerVtbl.BindToObject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BindToObject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BindToObject"));
    public static VarHandle BindToObject$VH() {
        return IMonikerVtbl.BindToObject$VH;
    }
    public static MemoryAddress BindToObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.BindToObject$VH.get(seg);
    }
    public static void BindToObject$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.BindToObject$VH.set(seg, x);
    }
    public static MemoryAddress BindToObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.BindToObject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToObject$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.BindToObject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToObject BindToObject (MemorySegment segment, MemorySession session) {
        return BindToObject.ofAddress(BindToObject$get(segment), session);
    }
    static final FunctionDescriptor BindToStorage$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle BindToStorage$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.BindToStorage$FUNC
    );
    public interface BindToStorage {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(BindToStorage fi, MemorySession session) {
            return RuntimeHelper.upcallStub(BindToStorage.class, fi, IMonikerVtbl.BindToStorage$FUNC, session);
        }
        static BindToStorage ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IMonikerVtbl.BindToStorage$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle BindToStorage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BindToStorage"));
    public static VarHandle BindToStorage$VH() {
        return IMonikerVtbl.BindToStorage$VH;
    }
    public static MemoryAddress BindToStorage$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.BindToStorage$VH.get(seg);
    }
    public static void BindToStorage$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.BindToStorage$VH.set(seg, x);
    }
    public static MemoryAddress BindToStorage$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.BindToStorage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BindToStorage$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.BindToStorage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static BindToStorage BindToStorage (MemorySegment segment, MemorySession session) {
        return BindToStorage.ofAddress(BindToStorage$get(segment), session);
    }
    static final FunctionDescriptor Reduce$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Reduce$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Reduce$FUNC
    );
    public interface Reduce {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(Reduce fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Reduce.class, fi, IMonikerVtbl.Reduce$FUNC, session);
        }
        static Reduce ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)IMonikerVtbl.Reduce$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Reduce$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reduce"));
    public static VarHandle Reduce$VH() {
        return IMonikerVtbl.Reduce$VH;
    }
    public static MemoryAddress Reduce$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Reduce$VH.get(seg);
    }
    public static void Reduce$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Reduce$VH.set(seg, x);
    }
    public static MemoryAddress Reduce$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Reduce$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reduce$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Reduce$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Reduce Reduce (MemorySegment segment, MemorySession session) {
        return Reduce.ofAddress(Reduce$get(segment), session);
    }
    static final FunctionDescriptor ComposeWith$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ComposeWith$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.ComposeWith$FUNC
    );
    public interface ComposeWith {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(ComposeWith fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ComposeWith.class, fi, IMonikerVtbl.ComposeWith$FUNC, session);
        }
        static ComposeWith ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMonikerVtbl.ComposeWith$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ComposeWith$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ComposeWith"));
    public static VarHandle ComposeWith$VH() {
        return IMonikerVtbl.ComposeWith$VH;
    }
    public static MemoryAddress ComposeWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.ComposeWith$VH.get(seg);
    }
    public static void ComposeWith$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.ComposeWith$VH.set(seg, x);
    }
    public static MemoryAddress ComposeWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.ComposeWith$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ComposeWith$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.ComposeWith$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ComposeWith ComposeWith (MemorySegment segment, MemorySession session) {
        return ComposeWith.ofAddress(ComposeWith$get(segment), session);
    }
    static final FunctionDescriptor Enum$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Enum$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Enum$FUNC
    );
    public interface Enum {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(Enum fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Enum.class, fi, IMonikerVtbl.Enum$FUNC, session);
        }
        static Enum ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMonikerVtbl.Enum$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Enum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Enum"));
    public static VarHandle Enum$VH() {
        return IMonikerVtbl.Enum$VH;
    }
    public static MemoryAddress Enum$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Enum$VH.get(seg);
    }
    public static void Enum$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Enum$VH.set(seg, x);
    }
    public static MemoryAddress Enum$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Enum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Enum$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Enum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Enum Enum (MemorySegment segment, MemorySession session) {
        return Enum.ofAddress(Enum$get(segment), session);
    }
    static final FunctionDescriptor IsEqual$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsEqual$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsEqual$FUNC
    );
    public interface IsEqual {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(IsEqual fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsEqual.class, fi, IMonikerVtbl.IsEqual$FUNC, session);
        }
        static IsEqual ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.IsEqual$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsEqual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsEqual"));
    public static VarHandle IsEqual$VH() {
        return IMonikerVtbl.IsEqual$VH;
    }
    public static MemoryAddress IsEqual$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsEqual$VH.get(seg);
    }
    public static void IsEqual$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.IsEqual$VH.set(seg, x);
    }
    public static MemoryAddress IsEqual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsEqual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsEqual$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.IsEqual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsEqual IsEqual (MemorySegment segment, MemorySession session) {
        return IsEqual.ofAddress(IsEqual$get(segment), session);
    }
    static final FunctionDescriptor Hash$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Hash$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Hash$FUNC
    );
    public interface Hash {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Hash fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Hash.class, fi, IMonikerVtbl.Hash$FUNC, session);
        }
        static Hash ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.Hash$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Hash$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Hash"));
    public static VarHandle Hash$VH() {
        return IMonikerVtbl.Hash$VH;
    }
    public static MemoryAddress Hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Hash$VH.get(seg);
    }
    public static void Hash$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Hash$VH.set(seg, x);
    }
    public static MemoryAddress Hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Hash$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Hash$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Hash$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Hash Hash (MemorySegment segment, MemorySession session) {
        return Hash.ofAddress(Hash$get(segment), session);
    }
    static final FunctionDescriptor IsRunning$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsRunning$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsRunning$FUNC
    );
    public interface IsRunning {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(IsRunning fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsRunning.class, fi, IMonikerVtbl.IsRunning$FUNC, session);
        }
        static IsRunning ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMonikerVtbl.IsRunning$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsRunning$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsRunning"));
    public static VarHandle IsRunning$VH() {
        return IMonikerVtbl.IsRunning$VH;
    }
    public static MemoryAddress IsRunning$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsRunning$VH.get(seg);
    }
    public static void IsRunning$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.IsRunning$VH.set(seg, x);
    }
    public static MemoryAddress IsRunning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsRunning$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsRunning$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.IsRunning$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsRunning IsRunning (MemorySegment segment, MemorySession session) {
        return IsRunning.ofAddress(IsRunning$get(segment), session);
    }
    static final FunctionDescriptor GetTimeOfLastChange$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetTimeOfLastChange$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetTimeOfLastChange$FUNC
    );
    public interface GetTimeOfLastChange {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetTimeOfLastChange fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetTimeOfLastChange.class, fi, IMonikerVtbl.GetTimeOfLastChange$FUNC, session);
        }
        static GetTimeOfLastChange ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMonikerVtbl.GetTimeOfLastChange$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetTimeOfLastChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetTimeOfLastChange"));
    public static VarHandle GetTimeOfLastChange$VH() {
        return IMonikerVtbl.GetTimeOfLastChange$VH;
    }
    public static MemoryAddress GetTimeOfLastChange$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetTimeOfLastChange$VH.get(seg);
    }
    public static void GetTimeOfLastChange$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.GetTimeOfLastChange$VH.set(seg, x);
    }
    public static MemoryAddress GetTimeOfLastChange$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetTimeOfLastChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetTimeOfLastChange$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.GetTimeOfLastChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetTimeOfLastChange GetTimeOfLastChange (MemorySegment segment, MemorySession session) {
        return GetTimeOfLastChange.ofAddress(GetTimeOfLastChange$get(segment), session);
    }
    static final FunctionDescriptor Inverse$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Inverse$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.Inverse$FUNC
    );
    public interface Inverse {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(Inverse fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Inverse.class, fi, IMonikerVtbl.Inverse$FUNC, session);
        }
        static Inverse ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.Inverse$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Inverse$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Inverse"));
    public static VarHandle Inverse$VH() {
        return IMonikerVtbl.Inverse$VH;
    }
    public static MemoryAddress Inverse$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Inverse$VH.get(seg);
    }
    public static void Inverse$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.Inverse$VH.set(seg, x);
    }
    public static MemoryAddress Inverse$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.Inverse$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Inverse$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.Inverse$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Inverse Inverse (MemorySegment segment, MemorySession session) {
        return Inverse.ofAddress(Inverse$get(segment), session);
    }
    static final FunctionDescriptor CommonPrefixWith$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle CommonPrefixWith$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.CommonPrefixWith$FUNC
    );
    public interface CommonPrefixWith {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(CommonPrefixWith fi, MemorySession session) {
            return RuntimeHelper.upcallStub(CommonPrefixWith.class, fi, IMonikerVtbl.CommonPrefixWith$FUNC, session);
        }
        static CommonPrefixWith ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMonikerVtbl.CommonPrefixWith$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle CommonPrefixWith$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CommonPrefixWith"));
    public static VarHandle CommonPrefixWith$VH() {
        return IMonikerVtbl.CommonPrefixWith$VH;
    }
    public static MemoryAddress CommonPrefixWith$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.CommonPrefixWith$VH.get(seg);
    }
    public static void CommonPrefixWith$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.CommonPrefixWith$VH.set(seg, x);
    }
    public static MemoryAddress CommonPrefixWith$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.CommonPrefixWith$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CommonPrefixWith$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.CommonPrefixWith$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static CommonPrefixWith CommonPrefixWith (MemorySegment segment, MemorySession session) {
        return CommonPrefixWith.ofAddress(CommonPrefixWith$get(segment), session);
    }
    static final FunctionDescriptor RelativePathTo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RelativePathTo$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.RelativePathTo$FUNC
    );
    public interface RelativePathTo {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(RelativePathTo fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RelativePathTo.class, fi, IMonikerVtbl.RelativePathTo$FUNC, session);
        }
        static RelativePathTo ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IMonikerVtbl.RelativePathTo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RelativePathTo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RelativePathTo"));
    public static VarHandle RelativePathTo$VH() {
        return IMonikerVtbl.RelativePathTo$VH;
    }
    public static MemoryAddress RelativePathTo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.RelativePathTo$VH.get(seg);
    }
    public static void RelativePathTo$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.RelativePathTo$VH.set(seg, x);
    }
    public static MemoryAddress RelativePathTo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.RelativePathTo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RelativePathTo$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.RelativePathTo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RelativePathTo RelativePathTo (MemorySegment segment, MemorySession session) {
        return RelativePathTo.ofAddress(RelativePathTo$get(segment), session);
    }
    static final FunctionDescriptor GetDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetDisplayName$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.GetDisplayName$FUNC
    );
    public interface GetDisplayName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetDisplayName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetDisplayName.class, fi, IMonikerVtbl.GetDisplayName$FUNC, session);
        }
        static GetDisplayName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IMonikerVtbl.GetDisplayName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetDisplayName"));
    public static VarHandle GetDisplayName$VH() {
        return IMonikerVtbl.GetDisplayName$VH;
    }
    public static MemoryAddress GetDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetDisplayName$VH.get(seg);
    }
    public static void GetDisplayName$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.GetDisplayName$VH.set(seg, x);
    }
    public static MemoryAddress GetDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.GetDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDisplayName$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.GetDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDisplayName GetDisplayName (MemorySegment segment, MemorySession session) {
        return GetDisplayName.ofAddress(GetDisplayName$get(segment), session);
    }
    static final FunctionDescriptor ParseDisplayName$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ParseDisplayName$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.ParseDisplayName$FUNC
    );
    public interface ParseDisplayName {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(ParseDisplayName fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ParseDisplayName.class, fi, IMonikerVtbl.ParseDisplayName$FUNC, session);
        }
        static ParseDisplayName ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)IMonikerVtbl.ParseDisplayName$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ParseDisplayName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ParseDisplayName"));
    public static VarHandle ParseDisplayName$VH() {
        return IMonikerVtbl.ParseDisplayName$VH;
    }
    public static MemoryAddress ParseDisplayName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.ParseDisplayName$VH.get(seg);
    }
    public static void ParseDisplayName$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.ParseDisplayName$VH.set(seg, x);
    }
    public static MemoryAddress ParseDisplayName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.ParseDisplayName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ParseDisplayName$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.ParseDisplayName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ParseDisplayName ParseDisplayName (MemorySegment segment, MemorySession session) {
        return ParseDisplayName.ofAddress(ParseDisplayName$get(segment), session);
    }
    static final FunctionDescriptor IsSystemMoniker$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle IsSystemMoniker$MH = RuntimeHelper.downcallHandle(
        IMonikerVtbl.IsSystemMoniker$FUNC
    );
    public interface IsSystemMoniker {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(IsSystemMoniker fi, MemorySession session) {
            return RuntimeHelper.upcallStub(IsSystemMoniker.class, fi, IMonikerVtbl.IsSystemMoniker$FUNC, session);
        }
        static IsSystemMoniker ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)IMonikerVtbl.IsSystemMoniker$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle IsSystemMoniker$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IsSystemMoniker"));
    public static VarHandle IsSystemMoniker$VH() {
        return IMonikerVtbl.IsSystemMoniker$VH;
    }
    public static MemoryAddress IsSystemMoniker$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsSystemMoniker$VH.get(seg);
    }
    public static void IsSystemMoniker$set( MemorySegment seg, MemoryAddress x) {
        IMonikerVtbl.IsSystemMoniker$VH.set(seg, x);
    }
    public static MemoryAddress IsSystemMoniker$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IMonikerVtbl.IsSystemMoniker$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IsSystemMoniker$set(MemorySegment seg, long index, MemoryAddress x) {
        IMonikerVtbl.IsSystemMoniker$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsSystemMoniker IsSystemMoniker (MemorySegment segment, MemorySession session) {
        return IsSystemMoniker.ofAddress(IsSystemMoniker$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


