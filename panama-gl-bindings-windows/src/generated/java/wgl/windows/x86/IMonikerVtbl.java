// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IMonikerVtbl {
 *     HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IMoniker *) __attribute__((stdcall));
 *     ULONG (*Release)(IMoniker *) __attribute__((stdcall));
 *     HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall));
 *     HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall));
 *     HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall));
 *     HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall));
 *     HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall));
 *     HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall));
 *     HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall));
 *     HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall));
 *     HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall));
 *     HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall));
 *     HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall));
 *     HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall));
 *     HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall));
 *     HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall));
 * }
 * }
 */
public class IMonikerVtbl {

    IMonikerVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetClassID"),
        wgl_h.C_POINTER.withName("IsDirty"),
        wgl_h.C_POINTER.withName("Load"),
        wgl_h.C_POINTER.withName("Save"),
        wgl_h.C_POINTER.withName("GetSizeMax"),
        wgl_h.C_POINTER.withName("BindToObject"),
        wgl_h.C_POINTER.withName("BindToStorage"),
        wgl_h.C_POINTER.withName("Reduce"),
        wgl_h.C_POINTER.withName("ComposeWith"),
        wgl_h.C_POINTER.withName("Enum"),
        wgl_h.C_POINTER.withName("IsEqual"),
        wgl_h.C_POINTER.withName("Hash"),
        wgl_h.C_POINTER.withName("IsRunning"),
        wgl_h.C_POINTER.withName("GetTimeOfLastChange"),
        wgl_h.C_POINTER.withName("Inverse"),
        wgl_h.C_POINTER.withName("CommonPrefixWith"),
        wgl_h.C_POINTER.withName("RelativePathTo"),
        wgl_h.C_POINTER.withName("GetDisplayName"),
        wgl_h.C_POINTER.withName("ParseDisplayName"),
        wgl_h.C_POINTER.withName("IsSystemMoniker")
    ).withName("IMonikerVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static class GetClassID {

        GetClassID() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetClassID.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetClassID.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetClassID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetClassID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetClassID$layout() {
        return GetClassID$LAYOUT;
    }

    private static final long GetClassID$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final long GetClassID$offset() {
        return GetClassID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetClassID(MemorySegment struct) {
        return struct.get(GetClassID$LAYOUT, GetClassID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetClassID)(IMoniker *, CLSID *) __attribute__((stdcall))
     * }
     */
    public static void GetClassID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetClassID$LAYOUT, GetClassID$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class IsDirty {

        IsDirty() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsDirty.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsDirty.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsDirty$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsDirty$layout() {
        return IsDirty$LAYOUT;
    }

    private static final long IsDirty$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long IsDirty$offset() {
        return IsDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsDirty(MemorySegment struct) {
        return struct.get(IsDirty$LAYOUT, IsDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsDirty)(IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void IsDirty(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsDirty$LAYOUT, IsDirty$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall))
     * }
     */
    public static class Load {

        Load() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Load.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Load.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Load$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Load"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Load$layout() {
        return Load$LAYOUT;
    }

    private static final long Load$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall))
     * }
     */
    public static final long Load$offset() {
        return Load$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Load(MemorySegment struct) {
        return struct.get(Load$LAYOUT, Load$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Load)(IMoniker *, IStream *) __attribute__((stdcall))
     * }
     */
    public static void Load(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Load$LAYOUT, Load$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class Save {

        Save() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Save.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Save.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Save$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Save"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Save$layout() {
        return Save$LAYOUT;
    }

    private static final long Save$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long Save$offset() {
        return Save$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Save(MemorySegment struct) {
        return struct.get(Save$LAYOUT, Save$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Save)(IMoniker *, IStream *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void Save(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Save$LAYOUT, Save$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall))
     * }
     */
    public static class GetSizeMax {

        GetSizeMax() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetSizeMax.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetSizeMax.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetSizeMax$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetSizeMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetSizeMax$layout() {
        return GetSizeMax$LAYOUT;
    }

    private static final long GetSizeMax$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall))
     * }
     */
    public static final long GetSizeMax$offset() {
        return GetSizeMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetSizeMax(MemorySegment struct) {
        return struct.get(GetSizeMax$LAYOUT, GetSizeMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetSizeMax)(IMoniker *, ULARGE_INTEGER *) __attribute__((stdcall))
     * }
     */
    public static void GetSizeMax(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetSizeMax$LAYOUT, GetSizeMax$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class BindToObject {

        BindToObject() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(BindToObject.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(BindToObject.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout BindToObject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BindToObject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout BindToObject$layout() {
        return BindToObject$LAYOUT;
    }

    private static final long BindToObject$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long BindToObject$offset() {
        return BindToObject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment BindToObject(MemorySegment struct) {
        return struct.get(BindToObject$LAYOUT, BindToObject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToObject)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void BindToObject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BindToObject$LAYOUT, BindToObject$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class BindToStorage {

        BindToStorage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(BindToStorage.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(BindToStorage.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout BindToStorage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BindToStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout BindToStorage$layout() {
        return BindToStorage$LAYOUT;
    }

    private static final long BindToStorage$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long BindToStorage$offset() {
        return BindToStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment BindToStorage(MemorySegment struct) {
        return struct.get(BindToStorage$LAYOUT, BindToStorage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*BindToStorage)(IMoniker *, IBindCtx *, IMoniker *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void BindToStorage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BindToStorage$LAYOUT, BindToStorage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class Reduce {

        Reduce() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Reduce.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Reduce.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Reduce$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Reduce"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Reduce$layout() {
        return Reduce$LAYOUT;
    }

    private static final long Reduce$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long Reduce$offset() {
        return Reduce$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Reduce(MemorySegment struct) {
        return struct.get(Reduce$LAYOUT, Reduce$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Reduce)(IMoniker *, IBindCtx *, DWORD, IMoniker **, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void Reduce(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Reduce$LAYOUT, Reduce$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class ComposeWith {

        ComposeWith() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ComposeWith.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ComposeWith.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ComposeWith$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ComposeWith"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ComposeWith$layout() {
        return ComposeWith$LAYOUT;
    }

    private static final long ComposeWith$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long ComposeWith$offset() {
        return ComposeWith$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ComposeWith(MemorySegment struct) {
        return struct.get(ComposeWith$LAYOUT, ComposeWith$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ComposeWith)(IMoniker *, IMoniker *, BOOL, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void ComposeWith(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ComposeWith$LAYOUT, ComposeWith$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall))
     * }
     */
    public static class Enum {

        Enum() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Enum.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Enum.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Enum$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Enum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Enum$layout() {
        return Enum$LAYOUT;
    }

    private static final long Enum$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long Enum$offset() {
        return Enum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Enum(MemorySegment struct) {
        return struct.get(Enum$LAYOUT, Enum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Enum)(IMoniker *, BOOL, IEnumMoniker **) __attribute__((stdcall))
     * }
     */
    public static void Enum(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Enum$LAYOUT, Enum$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class IsEqual {

        IsEqual() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsEqual.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsEqual.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsEqual$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsEqual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsEqual$layout() {
        return IsEqual$LAYOUT;
    }

    private static final long IsEqual$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long IsEqual$offset() {
        return IsEqual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsEqual(MemorySegment struct) {
        return struct.get(IsEqual$LAYOUT, IsEqual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsEqual)(IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void IsEqual(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsEqual$LAYOUT, IsEqual$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class Hash {

        Hash() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Hash.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Hash.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Hash$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Hash$layout() {
        return Hash$LAYOUT;
    }

    private static final long Hash$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long Hash$offset() {
        return Hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Hash(MemorySegment struct) {
        return struct.get(Hash$LAYOUT, Hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Hash)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void Hash(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Hash$LAYOUT, Hash$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class IsRunning {

        IsRunning() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsRunning.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsRunning.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsRunning$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsRunning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsRunning$layout() {
        return IsRunning$LAYOUT;
    }

    private static final long IsRunning$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long IsRunning$offset() {
        return IsRunning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsRunning(MemorySegment struct) {
        return struct.get(IsRunning$LAYOUT, IsRunning$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IMoniker *, IBindCtx *, IMoniker *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void IsRunning(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsRunning$LAYOUT, IsRunning$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))
     * }
     */
    public static class GetTimeOfLastChange {

        GetTimeOfLastChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTimeOfLastChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTimeOfLastChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTimeOfLastChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTimeOfLastChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTimeOfLastChange$layout() {
        return GetTimeOfLastChange$LAYOUT;
    }

    private static final long GetTimeOfLastChange$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))
     * }
     */
    public static final long GetTimeOfLastChange$offset() {
        return GetTimeOfLastChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTimeOfLastChange(MemorySegment struct) {
        return struct.get(GetTimeOfLastChange$LAYOUT, GetTimeOfLastChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTimeOfLastChange)(IMoniker *, IBindCtx *, IMoniker *, FILETIME *) __attribute__((stdcall))
     * }
     */
    public static void GetTimeOfLastChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTimeOfLastChange$LAYOUT, GetTimeOfLastChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class Inverse {

        Inverse() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Inverse.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Inverse.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Inverse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Inverse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Inverse$layout() {
        return Inverse$LAYOUT;
    }

    private static final long Inverse$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long Inverse$offset() {
        return Inverse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Inverse(MemorySegment struct) {
        return struct.get(Inverse$LAYOUT, Inverse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Inverse)(IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void Inverse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Inverse$LAYOUT, Inverse$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class CommonPrefixWith {

        CommonPrefixWith() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(CommonPrefixWith.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CommonPrefixWith.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CommonPrefixWith$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CommonPrefixWith"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout CommonPrefixWith$layout() {
        return CommonPrefixWith$LAYOUT;
    }

    private static final long CommonPrefixWith$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long CommonPrefixWith$offset() {
        return CommonPrefixWith$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment CommonPrefixWith(MemorySegment struct) {
        return struct.get(CommonPrefixWith$LAYOUT, CommonPrefixWith$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*CommonPrefixWith)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void CommonPrefixWith(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CommonPrefixWith$LAYOUT, CommonPrefixWith$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class RelativePathTo {

        RelativePathTo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(RelativePathTo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(RelativePathTo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout RelativePathTo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RelativePathTo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout RelativePathTo$layout() {
        return RelativePathTo$LAYOUT;
    }

    private static final long RelativePathTo$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long RelativePathTo$offset() {
        return RelativePathTo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment RelativePathTo(MemorySegment struct) {
        return struct.get(RelativePathTo$LAYOUT, RelativePathTo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*RelativePathTo)(IMoniker *, IMoniker *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void RelativePathTo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RelativePathTo$LAYOUT, RelativePathTo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static class GetDisplayName {

        GetDisplayName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetDisplayName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetDisplayName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetDisplayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetDisplayName$layout() {
        return GetDisplayName$LAYOUT;
    }

    private static final long GetDisplayName$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static final long GetDisplayName$offset() {
        return GetDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetDisplayName(MemorySegment struct) {
        return struct.get(GetDisplayName$LAYOUT, GetDisplayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR *) __attribute__((stdcall))
     * }
     */
    public static void GetDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetDisplayName$LAYOUT, GetDisplayName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class ParseDisplayName {

        ParseDisplayName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ParseDisplayName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ParseDisplayName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ParseDisplayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParseDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ParseDisplayName$layout() {
        return ParseDisplayName$LAYOUT;
    }

    private static final long ParseDisplayName$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long ParseDisplayName$offset() {
        return ParseDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ParseDisplayName(MemorySegment struct) {
        return struct.get(ParseDisplayName$LAYOUT, ParseDisplayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IMoniker *, IBindCtx *, IMoniker *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void ParseDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParseDisplayName$LAYOUT, ParseDisplayName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class IsSystemMoniker {

        IsSystemMoniker() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsSystemMoniker.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsSystemMoniker.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsSystemMoniker$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsSystemMoniker"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsSystemMoniker$layout() {
        return IsSystemMoniker$LAYOUT;
    }

    private static final long IsSystemMoniker$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long IsSystemMoniker$offset() {
        return IsSystemMoniker$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsSystemMoniker(MemorySegment struct) {
        return struct.get(IsSystemMoniker$LAYOUT, IsSystemMoniker$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsSystemMoniker)(IMoniker *, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void IsSystemMoniker(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsSystemMoniker$LAYOUT, IsSystemMoniker$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

