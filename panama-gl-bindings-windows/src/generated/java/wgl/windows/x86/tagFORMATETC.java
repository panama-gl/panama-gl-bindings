// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagFORMATETC {
 *     CLIPFORMAT cfFormat;
 *     DVTARGETDEVICE *ptd;
 *     DWORD dwAspect;
 *     LONG lindex;
 *     DWORD tymed;
 * }
 * }
 */
public class tagFORMATETC {

    tagFORMATETC() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("cfFormat"),
        MemoryLayout.paddingLayout(6),
        wgl_h.C_POINTER.withName("ptd"),
        wgl_h.C_LONG.withName("dwAspect"),
        wgl_h.C_LONG.withName("lindex"),
        wgl_h.C_LONG.withName("tymed"),
        MemoryLayout.paddingLayout(4)
    ).withName("tagFORMATETC");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort cfFormat$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cfFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CLIPFORMAT cfFormat
     * }
     */
    public static final OfShort cfFormat$layout() {
        return cfFormat$LAYOUT;
    }

    private static final long cfFormat$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CLIPFORMAT cfFormat
     * }
     */
    public static final long cfFormat$offset() {
        return cfFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CLIPFORMAT cfFormat
     * }
     */
    public static short cfFormat(MemorySegment struct) {
        return struct.get(cfFormat$LAYOUT, cfFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CLIPFORMAT cfFormat
     * }
     */
    public static void cfFormat(MemorySegment struct, short fieldValue) {
        struct.set(cfFormat$LAYOUT, cfFormat$OFFSET, fieldValue);
    }

    private static final AddressLayout ptd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DVTARGETDEVICE *ptd
     * }
     */
    public static final AddressLayout ptd$layout() {
        return ptd$LAYOUT;
    }

    private static final long ptd$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DVTARGETDEVICE *ptd
     * }
     */
    public static final long ptd$offset() {
        return ptd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DVTARGETDEVICE *ptd
     * }
     */
    public static MemorySegment ptd(MemorySegment struct) {
        return struct.get(ptd$LAYOUT, ptd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DVTARGETDEVICE *ptd
     * }
     */
    public static void ptd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ptd$LAYOUT, ptd$OFFSET, fieldValue);
    }

    private static final OfInt dwAspect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwAspect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwAspect
     * }
     */
    public static final OfInt dwAspect$layout() {
        return dwAspect$LAYOUT;
    }

    private static final long dwAspect$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwAspect
     * }
     */
    public static final long dwAspect$offset() {
        return dwAspect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwAspect
     * }
     */
    public static int dwAspect(MemorySegment struct) {
        return struct.get(dwAspect$LAYOUT, dwAspect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwAspect
     * }
     */
    public static void dwAspect(MemorySegment struct, int fieldValue) {
        struct.set(dwAspect$LAYOUT, dwAspect$OFFSET, fieldValue);
    }

    private static final OfInt lindex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lindex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lindex
     * }
     */
    public static final OfInt lindex$layout() {
        return lindex$LAYOUT;
    }

    private static final long lindex$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lindex
     * }
     */
    public static final long lindex$offset() {
        return lindex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lindex
     * }
     */
    public static int lindex(MemorySegment struct) {
        return struct.get(lindex$LAYOUT, lindex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lindex
     * }
     */
    public static void lindex(MemorySegment struct, int fieldValue) {
        struct.set(lindex$LAYOUT, lindex$OFFSET, fieldValue);
    }

    private static final OfInt tymed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tymed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static final OfInt tymed$layout() {
        return tymed$LAYOUT;
    }

    private static final long tymed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static final long tymed$offset() {
        return tymed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static int tymed(MemorySegment struct) {
        return struct.get(tymed$LAYOUT, tymed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD tymed
     * }
     */
    public static void tymed(MemorySegment struct, int fieldValue) {
        struct.set(tymed$LAYOUT, tymed$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

