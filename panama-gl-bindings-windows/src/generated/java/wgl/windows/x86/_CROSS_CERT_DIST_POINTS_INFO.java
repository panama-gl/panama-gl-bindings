// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CROSS_CERT_DIST_POINTS_INFO {
 *     DWORD dwSyncDeltaTime;
 *     DWORD cDistPoint;
 *     PCERT_ALT_NAME_INFO rgDistPoint;
 * }
 * }
 */
public class _CROSS_CERT_DIST_POINTS_INFO {

    _CROSS_CERT_DIST_POINTS_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("dwSyncDeltaTime"),
        wgl_h.C_LONG.withName("cDistPoint"),
        wgl_h.C_POINTER.withName("rgDistPoint")
    ).withName("_CROSS_CERT_DIST_POINTS_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt dwSyncDeltaTime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSyncDeltaTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSyncDeltaTime
     * }
     */
    public static final OfInt dwSyncDeltaTime$layout() {
        return dwSyncDeltaTime$LAYOUT;
    }

    private static final long dwSyncDeltaTime$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSyncDeltaTime
     * }
     */
    public static final long dwSyncDeltaTime$offset() {
        return dwSyncDeltaTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSyncDeltaTime
     * }
     */
    public static int dwSyncDeltaTime(MemorySegment struct) {
        return struct.get(dwSyncDeltaTime$LAYOUT, dwSyncDeltaTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSyncDeltaTime
     * }
     */
    public static void dwSyncDeltaTime(MemorySegment struct, int fieldValue) {
        struct.set(dwSyncDeltaTime$LAYOUT, dwSyncDeltaTime$OFFSET, fieldValue);
    }

    private static final OfInt cDistPoint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cDistPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cDistPoint
     * }
     */
    public static final OfInt cDistPoint$layout() {
        return cDistPoint$LAYOUT;
    }

    private static final long cDistPoint$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cDistPoint
     * }
     */
    public static final long cDistPoint$offset() {
        return cDistPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cDistPoint
     * }
     */
    public static int cDistPoint(MemorySegment struct) {
        return struct.get(cDistPoint$LAYOUT, cDistPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cDistPoint
     * }
     */
    public static void cDistPoint(MemorySegment struct, int fieldValue) {
        struct.set(cDistPoint$LAYOUT, cDistPoint$OFFSET, fieldValue);
    }

    private static final AddressLayout rgDistPoint$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgDistPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCERT_ALT_NAME_INFO rgDistPoint
     * }
     */
    public static final AddressLayout rgDistPoint$layout() {
        return rgDistPoint$LAYOUT;
    }

    private static final long rgDistPoint$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCERT_ALT_NAME_INFO rgDistPoint
     * }
     */
    public static final long rgDistPoint$offset() {
        return rgDistPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCERT_ALT_NAME_INFO rgDistPoint
     * }
     */
    public static MemorySegment rgDistPoint(MemorySegment struct) {
        return struct.get(rgDistPoint$LAYOUT, rgDistPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCERT_ALT_NAME_INFO rgDistPoint
     * }
     */
    public static void rgDistPoint(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgDistPoint$LAYOUT, rgDistPoint$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

