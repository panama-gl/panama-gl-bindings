// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface CS_TAG_GETTING_ROUTINE {

    void apply(java.lang.foreign.MemoryAddress hBinding, int fServerSide, java.lang.foreign.MemoryAddress pulSendingTag, java.lang.foreign.MemoryAddress pulDesiredReceivingTag, java.lang.foreign.MemoryAddress pulReceivingTag, java.lang.foreign.MemoryAddress pStatus);
    static MemorySegment allocate(CS_TAG_GETTING_ROUTINE fi, MemorySession session) {
        return RuntimeHelper.upcallStub(CS_TAG_GETTING_ROUTINE.class, fi, constants$828.CS_TAG_GETTING_ROUTINE$FUNC, session);
    }
    static CS_TAG_GETTING_ROUTINE ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _hBinding, int _fServerSide, java.lang.foreign.MemoryAddress _pulSendingTag, java.lang.foreign.MemoryAddress _pulDesiredReceivingTag, java.lang.foreign.MemoryAddress _pulReceivingTag, java.lang.foreign.MemoryAddress _pStatus) -> {
            try {
                constants$828.CS_TAG_GETTING_ROUTINE$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_hBinding, _fServerSide, (java.lang.foreign.Addressable)_pulSendingTag, (java.lang.foreign.Addressable)_pulDesiredReceivingTag, (java.lang.foreign.Addressable)_pulReceivingTag, (java.lang.foreign.Addressable)_pStatus);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


