// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
 *     unsigned long Version;
 *     unsigned long Flags;
 *     unsigned long ComTimeout;
 *     unsigned long CallTimeout;
 * }
 * }
 */
public class _RPC_BINDING_HANDLE_OPTIONS_V1 {

    _RPC_BINDING_HANDLE_OPTIONS_V1() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_LONG.withName("ComTimeout"),
        wgl_h.C_LONG.withName("CallTimeout")
    ).withName("_RPC_BINDING_HANDLE_OPTIONS_V1");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt ComTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ComTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long ComTimeout
     * }
     */
    public static final OfInt ComTimeout$layout() {
        return ComTimeout$LAYOUT;
    }

    private static final long ComTimeout$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long ComTimeout
     * }
     */
    public static final long ComTimeout$offset() {
        return ComTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long ComTimeout
     * }
     */
    public static int ComTimeout(MemorySegment struct) {
        return struct.get(ComTimeout$LAYOUT, ComTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long ComTimeout
     * }
     */
    public static void ComTimeout(MemorySegment struct, int fieldValue) {
        struct.set(ComTimeout$LAYOUT, ComTimeout$OFFSET, fieldValue);
    }

    private static final OfInt CallTimeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CallTimeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long CallTimeout
     * }
     */
    public static final OfInt CallTimeout$layout() {
        return CallTimeout$LAYOUT;
    }

    private static final long CallTimeout$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long CallTimeout
     * }
     */
    public static final long CallTimeout$offset() {
        return CallTimeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long CallTimeout
     * }
     */
    public static int CallTimeout(MemorySegment struct) {
        return struct.get(CallTimeout$LAYOUT, CallTimeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long CallTimeout
     * }
     */
    public static void CallTimeout(MemorySegment struct, int fieldValue) {
        struct.set(CallTimeout$LAYOUT, CallTimeout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

