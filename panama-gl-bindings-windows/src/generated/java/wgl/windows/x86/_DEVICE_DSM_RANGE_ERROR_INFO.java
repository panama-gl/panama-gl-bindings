// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _DEVICE_DSM_RANGE_ERROR_INFO {
 *     DWORD Version;
 *     DWORD Flags;
 *     DWORD TotalNumberOfRanges;
 *     DWORD NumberOfRangesReturned;
 *     DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
 * }
 * }
 */
public class _DEVICE_DSM_RANGE_ERROR_INFO {

    _DEVICE_DSM_RANGE_ERROR_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Version"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_LONG.withName("TotalNumberOfRanges"),
        wgl_h.C_LONG.withName("NumberOfRangesReturned"),
        MemoryLayout.sequenceLayout(1, _DEVICE_STORAGE_RANGE_ATTRIBUTES.layout()).withName("Ranges")
    ).withName("_DEVICE_DSM_RANGE_ERROR_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt TotalNumberOfRanges$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TotalNumberOfRanges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD TotalNumberOfRanges
     * }
     */
    public static final OfInt TotalNumberOfRanges$layout() {
        return TotalNumberOfRanges$LAYOUT;
    }

    private static final long TotalNumberOfRanges$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD TotalNumberOfRanges
     * }
     */
    public static final long TotalNumberOfRanges$offset() {
        return TotalNumberOfRanges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD TotalNumberOfRanges
     * }
     */
    public static int TotalNumberOfRanges(MemorySegment struct) {
        return struct.get(TotalNumberOfRanges$LAYOUT, TotalNumberOfRanges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD TotalNumberOfRanges
     * }
     */
    public static void TotalNumberOfRanges(MemorySegment struct, int fieldValue) {
        struct.set(TotalNumberOfRanges$LAYOUT, TotalNumberOfRanges$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfRangesReturned$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfRangesReturned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumberOfRangesReturned
     * }
     */
    public static final OfInt NumberOfRangesReturned$layout() {
        return NumberOfRangesReturned$LAYOUT;
    }

    private static final long NumberOfRangesReturned$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumberOfRangesReturned
     * }
     */
    public static final long NumberOfRangesReturned$offset() {
        return NumberOfRangesReturned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumberOfRangesReturned
     * }
     */
    public static int NumberOfRangesReturned(MemorySegment struct) {
        return struct.get(NumberOfRangesReturned$LAYOUT, NumberOfRangesReturned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumberOfRangesReturned
     * }
     */
    public static void NumberOfRangesReturned(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfRangesReturned$LAYOUT, NumberOfRangesReturned$OFFSET, fieldValue);
    }

    private static final SequenceLayout Ranges$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Ranges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static final SequenceLayout Ranges$layout() {
        return Ranges$LAYOUT;
    }

    private static final long Ranges$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static final long Ranges$offset() {
        return Ranges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static MemorySegment Ranges(MemorySegment struct) {
        return struct.asSlice(Ranges$OFFSET, Ranges$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static void Ranges(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Ranges$OFFSET, Ranges$LAYOUT.byteSize());
    }

    private static long[] Ranges$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static long[] Ranges$dimensions() {
        return Ranges$DIMS;
    }
    private static final MethodHandle Ranges$ELEM_HANDLE = Ranges$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static MemorySegment Ranges(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)Ranges$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1]
     * }
     */
    public static void Ranges(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, Ranges(struct, index0), 0L, _DEVICE_STORAGE_RANGE_ATTRIBUTES.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

