// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface I_RpcProxyIsValidMachineFn {

    int apply(java.lang.foreign.MemoryAddress Machine, java.lang.foreign.MemoryAddress DotMachine, int PortNumber);
    static MemorySegment allocate(I_RpcProxyIsValidMachineFn fi, MemorySession session) {
        return RuntimeHelper.upcallStub(I_RpcProxyIsValidMachineFn.class, fi, constants$689.I_RpcProxyIsValidMachineFn$FUNC, session);
    }
    static I_RpcProxyIsValidMachineFn ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _Machine, java.lang.foreign.MemoryAddress _DotMachine, int _PortNumber) -> {
            try {
                return (int)constants$689.I_RpcProxyIsValidMachineFn$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_Machine, (java.lang.foreign.Addressable)_DotMachine, _PortNumber);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


