// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCryptAlgorithmName {
 *     LPWSTR pszName;
 *     DWORD dwClass;
 *     DWORD dwAlgOperations;
 *     DWORD dwFlags;
 * }
 * }
 */
public class _NCryptAlgorithmName {

    _NCryptAlgorithmName() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("pszName"),
        wgl_h.C_LONG.withName("dwClass"),
        wgl_h.C_LONG.withName("dwAlgOperations"),
        wgl_h.C_LONG.withName("dwFlags"),
        MemoryLayout.paddingLayout(4)
    ).withName("_NCryptAlgorithmName");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pszName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPWSTR pszName
     * }
     */
    public static final AddressLayout pszName$layout() {
        return pszName$LAYOUT;
    }

    private static final long pszName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPWSTR pszName
     * }
     */
    public static final long pszName$offset() {
        return pszName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPWSTR pszName
     * }
     */
    public static MemorySegment pszName(MemorySegment struct) {
        return struct.get(pszName$LAYOUT, pszName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPWSTR pszName
     * }
     */
    public static void pszName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszName$LAYOUT, pszName$OFFSET, fieldValue);
    }

    private static final OfInt dwClass$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwClass
     * }
     */
    public static final OfInt dwClass$layout() {
        return dwClass$LAYOUT;
    }

    private static final long dwClass$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwClass
     * }
     */
    public static final long dwClass$offset() {
        return dwClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwClass
     * }
     */
    public static int dwClass(MemorySegment struct) {
        return struct.get(dwClass$LAYOUT, dwClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwClass
     * }
     */
    public static void dwClass(MemorySegment struct, int fieldValue) {
        struct.set(dwClass$LAYOUT, dwClass$OFFSET, fieldValue);
    }

    private static final OfInt dwAlgOperations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwAlgOperations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwAlgOperations
     * }
     */
    public static final OfInt dwAlgOperations$layout() {
        return dwAlgOperations$LAYOUT;
    }

    private static final long dwAlgOperations$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwAlgOperations
     * }
     */
    public static final long dwAlgOperations$offset() {
        return dwAlgOperations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwAlgOperations
     * }
     */
    public static int dwAlgOperations(MemorySegment struct) {
        return struct.get(dwAlgOperations$LAYOUT, dwAlgOperations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwAlgOperations
     * }
     */
    public static void dwAlgOperations(MemorySegment struct, int fieldValue) {
        struct.set(dwAlgOperations$LAYOUT, dwAlgOperations$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

