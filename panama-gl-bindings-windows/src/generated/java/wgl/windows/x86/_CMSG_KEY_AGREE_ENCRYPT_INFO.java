// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
 *     DWORD cbSize;
 *     DWORD dwRecipientIndex;
 *     CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
 *     CRYPT_DATA_BLOB UserKeyingMaterial;
 *     DWORD dwOriginatorChoice;
 *     union {
 *         CERT_ID OriginatorCertId;
 *         CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
 *     };
 *     DWORD cKeyAgreeKeyEncryptInfo;
 *     PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
 *     DWORD dwFlags;
 * }
 * }
 */
public class _CMSG_KEY_AGREE_ENCRYPT_INFO {

    _CMSG_KEY_AGREE_ENCRYPT_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        wgl_h.C_LONG.withName("dwRecipientIndex"),
        _CRYPT_ALGORITHM_IDENTIFIER.layout().withName("KeyEncryptionAlgorithm"),
        _CRYPTOAPI_BLOB.layout().withName("UserKeyingMaterial"),
        wgl_h.C_LONG.withName("dwOriginatorChoice"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            _CERT_ID.layout().withName("OriginatorCertId"),
            _CERT_PUBLIC_KEY_INFO.layout().withName("OriginatorPublicKeyInfo")
        ).withName("$anon$8615:5"),
        wgl_h.C_LONG.withName("cKeyAgreeKeyEncryptInfo"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("rgpKeyAgreeKeyEncryptInfo"),
        wgl_h.C_LONG.withName("dwFlags"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CMSG_KEY_AGREE_ENCRYPT_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt dwRecipientIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwRecipientIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static final OfInt dwRecipientIndex$layout() {
        return dwRecipientIndex$LAYOUT;
    }

    private static final long dwRecipientIndex$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static final long dwRecipientIndex$offset() {
        return dwRecipientIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static int dwRecipientIndex(MemorySegment struct) {
        return struct.get(dwRecipientIndex$LAYOUT, dwRecipientIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwRecipientIndex
     * }
     */
    public static void dwRecipientIndex(MemorySegment struct, int fieldValue) {
        struct.set(dwRecipientIndex$LAYOUT, dwRecipientIndex$OFFSET, fieldValue);
    }

    private static final GroupLayout KeyEncryptionAlgorithm$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeyEncryptionAlgorithm"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static final GroupLayout KeyEncryptionAlgorithm$layout() {
        return KeyEncryptionAlgorithm$LAYOUT;
    }

    private static final long KeyEncryptionAlgorithm$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static final long KeyEncryptionAlgorithm$offset() {
        return KeyEncryptionAlgorithm$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static MemorySegment KeyEncryptionAlgorithm(MemorySegment struct) {
        return struct.asSlice(KeyEncryptionAlgorithm$OFFSET, KeyEncryptionAlgorithm$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm
     * }
     */
    public static void KeyEncryptionAlgorithm(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeyEncryptionAlgorithm$OFFSET, KeyEncryptionAlgorithm$LAYOUT.byteSize());
    }

    private static final GroupLayout UserKeyingMaterial$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("UserKeyingMaterial"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static final GroupLayout UserKeyingMaterial$layout() {
        return UserKeyingMaterial$LAYOUT;
    }

    private static final long UserKeyingMaterial$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static final long UserKeyingMaterial$offset() {
        return UserKeyingMaterial$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static MemorySegment UserKeyingMaterial(MemorySegment struct) {
        return struct.asSlice(UserKeyingMaterial$OFFSET, UserKeyingMaterial$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CRYPT_DATA_BLOB UserKeyingMaterial
     * }
     */
    public static void UserKeyingMaterial(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, UserKeyingMaterial$OFFSET, UserKeyingMaterial$LAYOUT.byteSize());
    }

    private static final OfInt dwOriginatorChoice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwOriginatorChoice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwOriginatorChoice
     * }
     */
    public static final OfInt dwOriginatorChoice$layout() {
        return dwOriginatorChoice$LAYOUT;
    }

    private static final long dwOriginatorChoice$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwOriginatorChoice
     * }
     */
    public static final long dwOriginatorChoice$offset() {
        return dwOriginatorChoice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwOriginatorChoice
     * }
     */
    public static int dwOriginatorChoice(MemorySegment struct) {
        return struct.get(dwOriginatorChoice$LAYOUT, dwOriginatorChoice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwOriginatorChoice
     * }
     */
    public static void dwOriginatorChoice(MemorySegment struct, int fieldValue) {
        struct.set(dwOriginatorChoice$LAYOUT, dwOriginatorChoice$OFFSET, fieldValue);
    }

    private static final GroupLayout OriginatorCertId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$8615:5"), groupElement("OriginatorCertId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CERT_ID OriginatorCertId
     * }
     */
    public static final GroupLayout OriginatorCertId$layout() {
        return OriginatorCertId$LAYOUT;
    }

    private static final long OriginatorCertId$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CERT_ID OriginatorCertId
     * }
     */
    public static final long OriginatorCertId$offset() {
        return OriginatorCertId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CERT_ID OriginatorCertId
     * }
     */
    public static MemorySegment OriginatorCertId(MemorySegment struct) {
        return struct.asSlice(OriginatorCertId$OFFSET, OriginatorCertId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CERT_ID OriginatorCertId
     * }
     */
    public static void OriginatorCertId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OriginatorCertId$OFFSET, OriginatorCertId$LAYOUT.byteSize());
    }

    private static final GroupLayout OriginatorPublicKeyInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$8615:5"), groupElement("OriginatorPublicKeyInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo
     * }
     */
    public static final GroupLayout OriginatorPublicKeyInfo$layout() {
        return OriginatorPublicKeyInfo$LAYOUT;
    }

    private static final long OriginatorPublicKeyInfo$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo
     * }
     */
    public static final long OriginatorPublicKeyInfo$offset() {
        return OriginatorPublicKeyInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo
     * }
     */
    public static MemorySegment OriginatorPublicKeyInfo(MemorySegment struct) {
        return struct.asSlice(OriginatorPublicKeyInfo$OFFSET, OriginatorPublicKeyInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo
     * }
     */
    public static void OriginatorPublicKeyInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OriginatorPublicKeyInfo$OFFSET, OriginatorPublicKeyInfo$LAYOUT.byteSize());
    }

    private static final OfInt cKeyAgreeKeyEncryptInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cKeyAgreeKeyEncryptInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cKeyAgreeKeyEncryptInfo
     * }
     */
    public static final OfInt cKeyAgreeKeyEncryptInfo$layout() {
        return cKeyAgreeKeyEncryptInfo$LAYOUT;
    }

    private static final long cKeyAgreeKeyEncryptInfo$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cKeyAgreeKeyEncryptInfo
     * }
     */
    public static final long cKeyAgreeKeyEncryptInfo$offset() {
        return cKeyAgreeKeyEncryptInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cKeyAgreeKeyEncryptInfo
     * }
     */
    public static int cKeyAgreeKeyEncryptInfo(MemorySegment struct) {
        return struct.get(cKeyAgreeKeyEncryptInfo$LAYOUT, cKeyAgreeKeyEncryptInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cKeyAgreeKeyEncryptInfo
     * }
     */
    public static void cKeyAgreeKeyEncryptInfo(MemorySegment struct, int fieldValue) {
        struct.set(cKeyAgreeKeyEncryptInfo$LAYOUT, cKeyAgreeKeyEncryptInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout rgpKeyAgreeKeyEncryptInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("rgpKeyAgreeKeyEncryptInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo
     * }
     */
    public static final AddressLayout rgpKeyAgreeKeyEncryptInfo$layout() {
        return rgpKeyAgreeKeyEncryptInfo$LAYOUT;
    }

    private static final long rgpKeyAgreeKeyEncryptInfo$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo
     * }
     */
    public static final long rgpKeyAgreeKeyEncryptInfo$offset() {
        return rgpKeyAgreeKeyEncryptInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo
     * }
     */
    public static MemorySegment rgpKeyAgreeKeyEncryptInfo(MemorySegment struct) {
        return struct.get(rgpKeyAgreeKeyEncryptInfo$LAYOUT, rgpKeyAgreeKeyEncryptInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo
     * }
     */
    public static void rgpKeyAgreeKeyEncryptInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(rgpKeyAgreeKeyEncryptInfo$LAYOUT, rgpKeyAgreeKeyEncryptInfo$OFFSET, fieldValue);
    }

    private static final OfInt dwFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final OfInt dwFlags$layout() {
        return dwFlags$LAYOUT;
    }

    private static final long dwFlags$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static final long dwFlags$offset() {
        return dwFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static int dwFlags(MemorySegment struct) {
        return struct.get(dwFlags$LAYOUT, dwFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwFlags
     * }
     */
    public static void dwFlags(MemorySegment struct, int fieldValue) {
        struct.set(dwFlags$LAYOUT, dwFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

