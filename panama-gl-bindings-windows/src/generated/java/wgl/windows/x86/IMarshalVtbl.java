// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IMarshalVtbl {
 *     HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IMarshal *) __attribute__((stdcall));
 *     ULONG (*Release)(IMarshal *) __attribute__((stdcall));
 *     HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall));
 *     HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall));
 *     HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall));
 *     HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall));
 *     HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall));
 *     HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall));
 * }
 * }
 */
public class IMarshalVtbl {

    IMarshalVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetUnmarshalClass"),
        wgl_h.C_POINTER.withName("GetMarshalSizeMax"),
        wgl_h.C_POINTER.withName("MarshalInterface"),
        wgl_h.C_POINTER.withName("UnmarshalInterface"),
        wgl_h.C_POINTER.withName("ReleaseMarshalData"),
        wgl_h.C_POINTER.withName("DisconnectObject")
    ).withName("IMarshalVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IMarshal *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IMarshal *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))
     * }
     */
    public static class GetUnmarshalClass {

        GetUnmarshalClass() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetUnmarshalClass.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetUnmarshalClass.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetUnmarshalClass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetUnmarshalClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetUnmarshalClass$layout() {
        return GetUnmarshalClass$LAYOUT;
    }

    private static final long GetUnmarshalClass$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))
     * }
     */
    public static final long GetUnmarshalClass$offset() {
        return GetUnmarshalClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetUnmarshalClass(MemorySegment struct) {
        return struct.get(GetUnmarshalClass$LAYOUT, GetUnmarshalClass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetUnmarshalClass)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, CLSID *) __attribute__((stdcall))
     * }
     */
    public static void GetUnmarshalClass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetUnmarshalClass$LAYOUT, GetUnmarshalClass$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static class GetMarshalSizeMax {

        GetMarshalSizeMax() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetMarshalSizeMax.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetMarshalSizeMax.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, MemorySegment _x4, int _x5, MemorySegment _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetMarshalSizeMax$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetMarshalSizeMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetMarshalSizeMax$layout() {
        return GetMarshalSizeMax$LAYOUT;
    }

    private static final long GetMarshalSizeMax$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static final long GetMarshalSizeMax$offset() {
        return GetMarshalSizeMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetMarshalSizeMax(MemorySegment struct) {
        return struct.get(GetMarshalSizeMax$LAYOUT, GetMarshalSizeMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetMarshalSizeMax)(IMarshal *, const IID *const, void *, DWORD, void *, DWORD, DWORD *) __attribute__((stdcall))
     * }
     */
    public static void GetMarshalSizeMax(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetMarshalSizeMax$LAYOUT, GetMarshalSizeMax$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class MarshalInterface {

        MarshalInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4, MemorySegment _x5, int _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(MarshalInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(MarshalInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, int _x4, MemorySegment _x5, int _x6) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout MarshalInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MarshalInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout MarshalInterface$layout() {
        return MarshalInterface$LAYOUT;
    }

    private static final long MarshalInterface$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long MarshalInterface$offset() {
        return MarshalInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment MarshalInterface(MemorySegment struct) {
        return struct.get(MarshalInterface$LAYOUT, MarshalInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*MarshalInterface)(IMarshal *, IStream *, const IID *const, void *, DWORD, void *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void MarshalInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MarshalInterface$LAYOUT, MarshalInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class UnmarshalInterface {

        UnmarshalInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(UnmarshalInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(UnmarshalInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout UnmarshalInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UnmarshalInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout UnmarshalInterface$layout() {
        return UnmarshalInterface$LAYOUT;
    }

    private static final long UnmarshalInterface$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long UnmarshalInterface$offset() {
        return UnmarshalInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment UnmarshalInterface(MemorySegment struct) {
        return struct.get(UnmarshalInterface$LAYOUT, UnmarshalInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*UnmarshalInterface)(IMarshal *, IStream *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void UnmarshalInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UnmarshalInterface$LAYOUT, UnmarshalInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall))
     * }
     */
    public static class ReleaseMarshalData {

        ReleaseMarshalData() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ReleaseMarshalData.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReleaseMarshalData.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReleaseMarshalData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReleaseMarshalData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ReleaseMarshalData$layout() {
        return ReleaseMarshalData$LAYOUT;
    }

    private static final long ReleaseMarshalData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall))
     * }
     */
    public static final long ReleaseMarshalData$offset() {
        return ReleaseMarshalData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ReleaseMarshalData(MemorySegment struct) {
        return struct.get(ReleaseMarshalData$LAYOUT, ReleaseMarshalData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ReleaseMarshalData)(IMarshal *, IStream *) __attribute__((stdcall))
     * }
     */
    public static void ReleaseMarshalData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReleaseMarshalData$LAYOUT, ReleaseMarshalData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall))
     * }
     */
    public static class DisconnectObject {

        DisconnectObject() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(DisconnectObject.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DisconnectObject.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DisconnectObject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DisconnectObject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout DisconnectObject$layout() {
        return DisconnectObject$LAYOUT;
    }

    private static final long DisconnectObject$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall))
     * }
     */
    public static final long DisconnectObject$offset() {
        return DisconnectObject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall))
     * }
     */
    public static MemorySegment DisconnectObject(MemorySegment struct) {
        return struct.get(DisconnectObject$LAYOUT, DisconnectObject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*DisconnectObject)(IMarshal *, DWORD) __attribute__((stdcall))
     * }
     */
    public static void DisconnectObject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DisconnectObject$LAYOUT, DisconnectObject$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

