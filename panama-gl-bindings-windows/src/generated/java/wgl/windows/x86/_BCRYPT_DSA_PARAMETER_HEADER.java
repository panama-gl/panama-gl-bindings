// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _BCRYPT_DSA_PARAMETER_HEADER {
 *     ULONG cbLength;
 *     ULONG dwMagic;
 *     ULONG cbKeyLength;
 *     UCHAR Count[4];
 *     UCHAR Seed[20];
 *     UCHAR q[20];
 * }
 * }
 */
public class _BCRYPT_DSA_PARAMETER_HEADER {

    _BCRYPT_DSA_PARAMETER_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbLength"),
        wgl_h.C_LONG.withName("dwMagic"),
        wgl_h.C_LONG.withName("cbKeyLength"),
        MemoryLayout.sequenceLayout(4, wgl_h.C_CHAR).withName("Count"),
        MemoryLayout.sequenceLayout(20, wgl_h.C_CHAR).withName("Seed"),
        MemoryLayout.sequenceLayout(20, wgl_h.C_CHAR).withName("q")
    ).withName("_BCRYPT_DSA_PARAMETER_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbLength
     * }
     */
    public static final OfInt cbLength$layout() {
        return cbLength$LAYOUT;
    }

    private static final long cbLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbLength
     * }
     */
    public static final long cbLength$offset() {
        return cbLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbLength
     * }
     */
    public static int cbLength(MemorySegment struct) {
        return struct.get(cbLength$LAYOUT, cbLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbLength
     * }
     */
    public static void cbLength(MemorySegment struct, int fieldValue) {
        struct.set(cbLength$LAYOUT, cbLength$OFFSET, fieldValue);
    }

    private static final OfInt dwMagic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwMagic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static final OfInt dwMagic$layout() {
        return dwMagic$LAYOUT;
    }

    private static final long dwMagic$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static final long dwMagic$offset() {
        return dwMagic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static int dwMagic(MemorySegment struct) {
        return struct.get(dwMagic$LAYOUT, dwMagic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG dwMagic
     * }
     */
    public static void dwMagic(MemorySegment struct, int fieldValue) {
        struct.set(dwMagic$LAYOUT, dwMagic$OFFSET, fieldValue);
    }

    private static final OfInt cbKeyLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbKeyLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbKeyLength
     * }
     */
    public static final OfInt cbKeyLength$layout() {
        return cbKeyLength$LAYOUT;
    }

    private static final long cbKeyLength$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbKeyLength
     * }
     */
    public static final long cbKeyLength$offset() {
        return cbKeyLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbKeyLength
     * }
     */
    public static int cbKeyLength(MemorySegment struct) {
        return struct.get(cbKeyLength$LAYOUT, cbKeyLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbKeyLength
     * }
     */
    public static void cbKeyLength(MemorySegment struct, int fieldValue) {
        struct.set(cbKeyLength$LAYOUT, cbKeyLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout Count$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static final SequenceLayout Count$layout() {
        return Count$LAYOUT;
    }

    private static final long Count$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static final long Count$offset() {
        return Count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static MemorySegment Count(MemorySegment struct) {
        return struct.asSlice(Count$OFFSET, Count$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static void Count(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Count$OFFSET, Count$LAYOUT.byteSize());
    }

    private static long[] Count$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static long[] Count$dimensions() {
        return Count$DIMS;
    }
    private static final VarHandle Count$ELEM_HANDLE = Count$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static byte Count(MemorySegment struct, long index0) {
        return (byte)Count$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR Count[4]
     * }
     */
    public static void Count(MemorySegment struct, long index0, byte fieldValue) {
        Count$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout Seed$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static final SequenceLayout Seed$layout() {
        return Seed$LAYOUT;
    }

    private static final long Seed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static final long Seed$offset() {
        return Seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static MemorySegment Seed(MemorySegment struct) {
        return struct.asSlice(Seed$OFFSET, Seed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static void Seed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Seed$OFFSET, Seed$LAYOUT.byteSize());
    }

    private static long[] Seed$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static long[] Seed$dimensions() {
        return Seed$DIMS;
    }
    private static final VarHandle Seed$ELEM_HANDLE = Seed$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static byte Seed(MemorySegment struct, long index0) {
        return (byte)Seed$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR Seed[20]
     * }
     */
    public static void Seed(MemorySegment struct, long index0, byte fieldValue) {
        Seed$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout q$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("q"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static final SequenceLayout q$layout() {
        return q$LAYOUT;
    }

    private static final long q$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static final long q$offset() {
        return q$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static MemorySegment q(MemorySegment struct) {
        return struct.asSlice(q$OFFSET, q$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static void q(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, q$OFFSET, q$LAYOUT.byteSize());
    }

    private static long[] q$DIMS = { 20 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static long[] q$dimensions() {
        return q$DIMS;
    }
    private static final VarHandle q$ELEM_HANDLE = q$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static byte q(MemorySegment struct, long index0) {
        return (byte)q$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * UCHAR q[20]
     * }
     */
    public static void q(MemorySegment struct, long index0, byte fieldValue) {
        q$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

