// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$254 {

    static final FunctionDescriptor GlobalUnlock$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GlobalUnlock$MH = RuntimeHelper.downcallHandle(
        "GlobalUnlock",
        constants$254.GlobalUnlock$FUNC
    );
    static final FunctionDescriptor GlobalLock$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GlobalLock$MH = RuntimeHelper.downcallHandle(
        "GlobalLock",
        constants$254.GlobalLock$FUNC
    );
    static final FunctionDescriptor GlobalFlags$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GlobalFlags$MH = RuntimeHelper.downcallHandle(
        "GlobalFlags",
        constants$254.GlobalFlags$FUNC
    );
    static final FunctionDescriptor GlobalHandle$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GlobalHandle$MH = RuntimeHelper.downcallHandle(
        "GlobalHandle",
        constants$254.GlobalHandle$FUNC
    );
    static final FunctionDescriptor GlobalFree$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GlobalFree$MH = RuntimeHelper.downcallHandle(
        "GlobalFree",
        constants$254.GlobalFree$FUNC
    );
    static final FunctionDescriptor GlobalCompact$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle GlobalCompact$MH = RuntimeHelper.downcallHandle(
        "GlobalCompact",
        constants$254.GlobalCompact$FUNC
    );
}


