// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IXMLDOMDocumentVtbl {
 *     HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall));
 *     ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall));
 *     HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall));
 *     HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall));
 *     HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall));
 *     HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall));
 *     HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall));
 *     HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall));
 *     HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall));
 *     HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall));
 *     HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall));
 *     HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall));
 *     HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall));
 *     HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall));
 *     HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall));
 *     HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall));
 *     HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall));
 *     HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall));
 *     HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall));
 *     HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall));
 *     HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall));
 *     HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall));
 *     HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall));
 *     HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall));
 *     HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall));
 *     HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall));
 *     HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall));
 *     HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall));
 *     HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall));
 *     HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall));
 *     HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall));
 *     HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall));
 *     HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall));
 *     HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall));
 *     HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall));
 *     HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 *     HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall));
 * }
 * }
 */
public class IXMLDOMDocumentVtbl {

    IXMLDOMDocumentVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("GetTypeInfoCount"),
        wgl_h.C_POINTER.withName("GetTypeInfo"),
        wgl_h.C_POINTER.withName("GetIDsOfNames"),
        wgl_h.C_POINTER.withName("Invoke"),
        wgl_h.C_POINTER.withName("get_nodeName"),
        wgl_h.C_POINTER.withName("get_nodeValue"),
        wgl_h.C_POINTER.withName("put_nodeValue"),
        wgl_h.C_POINTER.withName("get_nodeType"),
        wgl_h.C_POINTER.withName("get_parentNode"),
        wgl_h.C_POINTER.withName("get_childNodes"),
        wgl_h.C_POINTER.withName("get_firstChild"),
        wgl_h.C_POINTER.withName("get_lastChild"),
        wgl_h.C_POINTER.withName("get_previousSibling"),
        wgl_h.C_POINTER.withName("get_nextSibling"),
        wgl_h.C_POINTER.withName("get_attributes"),
        wgl_h.C_POINTER.withName("insertBefore"),
        wgl_h.C_POINTER.withName("replaceChild"),
        wgl_h.C_POINTER.withName("removeChild"),
        wgl_h.C_POINTER.withName("appendChild"),
        wgl_h.C_POINTER.withName("hasChildNodes"),
        wgl_h.C_POINTER.withName("get_ownerDocument"),
        wgl_h.C_POINTER.withName("cloneNode"),
        wgl_h.C_POINTER.withName("get_nodeTypeString"),
        wgl_h.C_POINTER.withName("get_text"),
        wgl_h.C_POINTER.withName("put_text"),
        wgl_h.C_POINTER.withName("get_specified"),
        wgl_h.C_POINTER.withName("get_definition"),
        wgl_h.C_POINTER.withName("get_nodeTypedValue"),
        wgl_h.C_POINTER.withName("put_nodeTypedValue"),
        wgl_h.C_POINTER.withName("get_dataType"),
        wgl_h.C_POINTER.withName("put_dataType"),
        wgl_h.C_POINTER.withName("get_xml"),
        wgl_h.C_POINTER.withName("transformNode"),
        wgl_h.C_POINTER.withName("selectNodes"),
        wgl_h.C_POINTER.withName("selectSingleNode"),
        wgl_h.C_POINTER.withName("get_parsed"),
        wgl_h.C_POINTER.withName("get_namespaceURI"),
        wgl_h.C_POINTER.withName("get_prefix"),
        wgl_h.C_POINTER.withName("get_baseName"),
        wgl_h.C_POINTER.withName("transformNodeToObject"),
        wgl_h.C_POINTER.withName("get_doctype"),
        wgl_h.C_POINTER.withName("get_implementation"),
        wgl_h.C_POINTER.withName("get_documentElement"),
        wgl_h.C_POINTER.withName("putref_documentElement"),
        wgl_h.C_POINTER.withName("createElement"),
        wgl_h.C_POINTER.withName("createDocumentFragment"),
        wgl_h.C_POINTER.withName("createTextNode"),
        wgl_h.C_POINTER.withName("createComment"),
        wgl_h.C_POINTER.withName("createCDATASection"),
        wgl_h.C_POINTER.withName("createProcessingInstruction"),
        wgl_h.C_POINTER.withName("createAttribute"),
        wgl_h.C_POINTER.withName("createEntityReference"),
        wgl_h.C_POINTER.withName("getElementsByTagName"),
        wgl_h.C_POINTER.withName("createNode"),
        wgl_h.C_POINTER.withName("nodeFromID"),
        wgl_h.C_POINTER.withName("load"),
        wgl_h.C_POINTER.withName("get_readyState"),
        wgl_h.C_POINTER.withName("get_parseError"),
        wgl_h.C_POINTER.withName("get_url"),
        wgl_h.C_POINTER.withName("get_async"),
        wgl_h.C_POINTER.withName("put_async"),
        wgl_h.C_POINTER.withName("abort"),
        wgl_h.C_POINTER.withName("loadXML"),
        wgl_h.C_POINTER.withName("save"),
        wgl_h.C_POINTER.withName("get_validateOnParse"),
        wgl_h.C_POINTER.withName("put_validateOnParse"),
        wgl_h.C_POINTER.withName("get_resolveExternals"),
        wgl_h.C_POINTER.withName("put_resolveExternals"),
        wgl_h.C_POINTER.withName("get_preserveWhiteSpace"),
        wgl_h.C_POINTER.withName("put_preserveWhiteSpace"),
        wgl_h.C_POINTER.withName("put_onreadystatechange"),
        wgl_h.C_POINTER.withName("put_ondataavailable"),
        wgl_h.C_POINTER.withName("put_ontransformnode")
    ).withName("IXMLDOMDocumentVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IXMLDOMDocument *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall))
     * }
     */
    public static class GetTypeInfoCount {

        GetTypeInfoCount() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTypeInfoCount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTypeInfoCount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTypeInfoCount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTypeInfoCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTypeInfoCount$layout() {
        return GetTypeInfoCount$LAYOUT;
    }

    private static final long GetTypeInfoCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final long GetTypeInfoCount$offset() {
        return GetTypeInfoCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTypeInfoCount(MemorySegment struct) {
        return struct.get(GetTypeInfoCount$LAYOUT, GetTypeInfoCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfoCount)(IXMLDOMDocument *, UINT *) __attribute__((stdcall))
     * }
     */
    public static void GetTypeInfoCount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTypeInfoCount$LAYOUT, GetTypeInfoCount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static class GetTypeInfo {

        GetTypeInfo() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetTypeInfo.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetTypeInfo.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetTypeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetTypeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetTypeInfo$layout() {
        return GetTypeInfo$LAYOUT;
    }

    private static final long GetTypeInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static final long GetTypeInfo$offset() {
        return GetTypeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetTypeInfo(MemorySegment struct) {
        return struct.get(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetTypeInfo)(IXMLDOMDocument *, UINT, LCID, ITypeInfo **) __attribute__((stdcall))
     * }
     */
    public static void GetTypeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetTypeInfo$LAYOUT, GetTypeInfo$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static class GetIDsOfNames {

        GetIDsOfNames() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_INT,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetIDsOfNames.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetIDsOfNames.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3, int _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetIDsOfNames$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetIDsOfNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetIDsOfNames$layout() {
        return GetIDsOfNames$LAYOUT;
    }

    private static final long GetIDsOfNames$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static final long GetIDsOfNames$offset() {
        return GetIDsOfNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetIDsOfNames(MemorySegment struct) {
        return struct.get(GetIDsOfNames$LAYOUT, GetIDsOfNames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetIDsOfNames)(IXMLDOMDocument *, const IID *const, LPOLESTR *, UINT, LCID, DISPID *) __attribute__((stdcall))
     * }
     */
    public static void GetIDsOfNames(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetIDsOfNames$LAYOUT, GetIDsOfNames$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static class Invoke {

        Invoke() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, short _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Invoke.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Invoke.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2, int _x3, short _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Invoke$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Invoke"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Invoke$layout() {
        return Invoke$LAYOUT;
    }

    private static final long Invoke$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static final long Invoke$offset() {
        return Invoke$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Invoke(MemorySegment struct) {
        return struct.get(Invoke$LAYOUT, Invoke$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*Invoke)(IXMLDOMDocument *, DISPID, const IID *const, LCID, WORD, DISPPARAMS *, VARIANT *, EXCEPINFO *, UINT *) __attribute__((stdcall))
     * }
     */
    public static void Invoke(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Invoke$LAYOUT, Invoke$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_nodeName {

        get_nodeName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nodeName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nodeName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nodeName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nodeName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nodeName$layout() {
        return get_nodeName$LAYOUT;
    }

    private static final long get_nodeName$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_nodeName$offset() {
        return get_nodeName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nodeName(MemorySegment struct) {
        return struct.get(get_nodeName$LAYOUT, get_nodeName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_nodeName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nodeName$LAYOUT, get_nodeName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class get_nodeValue {

        get_nodeValue() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nodeValue.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nodeValue.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nodeValue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nodeValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nodeValue$layout() {
        return get_nodeValue$LAYOUT;
    }

    private static final long get_nodeValue$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long get_nodeValue$offset() {
        return get_nodeValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nodeValue(MemorySegment struct) {
        return struct.get(get_nodeValue$LAYOUT, get_nodeValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void get_nodeValue(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nodeValue$LAYOUT, get_nodeValue$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class put_nodeValue {

        put_nodeValue() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_nodeValue.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_nodeValue.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_nodeValue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_nodeValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_nodeValue$layout() {
        return put_nodeValue$LAYOUT;
    }

    private static final long put_nodeValue$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long put_nodeValue$offset() {
        return put_nodeValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_nodeValue(MemorySegment struct) {
        return struct.get(put_nodeValue$LAYOUT, put_nodeValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void put_nodeValue(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_nodeValue$LAYOUT, put_nodeValue$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall))
     * }
     */
    public static class get_nodeType {

        get_nodeType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nodeType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nodeType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nodeType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nodeType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nodeType$layout() {
        return get_nodeType$LAYOUT;
    }

    private static final long get_nodeType$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall))
     * }
     */
    public static final long get_nodeType$offset() {
        return get_nodeType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nodeType(MemorySegment struct) {
        return struct.get(get_nodeType$LAYOUT, get_nodeType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeType)(IXMLDOMDocument *, DOMNodeType *) __attribute__((stdcall))
     * }
     */
    public static void get_nodeType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nodeType$LAYOUT, get_nodeType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_parentNode {

        get_parentNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_parentNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_parentNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_parentNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_parentNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_parentNode$layout() {
        return get_parentNode$LAYOUT;
    }

    private static final long get_parentNode$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_parentNode$offset() {
        return get_parentNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_parentNode(MemorySegment struct) {
        return struct.get(get_parentNode$LAYOUT, get_parentNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parentNode)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_parentNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_parentNode$LAYOUT, get_parentNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static class get_childNodes {

        get_childNodes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_childNodes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_childNodes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_childNodes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_childNodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_childNodes$layout() {
        return get_childNodes$LAYOUT;
    }

    private static final long get_childNodes$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final long get_childNodes$offset() {
        return get_childNodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_childNodes(MemorySegment struct) {
        return struct.get(get_childNodes$LAYOUT, get_childNodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_childNodes)(IXMLDOMDocument *, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static void get_childNodes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_childNodes$LAYOUT, get_childNodes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_firstChild {

        get_firstChild() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_firstChild.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_firstChild.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_firstChild$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_firstChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_firstChild$layout() {
        return get_firstChild$LAYOUT;
    }

    private static final long get_firstChild$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_firstChild$offset() {
        return get_firstChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_firstChild(MemorySegment struct) {
        return struct.get(get_firstChild$LAYOUT, get_firstChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_firstChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_firstChild(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_firstChild$LAYOUT, get_firstChild$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_lastChild {

        get_lastChild() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_lastChild.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_lastChild.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_lastChild$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_lastChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_lastChild$layout() {
        return get_lastChild$LAYOUT;
    }

    private static final long get_lastChild$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_lastChild$offset() {
        return get_lastChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_lastChild(MemorySegment struct) {
        return struct.get(get_lastChild$LAYOUT, get_lastChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_lastChild)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_lastChild(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_lastChild$LAYOUT, get_lastChild$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_previousSibling {

        get_previousSibling() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_previousSibling.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_previousSibling.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_previousSibling$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_previousSibling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_previousSibling$layout() {
        return get_previousSibling$LAYOUT;
    }

    private static final long get_previousSibling$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_previousSibling$offset() {
        return get_previousSibling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_previousSibling(MemorySegment struct) {
        return struct.get(get_previousSibling$LAYOUT, get_previousSibling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_previousSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_previousSibling(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_previousSibling$LAYOUT, get_previousSibling$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_nextSibling {

        get_nextSibling() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nextSibling.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nextSibling.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nextSibling$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nextSibling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nextSibling$layout() {
        return get_nextSibling$LAYOUT;
    }

    private static final long get_nextSibling$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_nextSibling$offset() {
        return get_nextSibling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nextSibling(MemorySegment struct) {
        return struct.get(get_nextSibling$LAYOUT, get_nextSibling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nextSibling)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_nextSibling(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nextSibling$LAYOUT, get_nextSibling$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall))
     * }
     */
    public static class get_attributes {

        get_attributes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_attributes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_attributes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_attributes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_attributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_attributes$layout() {
        return get_attributes$LAYOUT;
    }

    private static final long get_attributes$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall))
     * }
     */
    public static final long get_attributes$offset() {
        return get_attributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_attributes(MemorySegment struct) {
        return struct.get(get_attributes$LAYOUT, get_attributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_attributes)(IXMLDOMDocument *, IXMLDOMNamedNodeMap **) __attribute__((stdcall))
     * }
     */
    public static void get_attributes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_attributes$LAYOUT, get_attributes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class insertBefore {

        insertBefore() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            tagVARIANT.layout(),
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(insertBefore.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(insertBefore.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout insertBefore$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("insertBefore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout insertBefore$layout() {
        return insertBefore$LAYOUT;
    }

    private static final long insertBefore$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long insertBefore$offset() {
        return insertBefore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment insertBefore(MemorySegment struct) {
        return struct.get(insertBefore$LAYOUT, insertBefore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*insertBefore)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void insertBefore(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(insertBefore$LAYOUT, insertBefore$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class replaceChild {

        replaceChild() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(replaceChild.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(replaceChild.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout replaceChild$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("replaceChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout replaceChild$layout() {
        return replaceChild$LAYOUT;
    }

    private static final long replaceChild$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long replaceChild$offset() {
        return replaceChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment replaceChild(MemorySegment struct) {
        return struct.get(replaceChild$LAYOUT, replaceChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*replaceChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void replaceChild(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(replaceChild$LAYOUT, replaceChild$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class removeChild {

        removeChild() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(removeChild.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(removeChild.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout removeChild$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("removeChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout removeChild$layout() {
        return removeChild$LAYOUT;
    }

    private static final long removeChild$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long removeChild$offset() {
        return removeChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment removeChild(MemorySegment struct) {
        return struct.get(removeChild$LAYOUT, removeChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*removeChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void removeChild(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(removeChild$LAYOUT, removeChild$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class appendChild {

        appendChild() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(appendChild.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(appendChild.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout appendChild$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("appendChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout appendChild$layout() {
        return appendChild$LAYOUT;
    }

    private static final long appendChild$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long appendChild$offset() {
        return appendChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment appendChild(MemorySegment struct) {
        return struct.get(appendChild$LAYOUT, appendChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*appendChild)(IXMLDOMDocument *, IXMLDOMNode *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void appendChild(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(appendChild$LAYOUT, appendChild$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class hasChildNodes {

        hasChildNodes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(hasChildNodes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(hasChildNodes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout hasChildNodes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hasChildNodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout hasChildNodes$layout() {
        return hasChildNodes$LAYOUT;
    }

    private static final long hasChildNodes$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long hasChildNodes$offset() {
        return hasChildNodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment hasChildNodes(MemorySegment struct) {
        return struct.get(hasChildNodes$LAYOUT, hasChildNodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*hasChildNodes)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void hasChildNodes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hasChildNodes$LAYOUT, hasChildNodes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall))
     * }
     */
    public static class get_ownerDocument {

        get_ownerDocument() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_ownerDocument.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_ownerDocument.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_ownerDocument$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_ownerDocument"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_ownerDocument$layout() {
        return get_ownerDocument$LAYOUT;
    }

    private static final long get_ownerDocument$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall))
     * }
     */
    public static final long get_ownerDocument$offset() {
        return get_ownerDocument$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_ownerDocument(MemorySegment struct) {
        return struct.get(get_ownerDocument$LAYOUT, get_ownerDocument$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_ownerDocument)(IXMLDOMDocument *, IXMLDOMDocument **) __attribute__((stdcall))
     * }
     */
    public static void get_ownerDocument(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_ownerDocument$LAYOUT, get_ownerDocument$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class cloneNode {

        cloneNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(cloneNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(cloneNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout cloneNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cloneNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout cloneNode$layout() {
        return cloneNode$LAYOUT;
    }

    private static final long cloneNode$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long cloneNode$offset() {
        return cloneNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment cloneNode(MemorySegment struct) {
        return struct.get(cloneNode$LAYOUT, cloneNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*cloneNode)(IXMLDOMDocument *, VARIANT_BOOL, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void cloneNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cloneNode$LAYOUT, cloneNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_nodeTypeString {

        get_nodeTypeString() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nodeTypeString.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nodeTypeString.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nodeTypeString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nodeTypeString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nodeTypeString$layout() {
        return get_nodeTypeString$LAYOUT;
    }

    private static final long get_nodeTypeString$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_nodeTypeString$offset() {
        return get_nodeTypeString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nodeTypeString(MemorySegment struct) {
        return struct.get(get_nodeTypeString$LAYOUT, get_nodeTypeString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypeString)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_nodeTypeString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nodeTypeString$LAYOUT, get_nodeTypeString$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_text {

        get_text() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_text$layout() {
        return get_text$LAYOUT;
    }

    private static final long get_text$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_text$offset() {
        return get_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_text(MemorySegment struct) {
        return struct.get(get_text$LAYOUT, get_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_text)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_text$LAYOUT, get_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static class put_text {

        put_text() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_text.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_text.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_text$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_text$layout() {
        return put_text$LAYOUT;
    }

    private static final long put_text$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static final long put_text$offset() {
        return put_text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_text(MemorySegment struct) {
        return struct.get(put_text$LAYOUT, put_text$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_text)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static void put_text(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_text$LAYOUT, put_text$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_specified {

        get_specified() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_specified.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_specified.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_specified$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_specified"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_specified$layout() {
        return get_specified$LAYOUT;
    }

    private static final long get_specified$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_specified$offset() {
        return get_specified$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_specified(MemorySegment struct) {
        return struct.get(get_specified$LAYOUT, get_specified$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_specified)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_specified(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_specified$LAYOUT, get_specified$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class get_definition {

        get_definition() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_definition.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_definition.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_definition$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_definition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_definition$layout() {
        return get_definition$LAYOUT;
    }

    private static final long get_definition$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long get_definition$offset() {
        return get_definition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_definition(MemorySegment struct) {
        return struct.get(get_definition$LAYOUT, get_definition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_definition)(IXMLDOMDocument *, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void get_definition(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_definition$LAYOUT, get_definition$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class get_nodeTypedValue {

        get_nodeTypedValue() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_nodeTypedValue.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_nodeTypedValue.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_nodeTypedValue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_nodeTypedValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_nodeTypedValue$layout() {
        return get_nodeTypedValue$LAYOUT;
    }

    private static final long get_nodeTypedValue$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long get_nodeTypedValue$offset() {
        return get_nodeTypedValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_nodeTypedValue(MemorySegment struct) {
        return struct.get(get_nodeTypedValue$LAYOUT, get_nodeTypedValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_nodeTypedValue)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void get_nodeTypedValue(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_nodeTypedValue$LAYOUT, get_nodeTypedValue$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class put_nodeTypedValue {

        put_nodeTypedValue() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_nodeTypedValue.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_nodeTypedValue.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_nodeTypedValue$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_nodeTypedValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_nodeTypedValue$layout() {
        return put_nodeTypedValue$LAYOUT;
    }

    private static final long put_nodeTypedValue$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long put_nodeTypedValue$offset() {
        return put_nodeTypedValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_nodeTypedValue(MemorySegment struct) {
        return struct.get(put_nodeTypedValue$LAYOUT, put_nodeTypedValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_nodeTypedValue)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void put_nodeTypedValue(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_nodeTypedValue$LAYOUT, put_nodeTypedValue$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static class get_dataType {

        get_dataType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_dataType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_dataType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_dataType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_dataType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_dataType$layout() {
        return get_dataType$LAYOUT;
    }

    private static final long get_dataType$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static final long get_dataType$offset() {
        return get_dataType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_dataType(MemorySegment struct) {
        return struct.get(get_dataType$LAYOUT, get_dataType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_dataType)(IXMLDOMDocument *, VARIANT *) __attribute__((stdcall))
     * }
     */
    public static void get_dataType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_dataType$LAYOUT, get_dataType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static class put_dataType {

        put_dataType() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_dataType.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_dataType.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_dataType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_dataType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_dataType$layout() {
        return put_dataType$LAYOUT;
    }

    private static final long put_dataType$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static final long put_dataType$offset() {
        return put_dataType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_dataType(MemorySegment struct) {
        return struct.get(put_dataType$LAYOUT, put_dataType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_dataType)(IXMLDOMDocument *, BSTR) __attribute__((stdcall))
     * }
     */
    public static void put_dataType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_dataType$LAYOUT, put_dataType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_xml {

        get_xml() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_xml.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_xml.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_xml$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_xml"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_xml$layout() {
        return get_xml$LAYOUT;
    }

    private static final long get_xml$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_xml$offset() {
        return get_xml$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_xml(MemorySegment struct) {
        return struct.get(get_xml$LAYOUT, get_xml$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_xml)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_xml(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_xml$LAYOUT, get_xml$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class transformNode {

        transformNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(transformNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(transformNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout transformNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transformNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout transformNode$layout() {
        return transformNode$LAYOUT;
    }

    private static final long transformNode$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long transformNode$offset() {
        return transformNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment transformNode(MemorySegment struct) {
        return struct.get(transformNode$LAYOUT, transformNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*transformNode)(IXMLDOMDocument *, IXMLDOMNode *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void transformNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transformNode$LAYOUT, transformNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static class selectNodes {

        selectNodes() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(selectNodes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(selectNodes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout selectNodes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("selectNodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout selectNodes$layout() {
        return selectNodes$LAYOUT;
    }

    private static final long selectNodes$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final long selectNodes$offset() {
        return selectNodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment selectNodes(MemorySegment struct) {
        return struct.get(selectNodes$LAYOUT, selectNodes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*selectNodes)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static void selectNodes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(selectNodes$LAYOUT, selectNodes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class selectSingleNode {

        selectSingleNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(selectSingleNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(selectSingleNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout selectSingleNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("selectSingleNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout selectSingleNode$layout() {
        return selectSingleNode$LAYOUT;
    }

    private static final long selectSingleNode$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long selectSingleNode$offset() {
        return selectSingleNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment selectSingleNode(MemorySegment struct) {
        return struct.get(selectSingleNode$LAYOUT, selectSingleNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*selectSingleNode)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void selectSingleNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(selectSingleNode$LAYOUT, selectSingleNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_parsed {

        get_parsed() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_parsed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_parsed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_parsed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_parsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_parsed$layout() {
        return get_parsed$LAYOUT;
    }

    private static final long get_parsed$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_parsed$offset() {
        return get_parsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_parsed(MemorySegment struct) {
        return struct.get(get_parsed$LAYOUT, get_parsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parsed)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_parsed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_parsed$LAYOUT, get_parsed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_namespaceURI {

        get_namespaceURI() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_namespaceURI.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_namespaceURI.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_namespaceURI$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_namespaceURI"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_namespaceURI$layout() {
        return get_namespaceURI$LAYOUT;
    }

    private static final long get_namespaceURI$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_namespaceURI$offset() {
        return get_namespaceURI$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_namespaceURI(MemorySegment struct) {
        return struct.get(get_namespaceURI$LAYOUT, get_namespaceURI$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_namespaceURI)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_namespaceURI(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_namespaceURI$LAYOUT, get_namespaceURI$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_prefix {

        get_prefix() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_prefix.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_prefix.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_prefix$layout() {
        return get_prefix$LAYOUT;
    }

    private static final long get_prefix$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_prefix$offset() {
        return get_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_prefix(MemorySegment struct) {
        return struct.get(get_prefix$LAYOUT, get_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_prefix)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_prefix$LAYOUT, get_prefix$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_baseName {

        get_baseName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_baseName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_baseName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_baseName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_baseName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_baseName$layout() {
        return get_baseName$LAYOUT;
    }

    private static final long get_baseName$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_baseName$offset() {
        return get_baseName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_baseName(MemorySegment struct) {
        return struct.get(get_baseName$LAYOUT, get_baseName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_baseName)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_baseName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_baseName$LAYOUT, get_baseName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class transformNodeToObject {

        transformNodeToObject() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(transformNodeToObject.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(transformNodeToObject.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout transformNodeToObject$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transformNodeToObject"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout transformNodeToObject$layout() {
        return transformNodeToObject$LAYOUT;
    }

    private static final long transformNodeToObject$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long transformNodeToObject$offset() {
        return transformNodeToObject$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment transformNodeToObject(MemorySegment struct) {
        return struct.get(transformNodeToObject$LAYOUT, transformNodeToObject$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*transformNodeToObject)(IXMLDOMDocument *, IXMLDOMNode *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void transformNodeToObject(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transformNodeToObject$LAYOUT, transformNodeToObject$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall))
     * }
     */
    public static class get_doctype {

        get_doctype() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_doctype.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_doctype.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_doctype$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_doctype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_doctype$layout() {
        return get_doctype$LAYOUT;
    }

    private static final long get_doctype$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall))
     * }
     */
    public static final long get_doctype$offset() {
        return get_doctype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_doctype(MemorySegment struct) {
        return struct.get(get_doctype$LAYOUT, get_doctype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_doctype)(IXMLDOMDocument *, IXMLDOMDocumentType **) __attribute__((stdcall))
     * }
     */
    public static void get_doctype(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_doctype$LAYOUT, get_doctype$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall))
     * }
     */
    public static class get_implementation {

        get_implementation() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_implementation.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_implementation.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_implementation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_implementation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_implementation$layout() {
        return get_implementation$LAYOUT;
    }

    private static final long get_implementation$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall))
     * }
     */
    public static final long get_implementation$offset() {
        return get_implementation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_implementation(MemorySegment struct) {
        return struct.get(get_implementation$LAYOUT, get_implementation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_implementation)(IXMLDOMDocument *, IXMLDOMImplementation **) __attribute__((stdcall))
     * }
     */
    public static void get_implementation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_implementation$LAYOUT, get_implementation$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static class get_documentElement {

        get_documentElement() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_documentElement.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_documentElement.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_documentElement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_documentElement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_documentElement$layout() {
        return get_documentElement$LAYOUT;
    }

    private static final long get_documentElement$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static final long get_documentElement$offset() {
        return get_documentElement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_documentElement(MemorySegment struct) {
        return struct.get(get_documentElement$LAYOUT, get_documentElement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_documentElement)(IXMLDOMDocument *, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static void get_documentElement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_documentElement$LAYOUT, get_documentElement$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall))
     * }
     */
    public static class putref_documentElement {

        putref_documentElement() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(putref_documentElement.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(putref_documentElement.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout putref_documentElement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("putref_documentElement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout putref_documentElement$layout() {
        return putref_documentElement$LAYOUT;
    }

    private static final long putref_documentElement$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall))
     * }
     */
    public static final long putref_documentElement$offset() {
        return putref_documentElement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment putref_documentElement(MemorySegment struct) {
        return struct.get(putref_documentElement$LAYOUT, putref_documentElement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*putref_documentElement)(IXMLDOMDocument *, IXMLDOMElement *) __attribute__((stdcall))
     * }
     */
    public static void putref_documentElement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(putref_documentElement$LAYOUT, putref_documentElement$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static class createElement {

        createElement() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createElement.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createElement.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createElement$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createElement"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createElement$layout() {
        return createElement$LAYOUT;
    }

    private static final long createElement$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static final long createElement$offset() {
        return createElement$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createElement(MemorySegment struct) {
        return struct.get(createElement$LAYOUT, createElement$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createElement)(IXMLDOMDocument *, BSTR, IXMLDOMElement **) __attribute__((stdcall))
     * }
     */
    public static void createElement(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createElement$LAYOUT, createElement$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall))
     * }
     */
    public static class createDocumentFragment {

        createDocumentFragment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createDocumentFragment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createDocumentFragment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createDocumentFragment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createDocumentFragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createDocumentFragment$layout() {
        return createDocumentFragment$LAYOUT;
    }

    private static final long createDocumentFragment$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall))
     * }
     */
    public static final long createDocumentFragment$offset() {
        return createDocumentFragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createDocumentFragment(MemorySegment struct) {
        return struct.get(createDocumentFragment$LAYOUT, createDocumentFragment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createDocumentFragment)(IXMLDOMDocument *, IXMLDOMDocumentFragment **) __attribute__((stdcall))
     * }
     */
    public static void createDocumentFragment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createDocumentFragment$LAYOUT, createDocumentFragment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall))
     * }
     */
    public static class createTextNode {

        createTextNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createTextNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createTextNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createTextNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createTextNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createTextNode$layout() {
        return createTextNode$LAYOUT;
    }

    private static final long createTextNode$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall))
     * }
     */
    public static final long createTextNode$offset() {
        return createTextNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createTextNode(MemorySegment struct) {
        return struct.get(createTextNode$LAYOUT, createTextNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createTextNode)(IXMLDOMDocument *, BSTR, IXMLDOMText **) __attribute__((stdcall))
     * }
     */
    public static void createTextNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createTextNode$LAYOUT, createTextNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall))
     * }
     */
    public static class createComment {

        createComment() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createComment.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createComment.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createComment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createComment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createComment$layout() {
        return createComment$LAYOUT;
    }

    private static final long createComment$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall))
     * }
     */
    public static final long createComment$offset() {
        return createComment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createComment(MemorySegment struct) {
        return struct.get(createComment$LAYOUT, createComment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createComment)(IXMLDOMDocument *, BSTR, IXMLDOMComment **) __attribute__((stdcall))
     * }
     */
    public static void createComment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createComment$LAYOUT, createComment$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall))
     * }
     */
    public static class createCDATASection {

        createCDATASection() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createCDATASection.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createCDATASection.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createCDATASection$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createCDATASection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createCDATASection$layout() {
        return createCDATASection$LAYOUT;
    }

    private static final long createCDATASection$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall))
     * }
     */
    public static final long createCDATASection$offset() {
        return createCDATASection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createCDATASection(MemorySegment struct) {
        return struct.get(createCDATASection$LAYOUT, createCDATASection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createCDATASection)(IXMLDOMDocument *, BSTR, IXMLDOMCDATASection **) __attribute__((stdcall))
     * }
     */
    public static void createCDATASection(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createCDATASection$LAYOUT, createCDATASection$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall))
     * }
     */
    public static class createProcessingInstruction {

        createProcessingInstruction() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createProcessingInstruction.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createProcessingInstruction.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createProcessingInstruction$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createProcessingInstruction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createProcessingInstruction$layout() {
        return createProcessingInstruction$LAYOUT;
    }

    private static final long createProcessingInstruction$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall))
     * }
     */
    public static final long createProcessingInstruction$offset() {
        return createProcessingInstruction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createProcessingInstruction(MemorySegment struct) {
        return struct.get(createProcessingInstruction$LAYOUT, createProcessingInstruction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createProcessingInstruction)(IXMLDOMDocument *, BSTR, BSTR, IXMLDOMProcessingInstruction **) __attribute__((stdcall))
     * }
     */
    public static void createProcessingInstruction(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createProcessingInstruction$LAYOUT, createProcessingInstruction$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall))
     * }
     */
    public static class createAttribute {

        createAttribute() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createAttribute.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createAttribute.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createAttribute$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createAttribute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createAttribute$layout() {
        return createAttribute$LAYOUT;
    }

    private static final long createAttribute$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall))
     * }
     */
    public static final long createAttribute$offset() {
        return createAttribute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createAttribute(MemorySegment struct) {
        return struct.get(createAttribute$LAYOUT, createAttribute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createAttribute)(IXMLDOMDocument *, BSTR, IXMLDOMAttribute **) __attribute__((stdcall))
     * }
     */
    public static void createAttribute(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createAttribute$LAYOUT, createAttribute$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall))
     * }
     */
    public static class createEntityReference {

        createEntityReference() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createEntityReference.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createEntityReference.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createEntityReference$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createEntityReference"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createEntityReference$layout() {
        return createEntityReference$LAYOUT;
    }

    private static final long createEntityReference$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall))
     * }
     */
    public static final long createEntityReference$offset() {
        return createEntityReference$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createEntityReference(MemorySegment struct) {
        return struct.get(createEntityReference$LAYOUT, createEntityReference$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createEntityReference)(IXMLDOMDocument *, BSTR, IXMLDOMEntityReference **) __attribute__((stdcall))
     * }
     */
    public static void createEntityReference(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createEntityReference$LAYOUT, createEntityReference$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static class getElementsByTagName {

        getElementsByTagName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(getElementsByTagName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(getElementsByTagName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout getElementsByTagName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("getElementsByTagName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout getElementsByTagName$layout() {
        return getElementsByTagName$LAYOUT;
    }

    private static final long getElementsByTagName$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static final long getElementsByTagName$offset() {
        return getElementsByTagName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment getElementsByTagName(MemorySegment struct) {
        return struct.get(getElementsByTagName$LAYOUT, getElementsByTagName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*getElementsByTagName)(IXMLDOMDocument *, BSTR, IXMLDOMNodeList **) __attribute__((stdcall))
     * }
     */
    public static void getElementsByTagName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(getElementsByTagName$LAYOUT, getElementsByTagName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class createNode {

        createNode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout(),
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(createNode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(createNode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout createNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("createNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout createNode$layout() {
        return createNode$LAYOUT;
    }

    private static final long createNode$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long createNode$offset() {
        return createNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment createNode(MemorySegment struct) {
        return struct.get(createNode$LAYOUT, createNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*createNode)(IXMLDOMDocument *, VARIANT, BSTR, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void createNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(createNode$LAYOUT, createNode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static class nodeFromID {

        nodeFromID() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(nodeFromID.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(nodeFromID.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout nodeFromID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("nodeFromID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout nodeFromID$layout() {
        return nodeFromID$LAYOUT;
    }

    private static final long nodeFromID$OFFSET = 456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static final long nodeFromID$offset() {
        return nodeFromID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment nodeFromID(MemorySegment struct) {
        return struct.get(nodeFromID$LAYOUT, nodeFromID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*nodeFromID)(IXMLDOMDocument *, BSTR, IXMLDOMNode **) __attribute__((stdcall))
     * }
     */
    public static void nodeFromID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(nodeFromID$LAYOUT, nodeFromID$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class load {

        load() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout(),
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(load.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(load.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout load$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("load"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout load$layout() {
        return load$LAYOUT;
    }

    private static final long load$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long load$offset() {
        return load$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment load(MemorySegment struct) {
        return struct.get(load$LAYOUT, load$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*load)(IXMLDOMDocument *, VARIANT, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void load(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(load$LAYOUT, load$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall))
     * }
     */
    public static class get_readyState {

        get_readyState() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_readyState.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_readyState.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_readyState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_readyState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_readyState$layout() {
        return get_readyState$LAYOUT;
    }

    private static final long get_readyState$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall))
     * }
     */
    public static final long get_readyState$offset() {
        return get_readyState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_readyState(MemorySegment struct) {
        return struct.get(get_readyState$LAYOUT, get_readyState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_readyState)(IXMLDOMDocument *, long *) __attribute__((stdcall))
     * }
     */
    public static void get_readyState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_readyState$LAYOUT, get_readyState$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall))
     * }
     */
    public static class get_parseError {

        get_parseError() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_parseError.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_parseError.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_parseError$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_parseError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_parseError$layout() {
        return get_parseError$LAYOUT;
    }

    private static final long get_parseError$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall))
     * }
     */
    public static final long get_parseError$offset() {
        return get_parseError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_parseError(MemorySegment struct) {
        return struct.get(get_parseError$LAYOUT, get_parseError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_parseError)(IXMLDOMDocument *, IXMLDOMParseError **) __attribute__((stdcall))
     * }
     */
    public static void get_parseError(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_parseError$LAYOUT, get_parseError$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static class get_url {

        get_url() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_url.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_url.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_url$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_url"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_url$layout() {
        return get_url$LAYOUT;
    }

    private static final long get_url$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static final long get_url$offset() {
        return get_url$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_url(MemorySegment struct) {
        return struct.get(get_url$LAYOUT, get_url$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_url)(IXMLDOMDocument *, BSTR *) __attribute__((stdcall))
     * }
     */
    public static void get_url(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_url$LAYOUT, get_url$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_async {

        get_async() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_async$layout() {
        return get_async$LAYOUT;
    }

    private static final long get_async$OFFSET = 496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_async$offset() {
        return get_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_async(MemorySegment struct) {
        return struct.get(get_async$LAYOUT, get_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_async)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_async$LAYOUT, get_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static class put_async {

        put_async() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_async.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_async.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_async$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_async$layout() {
        return put_async$LAYOUT;
    }

    private static final long put_async$OFFSET = 504;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final long put_async$offset() {
        return put_async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_async(MemorySegment struct) {
        return struct.get(put_async$LAYOUT, put_async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_async)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static void put_async(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_async$LAYOUT, put_async$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static class abort {

        abort() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(abort.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(abort.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout abort$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("abort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout abort$layout() {
        return abort$LAYOUT;
    }

    private static final long abort$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static final long abort$offset() {
        return abort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment abort(MemorySegment struct) {
        return struct.get(abort$LAYOUT, abort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*abort)(IXMLDOMDocument *) __attribute__((stdcall))
     * }
     */
    public static void abort(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(abort$LAYOUT, abort$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class loadXML {

        loadXML() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(loadXML.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(loadXML.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout loadXML$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("loadXML"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout loadXML$layout() {
        return loadXML$LAYOUT;
    }

    private static final long loadXML$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long loadXML$offset() {
        return loadXML$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment loadXML(MemorySegment struct) {
        return struct.get(loadXML$LAYOUT, loadXML$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*loadXML)(IXMLDOMDocument *, BSTR, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void loadXML(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(loadXML$LAYOUT, loadXML$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class save {

        save() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(save.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(save.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout save$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("save"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout save$layout() {
        return save$LAYOUT;
    }

    private static final long save$OFFSET = 528;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long save$offset() {
        return save$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment save(MemorySegment struct) {
        return struct.get(save$LAYOUT, save$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*save)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void save(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(save$LAYOUT, save$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_validateOnParse {

        get_validateOnParse() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_validateOnParse.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_validateOnParse.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_validateOnParse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_validateOnParse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_validateOnParse$layout() {
        return get_validateOnParse$LAYOUT;
    }

    private static final long get_validateOnParse$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_validateOnParse$offset() {
        return get_validateOnParse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_validateOnParse(MemorySegment struct) {
        return struct.get(get_validateOnParse$LAYOUT, get_validateOnParse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_validateOnParse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_validateOnParse$LAYOUT, get_validateOnParse$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static class put_validateOnParse {

        put_validateOnParse() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_validateOnParse.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_validateOnParse.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_validateOnParse$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_validateOnParse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_validateOnParse$layout() {
        return put_validateOnParse$LAYOUT;
    }

    private static final long put_validateOnParse$OFFSET = 544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final long put_validateOnParse$offset() {
        return put_validateOnParse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_validateOnParse(MemorySegment struct) {
        return struct.get(put_validateOnParse$LAYOUT, put_validateOnParse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_validateOnParse)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static void put_validateOnParse(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_validateOnParse$LAYOUT, put_validateOnParse$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_resolveExternals {

        get_resolveExternals() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_resolveExternals.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_resolveExternals.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_resolveExternals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_resolveExternals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_resolveExternals$layout() {
        return get_resolveExternals$LAYOUT;
    }

    private static final long get_resolveExternals$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_resolveExternals$offset() {
        return get_resolveExternals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_resolveExternals(MemorySegment struct) {
        return struct.get(get_resolveExternals$LAYOUT, get_resolveExternals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_resolveExternals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_resolveExternals$LAYOUT, get_resolveExternals$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static class put_resolveExternals {

        put_resolveExternals() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_resolveExternals.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_resolveExternals.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_resolveExternals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_resolveExternals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_resolveExternals$layout() {
        return put_resolveExternals$LAYOUT;
    }

    private static final long put_resolveExternals$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final long put_resolveExternals$offset() {
        return put_resolveExternals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_resolveExternals(MemorySegment struct) {
        return struct.get(put_resolveExternals$LAYOUT, put_resolveExternals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_resolveExternals)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static void put_resolveExternals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_resolveExternals$LAYOUT, put_resolveExternals$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static class get_preserveWhiteSpace {

        get_preserveWhiteSpace() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(get_preserveWhiteSpace.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_preserveWhiteSpace.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_preserveWhiteSpace$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_preserveWhiteSpace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout get_preserveWhiteSpace$layout() {
        return get_preserveWhiteSpace$LAYOUT;
    }

    private static final long get_preserveWhiteSpace$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static final long get_preserveWhiteSpace$offset() {
        return get_preserveWhiteSpace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment get_preserveWhiteSpace(MemorySegment struct) {
        return struct.get(get_preserveWhiteSpace$LAYOUT, get_preserveWhiteSpace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*get_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL *) __attribute__((stdcall))
     * }
     */
    public static void get_preserveWhiteSpace(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_preserveWhiteSpace$LAYOUT, get_preserveWhiteSpace$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static class put_preserveWhiteSpace {

        put_preserveWhiteSpace() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, short _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_SHORT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_preserveWhiteSpace.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_preserveWhiteSpace.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, short _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_preserveWhiteSpace$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_preserveWhiteSpace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_preserveWhiteSpace$layout() {
        return put_preserveWhiteSpace$LAYOUT;
    }

    private static final long put_preserveWhiteSpace$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static final long put_preserveWhiteSpace$offset() {
        return put_preserveWhiteSpace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_preserveWhiteSpace(MemorySegment struct) {
        return struct.get(put_preserveWhiteSpace$LAYOUT, put_preserveWhiteSpace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_preserveWhiteSpace)(IXMLDOMDocument *, VARIANT_BOOL) __attribute__((stdcall))
     * }
     */
    public static void put_preserveWhiteSpace(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_preserveWhiteSpace$LAYOUT, put_preserveWhiteSpace$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class put_onreadystatechange {

        put_onreadystatechange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_onreadystatechange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_onreadystatechange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_onreadystatechange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_onreadystatechange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_onreadystatechange$layout() {
        return put_onreadystatechange$LAYOUT;
    }

    private static final long put_onreadystatechange$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long put_onreadystatechange$offset() {
        return put_onreadystatechange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_onreadystatechange(MemorySegment struct) {
        return struct.get(put_onreadystatechange$LAYOUT, put_onreadystatechange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_onreadystatechange)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void put_onreadystatechange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_onreadystatechange$LAYOUT, put_onreadystatechange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class put_ondataavailable {

        put_ondataavailable() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_ondataavailable.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_ondataavailable.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_ondataavailable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_ondataavailable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_ondataavailable$layout() {
        return put_ondataavailable$LAYOUT;
    }

    private static final long put_ondataavailable$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long put_ondataavailable$offset() {
        return put_ondataavailable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_ondataavailable(MemorySegment struct) {
        return struct.get(put_ondataavailable$LAYOUT, put_ondataavailable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_ondataavailable)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void put_ondataavailable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_ondataavailable$LAYOUT, put_ondataavailable$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static class put_ontransformnode {

        put_ontransformnode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            tagVARIANT.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(put_ontransformnode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(put_ontransformnode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout put_ontransformnode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("put_ontransformnode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout put_ontransformnode$layout() {
        return put_ontransformnode$LAYOUT;
    }

    private static final long put_ontransformnode$OFFSET = 600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static final long put_ontransformnode$offset() {
        return put_ontransformnode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static MemorySegment put_ontransformnode(MemorySegment struct) {
        return struct.get(put_ontransformnode$LAYOUT, put_ontransformnode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*put_ontransformnode)(IXMLDOMDocument *, VARIANT) __attribute__((stdcall))
     * }
     */
    public static void put_ontransformnode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(put_ontransformnode$LAYOUT, put_ontransformnode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

