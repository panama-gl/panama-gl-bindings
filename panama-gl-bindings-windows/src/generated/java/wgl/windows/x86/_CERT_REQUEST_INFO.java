// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _CERT_REQUEST_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("cbData"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("pbData")
        ).withName("Subject"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("pszObjId"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("cbData"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("pbData")
                ).withName("Parameters")
            ).withName("Algorithm"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("cbData"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("pbData"),
                Constants$root.C_LONG$LAYOUT.withName("cUnusedBits"),
                MemoryLayout.paddingLayout(32)
            ).withName("PublicKey")
        ).withName("SubjectPublicKeyInfo"),
        Constants$root.C_LONG$LAYOUT.withName("cAttribute"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rgAttribute")
    ).withName("_CERT_REQUEST_INFO");
    public static MemoryLayout $LAYOUT() {
        return _CERT_REQUEST_INFO.$struct$LAYOUT;
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _CERT_REQUEST_INFO.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_CERT_REQUEST_INFO.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        _CERT_REQUEST_INFO.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_CERT_REQUEST_INFO.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _CERT_REQUEST_INFO.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Subject$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static MemorySegment SubjectPublicKeyInfo$slice(MemorySegment seg) {
        return seg.asSlice(24, 48);
    }
    static final VarHandle cAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cAttribute"));
    public static VarHandle cAttribute$VH() {
        return _CERT_REQUEST_INFO.cAttribute$VH;
    }
    public static int cAttribute$get(MemorySegment seg) {
        return (int)_CERT_REQUEST_INFO.cAttribute$VH.get(seg);
    }
    public static void cAttribute$set( MemorySegment seg, int x) {
        _CERT_REQUEST_INFO.cAttribute$VH.set(seg, x);
    }
    public static int cAttribute$get(MemorySegment seg, long index) {
        return (int)_CERT_REQUEST_INFO.cAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cAttribute$set(MemorySegment seg, long index, int x) {
        _CERT_REQUEST_INFO.cAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgAttribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgAttribute"));
    public static VarHandle rgAttribute$VH() {
        return _CERT_REQUEST_INFO.rgAttribute$VH;
    }
    public static MemoryAddress rgAttribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_CERT_REQUEST_INFO.rgAttribute$VH.get(seg);
    }
    public static void rgAttribute$set( MemorySegment seg, MemoryAddress x) {
        _CERT_REQUEST_INFO.rgAttribute$VH.set(seg, x);
    }
    public static MemoryAddress rgAttribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_CERT_REQUEST_INFO.rgAttribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgAttribute$set(MemorySegment seg, long index, MemoryAddress x) {
        _CERT_REQUEST_INFO.rgAttribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


