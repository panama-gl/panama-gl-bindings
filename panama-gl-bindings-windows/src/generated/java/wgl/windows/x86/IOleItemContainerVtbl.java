// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct IOleItemContainerVtbl {
 *     HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall));
 *     ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall));
 *     HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall));
 *     HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall));
 *     HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall));
 *     HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall));
 *     HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall));
 *     HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall));
 * }
 * }
 */
public class IOleItemContainerVtbl {

    IOleItemContainerVtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("ParseDisplayName"),
        wgl_h.C_POINTER.withName("EnumObjects"),
        wgl_h.C_POINTER.withName("LockContainer"),
        wgl_h.C_POINTER.withName("GetObjectA"),
        wgl_h.C_POINTER.withName("GetObjectStorage"),
        wgl_h.C_POINTER.withName("IsRunning")
    ).withName("IOleItemContainerVtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(IOleItemContainer *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(IOleItemContainer *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static class ParseDisplayName {

        ParseDisplayName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(ParseDisplayName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ParseDisplayName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ParseDisplayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParseDisplayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout ParseDisplayName$layout() {
        return ParseDisplayName$LAYOUT;
    }

    private static final long ParseDisplayName$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static final long ParseDisplayName$offset() {
        return ParseDisplayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment ParseDisplayName(MemorySegment struct) {
        return struct.get(ParseDisplayName$LAYOUT, ParseDisplayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*ParseDisplayName)(IOleItemContainer *, IBindCtx *, LPOLESTR, ULONG *, IMoniker **) __attribute__((stdcall))
     * }
     */
    public static void ParseDisplayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParseDisplayName$LAYOUT, ParseDisplayName$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall))
     * }
     */
    public static class EnumObjects {

        EnumObjects() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(EnumObjects.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(EnumObjects.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout EnumObjects$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnumObjects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout EnumObjects$layout() {
        return EnumObjects$LAYOUT;
    }

    private static final long EnumObjects$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall))
     * }
     */
    public static final long EnumObjects$offset() {
        return EnumObjects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment EnumObjects(MemorySegment struct) {
        return struct.get(EnumObjects$LAYOUT, EnumObjects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*EnumObjects)(IOleItemContainer *, DWORD, IEnumUnknown **) __attribute__((stdcall))
     * }
     */
    public static void EnumObjects(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnumObjects$LAYOUT, EnumObjects$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall))
     * }
     */
    public static class LockContainer {

        LockContainer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(LockContainer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(LockContainer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout LockContainer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LockContainer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout LockContainer$layout() {
        return LockContainer$LAYOUT;
    }

    private static final long LockContainer$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall))
     * }
     */
    public static final long LockContainer$offset() {
        return LockContainer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall))
     * }
     */
    public static MemorySegment LockContainer(MemorySegment struct) {
        return struct.get(LockContainer$LAYOUT, LockContainer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*LockContainer)(IOleItemContainer *, BOOL) __attribute__((stdcall))
     * }
     */
    public static void LockContainer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LockContainer$LAYOUT, LockContainer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class GetObjectA {

        GetObjectA() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetObjectA.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetObjectA.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3, MemorySegment _x4, MemorySegment _x5) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetObjectA$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetObjectA"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetObjectA$layout() {
        return GetObjectA$LAYOUT;
    }

    private static final long GetObjectA$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long GetObjectA$offset() {
        return GetObjectA$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetObjectA(MemorySegment struct) {
        return struct.get(GetObjectA$LAYOUT, GetObjectA$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectA)(IOleItemContainer *, LPOLESTR, DWORD, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void GetObjectA(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetObjectA$LAYOUT, GetObjectA$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class GetObjectStorage {

        GetObjectStorage() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(GetObjectStorage.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetObjectStorage.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetObjectStorage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetObjectStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout GetObjectStorage$layout() {
        return GetObjectStorage$LAYOUT;
    }

    private static final long GetObjectStorage$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long GetObjectStorage$offset() {
        return GetObjectStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment GetObjectStorage(MemorySegment struct) {
        return struct.get(GetObjectStorage$LAYOUT, GetObjectStorage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*GetObjectStorage)(IOleItemContainer *, LPOLESTR, IBindCtx *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void GetObjectStorage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetObjectStorage$LAYOUT, GetObjectStorage$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static class IsRunning {

        IsRunning() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(IsRunning.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(IsRunning.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout IsRunning$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IsRunning"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout IsRunning$layout() {
        return IsRunning$LAYOUT;
    }

    private static final long IsRunning$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static final long IsRunning$offset() {
        return IsRunning$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static MemorySegment IsRunning(MemorySegment struct) {
        return struct.get(IsRunning$LAYOUT, IsRunning$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*IsRunning)(IOleItemContainer *, LPOLESTR) __attribute__((stdcall))
     * }
     */
    public static void IsRunning(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IsRunning$LAYOUT, IsRunning$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

