// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _RPC_ASYNC_STATE {
 *     unsigned int Size;
 *     unsigned long Signature;
 *     long Lock;
 *     unsigned long Flags;
 *     void *StubInfo;
 *     void *UserInfo;
 *     void *RuntimeInfo;
 *     RPC_ASYNC_EVENT Event;
 *     RPC_NOTIFICATION_TYPES NotificationType;
 *     RPC_ASYNC_NOTIFICATION_INFO u;
 *     LONG_PTR Reserved[4];
 * }
 * }
 */
public class _RPC_ASYNC_STATE {

    _RPC_ASYNC_STATE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("Size"),
        wgl_h.C_LONG.withName("Signature"),
        wgl_h.C_LONG.withName("Lock"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_POINTER.withName("StubInfo"),
        wgl_h.C_POINTER.withName("UserInfo"),
        wgl_h.C_POINTER.withName("RuntimeInfo"),
        wgl_h.C_INT.withName("Event"),
        wgl_h.C_INT.withName("NotificationType"),
        _RPC_ASYNC_NOTIFICATION_INFO.layout().withName("u"),
        MemoryLayout.sequenceLayout(4, wgl_h.C_LONG_LONG).withName("Reserved")
    ).withName("_RPC_ASYNC_STATE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Signature$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Signature
     * }
     */
    public static final OfInt Signature$layout() {
        return Signature$LAYOUT;
    }

    private static final long Signature$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Signature
     * }
     */
    public static final long Signature$offset() {
        return Signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Signature
     * }
     */
    public static int Signature(MemorySegment struct) {
        return struct.get(Signature$LAYOUT, Signature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Signature
     * }
     */
    public static void Signature(MemorySegment struct, int fieldValue) {
        struct.set(Signature$LAYOUT, Signature$OFFSET, fieldValue);
    }

    private static final OfInt Lock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Lock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * long Lock
     * }
     */
    public static final OfInt Lock$layout() {
        return Lock$LAYOUT;
    }

    private static final long Lock$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * long Lock
     * }
     */
    public static final long Lock$offset() {
        return Lock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * long Lock
     * }
     */
    public static int Lock(MemorySegment struct) {
        return struct.get(Lock$LAYOUT, Lock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * long Lock
     * }
     */
    public static void Lock(MemorySegment struct, int fieldValue) {
        struct.set(Lock$LAYOUT, Lock$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final AddressLayout StubInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("StubInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *StubInfo
     * }
     */
    public static final AddressLayout StubInfo$layout() {
        return StubInfo$LAYOUT;
    }

    private static final long StubInfo$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *StubInfo
     * }
     */
    public static final long StubInfo$offset() {
        return StubInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *StubInfo
     * }
     */
    public static MemorySegment StubInfo(MemorySegment struct) {
        return struct.get(StubInfo$LAYOUT, StubInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *StubInfo
     * }
     */
    public static void StubInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(StubInfo$LAYOUT, StubInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout UserInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *UserInfo
     * }
     */
    public static final AddressLayout UserInfo$layout() {
        return UserInfo$LAYOUT;
    }

    private static final long UserInfo$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *UserInfo
     * }
     */
    public static final long UserInfo$offset() {
        return UserInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *UserInfo
     * }
     */
    public static MemorySegment UserInfo(MemorySegment struct) {
        return struct.get(UserInfo$LAYOUT, UserInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *UserInfo
     * }
     */
    public static void UserInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserInfo$LAYOUT, UserInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout RuntimeInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RuntimeInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *RuntimeInfo
     * }
     */
    public static final AddressLayout RuntimeInfo$layout() {
        return RuntimeInfo$LAYOUT;
    }

    private static final long RuntimeInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *RuntimeInfo
     * }
     */
    public static final long RuntimeInfo$offset() {
        return RuntimeInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *RuntimeInfo
     * }
     */
    public static MemorySegment RuntimeInfo(MemorySegment struct) {
        return struct.get(RuntimeInfo$LAYOUT, RuntimeInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *RuntimeInfo
     * }
     */
    public static void RuntimeInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RuntimeInfo$LAYOUT, RuntimeInfo$OFFSET, fieldValue);
    }

    private static final OfInt Event$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_ASYNC_EVENT Event
     * }
     */
    public static final OfInt Event$layout() {
        return Event$LAYOUT;
    }

    private static final long Event$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_ASYNC_EVENT Event
     * }
     */
    public static final long Event$offset() {
        return Event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_ASYNC_EVENT Event
     * }
     */
    public static int Event(MemorySegment struct) {
        return struct.get(Event$LAYOUT, Event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_ASYNC_EVENT Event
     * }
     */
    public static void Event(MemorySegment struct, int fieldValue) {
        struct.set(Event$LAYOUT, Event$OFFSET, fieldValue);
    }

    private static final OfInt NotificationType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NotificationType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_NOTIFICATION_TYPES NotificationType
     * }
     */
    public static final OfInt NotificationType$layout() {
        return NotificationType$LAYOUT;
    }

    private static final long NotificationType$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_NOTIFICATION_TYPES NotificationType
     * }
     */
    public static final long NotificationType$offset() {
        return NotificationType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_NOTIFICATION_TYPES NotificationType
     * }
     */
    public static int NotificationType(MemorySegment struct) {
        return struct.get(NotificationType$LAYOUT, NotificationType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_NOTIFICATION_TYPES NotificationType
     * }
     */
    public static void NotificationType(MemorySegment struct, int fieldValue) {
        struct.set(NotificationType$LAYOUT, NotificationType$OFFSET, fieldValue);
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_ASYNC_NOTIFICATION_INFO u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_ASYNC_NOTIFICATION_INFO u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_ASYNC_NOTIFICATION_INFO u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_ASYNC_NOTIFICATION_INFO u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final VarHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static long Reserved(MemorySegment struct, long index0) {
        return (long)Reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * LONG_PTR Reserved[4]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, long fieldValue) {
        Reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

