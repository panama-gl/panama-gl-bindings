// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _userFLAG_STGMEDIUM {
 *     LONG ContextFlags;
 *     LONG fPassOwnership;
 *     userSTGMEDIUM Stgmed;
 * }
 * }
 */
public class _userFLAG_STGMEDIUM {

    _userFLAG_STGMEDIUM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("ContextFlags"),
        wgl_h.C_LONG.withName("fPassOwnership"),
        _userSTGMEDIUM.layout().withName("Stgmed")
    ).withName("_userFLAG_STGMEDIUM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ContextFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ContextFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG ContextFlags
     * }
     */
    public static final OfInt ContextFlags$layout() {
        return ContextFlags$LAYOUT;
    }

    private static final long ContextFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG ContextFlags
     * }
     */
    public static final long ContextFlags$offset() {
        return ContextFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG ContextFlags
     * }
     */
    public static int ContextFlags(MemorySegment struct) {
        return struct.get(ContextFlags$LAYOUT, ContextFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG ContextFlags
     * }
     */
    public static void ContextFlags(MemorySegment struct, int fieldValue) {
        struct.set(ContextFlags$LAYOUT, ContextFlags$OFFSET, fieldValue);
    }

    private static final OfInt fPassOwnership$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fPassOwnership"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG fPassOwnership
     * }
     */
    public static final OfInt fPassOwnership$layout() {
        return fPassOwnership$LAYOUT;
    }

    private static final long fPassOwnership$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG fPassOwnership
     * }
     */
    public static final long fPassOwnership$offset() {
        return fPassOwnership$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG fPassOwnership
     * }
     */
    public static int fPassOwnership(MemorySegment struct) {
        return struct.get(fPassOwnership$LAYOUT, fPassOwnership$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG fPassOwnership
     * }
     */
    public static void fPassOwnership(MemorySegment struct, int fieldValue) {
        struct.set(fPassOwnership$LAYOUT, fPassOwnership$OFFSET, fieldValue);
    }

    private static final GroupLayout Stgmed$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Stgmed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * userSTGMEDIUM Stgmed
     * }
     */
    public static final GroupLayout Stgmed$layout() {
        return Stgmed$LAYOUT;
    }

    private static final long Stgmed$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * userSTGMEDIUM Stgmed
     * }
     */
    public static final long Stgmed$offset() {
        return Stgmed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * userSTGMEDIUM Stgmed
     * }
     */
    public static MemorySegment Stgmed(MemorySegment struct) {
        return struct.asSlice(Stgmed$OFFSET, Stgmed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * userSTGMEDIUM Stgmed
     * }
     */
    public static void Stgmed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Stgmed$OFFSET, Stgmed$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

