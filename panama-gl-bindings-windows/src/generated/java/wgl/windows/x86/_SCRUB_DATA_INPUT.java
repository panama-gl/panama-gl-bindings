// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SCRUB_DATA_INPUT {
 *     DWORD Size;
 *     DWORD Flags;
 *     DWORD MaximumIos;
 *     DWORD ObjectId[4];
 *     DWORD Reserved[25];
 *     BYTE ResumeContext[816];
 * }
 * }
 */
public class _SCRUB_DATA_INPUT {

    _SCRUB_DATA_INPUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("Size"),
        wgl_h.C_LONG.withName("Flags"),
        wgl_h.C_LONG.withName("MaximumIos"),
        MemoryLayout.sequenceLayout(4, wgl_h.C_LONG).withName("ObjectId"),
        MemoryLayout.sequenceLayout(25, wgl_h.C_LONG).withName("Reserved"),
        MemoryLayout.sequenceLayout(816, wgl_h.C_CHAR).withName("ResumeContext")
    ).withName("_SCRUB_DATA_INPUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt MaximumIos$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaximumIos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MaximumIos
     * }
     */
    public static final OfInt MaximumIos$layout() {
        return MaximumIos$LAYOUT;
    }

    private static final long MaximumIos$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MaximumIos
     * }
     */
    public static final long MaximumIos$offset() {
        return MaximumIos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MaximumIos
     * }
     */
    public static int MaximumIos(MemorySegment struct) {
        return struct.get(MaximumIos$LAYOUT, MaximumIos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MaximumIos
     * }
     */
    public static void MaximumIos(MemorySegment struct, int fieldValue) {
        struct.set(MaximumIos$LAYOUT, MaximumIos$OFFSET, fieldValue);
    }

    private static final SequenceLayout ObjectId$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ObjectId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static final SequenceLayout ObjectId$layout() {
        return ObjectId$LAYOUT;
    }

    private static final long ObjectId$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static final long ObjectId$offset() {
        return ObjectId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static MemorySegment ObjectId(MemorySegment struct) {
        return struct.asSlice(ObjectId$OFFSET, ObjectId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static void ObjectId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ObjectId$OFFSET, ObjectId$LAYOUT.byteSize());
    }

    private static long[] ObjectId$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static long[] ObjectId$dimensions() {
        return ObjectId$DIMS;
    }
    private static final VarHandle ObjectId$ELEM_HANDLE = ObjectId$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static int ObjectId(MemorySegment struct, long index0) {
        return (int)ObjectId$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD ObjectId[4]
     * }
     */
    public static void ObjectId(MemorySegment struct, long index0, int fieldValue) {
        ObjectId$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 25 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final VarHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static int Reserved(MemorySegment struct, long index0) {
        return (int)Reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD Reserved[25]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, int fieldValue) {
        Reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ResumeContext$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ResumeContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static final SequenceLayout ResumeContext$layout() {
        return ResumeContext$LAYOUT;
    }

    private static final long ResumeContext$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static final long ResumeContext$offset() {
        return ResumeContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static MemorySegment ResumeContext(MemorySegment struct) {
        return struct.asSlice(ResumeContext$OFFSET, ResumeContext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static void ResumeContext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ResumeContext$OFFSET, ResumeContext$LAYOUT.byteSize());
    }

    private static long[] ResumeContext$DIMS = { 816 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static long[] ResumeContext$dimensions() {
        return ResumeContext$DIMS;
    }
    private static final VarHandle ResumeContext$ELEM_HANDLE = ResumeContext$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static byte ResumeContext(MemorySegment struct, long index0) {
        return (byte)ResumeContext$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE ResumeContext[816]
     * }
     */
    public static void ResumeContext(MemorySegment struct, long index0, byte fieldValue) {
        ResumeContext$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

