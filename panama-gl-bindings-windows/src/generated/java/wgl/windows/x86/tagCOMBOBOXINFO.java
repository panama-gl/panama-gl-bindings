// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagCOMBOBOXINFO {
 *     DWORD cbSize;
 *     RECT rcItem;
 *     RECT rcButton;
 *     DWORD stateButton;
 *     HWND hwndCombo;
 *     HWND hwndItem;
 *     HWND hwndList;
 * }
 * }
 */
public class tagCOMBOBOXINFO {

    tagCOMBOBOXINFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_LONG.withName("cbSize"),
        tagRECT.layout().withName("rcItem"),
        tagRECT.layout().withName("rcButton"),
        wgl_h.C_LONG.withName("stateButton"),
        wgl_h.C_POINTER.withName("hwndCombo"),
        wgl_h.C_POINTER.withName("hwndItem"),
        wgl_h.C_POINTER.withName("hwndList")
    ).withName("tagCOMBOBOXINFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final GroupLayout rcItem$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcItem
     * }
     */
    public static final GroupLayout rcItem$layout() {
        return rcItem$LAYOUT;
    }

    private static final long rcItem$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcItem
     * }
     */
    public static final long rcItem$offset() {
        return rcItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcItem
     * }
     */
    public static MemorySegment rcItem(MemorySegment struct) {
        return struct.asSlice(rcItem$OFFSET, rcItem$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcItem
     * }
     */
    public static void rcItem(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcItem$OFFSET, rcItem$LAYOUT.byteSize());
    }

    private static final GroupLayout rcButton$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rcButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RECT rcButton
     * }
     */
    public static final GroupLayout rcButton$layout() {
        return rcButton$LAYOUT;
    }

    private static final long rcButton$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RECT rcButton
     * }
     */
    public static final long rcButton$offset() {
        return rcButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RECT rcButton
     * }
     */
    public static MemorySegment rcButton(MemorySegment struct) {
        return struct.asSlice(rcButton$OFFSET, rcButton$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RECT rcButton
     * }
     */
    public static void rcButton(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rcButton$OFFSET, rcButton$LAYOUT.byteSize());
    }

    private static final OfInt stateButton$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stateButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD stateButton
     * }
     */
    public static final OfInt stateButton$layout() {
        return stateButton$LAYOUT;
    }

    private static final long stateButton$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD stateButton
     * }
     */
    public static final long stateButton$offset() {
        return stateButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD stateButton
     * }
     */
    public static int stateButton(MemorySegment struct) {
        return struct.get(stateButton$LAYOUT, stateButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD stateButton
     * }
     */
    public static void stateButton(MemorySegment struct, int fieldValue) {
        struct.set(stateButton$LAYOUT, stateButton$OFFSET, fieldValue);
    }

    private static final AddressLayout hwndCombo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwndCombo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwndCombo
     * }
     */
    public static final AddressLayout hwndCombo$layout() {
        return hwndCombo$LAYOUT;
    }

    private static final long hwndCombo$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwndCombo
     * }
     */
    public static final long hwndCombo$offset() {
        return hwndCombo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwndCombo
     * }
     */
    public static MemorySegment hwndCombo(MemorySegment struct) {
        return struct.get(hwndCombo$LAYOUT, hwndCombo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwndCombo
     * }
     */
    public static void hwndCombo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwndCombo$LAYOUT, hwndCombo$OFFSET, fieldValue);
    }

    private static final AddressLayout hwndItem$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwndItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwndItem
     * }
     */
    public static final AddressLayout hwndItem$layout() {
        return hwndItem$LAYOUT;
    }

    private static final long hwndItem$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwndItem
     * }
     */
    public static final long hwndItem$offset() {
        return hwndItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwndItem
     * }
     */
    public static MemorySegment hwndItem(MemorySegment struct) {
        return struct.get(hwndItem$LAYOUT, hwndItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwndItem
     * }
     */
    public static void hwndItem(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwndItem$LAYOUT, hwndItem$OFFSET, fieldValue);
    }

    private static final AddressLayout hwndList$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("hwndList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HWND hwndList
     * }
     */
    public static final AddressLayout hwndList$layout() {
        return hwndList$LAYOUT;
    }

    private static final long hwndList$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HWND hwndList
     * }
     */
    public static final long hwndList$offset() {
        return hwndList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HWND hwndList
     * }
     */
    public static MemorySegment hwndList(MemorySegment struct) {
        return struct.get(hwndList$LAYOUT, hwndList$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HWND hwndList
     * }
     */
    public static void hwndList(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(hwndList$LAYOUT, hwndList$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

