// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagPDA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("lStructSize"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hwndOwner"),
        Constants$root.C_POINTER$LAYOUT.withName("hDevMode"),
        Constants$root.C_POINTER$LAYOUT.withName("hDevNames"),
        Constants$root.C_POINTER$LAYOUT.withName("hDC"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_SHORT$LAYOUT.withName("nFromPage"),
        Constants$root.C_SHORT$LAYOUT.withName("nToPage"),
        Constants$root.C_SHORT$LAYOUT.withName("nMinPage"),
        Constants$root.C_SHORT$LAYOUT.withName("nMaxPage"),
        Constants$root.C_SHORT$LAYOUT.withName("nCopies"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_POINTER$LAYOUT.withName("hInstance"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("lCustData"),
        Constants$root.C_POINTER$LAYOUT.withName("lpfnPrintHook"),
        Constants$root.C_POINTER$LAYOUT.withName("lpfnSetupHook"),
        Constants$root.C_POINTER$LAYOUT.withName("lpPrintTemplateName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpSetupTemplateName"),
        Constants$root.C_POINTER$LAYOUT.withName("hPrintTemplate"),
        Constants$root.C_POINTER$LAYOUT.withName("hSetupTemplate")
    ).withName("tagPDA");
    public static MemoryLayout $LAYOUT() {
        return tagPDA.$struct$LAYOUT;
    }
    static final VarHandle lStructSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lStructSize"));
    public static VarHandle lStructSize$VH() {
        return tagPDA.lStructSize$VH;
    }
    public static int lStructSize$get(MemorySegment seg) {
        return (int)tagPDA.lStructSize$VH.get(seg);
    }
    public static void lStructSize$set( MemorySegment seg, int x) {
        tagPDA.lStructSize$VH.set(seg, x);
    }
    public static int lStructSize$get(MemorySegment seg, long index) {
        return (int)tagPDA.lStructSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lStructSize$set(MemorySegment seg, long index, int x) {
        tagPDA.lStructSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndOwner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndOwner"));
    public static VarHandle hwndOwner$VH() {
        return tagPDA.hwndOwner$VH;
    }
    public static MemoryAddress hwndOwner$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hwndOwner$VH.get(seg);
    }
    public static void hwndOwner$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hwndOwner$VH.set(seg, x);
    }
    public static MemoryAddress hwndOwner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hwndOwner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndOwner$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hwndOwner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hDevMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDevMode"));
    public static VarHandle hDevMode$VH() {
        return tagPDA.hDevMode$VH;
    }
    public static MemoryAddress hDevMode$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDevMode$VH.get(seg);
    }
    public static void hDevMode$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hDevMode$VH.set(seg, x);
    }
    public static MemoryAddress hDevMode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDevMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevMode$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hDevMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hDevNames$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDevNames"));
    public static VarHandle hDevNames$VH() {
        return tagPDA.hDevNames$VH;
    }
    public static MemoryAddress hDevNames$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDevNames$VH.get(seg);
    }
    public static void hDevNames$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hDevNames$VH.set(seg, x);
    }
    public static MemoryAddress hDevNames$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDevNames$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hDevNames$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hDevNames$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hDC$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hDC"));
    public static VarHandle hDC$VH() {
        return tagPDA.hDC$VH;
    }
    public static MemoryAddress hDC$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDC$VH.get(seg);
    }
    public static void hDC$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hDC$VH.set(seg, x);
    }
    public static MemoryAddress hDC$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hDC$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hDC$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hDC$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return tagPDA.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)tagPDA.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        tagPDA.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)tagPDA.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        tagPDA.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFromPage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFromPage"));
    public static VarHandle nFromPage$VH() {
        return tagPDA.nFromPage$VH;
    }
    public static short nFromPage$get(MemorySegment seg) {
        return (short)tagPDA.nFromPage$VH.get(seg);
    }
    public static void nFromPage$set( MemorySegment seg, short x) {
        tagPDA.nFromPage$VH.set(seg, x);
    }
    public static short nFromPage$get(MemorySegment seg, long index) {
        return (short)tagPDA.nFromPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFromPage$set(MemorySegment seg, long index, short x) {
        tagPDA.nFromPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nToPage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nToPage"));
    public static VarHandle nToPage$VH() {
        return tagPDA.nToPage$VH;
    }
    public static short nToPage$get(MemorySegment seg) {
        return (short)tagPDA.nToPage$VH.get(seg);
    }
    public static void nToPage$set( MemorySegment seg, short x) {
        tagPDA.nToPage$VH.set(seg, x);
    }
    public static short nToPage$get(MemorySegment seg, long index) {
        return (short)tagPDA.nToPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nToPage$set(MemorySegment seg, long index, short x) {
        tagPDA.nToPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMinPage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMinPage"));
    public static VarHandle nMinPage$VH() {
        return tagPDA.nMinPage$VH;
    }
    public static short nMinPage$get(MemorySegment seg) {
        return (short)tagPDA.nMinPage$VH.get(seg);
    }
    public static void nMinPage$set( MemorySegment seg, short x) {
        tagPDA.nMinPage$VH.set(seg, x);
    }
    public static short nMinPage$get(MemorySegment seg, long index) {
        return (short)tagPDA.nMinPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMinPage$set(MemorySegment seg, long index, short x) {
        tagPDA.nMinPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nMaxPage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nMaxPage"));
    public static VarHandle nMaxPage$VH() {
        return tagPDA.nMaxPage$VH;
    }
    public static short nMaxPage$get(MemorySegment seg) {
        return (short)tagPDA.nMaxPage$VH.get(seg);
    }
    public static void nMaxPage$set( MemorySegment seg, short x) {
        tagPDA.nMaxPage$VH.set(seg, x);
    }
    public static short nMaxPage$get(MemorySegment seg, long index) {
        return (short)tagPDA.nMaxPage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nMaxPage$set(MemorySegment seg, long index, short x) {
        tagPDA.nMaxPage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nCopies$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nCopies"));
    public static VarHandle nCopies$VH() {
        return tagPDA.nCopies$VH;
    }
    public static short nCopies$get(MemorySegment seg) {
        return (short)tagPDA.nCopies$VH.get(seg);
    }
    public static void nCopies$set( MemorySegment seg, short x) {
        tagPDA.nCopies$VH.set(seg, x);
    }
    public static short nCopies$get(MemorySegment seg, long index) {
        return (short)tagPDA.nCopies$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nCopies$set(MemorySegment seg, long index, short x) {
        tagPDA.nCopies$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hInstance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hInstance"));
    public static VarHandle hInstance$VH() {
        return tagPDA.hInstance$VH;
    }
    public static MemoryAddress hInstance$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hInstance$VH.get(seg);
    }
    public static void hInstance$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hInstance$VH.set(seg, x);
    }
    public static MemoryAddress hInstance$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hInstance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hInstance$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hInstance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lCustData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lCustData"));
    public static VarHandle lCustData$VH() {
        return tagPDA.lCustData$VH;
    }
    public static long lCustData$get(MemorySegment seg) {
        return (long)tagPDA.lCustData$VH.get(seg);
    }
    public static void lCustData$set( MemorySegment seg, long x) {
        tagPDA.lCustData$VH.set(seg, x);
    }
    public static long lCustData$get(MemorySegment seg, long index) {
        return (long)tagPDA.lCustData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lCustData$set(MemorySegment seg, long index, long x) {
        tagPDA.lCustData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpfnPrintHook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfnPrintHook"));
    public static VarHandle lpfnPrintHook$VH() {
        return tagPDA.lpfnPrintHook$VH;
    }
    public static MemoryAddress lpfnPrintHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpfnPrintHook$VH.get(seg);
    }
    public static void lpfnPrintHook$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.lpfnPrintHook$VH.set(seg, x);
    }
    public static MemoryAddress lpfnPrintHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpfnPrintHook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnPrintHook$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.lpfnPrintHook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPPRINTHOOKPROC lpfnPrintHook (MemorySegment segment, MemorySession session) {
        return LPPRINTHOOKPROC.ofAddress(lpfnPrintHook$get(segment), session);
    }
    static final VarHandle lpfnSetupHook$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpfnSetupHook"));
    public static VarHandle lpfnSetupHook$VH() {
        return tagPDA.lpfnSetupHook$VH;
    }
    public static MemoryAddress lpfnSetupHook$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpfnSetupHook$VH.get(seg);
    }
    public static void lpfnSetupHook$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.lpfnSetupHook$VH.set(seg, x);
    }
    public static MemoryAddress lpfnSetupHook$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpfnSetupHook$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpfnSetupHook$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.lpfnSetupHook$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static LPSETUPHOOKPROC lpfnSetupHook (MemorySegment segment, MemorySession session) {
        return LPSETUPHOOKPROC.ofAddress(lpfnSetupHook$get(segment), session);
    }
    static final VarHandle lpPrintTemplateName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpPrintTemplateName"));
    public static VarHandle lpPrintTemplateName$VH() {
        return tagPDA.lpPrintTemplateName$VH;
    }
    public static MemoryAddress lpPrintTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpPrintTemplateName$VH.get(seg);
    }
    public static void lpPrintTemplateName$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.lpPrintTemplateName$VH.set(seg, x);
    }
    public static MemoryAddress lpPrintTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpPrintTemplateName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpPrintTemplateName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.lpPrintTemplateName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpSetupTemplateName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpSetupTemplateName"));
    public static VarHandle lpSetupTemplateName$VH() {
        return tagPDA.lpSetupTemplateName$VH;
    }
    public static MemoryAddress lpSetupTemplateName$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpSetupTemplateName$VH.get(seg);
    }
    public static void lpSetupTemplateName$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.lpSetupTemplateName$VH.set(seg, x);
    }
    public static MemoryAddress lpSetupTemplateName$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.lpSetupTemplateName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpSetupTemplateName$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.lpSetupTemplateName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hPrintTemplate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hPrintTemplate"));
    public static VarHandle hPrintTemplate$VH() {
        return tagPDA.hPrintTemplate$VH;
    }
    public static MemoryAddress hPrintTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hPrintTemplate$VH.get(seg);
    }
    public static void hPrintTemplate$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hPrintTemplate$VH.set(seg, x);
    }
    public static MemoryAddress hPrintTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hPrintTemplate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hPrintTemplate$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hPrintTemplate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hSetupTemplate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSetupTemplate"));
    public static VarHandle hSetupTemplate$VH() {
        return tagPDA.hSetupTemplate$VH;
    }
    public static MemoryAddress hSetupTemplate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hSetupTemplate$VH.get(seg);
    }
    public static void hSetupTemplate$set( MemorySegment seg, MemoryAddress x) {
        tagPDA.hSetupTemplate$VH.set(seg, x);
    }
    public static MemoryAddress hSetupTemplate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)tagPDA.hSetupTemplate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hSetupTemplate$set(MemorySegment seg, long index, MemoryAddress x) {
        tagPDA.hSetupTemplate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


