// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CORE_PRINTER_DRIVERA {
 *     GUID CoreDriverGUID;
 *     FILETIME ftDriverDate;
 *     DWORDLONG dwlDriverVersion;
 *     CHAR szPackageID[260];
 * }
 * }
 */
public class _CORE_PRINTER_DRIVERA {

    _CORE_PRINTER_DRIVERA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GUID.layout().withName("CoreDriverGUID"),
        _FILETIME.layout().withName("ftDriverDate"),
        wgl_h.C_LONG_LONG.withName("dwlDriverVersion"),
        MemoryLayout.sequenceLayout(260, wgl_h.C_CHAR).withName("szPackageID"),
        MemoryLayout.paddingLayout(4)
    ).withName("_CORE_PRINTER_DRIVERA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout CoreDriverGUID$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CoreDriverGUID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID CoreDriverGUID
     * }
     */
    public static final GroupLayout CoreDriverGUID$layout() {
        return CoreDriverGUID$LAYOUT;
    }

    private static final long CoreDriverGUID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID CoreDriverGUID
     * }
     */
    public static final long CoreDriverGUID$offset() {
        return CoreDriverGUID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID CoreDriverGUID
     * }
     */
    public static MemorySegment CoreDriverGUID(MemorySegment struct) {
        return struct.asSlice(CoreDriverGUID$OFFSET, CoreDriverGUID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID CoreDriverGUID
     * }
     */
    public static void CoreDriverGUID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CoreDriverGUID$OFFSET, CoreDriverGUID$LAYOUT.byteSize());
    }

    private static final GroupLayout ftDriverDate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ftDriverDate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILETIME ftDriverDate
     * }
     */
    public static final GroupLayout ftDriverDate$layout() {
        return ftDriverDate$LAYOUT;
    }

    private static final long ftDriverDate$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILETIME ftDriverDate
     * }
     */
    public static final long ftDriverDate$offset() {
        return ftDriverDate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILETIME ftDriverDate
     * }
     */
    public static MemorySegment ftDriverDate(MemorySegment struct) {
        return struct.asSlice(ftDriverDate$OFFSET, ftDriverDate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILETIME ftDriverDate
     * }
     */
    public static void ftDriverDate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ftDriverDate$OFFSET, ftDriverDate$LAYOUT.byteSize());
    }

    private static final OfLong dwlDriverVersion$LAYOUT = (OfLong)$LAYOUT.select(groupElement("dwlDriverVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORDLONG dwlDriverVersion
     * }
     */
    public static final OfLong dwlDriverVersion$layout() {
        return dwlDriverVersion$LAYOUT;
    }

    private static final long dwlDriverVersion$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORDLONG dwlDriverVersion
     * }
     */
    public static final long dwlDriverVersion$offset() {
        return dwlDriverVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORDLONG dwlDriverVersion
     * }
     */
    public static long dwlDriverVersion(MemorySegment struct) {
        return struct.get(dwlDriverVersion$LAYOUT, dwlDriverVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORDLONG dwlDriverVersion
     * }
     */
    public static void dwlDriverVersion(MemorySegment struct, long fieldValue) {
        struct.set(dwlDriverVersion$LAYOUT, dwlDriverVersion$OFFSET, fieldValue);
    }

    private static final SequenceLayout szPackageID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("szPackageID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static final SequenceLayout szPackageID$layout() {
        return szPackageID$LAYOUT;
    }

    private static final long szPackageID$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static final long szPackageID$offset() {
        return szPackageID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static MemorySegment szPackageID(MemorySegment struct) {
        return struct.asSlice(szPackageID$OFFSET, szPackageID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static void szPackageID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, szPackageID$OFFSET, szPackageID$LAYOUT.byteSize());
    }

    private static long[] szPackageID$DIMS = { 260 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static long[] szPackageID$dimensions() {
        return szPackageID$DIMS;
    }
    private static final VarHandle szPackageID$ELEM_HANDLE = szPackageID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static byte szPackageID(MemorySegment struct, long index0) {
        return (byte)szPackageID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * CHAR szPackageID[260]
     * }
     */
    public static void szPackageID(MemorySegment struct, long index0, byte fieldValue) {
        szPackageID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

