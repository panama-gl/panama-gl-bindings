// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _STREAM_INFORMATION_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Version"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Class"),
                Constants$root.C_LONG$LAYOUT.withName("Flags")
            ).withName("DesiredStorageClass"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("Vdl")
            ).withName("DataStream"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataSize"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataOffset")
            ).withName("Reparse"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("EaSize"),
                Constants$root.C_LONG$LAYOUT.withName("EaInformationOffset")
            ).withName("Ea")
        ).withName("StreamInformation")
    ).withName("_STREAM_INFORMATION_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _STREAM_INFORMATION_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Version"));
    public static VarHandle Version$VH() {
        return _STREAM_INFORMATION_ENTRY.Version$VH;
    }
    public static int Version$get(MemorySegment seg) {
        return (int)_STREAM_INFORMATION_ENTRY.Version$VH.get(seg);
    }
    public static void Version$set( MemorySegment seg, int x) {
        _STREAM_INFORMATION_ENTRY.Version$VH.set(seg, x);
    }
    public static int Version$get(MemorySegment seg, long index) {
        return (int)_STREAM_INFORMATION_ENTRY.Version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Version$set(MemorySegment seg, long index, int x) {
        _STREAM_INFORMATION_ENTRY.Version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _STREAM_INFORMATION_ENTRY.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_STREAM_INFORMATION_ENTRY.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _STREAM_INFORMATION_ENTRY.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_STREAM_INFORMATION_ENTRY.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _STREAM_INFORMATION_ENTRY.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class _StreamInformation {

        static final  GroupLayout _StreamInformation$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Class"),
                Constants$root.C_LONG$LAYOUT.withName("Flags")
            ).withName("DesiredStorageClass"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("Vdl")
            ).withName("DataStream"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataSize"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataOffset")
            ).withName("Reparse"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("EaSize"),
                Constants$root.C_LONG$LAYOUT.withName("EaInformationOffset")
            ).withName("Ea")
        ).withName("_StreamInformation");
        public static MemoryLayout $LAYOUT() {
            return _StreamInformation._StreamInformation$union$LAYOUT;
        }
        public static class _DesiredStorageClass {

            static final  GroupLayout _StreamInformation$_DesiredStorageClass$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("Class"),
                Constants$root.C_LONG$LAYOUT.withName("Flags")
            ).withName("_DesiredStorageClass");
            public static MemoryLayout $LAYOUT() {
                return _DesiredStorageClass._StreamInformation$_DesiredStorageClass$struct$LAYOUT;
            }
            static final VarHandle Class$VH = _StreamInformation$_DesiredStorageClass$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Class"));
            public static VarHandle Class$VH() {
                return _DesiredStorageClass.Class$VH;
            }
            public static int Class$get(MemorySegment seg) {
                return (int)_DesiredStorageClass.Class$VH.get(seg);
            }
            public static void Class$set( MemorySegment seg, int x) {
                _DesiredStorageClass.Class$VH.set(seg, x);
            }
            public static int Class$get(MemorySegment seg, long index) {
                return (int)_DesiredStorageClass.Class$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Class$set(MemorySegment seg, long index, int x) {
                _DesiredStorageClass.Class$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags$VH = _StreamInformation$_DesiredStorageClass$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
            public static VarHandle Flags$VH() {
                return _DesiredStorageClass.Flags$VH;
            }
            public static int Flags$get(MemorySegment seg) {
                return (int)_DesiredStorageClass.Flags$VH.get(seg);
            }
            public static void Flags$set( MemorySegment seg, int x) {
                _DesiredStorageClass.Flags$VH.set(seg, x);
            }
            public static int Flags$get(MemorySegment seg, long index) {
                return (int)_DesiredStorageClass.Flags$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, int x) {
                _DesiredStorageClass.Flags$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment DesiredStorageClass$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static class _DataStream {

            static final  GroupLayout _StreamInformation$_DataStream$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("Reserved"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("Vdl")
            ).withName("_DataStream");
            public static MemoryLayout $LAYOUT() {
                return _DataStream._StreamInformation$_DataStream$struct$LAYOUT;
            }
            static final VarHandle Length$VH = _StreamInformation$_DataStream$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
            public static VarHandle Length$VH() {
                return _DataStream.Length$VH;
            }
            public static short Length$get(MemorySegment seg) {
                return (short)_DataStream.Length$VH.get(seg);
            }
            public static void Length$set( MemorySegment seg, short x) {
                _DataStream.Length$VH.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)_DataStream.Length$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                _DataStream.Length$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags$VH = _StreamInformation$_DataStream$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
            public static VarHandle Flags$VH() {
                return _DataStream.Flags$VH;
            }
            public static short Flags$get(MemorySegment seg) {
                return (short)_DataStream.Flags$VH.get(seg);
            }
            public static void Flags$set( MemorySegment seg, short x) {
                _DataStream.Flags$VH.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)_DataStream.Flags$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                _DataStream.Flags$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Reserved$VH = _StreamInformation$_DataStream$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
            public static VarHandle Reserved$VH() {
                return _DataStream.Reserved$VH;
            }
            public static int Reserved$get(MemorySegment seg) {
                return (int)_DataStream.Reserved$VH.get(seg);
            }
            public static void Reserved$set( MemorySegment seg, int x) {
                _DataStream.Reserved$VH.set(seg, x);
            }
            public static int Reserved$get(MemorySegment seg, long index) {
                return (int)_DataStream.Reserved$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Reserved$set(MemorySegment seg, long index, int x) {
                _DataStream.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Vdl$VH = _StreamInformation$_DataStream$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Vdl"));
            public static VarHandle Vdl$VH() {
                return _DataStream.Vdl$VH;
            }
            public static long Vdl$get(MemorySegment seg) {
                return (long)_DataStream.Vdl$VH.get(seg);
            }
            public static void Vdl$set( MemorySegment seg, long x) {
                _DataStream.Vdl$VH.set(seg, x);
            }
            public static long Vdl$get(MemorySegment seg, long index) {
                return (long)_DataStream.Vdl$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Vdl$set(MemorySegment seg, long index, long x) {
                _DataStream.Vdl$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment DataStream$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static class _Reparse {

            static final  GroupLayout _StreamInformation$_Reparse$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataSize"),
                Constants$root.C_LONG$LAYOUT.withName("ReparseDataOffset")
            ).withName("_Reparse");
            public static MemoryLayout $LAYOUT() {
                return _Reparse._StreamInformation$_Reparse$struct$LAYOUT;
            }
            static final VarHandle Length$VH = _StreamInformation$_Reparse$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
            public static VarHandle Length$VH() {
                return _Reparse.Length$VH;
            }
            public static short Length$get(MemorySegment seg) {
                return (short)_Reparse.Length$VH.get(seg);
            }
            public static void Length$set( MemorySegment seg, short x) {
                _Reparse.Length$VH.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)_Reparse.Length$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                _Reparse.Length$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags$VH = _StreamInformation$_Reparse$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
            public static VarHandle Flags$VH() {
                return _Reparse.Flags$VH;
            }
            public static short Flags$get(MemorySegment seg) {
                return (short)_Reparse.Flags$VH.get(seg);
            }
            public static void Flags$set( MemorySegment seg, short x) {
                _Reparse.Flags$VH.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)_Reparse.Flags$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                _Reparse.Flags$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle ReparseDataSize$VH = _StreamInformation$_Reparse$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReparseDataSize"));
            public static VarHandle ReparseDataSize$VH() {
                return _Reparse.ReparseDataSize$VH;
            }
            public static int ReparseDataSize$get(MemorySegment seg) {
                return (int)_Reparse.ReparseDataSize$VH.get(seg);
            }
            public static void ReparseDataSize$set( MemorySegment seg, int x) {
                _Reparse.ReparseDataSize$VH.set(seg, x);
            }
            public static int ReparseDataSize$get(MemorySegment seg, long index) {
                return (int)_Reparse.ReparseDataSize$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void ReparseDataSize$set(MemorySegment seg, long index, int x) {
                _Reparse.ReparseDataSize$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle ReparseDataOffset$VH = _StreamInformation$_Reparse$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReparseDataOffset"));
            public static VarHandle ReparseDataOffset$VH() {
                return _Reparse.ReparseDataOffset$VH;
            }
            public static int ReparseDataOffset$get(MemorySegment seg) {
                return (int)_Reparse.ReparseDataOffset$VH.get(seg);
            }
            public static void ReparseDataOffset$set( MemorySegment seg, int x) {
                _Reparse.ReparseDataOffset$VH.set(seg, x);
            }
            public static int ReparseDataOffset$get(MemorySegment seg, long index) {
                return (int)_Reparse.ReparseDataOffset$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void ReparseDataOffset$set(MemorySegment seg, long index, int x) {
                _Reparse.ReparseDataOffset$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment Reparse$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static class _Ea {

            static final  GroupLayout _StreamInformation$_Ea$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("Length"),
                Constants$root.C_SHORT$LAYOUT.withName("Flags"),
                Constants$root.C_LONG$LAYOUT.withName("EaSize"),
                Constants$root.C_LONG$LAYOUT.withName("EaInformationOffset")
            ).withName("_Ea");
            public static MemoryLayout $LAYOUT() {
                return _Ea._StreamInformation$_Ea$struct$LAYOUT;
            }
            static final VarHandle Length$VH = _StreamInformation$_Ea$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
            public static VarHandle Length$VH() {
                return _Ea.Length$VH;
            }
            public static short Length$get(MemorySegment seg) {
                return (short)_Ea.Length$VH.get(seg);
            }
            public static void Length$set( MemorySegment seg, short x) {
                _Ea.Length$VH.set(seg, x);
            }
            public static short Length$get(MemorySegment seg, long index) {
                return (short)_Ea.Length$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Length$set(MemorySegment seg, long index, short x) {
                _Ea.Length$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle Flags$VH = _StreamInformation$_Ea$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
            public static VarHandle Flags$VH() {
                return _Ea.Flags$VH;
            }
            public static short Flags$get(MemorySegment seg) {
                return (short)_Ea.Flags$VH.get(seg);
            }
            public static void Flags$set( MemorySegment seg, short x) {
                _Ea.Flags$VH.set(seg, x);
            }
            public static short Flags$get(MemorySegment seg, long index) {
                return (short)_Ea.Flags$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void Flags$set(MemorySegment seg, long index, short x) {
                _Ea.Flags$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle EaSize$VH = _StreamInformation$_Ea$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EaSize"));
            public static VarHandle EaSize$VH() {
                return _Ea.EaSize$VH;
            }
            public static int EaSize$get(MemorySegment seg) {
                return (int)_Ea.EaSize$VH.get(seg);
            }
            public static void EaSize$set( MemorySegment seg, int x) {
                _Ea.EaSize$VH.set(seg, x);
            }
            public static int EaSize$get(MemorySegment seg, long index) {
                return (int)_Ea.EaSize$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void EaSize$set(MemorySegment seg, long index, int x) {
                _Ea.EaSize$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle EaInformationOffset$VH = _StreamInformation$_Ea$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EaInformationOffset"));
            public static VarHandle EaInformationOffset$VH() {
                return _Ea.EaInformationOffset$VH;
            }
            public static int EaInformationOffset$get(MemorySegment seg) {
                return (int)_Ea.EaInformationOffset$VH.get(seg);
            }
            public static void EaInformationOffset$set( MemorySegment seg, int x) {
                _Ea.EaInformationOffset$VH.set(seg, x);
            }
            public static int EaInformationOffset$get(MemorySegment seg, long index) {
                return (int)_Ea.EaInformationOffset$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void EaInformationOffset$set(MemorySegment seg, long index, int x) {
                _Ea.EaInformationOffset$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment Ea$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment StreamInformation$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


