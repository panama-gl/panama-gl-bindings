// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _MIDL_METHOD_PROPERTY_MAP {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("Properties")
    ).withName("_MIDL_METHOD_PROPERTY_MAP");
    public static MemoryLayout $LAYOUT() {
        return _MIDL_METHOD_PROPERTY_MAP.$struct$LAYOUT;
    }
    static final VarHandle Count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Count"));
    public static VarHandle Count$VH() {
        return _MIDL_METHOD_PROPERTY_MAP.Count$VH;
    }
    public static int Count$get(MemorySegment seg) {
        return (int)_MIDL_METHOD_PROPERTY_MAP.Count$VH.get(seg);
    }
    public static void Count$set( MemorySegment seg, int x) {
        _MIDL_METHOD_PROPERTY_MAP.Count$VH.set(seg, x);
    }
    public static int Count$get(MemorySegment seg, long index) {
        return (int)_MIDL_METHOD_PROPERTY_MAP.Count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Count$set(MemorySegment seg, long index, int x) {
        _MIDL_METHOD_PROPERTY_MAP.Count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Properties"));
    public static VarHandle Properties$VH() {
        return _MIDL_METHOD_PROPERTY_MAP.Properties$VH;
    }
    public static MemoryAddress Properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_MIDL_METHOD_PROPERTY_MAP.Properties$VH.get(seg);
    }
    public static void Properties$set( MemorySegment seg, MemoryAddress x) {
        _MIDL_METHOD_PROPERTY_MAP.Properties$VH.set(seg, x);
    }
    public static MemoryAddress Properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_MIDL_METHOD_PROPERTY_MAP.Properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Properties$set(MemorySegment seg, long index, MemoryAddress x) {
        _MIDL_METHOD_PROPERTY_MAP.Properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


