// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class IGlobalInterfaceTableVtbl {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("QueryInterface"),
        Constants$root.C_POINTER$LAYOUT.withName("AddRef"),
        Constants$root.C_POINTER$LAYOUT.withName("Release"),
        Constants$root.C_POINTER$LAYOUT.withName("RegisterInterfaceInGlobal"),
        Constants$root.C_POINTER$LAYOUT.withName("RevokeInterfaceFromGlobal"),
        Constants$root.C_POINTER$LAYOUT.withName("GetInterfaceFromGlobal")
    ).withName("IGlobalInterfaceTableVtbl");
    public static MemoryLayout $LAYOUT() {
        return IGlobalInterfaceTableVtbl.$struct$LAYOUT;
    }
    static final FunctionDescriptor QueryInterface$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle QueryInterface$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.QueryInterface$FUNC
    );
    public interface QueryInterface {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(QueryInterface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(QueryInterface.class, fi, IGlobalInterfaceTableVtbl.QueryInterface$FUNC, session);
        }
        static QueryInterface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.QueryInterface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle QueryInterface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("QueryInterface"));
    public static VarHandle QueryInterface$VH() {
        return IGlobalInterfaceTableVtbl.QueryInterface$VH;
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.QueryInterface$VH.get(seg);
    }
    public static void QueryInterface$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.QueryInterface$VH.set(seg, x);
    }
    public static MemoryAddress QueryInterface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.QueryInterface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void QueryInterface$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.QueryInterface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static QueryInterface QueryInterface (MemorySegment segment, MemorySession session) {
        return QueryInterface.ofAddress(QueryInterface$get(segment), session);
    }
    static final FunctionDescriptor AddRef$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddRef$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.AddRef$FUNC
    );
    public interface AddRef {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(AddRef fi, MemorySession session) {
            return RuntimeHelper.upcallStub(AddRef.class, fi, IGlobalInterfaceTableVtbl.AddRef$FUNC, session);
        }
        static AddRef ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.AddRef$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle AddRef$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddRef"));
    public static VarHandle AddRef$VH() {
        return IGlobalInterfaceTableVtbl.AddRef$VH;
    }
    public static MemoryAddress AddRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.AddRef$VH.get(seg);
    }
    public static void AddRef$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.AddRef$VH.set(seg, x);
    }
    public static MemoryAddress AddRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.AddRef$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddRef$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.AddRef$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AddRef AddRef (MemorySegment segment, MemorySession session) {
        return AddRef.ofAddress(AddRef$get(segment), session);
    }
    static final FunctionDescriptor Release$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle Release$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.Release$FUNC
    );
    public interface Release {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(Release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(Release.class, fi, IGlobalInterfaceTableVtbl.Release$FUNC, session);
        }
        static Release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.Release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle Release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Release"));
    public static VarHandle Release$VH() {
        return IGlobalInterfaceTableVtbl.Release$VH;
    }
    public static MemoryAddress Release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.Release$VH.get(seg);
    }
    public static void Release$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.Release$VH.set(seg, x);
    }
    public static MemoryAddress Release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.Release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Release$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.Release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static Release Release (MemorySegment segment, MemorySession session) {
        return Release.ofAddress(Release$get(segment), session);
    }
    static final FunctionDescriptor RegisterInterfaceInGlobal$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RegisterInterfaceInGlobal$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$FUNC
    );
    public interface RegisterInterfaceInGlobal {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(RegisterInterfaceInGlobal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RegisterInterfaceInGlobal.class, fi, IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$FUNC, session);
        }
        static RegisterInterfaceInGlobal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RegisterInterfaceInGlobal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RegisterInterfaceInGlobal"));
    public static VarHandle RegisterInterfaceInGlobal$VH() {
        return IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$VH;
    }
    public static MemoryAddress RegisterInterfaceInGlobal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$VH.get(seg);
    }
    public static void RegisterInterfaceInGlobal$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$VH.set(seg, x);
    }
    public static MemoryAddress RegisterInterfaceInGlobal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterInterfaceInGlobal$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.RegisterInterfaceInGlobal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterInterfaceInGlobal RegisterInterfaceInGlobal (MemorySegment segment, MemorySession session) {
        return RegisterInterfaceInGlobal.ofAddress(RegisterInterfaceInGlobal$get(segment), session);
    }
    static final FunctionDescriptor RevokeInterfaceFromGlobal$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RevokeInterfaceFromGlobal$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$FUNC
    );
    public interface RevokeInterfaceFromGlobal {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(RevokeInterfaceFromGlobal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(RevokeInterfaceFromGlobal.class, fi, IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$FUNC, session);
        }
        static RevokeInterfaceFromGlobal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle RevokeInterfaceFromGlobal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RevokeInterfaceFromGlobal"));
    public static VarHandle RevokeInterfaceFromGlobal$VH() {
        return IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$VH;
    }
    public static MemoryAddress RevokeInterfaceFromGlobal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$VH.get(seg);
    }
    public static void RevokeInterfaceFromGlobal$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$VH.set(seg, x);
    }
    public static MemoryAddress RevokeInterfaceFromGlobal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RevokeInterfaceFromGlobal$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.RevokeInterfaceFromGlobal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static RevokeInterfaceFromGlobal RevokeInterfaceFromGlobal (MemorySegment segment, MemorySession session) {
        return RevokeInterfaceFromGlobal.ofAddress(RevokeInterfaceFromGlobal$get(segment), session);
    }
    static final FunctionDescriptor GetInterfaceFromGlobal$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetInterfaceFromGlobal$MH = RuntimeHelper.downcallHandle(
        IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$FUNC
    );
    public interface GetInterfaceFromGlobal {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(GetInterfaceFromGlobal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(GetInterfaceFromGlobal.class, fi, IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$FUNC, session);
        }
        static GetInterfaceFromGlobal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle GetInterfaceFromGlobal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GetInterfaceFromGlobal"));
    public static VarHandle GetInterfaceFromGlobal$VH() {
        return IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$VH;
    }
    public static MemoryAddress GetInterfaceFromGlobal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$VH.get(seg);
    }
    public static void GetInterfaceFromGlobal$set( MemorySegment seg, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$VH.set(seg, x);
    }
    public static MemoryAddress GetInterfaceFromGlobal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GetInterfaceFromGlobal$set(MemorySegment seg, long index, MemoryAddress x) {
        IGlobalInterfaceTableVtbl.GetInterfaceFromGlobal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetInterfaceFromGlobal GetInterfaceFromGlobal (MemorySegment segment, MemorySession session) {
        return GetInterfaceFromGlobal.ofAddress(GetInterfaceFromGlobal$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


