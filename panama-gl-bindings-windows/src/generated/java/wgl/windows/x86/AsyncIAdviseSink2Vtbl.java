// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct AsyncIAdviseSink2Vtbl {
 *     HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall));
 *     void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall));
 *     void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall));
 *     void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 *     void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall));
 *     void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall));
 * }
 * }
 */
public class AsyncIAdviseSink2Vtbl {

    AsyncIAdviseSink2Vtbl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_POINTER.withName("QueryInterface"),
        wgl_h.C_POINTER.withName("AddRef"),
        wgl_h.C_POINTER.withName("Release"),
        wgl_h.C_POINTER.withName("Begin_OnDataChange"),
        wgl_h.C_POINTER.withName("Finish_OnDataChange"),
        wgl_h.C_POINTER.withName("Begin_OnViewChange"),
        wgl_h.C_POINTER.withName("Finish_OnViewChange"),
        wgl_h.C_POINTER.withName("Begin_OnRename"),
        wgl_h.C_POINTER.withName("Finish_OnRename"),
        wgl_h.C_POINTER.withName("Begin_OnSave"),
        wgl_h.C_POINTER.withName("Finish_OnSave"),
        wgl_h.C_POINTER.withName("Begin_OnClose"),
        wgl_h.C_POINTER.withName("Finish_OnClose"),
        wgl_h.C_POINTER.withName("Begin_OnLinkSrcChange"),
        wgl_h.C_POINTER.withName("Finish_OnLinkSrcChange")
    ).withName("AsyncIAdviseSink2Vtbl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static class QueryInterface {

        QueryInterface() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(QueryInterface.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("QueryInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout QueryInterface$layout() {
        return QueryInterface$LAYOUT;
    }

    private static final long QueryInterface$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static final long QueryInterface$offset() {
        return QueryInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static MemorySegment QueryInterface(MemorySegment struct) {
        return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * HRESULT (*QueryInterface)(AsyncIAdviseSink2 *, const IID *const, void **) __attribute__((stdcall))
     * }
     */
    public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class AddRef {

        AddRef() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(AddRef.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout AddRef$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("AddRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout AddRef$layout() {
        return AddRef$LAYOUT;
    }

    private static final long AddRef$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long AddRef$offset() {
        return AddRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment AddRef(MemorySegment struct) {
        return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*AddRef)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Release {

        Release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            wgl_h.C_LONG,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Release$layout() {
        return Release$LAYOUT;
    }

    private static final long Release$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Release$offset() {
        return Release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Release(MemorySegment struct) {
        return struct.get(Release$LAYOUT, Release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG (*Release)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnDataChange {

        Begin_OnDataChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnDataChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnDataChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnDataChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnDataChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnDataChange$layout() {
        return Begin_OnDataChange$LAYOUT;
    }

    private static final long Begin_OnDataChange$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnDataChange$offset() {
        return Begin_OnDataChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnDataChange(MemorySegment struct) {
        return struct.get(Begin_OnDataChange$LAYOUT, Begin_OnDataChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnDataChange)(AsyncIAdviseSink2 *, FORMATETC *, STGMEDIUM *) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnDataChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnDataChange$LAYOUT, Begin_OnDataChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnDataChange {

        Finish_OnDataChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnDataChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnDataChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnDataChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnDataChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnDataChange$layout() {
        return Finish_OnDataChange$LAYOUT;
    }

    private static final long Finish_OnDataChange$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnDataChange$offset() {
        return Finish_OnDataChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnDataChange(MemorySegment struct) {
        return struct.get(Finish_OnDataChange$LAYOUT, Finish_OnDataChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnDataChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnDataChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnDataChange$LAYOUT, Finish_OnDataChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnViewChange {

        Begin_OnViewChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_LONG,
            wgl_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnViewChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnViewChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnViewChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnViewChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnViewChange$layout() {
        return Begin_OnViewChange$LAYOUT;
    }

    private static final long Begin_OnViewChange$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnViewChange$offset() {
        return Begin_OnViewChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnViewChange(MemorySegment struct) {
        return struct.get(Begin_OnViewChange$LAYOUT, Begin_OnViewChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnViewChange)(AsyncIAdviseSink2 *, DWORD, LONG) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnViewChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnViewChange$LAYOUT, Begin_OnViewChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnViewChange {

        Finish_OnViewChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnViewChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnViewChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnViewChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnViewChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnViewChange$layout() {
        return Finish_OnViewChange$LAYOUT;
    }

    private static final long Finish_OnViewChange$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnViewChange$offset() {
        return Finish_OnViewChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnViewChange(MemorySegment struct) {
        return struct.get(Finish_OnViewChange$LAYOUT, Finish_OnViewChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnViewChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnViewChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnViewChange$LAYOUT, Finish_OnViewChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnRename {

        Begin_OnRename() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnRename.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnRename.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnRename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnRename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnRename$layout() {
        return Begin_OnRename$LAYOUT;
    }

    private static final long Begin_OnRename$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnRename$offset() {
        return Begin_OnRename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnRename(MemorySegment struct) {
        return struct.get(Begin_OnRename$LAYOUT, Begin_OnRename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnRename)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnRename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnRename$LAYOUT, Begin_OnRename$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnRename {

        Finish_OnRename() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnRename.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnRename.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnRename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnRename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnRename$layout() {
        return Finish_OnRename$LAYOUT;
    }

    private static final long Finish_OnRename$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnRename$offset() {
        return Finish_OnRename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnRename(MemorySegment struct) {
        return struct.get(Finish_OnRename$LAYOUT, Finish_OnRename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnRename)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnRename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnRename$LAYOUT, Finish_OnRename$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnSave {

        Begin_OnSave() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnSave.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnSave.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnSave$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnSave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnSave$layout() {
        return Begin_OnSave$LAYOUT;
    }

    private static final long Begin_OnSave$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnSave$offset() {
        return Begin_OnSave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnSave(MemorySegment struct) {
        return struct.get(Begin_OnSave$LAYOUT, Begin_OnSave$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnSave(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnSave$LAYOUT, Begin_OnSave$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnSave {

        Finish_OnSave() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnSave.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnSave.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnSave$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnSave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnSave$layout() {
        return Finish_OnSave$LAYOUT;
    }

    private static final long Finish_OnSave$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnSave$offset() {
        return Finish_OnSave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnSave(MemorySegment struct) {
        return struct.get(Finish_OnSave$LAYOUT, Finish_OnSave$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnSave)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnSave(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnSave$LAYOUT, Finish_OnSave$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnClose {

        Begin_OnClose() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnClose.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnClose.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnClose$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnClose$layout() {
        return Begin_OnClose$LAYOUT;
    }

    private static final long Begin_OnClose$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnClose$offset() {
        return Begin_OnClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnClose(MemorySegment struct) {
        return struct.get(Begin_OnClose$LAYOUT, Begin_OnClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnClose(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnClose$LAYOUT, Begin_OnClose$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnClose {

        Finish_OnClose() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnClose.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnClose.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnClose$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnClose$layout() {
        return Finish_OnClose$LAYOUT;
    }

    private static final long Finish_OnClose$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnClose$offset() {
        return Finish_OnClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnClose(MemorySegment struct) {
        return struct.get(Finish_OnClose$LAYOUT, Finish_OnClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnClose)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnClose(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnClose$LAYOUT, Finish_OnClose$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static class Begin_OnLinkSrcChange {

        Begin_OnLinkSrcChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER,
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Begin_OnLinkSrcChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Begin_OnLinkSrcChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Begin_OnLinkSrcChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Begin_OnLinkSrcChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Begin_OnLinkSrcChange$layout() {
        return Begin_OnLinkSrcChange$LAYOUT;
    }

    private static final long Begin_OnLinkSrcChange$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static final long Begin_OnLinkSrcChange$offset() {
        return Begin_OnLinkSrcChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Begin_OnLinkSrcChange(MemorySegment struct) {
        return struct.get(Begin_OnLinkSrcChange$LAYOUT, Begin_OnLinkSrcChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *, IMoniker *) __attribute__((stdcall))
     * }
     */
    public static void Begin_OnLinkSrcChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Begin_OnLinkSrcChange$LAYOUT, Begin_OnLinkSrcChange$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static class Finish_OnLinkSrcChange {

        Finish_OnLinkSrcChange() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            wgl_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = wgl_h.upcallHandle(Finish_OnLinkSrcChange.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(Finish_OnLinkSrcChange.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout Finish_OnLinkSrcChange$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Finish_OnLinkSrcChange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final AddressLayout Finish_OnLinkSrcChange$layout() {
        return Finish_OnLinkSrcChange$LAYOUT;
    }

    private static final long Finish_OnLinkSrcChange$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static final long Finish_OnLinkSrcChange$offset() {
        return Finish_OnLinkSrcChange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static MemorySegment Finish_OnLinkSrcChange(MemorySegment struct) {
        return struct.get(Finish_OnLinkSrcChange$LAYOUT, Finish_OnLinkSrcChange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *) __attribute__((stdcall))
     * }
     */
    public static void Finish_OnLinkSrcChange(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Finish_OnLinkSrcChange$LAYOUT, Finish_OnLinkSrcChange$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

