// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct tagCONVCONTEXT {
 *     UINT cb;
 *     UINT wFlags;
 *     UINT wCountryID;
 *     int iCodePage;
 *     DWORD dwLangID;
 *     DWORD dwSecurity;
 *     SECURITY_QUALITY_OF_SERVICE qos;
 * }
 * }
 */
public class tagCONVCONTEXT {

    tagCONVCONTEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_INT.withName("cb"),
        wgl_h.C_INT.withName("wFlags"),
        wgl_h.C_INT.withName("wCountryID"),
        wgl_h.C_INT.withName("iCodePage"),
        wgl_h.C_LONG.withName("dwLangID"),
        wgl_h.C_LONG.withName("dwSecurity"),
        _SECURITY_QUALITY_OF_SERVICE.layout().withName("qos")
    ).withName("tagCONVCONTEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cb$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cb
     * }
     */
    public static final OfInt cb$layout() {
        return cb$LAYOUT;
    }

    private static final long cb$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cb
     * }
     */
    public static final long cb$offset() {
        return cb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cb
     * }
     */
    public static int cb(MemorySegment struct) {
        return struct.get(cb$LAYOUT, cb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cb
     * }
     */
    public static void cb(MemorySegment struct, int fieldValue) {
        struct.set(cb$LAYOUT, cb$OFFSET, fieldValue);
    }

    private static final OfInt wFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT wFlags
     * }
     */
    public static final OfInt wFlags$layout() {
        return wFlags$LAYOUT;
    }

    private static final long wFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT wFlags
     * }
     */
    public static final long wFlags$offset() {
        return wFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT wFlags
     * }
     */
    public static int wFlags(MemorySegment struct) {
        return struct.get(wFlags$LAYOUT, wFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT wFlags
     * }
     */
    public static void wFlags(MemorySegment struct, int fieldValue) {
        struct.set(wFlags$LAYOUT, wFlags$OFFSET, fieldValue);
    }

    private static final OfInt wCountryID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wCountryID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT wCountryID
     * }
     */
    public static final OfInt wCountryID$layout() {
        return wCountryID$LAYOUT;
    }

    private static final long wCountryID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT wCountryID
     * }
     */
    public static final long wCountryID$offset() {
        return wCountryID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT wCountryID
     * }
     */
    public static int wCountryID(MemorySegment struct) {
        return struct.get(wCountryID$LAYOUT, wCountryID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT wCountryID
     * }
     */
    public static void wCountryID(MemorySegment struct, int fieldValue) {
        struct.set(wCountryID$LAYOUT, wCountryID$OFFSET, fieldValue);
    }

    private static final OfInt iCodePage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("iCodePage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int iCodePage
     * }
     */
    public static final OfInt iCodePage$layout() {
        return iCodePage$LAYOUT;
    }

    private static final long iCodePage$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int iCodePage
     * }
     */
    public static final long iCodePage$offset() {
        return iCodePage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int iCodePage
     * }
     */
    public static int iCodePage(MemorySegment struct) {
        return struct.get(iCodePage$LAYOUT, iCodePage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int iCodePage
     * }
     */
    public static void iCodePage(MemorySegment struct, int fieldValue) {
        struct.set(iCodePage$LAYOUT, iCodePage$OFFSET, fieldValue);
    }

    private static final OfInt dwLangID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwLangID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwLangID
     * }
     */
    public static final OfInt dwLangID$layout() {
        return dwLangID$LAYOUT;
    }

    private static final long dwLangID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwLangID
     * }
     */
    public static final long dwLangID$offset() {
        return dwLangID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwLangID
     * }
     */
    public static int dwLangID(MemorySegment struct) {
        return struct.get(dwLangID$LAYOUT, dwLangID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwLangID
     * }
     */
    public static void dwLangID(MemorySegment struct, int fieldValue) {
        struct.set(dwLangID$LAYOUT, dwLangID$OFFSET, fieldValue);
    }

    private static final OfInt dwSecurity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dwSecurity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD dwSecurity
     * }
     */
    public static final OfInt dwSecurity$layout() {
        return dwSecurity$LAYOUT;
    }

    private static final long dwSecurity$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD dwSecurity
     * }
     */
    public static final long dwSecurity$offset() {
        return dwSecurity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD dwSecurity
     * }
     */
    public static int dwSecurity(MemorySegment struct) {
        return struct.get(dwSecurity$LAYOUT, dwSecurity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD dwSecurity
     * }
     */
    public static void dwSecurity(MemorySegment struct, int fieldValue) {
        struct.set(dwSecurity$LAYOUT, dwSecurity$OFFSET, fieldValue);
    }

    private static final GroupLayout qos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("qos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SECURITY_QUALITY_OF_SERVICE qos
     * }
     */
    public static final GroupLayout qos$layout() {
        return qos$LAYOUT;
    }

    private static final long qos$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SECURITY_QUALITY_OF_SERVICE qos
     * }
     */
    public static final long qos$offset() {
        return qos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SECURITY_QUALITY_OF_SERVICE qos
     * }
     */
    public static MemorySegment qos(MemorySegment struct) {
        return struct.asSlice(qos$OFFSET, qos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SECURITY_QUALITY_OF_SERVICE qos
     * }
     */
    public static void qos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, qos$OFFSET, qos$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

