// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class tagCONVCONTEXT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cb"),
        Constants$root.C_LONG$LAYOUT.withName("wFlags"),
        Constants$root.C_LONG$LAYOUT.withName("wCountryID"),
        Constants$root.C_LONG$LAYOUT.withName("iCodePage"),
        Constants$root.C_LONG$LAYOUT.withName("dwLangID"),
        Constants$root.C_LONG$LAYOUT.withName("dwSecurity"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Length"),
            Constants$root.C_LONG$LAYOUT.withName("ImpersonationLevel"),
            Constants$root.C_CHAR$LAYOUT.withName("ContextTrackingMode"),
            Constants$root.C_CHAR$LAYOUT.withName("EffectiveOnly"),
            MemoryLayout.paddingLayout(16)
        ).withName("qos")
    ).withName("tagCONVCONTEXT");
    public static MemoryLayout $LAYOUT() {
        return tagCONVCONTEXT.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return tagCONVCONTEXT.cb$VH;
    }
    public static int cb$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.cb$VH.get(seg);
    }
    public static void cb$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wFlags"));
    public static VarHandle wFlags$VH() {
        return tagCONVCONTEXT.wFlags$VH;
    }
    public static int wFlags$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.wFlags$VH.get(seg);
    }
    public static void wFlags$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.wFlags$VH.set(seg, x);
    }
    public static int wFlags$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.wFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wFlags$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.wFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wCountryID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wCountryID"));
    public static VarHandle wCountryID$VH() {
        return tagCONVCONTEXT.wCountryID$VH;
    }
    public static int wCountryID$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.wCountryID$VH.get(seg);
    }
    public static void wCountryID$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.wCountryID$VH.set(seg, x);
    }
    public static int wCountryID$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.wCountryID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wCountryID$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.wCountryID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iCodePage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iCodePage"));
    public static VarHandle iCodePage$VH() {
        return tagCONVCONTEXT.iCodePage$VH;
    }
    public static int iCodePage$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.iCodePage$VH.get(seg);
    }
    public static void iCodePage$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.iCodePage$VH.set(seg, x);
    }
    public static int iCodePage$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.iCodePage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iCodePage$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.iCodePage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwLangID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwLangID"));
    public static VarHandle dwLangID$VH() {
        return tagCONVCONTEXT.dwLangID$VH;
    }
    public static int dwLangID$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.dwLangID$VH.get(seg);
    }
    public static void dwLangID$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.dwLangID$VH.set(seg, x);
    }
    public static int dwLangID$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.dwLangID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLangID$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.dwLangID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwSecurity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSecurity"));
    public static VarHandle dwSecurity$VH() {
        return tagCONVCONTEXT.dwSecurity$VH;
    }
    public static int dwSecurity$get(MemorySegment seg) {
        return (int)tagCONVCONTEXT.dwSecurity$VH.get(seg);
    }
    public static void dwSecurity$set( MemorySegment seg, int x) {
        tagCONVCONTEXT.dwSecurity$VH.set(seg, x);
    }
    public static int dwSecurity$get(MemorySegment seg, long index) {
        return (int)tagCONVCONTEXT.dwSecurity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSecurity$set(MemorySegment seg, long index, int x) {
        tagCONVCONTEXT.dwSecurity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment qos$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


