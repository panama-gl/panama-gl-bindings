// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("GeneralStatus"),
        Constants$root.C_SHORT$LAYOUT.withName("ExtendedStatus"),
        Constants$root.C_LONG$LAYOUT.withName("OutputDataLength"),
        MemoryLayout.sequenceLayout(1, Constants$root.C_CHAR$LAYOUT).withName("OutputData"),
        MemoryLayout.paddingLayout(24)
    ).withName("_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT");
    public static MemoryLayout $LAYOUT() {
        return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.$struct$LAYOUT;
    }
    static final VarHandle GeneralStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GeneralStatus"));
    public static VarHandle GeneralStatus$VH() {
        return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.GeneralStatus$VH;
    }
    public static short GeneralStatus$get(MemorySegment seg) {
        return (short)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.GeneralStatus$VH.get(seg);
    }
    public static void GeneralStatus$set( MemorySegment seg, short x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.GeneralStatus$VH.set(seg, x);
    }
    public static short GeneralStatus$get(MemorySegment seg, long index) {
        return (short)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.GeneralStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GeneralStatus$set(MemorySegment seg, long index, short x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.GeneralStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ExtendedStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ExtendedStatus"));
    public static VarHandle ExtendedStatus$VH() {
        return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.ExtendedStatus$VH;
    }
    public static short ExtendedStatus$get(MemorySegment seg) {
        return (short)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.ExtendedStatus$VH.get(seg);
    }
    public static void ExtendedStatus$set( MemorySegment seg, short x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.ExtendedStatus$VH.set(seg, x);
    }
    public static short ExtendedStatus$get(MemorySegment seg, long index) {
        return (short)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.ExtendedStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ExtendedStatus$set(MemorySegment seg, long index, short x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.ExtendedStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OutputDataLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OutputDataLength"));
    public static VarHandle OutputDataLength$VH() {
        return _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.OutputDataLength$VH;
    }
    public static int OutputDataLength$get(MemorySegment seg) {
        return (int)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.OutputDataLength$VH.get(seg);
    }
    public static void OutputDataLength$set( MemorySegment seg, int x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.OutputDataLength$VH.set(seg, x);
    }
    public static int OutputDataLength$get(MemorySegment seg, long index) {
        return (int)_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.OutputDataLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OutputDataLength$set(MemorySegment seg, long index, int x) {
        _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT.OutputDataLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment OutputData$slice(MemorySegment seg) {
        return seg.asSlice(8, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


