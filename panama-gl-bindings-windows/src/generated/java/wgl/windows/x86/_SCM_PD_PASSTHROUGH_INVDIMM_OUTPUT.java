// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
 *     WORD GeneralStatus;
 *     WORD ExtendedStatus;
 *     DWORD OutputDataLength;
 *     BYTE OutputData[1];
 * }
 * }
 */
public class _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {

    _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        wgl_h.C_SHORT.withName("GeneralStatus"),
        wgl_h.C_SHORT.withName("ExtendedStatus"),
        wgl_h.C_LONG.withName("OutputDataLength"),
        MemoryLayout.sequenceLayout(1, wgl_h.C_CHAR).withName("OutputData"),
        MemoryLayout.paddingLayout(3)
    ).withName("_SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort GeneralStatus$LAYOUT = (OfShort)$LAYOUT.select(groupElement("GeneralStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD GeneralStatus
     * }
     */
    public static final OfShort GeneralStatus$layout() {
        return GeneralStatus$LAYOUT;
    }

    private static final long GeneralStatus$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD GeneralStatus
     * }
     */
    public static final long GeneralStatus$offset() {
        return GeneralStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD GeneralStatus
     * }
     */
    public static short GeneralStatus(MemorySegment struct) {
        return struct.get(GeneralStatus$LAYOUT, GeneralStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD GeneralStatus
     * }
     */
    public static void GeneralStatus(MemorySegment struct, short fieldValue) {
        struct.set(GeneralStatus$LAYOUT, GeneralStatus$OFFSET, fieldValue);
    }

    private static final OfShort ExtendedStatus$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ExtendedStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD ExtendedStatus
     * }
     */
    public static final OfShort ExtendedStatus$layout() {
        return ExtendedStatus$LAYOUT;
    }

    private static final long ExtendedStatus$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD ExtendedStatus
     * }
     */
    public static final long ExtendedStatus$offset() {
        return ExtendedStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD ExtendedStatus
     * }
     */
    public static short ExtendedStatus(MemorySegment struct) {
        return struct.get(ExtendedStatus$LAYOUT, ExtendedStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD ExtendedStatus
     * }
     */
    public static void ExtendedStatus(MemorySegment struct, short fieldValue) {
        struct.set(ExtendedStatus$LAYOUT, ExtendedStatus$OFFSET, fieldValue);
    }

    private static final OfInt OutputDataLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OutputDataLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OutputDataLength
     * }
     */
    public static final OfInt OutputDataLength$layout() {
        return OutputDataLength$LAYOUT;
    }

    private static final long OutputDataLength$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OutputDataLength
     * }
     */
    public static final long OutputDataLength$offset() {
        return OutputDataLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OutputDataLength
     * }
     */
    public static int OutputDataLength(MemorySegment struct) {
        return struct.get(OutputDataLength$LAYOUT, OutputDataLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OutputDataLength
     * }
     */
    public static void OutputDataLength(MemorySegment struct, int fieldValue) {
        struct.set(OutputDataLength$LAYOUT, OutputDataLength$OFFSET, fieldValue);
    }

    private static final SequenceLayout OutputData$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("OutputData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static final SequenceLayout OutputData$layout() {
        return OutputData$LAYOUT;
    }

    private static final long OutputData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static final long OutputData$offset() {
        return OutputData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static MemorySegment OutputData(MemorySegment struct) {
        return struct.asSlice(OutputData$OFFSET, OutputData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static void OutputData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OutputData$OFFSET, OutputData$LAYOUT.byteSize());
    }

    private static long[] OutputData$DIMS = { 1 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static long[] OutputData$dimensions() {
        return OutputData$DIMS;
    }
    private static final VarHandle OutputData$ELEM_HANDLE = OutputData$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static byte OutputData(MemorySegment struct, long index0) {
        return (byte)OutputData$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE OutputData[1]
     * }
     */
    public static void OutputData(MemorySegment struct, long index0, byte fieldValue) {
        OutputData$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

