// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _BIN_RESULTS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("NumberOfBins"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("StartValue"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("$anon$0"),
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                        Constants$root.C_LONG$LAYOUT.withName("HighPart")
                    ).withName("u"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
                ).withName("Length")
            ).withName("BinRange"),
            Constants$root.C_LONG$LAYOUT.withName("BinCount"),
            MemoryLayout.paddingLayout(32)
        ).withName("_BIN_COUNT")).withName("BinCounts")
    ).withName("_BIN_RESULTS");
    public static MemoryLayout $LAYOUT() {
        return _BIN_RESULTS.$struct$LAYOUT;
    }
    static final VarHandle NumberOfBins$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfBins"));
    public static VarHandle NumberOfBins$VH() {
        return _BIN_RESULTS.NumberOfBins$VH;
    }
    public static int NumberOfBins$get(MemorySegment seg) {
        return (int)_BIN_RESULTS.NumberOfBins$VH.get(seg);
    }
    public static void NumberOfBins$set( MemorySegment seg, int x) {
        _BIN_RESULTS.NumberOfBins$VH.set(seg, x);
    }
    public static int NumberOfBins$get(MemorySegment seg, long index) {
        return (int)_BIN_RESULTS.NumberOfBins$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfBins$set(MemorySegment seg, long index, int x) {
        _BIN_RESULTS.NumberOfBins$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment BinCounts$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


