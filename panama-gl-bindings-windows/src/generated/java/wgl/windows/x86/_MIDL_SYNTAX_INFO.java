// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _MIDL_SYNTAX_INFO {
 *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
 *     RPC_DISPATCH_TABLE *DispatchTable;
 *     PFORMAT_STRING ProcString;
 *     const unsigned short *FmtStringOffset;
 *     PFORMAT_STRING TypeString;
 *     const void *aUserMarshalQuadruple;
 *     const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
 *     ULONG_PTR pReserved2;
 * }
 * }
 */
public class _MIDL_SYNTAX_INFO {

    _MIDL_SYNTAX_INFO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _RPC_SYNTAX_IDENTIFIER.layout().withName("TransferSyntax"),
        MemoryLayout.paddingLayout(4),
        wgl_h.C_POINTER.withName("DispatchTable"),
        wgl_h.C_POINTER.withName("ProcString"),
        wgl_h.C_POINTER.withName("FmtStringOffset"),
        wgl_h.C_POINTER.withName("TypeString"),
        wgl_h.C_POINTER.withName("aUserMarshalQuadruple"),
        wgl_h.C_POINTER.withName("pMethodProperties"),
        wgl_h.C_LONG_LONG.withName("pReserved2")
    ).withName("_MIDL_SYNTAX_INFO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout TransferSyntax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TransferSyntax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static final GroupLayout TransferSyntax$layout() {
        return TransferSyntax$LAYOUT;
    }

    private static final long TransferSyntax$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static final long TransferSyntax$offset() {
        return TransferSyntax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static MemorySegment TransferSyntax(MemorySegment struct) {
        return struct.asSlice(TransferSyntax$OFFSET, TransferSyntax$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_SYNTAX_IDENTIFIER TransferSyntax
     * }
     */
    public static void TransferSyntax(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TransferSyntax$OFFSET, TransferSyntax$LAYOUT.byteSize());
    }

    private static final AddressLayout DispatchTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DispatchTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * RPC_DISPATCH_TABLE *DispatchTable
     * }
     */
    public static final AddressLayout DispatchTable$layout() {
        return DispatchTable$LAYOUT;
    }

    private static final long DispatchTable$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * RPC_DISPATCH_TABLE *DispatchTable
     * }
     */
    public static final long DispatchTable$offset() {
        return DispatchTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * RPC_DISPATCH_TABLE *DispatchTable
     * }
     */
    public static MemorySegment DispatchTable(MemorySegment struct) {
        return struct.get(DispatchTable$LAYOUT, DispatchTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * RPC_DISPATCH_TABLE *DispatchTable
     * }
     */
    public static void DispatchTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DispatchTable$LAYOUT, DispatchTable$OFFSET, fieldValue);
    }

    private static final AddressLayout ProcString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ProcString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static final AddressLayout ProcString$layout() {
        return ProcString$LAYOUT;
    }

    private static final long ProcString$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static final long ProcString$offset() {
        return ProcString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static MemorySegment ProcString(MemorySegment struct) {
        return struct.get(ProcString$LAYOUT, ProcString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING ProcString
     * }
     */
    public static void ProcString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ProcString$LAYOUT, ProcString$OFFSET, fieldValue);
    }

    private static final AddressLayout FmtStringOffset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FmtStringOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const unsigned short *FmtStringOffset
     * }
     */
    public static final AddressLayout FmtStringOffset$layout() {
        return FmtStringOffset$LAYOUT;
    }

    private static final long FmtStringOffset$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const unsigned short *FmtStringOffset
     * }
     */
    public static final long FmtStringOffset$offset() {
        return FmtStringOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const unsigned short *FmtStringOffset
     * }
     */
    public static MemorySegment FmtStringOffset(MemorySegment struct) {
        return struct.get(FmtStringOffset$LAYOUT, FmtStringOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const unsigned short *FmtStringOffset
     * }
     */
    public static void FmtStringOffset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FmtStringOffset$LAYOUT, FmtStringOffset$OFFSET, fieldValue);
    }

    private static final AddressLayout TypeString$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TypeString"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static final AddressLayout TypeString$layout() {
        return TypeString$LAYOUT;
    }

    private static final long TypeString$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static final long TypeString$offset() {
        return TypeString$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static MemorySegment TypeString(MemorySegment struct) {
        return struct.get(TypeString$LAYOUT, TypeString$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFORMAT_STRING TypeString
     * }
     */
    public static void TypeString(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TypeString$LAYOUT, TypeString$OFFSET, fieldValue);
    }

    private static final AddressLayout aUserMarshalQuadruple$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("aUserMarshalQuadruple"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *aUserMarshalQuadruple
     * }
     */
    public static final AddressLayout aUserMarshalQuadruple$layout() {
        return aUserMarshalQuadruple$LAYOUT;
    }

    private static final long aUserMarshalQuadruple$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *aUserMarshalQuadruple
     * }
     */
    public static final long aUserMarshalQuadruple$offset() {
        return aUserMarshalQuadruple$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *aUserMarshalQuadruple
     * }
     */
    public static MemorySegment aUserMarshalQuadruple(MemorySegment struct) {
        return struct.get(aUserMarshalQuadruple$LAYOUT, aUserMarshalQuadruple$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *aUserMarshalQuadruple
     * }
     */
    public static void aUserMarshalQuadruple(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(aUserMarshalQuadruple$LAYOUT, aUserMarshalQuadruple$OFFSET, fieldValue);
    }

    private static final AddressLayout pMethodProperties$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMethodProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties
     * }
     */
    public static final AddressLayout pMethodProperties$layout() {
        return pMethodProperties$LAYOUT;
    }

    private static final long pMethodProperties$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties
     * }
     */
    public static final long pMethodProperties$offset() {
        return pMethodProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties
     * }
     */
    public static MemorySegment pMethodProperties(MemorySegment struct) {
        return struct.get(pMethodProperties$LAYOUT, pMethodProperties$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties
     * }
     */
    public static void pMethodProperties(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMethodProperties$LAYOUT, pMethodProperties$OFFSET, fieldValue);
    }

    private static final OfLong pReserved2$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pReserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR pReserved2
     * }
     */
    public static final OfLong pReserved2$layout() {
        return pReserved2$LAYOUT;
    }

    private static final long pReserved2$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR pReserved2
     * }
     */
    public static final long pReserved2$offset() {
        return pReserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR pReserved2
     * }
     */
    public static long pReserved2(MemorySegment struct) {
        return struct.get(pReserved2$LAYOUT, pReserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR pReserved2
     * }
     */
    public static void pReserved2(MemorySegment struct, long fieldValue) {
        struct.set(pReserved2$LAYOUT, pReserved2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

