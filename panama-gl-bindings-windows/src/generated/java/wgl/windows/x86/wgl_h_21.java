// Generated by jextract

package wgl.windows.x86;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class wgl_h_21 extends wgl_h_20 {

    public static MethodHandle FreeEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$819.FreeEncryptedFileMetadata$MH,"FreeEncryptedFileMetadata");
    }
    public static void FreeEncryptedFileMetadata ( Addressable pbMetadata) {
        var mh$ = FreeEncryptedFileMetadata$MH();
        try {
            mh$.invokeExact(pbMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_IMPORT_CONTEXT_P = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$819.I_RpcNsGetBuffer$MH,"I_RpcNsGetBuffer");
    }
    public static int I_RpcNsGetBuffer ( Addressable Message) {
        var mh$ = I_RpcNsGetBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$819.I_RpcNsSendReceive$MH,"I_RpcNsSendReceive");
    }
    public static int I_RpcNsSendReceive ( Addressable Message,  Addressable Handle) {
        var mh$ = I_RpcNsSendReceive$MH();
        try {
            return (int)mh$.invokeExact(Message, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$819.I_RpcNsRaiseException$MH,"I_RpcNsRaiseException");
    }
    public static void I_RpcNsRaiseException ( Addressable Message,  int Status) {
        var mh$ = I_RpcNsRaiseException$MH();
        try {
            mh$.invokeExact(Message, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReBindBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$819.I_RpcReBindBuffer$MH,"I_RpcReBindBuffer");
    }
    public static int I_RpcReBindBuffer ( Addressable Message) {
        var mh$ = I_RpcReBindBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsServerBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$819.I_NsServerBindSearch$MH,"I_NsServerBindSearch");
    }
    public static int I_NsServerBindSearch () {
        var mh$ = I_NsServerBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$820.I_NsClientBindSearch$MH,"I_NsClientBindSearch");
    }
    public static int I_NsClientBindSearch () {
        var mh$ = I_NsClientBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindDone$MH() {
        return RuntimeHelper.requireNonNull(constants$820.I_NsClientBindDone$MH,"I_NsClientBindDone");
    }
    public static void I_NsClientBindDone () {
        var mh$ = I_NsClientBindDone$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_allocate$MH() {
        return RuntimeHelper.requireNonNull(constants$820.MIDL_user_allocate$MH,"MIDL_user_allocate");
    }
    public static MemoryAddress MIDL_user_allocate ( long size) {
        var mh$ = MIDL_user_allocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_free$MH() {
        return RuntimeHelper.requireNonNull(constants$820.MIDL_user_free$MH,"MIDL_user_free");
    }
    public static void MIDL_user_free ( Addressable x0) {
        var mh$ = MIDL_user_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$821.I_RpcDefaultAllocate$MH,"I_RpcDefaultAllocate");
    }
    public static MemoryAddress I_RpcDefaultAllocate ( Addressable bh,  long size,  Addressable RealAlloc) {
        var mh$ = I_RpcDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(bh, size, RealAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$821.I_RpcDefaultFree$MH,"I_RpcDefaultFree");
    }
    public static void I_RpcDefaultFree ( Addressable bh,  Addressable x1,  Addressable RealFree) {
        var mh$ = I_RpcDefaultFree$MH();
        try {
            mh$.invokeExact(bh, x1, RealFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress NDR_CCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NDR_SCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCONTEXT_QUEUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NDRCContextBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$822.NDRCContextBinding$MH,"NDRCContextBinding");
    }
    public static MemoryAddress NDRCContextBinding ( Addressable CContext) {
        var mh$ = NDRCContextBinding$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$822.NDRCContextMarshall$MH,"NDRCContextMarshall");
    }
    public static void NDRCContextMarshall ( Addressable CContext,  Addressable pBuff) {
        var mh$ = NDRCContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRCContextUnmarshall$MH,"NDRCContextUnmarshall");
    }
    public static void NDRCContextUnmarshall ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRCContextUnmarshall2$MH,"NDRCContextUnmarshall2");
    }
    public static void NDRCContextUnmarshall2 ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall2$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRSContextMarshall$MH,"NDRSContextMarshall");
    }
    public static void NDRSContextMarshall ( Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRSContextUnmarshall$MH,"NDRSContextUnmarshall");
    }
    public static MemoryAddress NDRSContextUnmarshall ( Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRSContextMarshallEx$MH,"NDRSContextMarshallEx");
    }
    public static void NDRSContextMarshallEx ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshallEx$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$823.NDRSContextMarshall2$MH,"NDRSContextMarshall2");
    }
    public static void NDRSContextMarshall2 ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextMarshall2$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$824.NDRSContextUnmarshallEx$MH,"NDRSContextUnmarshallEx");
    }
    public static MemoryAddress NDRSContextUnmarshallEx ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshallEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$824.NDRSContextUnmarshall2$MH,"NDRSContextUnmarshall2");
    }
    public static MemoryAddress NDRSContextUnmarshall2 ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextUnmarshall2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$824.RpcSsDestroyClientContext$MH,"RpcSsDestroyClientContext");
    }
    public static void RpcSsDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSsDestroyClientContext$MH();
        try {
            mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_BUFPTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARRAY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_ASYNC_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_CORRELATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING$0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE$1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_ROUTINE_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXMIT_ROUTINE_QUINTUPLE = Constants$root.C_POINTER$LAYOUT;
    public static int USER_MARSHAL_CB_BUFFER_SIZE() {
        return (int)0L;
    }
    public static int USER_MARSHAL_CB_MARSHALL() {
        return (int)1L;
    }
    public static int USER_MARSHAL_CB_UNMARSHALL() {
        return (int)2L;
    }
    public static int USER_MARSHAL_CB_FREE() {
        return (int)3L;
    }
    public static int IDL_CS_NO_CONVERT() {
        return (int)0L;
    }
    public static int IDL_CS_IN_PLACE_CONVERT() {
        return (int)1L;
    }
    public static int IDL_CS_NEW_BUFFER_CONVERT() {
        return (int)2L;
    }
    public static MethodHandle RpcCsGetTags$MH() {
        return RuntimeHelper.requireNonNull(constants$828.RpcCsGetTags$MH,"RpcCsGetTags");
    }
    public static void RpcCsGetTags ( Addressable hBinding,  int fServerSide,  Addressable pulSendingTag,  Addressable pulDesiredReceivingTag,  Addressable pulReceivingTag,  Addressable pStatus) {
        var mh$ = RpcCsGetTags$MH();
        try {
            mh$.invokeExact(hBinding, fServerSide, pulSendingTag, pulDesiredReceivingTag, pulReceivingTag, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIDL_STUB_DESC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_XMIT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY_MAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SERVER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUBLESS_PROXY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO$2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static int XLAT_SERVER() {
        return (int)1L;
    }
    public static int XLAT_CLIENT() {
        return (int)2L;
    }
    public static OfAddress PFULL_PTR_XLAT_TABLES = Constants$root.C_POINTER$LAYOUT;
    public static int SYSTEM_HANDLE_FILE() {
        return (int)0L;
    }
    public static int SYSTEM_HANDLE_SEMAPHORE() {
        return (int)1L;
    }
    public static int SYSTEM_HANDLE_EVENT() {
        return (int)2L;
    }
    public static int SYSTEM_HANDLE_MUTEX() {
        return (int)3L;
    }
    public static int SYSTEM_HANDLE_PROCESS() {
        return (int)4L;
    }
    public static int SYSTEM_HANDLE_TOKEN() {
        return (int)5L;
    }
    public static int SYSTEM_HANDLE_SECTION() {
        return (int)6L;
    }
    public static int SYSTEM_HANDLE_REG_KEY() {
        return (int)7L;
    }
    public static int SYSTEM_HANDLE_THREAD() {
        return (int)8L;
    }
    public static int SYSTEM_HANDLE_COMPOSITION_OBJECT() {
        return (int)9L;
    }
    public static int SYSTEM_HANDLE_SOCKET() {
        return (int)10L;
    }
    public static int SYSTEM_HANDLE_JOB() {
        return (int)11L;
    }
    public static int SYSTEM_HANDLE_PIPE() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_MAX() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_INVALID() {
        return (int)255L;
    }
    public static int MidlInterceptionInfoVersionOne() {
        return (int)1L;
    }
    public static int MidlWinrtTypeSerializationInfoVersionOne() {
        return (int)1L;
    }
    public static OfAddress PMIDL_INTERCEPTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_WINRT_TYPE_SERIALIZATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NdrClientGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$829.NdrClientGetSupportedSyntaxes$MH,"NdrClientGetSupportedSyntaxes");
    }
    public static int NdrClientGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr) {
        var mh$ = NdrClientGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$829.NdrServerGetSupportedSyntaxes$MH,"NdrServerGetSupportedSyntaxes");
    }
    public static int NdrServerGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr,  Addressable pPreferSyntaxIndex) {
        var mh$ = NdrServerGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr, pPreferSyntaxIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrSimpleTypeMarshall$MH,"NdrSimpleTypeMarshall");
    }
    public static void NdrSimpleTypeMarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrPointerMarshall$MH,"NdrPointerMarshall");
    }
    public static MemoryAddress NdrPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrCsArrayMarshall$MH,"NdrCsArrayMarshall");
    }
    public static MemoryAddress NdrCsArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrCsTagMarshall$MH,"NdrCsTagMarshall");
    }
    public static MemoryAddress NdrCsTagMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrSimpleStructMarshall$MH,"NdrSimpleStructMarshall");
    }
    public static MemoryAddress NdrSimpleStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$830.NdrConformantStructMarshall$MH,"NdrConformantStructMarshall");
    }
    public static MemoryAddress NdrConformantStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrConformantVaryingStructMarshall$MH,"NdrConformantVaryingStructMarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrComplexStructMarshall$MH,"NdrComplexStructMarshall");
    }
    public static MemoryAddress NdrComplexStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrFixedArrayMarshall$MH,"NdrFixedArrayMarshall");
    }
    public static MemoryAddress NdrFixedArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrConformantArrayMarshall$MH,"NdrConformantArrayMarshall");
    }
    public static MemoryAddress NdrConformantArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrConformantVaryingArrayMarshall$MH,"NdrConformantVaryingArrayMarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$831.NdrVaryingArrayMarshall$MH,"NdrVaryingArrayMarshall");
    }
    public static MemoryAddress NdrVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrComplexArrayMarshall$MH,"NdrComplexArrayMarshall");
    }
    public static MemoryAddress NdrComplexArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrNonConformantStringMarshall$MH,"NdrNonConformantStringMarshall");
    }
    public static MemoryAddress NdrNonConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrConformantStringMarshall$MH,"NdrConformantStringMarshall");
    }
    public static MemoryAddress NdrConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrEncapsulatedUnionMarshall$MH,"NdrEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrNonEncapsulatedUnionMarshall$MH,"NdrNonEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$832.NdrByteCountPointerMarshall$MH,"NdrByteCountPointerMarshall");
    }
    public static MemoryAddress NdrByteCountPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrXmitOrRepAsMarshall$MH,"NdrXmitOrRepAsMarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrUserMarshalMarshall$MH,"NdrUserMarshalMarshall");
    }
    public static MemoryAddress NdrUserMarshalMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrInterfacePointerMarshall$MH,"NdrInterfacePointerMarshall");
    }
    public static MemoryAddress NdrInterfacePointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrClientContextMarshall$MH,"NdrClientContextMarshall");
    }
    public static void NdrClientContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  int fCheck) {
        var mh$ = NdrClientContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, fCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrServerContextMarshall$MH,"NdrServerContextMarshall");
    }
    public static void NdrServerContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine) {
        var mh$ = NdrServerContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$833.NdrServerContextNewMarshall$MH,"NdrServerContextNewMarshall");
    }
    public static void NdrServerContextNewMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine,  Addressable pFormat) {
        var mh$ = NdrServerContextNewMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrSimpleTypeUnmarshall$MH,"NdrSimpleTypeUnmarshall");
    }
    public static void NdrSimpleTypeUnmarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrCsArrayUnmarshall$MH,"NdrCsArrayUnmarshall");
    }
    public static MemoryAddress NdrCsArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrCsTagUnmarshall$MH,"NdrCsTagUnmarshall");
    }
    public static MemoryAddress NdrCsTagUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsTagUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRangeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrRangeUnmarshall$MH,"NdrRangeUnmarshall");
    }
    public static MemoryAddress NdrRangeUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrRangeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrCorrelationInitialize$MH,"NdrCorrelationInitialize");
    }
    public static void NdrCorrelationInitialize ( Addressable pStubMsg,  Addressable pMemory,  int CacheSize,  int flags) {
        var mh$ = NdrCorrelationInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, CacheSize, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$834.NdrCorrelationPass$MH,"NdrCorrelationPass");
    }
    public static void NdrCorrelationPass ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationPass$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationFree$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrCorrelationFree$MH,"NdrCorrelationFree");
    }
    public static void NdrCorrelationFree ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationFree$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrPointerUnmarshall$MH,"NdrPointerUnmarshall");
    }
    public static MemoryAddress NdrPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrSimpleStructUnmarshall$MH,"NdrSimpleStructUnmarshall");
    }
    public static MemoryAddress NdrSimpleStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrSimpleStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrConformantStructUnmarshall$MH,"NdrConformantStructUnmarshall");
    }
    public static MemoryAddress NdrConformantStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrConformantVaryingStructUnmarshall$MH,"NdrConformantVaryingStructUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$835.NdrComplexStructUnmarshall$MH,"NdrComplexStructUnmarshall");
    }
    public static MemoryAddress NdrComplexStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrFixedArrayUnmarshall$MH,"NdrFixedArrayUnmarshall");
    }
    public static MemoryAddress NdrFixedArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrFixedArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrConformantArrayUnmarshall$MH,"NdrConformantArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrConformantVaryingArrayUnmarshall$MH,"NdrConformantVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrVaryingArrayUnmarshall$MH,"NdrVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrComplexArrayUnmarshall$MH,"NdrComplexArrayUnmarshall");
    }
    public static MemoryAddress NdrComplexArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$836.NdrNonConformantStringUnmarshall$MH,"NdrNonConformantStringUnmarshall");
    }
    public static MemoryAddress NdrNonConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrConformantStringUnmarshall$MH,"NdrConformantStringUnmarshall");
    }
    public static MemoryAddress NdrConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrEncapsulatedUnionUnmarshall$MH,"NdrEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrNonEncapsulatedUnionUnmarshall$MH,"NdrNonEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrByteCountPointerUnmarshall$MH,"NdrByteCountPointerUnmarshall");
    }
    public static MemoryAddress NdrByteCountPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrByteCountPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrXmitOrRepAsUnmarshall$MH,"NdrXmitOrRepAsUnmarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrXmitOrRepAsUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$837.NdrUserMarshalUnmarshall$MH,"NdrUserMarshalUnmarshall");
    }
    public static MemoryAddress NdrUserMarshalUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrUserMarshalUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrInterfacePointerUnmarshall$MH,"NdrInterfacePointerUnmarshall");
    }
    public static MemoryAddress NdrInterfacePointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrInterfacePointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrClientContextUnmarshall$MH,"NdrClientContextUnmarshall");
    }
    public static void NdrClientContextUnmarshall ( Addressable pStubMsg,  Addressable pContextHandle,  Addressable BindHandle) {
        var mh$ = NdrClientContextUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pContextHandle, BindHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrServerContextUnmarshall$MH,"NdrServerContextUnmarshall");
    }
    public static MemoryAddress NdrServerContextUnmarshall ( Addressable pStubMsg) {
        var mh$ = NdrServerContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrContextHandleInitialize$MH,"NdrContextHandleInitialize");
    }
    public static MemoryAddress NdrContextHandleInitialize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrServerContextNewUnmarshall$MH,"NdrServerContextNewUnmarshall");
    }
    public static MemoryAddress NdrServerContextNewUnmarshall ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerContextNewUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$838.NdrPointerBufferSize$MH,"NdrPointerBufferSize");
    }
    public static void NdrPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrCsArrayBufferSize$MH,"NdrCsArrayBufferSize");
    }
    public static void NdrCsArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrCsTagBufferSize$MH,"NdrCsTagBufferSize");
    }
    public static void NdrCsTagBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrSimpleStructBufferSize$MH,"NdrSimpleStructBufferSize");
    }
    public static void NdrSimpleStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrConformantStructBufferSize$MH,"NdrConformantStructBufferSize");
    }
    public static void NdrConformantStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrConformantVaryingStructBufferSize$MH,"NdrConformantVaryingStructBufferSize");
    }
    public static void NdrConformantVaryingStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$839.NdrComplexStructBufferSize$MH,"NdrComplexStructBufferSize");
    }
    public static void NdrComplexStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrFixedArrayBufferSize$MH,"NdrFixedArrayBufferSize");
    }
    public static void NdrFixedArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrConformantArrayBufferSize$MH,"NdrConformantArrayBufferSize");
    }
    public static void NdrConformantArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrConformantVaryingArrayBufferSize$MH,"NdrConformantVaryingArrayBufferSize");
    }
    public static void NdrConformantVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrVaryingArrayBufferSize$MH,"NdrVaryingArrayBufferSize");
    }
    public static void NdrVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrComplexArrayBufferSize$MH,"NdrComplexArrayBufferSize");
    }
    public static void NdrComplexArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$840.NdrConformantStringBufferSize$MH,"NdrConformantStringBufferSize");
    }
    public static void NdrConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrNonConformantStringBufferSize$MH,"NdrNonConformantStringBufferSize");
    }
    public static void NdrNonConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrEncapsulatedUnionBufferSize$MH,"NdrEncapsulatedUnionBufferSize");
    }
    public static void NdrEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrNonEncapsulatedUnionBufferSize$MH,"NdrNonEncapsulatedUnionBufferSize");
    }
    public static void NdrNonEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrByteCountPointerBufferSize$MH,"NdrByteCountPointerBufferSize");
    }
    public static void NdrByteCountPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrXmitOrRepAsBufferSize$MH,"NdrXmitOrRepAsBufferSize");
    }
    public static void NdrXmitOrRepAsBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$841.NdrUserMarshalBufferSize$MH,"NdrUserMarshalBufferSize");
    }
    public static void NdrUserMarshalBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrInterfacePointerBufferSize$MH,"NdrInterfacePointerBufferSize");
    }
    public static void NdrInterfacePointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleSize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrContextHandleSize$MH,"NdrContextHandleSize");
    }
    public static void NdrContextHandleSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrContextHandleSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrPointerMemorySize$MH,"NdrPointerMemorySize");
    }
    public static int NdrPointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrPointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrContextHandleMemorySize$MH,"NdrContextHandleMemorySize");
    }
    public static int NdrContextHandleMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrCsArrayMemorySize$MH,"NdrCsArrayMemorySize");
    }
    public static int NdrCsArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$842.NdrCsTagMemorySize$MH,"NdrCsTagMemorySize");
    }
    public static int NdrCsTagMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsTagMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrSimpleStructMemorySize$MH,"NdrSimpleStructMemorySize");
    }
    public static int NdrSimpleStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrConformantStructMemorySize$MH,"NdrConformantStructMemorySize");
    }
    public static int NdrConformantStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrConformantVaryingStructMemorySize$MH,"NdrConformantVaryingStructMemorySize");
    }
    public static int NdrConformantVaryingStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrComplexStructMemorySize$MH,"NdrComplexStructMemorySize");
    }
    public static int NdrComplexStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrFixedArrayMemorySize$MH,"NdrFixedArrayMemorySize");
    }
    public static int NdrFixedArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$843.NdrConformantArrayMemorySize$MH,"NdrConformantArrayMemorySize");
    }
    public static int NdrConformantArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrConformantVaryingArrayMemorySize$MH,"NdrConformantVaryingArrayMemorySize");
    }
    public static int NdrConformantVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrVaryingArrayMemorySize$MH,"NdrVaryingArrayMemorySize");
    }
    public static int NdrVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrComplexArrayMemorySize$MH,"NdrComplexArrayMemorySize");
    }
    public static int NdrComplexArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrConformantStringMemorySize$MH,"NdrConformantStringMemorySize");
    }
    public static int NdrConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrNonConformantStringMemorySize$MH,"NdrNonConformantStringMemorySize");
    }
    public static int NdrNonConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$844.NdrEncapsulatedUnionMemorySize$MH,"NdrEncapsulatedUnionMemorySize");
    }
    public static int NdrEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrNonEncapsulatedUnionMemorySize$MH,"NdrNonEncapsulatedUnionMemorySize");
    }
    public static int NdrNonEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrXmitOrRepAsMemorySize$MH,"NdrXmitOrRepAsMemorySize");
    }
    public static int NdrXmitOrRepAsMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrUserMarshalMemorySize$MH,"NdrUserMarshalMemorySize");
    }
    public static int NdrUserMarshalMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrInterfacePointerMemorySize$MH,"NdrInterfacePointerMemorySize");
    }
    public static int NdrInterfacePointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrPointerFree$MH,"NdrPointerFree");
    }
    public static void NdrPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$845.NdrCsArrayFree$MH,"NdrCsArrayFree");
    }
    public static void NdrCsArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrSimpleStructFree$MH,"NdrSimpleStructFree");
    }
    public static void NdrSimpleStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrConformantStructFree$MH,"NdrConformantStructFree");
    }
    public static void NdrConformantStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrConformantVaryingStructFree$MH,"NdrConformantVaryingStructFree");
    }
    public static void NdrConformantVaryingStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrComplexStructFree$MH,"NdrComplexStructFree");
    }
    public static void NdrComplexStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrFixedArrayFree$MH,"NdrFixedArrayFree");
    }
    public static void NdrFixedArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$846.NdrConformantArrayFree$MH,"NdrConformantArrayFree");
    }
    public static void NdrConformantArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrConformantVaryingArrayFree$MH,"NdrConformantVaryingArrayFree");
    }
    public static void NdrConformantVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrVaryingArrayFree$MH,"NdrVaryingArrayFree");
    }
    public static void NdrVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrComplexArrayFree$MH,"NdrComplexArrayFree");
    }
    public static void NdrComplexArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrEncapsulatedUnionFree$MH,"NdrEncapsulatedUnionFree");
    }
    public static void NdrEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrNonEncapsulatedUnionFree$MH,"NdrNonEncapsulatedUnionFree");
    }
    public static void NdrNonEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$847.NdrByteCountPointerFree$MH,"NdrByteCountPointerFree");
    }
    public static void NdrByteCountPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrXmitOrRepAsFree$MH,"NdrXmitOrRepAsFree");
    }
    public static void NdrXmitOrRepAsFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrUserMarshalFree$MH,"NdrUserMarshalFree");
    }
    public static void NdrUserMarshalFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrInterfacePointerFree$MH,"NdrInterfacePointerFree");
    }
    public static void NdrInterfacePointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert2$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrConvert2$MH,"NdrConvert2");
    }
    public static void NdrConvert2 ( Addressable pStubMsg,  Addressable pFormat,  int NumberParams) {
        var mh$ = NdrConvert2$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, NumberParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrConvert$MH,"NdrConvert");
    }
    public static void NdrConvert ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConvert$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalSimpleTypeConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$848.NdrUserMarshalSimpleTypeConvert$MH,"NdrUserMarshalSimpleTypeConvert");
    }
    public static MemoryAddress NdrUserMarshalSimpleTypeConvert ( Addressable pFlags,  Addressable pBuffer,  byte FormatChar) {
        var mh$ = NdrUserMarshalSimpleTypeConvert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFlags, pBuffer, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrClientInitializeNew$MH,"NdrClientInitializeNew");
    }
    public static void NdrClientInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitializeNew$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrServerInitializeNew$MH,"NdrServerInitializeNew");
    }
    public static MemoryAddress NdrServerInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitializeNew$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializePartial$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrServerInitializePartial$MH,"NdrServerInitializePartial");
    }
    public static void NdrServerInitializePartial ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int RequestedBufferSize) {
        var mh$ = NdrServerInitializePartial$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, RequestedBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrClientInitialize$MH,"NdrClientInitialize");
    }
    public static void NdrClientInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitialize$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrServerInitialize$MH,"NdrServerInitialize");
    }
    public static MemoryAddress NdrServerInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$849.NdrServerInitializeUnmarshall$MH,"NdrServerInitializeUnmarshall");
    }
    public static MemoryAddress NdrServerInitializeUnmarshall ( Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pRpcMsg) {
        var mh$ = NdrServerInitializeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pStubDescriptor, pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrServerInitializeMarshall$MH,"NdrServerInitializeMarshall");
    }
    public static void NdrServerInitializeMarshall ( Addressable pRpcMsg,  Addressable pStubMsg) {
        var mh$ = NdrServerInitializeMarshall$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrGetBuffer$MH,"NdrGetBuffer");
    }
    public static MemoryAddress NdrGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrNsGetBuffer$MH,"NdrNsGetBuffer");
    }
    public static MemoryAddress NdrNsGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrNsGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrSendReceive$MH,"NdrSendReceive");
    }
    public static MemoryAddress NdrSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd) {
        var mh$ = NdrSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrNsSendReceive$MH,"NdrNsSendReceive");
    }
    public static MemoryAddress NdrNsSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd,  Addressable pAutoHandle) {
        var mh$ = NdrNsSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd, pAutoHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$850.NdrFreeBuffer$MH,"NdrFreeBuffer");
    }
    public static void NdrFreeBuffer ( Addressable pStubMsg) {
        var mh$ = NdrFreeBuffer$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetDcomProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrGetDcomProtocolVersion$MH,"NdrGetDcomProtocolVersion");
    }
    public static int NdrGetDcomProtocolVersion ( Addressable pStubMsg,  Addressable pVersion) {
        var mh$ = NdrGetDcomProtocolVersion$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pVersion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrClientCall2$MH,"NdrClientCall2");
    }
    public static MemorySegment NdrClientCall2 ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrClientCall$MH,"NdrClientCall");
    }
    public static MemorySegment NdrClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrAsyncClientCall$MH,"NdrAsyncClientCall");
    }
    public static MemorySegment NdrAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrDcomAsyncClientCall$MH,"NdrDcomAsyncClientCall");
    }
    public static MemorySegment NdrDcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrDcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int STUB_UNMARSHAL() {
        return (int)0L;
    }
    public static int STUB_CALL_SERVER() {
        return (int)1L;
    }
    public static int STUB_MARSHAL() {
        return (int)2L;
    }
    public static int STUB_CALL_SERVER_NO_HRESULT() {
        return (int)3L;
    }
    public static int PROXY_CALCSIZE() {
        return (int)0L;
    }
    public static int PROXY_GETBUFFER() {
        return (int)1L;
    }
    public static int PROXY_MARSHAL() {
        return (int)2L;
    }
    public static int PROXY_SENDRECEIVE() {
        return (int)3L;
    }
    public static int PROXY_UNMARSHAL() {
        return (int)4L;
    }
    public static MethodHandle NdrAsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$851.NdrAsyncServerCall$MH,"NdrAsyncServerCall");
    }
    public static void NdrAsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrAsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrAsyncStubCall$MH,"NdrAsyncStubCall");
    }
    public static int NdrAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrDcomAsyncStubCall$MH,"NdrDcomAsyncStubCall");
    }
    public static int NdrDcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrDcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrStubCall2$MH,"NdrStubCall2");
    }
    public static int NdrStubCall2 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall2$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrServerCall2$MH,"NdrServerCall2");
    }
    public static void NdrServerCall2 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall2$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrStubCall$MH,"NdrStubCall");
    }
    public static int NdrStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$852.NdrServerCall$MH,"NdrServerCall");
    }
    public static void NdrServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NdrServerUnmarshall$MH,"NdrServerUnmarshall");
    }
    public static int NdrServerUnmarshall ( Addressable pChannel,  Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pFormat,  Addressable pParamList) {
        var mh$ = NdrServerUnmarshall$MH();
        try {
            return (int)mh$.invokeExact(pChannel, pRpcMsg, pStubMsg, pStubDescriptor, pFormat, pParamList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NdrServerMarshall$MH,"NdrServerMarshall");
    }
    public static void NdrServerMarshall ( Addressable pThis,  Addressable pChannel,  Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerMarshall$MH();
        try {
            mh$.invokeExact(pThis, pChannel, pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrMapCommAndFaultStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$853.NdrMapCommAndFaultStatus$MH,"NdrMapCommAndFaultStatus");
    }
    public static int NdrMapCommAndFaultStatus ( Addressable pStubMsg,  Addressable pCommStatus,  Addressable pFaultStatus,  int Status) {
        var mh$ = NdrMapCommAndFaultStatus$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pCommStatus, pFaultStatus, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_SS_THREAD_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcSsAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$854.RpcSsAllocate$MH,"RpcSsAllocate");
    }
    public static MemoryAddress RpcSsAllocate ( long Size) {
        var mh$ = RpcSsAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$854.RpcSsDisableAllocate$MH,"RpcSsDisableAllocate");
    }
    public static void RpcSsDisableAllocate () {
        var mh$ = RpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$854.RpcSsEnableAllocate$MH,"RpcSsEnableAllocate");
    }
    public static void RpcSsEnableAllocate () {
        var mh$ = RpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$854.RpcSsFree$MH,"RpcSsFree");
    }
    public static void RpcSsFree ( Addressable NodeToFree) {
        var mh$ = RpcSsFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$854.RpcSsGetThreadHandle$MH,"RpcSsGetThreadHandle");
    }
    public static MemoryAddress RpcSsGetThreadHandle () {
        var mh$ = RpcSsGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$855.RpcSsSetClientAllocFree$MH,"RpcSsSetClientAllocFree");
    }
    public static void RpcSsSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSsSetClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$855.RpcSsSetThreadHandle$MH,"RpcSsSetThreadHandle");
    }
    public static void RpcSsSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSsSetThreadHandle$MH();
        try {
            mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$857.RpcSsSwapClientAllocFree$MH,"RpcSsSwapClientAllocFree");
    }
    public static void RpcSsSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSsSwapClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$857.RpcSmAllocate$MH,"RpcSmAllocate");
    }
    public static MemoryAddress RpcSmAllocate ( long Size,  Addressable pStatus) {
        var mh$ = RpcSmAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$857.RpcSmClientFree$MH,"RpcSmClientFree");
    }
    public static int RpcSmClientFree ( Addressable pNodeToFree) {
        var mh$ = RpcSmClientFree$MH();
        try {
            return (int)mh$.invokeExact(pNodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$857.RpcSmDestroyClientContext$MH,"RpcSmDestroyClientContext");
    }
    public static int RpcSmDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSmDestroyClientContext$MH();
        try {
            return (int)mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$858.RpcSmDisableAllocate$MH,"RpcSmDisableAllocate");
    }
    public static int RpcSmDisableAllocate () {
        var mh$ = RpcSmDisableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$858.RpcSmEnableAllocate$MH,"RpcSmEnableAllocate");
    }
    public static int RpcSmEnableAllocate () {
        var mh$ = RpcSmEnableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmFree$MH() {
        return RuntimeHelper.requireNonNull(constants$858.RpcSmFree$MH,"RpcSmFree");
    }
    public static int RpcSmFree ( Addressable NodeToFree) {
        var mh$ = RpcSmFree$MH();
        try {
            return (int)mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$858.RpcSmGetThreadHandle$MH,"RpcSmGetThreadHandle");
    }
    public static MemoryAddress RpcSmGetThreadHandle ( Addressable pStatus) {
        var mh$ = RpcSmGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$859.RpcSmSetClientAllocFree$MH,"RpcSmSetClientAllocFree");
    }
    public static int RpcSmSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSmSetClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$859.RpcSmSetThreadHandle$MH,"RpcSmSetThreadHandle");
    }
    public static int RpcSmSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSmSetThreadHandle$MH();
        try {
            return (int)mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$861.RpcSmSwapClientAllocFree$MH,"RpcSmSwapClientAllocFree");
    }
    public static int RpcSmSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSmSwapClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrRpcSsEnableAllocate$MH,"NdrRpcSsEnableAllocate");
    }
    public static void NdrRpcSsEnableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrRpcSsDisableAllocate$MH,"NdrRpcSsDisableAllocate");
    }
    public static void NdrRpcSsDisableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmSetClientToOsf$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrRpcSmSetClientToOsf$MH,"NdrRpcSmSetClientToOsf");
    }
    public static void NdrRpcSmSetClientToOsf ( Addressable pMessage) {
        var mh$ = NdrRpcSmSetClientToOsf$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrRpcSmClientAllocate$MH,"NdrRpcSmClientAllocate");
    }
    public static MemoryAddress NdrRpcSmClientAllocate ( long Size) {
        var mh$ = NdrRpcSmClientAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$861.NdrRpcSmClientFree$MH,"NdrRpcSmClientFree");
    }
    public static void NdrRpcSmClientFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSmClientFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrRpcSsDefaultAllocate$MH,"NdrRpcSsDefaultAllocate");
    }
    public static MemoryAddress NdrRpcSsDefaultAllocate ( long Size) {
        var mh$ = NdrRpcSsDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrRpcSsDefaultFree$MH,"NdrRpcSsDefaultFree");
    }
    public static void NdrRpcSsDefaultFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSsDefaultFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatInit$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrFullPointerXlatInit$MH,"NdrFullPointerXlatInit");
    }
    public static MemoryAddress NdrFullPointerXlatInit ( int NumberOfPointers,  int XlatSide) {
        var mh$ = NdrFullPointerXlatInit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NumberOfPointers, XlatSide);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatFree$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrFullPointerXlatFree$MH,"NdrFullPointerXlatFree");
    }
    public static void NdrFullPointerXlatFree ( Addressable pXlatTables) {
        var mh$ = NdrFullPointerXlatFree$MH();
        try {
            mh$.invokeExact(pXlatTables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrAllocate$MH,"NdrAllocate");
    }
    public static MemoryAddress NdrAllocate ( Addressable pStubMsg,  long Len) {
        var mh$ = NdrAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClearOutParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$862.NdrClearOutParameters$MH,"NdrClearOutParameters");
    }
    public static void NdrClearOutParameters ( Addressable pStubMsg,  Addressable pFormat,  Addressable ArgAddr) {
        var mh$ = NdrClearOutParameters$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, ArgAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrOleAllocate$MH,"NdrOleAllocate");
    }
    public static MemoryAddress NdrOleAllocate ( long Size) {
        var mh$ = NdrOleAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleFree$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrOleFree$MH,"NdrOleFree");
    }
    public static void NdrOleFree ( Addressable NodeToFree) {
        var mh$ = NdrOleFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetUserMarshalInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrGetUserMarshalInfo$MH,"NdrGetUserMarshalInfo");
    }
    public static int NdrGetUserMarshalInfo ( Addressable pFlags,  int InformationLevel,  Addressable pMarshalInfo) {
        var mh$ = NdrGetUserMarshalInfo$MH();
        try {
            return (int)mh$.invokeExact(pFlags, InformationLevel, pMarshalInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCreateServerInterfaceFromStub$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrCreateServerInterfaceFromStub$MH,"NdrCreateServerInterfaceFromStub");
    }
    public static int NdrCreateServerInterfaceFromStub ( Addressable pStub,  Addressable pServerIf) {
        var mh$ = NdrCreateServerInterfaceFromStub$MH();
        try {
            return (int)mh$.invokeExact(pStub, pServerIf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$863.NdrClientCall3$MH,"NdrClientCall3");
    }
    public static MemorySegment NdrClientCall3 ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = NdrClientCall3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$863.Ndr64AsyncClientCall$MH,"Ndr64AsyncClientCall");
    }
    public static MemorySegment Ndr64AsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64AsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64DcomAsyncClientCall$MH,"Ndr64DcomAsyncClientCall");
    }
    public static MemorySegment Ndr64DcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64DcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64AsyncServerCall$MH,"Ndr64AsyncServerCall");
    }
    public static void Ndr64AsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall64$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64AsyncServerCall64$MH,"Ndr64AsyncServerCall64");
    }
    public static void Ndr64AsyncServerCall64 ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64AsyncServerCallAll$MH,"Ndr64AsyncServerCallAll");
    }
    public static void Ndr64AsyncServerCallAll ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64AsyncStubCall$MH,"Ndr64AsyncStubCall");
    }
    public static int Ndr64AsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64AsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$864.Ndr64DcomAsyncStubCall$MH,"Ndr64DcomAsyncStubCall");
    }
    public static int Ndr64DcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64DcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrStubCall3$MH,"NdrStubCall3");
    }
    public static int NdrStubCall3 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall3$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrServerCallAll$MH,"NdrServerCallAll");
    }
    public static void NdrServerCallAll ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallNdr64$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrServerCallNdr64$MH,"NdrServerCallNdr64");
    }
    public static void NdrServerCallNdr64 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallNdr64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrServerCall3$MH,"NdrServerCall3");
    }
    public static void NdrServerCall3 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall3$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrPartialIgnoreClientMarshall$MH,"NdrPartialIgnoreClientMarshall");
    }
    public static void NdrPartialIgnoreClientMarshall ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$865.NdrPartialIgnoreServerUnmarshall$MH,"NdrPartialIgnoreServerUnmarshall");
    }
    public static void NdrPartialIgnoreServerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory) {
        var mh$ = NdrPartialIgnoreServerUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrPartialIgnoreClientBufferSize$MH,"NdrPartialIgnoreClientBufferSize");
    }
    public static void NdrPartialIgnoreClientBufferSize ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$866.NdrPartialIgnoreServerInitialize$MH,"NdrPartialIgnoreServerInitialize");
    }
    public static void NdrPartialIgnoreServerInitialize ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat) {
        var mh$ = NdrPartialIgnoreServerInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcUserFree$MH() {
        return RuntimeHelper.requireNonNull(constants$866.RpcUserFree$MH,"RpcUserFree");
    }
    public static void RpcUserFree ( Addressable AsyncHandle,  Addressable pBuffer) {
        var mh$ = RpcUserFree$MH();
        try {
            mh$.invokeExact(AsyncHandle, pBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH() {
        return constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH() {
        return constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$866.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"), x);
    }
    public static OfAddress LPOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfDouble DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt SCODE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PSCODE = Constants$root.C_POINTER$LAYOUT;
    public static int MEMCTX_TASK() {
        return (int)1L;
    }
    public static int MEMCTX_SHARED() {
        return (int)2L;
    }
    public static int MEMCTX_MACSYSTEM() {
        return (int)3L;
    }
    public static int MEMCTX_UNKNOWN() {
        return (int)-1L;
    }
    public static int MEMCTX_SAME() {
        return (int)-2L;
    }
    public static int CLSCTX_INPROC_SERVER() {
        return (int)1L;
    }
    public static int CLSCTX_INPROC_HANDLER() {
        return (int)2L;
    }
    public static int CLSCTX_LOCAL_SERVER() {
        return (int)4L;
    }
    public static int CLSCTX_INPROC_SERVER16() {
        return (int)8L;
    }
    public static int CLSCTX_REMOTE_SERVER() {
        return (int)16L;
    }
    public static int CLSCTX_INPROC_HANDLER16() {
        return (int)32L;
    }
    public static int CLSCTX_RESERVED1() {
        return (int)64L;
    }
    public static int CLSCTX_RESERVED2() {
        return (int)128L;
    }
    public static int CLSCTX_RESERVED3() {
        return (int)256L;
    }
    public static int CLSCTX_RESERVED4() {
        return (int)512L;
    }
    public static int CLSCTX_NO_CODE_DOWNLOAD() {
        return (int)1024L;
    }
    public static int CLSCTX_RESERVED5() {
        return (int)2048L;
    }
    public static int CLSCTX_NO_CUSTOM_MARSHAL() {
        return (int)4096L;
    }
    public static int CLSCTX_ENABLE_CODE_DOWNLOAD() {
        return (int)8192L;
    }
    public static int CLSCTX_NO_FAILURE_LOG() {
        return (int)16384L;
    }
    public static int CLSCTX_DISABLE_AAA() {
        return (int)32768L;
    }
    public static int CLSCTX_ENABLE_AAA() {
        return (int)65536L;
    }
    public static int CLSCTX_FROM_DEFAULT_CONTEXT() {
        return (int)131072L;
    }
    public static int CLSCTX_ACTIVATE_X86_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_32_BIT_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_64_BIT_SERVER() {
        return (int)524288L;
    }
    public static int CLSCTX_ENABLE_CLOAKING() {
        return (int)1048576L;
    }
    public static int CLSCTX_APPCONTAINER() {
        return (int)4194304L;
    }
    public static int CLSCTX_ACTIVATE_AAA_AS_IU() {
        return (int)8388608L;
    }
    public static int CLSCTX_RESERVED6() {
        return (int)16777216L;
    }
    public static int CLSCTX_ACTIVATE_ARM32_SERVER() {
        return (int)33554432L;
    }
    public static int CLSCTX_PS_DLL() {
        return (int)-2147483648L;
    }
    public static int MSHLFLAGS_NORMAL() {
        return (int)0L;
    }
    public static int MSHLFLAGS_TABLESTRONG() {
        return (int)1L;
    }
    public static int MSHLFLAGS_TABLEWEAK() {
        return (int)2L;
    }
    public static int MSHLFLAGS_NOPING() {
        return (int)4L;
    }
    public static int MSHLFLAGS_RESERVED1() {
        return (int)8L;
    }
    public static int MSHLFLAGS_RESERVED2() {
        return (int)16L;
    }
    public static int MSHLFLAGS_RESERVED3() {
        return (int)32L;
    }
    public static int MSHLFLAGS_RESERVED4() {
        return (int)64L;
    }
    public static int MSHCTX_LOCAL() {
        return (int)0L;
    }
    public static int MSHCTX_NOSHAREDMEM() {
        return (int)1L;
    }
    public static int MSHCTX_DIFFERENTMACHINE() {
        return (int)2L;
    }
    public static int MSHCTX_INPROC() {
        return (int)3L;
    }
    public static int MSHCTX_CROSSCTX() {
        return (int)4L;
    }
    public static int MSHCTX_RESERVED1() {
        return (int)5L;
    }
    public static OfAddress UP_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_DWORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypesBase_v0_1_c_ifspec$LAYOUT() {
        return constants$866.IWinTypesBase_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_c_ifspec$VH() {
        return constants$866.IWinTypesBase_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$866.IWinTypesBase_v0_1_c_ifspec$SEGMENT,"IWinTypesBase_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$866.IWinTypesBase_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$866.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"));
    }
    public static void IWinTypesBase_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$866.IWinTypesBase_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$866.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypesBase_v0_1_s_ifspec$LAYOUT() {
        return constants$867.IWinTypesBase_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_s_ifspec$VH() {
        return constants$867.IWinTypesBase_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.IWinTypesBase_v0_1_s_ifspec$SEGMENT,"IWinTypesBase_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.IWinTypesBase_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"));
    }
    public static void IWinTypesBase_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$867.IWinTypesBase_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"), x);
    }
    public static OfAddress LPBLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH() {
        return constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH() {
        return constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH() {
        return constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH() {
        return constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"), x);
    }
    public static int DVASPECT_CONTENT() {
        return (int)1L;
    }
    public static int DVASPECT_THUMBNAIL() {
        return (int)2L;
    }
    public static int DVASPECT_ICON() {
        return (int)4L;
    }
    public static int DVASPECT_DOCPRINT() {
        return (int)8L;
    }
    public static int STGC_DEFAULT() {
        return (int)0L;
    }
    public static int STGC_OVERWRITE() {
        return (int)1L;
    }
    public static int STGC_ONLYIFCURRENT() {
        return (int)2L;
    }
    public static int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE() {
        return (int)4L;
    }
    public static int STGC_CONSOLIDATE() {
        return (int)8L;
    }
    public static int STGMOVE_MOVE() {
        return (int)0L;
    }
    public static int STGMOVE_COPY() {
        return (int)1L;
    }
    public static int STGMOVE_SHALLOWCOPY() {
        return (int)2L;
    }
    public static int STATFLAG_DEFAULT() {
        return (int)0L;
    }
    public static int STATFLAG_NONAME() {
        return (int)1L;
    }
    public static int STATFLAG_NOOPEN() {
        return (int)2L;
    }
    public static OfAddress HCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireCLIPFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypes_v0_1_c_ifspec$LAYOUT() {
        return constants$867.IWinTypes_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_c_ifspec$VH() {
        return constants$867.IWinTypes_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$867.IWinTypes_v0_1_c_ifspec$SEGMENT,"IWinTypes_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$867.IWinTypes_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$867.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"));
    }
    public static void IWinTypes_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$867.IWinTypes_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$867.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypes_v0_1_s_ifspec$LAYOUT() {
        return constants$868.IWinTypes_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_s_ifspec$VH() {
        return constants$868.IWinTypes_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.IWinTypes_v0_1_s_ifspec$SEGMENT,"IWinTypes_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$868.IWinTypes_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$868.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"));
    }
    public static void IWinTypes_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$868.IWinTypes_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$868.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"), x);
    }
    public static OfDouble DATE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress LPCY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDECIMAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort VARIANT_BOOL = Constants$root.C_SHORT$LAYOUT;
    public static OfAddress LPBSTRBLOB = Constants$root.C_POINTER$LAYOUT;
    public static int VT_EMPTY() {
        return (int)0L;
    }
    public static int VT_NULL() {
        return (int)1L;
    }
    public static int VT_I2() {
        return (int)2L;
    }
    public static int VT_I4() {
        return (int)3L;
    }
    public static int VT_R4() {
        return (int)4L;
    }
    public static int VT_R8() {
        return (int)5L;
    }
    public static int VT_CY() {
        return (int)6L;
    }
    public static int VT_DATE() {
        return (int)7L;
    }
    public static int VT_BSTR() {
        return (int)8L;
    }
    public static int VT_DISPATCH() {
        return (int)9L;
    }
    public static int VT_ERROR() {
        return (int)10L;
    }
    public static int VT_BOOL() {
        return (int)11L;
    }
    public static int VT_VARIANT() {
        return (int)12L;
    }
    public static int VT_UNKNOWN() {
        return (int)13L;
    }
    public static int VT_DECIMAL() {
        return (int)14L;
    }
    public static int VT_I1() {
        return (int)16L;
    }
    public static int VT_UI1() {
        return (int)17L;
    }
    public static int VT_UI2() {
        return (int)18L;
    }
    public static int VT_UI4() {
        return (int)19L;
    }
    public static int VT_I8() {
        return (int)20L;
    }
    public static int VT_UI8() {
        return (int)21L;
    }
    public static int VT_INT() {
        return (int)22L;
    }
    public static int VT_UINT() {
        return (int)23L;
    }
    public static int VT_VOID() {
        return (int)24L;
    }
    public static int VT_HRESULT() {
        return (int)25L;
    }
    public static int VT_PTR() {
        return (int)26L;
    }
    public static int VT_SAFEARRAY() {
        return (int)27L;
    }
    public static int VT_CARRAY() {
        return (int)28L;
    }
    public static int VT_USERDEFINED() {
        return (int)29L;
    }
    public static int VT_LPSTR() {
        return (int)30L;
    }
    public static int VT_LPWSTR() {
        return (int)31L;
    }
    public static int VT_RECORD() {
        return (int)36L;
    }
    public static int VT_INT_PTR() {
        return (int)37L;
    }
    public static int VT_UINT_PTR() {
        return (int)38L;
    }
    public static int VT_FILETIME() {
        return (int)64L;
    }
    public static int VT_BLOB() {
        return (int)65L;
    }
    public static int VT_STREAM() {
        return (int)66L;
    }
    public static int VT_STORAGE() {
        return (int)67L;
    }
    public static int VT_STREAMED_OBJECT() {
        return (int)68L;
    }
    public static int VT_STORED_OBJECT() {
        return (int)69L;
    }
    public static int VT_BLOB_OBJECT() {
        return (int)70L;
    }
    public static int VT_CF() {
        return (int)71L;
    }
    public static int VT_CLSID() {
        return (int)72L;
    }
    public static int VT_VERSIONED_STREAM() {
        return (int)73L;
    }
    public static int VT_BSTR_BLOB() {
        return (int)4095L;
    }
    public static int VT_VECTOR() {
        return (int)4096L;
    }
    public static int VT_ARRAY() {
        return (int)8192L;
    }
    public static int VT_BYREF() {
        return (int)16384L;
    }
    public static int VT_RESERVED() {
        return (int)32768L;
    }
    public static int VT_ILLEGAL() {
        return (int)65535L;
    }
    public static int VT_ILLEGALMASKED() {
        return (int)4095L;
    }
    public static int VT_TYPEMASK() {
        return (int)4095L;
    }
    public static int TYSPEC_CLSID() {
        return (int)0L;
    }
    public static int TYSPEC_FILEEXT() {
        return (int)1L;
    }
    public static int TYSPEC_MIMETYPE() {
        return (int)2L;
    }
    public static int TYSPEC_FILENAME() {
        return (int)3L;
    }
    public static int TYSPEC_PROGID() {
        return (int)4L;
    }
    public static int TYSPEC_PACKAGENAME() {
        return (int)5L;
    }
    public static int TYSPEC_OBJECTID() {
        return (int)6L;
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH() {
        return constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH() {
        return constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$868.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemorySegment GUID_DEVINTERFACE_DISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.GUID_DEVINTERFACE_DISK$SEGMENT,"GUID_DEVINTERFACE_DISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDROM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.GUID_DEVINTERFACE_CDROM$SEGMENT,"GUID_DEVINTERFACE_CDROM");
    }
    public static MemorySegment GUID_DEVINTERFACE_PARTITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$868.GUID_DEVINTERFACE_PARTITION$SEGMENT,"GUID_DEVINTERFACE_PARTITION");
    }
    public static MemorySegment GUID_DEVINTERFACE_TAPE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_TAPE$SEGMENT,"GUID_DEVINTERFACE_TAPE");
    }
    public static MemorySegment GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT,"GUID_DEVINTERFACE_WRITEONCEDISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT,"GUID_DEVINTERFACE_MEDIUMCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_FLOPPY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_FLOPPY$SEGMENT,"GUID_DEVINTERFACE_FLOPPY");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$869.GUID_DEVINTERFACE_CDCHANGER$SEGMENT,"GUID_DEVINTERFACE_CDCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_STORAGEPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_STORAGEPORT$SEGMENT,"GUID_DEVINTERFACE_STORAGEPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_VMLUN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_VMLUN$SEGMENT,"GUID_DEVINTERFACE_VMLUN");
    }
    public static MemorySegment GUID_DEVINTERFACE_SES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_SES$SEGMENT,"GUID_DEVINTERFACE_SES");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_SERVICE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT,"GUID_DEVINTERFACE_HIDDEN_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$870.GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT,"GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB");
    }
    public static MemorySegment GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$871.GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT,"GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE");
    }
    public static MemorySegment GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$871.GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT,"GUID_SCM_PD_HEALTH_NOTIFICATION");
    }
    public static MemorySegment GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$871.GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT,"GUID_SCM_PD_PASSTHROUGH_INVDIMM");
    }
    public static MemorySegment GUID_DEVINTERFACE_COMPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$871.GUID_DEVINTERFACE_COMPORT$SEGMENT,"GUID_DEVINTERFACE_COMPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$871.GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT,"GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR");
    }
    public static OfAddress PSTORAGE_HOTPLUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BUS_RESET_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BREAK_RESERVATION_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPREVENT_MEDIA_REMOVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLASS_MEDIA_CHANGE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static int DDS_4mm() {
        return (int)32L;
    }
    public static int MiniQic() {
        return (int)33L;
    }
    public static int Travan() {
        return (int)34L;
    }
    public static int QIC() {
        return (int)35L;
    }
    public static int MP_8mm() {
        return (int)36L;
    }
    public static int AME_8mm() {
        return (int)37L;
    }
    public static int AIT1_8mm() {
        return (int)38L;
    }
    public static int DLT() {
        return (int)39L;
    }
    public static int NCTP() {
        return (int)40L;
    }
    public static int IBM_3480() {
        return (int)41L;
    }
    public static int IBM_3490E() {
        return (int)42L;
    }
    public static int IBM_Magstar_3590() {
        return (int)43L;
    }
    public static int IBM_Magstar_MP() {
        return (int)44L;
    }
    public static int STK_DATA_D3() {
        return (int)45L;
    }
    public static int SONY_DTF() {
        return (int)46L;
    }
    public static int DV_6mm() {
        return (int)47L;
    }
    public static int DMI() {
        return (int)48L;
    }
    public static int SONY_D2() {
        return (int)49L;
    }
    public static int CLEANER_CARTRIDGE() {
        return (int)50L;
    }
    public static int CD_ROM() {
        return (int)51L;
    }
    public static int CD_R() {
        return (int)52L;
    }
    public static int CD_RW() {
        return (int)53L;
    }
    public static int DVD_ROM() {
        return (int)54L;
    }
    public static int DVD_R() {
        return (int)55L;
    }
    public static int DVD_RW() {
        return (int)56L;
    }
    public static int MO_3_RW() {
        return (int)57L;
    }
    public static int MO_5_WO() {
        return (int)58L;
    }
    public static int MO_5_RW() {
        return (int)59L;
    }
    public static int MO_5_LIMDOW() {
        return (int)60L;
    }
    public static int PC_5_WO() {
        return (int)61L;
    }
    public static int PC_5_RW() {
        return (int)62L;
    }
    public static int PD_5_RW() {
        return (int)63L;
    }
    public static int ABL_5_WO() {
        return (int)64L;
    }
    public static int PINNACLE_APEX_5_RW() {
        return (int)65L;
    }
    public static int SONY_12_WO() {
        return (int)66L;
    }
    public static int PHILIPS_12_WO() {
        return (int)67L;
    }
    public static int HITACHI_12_WO() {
        return (int)68L;
    }
    public static int CYGNET_12_WO() {
        return (int)69L;
    }
    public static int KODAK_14_WO() {
        return (int)70L;
    }
    public static int MO_NFR_525() {
        return (int)71L;
    }
    public static int NIKON_12_RW() {
        return (int)72L;
    }
    public static int IOMEGA_ZIP() {
        return (int)73L;
    }
    public static int IOMEGA_JAZ() {
        return (int)74L;
    }
    public static int SYQUEST_EZ135() {
        return (int)75L;
    }
    public static int SYQUEST_EZFLYER() {
        return (int)76L;
    }
    public static int SYQUEST_SYJET() {
        return (int)77L;
    }
    public static int AVATAR_F2() {
        return (int)78L;
    }
    public static int MP2_8mm() {
        return (int)79L;
    }
    public static int DST_S() {
        return (int)80L;
    }
    public static int DST_M() {
        return (int)81L;
    }
    public static int DST_L() {
        return (int)82L;
    }
    public static int VXATape_1() {
        return (int)83L;
    }
    public static int VXATape_2() {
        return (int)84L;
    }
    public static int STK_9840() {
        return (int)85L;
    }
    public static int LTO_Ultrium() {
        return (int)86L;
    }
    public static int LTO_Accelis() {
        return (int)87L;
    }
    public static int DVD_RAM() {
        return (int)88L;
    }
    public static int AIT_8mm() {
        return (int)89L;
    }
    public static int ADR_1() {
        return (int)90L;
    }
    public static int ADR_2() {
        return (int)91L;
    }
    public static int STK_9940() {
        return (int)92L;
    }
    public static int SAIT() {
        return (int)93L;
    }
    public static int VXATape() {
        return (int)94L;
    }
    public static OfAddress PSTORAGE_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int BusTypeUnknown() {
        return (int)0L;
    }
    public static int BusTypeScsi() {
        return (int)1L;
    }
    public static int BusTypeAtapi() {
        return (int)2L;
    }
    public static int BusTypeAta() {
        return (int)3L;
    }
    public static int BusType1394() {
        return (int)4L;
    }
    public static int BusTypeSsa() {
        return (int)5L;
    }
    public static int BusTypeFibre() {
        return (int)6L;
    }
    public static int BusTypeUsb() {
        return (int)7L;
    }
    public static int BusTypeRAID() {
        return (int)8L;
    }
    public static int BusTypeiScsi() {
        return (int)9L;
    }
    public static int BusTypeSas() {
        return (int)10L;
    }
    public static int BusTypeSata() {
        return (int)11L;
    }
    public static int BusTypeSd() {
        return (int)12L;
    }
    public static int BusTypeMmc() {
        return (int)13L;
    }
    public static int BusTypeVirtual() {
        return (int)14L;
    }
    public static int BusTypeFileBackedVirtual() {
        return (int)15L;
    }
    public static int BusTypeSpaces() {
        return (int)16L;
    }
    public static int BusTypeNvme() {
        return (int)17L;
    }
    public static int BusTypeSCM() {
        return (int)18L;
    }
    public static int BusTypeUfs() {
        return (int)19L;
    }
    public static int BusTypeMax() {
        return (int)20L;
    }
    public static int BusTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_BUS_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MEDIA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_MEDIA_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PREDICT_FAILURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_FAILURE_PREDICTION_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardQuery() {
        return (int)0L;
    }
    public static int PropertyExistsQuery() {
        return (int)1L;
    }
    public static int PropertyMaskQuery() {
        return (int)2L;
    }
    public static int PropertyQueryMaxDefined() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardSet() {
        return (int)0L;
    }
    public static int PropertyExistsSet() {
        return (int)1L;
    }
    public static int PropertySetMaxDefined() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_SET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDeviceProperty() {
        return (int)0L;
    }
    public static int StorageAdapterProperty() {
        return (int)1L;
    }
    public static int StorageDeviceIdProperty() {
        return (int)2L;
    }
    public static int StorageDeviceUniqueIdProperty() {
        return (int)3L;
    }
    public static int StorageDeviceWriteCacheProperty() {
        return (int)4L;
    }
    public static int StorageMiniportProperty() {
        return (int)5L;
    }
    public static int StorageAccessAlignmentProperty() {
        return (int)6L;
    }
    public static int StorageDeviceSeekPenaltyProperty() {
        return (int)7L;
    }
    public static int StorageDeviceTrimProperty() {
        return (int)8L;
    }
    public static int StorageDeviceWriteAggregationProperty() {
        return (int)9L;
    }
    public static int StorageDeviceDeviceTelemetryProperty() {
        return (int)10L;
    }
    public static int StorageDeviceLBProvisioningProperty() {
        return (int)11L;
    }
    public static int StorageDevicePowerProperty() {
        return (int)12L;
    }
    public static int StorageDeviceCopyOffloadProperty() {
        return (int)13L;
    }
    public static int StorageDeviceResiliencyProperty() {
        return (int)14L;
    }
    public static int StorageDeviceMediumProductType() {
        return (int)15L;
    }
    public static int StorageAdapterRpmbProperty() {
        return (int)16L;
    }
    public static int StorageAdapterCryptoProperty() {
        return (int)17L;
    }
    public static int StorageDeviceIoCapabilityProperty() {
        return (int)48L;
    }
    public static int StorageAdapterProtocolSpecificProperty() {
        return (int)49L;
    }
    public static int StorageDeviceProtocolSpecificProperty() {
        return (int)50L;
    }
    public static int StorageAdapterTemperatureProperty() {
        return (int)51L;
    }
    public static int StorageDeviceTemperatureProperty() {
        return (int)52L;
    }
    public static int StorageAdapterPhysicalTopologyProperty() {
        return (int)53L;
    }
    public static int StorageDevicePhysicalTopologyProperty() {
        return (int)54L;
    }
    public static int StorageDeviceAttributesProperty() {
        return (int)55L;
    }
    public static int StorageDeviceManagementStatus() {
        return (int)56L;
    }
    public static int StorageAdapterSerialNumberProperty() {
        return (int)57L;
    }
    public static int StorageDeviceLocationProperty() {
        return (int)58L;
    }
    public static int StorageDeviceNumaProperty() {
        return (int)59L;
    }
    public static int StorageDeviceZonedDeviceProperty() {
        return (int)60L;
    }
    public static int StorageDeviceUnsafeShutdownCount() {
        return (int)61L;
    }
    public static int StorageDeviceEnduranceProperty() {
        return (int)62L;
    }
    public static OfAddress PSTORAGE_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePortCodeSetReserved() {
        return (int)0L;
    }
    public static int StoragePortCodeSetStorport() {
        return (int)1L;
    }
    public static int StoragePortCodeSetSCSIport() {
        return (int)2L;
    }
    public static int StoragePortCodeSetSpaceport() {
        return (int)3L;
    }
    public static int StoragePortCodeSetATAport() {
        return (int)4L;
    }
    public static int StoragePortCodeSetUSBport() {
        return (int)5L;
    }
    public static int StoragePortCodeSetSBP2port() {
        return (int)6L;
    }
    public static int StoragePortCodeSetSDport() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_PORT_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MINIPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdCodeSetReserved() {
        return (int)0L;
    }
    public static int StorageIdCodeSetBinary() {
        return (int)1L;
    }
    public static int StorageIdCodeSetAscii() {
        return (int)2L;
    }
    public static int StorageIdCodeSetUtf8() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdTypeVendorSpecific() {
        return (int)0L;
    }
    public static int StorageIdTypeVendorId() {
        return (int)1L;
    }
    public static int StorageIdTypeEUI64() {
        return (int)2L;
    }
    public static int StorageIdTypeFCPHName() {
        return (int)3L;
    }
    public static int StorageIdTypePortRelative() {
        return (int)4L;
    }
    public static int StorageIdTypeTargetPortGroup() {
        return (int)5L;
    }
    public static int StorageIdTypeLogicalUnitGroup() {
        return (int)6L;
    }
    public static int StorageIdTypeMD5LogicalUnitIdentifier() {
        return (int)7L;
    }
    public static int StorageIdTypeScsiNameString() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdNAAFormatIEEEExtended() {
        return (int)2L;
    }
    public static int StorageIdNAAFormatIEEERegistered() {
        return (int)3L;
    }
    public static int StorageIdNAAFormatIEEEERegisteredExtended() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_ID_NAA_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdAssocDevice() {
        return (int)0L;
    }
    public static int StorageIdAssocPort() {
        return (int)1L;
    }
    public static int StorageIdAssocTarget() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ASSOCIATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ID_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_SEEK_PENALTY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_WRITE_AGGREGATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_TRIM_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LB_PROVISIONING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_LB_PROVISIONING_MAP_RESOURCES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_POWER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_COPY_OFFLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageRpmbFrameTypeUnknown() {
        return (int)0L;
    }
    public static int StorageRpmbFrameTypeStandard() {
        return (int)1L;
    }
    public static int StorageRpmbFrameTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_RPMB_FRAME_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoAlgorithmUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoAlgorithmXTSAES() {
        return (int)1L;
    }
    public static int StorageCryptoAlgorithmBitlockerAESCBC() {
        return (int)2L;
    }
    public static int StorageCryptoAlgorithmAESECB() {
        return (int)3L;
    }
    public static int StorageCryptoAlgorithmESSIVAESCBC() {
        return (int)4L;
    }
    public static int StorageCryptoAlgorithmMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_CRYPTO_ALGORITHM_ID = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoKeySizeUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoKeySize128Bits() {
        return (int)1L;
    }
    public static int StorageCryptoKeySize192Bits() {
        return (int)2L;
    }
    public static int StorageCryptoKeySize256Bits() {
        return (int)3L;
    }
    public static int StorageCryptoKeySize512Bits() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_CRYPTO_KEY_SIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_CAPABILITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierMediaTypeUnspecified() {
        return (int)0L;
    }
    public static int StorageTierMediaTypeDisk() {
        return (int)1L;
    }
    public static int StorageTierMediaTypeSsd() {
        return (int)2L;
    }
    public static int StorageTierMediaTypeScm() {
        return (int)4L;
    }
    public static int StorageTierMediaTypeMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_TIER_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierClassUnspecified() {
        return (int)0L;
    }
    public static int StorageTierClassCapacity() {
        return (int)1L;
    }
    public static int StorageTierClassPerformance() {
        return (int)2L;
    }
    public static int StorageTierClassMax() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_TIER_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_TIERING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int ProtocolTypeUnknown() {
        return (int)0L;
    }
    public static int ProtocolTypeScsi() {
        return (int)1L;
    }
    public static int ProtocolTypeAta() {
        return (int)2L;
    }
    public static int ProtocolTypeNvme() {
        return (int)3L;
    }
    public static int ProtocolTypeSd() {
        return (int)4L;
    }
    public static int ProtocolTypeUfs() {
        return (int)5L;
    }
    public static int ProtocolTypeProprietary() {
        return (int)126L;
    }
    public static int ProtocolTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int NVMeDataTypeUnknown() {
        return (int)0L;
    }
    public static int NVMeDataTypeIdentify() {
        return (int)1L;
    }
    public static int NVMeDataTypeLogPage() {
        return (int)2L;
    }
    public static int NVMeDataTypeFeature() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_NVME_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int AtaDataTypeUnknown() {
        return (int)0L;
    }
    public static int AtaDataTypeIdentify() {
        return (int)1L;
    }
    public static int AtaDataTypeLogPage() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_ATA_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int UfsDataTypeUnknown() {
        return (int)0L;
    }
    public static int UfsDataTypeQueryDescriptor() {
        return (int)1L;
    }
    public static int UfsDataTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_UFS_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_THRESHOLD = Constants$root.C_POINTER$LAYOUT;
    public static int FormFactorUnknown() {
        return (int)0L;
    }
    public static int FormFactor3_5() {
        return (int)1L;
    }
    public static int FormFactor2_5() {
        return (int)2L;
    }
    public static int FormFactor1_8() {
        return (int)3L;
    }
    public static int FormFactor1_8Less() {
        return (int)4L;
    }
    public static int FormFactorEmbedded() {
        return (int)5L;
    }
    public static int FormFactorMemoryCard() {
        return (int)6L;
    }
    public static int FormFactormSata() {
        return (int)7L;
    }
    public static int FormFactorM_2() {
        return (int)8L;
    }
    public static int FormFactorPCIeBoard() {
        return (int)9L;
    }
    public static int FormFactorDimm() {
        return (int)10L;
    }
    public static OfAddress PSTORAGE_DEVICE_FORM_FACTOR = Constants$root.C_POINTER$LAYOUT;
    public static int HealthStatusUnknown() {
        return (int)0L;
    }
    public static int HealthStatusNormal() {
        return (int)1L;
    }
    public static int HealthStatusThrottled() {
        return (int)2L;
    }
    public static int HealthStatusWarning() {
        return (int)3L;
    }
    public static int HealthStatusDisabled() {
        return (int)4L;
    }
    public static int HealthStatusFailed() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_COMPONENT_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_SPEC_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_DEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_ADAPTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_NODE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int DiskHealthUnknown() {
        return (int)0L;
    }
    public static int DiskHealthUnhealthy() {
        return (int)1L;
    }
    public static int DiskHealthWarning() {
        return (int)2L;
    }
    public static int DiskHealthHealthy() {
        return (int)3L;
    }
    public static int DiskHealthMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DISK_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpStatusNone() {
        return (int)0L;
    }
    public static int DiskOpStatusUnknown() {
        return (int)1L;
    }
    public static int DiskOpStatusOk() {
        return (int)2L;
    }
    public static int DiskOpStatusPredictingFailure() {
        return (int)3L;
    }
    public static int DiskOpStatusInService() {
        return (int)4L;
    }
    public static int DiskOpStatusHardwareError() {
        return (int)5L;
    }
    public static int DiskOpStatusNotUsable() {
        return (int)6L;
    }
    public static int DiskOpStatusTransientError() {
        return (int)7L;
    }
    public static int DiskOpStatusMissing() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_DISK_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpReasonUnknown() {
        return (int)0L;
    }
    public static int DiskOpReasonScsiSenseCode() {
        return (int)1L;
    }
    public static int DiskOpReasonMedia() {
        return (int)2L;
    }
    public static int DiskOpReasonIo() {
        return (int)3L;
    }
    public static int DiskOpReasonThresholdExceeded() {
        return (int)4L;
    }
    public static int DiskOpReasonLostData() {
        return (int)5L;
    }
    public static int DiskOpReasonEnergySource() {
        return (int)6L;
    }
    public static int DiskOpReasonConfiguration() {
        return (int)7L;
    }
    public static int DiskOpReasonDeviceController() {
        return (int)8L;
    }
    public static int DiskOpReasonMediaController() {
        return (int)9L;
    }
    public static int DiskOpReasonComponent() {
        return (int)10L;
    }
    public static int DiskOpReasonNVDIMM_N() {
        return (int)11L;
    }
    public static int DiskOpReasonBackgroundOperation() {
        return (int)12L;
    }
    public static int DiskOpReasonInvalidFirmware() {
        return (int)13L;
    }
    public static int DiskOpReasonHealthCheck() {
        return (int)14L;
    }
    public static int DiskOpReasonLostDataPersistence() {
        return (int)15L;
    }
    public static int DiskOpReasonDisabledByPlatform() {
        return (int)16L;
    }
    public static int DiskOpReasonLostWritePersistence() {
        return (int)17L;
    }
    public static int DiskOpReasonDataPersistenceLossImminent() {
        return (int)18L;
    }
    public static int DiskOpReasonWritePersistenceLossImminent() {
        return (int)19L;
    }
    public static int DiskOpReasonMax() {
        return (int)20L;
    }
    public static OfAddress PSTORAGE_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OPERATIONAL_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_SERIAL_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int ZonedDeviceTypeUnknown() {
        return (int)0L;
    }
    public static int ZonedDeviceTypeHostManaged() {
        return (int)1L;
    }
    public static int ZonedDeviceTypeHostAware() {
        return (int)2L;
    }
    public static int ZonedDeviceTypeDeviceManaged() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONED_DEVICE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneTypeUnknown() {
        return (int)0L;
    }
    public static int ZoneTypeConventional() {
        return (int)1L;
    }
    public static int ZoneTypeSequentialWriteRequired() {
        return (int)2L;
    }
    public static int ZoneTypeSequentialWritePreferred() {
        return (int)3L;
    }
    public static int ZoneTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_ZONE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONED_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_LOCATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMA_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_DEFINITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NOTIFICATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_READ_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_READ_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_WRITE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LBP_STATE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static int ZonesAttributeTypeAndLengthMayDifferent() {
        return (int)0L;
    }
    public static int ZonesAttributeTypeSameLengthSame() {
        return (int)1L;
    }
    public static int ZonesAttributeTypeSameLastZoneLengthDifferent() {
        return (int)2L;
    }
    public static int ZonesAttributeTypeMayDifferentLengthSame() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONES_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneConditionConventional() {
        return (int)0L;
    }
    public static int ZoneConditionEmpty() {
        return (int)1L;
    }
    public static int ZoneConditionImplicitlyOpened() {
        return (int)2L;
    }
    public static int ZoneConditionExplicitlyOpened() {
        return (int)3L;
    }
    public static int ZoneConditionClosed() {
        return (int)4L;
    }
    public static int ZoneConditionReadOnly() {
        return (int)13L;
    }
    public static int ZoneConditionFull() {
        return (int)14L;
    }
    public static int ZoneConditionOffline() {
        return (int)15L;
    }
    public static OfAddress PSTORAGE_ZONE_CONDITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_RANGE_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_FREE_SPACE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_CONVERSION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DeviceDsmParameterBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$871.DeviceDsmParameterBlock$MH,"DeviceDsmParameterBlock");
    }
    public static MemoryAddress DeviceDsmParameterBlock ( Addressable Input) {
        var mh$ = DeviceDsmParameterBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmDataSetRanges$MH,"DeviceDsmDataSetRanges");
    }
    public static MemoryAddress DeviceDsmDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmDataSetRanges$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmNumberOfDataSetRanges$MH,"DeviceDsmNumberOfDataSetRanges");
    }
    public static int DeviceDsmNumberOfDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetInputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmGetInputLength$MH,"DeviceDsmGetInputLength");
    }
    public static int DeviceDsmGetInputLength ( Addressable Definition,  int ParameterBlockLength,  int NumberOfDataSetRanges) {
        var mh$ = DeviceDsmGetInputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, ParameterBlockLength, NumberOfDataSetRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmGetNumberOfDataSetRanges$MH,"DeviceDsmGetNumberOfDataSetRanges");
    }
    public static int DeviceDsmGetNumberOfDataSetRanges ( Addressable Definition,  int InputLength,  int ParameterBlockLength) {
        var mh$ = DeviceDsmGetNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Definition, InputLength, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeInput$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmInitializeInput$MH,"DeviceDsmInitializeInput");
    }
    public static void DeviceDsmInitializeInput ( Addressable Definition,  Addressable Input,  int InputLength,  int Flags,  Addressable Parameters,  int ParameterBlockLength) {
        var mh$ = DeviceDsmInitializeInput$MH();
        try {
            mh$.invokeExact(Definition, Input, InputLength, Flags, Parameters, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmAddDataSetRange$MH() {
        return RuntimeHelper.requireNonNull(constants$872.DeviceDsmAddDataSetRange$MH,"DeviceDsmAddDataSetRange");
    }
    public static byte DeviceDsmAddDataSetRange ( Addressable Input,  int InputLength,  long Offset,  long Length) {
        var mh$ = DeviceDsmAddDataSetRange$MH();
        try {
            return (byte)mh$.invokeExact(Input, InputLength, Offset, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateInput$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmValidateInput$MH,"DeviceDsmValidateInput");
    }
    public static byte DeviceDsmValidateInput ( Addressable Definition,  Addressable Input,  int InputLength) {
        var mh$ = DeviceDsmValidateInput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Input, InputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmOutputBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmOutputBlock$MH,"DeviceDsmOutputBlock");
    }
    public static MemoryAddress DeviceDsmOutputBlock ( Addressable Output) {
        var mh$ = DeviceDsmOutputBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmGetOutputLength$MH,"DeviceDsmGetOutputLength");
    }
    public static int DeviceDsmGetOutputLength ( Addressable Definition,  int OutputBlockLength) {
        var mh$ = DeviceDsmGetOutputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmValidateOutputLength$MH,"DeviceDsmValidateOutputLength");
    }
    public static byte DeviceDsmValidateOutputLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutputLength$MH();
        try {
            return (byte)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputBlockLength$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmGetOutputBlockLength$MH,"DeviceDsmGetOutputBlockLength");
    }
    public static int DeviceDsmGetOutputBlockLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmGetOutputBlockLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DeviceDsmInitializeOutput$MH,"DeviceDsmInitializeOutput");
    }
    public static void DeviceDsmInitializeOutput ( Addressable Definition,  Addressable Output,  int OutputLength,  int Flags) {
        var mh$ = DeviceDsmInitializeOutput$MH();
        try {
            mh$.invokeExact(Definition, Output, OutputLength, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$874.DeviceDsmValidateOutput$MH,"DeviceDsmValidateOutput");
    }
    public static byte DeviceDsmValidateOutput ( Addressable Definition,  Addressable Output,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Output, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSTORAGE_GET_BC_PROPERTIES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PRIORITY_HINT_SUPPORT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticLevelDefault() {
        return (int)0L;
    }
    public static int StorageDiagnosticLevelMax() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticTargetTypeUndefined() {
        return (int)0L;
    }
    public static int StorageDiagnosticTargetTypePort() {
        return (int)1L;
    }
    public static int StorageDiagnosticTargetTypeMiniport() {
        return (int)2L;
    }
    public static int StorageDiagnosticTargetTypeHbaFirmware() {
        return (int)3L;
    }
    public static int StorageDiagnosticTargetTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_TARGET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceInternalStatusDataRequestTypeUndefined() {
        return (int)0L;
    }
    public static int DeviceCurrentInternalStatusDataHeader() {
        return (int)1L;
    }
    public static int DeviceCurrentInternalStatusData() {
        return (int)2L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceStatusDataSetUndefined() {
        return (int)0L;
    }
    public static int DeviceStatusDataSet1() {
        return (int)1L;
    }
    public static int DeviceStatusDataSet2() {
        return (int)2L;
    }
    public static int DeviceStatusDataSet3() {
        return (int)3L;
    }
    public static int DeviceStatusDataSet4() {
        return (int)4L;
    }
    public static int DeviceStatusDataSetMax() {
        return (int)5L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_READ_CAPACITY = Constants$root.C_POINTER$LAYOUT;
    public static int WriteCacheTypeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheTypeNone() {
        return (int)1L;
    }
    public static int WriteCacheTypeWriteBack() {
        return (int)2L;
    }
    public static int WriteCacheTypeWriteThrough() {
        return (int)3L;
    }
    public static int WriteCacheEnableUnknown() {
        return (int)0L;
    }
    public static int WriteCacheDisabled() {
        return (int)1L;
    }
    public static int WriteCacheEnabled() {
        return (int)2L;
    }
    public static int WriteCacheChangeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheNotChangeable() {
        return (int)1L;
    }
    public static int WriteCacheChangeable() {
        return (int)2L;
    }
    public static int WriteThroughUnknown() {
        return (int)0L;
    }
    public static int WriteThroughNotSupported() {
        return (int)1L;
    }
    public static int WriteThroughSupported() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_WRITE_CACHE_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERSISTENT_RESERVE_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int TCCollectionBugCheck() {
        return (int)1L;
    }
    public static int TCCollectionApplicationRequested() {
        return (int)2L;
    }
    public static int TCCollectionDeviceRequested() {
        return (int)3L;
    }
    public static OfAddress PDEVICEDUMP_COLLECTION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SUBSECTION_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STRUCTURE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGP_LOG_PAGE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PUBLIC_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_RESTRICTED_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PRIVATE_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGEDEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWER = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePowerupUnknown() {
        return (int)0L;
    }
    public static int StoragePowerupIO() {
        return (int)1L;
    }
    public static int StoragePowerupDeviceAttention() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_POWERUP_REASON_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWERUP_REASON = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDevicePowerCapUnitsPercent() {
        return (int)0L;
    }
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP_UNITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DATA_FRAME = Constants$root.C_POINTER$LAYOUT;
    public static int StorRpmbProgramAuthKey() {
        return (int)1L;
    }
    public static int StorRpmbQueryWriteCounter() {
        return (int)2L;
    }
    public static int StorRpmbAuthenticatedWrite() {
        return (int)3L;
    }
    public static int StorRpmbAuthenticatedRead() {
        return (int)4L;
    }
    public static int StorRpmbReadResultRequest() {
        return (int)5L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return (int)6L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_RPMB_COMMAND_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_EVENT_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCounterTypeUnknown() {
        return (int)0L;
    }
    public static int StorageCounterTypeTemperatureCelsius() {
        return (int)1L;
    }
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return (int)2L;
    }
    public static int StorageCounterTypeReadErrorsTotal() {
        return (int)3L;
    }
    public static int StorageCounterTypeReadErrorsCorrected() {
        return (int)4L;
    }
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return (int)5L;
    }
    public static int StorageCounterTypeWriteErrorsTotal() {
        return (int)6L;
    }
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return (int)7L;
    }
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return (int)8L;
    }
    public static int StorageCounterTypeManufactureDate() {
        return (int)9L;
    }
    public static int StorageCounterTypeStartStopCycleCount() {
        return (int)10L;
    }
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return (int)11L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return (int)12L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return (int)13L;
    }
    public static int StorageCounterTypeWearPercentage() {
        return (int)14L;
    }
    public static int StorageCounterTypeWearPercentageWarning() {
        return (int)15L;
    }
    public static int StorageCounterTypeWearPercentageMax() {
        return (int)16L;
    }
    public static int StorageCounterTypePowerOnHours() {
        return (int)17L;
    }
    public static int StorageCounterTypeReadLatency100NSMax() {
        return (int)18L;
    }
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return (int)19L;
    }
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return (int)20L;
    }
    public static int StorageCounterTypeMax() {
        return (int)21L;
    }
    public static OfAddress PSTORAGE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
}


